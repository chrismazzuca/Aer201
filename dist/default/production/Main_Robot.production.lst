

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 28 17:13:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79  0000                     
    80                           ; Version 1.45
    81                           ; Generated 16/11/2017 GMT
    82                           ; 
    83                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4620 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	idataCOMRAM
   116  009A08                     __pidataCOMRAM:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _UART
   120  009A08  F2                 	db	low _uart
   121  009A09  01                 	db	high _uart
   122                           
   123                           ;initializer for _drawerClose
   124  009A0A  38                 	db	56
   125                           
   126                           ;initializer for _drawerOpen
   127  009A0B  37                 	db	55
   128                           
   129                           ;initializer for _columnRight
   130  009A0C  34                 	db	52
   131                           
   132                           ;initializer for _columnLeft
   133  009A0D  33                 	db	51
   134                           
   135                           ;initializer for _rowDown
   136  009A0E  32                 	db	50
   137                           
   138                           ;initializer for _rowUp
   139  009A0F  31                 	db	49
   140                           
   141                           	psect	idataBANK0
   142  0099F6                     __pidataBANK0:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _drawerDown
   146  0099F6  36                 	db	54
   147                           
   148                           ;initializer for _drawerUp
   149  0099F7  35                 	db	53
   150                           
   151                           	psect	idataBANK2
   152  009B54                     __pidataBANK2:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _inputs
   156  009B54  FC                 	db	low STR_3
   157  009B55  FF                 	db	high STR_3
   158  009B56  E4                 	db	low (STR_11+2)
   159  009B57  FF                 	db	high (STR_11+2)
   160  009B58  C0                 	db	low (STR_17+3)
   161  009B59  FF                 	db	high (STR_17+3)
   162  009B5A  E7                 	db	low (STR_9+1)
   163  009B5B  FF                 	db	high (STR_9+1)
   164  009B5C  EF                 	db	low (STR_10+1)
   165  009B5D  FF                 	db	high (STR_10+1)
   166  009B5E  BF                 	db	low (STR_17+2)
   167  009B5F  FF                 	db	high (STR_17+2)
   168  009B60  E6                 	db	low STR_9
   169  009B61  FF                 	db	high STR_9
   170  009B62  EE                 	db	low STR_10
   171  009B63  FF                 	db	high STR_10
   172  009B64  E2                 	db	low STR_11
   173  009B65  FF                 	db	high STR_11
   174  009B66  EA                 	db	low STR_12
   175  009B67  FF                 	db	high STR_12
   176  009B68  C3                 	db	low (STR_16+1)
   177  009B69  FF                 	db	high (STR_16+1)
   178  009B6A  BE                 	db	low (STR_17+1)
   179  009B6B  FF                 	db	high (STR_17+1)
   180  009B6C  C8                 	db	low (STR_18+1)
   181  009B6D  FF                 	db	high (STR_18+1)
   182  009B6E  C2                 	db	low STR_16
   183  009B6F  FF                 	db	high STR_16
   184  009B70  BD                 	db	low STR_17
   185  009B71  FF                 	db	high STR_17
   186  009B72  C7                 	db	low STR_18
   187  009B73  FF                 	db	high STR_18
   188  009B74  D1                 	db	low STR_19
   189  009B75  FF                 	db	high STR_19
   190  009B76  CC                 	db	low STR_20
   191  009B77  FF                 	db	high STR_20
   192                           
   193                           ;initializer for _foodInputs
   194  009B78  BB                 	db	low (STR_33+3)
   195  009B79  FF                 	db	high (STR_33+3)
   196  009B7A  E0                 	db	low (STR_30+2)
   197  009B7B  FF                 	db	high (STR_30+2)
   198  009B7C  FA                 	db	low (STR_26+1)
   199  009B7D  FF                 	db	high (STR_26+1)
   200  009B7E  BA                 	db	low (STR_33+2)
   201  009B7F  FF                 	db	high (STR_33+2)
   202  009B80  DF                 	db	low (STR_30+1)
   203  009B81  FF                 	db	high (STR_30+1)
   204  009B82  F9                 	db	low STR_26
   205  009B83  FF                 	db	high STR_26
   206  009B84  DB                 	db	low (STR_31+1)
   207  009B85  FF                 	db	high (STR_31+1)
   208  009B86  F6                 	db	low STR_28
   209  009B87  FF                 	db	high STR_28
   210  009B88  B9                 	db	low (STR_33+1)
   211  009B89  FF                 	db	high (STR_33+1)
   212  009B8A  DE                 	db	low STR_30
   213  009B8B  FF                 	db	high STR_30
   214  009B8C  DA                 	db	low STR_31
   215  009B8D  FF                 	db	high STR_31
   216  009B8E  D6                 	db	low STR_32
   217  009B8F  FF                 	db	high STR_32
   218  009B90  B8                 	db	low STR_33
   219  009B91  FF                 	db	high STR_33
   220                           
   221                           	psect	mediumconst
   222  00FC24                     __pmediumconst:
   223                           	opt stack 0
   224  00FC24  00                 	db	0
   225  00FC25                     _keys:
   226                           	opt stack 0
   227  00FC25  31                 	db	49
   228  00FC26  32                 	db	50
   229  00FC27  33                 	db	51
   230  00FC28  41                 	db	65
   231  00FC29  34                 	db	52
   232  00FC2A  35                 	db	53
   233  00FC2B  36                 	db	54
   234  00FC2C  42                 	db	66
   235  00FC2D  37                 	db	55
   236  00FC2E  38                 	db	56
   237  00FC2F  39                 	db	57
   238  00FC30  43                 	db	67
   239  00FC31  2A                 	db	42
   240  00FC32  30                 	db	48
   241  00FC33  23                 	db	35
   242  00FC34  44                 	db	68
   243  00FC35  00                 	db	0
   244  00FC36                     __end_of_keys:
   245                           	opt stack 0
   246  00FC36                     _input:
   247                           	opt stack 0
   248  00FC36  31                 	db	49
   249  00FC37  32                 	db	50
   250  00FC38  33                 	db	51
   251  00FC39  52                 	db	82
   252  00FC3A  34                 	db	52
   253  00FC3B  35                 	db	53
   254  00FC3C  36                 	db	54
   255  00FC3D  46                 	db	70
   256  00FC3E  37                 	db	55
   257  00FC3F  38                 	db	56
   258  00FC40  39                 	db	57
   259  00FC41  4C                 	db	76
   260  00FC42  2A                 	db	42
   261  00FC43  30                 	db	48
   262  00FC44  23                 	db	35
   263  00FC45  44                 	db	68
   264  00FC46  00                 	db	0
   265  00FC47                     __end_of_input:
   266                           	opt stack 0
   267  00FC47                     _dpowers:
   268                           	opt stack 0
   269  00FC47  0001               	dw	1
   270  00FC49  000A               	dw	10
   271  00FC4B  0064               	dw	100
   272  00FC4D  03E8               	dw	1000
   273  00FC4F  2710               	dw	10000
   274  00FC51                     __end_of_dpowers:
   275                           	opt stack 0
   276  00FC51                     _hexpowers:
   277                           	opt stack 0
   278  00FC51  0001               	dw	1
   279  00FC53  0010               	dw	16
   280  00FC55  0100               	dw	256
   281  00FC57  1000               	dw	4096
   282  00FC59                     __end_of_hexpowers:
   283                           	opt stack 0
   284  00FC59                     _happynewyear:
   285                           	opt stack 0
   286  00FC59  00                 	db	0
   287  00FC5A  28                 	db	40
   288  00FC5B  00                 	db	0
   289  00FC5C  06                 	db	6
   290  00FC5D  24                 	db	36
   291  00FC5E  02                 	db	2
   292  00FC5F  18                 	db	24
   293  00FC60                     __end_of_happynewyear:
   294                           	opt stack 0
   295  00FC60                     _LCD_LEFT:
   296                           	opt stack 0
   297  00FC60  00                 	db	0
   298  00FC61                     __end_of_LCD_LEFT:
   299                           	opt stack 0
   300  00FC61                     _LCD_RIGHT:
   301                           	opt stack 0
   302  00FC61  01                 	db	1
   303  00FC62                     __end_of_LCD_RIGHT:
   304                           	opt stack 0
   305  00FC62                     _LCD_SIZE_VERT:
   306                           	opt stack 0
   307  00FC62  02                 	db	2
   308  00FC63                     __end_of_LCD_SIZE_VERT:
   309                           	opt stack 0
   310  00FC63                     _LCD_SIZE_HORZ:
   311                           	opt stack 0
   312  00FC63  10                 	db	16
   313  00FC64                     __end_of_LCD_SIZE_HORZ:
   314                           	opt stack 0
   315  00FC64                     _LCD_VERT_LIMIT:
   316                           	opt stack 0
   317  00FC64  02                 	db	2
   318  00FC65                     __end_of_LCD_VERT_LIMIT:
   319                           	opt stack 0
   320  00FC65                     _LCD_HORZ_LIMIT:
   321                           	opt stack 0
   322  00FC65  28                 	db	40
   323  00FC66                     __end_of_LCD_HORZ_LIMIT:
   324                           	opt stack 0
   325  0000                     _SPBRG	set	4015
   326  0000                     _RCREG	set	4014
   327  0000                     _RCSTAbits	set	4011
   328  0000                     _TXREG	set	4013
   329  0000                     _TXSTAbits	set	4012
   330  0000                     _ADRESL	set	4035
   331  0000                     _ADRESH	set	4036
   332  0000                     _ADCON0bits	set	4034
   333  0000                     _SSPBUF	set	4041
   334  0000                     _SSPCON2bits	set	4037
   335  0000                     _SSPADD	set	4040
   336  0000                     _SSPCON2	set	4037
   337  0000                     _SSPCON1	set	4038
   338  0000                     _SSPSTAT	set	4039
   339  0000                     _SSPCON1bits	set	4038
   340  0000                     _EECON2	set	4007
   341  0000                     _INTCONbits	set	4082
   342  0000                     _EEDATA	set	4008
   343  0000                     _EEADR	set	4009
   344  0000                     _EECON1bits	set	4006
   345  0000                     _PORTB	set	3969
   346  0000                     _PORTBbits	set	3969
   347  0000                     _LATAbits	set	3977
   348  0000                     _LATDbits	set	3980
   349  0000                     _LATCbits	set	3979
   350  0000                     _LATEbits	set	3981
   351  0000                     _TRISAbits	set	3986
   352  0000                     _TRISEbits	set	3990
   353  0000                     _TRISCbits	set	3988
   354  0000                     _TRISDbits	set	3989
   355  0000                     _ADCON1	set	4033
   356  0000                     _ADCON0	set	4034
   357  0000                     _TRISE	set	3990
   358  0000                     _TRISD	set	3989
   359  0000                     _TRISC	set	3988
   360  0000                     _TRISB	set	3987
   361  0000                     _TRISA	set	3986
   362  0000                     _LATE	set	3981
   363  0000                     _LATD	set	3980
   364  0000                     _LATC	set	3979
   365  0000                     _LATB	set	3978
   366  0000                     _LATA	set	3977
   367  0000                     _TRISC7	set	31911
   368  0000                     _TRISC6	set	31910
   369  0000                     _RCIE	set	31981
   370  0000                     _RCIF	set	31989
   371  0000                     _TXIE	set	31980
   372  0000                     _TRMT	set	32097
   373  0000                     _TXIF	set	31988
   374  0000                     _ADON	set	32272
   375  00FC66                     STR_98:
   376  00FC66  52                 	db	82	;'R'
   377  00FC67  65                 	db	101	;'e'
   378  00FC68  6D                 	db	109	;'m'
   379  00FC69  61                 	db	97	;'a'
   380  00FC6A  69                 	db	105	;'i'
   381  00FC6B  6E                 	db	110	;'n'
   382  00FC6C  69                 	db	105	;'i'
   383  00FC6D  6E                 	db	110	;'n'
   384  00FC6E  67                 	db	103	;'g'
   385  00FC6F  20                 	db	32
   386  00FC70  70                 	db	112	;'p'
   387  00FC71  69                 	db	105	;'i'
   388  00FC72  65                 	db	101	;'e'
   389  00FC73  63                 	db	99	;'c'
   390  00FC74  65                 	db	101	;'e'
   391  00FC75  73                 	db	115	;'s'
   392  00FC76  3A                 	db	58	;':'
   393  00FC77  00                 	db	0
   394  00FC78                     STR_154:
   395  00FC78  30                 	db	48	;'0'
   396  00FC79  31                 	db	49	;'1'
   397  00FC7A  32                 	db	50	;'2'
   398  00FC7B  33                 	db	51	;'3'
   399  00FC7C  34                 	db	52	;'4'
   400  00FC7D  35                 	db	53	;'5'
   401  00FC7E  36                 	db	54	;'6'
   402  00FC7F  37                 	db	55	;'7'
   403  00FC80  38                 	db	56	;'8'
   404  00FC81  39                 	db	57	;'9'
   405  00FC82  61                 	db	97	;'a'
   406  00FC83  62                 	db	98	;'b'
   407  00FC84  63                 	db	99	;'c'
   408  00FC85  64                 	db	100	;'d'
   409  00FC86  65                 	db	101	;'e'
   410  00FC87  66                 	db	102	;'f'
   411  00FC88  00                 	db	0
   412  00FC89                     STR_129:
   413  00FC89  64                 	db	100	;'d'
   414  00FC8A  72                 	db	114	;'r'
   415  00FC8B  61                 	db	97	;'a'
   416  00FC8C  77                 	db	119	;'w'
   417  00FC8D  65                 	db	101	;'e'
   418  00FC8E  72                 	db	114	;'r'
   419  00FC8F  73                 	db	115	;'s'
   420  00FC90  20                 	db	32
   421  00FC91  72                 	db	114	;'r'
   422  00FC92  65                 	db	101	;'e'
   423  00FC93  61                 	db	97	;'a'
   424  00FC94  63                 	db	99	;'c'
   425  00FC95  68                 	db	104	;'h'
   426  00FC96  65                 	db	101	;'e'
   427  00FC97  64                 	db	100	;'d'
   428  00FC98  21                 	db	33
   429  00FC99  00                 	db	0
   430  00FC9A                     STR_117:
   431  00FC9A  62                 	db	98	;'b'
   432  00FC9B  65                 	db	101	;'e'
   433  00FC9C  67                 	db	103	;'g'
   434  00FC9D  69                 	db	105	;'i'
   435  00FC9E  6E                 	db	110	;'n'
   436  00FC9F  20                 	db	32
   437  00FCA0  6F                 	db	111	;'o'
   438  00FCA1  70                 	db	112	;'p'
   439  00FCA2  65                 	db	101	;'e'
   440  00FCA3  72                 	db	114	;'r'
   441  00FCA4  61                 	db	97	;'a'
   442  00FCA5  74                 	db	116	;'t'
   443  00FCA6  69                 	db	105	;'i'
   444  00FCA7  6F                 	db	111	;'o'
   445  00FCA8  6E                 	db	110	;'n'
   446  00FCA9  2E                 	db	46
   447  00FCAA  00                 	db	0
   448  00FCAB                     STR_140:
   449  00FCAB  49                 	db	73	;'I'
   450  00FCAC  6E                 	db	110	;'n'
   451  00FCAD  70                 	db	112	;'p'
   452  00FCAE  75                 	db	117	;'u'
   453  00FCAF  74                 	db	116	;'t'
   454  00FCB0  73                 	db	115	;'s'
   455  00FCB1  20                 	db	32
   456  00FCB2  73                 	db	115	;'s'
   457  00FCB3  75                 	db	117	;'u'
   458  00FCB4  62                 	db	98	;'b'
   459  00FCB5  6D                 	db	109	;'m'
   460  00FCB6  69                 	db	105	;'i'
   461  00FCB7  74                 	db	116	;'t'
   462  00FCB8  74                 	db	116	;'t'
   463  00FCB9  65                 	db	101	;'e'
   464  00FCBA  64                 	db	100	;'d'
   465  00FCBB  00                 	db	0
   466  00FCBC                     STR_84:
   467  00FCBC  50                 	db	80	;'P'
   468  00FCBD  6C                 	db	108	;'l'
   469  00FCBE  65                 	db	101	;'e'
   470  00FCBF  61                 	db	97	;'a'
   471  00FCC0  73                 	db	115	;'s'
   472  00FCC1  65                 	db	101	;'e'
   473  00FCC2  20                 	db	32
   474  00FCC3  69                 	db	105	;'i'
   475  00FCC4  6E                 	db	110	;'n'
   476  00FCC5  70                 	db	112	;'p'
   477  00FCC6  75                 	db	117	;'u'
   478  00FCC7  74                 	db	116	;'t'
   479  00FCC8  20                 	db	32
   480  00FCC9  6C                 	db	108	;'l'
   481  00FCCA  6F                 	db	111	;'o'
   482  00FCCB  67                 	db	103	;'g'
   483  00FCCC  00                 	db	0
   484  00FCCD                     STR_99:
   485  00FCCD  52                 	db	82	;'R'
   486  00FCCE  3A                 	db	58	;':'
   487  00FCCF  25                 	db	37
   488  00FCD0  69                 	db	105	;'i'
   489  00FCD1  20                 	db	32
   490  00FCD2  20                 	db	32
   491  00FCD3  46                 	db	70	;'F'
   492  00FCD4  3A                 	db	58	;':'
   493  00FCD5  25                 	db	37
   494  00FCD6  69                 	db	105	;'i'
   495  00FCD7  20                 	db	32
   496  00FCD8  20                 	db	32
   497  00FCD9  4C                 	db	76	;'L'
   498  00FCDA  3A                 	db	58	;':'
   499  00FCDB  25                 	db	37
   500  00FCDC  69                 	db	105	;'i'
   501  00FCDD  00                 	db	0
   502  00FCDE                     STR_80:
   503  00FCDE  50                 	db	80	;'P'
   504  00FCDF  72                 	db	114	;'r'
   505  00FCE0  65                 	db	101	;'e'
   506  00FCE1  73                 	db	115	;'s'
   507  00FCE2  73                 	db	115	;'s'
   508  00FCE3  20                 	db	32
   509  00FCE4  61                 	db	97	;'a'
   510  00FCE5  6E                 	db	110	;'n'
   511  00FCE6  79                 	db	121	;'y'
   512  00FCE7  20                 	db	32
   513  00FCE8  6B                 	db	107	;'k'
   514  00FCE9  65                 	db	101	;'e'
   515  00FCEA  79                 	db	121	;'y'
   516  00FCEB  20                 	db	32
   517  00FCEC  74                 	db	116	;'t'
   518  00FCED  6F                 	db	111	;'o'
   519  00FCEE  00                 	db	0
   520  00FCEF                     STR_82:
   521  00FCEF  25                 	db	37
   522  00FCF0  69                 	db	105	;'i'
   523  00FCF1  20                 	db	32
   524  00FCF2  70                 	db	112	;'p'
   525  00FCF3  72                 	db	114	;'r'
   526  00FCF4  65                 	db	101	;'e'
   527  00FCF5  76                 	db	118	;'v'
   528  00FCF6  69                 	db	105	;'i'
   529  00FCF7  6F                 	db	111	;'o'
   530  00FCF8  75                 	db	117	;'u'
   531  00FCF9  73                 	db	115	;'s'
   532  00FCFA  20                 	db	32
   533  00FCFB  6C                 	db	108	;'l'
   534  00FCFC  6F                 	db	111	;'o'
   535  00FCFD  67                 	db	103	;'g'
   536  00FCFE  73                 	db	115	;'s'
   537  00FCFF  00                 	db	0
   538  00FD00                     STR_119:
   539  00FD00  63                 	db	99	;'c'
   540  00FD01  61                 	db	97	;'a'
   541  00FD02  62                 	db	98	;'b'
   542  00FD03  69                 	db	105	;'i'
   543  00FD04  6E                 	db	110	;'n'
   544  00FD05  65                 	db	101	;'e'
   545  00FD06  74                 	db	116	;'t'
   546  00FD07  20                 	db	32
   547  00FD08  73                 	db	115	;'s'
   548  00FD09  6F                 	db	111	;'o'
   549  00FD0A  72                 	db	114	;'r'
   550  00FD0B  74                 	db	116	;'t'
   551  00FD0C  65                 	db	101	;'e'
   552  00FD0D  72                 	db	114	;'r'
   553  00FD0E  21                 	db	33
   554  00FD0F  00                 	db	0
   555  00FD10                     STR_133:
   556  00FD10  6E                 	db	110	;'n'
   557  00FD11  75                 	db	117	;'u'
   558  00FD12  6D                 	db	109	;'m'
   559  00FD13  62                 	db	98	;'b'
   560  00FD14  65                 	db	101	;'e'
   561  00FD15  72                 	db	114	;'r'
   562  00FD16  20                 	db	32
   563  00FD17  70                 	db	112	;'p'
   564  00FD18  72                 	db	114	;'r'
   565  00FD19  65                 	db	101	;'e'
   566  00FD1A  73                 	db	115	;'s'
   567  00FD1B  73                 	db	115	;'s'
   568  00FD1C  65                 	db	101	;'e'
   569  00FD1D  64                 	db	100	;'d'
   570  00FD1E  2E                 	db	46
   571  00FD1F  00                 	db	0
   572  00FD20                     STR_105:
   573  00FD20  44                 	db	68	;'D'
   574  00FD21  72                 	db	114	;'r'
   575  00FD22  61                 	db	97	;'a'
   576  00FD23  77                 	db	119	;'w'
   577  00FD24  65                 	db	101	;'e'
   578  00FD25  72                 	db	114	;'r'
   579  00FD26  20                 	db	32
   580  00FD27  25                 	db	37
   581  00FD28  69                 	db	105	;'i'
   582  00FD29  20                 	db	32
   583  00FD2A  66                 	db	102	;'f'
   584  00FD2B  6F                 	db	111	;'o'
   585  00FD2C  6F                 	db	111	;'o'
   586  00FD2D  64                 	db	100	;'d'
   587  00FD2E  3A                 	db	58	;':'
   588  00FD2F  00                 	db	0
   589  00FD30                     STR_91:
   590  00FD30  4F                 	db	79	;'O'
   591  00FD31  70                 	db	112	;'p'
   592  00FD32  65                 	db	101	;'e'
   593  00FD33  72                 	db	114	;'r'
   594  00FD34  61                 	db	97	;'a'
   595  00FD35  74                 	db	116	;'t'
   596  00FD36  69                 	db	105	;'i'
   597  00FD37  6F                 	db	111	;'o'
   598  00FD38  6E                 	db	110	;'n'
   599  00FD39  20                 	db	32
   600  00FD3A  74                 	db	116	;'t'
   601  00FD3B  69                 	db	105	;'i'
   602  00FD3C  6D                 	db	109	;'m'
   603  00FD3D  65                 	db	101	;'e'
   604  00FD3E  3A                 	db	58	;':'
   605  00FD3F  00                 	db	0
   606  00FD40                     STR_93:
   607  00FD40  4D                 	db	77	;'M'
   608  00FD41  61                 	db	97	;'a'
   609  00FD42  72                 	db	114	;'r'
   610  00FD43  6B                 	db	107	;'k'
   611  00FD44  65                 	db	101	;'e'
   612  00FD45  64                 	db	100	;'d'
   613  00FD46  20                 	db	32
   614  00FD47  64                 	db	100	;'d'
   615  00FD48  72                 	db	114	;'r'
   616  00FD49  61                 	db	97	;'a'
   617  00FD4A  77                 	db	119	;'w'
   618  00FD4B  65                 	db	101	;'e'
   619  00FD4C  72                 	db	114	;'r'
   620  00FD4D  73                 	db	115	;'s'
   621  00FD4E  3A                 	db	58	;':'
   622  00FD4F  00                 	db	0
   623  00FD50                     STR_109:
   624  00FD50  44                 	db	68	;'D'
   625  00FD51  72                 	db	114	;'r'
   626  00FD52  61                 	db	97	;'a'
   627  00FD53  77                 	db	119	;'w'
   628  00FD54  65                 	db	101	;'e'
   629  00FD55  72                 	db	114	;'r'
   630  00FD56  20                 	db	32
   631  00FD57  25                 	db	37
   632  00FD58  69                 	db	105	;'i'
   633  00FD59  20                 	db	32
   634  00FD5A  64                 	db	100	;'d'
   635  00FD5B  69                 	db	105	;'i'
   636  00FD5C  65                 	db	101	;'e'
   637  00FD5D  74                 	db	116	;'t'
   638  00FD5E  3A                 	db	58	;':'
   639  00FD5F  00                 	db	0
   640  00FD60                     STR_130:
   641  00FD60  41                 	db	65	;'A'
   642  00FD61  6E                 	db	110	;'n'
   643  00FD62  6F                 	db	111	;'o'
   644  00FD63  74                 	db	116	;'t'
   645  00FD64  68                 	db	104	;'h'
   646  00FD65  65                 	db	101	;'e'
   647  00FD66  72                 	db	114	;'r'
   648  00FD67  20                 	db	32
   649  00FD68  64                 	db	100	;'d'
   650  00FD69  72                 	db	114	;'r'
   651  00FD6A  61                 	db	97	;'a'
   652  00FD6B  77                 	db	119	;'w'
   653  00FD6C  65                 	db	101	;'e'
   654  00FD6D  72                 	db	114	;'r'
   655  00FD6E  3F                 	db	63	;'?'
   656  00FD6F  00                 	db	0
   657  00FD70                     STR_118:
   658  00FD70  57                 	db	87	;'W'
   659  00FD71  65                 	db	101	;'e'
   660  00FD72  6C                 	db	108	;'l'
   661  00FD73  63                 	db	99	;'c'
   662  00FD74  6F                 	db	111	;'o'
   663  00FD75  6D                 	db	109	;'m'
   664  00FD76  65                 	db	101	;'e'
   665  00FD77  20                 	db	32
   666  00FD78  74                 	db	116	;'t'
   667  00FD79  6F                 	db	111	;'o'
   668  00FD7A  20                 	db	32
   669  00FD7B  79                 	db	121	;'y'
   670  00FD7C  6F                 	db	111	;'o'
   671  00FD7D  75                 	db	117	;'u'
   672  00FD7E  72                 	db	114	;'r'
   673  00FD7F  00                 	db	0
   674  00FD80                     STR_104:
   675  00FD80  23                 	db	35
   676  00FD81  20                 	db	32
   677  00FD82  3D                 	db	61	;'='
   678  00FD83  20                 	db	32
   679  00FD84  4E                 	db	78	;'N'
   680  00FD85  6F                 	db	111	;'o'
   681  00FD86  2C                 	db	44
   682  00FD87  20                 	db	32
   683  00FD88  44                 	db	68	;'D'
   684  00FD89  20                 	db	32
   685  00FD8A  3D                 	db	61	;'='
   686  00FD8B  20                 	db	32
   687  00FD8C  59                 	db	89	;'Y'
   688  00FD8D  65                 	db	101	;'e'
   689  00FD8E  73                 	db	115	;'s'
   690  00FD8F  00                 	db	0
   691  00FD90                     STR_43:
   692  00FD90  44                 	db	68	;'D'
   693  00FD91  69                 	db	105	;'i'
   694  00FD92  73                 	db	115	;'s'
   695  00FD93  74                 	db	116	;'t'
   696  00FD94  72                 	db	114	;'r'
   697  00FD95  69                 	db	105	;'i'
   698  00FD96  62                 	db	98	;'b'
   699  00FD97  75                 	db	117	;'u'
   700  00FD98  74                 	db	116	;'t'
   701  00FD99  69                 	db	105	;'i'
   702  00FD9A  6E                 	db	110	;'n'
   703  00FD9B  67                 	db	103	;'g'
   704  00FD9C  20                 	db	32
   705  00FD9D  74                 	db	116	;'t'
   706  00FD9E  6F                 	db	111	;'o'
   707  00FD9F  00                 	db	0
   708  00FDA0                     STR_2:
   709  00FDA0  43                 	db	67	;'C'
   710  00FDA1  6C                 	db	108	;'l'
   711  00FDA2  65                 	db	101	;'e'
   712  00FDA3  61                 	db	97	;'a'
   713  00FDA4  72                 	db	114	;'r'
   714  00FDA5  69                 	db	105	;'i'
   715  00FDA6  6E                 	db	110	;'n'
   716  00FDA7  67                 	db	103	;'g'
   717  00FDA8  20                 	db	32
   718  00FDA9  45                 	db	69	;'E'
   719  00FDAA  45                 	db	69	;'E'
   720  00FDAB  50                 	db	80	;'P'
   721  00FDAC  52                 	db	82	;'R'
   722  00FDAD  4F                 	db	79	;'O'
   723  00FDAE  4D                 	db	77	;'M'
   724  00FDAF  00                 	db	0
   725  00FDB0                     STR_147:
   726  00FDB0  62                 	db	98	;'b'
   727  00FDB1  65                 	db	101	;'e'
   728  00FDB2  67                 	db	103	;'g'
   729  00FDB3  69                 	db	105	;'i'
   730  00FDB4  6E                 	db	110	;'n'
   731  00FDB5  20                 	db	32
   732  00FDB6  73                 	db	115	;'s'
   733  00FDB7  68                 	db	104	;'h'
   734  00FDB8  6F                 	db	111	;'o'
   735  00FDB9  72                 	db	114	;'r'
   736  00FDBA  74                 	db	116	;'t'
   737  00FDBB  6C                 	db	108	;'l'
   738  00FDBC  79                 	db	121	;'y'
   739  00FDBD  2E                 	db	46
   740  00FDBE  00                 	db	0
   741  00FDBF                     STR_113:
   742  00FDBF  44                 	db	68	;'D'
   743  00FDC0  72                 	db	114	;'r'
   744  00FDC1  61                 	db	97	;'a'
   745  00FDC2  77                 	db	119	;'w'
   746  00FDC3  65                 	db	101	;'e'
   747  00FDC4  72                 	db	114	;'r'
   748  00FDC5  20                 	db	32
   749  00FDC6  6E                 	db	110	;'n'
   750  00FDC7  75                 	db	117	;'u'
   751  00FDC8  6D                 	db	109	;'m'
   752  00FDC9  62                 	db	98	;'b'
   753  00FDCA  65                 	db	101	;'e'
   754  00FDCB  72                 	db	114	;'r'
   755  00FDCC  3A                 	db	58	;':'
   756  00FDCD  00                 	db	0
   757  00FDCE                     STR_100:
   758  00FDCE  49                 	db	73	;'I'
   759  00FDCF  6E                 	db	110	;'n'
   760  00FDD0  70                 	db	112	;'p'
   761  00FDD1  75                 	db	117	;'u'
   762  00FDD2  74                 	db	116	;'t'
   763  00FDD3  20                 	db	32
   764  00FDD4  53                 	db	83	;'S'
   765  00FDD5  75                 	db	117	;'u'
   766  00FDD6  6D                 	db	109	;'m'
   767  00FDD7  6D                 	db	109	;'m'
   768  00FDD8  61                 	db	97	;'a'
   769  00FDD9  72                 	db	114	;'r'
   770  00FDDA  79                 	db	121	;'y'
   771  00FDDB  3A                 	db	58	;':'
   772  00FDDC  00                 	db	0
   773  00FDDD                     STR_78:
   774  00FDDD  31                 	db	49	;'1'
   775  00FDDE  20                 	db	32
   776  00FDDF  70                 	db	112	;'p'
   777  00FDE0  72                 	db	114	;'r'
   778  00FDE1  65                 	db	101	;'e'
   779  00FDE2  76                 	db	118	;'v'
   780  00FDE3  69                 	db	105	;'i'
   781  00FDE4  6F                 	db	111	;'o'
   782  00FDE5  75                 	db	117	;'u'
   783  00FDE6  73                 	db	115	;'s'
   784  00FDE7  20                 	db	32
   785  00FDE8  6C                 	db	108	;'l'
   786  00FDE9  6F                 	db	111	;'o'
   787  00FDEA  67                 	db	103	;'g'
   788  00FDEB  00                 	db	0
   789  00FDEC                     STR_97:
   790  00FDEC  25                 	db	37
   791  00FDED  69                 	db	105	;'i'
   792  00FDEE  2C                 	db	44
   793  00FDEF  20                 	db	32
   794  00FDF0  25                 	db	37
   795  00FDF1  69                 	db	105	;'i'
   796  00FDF2  2C                 	db	44
   797  00FDF3  20                 	db	32
   798  00FDF4  25                 	db	37
   799  00FDF5  69                 	db	105	;'i'
   800  00FDF6  2C                 	db	44
   801  00FDF7  20                 	db	32
   802  00FDF8  25                 	db	37
   803  00FDF9  69                 	db	105	;'i'
   804  00FDFA  00                 	db	0
   805  00FDFB                     STR_90:
   806  00FDFB  25                 	db	37
   807  00FDFC  30                 	db	48	;'0'
   808  00FDFD  32                 	db	50	;'2'
   809  00FDFE  69                 	db	105	;'i'
   810  00FDFF  2F                 	db	47
   811  00FE00  25                 	db	37
   812  00FE01  30                 	db	48	;'0'
   813  00FE02  32                 	db	50	;'2'
   814  00FE03  69                 	db	105	;'i'
   815  00FE04  2F                 	db	47
   816  00FE05  25                 	db	37
   817  00FE06  30                 	db	48	;'0'
   818  00FE07  32                 	db	50	;'2'
   819  00FE08  69                 	db	105	;'i'
   820  00FE09  00                 	db	0
   821  00FE0A                     STR_146:
   822  00FE0A  4F                 	db	79	;'O'
   823  00FE0B  70                 	db	112	;'p'
   824  00FE0C  65                 	db	101	;'e'
   825  00FE0D  72                 	db	114	;'r'
   826  00FE0E  61                 	db	97	;'a'
   827  00FE0F  74                 	db	116	;'t'
   828  00FE10  69                 	db	105	;'i'
   829  00FE11  6F                 	db	111	;'o'
   830  00FE12  6E                 	db	110	;'n'
   831  00FE13  20                 	db	32
   832  00FE14  77                 	db	119	;'w'
   833  00FE15  69                 	db	105	;'i'
   834  00FE16  6C                 	db	108	;'l'
   835  00FE17  6C                 	db	108	;'l'
   836  00FE18  00                 	db	0
   837  00FE19                     STR_122:
   838  00FE19  25                 	db	37
   839  00FE1A  30                 	db	48	;'0'
   840  00FE1B  32                 	db	50	;'2'
   841  00FE1C  78                 	db	120	;'x'
   842  00FE1D  2F                 	db	47
   843  00FE1E  25                 	db	37
   844  00FE1F  30                 	db	48	;'0'
   845  00FE20  32                 	db	50	;'2'
   846  00FE21  78                 	db	120	;'x'
   847  00FE22  2F                 	db	47
   848  00FE23  25                 	db	37
   849  00FE24  30                 	db	48	;'0'
   850  00FE25  32                 	db	50	;'2'
   851  00FE26  78                 	db	120	;'x'
   852  00FE27  00                 	db	0
   853  00FE28                     STR_123:
   854  00FE28  25                 	db	37
   855  00FE29  30                 	db	48	;'0'
   856  00FE2A  32                 	db	50	;'2'
   857  00FE2B  78                 	db	120	;'x'
   858  00FE2C  3A                 	db	58	;':'
   859  00FE2D  25                 	db	37
   860  00FE2E  30                 	db	48	;'0'
   861  00FE2F  32                 	db	50	;'2'
   862  00FE30  78                 	db	120	;'x'
   863  00FE31  3A                 	db	58	;':'
   864  00FE32  25                 	db	37
   865  00FE33  30                 	db	48	;'0'
   866  00FE34  32                 	db	50	;'2'
   867  00FE35  78                 	db	120	;'x'
   868  00FE36  00                 	db	0
   869  00FE37                     STR_134:
   870  00FE37  44                 	db	68	;'D'
   871  00FE38  72                 	db	114	;'r'
   872  00FE39  61                 	db	97	;'a'
   873  00FE3A  77                 	db	119	;'w'
   874  00FE3B  65                 	db	101	;'e'
   875  00FE3C  72                 	db	114	;'r'
   876  00FE3D  20                 	db	32
   877  00FE3E  61                 	db	97	;'a'
   878  00FE3F  6C                 	db	108	;'l'
   879  00FE40  72                 	db	114	;'r'
   880  00FE41  65                 	db	101	;'e'
   881  00FE42  61                 	db	97	;'a'
   882  00FE43  64                 	db	100	;'d'
   883  00FE44  79                 	db	121	;'y'
   884  00FE45  00                 	db	0
   885  00FE46                     STR_38:
   886  00FE46  52                 	db	82	;'R'
   887  00FE47  3A                 	db	58	;':'
   888  00FE48  25                 	db	37
   889  00FE49  69                 	db	105	;'i'
   890  00FE4A  20                 	db	32
   891  00FE4B  46                 	db	70	;'F'
   892  00FE4C  3A                 	db	58	;':'
   893  00FE4D  25                 	db	37
   894  00FE4E  69                 	db	105	;'i'
   895  00FE4F  20                 	db	32
   896  00FE50  4C                 	db	76	;'L'
   897  00FE51  3A                 	db	58	;':'
   898  00FE52  25                 	db	37
   899  00FE53  69                 	db	105	;'i'
   900  00FE54  00                 	db	0
   901  00FE55                     STR_107:
   902  00FE55  49                 	db	73	;'I'
   903  00FE56  6E                 	db	110	;'n'
   904  00FE57  76                 	db	118	;'v'
   905  00FE58  61                 	db	97	;'a'
   906  00FE59  6C                 	db	108	;'l'
   907  00FE5A  69                 	db	105	;'i'
   908  00FE5B  64                 	db	100	;'d'
   909  00FE5C  20                 	db	32
   910  00FE5D  66                 	db	102	;'f'
   911  00FE5E  6F                 	db	111	;'o'
   912  00FE5F  6F                 	db	111	;'o'
   913  00FE60  64                 	db	100	;'d'
   914  00FE61  21                 	db	33
   915  00FE62  00                 	db	0
   916  00FE63                     STR_111:
   917  00FE63  49                 	db	73	;'I'
   918  00FE64  6E                 	db	110	;'n'
   919  00FE65  76                 	db	118	;'v'
   920  00FE66  61                 	db	97	;'a'
   921  00FE67  6C                 	db	108	;'l'
   922  00FE68  69                 	db	105	;'i'
   923  00FE69  64                 	db	100	;'d'
   924  00FE6A  20                 	db	32
   925  00FE6B  64                 	db	100	;'d'
   926  00FE6C  69                 	db	105	;'i'
   927  00FE6D  65                 	db	101	;'e'
   928  00FE6E  74                 	db	116	;'t'
   929  00FE6F  21                 	db	33
   930  00FE70  00                 	db	0
   931  00FE71                     STR_141:
   932  00FE71  73                 	db	115	;'s'
   933  00FE72  75                 	db	117	;'u'
   934  00FE73  63                 	db	99	;'c'
   935  00FE74  63                 	db	99	;'c'
   936  00FE75  65                 	db	101	;'e'
   937  00FE76  73                 	db	115	;'s'
   938  00FE77  73                 	db	115	;'s'
   939  00FE78  66                 	db	102	;'f'
   940  00FE79  75                 	db	117	;'u'
   941  00FE7A  6C                 	db	108	;'l'
   942  00FE7B  6C                 	db	108	;'l'
   943  00FE7C  79                 	db	121	;'y'
   944  00FE7D  21                 	db	33
   945  00FE7E  00                 	db	0
   946  00FE7F                     STR_81:
   947  00FE7F  6D                 	db	109	;'m'
   948  00FE80  6F                 	db	111	;'o'
   949  00FE81  76                 	db	118	;'v'
   950  00FE82  65                 	db	101	;'e'
   951  00FE83  20                 	db	32
   952  00FE84  66                 	db	102	;'f'
   953  00FE85  6F                 	db	111	;'o'
   954  00FE86  72                 	db	114	;'r'
   955  00FE87  77                 	db	119	;'w'
   956  00FE88  61                 	db	97	;'a'
   957  00FE89  72                 	db	114	;'r'
   958  00FE8A  64                 	db	100	;'d'
   959  00FE8B  2E                 	db	46
   960  00FE8C  00                 	db	0
   961  00FE8D                     STR_126:
   962  00FE8D  6F                 	db	111	;'o'
   963  00FE8E  72                 	db	114	;'r'
   964  00FE8F  20                 	db	32
   965  00FE90  70                 	db	112	;'p'
   966  00FE91  72                 	db	114	;'r'
   967  00FE92  65                 	db	101	;'e'
   968  00FE93  73                 	db	115	;'s'
   969  00FE94  73                 	db	115	;'s'
   970  00FE95  20                 	db	32
   971  00FE96  44                 	db	68	;'D'
   972  00FE97  20                 	db	32
   973  00FE98  74                 	db	116	;'t'
   974  00FE99  6F                 	db	111	;'o'
   975  00FE9A  00                 	db	0
   976  00FE9B                     STR_149:
   977  00FE9B  49                 	db	73	;'I'
   978  00FE9C  6E                 	db	110	;'n'
   979  00FE9D  76                 	db	118	;'v'
   980  00FE9E  61                 	db	97	;'a'
   981  00FE9F  6C                 	db	108	;'l'
   982  00FEA0  69                 	db	105	;'i'
   983  00FEA1  64                 	db	100	;'d'
   984  00FEA2  20                 	db	32
   985  00FEA3  6B                 	db	107	;'k'
   986  00FEA4  65                 	db	101	;'e'
   987  00FEA5  79                 	db	121	;'y'
   988  00FEA6  21                 	db	33
   989  00FEA7  00                 	db	0
   990  00FEA8                     STR_128:
   991  00FEA8  4D                 	db	77	;'M'
   992  00FEA9  61                 	db	97	;'a'
   993  00FEAA  78                 	db	120	;'x'
   994  00FEAB  69                 	db	105	;'i'
   995  00FEAC  6D                 	db	109	;'m'
   996  00FEAD  75                 	db	117	;'u'
   997  00FEAE  6D                 	db	109	;'m'
   998  00FEAF  20                 	db	32
   999  00FEB0  6F                 	db	111	;'o'
  1000  00FEB1  66                 	db	102	;'f'
  1001  00FEB2  20                 	db	32
  1002  00FEB3  38                 	db	56	;'8'
  1003  00FEB4  00                 	db	0
  1004  00FEB5                     STR_103:
  1005  00FEB5  41                 	db	65	;'A'
  1006  00FEB6  6E                 	db	110	;'n'
  1007  00FEB7  6F                 	db	111	;'o'
  1008  00FEB8  74                 	db	116	;'t'
  1009  00FEB9  68                 	db	104	;'h'
  1010  00FEBA  65                 	db	101	;'e'
  1011  00FEBB  72                 	db	114	;'r'
  1012  00FEBC  20                 	db	32
  1013  00FEBD  6C                 	db	108	;'l'
  1014  00FEBE  6F                 	db	111	;'o'
  1015  00FEBF  67                 	db	103	;'g'
  1016  00FEC0  3F                 	db	63	;'?'
  1017  00FEC1  00                 	db	0
  1018  00FEC2                     STR_120:
  1019  00FEC2  43                 	db	67	;'C'
  1020  00FEC3  75                 	db	117	;'u'
  1021  00FEC4  72                 	db	114	;'r'
  1022  00FEC5  72                 	db	114	;'r'
  1023  00FEC6  65                 	db	101	;'e'
  1024  00FEC7  6E                 	db	110	;'n'
  1025  00FEC8  74                 	db	116	;'t'
  1026  00FEC9  20                 	db	32
  1027  00FECA  64                 	db	100	;'d'
  1028  00FECB  61                 	db	97	;'a'
  1029  00FECC  74                 	db	116	;'t'
  1030  00FECD  65                 	db	101	;'e'
  1031  00FECE  00                 	db	0
  1032  00FECF                     STR_41:
  1033  00FECF  49                 	db	73	;'I'
  1034  00FED0  6E                 	db	110	;'n'
  1035  00FED1  69                 	db	105	;'i'
  1036  00FED2  74                 	db	116	;'t'
  1037  00FED3  69                 	db	105	;'i'
  1038  00FED4  61                 	db	97	;'a'
  1039  00FED5  6C                 	db	108	;'l'
  1040  00FED6  69                 	db	105	;'i'
  1041  00FED7  7A                 	db	122	;'z'
  1042  00FED8  69                 	db	105	;'i'
  1043  00FED9  6E                 	db	110	;'n'
  1044  00FEDA  67                 	db	103	;'g'
  1045  00FEDB  00                 	db	0
  1046  00FEDC                     STR_125:
  1047  00FEDC  76                 	db	118	;'v'
  1048  00FEDD  69                 	db	105	;'i'
  1049  00FEDE  65                 	db	101	;'e'
  1050  00FEDF  77                 	db	119	;'w'
  1051  00FEE0  20                 	db	32
  1052  00FEE1  6C                 	db	108	;'l'
  1053  00FEE2  6F                 	db	111	;'o'
  1054  00FEE3  67                 	db	103	;'g'
  1055  00FEE4  73                 	db	115	;'s'
  1056  00FEE5  2C                 	db	44
  1057  00FEE6  00                 	db	0
  1058  00FEE7                     STR_77:
  1059  00FEE7  61                 	db	97	;'a'
  1060  00FEE8  76                 	db	118	;'v'
  1061  00FEE9  61                 	db	97	;'a'
  1062  00FEEA  69                 	db	105	;'i'
  1063  00FEEB  6C                 	db	108	;'l'
  1064  00FEEC  61                 	db	97	;'a'
  1065  00FEED  62                 	db	98	;'b'
  1066  00FEEE  6C                 	db	108	;'l'
  1067  00FEEF  65                 	db	101	;'e'
  1068  00FEF0  2E                 	db	46
  1069  00FEF1  00                 	db	0
  1070  00FEF2                     STR_148:
  1071  00FEF2  52                 	db	82	;'R'
  1072  00FEF3  65                 	db	101	;'e'
  1073  00FEF4  62                 	db	98	;'b'
  1074  00FEF5  6F                 	db	111	;'o'
  1075  00FEF6  6F                 	db	111	;'o'
  1076  00FEF7  74                 	db	116	;'t'
  1077  00FEF8  69                 	db	105	;'i'
  1078  00FEF9  6E                 	db	110	;'n'
  1079  00FEFA  67                 	db	103	;'g'
  1080  00FEFB  2E                 	db	46
  1081  00FEFC  00                 	db	0
  1082  00FEFD                     STR_108:
  1083  00FEFD  54                 	db	84	;'T'
  1084  00FEFE  72                 	db	114	;'r'
  1085  00FEFF  79                 	db	121	;'y'
  1086  00FF00  20                 	db	32
  1087  00FF01  61                 	db	97	;'a'
  1088  00FF02  67                 	db	103	;'g'
  1089  00FF03  61                 	db	97	;'a'
  1090  00FF04  69                 	db	105	;'i'
  1091  00FF05  6E                 	db	110	;'n'
  1092  00FF06  2E                 	db	46
  1093  00FF07  00                 	db	0
  1094  00FF08                     STR_101:
  1095  00FF08  44                 	db	68	;'D'
  1096  00FF09  72                 	db	114	;'r'
  1097  00FF0A  61                 	db	97	;'a'
  1098  00FF0B  77                 	db	119	;'w'
  1099  00FF0C  65                 	db	101	;'e'
  1100  00FF0D  72                 	db	114	;'r'
  1101  00FF0E  20                 	db	32
  1102  00FF0F  25                 	db	37
  1103  00FF10  69                 	db	105	;'i'
  1104  00FF11  3A                 	db	58	;':'
  1105  00FF12  00                 	db	0
  1106  00FF13                     STR_142:
  1107  00FF13  53                 	db	83	;'S'
  1108  00FF14  75                 	db	117	;'u'
  1109  00FF15  6D                 	db	109	;'m'
  1110  00FF16  6D                 	db	109	;'m'
  1111  00FF17  61                 	db	97	;'a'
  1112  00FF18  72                 	db	114	;'r'
  1113  00FF19  79                 	db	121	;'y'
  1114  00FF1A  20                 	db	32
  1115  00FF1B  6F                 	db	111	;'o'
  1116  00FF1C  66                 	db	102	;'f'
  1117  00FF1D  00                 	db	0
  1118  00FF1E                     STR_124:
  1119  00FF1E  50                 	db	80	;'P'
  1120  00FF1F  72                 	db	114	;'r'
  1121  00FF20  65                 	db	101	;'e'
  1122  00FF21  73                 	db	115	;'s'
  1123  00FF22  73                 	db	115	;'s'
  1124  00FF23  20                 	db	32
  1125  00FF24  23                 	db	35
  1126  00FF25  20                 	db	32
  1127  00FF26  74                 	db	116	;'t'
  1128  00FF27  6F                 	db	111	;'o'
  1129  00FF28  00                 	db	0
  1130  00FF29                     STR_44:
  1131  00FF29  72                 	db	114	;'r'
  1132  00FF2A  65                 	db	101	;'e'
  1133  00FF2B  73                 	db	115	;'s'
  1134  00FF2C  65                 	db	101	;'e'
  1135  00FF2D  72                 	db	114	;'r'
  1136  00FF2E  76                 	db	118	;'v'
  1137  00FF2F  6F                 	db	111	;'o'
  1138  00FF30  69                 	db	105	;'i'
  1139  00FF31  72                 	db	114	;'r'
  1140  00FF32  2E                 	db	46
  1141  00FF33  00                 	db	0
  1142  00FF34                     STR_121:
  1143  00FF34  61                 	db	97	;'a'
  1144  00FF35  6E                 	db	110	;'n'
  1145  00FF36  64                 	db	100	;'d'
  1146  00FF37  20                 	db	32
  1147  00FF38  74                 	db	116	;'t'
  1148  00FF39  69                 	db	105	;'i'
  1149  00FF3A  6D                 	db	109	;'m'
  1150  00FF3B  65                 	db	101	;'e'
  1151  00FF3C  3A                 	db	58	;':'
  1152  00FF3D  00                 	db	0
  1153  00FF3E                     STR_132:
  1154  00FF3E  4E                 	db	78	;'N'
  1155  00FF3F  6F                 	db	111	;'o'
  1156  00FF40  20                 	db	32
  1157  00FF41  64                 	db	100	;'d'
  1158  00FF42  72                 	db	114	;'r'
  1159  00FF43  61                 	db	97	;'a'
  1160  00FF44  77                 	db	119	;'w'
  1161  00FF45  65                 	db	101	;'e'
  1162  00FF46  72                 	db	114	;'r'
  1163  00FF47  00                 	db	0
  1164  00FF48                     STR_35:
  1165  00FF48  64                 	db	100	;'d'
  1166  00FF49  72                 	db	114	;'r'
  1167  00FF4A  61                 	db	97	;'a'
  1168  00FF4B  77                 	db	119	;'w'
  1169  00FF4C  65                 	db	101	;'e'
  1170  00FF4D  72                 	db	114	;'r'
  1171  00FF4E  20                 	db	32
  1172  00FF4F  25                 	db	37
  1173  00FF50  69                 	db	105	;'i'
  1174  00FF51  00                 	db	0
  1175  00FF52                     STR_34:
  1176  00FF52  4D                 	db	77	;'M'
  1177  00FF53  6F                 	db	111	;'o'
  1178  00FF54  76                 	db	118	;'v'
  1179  00FF55  69                 	db	105	;'i'
  1180  00FF56  6E                 	db	110	;'n'
  1181  00FF57  67                 	db	103	;'g'
  1182  00FF58  20                 	db	32
  1183  00FF59  74                 	db	116	;'t'
  1184  00FF5A  6F                 	db	111	;'o'
  1185  00FF5B  00                 	db	0
  1186  00FF5C                     STR_85:
  1187  00FF5C  6E                 	db	110	;'n'
  1188  00FF5D  75                 	db	117	;'u'
  1189  00FF5E  6D                 	db	109	;'m'
  1190  00FF5F  62                 	db	98	;'b'
  1191  00FF60  65                 	db	101	;'e'
  1192  00FF61  72                 	db	114	;'r'
  1193  00FF62  3A                 	db	58	;':'
  1194  00FF63  20                 	db	32
  1195  00FF64  00                 	db	0
  1196  00FF65                     STR_37:
  1197  00FF65  46                 	db	70	;'F'
  1198  00FF66  6F                 	db	111	;'o'
  1199  00FF67  6F                 	db	111	;'o'
  1200  00FF68  64                 	db	100	;'d'
  1201  00FF69  3A                 	db	58	;':'
  1202  00FF6A  20                 	db	32
  1203  00FF6B  25                 	db	37
  1204  00FF6C  73                 	db	115	;'s'
  1205  00FF6D  00                 	db	0
  1206  00FF6E                     STR_36:
  1207  00FF6E  44                 	db	68	;'D'
  1208  00FF6F  69                 	db	105	;'i'
  1209  00FF70  65                 	db	101	;'e'
  1210  00FF71  74                 	db	116	;'t'
  1211  00FF72  3A                 	db	58	;':'
  1212  00FF73  20                 	db	32
  1213  00FF74  25                 	db	37
  1214  00FF75  73                 	db	115	;'s'
  1215  00FF76  00                 	db	0
  1216  00FF77                     STR_135:
  1217  00FF77  69                 	db	105	;'i'
  1218  00FF78  6E                 	db	110	;'n'
  1219  00FF79  20                 	db	32
  1220  00FF7A  75                 	db	117	;'u'
  1221  00FF7B  73                 	db	115	;'s'
  1222  00FF7C  65                 	db	101	;'e'
  1223  00FF7D  21                 	db	33
  1224  00FF7E  00                 	db	0
  1225  00FF7F                     STR_143:
  1226  00FF7F  69                 	db	105	;'i'
  1227  00FF80  6E                 	db	110	;'n'
  1228  00FF81  70                 	db	112	;'p'
  1229  00FF82  75                 	db	117	;'u'
  1230  00FF83  74                 	db	116	;'t'
  1231  00FF84  73                 	db	115	;'s'
  1232  00FF85  3A                 	db	58	;':'
  1233  00FF86  00                 	db	0
  1234  00FF87                     STR_92:
  1235  00FF87  25                 	db	37
  1236  00FF88  69                 	db	105	;'i'
  1237  00FF89  3A                 	db	58	;':'
  1238  00FF8A  25                 	db	37
  1239  00FF8B  30                 	db	48	;'0'
  1240  00FF8C  32                 	db	50	;'2'
  1241  00FF8D  69                 	db	105	;'i'
  1242  00FF8E  00                 	db	0
  1243  00FF8F                     STR_76:
  1244  00FF8F  4E                 	db	78	;'N'
  1245  00FF90  6F                 	db	111	;'o'
  1246  00FF91  20                 	db	32
  1247  00FF92  6C                 	db	108	;'l'
  1248  00FF93  6F                 	db	111	;'o'
  1249  00FF94  67                 	db	103	;'g'
  1250  00FF95  73                 	db	115	;'s'
  1251  00FF96  00                 	db	0
  1252  00FF97                     STR_1:
  1253  00FF97  53                 	db	83	;'S'
  1254  00FF98  74                 	db	116	;'t'
  1255  00FF99  61                 	db	97	;'a'
  1256  00FF9A  6E                 	db	110	;'n'
  1257  00FF9B  64                 	db	100	;'d'
  1258  00FF9C  62                 	db	98	;'b'
  1259  00FF9D  79                 	db	121	;'y'
  1260  00FF9E  00                 	db	0
  1261  00FF9F                     STR_153:
  1262  00FF9F  28                 	db	40
  1263  00FFA0  6E                 	db	110	;'n'
  1264  00FFA1  75                 	db	117	;'u'
  1265  00FFA2  6C                 	db	108	;'l'
  1266  00FFA3  6C                 	db	108	;'l'
  1267  00FFA4  29                 	db	41
  1268  00FFA5  00                 	db	0
  1269  00FFA6                     STR_86:
  1270  00FFA6  47                 	db	71	;'G'
  1271  00FFA7  72                 	db	114	;'r'
  1272  00FFA8  65                 	db	101	;'e'
  1273  00FFA9  61                 	db	97	;'a'
  1274  00FFAA  74                 	db	116	;'t'
  1275  00FFAB  21                 	db	33
  1276  00FFAC  00                 	db	0
  1277  00FFAD                     STR_89:
  1278  00FFAD  44                 	db	68	;'D'
  1279  00FFAE  61                 	db	97	;'a'
  1280  00FFAF  74                 	db	116	;'t'
  1281  00FFB0  65                 	db	101	;'e'
  1282  00FFB1  3A                 	db	58	;':'
  1283  00FFB2  00                 	db	0
  1284  00FFB3                     STR_102:
  1285  00FFB3  25                 	db	37
  1286  00FFB4  73                 	db	115	;'s'
  1287  00FFB5  25                 	db	37
  1288  00FFB6  73                 	db	115	;'s'
  1289  00FFB7  00                 	db	0
  1290  00FFB8                     STR_33:
  1291  00FFB8  31                 	db	49	;'1'
  1292  00FFB9  31                 	db	49	;'1'
  1293  00FFBA  31                 	db	49	;'1'
  1294  00FFBB  31                 	db	49	;'1'
  1295  00FFBC  00                 	db	0
  1296  00FFBD                     STR_17:
  1297  00FFBD  52                 	db	82	;'R'
  1298  00FFBE  46                 	db	70	;'F'
  1299  00FFBF  46                 	db	70	;'F'
  1300  00FFC0  4C                 	db	76	;'L'
  1301  00FFC1  00                 	db	0
  1302  00FFC2                     STR_16:
  1303  00FFC2  52                 	db	82	;'R'
  1304  00FFC3  52                 	db	82	;'R'
  1305  00FFC4  46                 	db	70	;'F'
  1306  00FFC5  4C                 	db	76	;'L'
  1307  00FFC6  00                 	db	0
  1308  00FFC7                     STR_18:
  1309  00FFC7  52                 	db	82	;'R'
  1310  00FFC8  46                 	db	70	;'F'
  1311  00FFC9  4C                 	db	76	;'L'
  1312  00FFCA  4C                 	db	76	;'L'
  1313  00FFCB  00                 	db	0
  1314  00FFCC                     STR_20:
  1315  00FFCC  46                 	db	70	;'F'
  1316  00FFCD  4C                 	db	76	;'L'
  1317  00FFCE  4C                 	db	76	;'L'
  1318  00FFCF  4C                 	db	76	;'L'
  1319  00FFD0  00                 	db	0
  1320  00FFD1                     STR_19:
  1321  00FFD1  52                 	db	82	;'R'
  1322  00FFD2  4C                 	db	76	;'L'
  1323  00FFD3  4C                 	db	76	;'L'
  1324  00FFD4  4C                 	db	76	;'L'
  1325  00FFD5  00                 	db	0
  1326  00FFD6                     STR_32:
  1327  00FFD6  32                 	db	50	;'2'
  1328  00FFD7  31                 	db	49	;'1'
  1329  00FFD8  31                 	db	49	;'1'
  1330  00FFD9  00                 	db	0
  1331  00FFDA                     STR_31:
  1332  00FFDA  31                 	db	49	;'1'
  1333  00FFDB  32                 	db	50	;'2'
  1334  00FFDC  31                 	db	49	;'1'
  1335  00FFDD  00                 	db	0
  1336  00FFDE                     STR_30:
  1337  00FFDE  31                 	db	49	;'1'
  1338  00FFDF  31                 	db	49	;'1'
  1339  00FFE0  32                 	db	50	;'2'
  1340  00FFE1  00                 	db	0
  1341  00FFE2                     STR_11:
  1342  00FFE2  52                 	db	82	;'R'
  1343  00FFE3  46                 	db	70	;'F'
  1344  00FFE4  46                 	db	70	;'F'
  1345  00FFE5  00                 	db	0
  1346  00FFE6                     STR_9:
  1347  00FFE6  52                 	db	82	;'R'
  1348  00FFE7  52                 	db	82	;'R'
  1349  00FFE8  46                 	db	70	;'F'
  1350  00FFE9  00                 	db	0
  1351  00FFEA                     STR_12:
  1352  00FFEA  52                 	db	82	;'R'
  1353  00FFEB  4C                 	db	76	;'L'
  1354  00FFEC  4C                 	db	76	;'L'
  1355  00FFED  00                 	db	0
  1356  00FFEE                     STR_10:
  1357  00FFEE  52                 	db	82	;'R'
  1358  00FFEF  52                 	db	82	;'R'
  1359  00FFF0  4C                 	db	76	;'L'
  1360  00FFF1  00                 	db	0
  1361  00FFF2                     STR_42:
  1362  00FFF2  41                 	db	65	;'A'
  1363  00FFF3  72                 	db	114	;'r'
  1364  00FFF4  6D                 	db	109	;'m'
  1365  00FFF5  00                 	db	0
  1366  00FFF6                     STR_28:
  1367  00FFF6  32                 	db	50	;'2'
  1368  00FFF7  32                 	db	50	;'2'
  1369  00FFF8  00                 	db	0
  1370  00FFF9                     STR_26:
  1371  00FFF9  31                 	db	49	;'1'
  1372  00FFFA  33                 	db	51	;'3'
  1373  00FFFB  00                 	db	0
  1374  00FFFC                     STR_3:
  1375  00FFFC  52                 	db	82	;'R'
  1376  00FFFD  00                 	db	0
  1377  0000                     
  1378                           ; #config settings
  1379  00FFFE  00                 	db	0	; dummy byte at the end
  1380  0000                     
  1381                           	psect	cinit
  1382  00A040                     __pcinit:
  1383                           	opt stack 0
  1384  00A040                     start_initialization:
  1385                           	opt stack 0
  1386  00A040                     __initialization:
  1387                           	opt stack 0
  1388                           
  1389                           ; Initialize objects allocated to BANK2 (62 bytes)
  1390                           ; load TBLPTR registers with __pidataBANK2
  1391  00A040  0E54               	movlw	low __pidataBANK2
  1392  00A042  6EF6               	movwf	tblptrl,c
  1393  00A044  0E9B               	movlw	high __pidataBANK2
  1394  00A046  6EF7               	movwf	tblptrh,c
  1395  00A048  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1396  00A04A  6EF8               	movwf	tblptru,c
  1397  00A04C  EE02  F050         	lfsr	0,__pdataBANK2
  1398  00A050  EE10 F03E          	lfsr	1,62
  1399  00A054                     copy_data0:
  1400  00A054  0009               	tblrd		*+
  1401  00A056  CFF5 FFEE          	movff	tablat,postinc0
  1402  00A05A  50E5               	movf	postdec1,w,c
  1403  00A05C  50E1               	movf	fsr1l,w,c
  1404  00A05E  E1FA               	bnz	copy_data0
  1405                           
  1406                           ; Initialize objects allocated to BANK0 (2 bytes)
  1407                           ; load TBLPTR registers with __pidataBANK0
  1408  00A060  0EF6               	movlw	low __pidataBANK0
  1409  00A062  6EF6               	movwf	tblptrl,c
  1410  00A064  0E99               	movlw	high __pidataBANK0
  1411  00A066  6EF7               	movwf	tblptrh,c
  1412  00A068  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1413  00A06A  6EF8               	movwf	tblptru,c
  1414  00A06C  0009               	tblrd		*+	;fetch initializer
  1415  00A06E  CFF5 F0F8          	movff	tablat,__pdataBANK0
  1416  00A072  0009               	tblrd		*+	;fetch initializer
  1417  00A074  CFF5 F0F9          	movff	tablat,__pdataBANK0+1
  1418                           
  1419                           ; Initialize objects allocated to COMRAM (8 bytes)
  1420                           ; load TBLPTR registers with __pidataCOMRAM
  1421  00A078  0E08               	movlw	low __pidataCOMRAM
  1422  00A07A  6EF6               	movwf	tblptrl,c
  1423  00A07C  0E9A               	movlw	high __pidataCOMRAM
  1424  00A07E  6EF7               	movwf	tblptrh,c
  1425  00A080  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1426  00A082  6EF8               	movwf	tblptru,c
  1427  00A084  EE00  F06E         	lfsr	0,__pdataCOMRAM
  1428  00A088  EE10 F008          	lfsr	1,8
  1429  00A08C                     copy_data1:
  1430  00A08C  0009               	tblrd		*+
  1431  00A08E  CFF5 FFEE          	movff	tablat,postinc0
  1432  00A092  50E5               	movf	postdec1,w,c
  1433  00A094  50E1               	movf	fsr1l,w,c
  1434  00A096  E1FA               	bnz	copy_data1
  1435                           
  1436                           ; Clear objects allocated to BANK2 (80 bytes)
  1437  00A098  EE02  F000         	lfsr	0,__pbssBANK2
  1438  00A09C  0E50               	movlw	80
  1439  00A09E                     clear_0:
  1440  00A09E  6AEE               	clrf	postinc0,c
  1441  00A0A0  06E8               	decf	wreg,f,c
  1442  00A0A2  E1FD               	bnz	clear_0
  1443                           
  1444                           ; Clear objects allocated to BANK1 (116 bytes)
  1445  00A0A4  EE01  F08A         	lfsr	0,__pbssBANK1
  1446  00A0A8  0E74               	movlw	116
  1447  00A0AA                     clear_1:
  1448  00A0AA  6AEE               	clrf	postinc0,c
  1449  00A0AC  06E8               	decf	wreg,f,c
  1450  00A0AE  E1FD               	bnz	clear_1
  1451                           
  1452                           ; Clear objects allocated to BANK0 (40 bytes)
  1453  00A0B0  EE00  F0D0         	lfsr	0,__pbssBANK0
  1454  00A0B4  0E28               	movlw	40
  1455  00A0B6                     clear_2:
  1456  00A0B6  6AEE               	clrf	postinc0,c
  1457  00A0B8  06E8               	decf	wreg,f,c
  1458  00A0BA  E1FD               	bnz	clear_2
  1459                           
  1460                           ; Clear objects allocated to COMRAM (4 bytes)
  1461  00A0BC  6A79               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1462  00A0BE  6A78               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1463  00A0C0  6A77               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1464  00A0C2  6A76               	clrf	__pbssCOMRAM& (0+255),c
  1465  00A0C4                     end_of_initialization:
  1466                           	opt stack 0
  1467  00A0C4                     __end_of__initialization:
  1468                           	opt stack 0
  1469  00A0C4  0100               	movlb	0
  1470  00A0C6  EF61  F056         	goto	_main	;jump to C main() function
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           
  1480                           	psect	bssCOMRAM
  1481  000076                     __pbssCOMRAM:
  1482                           	opt stack 0
  1483  000076                     _firstIteration:
  1484                           	opt stack 0
  1485  000076                     	ds	2
  1486  000078                     _LCDinterruptState:
  1487                           	opt stack 0
  1488  000078                     	ds	1
  1489  000079                     _UARTinterruptState:
  1490                           	opt stack 0
  1491  000079                     	ds	1
  1492                           tblptru	equ	0xFF8
  1493                           tblptrh	equ	0xFF7
  1494                           tblptrl	equ	0xFF6
  1495                           tablat	equ	0xFF5
  1496                           postinc0	equ	0xFEE
  1497                           wreg	equ	0xFE8
  1498                           postdec1	equ	0xFE5
  1499                           fsr1l	equ	0xFE1
  1500                           
  1501                           	psect	dataCOMRAM
  1502  00006E                     __pdataCOMRAM:
  1503                           	opt stack 0
  1504  00006E                     _UART:
  1505                           	opt stack 0
  1506  00006E                     	ds	2
  1507  000070                     _drawerClose:
  1508                           	opt stack 0
  1509  000070                     	ds	1
  1510  000071                     _drawerOpen:
  1511                           	opt stack 0
  1512  000071                     	ds	1
  1513  000072                     _columnRight:
  1514                           	opt stack 0
  1515  000072                     	ds	1
  1516  000073                     _columnLeft:
  1517                           	opt stack 0
  1518  000073                     	ds	1
  1519  000074                     _rowDown:
  1520                           	opt stack 0
  1521  000074                     	ds	1
  1522  000075                     _rowUp:
  1523                           	opt stack 0
  1524  000075                     	ds	1
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	bssBANK0
  1535  0000D0                     __pbssBANK0:
  1536                           	opt stack 0
  1537  0000D0                     food_press@F3117:
  1538                           	opt stack 0
  1539  0000D0                     	ds	8
  1540  0000D8                     sortDrawerList@F3103:
  1541                           	opt stack 0
  1542  0000D8                     	ds	8
  1543  0000E0                     sortDrawerList@F3100:
  1544                           	opt stack 0
  1545  0000E0                     	ds	8
  1546  0000E8                     sortDrawerList@F3097:
  1547                           	opt stack 0
  1548  0000E8                     	ds	8
  1549  0000F0                     sortDrawerList@F3094:
  1550                           	opt stack 0
  1551  0000F0                     	ds	8
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	dataBANK0
  1562  0000F8                     __pdataBANK0:
  1563                           	opt stack 0
  1564  0000F8                     _drawerDown:
  1565                           	opt stack 0
  1566  0000F8                     	ds	1
  1567  0000F9                     _drawerUp:
  1568                           	opt stack 0
  1569  0000F9                     	ds	1
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	bssBANK1
  1580  00018A                     __pbssBANK1:
  1581                           	opt stack 0
  1582  00018A                     standbyMode@F3154:
  1583                           	opt stack 0
  1584  00018A                     	ds	16
  1585  00019A                     standbyMode@F3152:
  1586                           	opt stack 0
  1587  00019A                     	ds	16
  1588  0001AA                     mainOperation@F3182:
  1589                           	opt stack 0
  1590  0001AA                     	ds	16
  1591  0001BA                     mainOperation@F3180:
  1592                           	opt stack 0
  1593  0001BA                     	ds	16
  1594  0001CA                     mainOperation@F3178:
  1595                           	opt stack 0
  1596  0001CA                     	ds	16
  1597  0001DA                     mainOperation@F3176:
  1598                           	opt stack 0
  1599  0001DA                     	ds	16
  1600  0001EA                     diet_press@F3132:
  1601                           	opt stack 0
  1602  0001EA                     	ds	8
  1603  0001F2                     _uart:
  1604                           	opt stack 0
  1605  0001F2                     	ds	12
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	bssBANK2
  1616  000200                     __pbssBANK2:
  1617                           	opt stack 0
  1618  000200                     standbyMode@F3162:
  1619                           	opt stack 0
  1620  000200                     	ds	16
  1621  000210                     standbyMode@F3160:
  1622                           	opt stack 0
  1623  000210                     	ds	16
  1624  000220                     standbyMode@F3158:
  1625                           	opt stack 0
  1626  000220                     	ds	16
  1627  000230                     standbyMode@F3156:
  1628                           	opt stack 0
  1629  000230                     	ds	16
  1630  000240                     _arr_dataRX:
  1631                           	opt stack 0
  1632  000240                     	ds	16
  1633                           tblptru	equ	0xFF8
  1634                           tblptrh	equ	0xFF7
  1635                           tblptrl	equ	0xFF6
  1636                           tablat	equ	0xFF5
  1637                           postinc0	equ	0xFEE
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           
  1642                           	psect	dataBANK2
  1643  000250                     __pdataBANK2:
  1644                           	opt stack 0
  1645  000250                     _inputs:
  1646                           	opt stack 0
  1647  000250                     	ds	36
  1648  000274                     _foodInputs:
  1649                           	opt stack 0
  1650  000274                     	ds	26
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           
  1660                           	psect	cstackBANK1
  1661  000100                     __pcstackBANK1:
  1662                           	opt stack 0
  1663  000100                     standbyMode@roundPieces:
  1664                           	opt stack 0
  1665                           
  1666                           ; 16 bytes @ 0x0
  1667  000100                     	ds	16
  1668  000110                     standbyMode@flatPieces:
  1669                           	opt stack 0
  1670                           
  1671                           ; 16 bytes @ 0x10
  1672  000110                     	ds	16
  1673  000120                     standbyMode@longPieces:
  1674                           	opt stack 0
  1675                           
  1676                           ; 16 bytes @ 0x20
  1677  000120                     	ds	16
  1678  000130                     standbyMode@dietType:
  1679                           	opt stack 0
  1680                           
  1681                           ; 16 bytes @ 0x30
  1682  000130                     	ds	16
  1683  000140                     standbyMode@foodType:
  1684                           	opt stack 0
  1685                           
  1686                           ; 16 bytes @ 0x40
  1687  000140                     	ds	16
  1688  000150                     standbyMode@drawerInformation:
  1689                           	opt stack 0
  1690                           
  1691                           ; 16 bytes @ 0x50
  1692  000150                     	ds	16
  1693  000160                     standbyMode@time:
  1694                           	opt stack 0
  1695                           
  1696                           ; 7 bytes @ 0x60
  1697  000160                     	ds	7
  1698  000167                     standbyMode@firstIteration:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x67
  1702  000167                     	ds	2
  1703  000169                     standbyMode@whichKey:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x69
  1707  000169                     	ds	2
  1708  00016B                     standbyMode@keypress:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x6B
  1712  00016B                     	ds	1
  1713  00016C                     standbyMode@round:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x6C
  1717  00016C                     	ds	2
  1718  00016E                     standbyMode@flat:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x6E
  1722  00016E                     	ds	2
  1723  000170                     standbyMode@lng:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x70
  1727  000170                     	ds	2
  1728  000172                     standbyMode@decodedDiet:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x72
  1732  000172                     	ds	2
  1733  000174                     standbyMode@storedFoodType:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x74
  1737  000174                     	ds	2
  1738  000176                     standbyMode@keypress1:
  1739                           	opt stack 0
  1740                           
  1741                           ; 1 bytes @ 0x76
  1742  000176                     	ds	1
  1743  000177                     standbyMode@validDrawer:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x77
  1747  000177                     	ds	2
  1748  000179                     standbyMode@zero:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x79
  1752  000179                     	ds	2
  1753  00017B                     standbyMode@n:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x7B
  1757  00017B                     	ds	2
  1758  00017D                     standbyMode@x:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x7D
  1762  00017D                     	ds	2
  1763  00017F                     standbyMode@logNumber:
  1764                           	opt stack 0
  1765                           
  1766                           ; 1 bytes @ 0x7F
  1767  00017F                     	ds	1
  1768  000180                     standbyMode@diet:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x80
  1772  000180                     	ds	2
  1773  000182                     standbyMode@drawer:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x82
  1777  000182                     	ds	2
  1778  000184                     standbyMode@food:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x84
  1782  000184                     	ds	2
  1783  000186                     standbyMode@drawerCount:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x86
  1787  000186                     	ds	2
  1788  000188                     standbyMode@i:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x88
  1792  000188                     	ds	2
  1793                           tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           postdec1	equ	0xFE5
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           	psect	cstackBANK0
  1803  000080                     __pcstackBANK0:
  1804                           	opt stack 0
  1805  000080                     mainOperation@drawerTable:
  1806                           	opt stack 0
  1807                           
  1808                           ; 16 bytes @ 0x0
  1809  000080                     	ds	16
  1810  000090                     mainOperation@dietTable:
  1811                           	opt stack 0
  1812                           
  1813                           ; 16 bytes @ 0x10
  1814  000090                     	ds	16
  1815  0000A0                     mainOperation@foodTable:
  1816                           	opt stack 0
  1817                           
  1818                           ; 16 bytes @ 0x20
  1819  0000A0                     	ds	16
  1820  0000B0                     mainOperation@temp:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x30
  1824  0000B0                     	ds	2
  1825  0000B2                     mainOperation@sortedDrawerTable:
  1826                           	opt stack 0
  1827                           
  1828                           ; 16 bytes @ 0x32
  1829  0000B2                     	ds	16
  1830  0000C2                     mainOperation@nextDrawer:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x42
  1834  0000C2                     	ds	2
  1835  0000C4                     mainOperation@roundPieces:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x44
  1839  0000C4                     	ds	2
  1840  0000C6                     mainOperation@flatPieces:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x46
  1844  0000C6                     	ds	2
  1845  0000C8                     mainOperation@longPieces:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x48
  1849  0000C8                     	ds	2
  1850  0000CA                     mainOperation@currentDrawer:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x4A
  1854  0000CA                     	ds	2
  1855  0000CC                     mainOperation@trueValue:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x4C
  1859  0000CC                     	ds	2
  1860  0000CE                     mainOperation@i:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x4E
  1864  0000CE                     	ds	2
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           
  1874                           	psect	cstackCOMRAM
  1875  000001                     __pcstackCOMRAM:
  1876                           	opt stack 0
  1877  000001                     ??_isdigit:
  1878  000001                     ??_I2C_Master_Wait:
  1879  000001                     ?_findDrawerIndex:
  1880                           	opt stack 0
  1881  000001                     ?_getRoundPieces:
  1882                           	opt stack 0
  1883  000001                     ?_getFlatPieces:
  1884                           	opt stack 0
  1885  000001                     ?_getLongPieces:
  1886                           	opt stack 0
  1887  000001                     ?_check_food:
  1888                           	opt stack 0
  1889  000001                     ?_getRound:
  1890                           	opt stack 0
  1891  000001                     ?_getFlat:
  1892                           	opt stack 0
  1893  000001                     ?_getLong:
  1894                           	opt stack 0
  1895  000001                     ?_verifyKeypress:
  1896                           	opt stack 0
  1897  000001                     ?_printFoodInput:
  1898                           	opt stack 0
  1899  000001                     ?_get_digits:
  1900                           	opt stack 0
  1901  000001                     ?_decode_diet:
  1902                           	opt stack 0
  1903  000001                     ?_decode_drawer:
  1904                           	opt stack 0
  1905  000001                     ?___wmul:
  1906                           	opt stack 0
  1907  000001                     ?___lwdiv:
  1908                           	opt stack 0
  1909  000001                     ?___aldiv:
  1910                           	opt stack 0
  1911  000001                     ?___lldiv:
  1912                           	opt stack 0
  1913  000001                     writeEEPROM@data:
  1914                           	opt stack 0
  1915  000001                     readEEPROM@address:
  1916                           	opt stack 0
  1917  000001                     lcdNibble@temp:
  1918                           	opt stack 0
  1919  000001                     sortDrawerList@drawerTable:
  1920                           	opt stack 0
  1921  000001                     findDrawerIndex@drawerTable:
  1922                           	opt stack 0
  1923  000001                     getRoundPieces@dietType:
  1924                           	opt stack 0
  1925  000001                     getFlatPieces@dietType:
  1926                           	opt stack 0
  1927  000001                     getLongPieces@dietType:
  1928                           	opt stack 0
  1929  000001                     trapDoor@direction:
  1930                           	opt stack 0
  1931  000001                     check_food@sum:
  1932                           	opt stack 0
  1933  000001                     getRound@code:
  1934                           	opt stack 0
  1935  000001                     getFlat@code:
  1936                           	opt stack 0
  1937  000001                     getLong@code:
  1938                           	opt stack 0
  1939  000001                     verifyKeypress@keypress:
  1940                           	opt stack 0
  1941  000001                     printFoodInput@food:
  1942                           	opt stack 0
  1943  000001                     get_digits@sum:
  1944                           	opt stack 0
  1945  000001                     decode_diet@dietType:
  1946                           	opt stack 0
  1947  000001                     decode_drawer@drawer:
  1948                           	opt stack 0
  1949  000001                     uartTransmitBlocking@data:
  1950                           	opt stack 0
  1951  000001                     ___wmul@multiplier:
  1952                           	opt stack 0
  1953  000001                     ___lwdiv@dividend:
  1954                           	opt stack 0
  1955  000001                     ___aldiv@dividend:
  1956                           	opt stack 0
  1957  000001                     ___lldiv@dividend:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0x0
  1961  000001                     	ds	1
  1962  000002                     writeEEPROM@address:
  1963                           	opt stack 0
  1964  000002                     I2C_Master_Read@ackBit:
  1965                           	opt stack 0
  1966  000002                     lcdNibble@data:
  1967                           	opt stack 0
  1968  000002                     _isdigit$1966:
  1969                           	opt stack 0
  1970  000002                     I2C_Master_Write@byteToWrite:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x1
  1974  000002                     	ds	1
  1975  000003                     ??_shiftEEPROM:
  1976  000003                     ??_trapDoor:
  1977  000003                     ??_getRound:
  1978  000003                     ??_getFlat:
  1979  000003                     ??_getLong:
  1980  000003                     ??_verifyKeypress:
  1981  000003                     ??_get_digits:
  1982  000003                     ??_decode_diet:
  1983  000003                     ??_decode_drawer:
  1984  000003                     I2C_Master_Read@receivedByte:
  1985                           	opt stack 0
  1986  000003                     uartTransmitBlocking@numBytes:
  1987                           	opt stack 0
  1988  000003                     lcdInst@data:
  1989                           	opt stack 0
  1990  000003                     putch@data:
  1991                           	opt stack 0
  1992  000003                     isdigit@c:
  1993                           	opt stack 0
  1994  000003                     sortDrawerList@sortedDrawerTable:
  1995                           	opt stack 0
  1996  000003                     findDrawerIndex@sortedDrawerValue:
  1997                           	opt stack 0
  1998  000003                     getRoundPieces@foodType:
  1999                           	opt stack 0
  2000  000003                     getFlatPieces@foodType:
  2001                           	opt stack 0
  2002  000003                     getLongPieces@foodType:
  2003                           	opt stack 0
  2004  000003                     check_food@foodInput:
  2005                           	opt stack 0
  2006  000003                     initEEPROM@i:
  2007                           	opt stack 0
  2008  000003                     ___wmul@multiplicand:
  2009                           	opt stack 0
  2010  000003                     ___lwdiv@divisor:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x2
  2014  000003                     	ds	1
  2015  000004                     ??_initLCD:
  2016  000004                     ??_uartTransmitBlocking:
  2017  000004                     shiftEEPROM@temp:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x3
  2021  000004                     	ds	1
  2022  000005                     ??_sortDrawerList:
  2023  000005                     ??_getRoundPieces:
  2024  000005                     ??_getFlatPieces:
  2025  000005                     ??_getLongPieces:
  2026  000005                     ??_check_food:
  2027  000005                     verifyKeypress@logNumber:
  2028                           	opt stack 0
  2029  000005                     uartTransmitBlocking@numTransmits:
  2030                           	opt stack 0
  2031  000005                     trapDoor@i:
  2032                           	opt stack 0
  2033  000005                     getRound@returnValue:
  2034                           	opt stack 0
  2035  000005                     getFlat@returnValue:
  2036                           	opt stack 0
  2037  000005                     getLong@returnValue:
  2038                           	opt stack 0
  2039  000005                     get_digits@count:
  2040                           	opt stack 0
  2041  000005                     decode_diet@returnValue:
  2042                           	opt stack 0
  2043  000005                     decode_drawer@returnValue:
  2044                           	opt stack 0
  2045  000005                     ___wmul@product:
  2046                           	opt stack 0
  2047  000005                     ___lwdiv@quotient:
  2048                           	opt stack 0
  2049  000005                     ___aldiv@divisor:
  2050                           	opt stack 0
  2051  000005                     ___lldiv@divisor:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x4
  2055  000005                     	ds	1
  2056  000006                     verticalStepper@rotations:
  2057                           	opt stack 0
  2058  000006                     horizontalStepper@rotations:
  2059                           	opt stack 0
  2060  000006                     configDrawer@direction:
  2061                           	opt stack 0
  2062  000006                     verifyKeypress@returnVal:
  2063                           	opt stack 0
  2064  000006                     shiftEEPROM@i:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x5
  2068  000006                     	ds	1
  2069  000007                     ___lwdiv@counter:
  2070                           	opt stack 0
  2071  000007                     getUserInputs@drawerTable:
  2072                           	opt stack 0
  2073  000007                     findDrawerIndex@returnValue:
  2074                           	opt stack 0
  2075  000007                     getRoundPieces@returnValue:
  2076                           	opt stack 0
  2077  000007                     getFlatPieces@returnValue:
  2078                           	opt stack 0
  2079  000007                     getLongPieces@returnValue:
  2080                           	opt stack 0
  2081  000007                     distributeRound@count:
  2082                           	opt stack 0
  2083  000007                     distributeFlat@count:
  2084                           	opt stack 0
  2085  000007                     distributeLong@count:
  2086                           	opt stack 0
  2087  000007                     check_food@returnValue:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x6
  2091  000007                     	ds	1
  2092  000008                     ?___lwmod:
  2093                           	opt stack 0
  2094  000008                     verticalStepper@direction:
  2095                           	opt stack 0
  2096  000008                     horizontalStepper@direction:
  2097                           	opt stack 0
  2098  000008                     verifyKeypress@i:
  2099                           	opt stack 0
  2100  000008                     ___lwmod@dividend:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x7
  2104  000008                     	ds	1
  2105  000009                     ??_distributeRound:
  2106  000009                     ??_distributeFlat:
  2107  000009                     ??_distributeLong:
  2108  000009                     ___aldiv@counter:
  2109                           	opt stack 0
  2110  000009                     getUserInputs@dietTable:
  2111                           	opt stack 0
  2112  000009                     findDrawerIndex@i:
  2113                           	opt stack 0
  2114  000009                     ___lldiv@quotient:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x8
  2118  000009                     	ds	1
  2119  00000A                     ___aldiv@sign:
  2120                           	opt stack 0
  2121  00000A                     verticalStepper@i:
  2122                           	opt stack 0
  2123  00000A                     horizontalStepper@i:
  2124                           	opt stack 0
  2125  00000A                     distributeRound@i:
  2126                           	opt stack 0
  2127  00000A                     distributeFlat@i:
  2128                           	opt stack 0
  2129  00000A                     distributeLong@i:
  2130                           	opt stack 0
  2131  00000A                     ___lwmod@divisor:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x9
  2135  00000A                     	ds	1
  2136  00000B                     getUserInputs@foodTable:
  2137                           	opt stack 0
  2138  00000B                     ___aldiv@quotient:
  2139                           	opt stack 0
  2140  00000B                     sortDrawerList@sublist1:
  2141                           	opt stack 0
  2142                           
  2143                           ; 8 bytes @ 0xA
  2144  00000B                     	ds	1
  2145  00000C                     ?_moveVertically:
  2146                           	opt stack 0
  2147  00000C                     ___lwmod@counter:
  2148                           	opt stack 0
  2149  00000C                     moveVertically@currentDrawer:
  2150                           	opt stack 0
  2151  00000C                     moveHorizontally@currentDrawer:
  2152                           	opt stack 0
  2153  00000C                     initArm@currentDrawer:
  2154                           	opt stack 0
  2155  00000C                     distributePieces@roundPieces:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0xB
  2159  00000C                     	ds	1
  2160  00000D                     ??_getUserInputs:
  2161  00000D                     ?_printf:
  2162                           	opt stack 0
  2163  00000D                     ___lldiv@counter:
  2164                           	opt stack 0
  2165  00000D                     printf@f:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0xC
  2169  00000D                     	ds	1
  2170  00000E                     moveVertically@nextDrawer:
  2171                           	opt stack 0
  2172  00000E                     moveHorizontally@nextDrawer:
  2173                           	opt stack 0
  2174  00000E                     distributePieces@flatPieces:
  2175                           	opt stack 0
  2176  00000E                     I2C_Master_Init@clockFreq:
  2177                           	opt stack 0
  2178                           
  2179                           ; 4 bytes @ 0xD
  2180  00000E                     	ds	1
  2181  00000F                     getUserInputs@logNumber:
  2182                           	opt stack 0
  2183  00000F                     UART_Init@baud:
  2184                           	opt stack 0
  2185                           
  2186                           ; 4 bytes @ 0xE
  2187  00000F                     	ds	1
  2188  000010                     ??_moveHorizontally:
  2189  000010                     distributePieces@longPieces:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0xF
  2193  000010                     	ds	1
  2194  000011                     getUserInputs@count:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x10
  2198  000011                     	ds	1
  2199  000012                     ??_I2C_Master_Init:
  2200  000012                     ??_distributePieces:
  2201                           
  2202                           ; 1 bytes @ 0x11
  2203  000012                     	ds	1
  2204  000013                     ??_UART_Init:
  2205  000013                     getUserInputs@n:
  2206                           	opt stack 0
  2207  000013                     sortDrawerList@sublist4:
  2208                           	opt stack 0
  2209                           
  2210                           ; 8 bytes @ 0x12
  2211  000013                     	ds	2
  2212  000015                     getUserInputs@data:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x14
  2216  000015                     	ds	2
  2217  000017                     ??_printf:
  2218  000017                     getUserInputs@i:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x16
  2222  000017                     	ds	4
  2223  00001B                     printf@idx:
  2224                           	opt stack 0
  2225  00001B                     sortDrawerList@sublist2:
  2226                           	opt stack 0
  2227                           
  2228                           ; 8 bytes @ 0x1A
  2229  00001B                     	ds	1
  2230  00001C                     printf@prec:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x1B
  2234  00001C                     	ds	1
  2235  00001D                     printf@cp:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x1C
  2239  00001D                     	ds	2
  2240  00001F                     printf@ap:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x1E
  2244  00001F                     	ds	2
  2245  000021                     printf@len:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x20
  2249  000021                     	ds	2
  2250  000023                     printf@val:
  2251                           	opt stack 0
  2252  000023                     sortDrawerList@sublist3:
  2253                           	opt stack 0
  2254                           
  2255                           ; 8 bytes @ 0x22
  2256  000023                     	ds	2
  2257  000025                     printf@flag:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x24
  2261  000025                     	ds	1
  2262  000026                     printf@width:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x25
  2266  000026                     	ds	2
  2267  000028                     printf@c:
  2268                           	opt stack 0
  2269                           
  2270                           ; 1 bytes @ 0x27
  2271  000028                     	ds	1
  2272  000029                     ?_displayLogs:
  2273                           	opt stack 0
  2274  000029                     ?_food_press:
  2275                           	opt stack 0
  2276  000029                     ?_diet_press:
  2277                           	opt stack 0
  2278  000029                     ?_which_drawer:
  2279                           	opt stack 0
  2280  000029                     displayLogs@logNumber:
  2281                           	opt stack 0
  2282  000029                     food_press@dietSum:
  2283                           	opt stack 0
  2284  000029                     diet_press@drawer:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x28
  2288  000029                     	ds	2
  2289  00002B                     ??_displayLogs:
  2290  00002B                     ??_diet_press:
  2291  00002B                     ??_which_drawer:
  2292  00002B                     sortDrawerList@count4:
  2293                           	opt stack 0
  2294  00002B                     food_press@drawer:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x2A
  2298  00002B                     	ds	1
  2299  00002C                     which_drawer@rand:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x2B
  2303  00002C                     	ds	1
  2304  00002D                     ??_food_press:
  2305  00002D                     sortDrawerList@count2:
  2306                           	opt stack 0
  2307  00002D                     displayLogs@year:
  2308                           	opt stack 0
  2309  00002D                     diet_press@previous:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x2C
  2313  00002D                     	ds	1
  2314  00002E                     which_drawer@sum:
  2315                           	opt stack 0
  2316                           
  2317                           ; 2 bytes @ 0x2D
  2318  00002E                     	ds	1
  2319  00002F                     sortDrawerList@temp:
  2320                           	opt stack 0
  2321  00002F                     displayLogs@month:
  2322                           	opt stack 0
  2323  00002F                     food_press@tally:
  2324                           	opt stack 0
  2325  00002F                     diet_press@i:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x2E
  2329  00002F                     	ds	1
  2330  000030                     which_drawer@backCheck:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x2F
  2334  000030                     	ds	1
  2335  000031                     sortDrawerList@count1:
  2336                           	opt stack 0
  2337  000031                     displayLogs@day:
  2338                           	opt stack 0
  2339  000031                     food_press@backCheck:
  2340                           	opt stack 0
  2341  000031                     diet_press@backCheck:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x30
  2345  000031                     	ds	1
  2346  000032                     which_drawer@count:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x31
  2350  000032                     	ds	1
  2351  000033                     sortDrawerList@count3:
  2352                           	opt stack 0
  2353  000033                     displayLogs@roundPieces:
  2354                           	opt stack 0
  2355  000033                     food_press@isValid:
  2356                           	opt stack 0
  2357  000033                     diet_press@count:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x32
  2361  000033                     	ds	1
  2362  000034                     which_drawer@keypress:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x33
  2366  000034                     	ds	1
  2367  000035                     sortDrawerList@j:
  2368                           	opt stack 0
  2369  000035                     displayLogs@flatPieces:
  2370                           	opt stack 0
  2371  000035                     food_press@count:
  2372                           	opt stack 0
  2373  000035                     diet_press@sum:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x34
  2377  000035                     	ds	2
  2378  000037                     food_press@keypress:
  2379                           	opt stack 0
  2380  000037                     diet_press@keypress:
  2381                           	opt stack 0
  2382  000037                     sortDrawerList@i:
  2383                           	opt stack 0
  2384  000037                     displayLogs@longPieces:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x36
  2388  000037                     	ds	1
  2389  000038                     food_press@foodTable:
  2390                           	opt stack 0
  2391  000038                     diet_press@dietTable:
  2392                           	opt stack 0
  2393                           
  2394                           ; 8 bytes @ 0x37
  2395  000038                     	ds	1
  2396  000039                     ??_mainOperation:
  2397  000039                     displayLogs@minutes:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x38
  2401  000039                     	ds	2
  2402  00003B                     displayLogs@seconds:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x3A
  2406  00003B                     	ds	2
  2407  00003D                     displayLogs@dietType:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x3C
  2411  00003D                     	ds	2
  2412  00003F                     displayLogs@foodType:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x3E
  2416  00003F                     	ds	2
  2417  000041                     displayLogs@keypress3:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x40
  2421  000041                     	ds	1
  2422  000042                     displayLogs@operationTime:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x41
  2426  000042                     	ds	2
  2427  000044                     displayLogs@drawerNumber:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x43
  2431  000044                     	ds	2
  2432  000046                     displayLogs@i:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x45
  2436  000046                     	ds	2
  2437  000048                     displayLogs@markedDrawer1:
  2438                           	opt stack 0
  2439                           
  2440                           ; 2 bytes @ 0x47
  2441  000048                     	ds	2
  2442  00004A                     displayLogs@markedDrawer2:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x49
  2446  00004A                     	ds	2
  2447  00004C                     displayLogs@markedDrawer3:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0x4B
  2451  00004C                     	ds	2
  2452  00004E                     displayLogs@markedDrawer4:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0x4D
  2456  00004E                     	ds	2
  2457  000050                     displayLogs@n:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x4F
  2461  000050                     	ds	2
  2462  000052                     ?_viewLogs:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x51
  2466  000052                     	ds	2
  2467  000054                     ??_viewLogs:
  2468                           
  2469                           ; 1 bytes @ 0x53
  2470  000054                     	ds	2
  2471  000056                     viewLogs@checkLog:
  2472                           	opt stack 0
  2473                           
  2474                           ; 2 bytes @ 0x55
  2475  000056                     	ds	2
  2476  000058                     viewLogs@returnVal:
  2477                           	opt stack 0
  2478                           
  2479                           ; 2 bytes @ 0x57
  2480  000058                     	ds	2
  2481  00005A                     viewLogs@logView:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x59
  2485  00005A                     	ds	2
  2486  00005C                     viewLogs@logNumber:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0x5B
  2490  00005C                     	ds	1
  2491  00005D                     viewLogs@keypress2:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0x5C
  2495  00005D                     	ds	1
  2496  00005E                     ?_standbyMode:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x5D
  2500  00005E                     	ds	2
  2501  000060                     ??_standbyMode:
  2502                           
  2503                           ; 1 bytes @ 0x5F
  2504  000060                     	ds	4
  2505  000064                     ??_main:
  2506                           
  2507                           ; 1 bytes @ 0x63
  2508  000064                     	ds	2
  2509  000066                     main@i:
  2510                           	opt stack 0
  2511                           
  2512                           ; 2 bytes @ 0x65
  2513  000066                     	ds	2
  2514  000068                     main@l:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x67
  2518  000068                     	ds	2
  2519  00006A                     main@operationMode:
  2520                           	opt stack 0
  2521                           
  2522                           ; 2 bytes @ 0x69
  2523  00006A                     	ds	2
  2524  00006C                     main@checkEEPROM:
  2525                           	opt stack 0
  2526                           
  2527                           ; 2 bytes @ 0x6B
  2528  00006C                     	ds	2
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           
  2538 ;;
  2539 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2540 ;;
  2541 ;; *************** function _main *****************
  2542 ;; Defined at:
  2543 ;;		line 19 in file "main.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  checkEEPROM     2  107[COMRAM] unsigned int 
  2548 ;;  operationMod    2  105[COMRAM] unsigned int 
  2549 ;;  l               2  103[COMRAM] unsigned int 
  2550 ;;  i               2  101[COMRAM] unsigned int 
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2561 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;Total ram usage:       10 bytes
  2565 ;; Hardware stack levels required when called:    6
  2566 ;; This function calls:
  2567 ;;		_UART_Init
  2568 ;;		_initEEPROM
  2569 ;;		_initLCD
  2570 ;;		_lcdInst
  2571 ;;		_mainOperation
  2572 ;;		_printf
  2573 ;;		_readEEPROM
  2574 ;;		_standbyMode
  2575 ;; This function is called by:
  2576 ;;		Startup code after reset
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text0
  2581  00ACC2                     __ptext0:
  2582                           	opt stack 0
  2583  00ACC2                     _main:
  2584                           	opt stack 25
  2585                           
  2586                           ;main.c: 25: LATA = 0x00;
  2587                           
  2588                           ;incstack = 0
  2589  00ACC2  0E00               	movlw	0
  2590  00ACC4  6E89               	movwf	3977,c	;volatile
  2591                           
  2592                           ;main.c: 26: LATB = 0x00;
  2593  00ACC6  0E00               	movlw	0
  2594  00ACC8  6E8A               	movwf	3978,c	;volatile
  2595                           
  2596                           ;main.c: 27: LATC = 0x00;
  2597  00ACCA  0E00               	movlw	0
  2598  00ACCC  6E8B               	movwf	3979,c	;volatile
  2599                           
  2600                           ;main.c: 28: LATD = 0x00;
  2601  00ACCE  0E00               	movlw	0
  2602  00ACD0  6E8C               	movwf	3980,c	;volatile
  2603                           
  2604                           ;main.c: 29: LATE = 0x00;
  2605  00ACD2  0E00               	movlw	0
  2606  00ACD4  6E8D               	movwf	3981,c	;volatile
  2607                           
  2608                           ;main.c: 33: TRISA = 0xFF;
  2609  00ACD6  6892               	setf	3986,c	;volatile
  2610                           
  2611                           ;main.c: 34: TRISB = 0xFF;
  2612  00ACD8  6893               	setf	3987,c	;volatile
  2613                           
  2614                           ;main.c: 35: TRISC = 0x00;
  2615  00ACDA  0E00               	movlw	0
  2616  00ACDC  6E94               	movwf	3988,c	;volatile
  2617                           
  2618                           ;main.c: 36: TRISD = 0x00;
  2619  00ACDE  0E00               	movlw	0
  2620  00ACE0  6E95               	movwf	3989,c	;volatile
  2621                           
  2622                           ;main.c: 37: TRISE = 0x00;
  2623  00ACE2  0E00               	movlw	0
  2624  00ACE4  6E96               	movwf	3990,c	;volatile
  2625                           
  2626                           ;main.c: 40: ADCON0 = 0x00;
  2627  00ACE6  0E00               	movlw	0
  2628  00ACE8  6EC2               	movwf	4034,c	;volatile
  2629                           
  2630                           ;main.c: 41: ADCON1 = 0b00001111;
  2631  00ACEA  0E0F               	movlw	15
  2632  00ACEC  6EC1               	movwf	4033,c	;volatile
  2633                           
  2634                           ;main.c: 44: initLCD();
  2635  00ACEE  ECEA  F04D         	call	_initLCD	;wreg free
  2636                           
  2637                           ;main.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2638  00ACF2  0E01               	movlw	1
  2639  00ACF4  EC16  F04D         	call	_lcdInst
  2640  00ACF8  0EC3               	movlw	195
  2641  00ACFA  6E64               	movwf	??_main& (0+255),c
  2642  00ACFC  0ECD               	movlw	205
  2643  00ACFE                     u14287:
  2644  00ACFE  2EE8               	decfsz	wreg,f,c
  2645  00AD00  D7FE               	bra	u14287
  2646  00AD02  2E64               	decfsz	??_main& (0+255),f,c
  2647  00AD04  D7FC               	bra	u14287
  2648  00AD06  F000               	nop	
  2649                           
  2650                           ;main.c: 46: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2651  00AD08  0E0C               	movlw	12
  2652  00AD0A  EC16  F04D         	call	_lcdInst
  2653                           
  2654                           ;main.c: 47: printf("Standby");
  2655  00AD0E  0E97               	movlw	low STR_1
  2656  00AD10  6E0D               	movwf	printf@f,c
  2657  00AD12  0EFF               	movlw	high STR_1
  2658  00AD14  6E0E               	movwf	printf@f+1,c
  2659  00AD16  EC0C  F061         	call	_printf	;wreg free
  2660                           
  2661                           ;main.c: 50: UART_Init(9600);
  2662  00AD1A  0E80               	movlw	128
  2663  00AD1C  6E0F               	movwf	UART_Init@baud,c
  2664  00AD1E  0E25               	movlw	37
  2665  00AD20  6E10               	movwf	UART_Init@baud+1,c
  2666  00AD22  0E00               	movlw	0
  2667  00AD24  6E11               	movwf	UART_Init@baud+2,c
  2668  00AD26  0E00               	movlw	0
  2669  00AD28  6E12               	movwf	UART_Init@baud+3,c
  2670  00AD2A  ECDE  F04F         	call	_UART_Init	;wreg free
  2671                           
  2672                           ;main.c: 75: unsigned int operationMode = 0;
  2673  00AD2E  0E00               	movlw	0
  2674  00AD30  6E6B               	movwf	main@operationMode+1,c
  2675  00AD32  0E00               	movlw	0
  2676  00AD34  6E6A               	movwf	main@operationMode,c
  2677                           
  2678                           ;main.c: 76: unsigned int i = 0;
  2679  00AD36  0E00               	movlw	0
  2680  00AD38  6E67               	movwf	main@i+1,c
  2681  00AD3A  0E00               	movlw	0
  2682  00AD3C  6E66               	movwf	main@i,c
  2683                           
  2684                           ;main.c: 77: unsigned int l = 0;
  2685  00AD3E  0E00               	movlw	0
  2686  00AD40  6E69               	movwf	main@l+1,c
  2687  00AD42  0E00               	movlw	0
  2688  00AD44  6E68               	movwf	main@l,c
  2689                           
  2690                           ;main.c: 79: TRISDbits.TRISD0 = 0;
  2691  00AD46  9095               	bcf	3989,0,c	;volatile
  2692                           
  2693                           ;main.c: 80: TRISDbits.TRISD1 = 0;
  2694  00AD48  9295               	bcf	3989,1,c	;volatile
  2695                           
  2696                           ;main.c: 81: TRISDbits.TRISD2 = 0;
  2697  00AD4A  9495               	bcf	3989,2,c	;volatile
  2698                           
  2699                           ;main.c: 82: TRISDbits.TRISD3 = 0;
  2700  00AD4C  9695               	bcf	3989,3,c	;volatile
  2701                           
  2702                           ;main.c: 83: TRISDbits.TRISD4 = 0;
  2703  00AD4E  9895               	bcf	3989,4,c	;volatile
  2704                           
  2705                           ;main.c: 84: TRISDbits.TRISD5 = 0;
  2706  00AD50  9A95               	bcf	3989,5,c	;volatile
  2707                           
  2708                           ;main.c: 85: TRISDbits.TRISD6 = 0;
  2709  00AD52  9C95               	bcf	3989,6,c	;volatile
  2710                           
  2711                           ;main.c: 86: TRISDbits.TRISD7 = 0;
  2712  00AD54  9E95               	bcf	3989,7,c	;volatile
  2713                           
  2714                           ;main.c: 87: TRISCbits.TRISC2 = 0;
  2715  00AD56  9494               	bcf	3988,2,c	;volatile
  2716                           
  2717                           ;main.c: 88: TRISCbits.TRISC1 = 0;
  2718  00AD58  9294               	bcf	3988,1,c	;volatile
  2719                           
  2720                           ;main.c: 89: TRISCbits.TRISC0 = 0;
  2721  00AD5A  9094               	bcf	3988,0,c	;volatile
  2722                           
  2723                           ;main.c: 90: TRISEbits.TRISE2 = 0;
  2724  00AD5C  9496               	bcf	3990,2,c	;volatile
  2725                           
  2726                           ;main.c: 91: TRISAbits.TRISA4 = 0;
  2727  00AD5E  9892               	bcf	3986,4,c	;volatile
  2728                           
  2729                           ;main.c: 92: TRISAbits.TRISA5 = 0;
  2730  00AD60  9A92               	bcf	3986,5,c	;volatile
  2731                           
  2732                           ;main.c: 93: TRISEbits.TRISE0 = 0;
  2733  00AD62  9096               	bcf	3990,0,c	;volatile
  2734                           
  2735                           ;main.c: 94: TRISEbits.TRISE1 = 0;
  2736  00AD64  9296               	bcf	3990,1,c	;volatile
  2737                           
  2738                           ;main.c: 95: LATEbits.LATE2 = 0;
  2739  00AD66  948D               	bcf	3981,2,c	;volatile
  2740                           
  2741                           ;main.c: 96: LATCbits.LATC2 = 0;
  2742  00AD68  948B               	bcf	3979,2,c	;volatile
  2743                           
  2744                           ;main.c: 97: LATCbits.LATC1 = 0;
  2745  00AD6A  928B               	bcf	3979,1,c	;volatile
  2746                           
  2747                           ;main.c: 98: LATCbits.LATC0 = 0;
  2748  00AD6C  908B               	bcf	3979,0,c	;volatile
  2749                           
  2750                           ;main.c: 99: LATDbits.LATD3 = 0;
  2751  00AD6E  968C               	bcf	3980,3,c	;volatile
  2752                           
  2753                           ;main.c: 100: LATDbits.LATD2 = 0;
  2754  00AD70  948C               	bcf	3980,2,c	;volatile
  2755                           
  2756                           ;main.c: 101: LATDbits.LATD1 = 0;
  2757  00AD72  928C               	bcf	3980,1,c	;volatile
  2758                           
  2759                           ;main.c: 102: LATDbits.LATD0 = 0;
  2760  00AD74  908C               	bcf	3980,0,c	;volatile
  2761                           
  2762                           ;main.c: 103: LATDbits.LATD4 = 0;
  2763  00AD76  988C               	bcf	3980,4,c	;volatile
  2764                           
  2765                           ;main.c: 104: LATDbits.LATD5 = 0;
  2766  00AD78  9A8C               	bcf	3980,5,c	;volatile
  2767                           
  2768                           ;main.c: 105: LATDbits.LATD6 = 0;
  2769  00AD7A  9C8C               	bcf	3980,6,c	;volatile
  2770                           
  2771                           ;main.c: 106: LATDbits.LATD7 = 0;
  2772  00AD7C  9E8C               	bcf	3980,7,c	;volatile
  2773                           
  2774                           ;main.c: 107: LATEbits.LATE1 = 0;
  2775  00AD7E  928D               	bcf	3981,1,c	;volatile
  2776                           
  2777                           ;main.c: 108: LATEbits.LATE0 = 0;
  2778  00AD80  908D               	bcf	3981,0,c	;volatile
  2779                           
  2780                           ;main.c: 109: LATAbits.LATA4 = 0;
  2781  00AD82  9889               	bcf	3977,4,c	;volatile
  2782                           
  2783                           ;main.c: 110: LATAbits.LATA5 = 0;
  2784  00AD84  9A89               	bcf	3977,5,c	;volatile
  2785                           
  2786                           ;main.c: 175: unsigned int checkEEPROM = 0;
  2787  00AD86  0E00               	movlw	0
  2788  00AD88  6E6D               	movwf	main@checkEEPROM+1,c
  2789  00AD8A  0E00               	movlw	0
  2790  00AD8C  6E6C               	movwf	main@checkEEPROM,c
  2791                           
  2792                           ;main.c: 177: checkEEPROM = readEEPROM(251);
  2793  00AD8E  0EFB               	movlw	251
  2794  00AD90  EC20  F04D         	call	_readEEPROM
  2795  00AD94  6E64               	movwf	??_main& (0+255),c
  2796  00AD96  5064               	movf	??_main,w,c
  2797  00AD98  6E6C               	movwf	main@checkEEPROM,c
  2798  00AD9A  6A6D               	clrf	main@checkEEPROM+1,c
  2799                           
  2800                           ;main.c: 179: if (checkEEPROM == 255){
  2801  00AD9C  286C               	incf	main@checkEEPROM,w,c
  2802  00AD9E  106D               	iorwf	main@checkEEPROM+1,w,c
  2803  00ADA0  A4D8               	btfss	status,2,c
  2804  00ADA2  D01F               	goto	l83
  2805                           
  2806                           ;main.c: 180: initEEPROM();
  2807  00ADA4  EC55  F04D         	call	_initEEPROM	;wreg free
  2808                           
  2809                           ;main.c: 181: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2810  00ADA8  0E01               	movlw	1
  2811  00ADAA  EC16  F04D         	call	_lcdInst
  2812  00ADAE  0EC3               	movlw	195
  2813  00ADB0  6E64               	movwf	??_main& (0+255),c
  2814  00ADB2  0ECD               	movlw	205
  2815  00ADB4                     u14297:
  2816  00ADB4  2EE8               	decfsz	wreg,f,c
  2817  00ADB6  D7FE               	bra	u14297
  2818  00ADB8  2E64               	decfsz	??_main& (0+255),f,c
  2819  00ADBA  D7FC               	bra	u14297
  2820  00ADBC  F000               	nop	
  2821                           
  2822                           ;main.c: 182: printf("Clearing EEPROM");
  2823  00ADBE  0EA0               	movlw	low STR_2
  2824  00ADC0  6E0D               	movwf	printf@f,c
  2825  00ADC2  0EFD               	movlw	high STR_2
  2826  00ADC4  6E0E               	movwf	printf@f+1,c
  2827  00ADC6  EC0C  F061         	call	_printf	;wreg free
  2828                           
  2829                           ;main.c: 183: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2830  00ADCA  0E66               	movlw	102
  2831  00ADCC  6E65               	movwf	(??_main+1)& (0+255),c
  2832  00ADCE  0E76               	movlw	118
  2833  00ADD0  6E64               	movwf	??_main& (0+255),c
  2834  00ADD2  0EC1               	movlw	193
  2835  00ADD4                     u14307:
  2836  00ADD4  2EE8               	decfsz	wreg,f,c
  2837  00ADD6  D7FE               	bra	u14307
  2838  00ADD8  2E64               	decfsz	??_main& (0+255),f,c
  2839  00ADDA  D7FC               	bra	u14307
  2840  00ADDC  2E65               	decfsz	(??_main+1)& (0+255),f,c
  2841  00ADDE  D7FA               	bra	u14307
  2842  00ADE0  F000               	nop	
  2843  00ADE2                     l83:
  2844                           
  2845                           ;main.c: 184: }
  2846                           ;main.c: 187: operationMode = standbyMode();
  2847  00ADE2  ECA8  F076         	call	_standbyMode	;wreg free
  2848  00ADE6  C05E  F06A         	movff	?_standbyMode,main@operationMode
  2849  00ADEA  C05F  F06B         	movff	?_standbyMode+1,main@operationMode+1
  2850                           
  2851                           ;main.c: 189: if (operationMode == 1){
  2852  00ADEE  046A               	decf	main@operationMode,w,c
  2853  00ADF0  106B               	iorwf	main@operationMode+1,w,c
  2854  00ADF2  B4D8               	btfsc	status,2,c
  2855                           
  2856                           ;main.c: 190: mainOperation();
  2857  00ADF4  EC56  F068         	call	_mainOperation	;wreg free
  2858                           
  2859                           ;main.c: 191: }
  2860                           ;main.c: 193: firstIteration += 1;
  2861  00ADF8  4A76               	infsnz	_firstIteration,f,c
  2862  00ADFA  2A77               	incf	_firstIteration+1,f,c
  2863                           
  2864                           ;main.c: 194: return;
  2865  00ADFC  EF00  F000         	goto	start
  2866  00AE00                     __end_of_main:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _standbyMode *****************
  2879 ;; Defined at:
  2880 ;;		line 1605 in file "standbyMode.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2885 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2886 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2887 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2888 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2889 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2890 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2891 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2892 ;;  time            7   96[BANK1 ] unsigned char [7]
  2893 ;;  i               2  136[BANK1 ] unsigned int 
  2894 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2895 ;;  food            2  132[BANK1 ] unsigned int 
  2896 ;;  drawer          2  130[BANK1 ] unsigned int 
  2897 ;;  diet            2  128[BANK1 ] unsigned int 
  2898 ;;  x               2  125[BANK1 ] unsigned int 
  2899 ;;  n               2  123[BANK1 ] unsigned int 
  2900 ;;  zero            2  121[BANK1 ] unsigned int 
  2901 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2902 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2903 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2904 ;;  lng             2  112[BANK1 ] unsigned int 
  2905 ;;  flat            2  110[BANK1 ] unsigned int 
  2906 ;;  round           2  108[BANK1 ] unsigned int 
  2907 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2908 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2909 ;;  keypress        1  107[BANK1 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  2   93[COMRAM] unsigned int 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         6       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:      144 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    5
  2926 ;; This function calls:
  2927 ;;		_I2C_Master_Init
  2928 ;;		_I2C_Master_Read
  2929 ;;		_I2C_Master_Start
  2930 ;;		_I2C_Master_Stop
  2931 ;;		_I2C_Master_Write
  2932 ;;		___wmul
  2933 ;;		_decode_diet
  2934 ;;		_diet_press
  2935 ;;		_food_press
  2936 ;;		_getFlat
  2937 ;;		_getLong
  2938 ;;		_getRound
  2939 ;;		_lcdInst
  2940 ;;		_printFoodInput
  2941 ;;		_printf
  2942 ;;		_readEEPROM
  2943 ;;		_shiftEEPROM
  2944 ;;		_viewLogs
  2945 ;;		_which_drawer
  2946 ;;		_writeEEPROM
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text1
  2953  00ED50                     __ptext1:
  2954                           	opt stack 0
  2955  00ED50                     _standbyMode:
  2956                           	opt stack 25
  2957                           
  2958                           ;standbyMode.c: 1606: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2959                           
  2960                           ;incstack = 0
  2961  00ED50  EE21  F09A         	lfsr	2,standbyMode@F3152
  2962  00ED54  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2963  00ED58  0E0F               	movlw	15
  2964  00ED5A                     u13511:
  2965  00ED5A  CFDB FFE3          	movff	plusw2,plusw1
  2966  00ED5E  06E8               	decf	wreg,f,c
  2967  00ED60  E2FC               	bc	u13511
  2968                           
  2969                           ;standbyMode.c: 1607: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2970  00ED62  EE21  F08A         	lfsr	2,standbyMode@F3154
  2971  00ED66  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2972  00ED6A  0E0F               	movlw	15
  2973  00ED6C                     u13521:
  2974  00ED6C  CFDB FFE3          	movff	plusw2,plusw1
  2975  00ED70  06E8               	decf	wreg,f,c
  2976  00ED72  E2FC               	bc	u13521
  2977                           
  2978                           ;standbyMode.c: 1608: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2979  00ED74  EE22  F030         	lfsr	2,standbyMode@F3156
  2980  00ED78  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2981  00ED7C  0E0F               	movlw	15
  2982  00ED7E                     u13531:
  2983  00ED7E  CFDB FFE3          	movff	plusw2,plusw1
  2984  00ED82  06E8               	decf	wreg,f,c
  2985  00ED84  E2FC               	bc	u13531
  2986                           
  2987                           ;standbyMode.c: 1609: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2988  00ED86  EE22  F020         	lfsr	2,standbyMode@F3158
  2989  00ED8A  EE11  F020         	lfsr	1,standbyMode@longPieces
  2990  00ED8E  0E0F               	movlw	15
  2991  00ED90                     u13541:
  2992  00ED90  CFDB FFE3          	movff	plusw2,plusw1
  2993  00ED94  06E8               	decf	wreg,f,c
  2994  00ED96  E2FC               	bc	u13541
  2995                           
  2996                           ;standbyMode.c: 1610: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2997  00ED98  EE22  F010         	lfsr	2,standbyMode@F3160
  2998  00ED9C  EE11  F030         	lfsr	1,standbyMode@dietType
  2999  00EDA0  0E0F               	movlw	15
  3000  00EDA2                     u13551:
  3001  00EDA2  CFDB FFE3          	movff	plusw2,plusw1
  3002  00EDA6  06E8               	decf	wreg,f,c
  3003  00EDA8  E2FC               	bc	u13551
  3004                           
  3005                           ;standbyMode.c: 1611: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  3006  00EDAA  EE22  F000         	lfsr	2,standbyMode@F3162
  3007  00EDAE  EE11  F040         	lfsr	1,standbyMode@foodType
  3008  00EDB2  0E0F               	movlw	15
  3009  00EDB4                     u13561:
  3010  00EDB4  CFDB FFE3          	movff	plusw2,plusw1
  3011  00EDB8  06E8               	decf	wreg,f,c
  3012  00EDBA  E2FC               	bc	u13561
  3013                           
  3014                           ;standbyMode.c: 1612: unsigned int drawerCount = 0;
  3015  00EDBC  0E00               	movlw	0
  3016  00EDBE  0101               	movlb	1	; () banked
  3017  00EDC0  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  3018  00EDC2  0E00               	movlw	0
  3019  00EDC4  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;standbyMode.c: 1613: unsigned int i = 0;
  3023  00EDC6  0E00               	movlw	0
  3024  00EDC8  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3025  00EDCA  0E00               	movlw	0
  3026  00EDCC  6F88               	movwf	standbyMode@i& (0+255),b
  3027                           
  3028                           ; BSR set to: 1
  3029                           ;standbyMode.c: 1614: unsigned int validDrawer = 0;
  3030  00EDCE  0E00               	movlw	0
  3031  00EDD0  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3032  00EDD2  0E00               	movlw	0
  3033  00EDD4  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3034                           
  3035                           ; BSR set to: 1
  3036                           ;standbyMode.c: 1615: unsigned int zero = 0;
  3037  00EDD6  0E00               	movlw	0
  3038  00EDD8  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3039  00EDDA  0E00               	movlw	0
  3040  00EDDC  6F79               	movwf	standbyMode@zero& (0+255),b
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;standbyMode.c: 1616: unsigned int firstIteration = 0;
  3044  00EDDE  0E00               	movlw	0
  3045  00EDE0  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3046  00EDE2  0E00               	movlw	0
  3047  00EDE4  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;standbyMode.c: 1617: unsigned int drawer = 0;
  3051  00EDE6  0E00               	movlw	0
  3052  00EDE8  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3053  00EDEA  0E00               	movlw	0
  3054  00EDEC  6F82               	movwf	standbyMode@drawer& (0+255),b
  3055                           
  3056                           ; BSR set to: 1
  3057                           ;standbyMode.c: 1618: unsigned int diet = 0;
  3058  00EDEE  0E00               	movlw	0
  3059  00EDF0  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3060  00EDF2  0E00               	movlw	0
  3061  00EDF4  6F80               	movwf	standbyMode@diet& (0+255),b
  3062                           
  3063                           ; BSR set to: 1
  3064                           ;standbyMode.c: 1619: unsigned int food = 0;
  3065  00EDF6  0E00               	movlw	0
  3066  00EDF8  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3067  00EDFA  0E00               	movlw	0
  3068  00EDFC  6F84               	movwf	standbyMode@food& (0+255),b
  3069                           
  3070                           ; BSR set to: 1
  3071                           ;standbyMode.c: 1620: unsigned char logNumber = 0;
  3072  00EDFE  0E00               	movlw	0
  3073  00EE00  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  3074                           
  3075                           ; BSR set to: 1
  3076                           ;standbyMode.c: 1621: unsigned int n = 0;
  3077  00EE02  0E00               	movlw	0
  3078  00EE04  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  3079  00EE06  0E00               	movlw	0
  3080  00EE08  6F7B               	movwf	standbyMode@n& (0+255),b
  3081                           
  3082                           ; BSR set to: 1
  3083                           ;standbyMode.c: 1622: unsigned int round = 0;
  3084  00EE0A  0E00               	movlw	0
  3085  00EE0C  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  3086  00EE0E  0E00               	movlw	0
  3087  00EE10  6F6C               	movwf	standbyMode@round& (0+255),b
  3088                           
  3089                           ; BSR set to: 1
  3090                           ;standbyMode.c: 1623: unsigned int flat = 0;
  3091  00EE12  0E00               	movlw	0
  3092  00EE14  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  3093  00EE16  0E00               	movlw	0
  3094  00EE18  6F6E               	movwf	standbyMode@flat& (0+255),b
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;standbyMode.c: 1624: unsigned int lng = 0;
  3098  00EE1A  0E00               	movlw	0
  3099  00EE1C  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  3100  00EE1E  0E00               	movlw	0
  3101  00EE20  6F70               	movwf	standbyMode@lng& (0+255),b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;standbyMode.c: 1625: unsigned int decodedDiet = 0;
  3105  00EE22  0E00               	movlw	0
  3106  00EE24  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  3107  00EE26  0E00               	movlw	0
  3108  00EE28  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  3109                           
  3110                           ; BSR set to: 1
  3111                           ;standbyMode.c: 1626: unsigned int storedFoodType = 0;
  3112  00EE2A  0E00               	movlw	0
  3113  00EE2C  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  3114  00EE2E  0E00               	movlw	0
  3115  00EE30  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;standbyMode.c: 1628: unsigned char time[7];
  3119                           ;standbyMode.c: 1629: unsigned int x = 0;
  3120  00EE32  0E00               	movlw	0
  3121  00EE34  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3122  00EE36  0E00               	movlw	0
  3123  00EE38  6F7D               	movwf	standbyMode@x& (0+255),b
  3124                           
  3125                           ; BSR set to: 1
  3126                           ;standbyMode.c: 1632: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3127  00EE3A  0E01               	movlw	1
  3128  00EE3C  EC16  F04D         	call	_lcdInst
  3129  00EE40  0EC3               	movlw	195
  3130  00EE42  6E60               	movwf	??_standbyMode& (0+255),c
  3131  00EE44  0ECD               	movlw	205
  3132  00EE46                     u14317:
  3133  00EE46  2EE8               	decfsz	wreg,f,c
  3134  00EE48  D7FE               	bra	u14317
  3135  00EE4A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3136  00EE4C  D7FC               	bra	u14317
  3137  00EE4E  F000               	nop	
  3138                           
  3139                           ;standbyMode.c: 1633: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3140  00EE50  0E0C               	movlw	12
  3141  00EE52  EC16  F04D         	call	_lcdInst
  3142                           
  3143                           ;standbyMode.c: 1634: printf("Standby");
  3144  00EE56  0E97               	movlw	low STR_1
  3145  00EE58  6E0D               	movwf	printf@f,c
  3146  00EE5A  0EFF               	movlw	high STR_1
  3147  00EE5C  6E0E               	movwf	printf@f+1,c
  3148  00EE5E  EC0C  F061         	call	_printf	;wreg free
  3149                           
  3150                           ;standbyMode.c: 1635: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3151  00EE62  0E66               	movlw	102
  3152  00EE64  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3153  00EE66  0E76               	movlw	118
  3154  00EE68  6E60               	movwf	??_standbyMode& (0+255),c
  3155  00EE6A  0EC1               	movlw	193
  3156  00EE6C                     u14327:
  3157  00EE6C  2EE8               	decfsz	wreg,f,c
  3158  00EE6E  D7FE               	bra	u14327
  3159  00EE70  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3160  00EE72  D7FC               	bra	u14327
  3161  00EE74  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3162  00EE76  D7FA               	bra	u14327
  3163  00EE78  F000               	nop	
  3164                           
  3165                           ;standbyMode.c: 1636: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3166  00EE7A  0E01               	movlw	1
  3167  00EE7C  EC16  F04D         	call	_lcdInst
  3168  00EE80  0EC3               	movlw	195
  3169  00EE82  6E60               	movwf	??_standbyMode& (0+255),c
  3170  00EE84  0ECD               	movlw	205
  3171  00EE86                     u14337:
  3172  00EE86  2EE8               	decfsz	wreg,f,c
  3173  00EE88  D7FE               	bra	u14337
  3174  00EE8A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3175  00EE8C  D7FC               	bra	u14337
  3176  00EE8E  F000               	nop	
  3177                           
  3178                           ;standbyMode.c: 1637: printf("Press any key to");
  3179  00EE90  0EDE               	movlw	low STR_80
  3180  00EE92  6E0D               	movwf	printf@f,c
  3181  00EE94  0EFC               	movlw	high STR_80
  3182  00EE96  6E0E               	movwf	printf@f+1,c
  3183  00EE98  EC0C  F061         	call	_printf	;wreg free
  3184                           
  3185                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  3186  00EE9C  0EC0               	movlw	192
  3187  00EE9E  EC16  F04D         	call	_lcdInst
  3188                           
  3189                           ;standbyMode.c: 1639: printf("begin operation.");
  3190  00EEA2  0E9A               	movlw	low STR_117
  3191  00EEA4  6E0D               	movwf	printf@f,c
  3192  00EEA6  0EFC               	movlw	high STR_117
  3193  00EEA8  6E0E               	movwf	printf@f+1,c
  3194  00EEAA  EC0C  F061         	call	_printf	;wreg free
  3195  00EEAE                     
  3196                           ;standbyMode.c: 1642: continue;
  3197  00EEAE  A281               	btfss	3969,1,c	;volatile
  3198  00EEB0  D7FE               	goto	l1250
  3199                           
  3200                           ;standbyMode.c: 1643: }
  3201                           ;standbyMode.c: 1646: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3202  00EEB2  0E01               	movlw	1
  3203  00EEB4  EC16  F04D         	call	_lcdInst
  3204  00EEB8  0EC3               	movlw	195
  3205  00EEBA  6E60               	movwf	??_standbyMode& (0+255),c
  3206  00EEBC  0ECD               	movlw	205
  3207  00EEBE                     u14347:
  3208  00EEBE  2EE8               	decfsz	wreg,f,c
  3209  00EEC0  D7FE               	bra	u14347
  3210  00EEC2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3211  00EEC4  D7FC               	bra	u14347
  3212  00EEC6  F000               	nop	
  3213                           
  3214                           ;standbyMode.c: 1647: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3215  00EEC8  0E0C               	movlw	12
  3216  00EECA  EC16  F04D         	call	_lcdInst
  3217                           
  3218                           ;standbyMode.c: 1648: printf("Welcome to your");
  3219  00EECE  0E70               	movlw	low STR_118
  3220  00EED0  6E0D               	movwf	printf@f,c
  3221  00EED2  0EFD               	movlw	high STR_118
  3222  00EED4  6E0E               	movwf	printf@f+1,c
  3223  00EED6  EC0C  F061         	call	_printf	;wreg free
  3224                           
  3225                           ;standbyMode.c: 1649: lcdInst(0xC0);;
  3226  00EEDA  0EC0               	movlw	192
  3227  00EEDC  EC16  F04D         	call	_lcdInst
  3228                           
  3229                           ;standbyMode.c: 1650: printf("cabinet sorter!");
  3230  00EEE0  0E00               	movlw	low STR_119
  3231  00EEE2  6E0D               	movwf	printf@f,c
  3232  00EEE4  0EFD               	movlw	high STR_119
  3233  00EEE6  6E0E               	movwf	printf@f+1,c
  3234  00EEE8  EC0C  F061         	call	_printf	;wreg free
  3235                           
  3236                           ;standbyMode.c: 1651: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3237  00EEEC  0E33               	movlw	51
  3238  00EEEE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3239  00EEF0  0EBB               	movlw	187
  3240  00EEF2  6E60               	movwf	??_standbyMode& (0+255),c
  3241  00EEF4  0EE0               	movlw	224
  3242  00EEF6                     u14357:
  3243  00EEF6  2EE8               	decfsz	wreg,f,c
  3244  00EEF8  D7FE               	bra	u14357
  3245  00EEFA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3246  00EEFC  D7FC               	bra	u14357
  3247  00EEFE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3248  00EF00  D7FA               	bra	u14357
  3249                           
  3250                           ;standbyMode.c: 1654: writeEEPROM(250, 3);
  3251  00EF02  0E03               	movlw	3
  3252  00EF04  6E01               	movwf	writeEEPROM@data,c
  3253  00EF06  0EFA               	movlw	250
  3254  00EF08  EC7B  F04D         	call	_writeEEPROM
  3255                           
  3256                           ;standbyMode.c: 1655: writeEEPROM(0, 18);
  3257  00EF0C  0E12               	movlw	18
  3258  00EF0E  6E01               	movwf	writeEEPROM@data,c
  3259  00EF10  0E00               	movlw	0
  3260  00EF12  EC7B  F04D         	call	_writeEEPROM
  3261                           
  3262                           ;standbyMode.c: 1656: writeEEPROM(1, 2);
  3263  00EF16  0E02               	movlw	2
  3264  00EF18  6E01               	movwf	writeEEPROM@data,c
  3265  00EF1A  0E01               	movlw	1
  3266  00EF1C  EC7B  F04D         	call	_writeEEPROM
  3267                           
  3268                           ;standbyMode.c: 1657: writeEEPROM(2, 28);
  3269  00EF20  0E1C               	movlw	28
  3270  00EF22  6E01               	movwf	writeEEPROM@data,c
  3271  00EF24  0E02               	movlw	2
  3272  00EF26  EC7B  F04D         	call	_writeEEPROM
  3273                           
  3274                           ;standbyMode.c: 1658: writeEEPROM(3, 91);
  3275  00EF2A  0E5B               	movlw	91
  3276  00EF2C  6E01               	movwf	writeEEPROM@data,c
  3277  00EF2E  0E03               	movlw	3
  3278  00EF30  EC7B  F04D         	call	_writeEEPROM
  3279                           
  3280                           ;standbyMode.c: 1659: writeEEPROM(4, 3);
  3281  00EF34  0E03               	movlw	3
  3282  00EF36  6E01               	movwf	writeEEPROM@data,c
  3283  00EF38  0E04               	movlw	4
  3284  00EF3A  EC7B  F04D         	call	_writeEEPROM
  3285                           
  3286                           ;standbyMode.c: 1660: writeEEPROM(5, 15);
  3287  00EF3E  0E0F               	movlw	15
  3288  00EF40  6E01               	movwf	writeEEPROM@data,c
  3289  00EF42  0E05               	movlw	5
  3290  00EF44  EC7B  F04D         	call	_writeEEPROM
  3291                           
  3292                           ;standbyMode.c: 1661: writeEEPROM(6, 8);
  3293  00EF48  0E08               	movlw	8
  3294  00EF4A  6E01               	movwf	writeEEPROM@data,c
  3295  00EF4C  0E06               	movlw	6
  3296  00EF4E  EC7B  F04D         	call	_writeEEPROM
  3297                           
  3298                           ;standbyMode.c: 1662: writeEEPROM(7, 12);
  3299  00EF52  0E0C               	movlw	12
  3300  00EF54  6E01               	movwf	writeEEPROM@data,c
  3301  00EF56  0E07               	movlw	7
  3302  00EF58  EC7B  F04D         	call	_writeEEPROM
  3303                           
  3304                           ;standbyMode.c: 1663: writeEEPROM(8, 1);
  3305  00EF5C  0E01               	movlw	1
  3306  00EF5E  6E01               	movwf	writeEEPROM@data,c
  3307  00EF60  0E08               	movlw	8
  3308  00EF62  EC7B  F04D         	call	_writeEEPROM
  3309                           
  3310                           ;standbyMode.c: 1664: writeEEPROM(9, 13);
  3311  00EF66  0E0D               	movlw	13
  3312  00EF68  6E01               	movwf	writeEEPROM@data,c
  3313  00EF6A  0E09               	movlw	9
  3314  00EF6C  EC7B  F04D         	call	_writeEEPROM
  3315                           
  3316                           ;standbyMode.c: 1665: writeEEPROM(10, 0);
  3317  00EF70  0E00               	movlw	0
  3318  00EF72  6E01               	movwf	writeEEPROM@data,c
  3319  00EF74  0E0A               	movlw	10
  3320  00EF76  EC7B  F04D         	call	_writeEEPROM
  3321                           
  3322                           ;standbyMode.c: 1675: I2C_Master_Init(100000);
  3323  00EF7A  0EA0               	movlw	160
  3324  00EF7C  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  3325  00EF7E  0E86               	movlw	134
  3326  00EF80  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  3327  00EF82  0E01               	movlw	1
  3328  00EF84  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  3329  00EF86  0E00               	movlw	0
  3330  00EF88  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  3331  00EF8A  EC90  F04E         	call	_I2C_Master_Init	;wreg free
  3332                           
  3333                           ;standbyMode.c: 1676: I2C_Master_Start();
  3334  00EF8E  ECFC  F04C         	call	_I2C_Master_Start	;wreg free
  3335                           
  3336                           ;standbyMode.c: 1677: I2C_Master_Write(0b11010001);
  3337  00EF92  0E00               	movlw	0
  3338  00EF94  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3339  00EF96  0ED1               	movlw	209
  3340  00EF98  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3341  00EF9A  EC08  F04D         	call	_I2C_Master_Write	;wreg free
  3342                           
  3343                           ;standbyMode.c: 1678: for(x = 0; x < 6; x++){
  3344  00EF9E  0E00               	movlw	0
  3345  00EFA0  0101               	movlb	1	; () banked
  3346  00EFA2  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3347  00EFA4  0E00               	movlw	0
  3348  00EFA6  6F7D               	movwf	standbyMode@x& (0+255),b
  3349  00EFA8                     l10260:
  3350                           
  3351                           ; BSR set to: 1
  3352  00EFA8  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  3353  00EFAA  E112               	bnz	l10270
  3354  00EFAC  0E06               	movlw	6
  3355  00EFAE  5D7D               	subwf	standbyMode@x& (0+255),w,b
  3356  00EFB0  B0D8               	btfsc	status,0,c
  3357  00EFB2  D00E               	goto	u13590
  3358                           
  3359                           ; BSR set to: 1
  3360                           ;standbyMode.c: 1679: time[x] = I2C_Master_Read(0);
  3361                           
  3362                           ; BSR set to: 1
  3363                           
  3364                           ; BSR set to: 1
  3365  00EFB4  0E60               	movlw	low standbyMode@time
  3366  00EFB6  257D               	addwf	standbyMode@x& (0+255),w,b
  3367  00EFB8  6ED9               	movwf	fsr2l,c
  3368  00EFBA  0E01               	movlw	high standbyMode@time
  3369  00EFBC  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  3370  00EFBE  6EDA               	movwf	fsr2h,c
  3371  00EFC0  0E00               	movlw	0
  3372  00EFC2  EC43  F04D         	call	_I2C_Master_Read
  3373  00EFC6  6EDF               	movwf	indf2,c
  3374  00EFC8  0101               	movlb	1	; () banked
  3375  00EFCA  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  3376  00EFCC  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  3377  00EFCE  D7EC               	goto	l10260
  3378  00EFD0                     u13590:
  3379  00EFD0                     l10270:
  3380                           
  3381                           ; BSR set to: 1
  3382                           ;standbyMode.c: 1680: }
  3383                           ;standbyMode.c: 1681: time[6] = I2C_Master_Read(1);
  3384  00EFD0  0E01               	movlw	1
  3385  00EFD2  EC43  F04D         	call	_I2C_Master_Read
  3386  00EFD6  0101               	movlb	1	; () banked
  3387  00EFD8  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  3388                           
  3389                           ;standbyMode.c: 1682: I2C_Master_Stop();
  3390  00EFDA  EC00  F04D         	call	_I2C_Master_Stop	;wreg free
  3391                           
  3392                           ;standbyMode.c: 1684: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3393  00EFDE  0E01               	movlw	1
  3394  00EFE0  EC16  F04D         	call	_lcdInst
  3395  00EFE4  0EC3               	movlw	195
  3396  00EFE6  6E60               	movwf	??_standbyMode& (0+255),c
  3397  00EFE8  0ECD               	movlw	205
  3398  00EFEA                     u14367:
  3399  00EFEA  2EE8               	decfsz	wreg,f,c
  3400  00EFEC  D7FE               	bra	u14367
  3401  00EFEE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3402  00EFF0  D7FC               	bra	u14367
  3403  00EFF2  F000               	nop	
  3404                           
  3405                           ;standbyMode.c: 1685: printf("Current date");
  3406  00EFF4  0EC2               	movlw	low STR_120
  3407  00EFF6  6E0D               	movwf	printf@f,c
  3408  00EFF8  0EFE               	movlw	high STR_120
  3409  00EFFA  6E0E               	movwf	printf@f+1,c
  3410  00EFFC  EC0C  F061         	call	_printf	;wreg free
  3411                           
  3412                           ;standbyMode.c: 1686: lcdInst(0xC0);;
  3413  00F000  0EC0               	movlw	192
  3414  00F002  EC16  F04D         	call	_lcdInst
  3415                           
  3416                           ;standbyMode.c: 1687: printf("and time:");
  3417  00F006  0E34               	movlw	low STR_121
  3418  00F008  6E0D               	movwf	printf@f,c
  3419  00F00A  0EFF               	movlw	high STR_121
  3420  00F00C  6E0E               	movwf	printf@f+1,c
  3421  00F00E  EC0C  F061         	call	_printf	;wreg free
  3422                           
  3423                           ;standbyMode.c: 1688: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3424  00F012  0E66               	movlw	102
  3425  00F014  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3426  00F016  0E76               	movlw	118
  3427  00F018  6E60               	movwf	??_standbyMode& (0+255),c
  3428  00F01A  0EC1               	movlw	193
  3429  00F01C                     u14377:
  3430  00F01C  2EE8               	decfsz	wreg,f,c
  3431  00F01E  D7FE               	bra	u14377
  3432  00F020  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3433  00F022  D7FC               	bra	u14377
  3434  00F024  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3435  00F026  D7FA               	bra	u14377
  3436  00F028  F000               	nop	
  3437                           
  3438                           ;standbyMode.c: 1690: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3439  00F02A  0E01               	movlw	1
  3440  00F02C  EC16  F04D         	call	_lcdInst
  3441  00F030  0EC3               	movlw	195
  3442  00F032  6E60               	movwf	??_standbyMode& (0+255),c
  3443  00F034  0ECD               	movlw	205
  3444  00F036                     u14387:
  3445  00F036  2EE8               	decfsz	wreg,f,c
  3446  00F038  D7FE               	bra	u14387
  3447  00F03A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3448  00F03C  D7FC               	bra	u14387
  3449  00F03E  F000               	nop	
  3450                           
  3451                           ;standbyMode.c: 1691: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  3452  00F040  0E19               	movlw	low STR_122
  3453  00F042  6E0D               	movwf	printf@f,c
  3454  00F044  0EFE               	movlw	high STR_122
  3455  00F046  6E0E               	movwf	printf@f+1,c
  3456  00F048  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  3457  00F04C  6A10               	clrf	?_printf+3,c
  3458  00F04E  C165  F011         	movff	standbyMode@time+5,?_printf+4
  3459  00F052  6A12               	clrf	?_printf+5,c
  3460  00F054  C164  F013         	movff	standbyMode@time+4,?_printf+6
  3461  00F058  6A14               	clrf	?_printf+7,c
  3462  00F05A  EC0C  F061         	call	_printf	;wreg free
  3463                           
  3464                           ;standbyMode.c: 1692: lcdInst(0xC0);;
  3465  00F05E  0EC0               	movlw	192
  3466  00F060  EC16  F04D         	call	_lcdInst
  3467                           
  3468                           ;standbyMode.c: 1693: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3469  00F064  0E28               	movlw	low STR_123
  3470  00F066  6E0D               	movwf	printf@f,c
  3471  00F068  0EFE               	movlw	high STR_123
  3472  00F06A  6E0E               	movwf	printf@f+1,c
  3473  00F06C  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  3474  00F070  6A10               	clrf	?_printf+3,c
  3475  00F072  C161  F011         	movff	standbyMode@time+1,?_printf+4
  3476  00F076  6A12               	clrf	?_printf+5,c
  3477  00F078  C160  F013         	movff	standbyMode@time,?_printf+6
  3478  00F07C  6A14               	clrf	?_printf+7,c
  3479  00F07E  EC0C  F061         	call	_printf	;wreg free
  3480                           
  3481                           ;standbyMode.c: 1694: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3482  00F082  0E66               	movlw	102
  3483  00F084  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3484  00F086  0E76               	movlw	118
  3485  00F088  6E60               	movwf	??_standbyMode& (0+255),c
  3486  00F08A  0EC1               	movlw	193
  3487  00F08C                     u14397:
  3488  00F08C  2EE8               	decfsz	wreg,f,c
  3489  00F08E  D7FE               	bra	u14397
  3490  00F090  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3491  00F092  D7FC               	bra	u14397
  3492  00F094  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3493  00F096  D7FA               	bra	u14397
  3494  00F098  F000               	nop	
  3495                           
  3496                           ;standbyMode.c: 1697: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3497  00F09A  0E01               	movlw	1
  3498  00F09C  EC16  F04D         	call	_lcdInst
  3499  00F0A0  0EC3               	movlw	195
  3500  00F0A2  6E60               	movwf	??_standbyMode& (0+255),c
  3501  00F0A4  0ECD               	movlw	205
  3502  00F0A6                     u14407:
  3503  00F0A6  2EE8               	decfsz	wreg,f,c
  3504  00F0A8  D7FE               	bra	u14407
  3505  00F0AA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3506  00F0AC  D7FC               	bra	u14407
  3507  00F0AE  F000               	nop	
  3508                           
  3509                           ;standbyMode.c: 1698: printf("Press # to");
  3510  00F0B0  0E1E               	movlw	low STR_124
  3511  00F0B2  6E0D               	movwf	printf@f,c
  3512  00F0B4  0EFF               	movlw	high STR_124
  3513  00F0B6  6E0E               	movwf	printf@f+1,c
  3514  00F0B8  EC0C  F061         	call	_printf	;wreg free
  3515                           
  3516                           ;standbyMode.c: 1699: lcdInst(0xC0);;
  3517  00F0BC  0EC0               	movlw	192
  3518  00F0BE  EC16  F04D         	call	_lcdInst
  3519                           
  3520                           ;standbyMode.c: 1700: printf("view logs,");
  3521  00F0C2  0EDC               	movlw	low STR_125
  3522  00F0C4  6E0D               	movwf	printf@f,c
  3523  00F0C6  0EFE               	movlw	high STR_125
  3524  00F0C8  6E0E               	movwf	printf@f+1,c
  3525  00F0CA  EC0C  F061         	call	_printf	;wreg free
  3526                           
  3527                           ;standbyMode.c: 1701: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3528  00F0CE  0E66               	movlw	102
  3529  00F0D0  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3530  00F0D2  0E76               	movlw	118
  3531  00F0D4  6E60               	movwf	??_standbyMode& (0+255),c
  3532  00F0D6  0EC1               	movlw	193
  3533  00F0D8                     u14417:
  3534  00F0D8  2EE8               	decfsz	wreg,f,c
  3535  00F0DA  D7FE               	bra	u14417
  3536  00F0DC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3537  00F0DE  D7FC               	bra	u14417
  3538  00F0E0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3539  00F0E2  D7FA               	bra	u14417
  3540  00F0E4  F000               	nop	
  3541                           
  3542                           ;standbyMode.c: 1702: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3543  00F0E6  0E01               	movlw	1
  3544  00F0E8  EC16  F04D         	call	_lcdInst
  3545  00F0EC  0EC3               	movlw	195
  3546  00F0EE  6E60               	movwf	??_standbyMode& (0+255),c
  3547  00F0F0  0ECD               	movlw	205
  3548  00F0F2                     u14427:
  3549  00F0F2  2EE8               	decfsz	wreg,f,c
  3550  00F0F4  D7FE               	bra	u14427
  3551  00F0F6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3552  00F0F8  D7FC               	bra	u14427
  3553  00F0FA  F000               	nop	
  3554                           
  3555                           ;standbyMode.c: 1703: printf("or press D to");
  3556  00F0FC  0E8D               	movlw	low STR_126
  3557  00F0FE  6E0D               	movwf	printf@f,c
  3558  00F100  0EFE               	movlw	high STR_126
  3559  00F102  6E0E               	movwf	printf@f+1,c
  3560  00F104  EC0C  F061         	call	_printf	;wreg free
  3561                           
  3562                           ;standbyMode.c: 1704: lcdInst(0xC0);;
  3563  00F108  0EC0               	movlw	192
  3564  00F10A  EC16  F04D         	call	_lcdInst
  3565                           
  3566                           ;standbyMode.c: 1705: printf("begin operation.");
  3567  00F10E  0E9A               	movlw	low STR_117
  3568  00F110  6E0D               	movwf	printf@f,c
  3569  00F112  0EFC               	movlw	high STR_117
  3570  00F114  6E0E               	movwf	printf@f+1,c
  3571  00F116  EC0C  F061         	call	_printf	;wreg free
  3572  00F11A  A281               	btfss	3969,1,c	;volatile
  3573  00F11C  D7FE               	goto	l1255
  3574                           
  3575                           ;standbyMode.c: 1708: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3576  00F11E  3881               	swapf	3969,w,c	;volatile
  3577  00F120  0B0F               	andlw	15
  3578  00F122  0B0F               	andlw	15
  3579  00F124  0101               	movlb	1	; () banked
  3580  00F126  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3581  00F128                     
  3582                           ; BSR set to: 1
  3583  00F128  B281               	btfsc	3969,1,c	;volatile
  3584  00F12A  D7FE               	goto	l1258
  3585                           
  3586                           ;standbyMode.c: 1711: if (keypress == 15){
  3587  00F12C  0E0F               	movlw	15
  3588  00F12E  0101               	movlb	1	; () banked
  3589  00F130  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3590  00F132  A4D8               	btfss	status,2,c
  3591  00F134  EF81  F07D         	goto	l1260
  3592  00F138                     u13620:
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;standbyMode.c: 1755: if (firstIteration == 1){
  3596                           
  3597                           ; BSR set to: 1
  3598                           
  3599                           ;standbyMode.c: 1754: while (1){
  3600  00F138  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3601  00F13A  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3602  00F13C  A4D8               	btfss	status,2,c
  3603  00F13E  D1D9               	goto	l1262
  3604  00F140                     u13630:
  3605                           
  3606                           ; BSR set to: 1
  3607                           ;standbyMode.c: 1758: if(drawerCount >= 8){
  3608                           
  3609                           ; BSR set to: 1
  3610                           
  3611                           ;standbyMode.c: 1756: while (1){
  3612  00F140  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3613  00F142  E104               	bnz	u13640
  3614  00F144  0E08               	movlw	8
  3615  00F146  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3616  00F148  A0D8               	btfss	status,0,c
  3617  00F14A  D02A               	goto	l1264
  3618  00F14C                     u13640:
  3619                           
  3620                           ; BSR set to: 1
  3621                           ;standbyMode.c: 1759: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3622  00F14C  0E01               	movlw	1
  3623  00F14E  EC16  F04D         	call	_lcdInst
  3624  00F152  0EC3               	movlw	195
  3625  00F154  6E60               	movwf	??_standbyMode& (0+255),c
  3626  00F156  0ECD               	movlw	205
  3627  00F158                     u14437:
  3628  00F158  2EE8               	decfsz	wreg,f,c
  3629  00F15A  D7FE               	bra	u14437
  3630  00F15C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3631  00F15E  D7FC               	bra	u14437
  3632  00F160  F000               	nop	
  3633                           
  3634                           ;standbyMode.c: 1760: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3635  00F162  0E0C               	movlw	12
  3636  00F164  EC16  F04D         	call	_lcdInst
  3637                           
  3638                           ;standbyMode.c: 1761: printf("Maximum of 8");
  3639  00F168  0EA8               	movlw	low STR_128
  3640  00F16A  6E0D               	movwf	printf@f,c
  3641  00F16C  0EFE               	movlw	high STR_128
  3642  00F16E  6E0E               	movwf	printf@f+1,c
  3643  00F170  EC0C  F061         	call	_printf	;wreg free
  3644                           
  3645                           ;standbyMode.c: 1762: lcdInst(0xC0);;
  3646  00F174  0EC0               	movlw	192
  3647  00F176  EC16  F04D         	call	_lcdInst
  3648                           
  3649                           ;standbyMode.c: 1763: printf("drawers reached!");
  3650  00F17A  0E89               	movlw	low STR_129
  3651  00F17C  6E0D               	movwf	printf@f,c
  3652  00F17E  0EFC               	movlw	high STR_129
  3653  00F180  6E0E               	movwf	printf@f+1,c
  3654  00F182  EC0C  F061         	call	_printf	;wreg free
  3655                           
  3656                           ;standbyMode.c: 1764: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3657  00F186  0E66               	movlw	102
  3658  00F188  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3659  00F18A  0E76               	movlw	118
  3660  00F18C  6E60               	movwf	??_standbyMode& (0+255),c
  3661  00F18E  0EC1               	movlw	193
  3662  00F190                     u14447:
  3663  00F190  2EE8               	decfsz	wreg,f,c
  3664  00F192  D7FE               	bra	u14447
  3665  00F194  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3666  00F196  D7FC               	bra	u14447
  3667  00F198  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3668  00F19A  D7FA               	bra	u14447
  3669  00F19C  F000               	nop	
  3670                           
  3671                           ;standbyMode.c: 1765: break;
  3672  00F19E  D328               	goto	l1290
  3673  00F1A0                     l1264:
  3674                           
  3675                           ;standbyMode.c: 1766: }
  3676                           ;standbyMode.c: 1768: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3677  00F1A0  0E01               	movlw	1
  3678  00F1A2  EC16  F04D         	call	_lcdInst
  3679  00F1A6  0EC3               	movlw	195
  3680  00F1A8  6E60               	movwf	??_standbyMode& (0+255),c
  3681  00F1AA  0ECD               	movlw	205
  3682  00F1AC                     u14457:
  3683  00F1AC  2EE8               	decfsz	wreg,f,c
  3684  00F1AE  D7FE               	bra	u14457
  3685  00F1B0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3686  00F1B2  D7FC               	bra	u14457
  3687  00F1B4  F000               	nop	
  3688                           
  3689                           ;standbyMode.c: 1769: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3690  00F1B6  0E0C               	movlw	12
  3691  00F1B8  EC16  F04D         	call	_lcdInst
  3692                           
  3693                           ;standbyMode.c: 1770: printf("Another drawer?");
  3694  00F1BC  0E60               	movlw	low STR_130
  3695  00F1BE  6E0D               	movwf	printf@f,c
  3696  00F1C0  0EFD               	movlw	high STR_130
  3697  00F1C2  6E0E               	movwf	printf@f+1,c
  3698  00F1C4  EC0C  F061         	call	_printf	;wreg free
  3699                           
  3700                           ;standbyMode.c: 1771: lcdInst(0xC0);;
  3701  00F1C8  0EC0               	movlw	192
  3702  00F1CA  EC16  F04D         	call	_lcdInst
  3703                           
  3704                           ;standbyMode.c: 1772: printf("# = No, D = Yes");
  3705  00F1CE  0E80               	movlw	low STR_104
  3706  00F1D0  6E0D               	movwf	printf@f,c
  3707  00F1D2  0EFD               	movlw	high STR_104
  3708  00F1D4  6E0E               	movwf	printf@f+1,c
  3709  00F1D6  EC0C  F061         	call	_printf	;wreg free
  3710  00F1DA  A281               	btfss	3969,1,c	;volatile
  3711  00F1DC  D7FE               	goto	l1268
  3712                           
  3713                           ;standbyMode.c: 1775: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3714  00F1DE  3881               	swapf	3969,w,c	;volatile
  3715  00F1E0  0B0F               	andlw	15
  3716  00F1E2  0B0F               	andlw	15
  3717  00F1E4  0101               	movlb	1	; () banked
  3718  00F1E6  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3719  00F1E8                     
  3720                           ; BSR set to: 1
  3721  00F1E8  B281               	btfsc	3969,1,c	;volatile
  3722  00F1EA  D7FE               	goto	l1271
  3723                           
  3724                           ;standbyMode.c: 1778: if (keypress1 == 15){
  3725  00F1EC  0E0F               	movlw	15
  3726  00F1EE  0101               	movlb	1	; () banked
  3727  00F1F0  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3728  00F1F2  A4D8               	btfss	status,2,c
  3729  00F1F4  D177               	goto	l1273
  3730  00F1F6                     u13670:
  3731                           
  3732                           ; BSR set to: 1
  3733                           
  3734                           ; BSR set to: 1
  3735                           
  3736                           ;standbyMode.c: 1779: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3737  00F1F6  0E01               	movlw	1
  3738  00F1F8  EC16  F04D         	call	_lcdInst
  3739  00F1FC  0EC3               	movlw	195
  3740  00F1FE  6E60               	movwf	??_standbyMode& (0+255),c
  3741  00F200  0ECD               	movlw	205
  3742  00F202                     u14467:
  3743  00F202  2EE8               	decfsz	wreg,f,c
  3744  00F204  D7FE               	bra	u14467
  3745  00F206  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3746  00F208  D7FC               	bra	u14467
  3747  00F20A  F000               	nop	
  3748                           
  3749                           ;standbyMode.c: 1780: drawer = which_drawer();
  3750  00F20C  ECEB  F05A         	call	_which_drawer	;wreg free
  3751  00F210  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3752  00F214  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3753                           
  3754                           ;standbyMode.c: 1782: if (drawer == 100){
  3755  00F218  0E64               	movlw	100
  3756  00F21A  0101               	movlb	1	; () banked
  3757  00F21C  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3758  00F21E  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3759  00F220  A4D8               	btfss	status,2,c
  3760  00F222  D005               	goto	l1275
  3761                           
  3762                           ; BSR set to: 1
  3763                           ;standbyMode.c: 1783: drawer = 0;
  3764  00F224  0E00               	movlw	0
  3765  00F226  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3766  00F228  0E00               	movlw	0
  3767  00F22A  6F82               	movwf	standbyMode@drawer& (0+255),b
  3768                           
  3769                           ;standbyMode.c: 1784: goto DRAWER_BACK;
  3770  00F22C  D7B9               	goto	l1264
  3771  00F22E                     l1275:
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;standbyMode.c: 1785: }
  3775                           ;standbyMode.c: 1787: for (i=0; i<8; i++){
  3776                           
  3777                           ; BSR set to: 1
  3778  00F22E  0E00               	movlw	0
  3779  00F230  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3780  00F232  0E00               	movlw	0
  3781  00F234  6F88               	movwf	standbyMode@i& (0+255),b
  3782  00F236                     l10358:
  3783                           
  3784                           ; BSR set to: 1
  3785  00F236  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3786  00F238  E12C               	bnz	l10374
  3787  00F23A  0E08               	movlw	8
  3788  00F23C  5D88               	subwf	standbyMode@i& (0+255),w,b
  3789  00F23E  B0D8               	btfsc	status,0,c
  3790  00F240  D028               	goto	u13720
  3791                           
  3792                           ; BSR set to: 1
  3793                           ;standbyMode.c: 1788: if (drawerInformation[i] == drawer){
  3794                           
  3795                           ; BSR set to: 1
  3796                           
  3797                           ; BSR set to: 1
  3798  00F242  90D8               	bcf	status,0,c
  3799  00F244  3588               	rlcf	standbyMode@i& (0+255),w,b
  3800  00F246  6ED9               	movwf	fsr2l,c
  3801  00F248  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3802  00F24A  6EDA               	movwf	fsr2h,c
  3803  00F24C  0E50               	movlw	low standbyMode@drawerInformation
  3804  00F24E  26D9               	addwf	fsr2l,f,c
  3805  00F250  0E01               	movlw	high standbyMode@drawerInformation
  3806  00F252  22DA               	addwfc	fsr2h,f,c
  3807  00F254  5182               	movf	standbyMode@drawer& (0+255),w,b
  3808  00F256  18DE               	xorwf	postinc2,w,c
  3809  00F258  E119               	bnz	l10370
  3810  00F25A  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3811  00F25C  18DE               	xorwf	postinc2,w,c
  3812  00F25E  A4D8               	btfss	status,2,c
  3813  00F260  D015               	goto	l1279
  3814                           
  3815                           ; BSR set to: 1
  3816                           ;standbyMode.c: 1789: validDrawer = 1;
  3817  00F262  0E00               	movlw	0
  3818  00F264  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3819  00F266  0E01               	movlw	1
  3820  00F268  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3821                           
  3822                           ; BSR set to: 1
  3823                           ;standbyMode.c: 1790: if (drawerInformation[i] == 0){
  3824  00F26A  90D8               	bcf	status,0,c
  3825  00F26C  3588               	rlcf	standbyMode@i& (0+255),w,b
  3826  00F26E  6ED9               	movwf	fsr2l,c
  3827  00F270  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3828  00F272  6EDA               	movwf	fsr2h,c
  3829  00F274  0E50               	movlw	low standbyMode@drawerInformation
  3830  00F276  26D9               	addwf	fsr2l,f,c
  3831  00F278  0E01               	movlw	high standbyMode@drawerInformation
  3832  00F27A  22DA               	addwfc	fsr2h,f,c
  3833  00F27C  50DE               	movf	postinc2,w,c
  3834  00F27E  10DE               	iorwf	postinc2,w,c
  3835  00F280  A4D8               	btfss	status,2,c
  3836  00F282  D004               	goto	l1279
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;standbyMode.c: 1791: zero = 1;
  3840  00F284  0E00               	movlw	0
  3841  00F286  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3842  00F288  0E01               	movlw	1
  3843  00F28A  6F79               	movwf	standbyMode@zero& (0+255),b
  3844  00F28C                     l1279:
  3845  00F28C                     l10370:
  3846                           
  3847                           ; BSR set to: 1
  3848  00F28C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3849  00F28E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3850  00F290  D7D2               	goto	l10358
  3851  00F292                     u13720:
  3852  00F292                     l10374:
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;standbyMode.c: 1792: }
  3856                           ;standbyMode.c: 1793: }
  3857                           ;standbyMode.c: 1794: }
  3858                           ;standbyMode.c: 1795: if (validDrawer == 1){
  3859  00F292  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3860  00F294  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3861  00F296  A4D8               	btfss	status,2,c
  3862  00F298  D062               	goto	l1280
  3863                           
  3864                           ; BSR set to: 1
  3865                           ;standbyMode.c: 1796: if (zero == 1){
  3866  00F29A  0579               	decf	standbyMode@zero& (0+255),w,b
  3867  00F29C  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3868  00F29E  A4D8               	btfss	status,2,c
  3869  00F2A0  D02F               	goto	l1281
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;standbyMode.c: 1797: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3873  00F2A2  0E01               	movlw	1
  3874  00F2A4  EC16  F04D         	call	_lcdInst
  3875  00F2A8  0EC3               	movlw	195
  3876  00F2AA  6E60               	movwf	??_standbyMode& (0+255),c
  3877  00F2AC  0ECD               	movlw	205
  3878  00F2AE                     u14477:
  3879  00F2AE  2EE8               	decfsz	wreg,f,c
  3880  00F2B0  D7FE               	bra	u14477
  3881  00F2B2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3882  00F2B4  D7FC               	bra	u14477
  3883  00F2B6  F000               	nop	
  3884                           
  3885                           ;standbyMode.c: 1798: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3886  00F2B8  0E0C               	movlw	12
  3887  00F2BA  EC16  F04D         	call	_lcdInst
  3888                           
  3889                           ;standbyMode.c: 1799: printf("No drawer");
  3890  00F2BE  0E3E               	movlw	low STR_132
  3891  00F2C0  6E0D               	movwf	printf@f,c
  3892  00F2C2  0EFF               	movlw	high STR_132
  3893  00F2C4  6E0E               	movwf	printf@f+1,c
  3894  00F2C6  EC0C  F061         	call	_printf	;wreg free
  3895                           
  3896                           ;standbyMode.c: 1800: lcdInst(0xC0);;
  3897  00F2CA  0EC0               	movlw	192
  3898  00F2CC  EC16  F04D         	call	_lcdInst
  3899                           
  3900                           ;standbyMode.c: 1801: printf("number pressed.");
  3901  00F2D0  0E10               	movlw	low STR_133
  3902  00F2D2  6E0D               	movwf	printf@f,c
  3903  00F2D4  0EFD               	movlw	high STR_133
  3904  00F2D6  6E0E               	movwf	printf@f+1,c
  3905  00F2D8  EC0C  F061         	call	_printf	;wreg free
  3906                           
  3907                           ;standbyMode.c: 1802: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3908  00F2DC  0E66               	movlw	102
  3909  00F2DE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3910  00F2E0  0E76               	movlw	118
  3911  00F2E2  6E60               	movwf	??_standbyMode& (0+255),c
  3912  00F2E4  0EC1               	movlw	193
  3913  00F2E6                     u14487:
  3914  00F2E6  2EE8               	decfsz	wreg,f,c
  3915  00F2E8  D7FE               	bra	u14487
  3916  00F2EA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3917  00F2EC  D7FC               	bra	u14487
  3918  00F2EE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3919  00F2F0  D7FA               	bra	u14487
  3920  00F2F2  F000               	nop	
  3921                           
  3922                           ;standbyMode.c: 1803: zero = 0;
  3923  00F2F4  0E00               	movlw	0
  3924  00F2F6  0101               	movlb	1	; () banked
  3925  00F2F8  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3926  00F2FA  0E00               	movlw	0
  3927  00F2FC  6F79               	movwf	standbyMode@zero& (0+255),b
  3928                           
  3929                           ;standbyMode.c: 1804: }
  3930  00F2FE  D029               	goto	l1282
  3931  00F300                     l1281:
  3932                           
  3933                           ; BSR set to: 1
  3934                           ;standbyMode.c: 1805: else{
  3935                           ;standbyMode.c: 1806: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3936                           
  3937                           ; BSR set to: 1
  3938  00F300  0E01               	movlw	1
  3939  00F302  EC16  F04D         	call	_lcdInst
  3940  00F306  0EC3               	movlw	195
  3941  00F308  6E60               	movwf	??_standbyMode& (0+255),c
  3942  00F30A  0ECD               	movlw	205
  3943  00F30C                     u14497:
  3944  00F30C  2EE8               	decfsz	wreg,f,c
  3945  00F30E  D7FE               	bra	u14497
  3946  00F310  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3947  00F312  D7FC               	bra	u14497
  3948  00F314  F000               	nop	
  3949                           
  3950                           ;standbyMode.c: 1807: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3951  00F316  0E0C               	movlw	12
  3952  00F318  EC16  F04D         	call	_lcdInst
  3953                           
  3954                           ;standbyMode.c: 1808: printf("Drawer already");
  3955  00F31C  0E37               	movlw	low STR_134
  3956  00F31E  6E0D               	movwf	printf@f,c
  3957  00F320  0EFE               	movlw	high STR_134
  3958  00F322  6E0E               	movwf	printf@f+1,c
  3959  00F324  EC0C  F061         	call	_printf	;wreg free
  3960                           
  3961                           ;standbyMode.c: 1809: lcdInst(0xC0);;
  3962  00F328  0EC0               	movlw	192
  3963  00F32A  EC16  F04D         	call	_lcdInst
  3964                           
  3965                           ;standbyMode.c: 1810: printf("in use!");
  3966  00F32E  0E77               	movlw	low STR_135
  3967  00F330  6E0D               	movwf	printf@f,c
  3968  00F332  0EFF               	movlw	high STR_135
  3969  00F334  6E0E               	movwf	printf@f+1,c
  3970  00F336  EC0C  F061         	call	_printf	;wreg free
  3971                           
  3972                           ;standbyMode.c: 1811: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3973  00F33A  0E66               	movlw	102
  3974  00F33C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3975  00F33E  0E76               	movlw	118
  3976  00F340  6E60               	movwf	??_standbyMode& (0+255),c
  3977  00F342  0EC1               	movlw	193
  3978  00F344                     u14507:
  3979  00F344  2EE8               	decfsz	wreg,f,c
  3980  00F346  D7FE               	bra	u14507
  3981  00F348  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3982  00F34A  D7FC               	bra	u14507
  3983  00F34C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3984  00F34E  D7FA               	bra	u14507
  3985  00F350  F000               	nop	
  3986  00F352                     l1282:
  3987                           
  3988                           ;standbyMode.c: 1812: }
  3989                           ;standbyMode.c: 1813: validDrawer = 0;
  3990  00F352  0E00               	movlw	0
  3991  00F354  0101               	movlb	1	; () banked
  3992  00F356  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3993  00F358  0E00               	movlw	0
  3994  00F35A  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3995                           
  3996                           ;standbyMode.c: 1814: continue;
  3997  00F35C  D6F1               	goto	u13630
  3998  00F35E                     l1280:
  3999                           
  4000                           ; BSR set to: 1
  4001                           
  4002                           ; BSR set to: 1
  4003                           
  4004                           ;standbyMode.c: 1816: else{
  4005                           ;standbyMode.c: 1817: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4006                           
  4007                           ; BSR set to: 1
  4008  00F35E  0E01               	movlw	1
  4009  00F360  EC16  F04D         	call	_lcdInst
  4010  00F364  0EC3               	movlw	195
  4011  00F366  6E60               	movwf	??_standbyMode& (0+255),c
  4012  00F368  0ECD               	movlw	205
  4013  00F36A                     u14517:
  4014  00F36A  2EE8               	decfsz	wreg,f,c
  4015  00F36C  D7FE               	bra	u14517
  4016  00F36E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4017  00F370  D7FC               	bra	u14517
  4018  00F372  F000               	nop	
  4019                           
  4020                           ;standbyMode.c: 1818: diet = diet_press(drawer);
  4021  00F374  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4022  00F378  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4023  00F37C  EC05  F063         	call	_diet_press	;wreg free
  4024  00F380  C029  F180         	movff	?_diet_press,standbyMode@diet
  4025  00F384  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4026                           
  4027                           ;standbyMode.c: 1819: if (diet == 100){
  4028  00F388  0E64               	movlw	100
  4029  00F38A  0101               	movlb	1	; () banked
  4030  00F38C  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4031  00F38E  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4032  00F390  A4D8               	btfss	status,2,c
  4033  00F392  D005               	goto	l1286
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;standbyMode.c: 1820: diet = 0;
  4037  00F394  0E00               	movlw	0
  4038  00F396  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4039  00F398  0E00               	movlw	0
  4040  00F39A  6F80               	movwf	standbyMode@diet& (0+255),b
  4041                           
  4042                           ;standbyMode.c: 1821: goto DIET_BACK1;
  4043  00F39C  D72C               	goto	u13670
  4044  00F39E                     l1286:
  4045                           
  4046                           ; BSR set to: 1
  4047                           ;standbyMode.c: 1822: }
  4048                           ;standbyMode.c: 1824: food = food_press(diet, drawer);
  4049                           
  4050                           ; BSR set to: 1
  4051  00F39E  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4052  00F3A2  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4053  00F3A6  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4054  00F3AA  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4055  00F3AE  ECEE  F059         	call	_food_press	;wreg free
  4056  00F3B2  C029  F184         	movff	?_food_press,standbyMode@food
  4057  00F3B6  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4058                           
  4059                           ;standbyMode.c: 1825: if (food == 100){
  4060  00F3BA  0E64               	movlw	100
  4061  00F3BC  0101               	movlb	1	; () banked
  4062  00F3BE  1984               	xorwf	standbyMode@food& (0+255),w,b
  4063  00F3C0  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4064  00F3C2  A4D8               	btfss	status,2,c
  4065  00F3C4  D009               	goto	l1287
  4066                           
  4067                           ; BSR set to: 1
  4068                           ;standbyMode.c: 1826: diet = 0;
  4069  00F3C6  0E00               	movlw	0
  4070  00F3C8  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4071  00F3CA  0E00               	movlw	0
  4072  00F3CC  6F80               	movwf	standbyMode@diet& (0+255),b
  4073                           
  4074                           ;standbyMode.c: 1827: food = 0;
  4075  00F3CE  0E00               	movlw	0
  4076  00F3D0  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4077  00F3D2  0E00               	movlw	0
  4078  00F3D4  6F84               	movwf	standbyMode@food& (0+255),b
  4079                           
  4080                           ;standbyMode.c: 1828: goto FOOD_BACK1;
  4081  00F3D6  D7C3               	goto	l1280
  4082  00F3D8                     l1287:
  4083                           
  4084                           ; BSR set to: 1
  4085                           ;standbyMode.c: 1829: }
  4086                           ;standbyMode.c: 1831: drawerInformation[drawerCount] = drawer;
  4087                           
  4088                           ; BSR set to: 1
  4089  00F3D8  90D8               	bcf	status,0,c
  4090  00F3DA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4091  00F3DC  6ED9               	movwf	fsr2l,c
  4092  00F3DE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4093  00F3E0  6EDA               	movwf	fsr2h,c
  4094  00F3E2  0E50               	movlw	low standbyMode@drawerInformation
  4095  00F3E4  26D9               	addwf	fsr2l,f,c
  4096  00F3E6  0E01               	movlw	high standbyMode@drawerInformation
  4097  00F3E8  22DA               	addwfc	fsr2h,f,c
  4098  00F3EA  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4099  00F3EE  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4100                           
  4101                           ; BSR set to: 1
  4102                           ;standbyMode.c: 1832: decodedDiet = decode_diet(diet);
  4103  00F3F2  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4104  00F3F6  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4105  00F3FA  EC37  F055         	call	_decode_diet	;wreg free
  4106  00F3FE  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4107  00F402  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4108                           
  4109                           ;standbyMode.c: 1833: dietType[drawerCount] = decodedDiet;
  4110  00F406  90D8               	bcf	status,0,c
  4111  00F408  0101               	movlb	1	; () banked
  4112  00F40A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4113  00F40C  6ED9               	movwf	fsr2l,c
  4114  00F40E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4115  00F410  6EDA               	movwf	fsr2h,c
  4116  00F412  0E30               	movlw	low standbyMode@dietType
  4117  00F414  26D9               	addwf	fsr2l,f,c
  4118  00F416  0E01               	movlw	high standbyMode@dietType
  4119  00F418  22DA               	addwfc	fsr2h,f,c
  4120  00F41A  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4121  00F41E  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4122                           
  4123                           ;standbyMode.c: 1834: storedFoodType = printFoodInput(food);
  4124  00F422  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4125  00F426  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4126  00F42A  ECF6  F05B         	call	_printFoodInput	;wreg free
  4127  00F42E  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4128  00F432  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4129                           
  4130                           ;standbyMode.c: 1835: foodType[drawerCount] = storedFoodType;
  4131  00F436  90D8               	bcf	status,0,c
  4132  00F438  0101               	movlb	1	; () banked
  4133  00F43A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4134  00F43C  6ED9               	movwf	fsr2l,c
  4135  00F43E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4136  00F440  6EDA               	movwf	fsr2h,c
  4137  00F442  0E40               	movlw	low standbyMode@foodType
  4138  00F444  26D9               	addwf	fsr2l,f,c
  4139  00F446  0E01               	movlw	high standbyMode@foodType
  4140  00F448  22DA               	addwfc	fsr2h,f,c
  4141  00F44A  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4142  00F44E  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4143                           
  4144                           ; BSR set to: 1
  4145                           ;standbyMode.c: 1838: round = getRound(food);
  4146  00F452  C184  F001         	movff	standbyMode@food,getRound@code
  4147  00F456  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4148  00F45A  ECA7  F053         	call	_getRound	;wreg free
  4149  00F45E  C001  F16C         	movff	?_getRound,standbyMode@round
  4150  00F462  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4151                           
  4152                           ;standbyMode.c: 1839: flat = getFlat(food);
  4153  00F466  C184  F001         	movff	standbyMode@food,getFlat@code
  4154  00F46A  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4155  00F46E  EC2F  F053         	call	_getFlat	;wreg free
  4156  00F472  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4157  00F476  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4158                           
  4159                           ;standbyMode.c: 1840: lng = getLong(food);
  4160  00F47A  C184  F001         	movff	standbyMode@food,getLong@code
  4161  00F47E  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4162  00F482  EC1F  F054         	call	_getLong	;wreg free
  4163  00F486  C001  F170         	movff	?_getLong,standbyMode@lng
  4164  00F48A  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4165                           
  4166                           ;standbyMode.c: 1841: roundPieces[drawerCount] = round;
  4167  00F48E  90D8               	bcf	status,0,c
  4168  00F490  0101               	movlb	1	; () banked
  4169  00F492  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4170  00F494  6ED9               	movwf	fsr2l,c
  4171  00F496  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4172  00F498  6EDA               	movwf	fsr2h,c
  4173  00F49A  0E00               	movlw	low standbyMode@roundPieces
  4174  00F49C  26D9               	addwf	fsr2l,f,c
  4175  00F49E  0E01               	movlw	high standbyMode@roundPieces
  4176  00F4A0  22DA               	addwfc	fsr2h,f,c
  4177  00F4A2  C16C  FFDE         	movff	standbyMode@round,postinc2
  4178  00F4A6  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4179                           
  4180                           ;standbyMode.c: 1842: flatPieces[drawerCount] = flat;
  4181  00F4AA  90D8               	bcf	status,0,c
  4182  00F4AC  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4183  00F4AE  6ED9               	movwf	fsr2l,c
  4184  00F4B0  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4185  00F4B2  6EDA               	movwf	fsr2h,c
  4186  00F4B4  0E10               	movlw	low standbyMode@flatPieces
  4187  00F4B6  26D9               	addwf	fsr2l,f,c
  4188  00F4B8  0E01               	movlw	high standbyMode@flatPieces
  4189  00F4BA  22DA               	addwfc	fsr2h,f,c
  4190  00F4BC  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4191  00F4C0  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4192                           
  4193                           ;standbyMode.c: 1843: longPieces[drawerCount] = lng;
  4194  00F4C4  90D8               	bcf	status,0,c
  4195  00F4C6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4196  00F4C8  6ED9               	movwf	fsr2l,c
  4197  00F4CA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4198  00F4CC  6EDA               	movwf	fsr2h,c
  4199  00F4CE  0E20               	movlw	low standbyMode@longPieces
  4200  00F4D0  26D9               	addwf	fsr2l,f,c
  4201  00F4D2  0E01               	movlw	high standbyMode@longPieces
  4202  00F4D4  22DA               	addwfc	fsr2h,f,c
  4203  00F4D6  C170  FFDE         	movff	standbyMode@lng,postinc2
  4204  00F4DA  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4205                           
  4206                           ; BSR set to: 1
  4207                           ;standbyMode.c: 1844: drawerCount += 1;
  4208  00F4DE  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4209  00F4E0  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4210                           
  4211                           ; BSR set to: 1
  4212                           ;standbyMode.c: 1845: }
  4213                           ;standbyMode.c: 1846: }
  4214  00F4E2  D004               	goto	l1289
  4215  00F4E4                     l1273:
  4216                           
  4217                           ; BSR set to: 1
  4218                           ;standbyMode.c: 1847: else if (keypress1 == 14){
  4219                           
  4220                           ; BSR set to: 1
  4221  00F4E4  0E0E               	movlw	14
  4222  00F4E6  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  4223  00F4E8  B4D8               	btfsc	status,2,c
  4224  00F4EA  D182               	goto	l1290
  4225  00F4EC                     l1289:
  4226                           
  4227                           ; BSR set to: 1
  4228                           ;standbyMode.c: 1849: }
  4229                           ;standbyMode.c: 1850: keypress1 = 0;
  4230                           
  4231                           ; BSR set to: 1
  4232                           
  4233                           ; BSR set to: 1
  4234  00F4EC  0E00               	movlw	0
  4235  00F4EE  6F76               	movwf	standbyMode@keypress1& (0+255),b
  4236                           
  4237                           ; BSR set to: 1
  4238  00F4F0  D627               	goto	u13630
  4239  00F4F2                     l1262:
  4240                           
  4241                           ; BSR set to: 1
  4242                           
  4243                           ; BSR set to: 1
  4244                           
  4245                           ;standbyMode.c: 1854: else{
  4246                           ;standbyMode.c: 1855: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4247                           
  4248                           ; BSR set to: 1
  4249  00F4F2  0E01               	movlw	1
  4250  00F4F4  EC16  F04D         	call	_lcdInst
  4251  00F4F8  0EC3               	movlw	195
  4252  00F4FA  6E60               	movwf	??_standbyMode& (0+255),c
  4253  00F4FC  0ECD               	movlw	205
  4254  00F4FE                     u14527:
  4255  00F4FE  2EE8               	decfsz	wreg,f,c
  4256  00F500  D7FE               	bra	u14527
  4257  00F502  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4258  00F504  D7FC               	bra	u14527
  4259  00F506  F000               	nop	
  4260                           
  4261                           ;standbyMode.c: 1856: drawer = which_drawer();
  4262  00F508  ECEB  F05A         	call	_which_drawer	;wreg free
  4263  00F50C  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  4264  00F510  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  4265                           
  4266                           ;standbyMode.c: 1858: if (drawer == 100){
  4267  00F514  0E64               	movlw	100
  4268  00F516  0101               	movlb	1	; () banked
  4269  00F518  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  4270  00F51A  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  4271  00F51C  A4D8               	btfss	status,2,c
  4272  00F51E  D009               	goto	l1293
  4273                           
  4274                           ; BSR set to: 1
  4275                           ;standbyMode.c: 1859: drawer = 0;
  4276  00F520  0E00               	movlw	0
  4277  00F522  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  4278  00F524  0E00               	movlw	0
  4279  00F526  6F82               	movwf	standbyMode@drawer& (0+255),b
  4280                           
  4281                           ;standbyMode.c: 1860: firstIteration = 1;
  4282  00F528  0E00               	movlw	0
  4283  00F52A  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4284  00F52C  0E01               	movlw	1
  4285  00F52E  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4286                           
  4287                           ;standbyMode.c: 1861: goto DRAWER_BACK;
  4288  00F530  D637               	goto	l1264
  4289  00F532                     l1293:
  4290                           
  4291                           ; BSR set to: 1
  4292                           ;standbyMode.c: 1862: }
  4293                           ;standbyMode.c: 1864: firstIteration = 1;
  4294                           
  4295                           ; BSR set to: 1
  4296  00F532  0E00               	movlw	0
  4297  00F534  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4298  00F536  0E01               	movlw	1
  4299  00F538  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4300                           
  4301                           ;standbyMode.c: 1865: for (i=0; i<8; i++){
  4302  00F53A  0E00               	movlw	0
  4303  00F53C  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4304  00F53E  0E00               	movlw	0
  4305  00F540  6F88               	movwf	standbyMode@i& (0+255),b
  4306  00F542                     l10464:
  4307                           
  4308                           ; BSR set to: 1
  4309  00F542  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4310  00F544  E12C               	bnz	l10480
  4311  00F546  0E08               	movlw	8
  4312  00F548  5D88               	subwf	standbyMode@i& (0+255),w,b
  4313  00F54A  B0D8               	btfsc	status,0,c
  4314  00F54C  D028               	goto	u13820
  4315                           
  4316                           ; BSR set to: 1
  4317                           ;standbyMode.c: 1866: if (drawerInformation[i] == drawer){
  4318                           
  4319                           ; BSR set to: 1
  4320                           
  4321                           ; BSR set to: 1
  4322  00F54E  90D8               	bcf	status,0,c
  4323  00F550  3588               	rlcf	standbyMode@i& (0+255),w,b
  4324  00F552  6ED9               	movwf	fsr2l,c
  4325  00F554  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4326  00F556  6EDA               	movwf	fsr2h,c
  4327  00F558  0E50               	movlw	low standbyMode@drawerInformation
  4328  00F55A  26D9               	addwf	fsr2l,f,c
  4329  00F55C  0E01               	movlw	high standbyMode@drawerInformation
  4330  00F55E  22DA               	addwfc	fsr2h,f,c
  4331  00F560  5182               	movf	standbyMode@drawer& (0+255),w,b
  4332  00F562  18DE               	xorwf	postinc2,w,c
  4333  00F564  E119               	bnz	l10476
  4334  00F566  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  4335  00F568  18DE               	xorwf	postinc2,w,c
  4336  00F56A  A4D8               	btfss	status,2,c
  4337  00F56C  D015               	goto	l1297
  4338                           
  4339                           ; BSR set to: 1
  4340                           ;standbyMode.c: 1867: validDrawer = 1;
  4341  00F56E  0E00               	movlw	0
  4342  00F570  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4343  00F572  0E01               	movlw	1
  4344  00F574  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4345                           
  4346                           ; BSR set to: 1
  4347                           ;standbyMode.c: 1868: if (drawerInformation[i] == 0){
  4348  00F576  90D8               	bcf	status,0,c
  4349  00F578  3588               	rlcf	standbyMode@i& (0+255),w,b
  4350  00F57A  6ED9               	movwf	fsr2l,c
  4351  00F57C  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4352  00F57E  6EDA               	movwf	fsr2h,c
  4353  00F580  0E50               	movlw	low standbyMode@drawerInformation
  4354  00F582  26D9               	addwf	fsr2l,f,c
  4355  00F584  0E01               	movlw	high standbyMode@drawerInformation
  4356  00F586  22DA               	addwfc	fsr2h,f,c
  4357  00F588  50DE               	movf	postinc2,w,c
  4358  00F58A  10DE               	iorwf	postinc2,w,c
  4359  00F58C  A4D8               	btfss	status,2,c
  4360  00F58E  D004               	goto	l1297
  4361                           
  4362                           ; BSR set to: 1
  4363                           ;standbyMode.c: 1869: zero = 1;
  4364  00F590  0E00               	movlw	0
  4365  00F592  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4366  00F594  0E01               	movlw	1
  4367  00F596  6F79               	movwf	standbyMode@zero& (0+255),b
  4368  00F598                     l1297:
  4369  00F598                     l10476:
  4370                           
  4371                           ; BSR set to: 1
  4372  00F598  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4373  00F59A  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4374  00F59C  D7D2               	goto	l10464
  4375  00F59E                     u13820:
  4376  00F59E                     l10480:
  4377                           
  4378                           ; BSR set to: 1
  4379                           ;standbyMode.c: 1870: }
  4380                           ;standbyMode.c: 1871: }
  4381                           ;standbyMode.c: 1872: }
  4382                           ;standbyMode.c: 1873: if (validDrawer == 1){
  4383  00F59E  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  4384  00F5A0  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  4385  00F5A2  A4D8               	btfss	status,2,c
  4386  00F5A4  D062               	goto	l1298
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;standbyMode.c: 1874: if (zero == 1){
  4390  00F5A6  0579               	decf	standbyMode@zero& (0+255),w,b
  4391  00F5A8  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  4392  00F5AA  A4D8               	btfss	status,2,c
  4393  00F5AC  D02F               	goto	l1299
  4394                           
  4395                           ; BSR set to: 1
  4396                           ;standbyMode.c: 1875: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4397  00F5AE  0E01               	movlw	1
  4398  00F5B0  EC16  F04D         	call	_lcdInst
  4399  00F5B4  0EC3               	movlw	195
  4400  00F5B6  6E60               	movwf	??_standbyMode& (0+255),c
  4401  00F5B8  0ECD               	movlw	205
  4402  00F5BA                     u14537:
  4403  00F5BA  2EE8               	decfsz	wreg,f,c
  4404  00F5BC  D7FE               	bra	u14537
  4405  00F5BE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4406  00F5C0  D7FC               	bra	u14537
  4407  00F5C2  F000               	nop	
  4408                           
  4409                           ;standbyMode.c: 1876: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4410  00F5C4  0E0C               	movlw	12
  4411  00F5C6  EC16  F04D         	call	_lcdInst
  4412                           
  4413                           ;standbyMode.c: 1877: printf("No drawer");
  4414  00F5CA  0E3E               	movlw	low STR_132
  4415  00F5CC  6E0D               	movwf	printf@f,c
  4416  00F5CE  0EFF               	movlw	high STR_132
  4417  00F5D0  6E0E               	movwf	printf@f+1,c
  4418  00F5D2  EC0C  F061         	call	_printf	;wreg free
  4419                           
  4420                           ;standbyMode.c: 1878: lcdInst(0xC0);;
  4421  00F5D6  0EC0               	movlw	192
  4422  00F5D8  EC16  F04D         	call	_lcdInst
  4423                           
  4424                           ;standbyMode.c: 1879: printf("number pressed.");
  4425  00F5DC  0E10               	movlw	low STR_133
  4426  00F5DE  6E0D               	movwf	printf@f,c
  4427  00F5E0  0EFD               	movlw	high STR_133
  4428  00F5E2  6E0E               	movwf	printf@f+1,c
  4429  00F5E4  EC0C  F061         	call	_printf	;wreg free
  4430                           
  4431                           ;standbyMode.c: 1880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4432  00F5E8  0E66               	movlw	102
  4433  00F5EA  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4434  00F5EC  0E76               	movlw	118
  4435  00F5EE  6E60               	movwf	??_standbyMode& (0+255),c
  4436  00F5F0  0EC1               	movlw	193
  4437  00F5F2                     u14547:
  4438  00F5F2  2EE8               	decfsz	wreg,f,c
  4439  00F5F4  D7FE               	bra	u14547
  4440  00F5F6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4441  00F5F8  D7FC               	bra	u14547
  4442  00F5FA  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4443  00F5FC  D7FA               	bra	u14547
  4444  00F5FE  F000               	nop	
  4445                           
  4446                           ;standbyMode.c: 1881: zero = 0;
  4447  00F600  0E00               	movlw	0
  4448  00F602  0101               	movlb	1	; () banked
  4449  00F604  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4450  00F606  0E00               	movlw	0
  4451  00F608  6F79               	movwf	standbyMode@zero& (0+255),b
  4452                           
  4453                           ;standbyMode.c: 1882: }
  4454  00F60A  D029               	goto	l1300
  4455  00F60C                     l1299:
  4456                           
  4457                           ; BSR set to: 1
  4458                           ;standbyMode.c: 1883: else{
  4459                           ;standbyMode.c: 1884: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4460                           
  4461                           ; BSR set to: 1
  4462  00F60C  0E01               	movlw	1
  4463  00F60E  EC16  F04D         	call	_lcdInst
  4464  00F612  0EC3               	movlw	195
  4465  00F614  6E60               	movwf	??_standbyMode& (0+255),c
  4466  00F616  0ECD               	movlw	205
  4467  00F618                     u14557:
  4468  00F618  2EE8               	decfsz	wreg,f,c
  4469  00F61A  D7FE               	bra	u14557
  4470  00F61C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4471  00F61E  D7FC               	bra	u14557
  4472  00F620  F000               	nop	
  4473                           
  4474                           ;standbyMode.c: 1885: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4475  00F622  0E0C               	movlw	12
  4476  00F624  EC16  F04D         	call	_lcdInst
  4477                           
  4478                           ;standbyMode.c: 1886: printf("Drawer already");
  4479  00F628  0E37               	movlw	low STR_134
  4480  00F62A  6E0D               	movwf	printf@f,c
  4481  00F62C  0EFE               	movlw	high STR_134
  4482  00F62E  6E0E               	movwf	printf@f+1,c
  4483  00F630  EC0C  F061         	call	_printf	;wreg free
  4484                           
  4485                           ;standbyMode.c: 1887: lcdInst(0xC0);;
  4486  00F634  0EC0               	movlw	192
  4487  00F636  EC16  F04D         	call	_lcdInst
  4488                           
  4489                           ;standbyMode.c: 1888: printf("in use!");
  4490  00F63A  0E77               	movlw	low STR_135
  4491  00F63C  6E0D               	movwf	printf@f,c
  4492  00F63E  0EFF               	movlw	high STR_135
  4493  00F640  6E0E               	movwf	printf@f+1,c
  4494  00F642  EC0C  F061         	call	_printf	;wreg free
  4495                           
  4496                           ;standbyMode.c: 1889: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4497  00F646  0E66               	movlw	102
  4498  00F648  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4499  00F64A  0E76               	movlw	118
  4500  00F64C  6E60               	movwf	??_standbyMode& (0+255),c
  4501  00F64E  0EC1               	movlw	193
  4502  00F650                     u14567:
  4503  00F650  2EE8               	decfsz	wreg,f,c
  4504  00F652  D7FE               	bra	u14567
  4505  00F654  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4506  00F656  D7FC               	bra	u14567
  4507  00F658  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4508  00F65A  D7FA               	bra	u14567
  4509  00F65C  F000               	nop	
  4510  00F65E                     l1300:
  4511                           
  4512                           ;standbyMode.c: 1890: }
  4513                           ;standbyMode.c: 1891: validDrawer = 0;
  4514  00F65E  0E00               	movlw	0
  4515  00F660  0101               	movlb	1	; () banked
  4516  00F662  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4517  00F664  0E00               	movlw	0
  4518  00F666  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4519                           
  4520                           ; BSR set to: 1
  4521                           ;standbyMode.c: 1893: }
  4522                           
  4523                           ;standbyMode.c: 1892: continue;
  4524  00F668  D567               	goto	u13620
  4525  00F66A                     l1298:
  4526                           
  4527                           ; BSR set to: 1
  4528                           
  4529                           ; BSR set to: 1
  4530                           
  4531                           ;standbyMode.c: 1894: else{
  4532                           ;standbyMode.c: 1895: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4533                           
  4534                           ; BSR set to: 1
  4535  00F66A  0E01               	movlw	1
  4536  00F66C  EC16  F04D         	call	_lcdInst
  4537  00F670  0EC3               	movlw	195
  4538  00F672  6E60               	movwf	??_standbyMode& (0+255),c
  4539  00F674  0ECD               	movlw	205
  4540  00F676                     u14577:
  4541  00F676  2EE8               	decfsz	wreg,f,c
  4542  00F678  D7FE               	bra	u14577
  4543  00F67A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4544  00F67C  D7FC               	bra	u14577
  4545  00F67E  F000               	nop	
  4546                           
  4547                           ;standbyMode.c: 1896: diet = diet_press(drawer);
  4548  00F680  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4549  00F684  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4550  00F688  EC05  F063         	call	_diet_press	;wreg free
  4551  00F68C  C029  F180         	movff	?_diet_press,standbyMode@diet
  4552  00F690  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4553                           
  4554                           ;standbyMode.c: 1897: if (diet == 100){
  4555  00F694  0E64               	movlw	100
  4556  00F696  0101               	movlb	1	; () banked
  4557  00F698  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4558  00F69A  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4559  00F69C  A4D8               	btfss	status,2,c
  4560  00F69E  D005               	goto	l1304
  4561                           
  4562                           ; BSR set to: 1
  4563                           ;standbyMode.c: 1898: diet = 0;
  4564  00F6A0  0E00               	movlw	0
  4565  00F6A2  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4566  00F6A4  0E00               	movlw	0
  4567  00F6A6  6F80               	movwf	standbyMode@diet& (0+255),b
  4568                           
  4569                           ;standbyMode.c: 1899: goto DIET_BACK2;
  4570  00F6A8  D724               	goto	l1262
  4571  00F6AA                     l1304:
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;standbyMode.c: 1900: }
  4575                           ;standbyMode.c: 1902: food = food_press(diet, drawer);
  4576                           
  4577                           ; BSR set to: 1
  4578  00F6AA  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4579  00F6AE  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4580  00F6B2  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4581  00F6B6  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4582  00F6BA  ECEE  F059         	call	_food_press	;wreg free
  4583  00F6BE  C029  F184         	movff	?_food_press,standbyMode@food
  4584  00F6C2  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4585                           
  4586                           ;standbyMode.c: 1903: if (food == 100){
  4587  00F6C6  0E64               	movlw	100
  4588  00F6C8  0101               	movlb	1	; () banked
  4589  00F6CA  1984               	xorwf	standbyMode@food& (0+255),w,b
  4590  00F6CC  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4591  00F6CE  A4D8               	btfss	status,2,c
  4592  00F6D0  D009               	goto	l1305
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;standbyMode.c: 1904: diet = 0;
  4596  00F6D2  0E00               	movlw	0
  4597  00F6D4  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4598  00F6D6  0E00               	movlw	0
  4599  00F6D8  6F80               	movwf	standbyMode@diet& (0+255),b
  4600                           
  4601                           ;standbyMode.c: 1905: food = 0;
  4602  00F6DA  0E00               	movlw	0
  4603  00F6DC  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4604  00F6DE  0E00               	movlw	0
  4605  00F6E0  6F84               	movwf	standbyMode@food& (0+255),b
  4606                           
  4607                           ;standbyMode.c: 1906: goto FOOD_BACK2;
  4608  00F6E2  D7C3               	goto	l1298
  4609  00F6E4                     l1305:
  4610                           
  4611                           ; BSR set to: 1
  4612                           ;standbyMode.c: 1907: }
  4613                           ;standbyMode.c: 1909: drawerInformation[drawerCount] = drawer;
  4614                           
  4615                           ; BSR set to: 1
  4616  00F6E4  90D8               	bcf	status,0,c
  4617  00F6E6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4618  00F6E8  6ED9               	movwf	fsr2l,c
  4619  00F6EA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4620  00F6EC  6EDA               	movwf	fsr2h,c
  4621  00F6EE  0E50               	movlw	low standbyMode@drawerInformation
  4622  00F6F0  26D9               	addwf	fsr2l,f,c
  4623  00F6F2  0E01               	movlw	high standbyMode@drawerInformation
  4624  00F6F4  22DA               	addwfc	fsr2h,f,c
  4625  00F6F6  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4626  00F6FA  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4627                           
  4628                           ; BSR set to: 1
  4629                           ;standbyMode.c: 1910: decodedDiet = decode_diet(diet);
  4630  00F6FE  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4631  00F702  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4632  00F706  EC37  F055         	call	_decode_diet	;wreg free
  4633  00F70A  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4634  00F70E  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4635                           
  4636                           ;standbyMode.c: 1911: dietType[drawerCount] = decodedDiet;
  4637  00F712  90D8               	bcf	status,0,c
  4638  00F714  0101               	movlb	1	; () banked
  4639  00F716  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4640  00F718  6ED9               	movwf	fsr2l,c
  4641  00F71A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4642  00F71C  6EDA               	movwf	fsr2h,c
  4643  00F71E  0E30               	movlw	low standbyMode@dietType
  4644  00F720  26D9               	addwf	fsr2l,f,c
  4645  00F722  0E01               	movlw	high standbyMode@dietType
  4646  00F724  22DA               	addwfc	fsr2h,f,c
  4647  00F726  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4648  00F72A  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4649                           
  4650                           ;standbyMode.c: 1912: storedFoodType = printFoodInput(food);
  4651  00F72E  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4652  00F732  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4653  00F736  ECF6  F05B         	call	_printFoodInput	;wreg free
  4654  00F73A  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4655  00F73E  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4656                           
  4657                           ;standbyMode.c: 1913: foodType[drawerCount] = storedFoodType;
  4658  00F742  90D8               	bcf	status,0,c
  4659  00F744  0101               	movlb	1	; () banked
  4660  00F746  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4661  00F748  6ED9               	movwf	fsr2l,c
  4662  00F74A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4663  00F74C  6EDA               	movwf	fsr2h,c
  4664  00F74E  0E40               	movlw	low standbyMode@foodType
  4665  00F750  26D9               	addwf	fsr2l,f,c
  4666  00F752  0E01               	movlw	high standbyMode@foodType
  4667  00F754  22DA               	addwfc	fsr2h,f,c
  4668  00F756  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4669  00F75A  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4670                           
  4671                           ; BSR set to: 1
  4672                           ;standbyMode.c: 1916: round = getRound(food);
  4673  00F75E  C184  F001         	movff	standbyMode@food,getRound@code
  4674  00F762  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4675  00F766  ECA7  F053         	call	_getRound	;wreg free
  4676  00F76A  C001  F16C         	movff	?_getRound,standbyMode@round
  4677  00F76E  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4678                           
  4679                           ;standbyMode.c: 1917: flat = getFlat(food);
  4680  00F772  C184  F001         	movff	standbyMode@food,getFlat@code
  4681  00F776  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4682  00F77A  EC2F  F053         	call	_getFlat	;wreg free
  4683  00F77E  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4684  00F782  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4685                           
  4686                           ;standbyMode.c: 1918: lng = getLong(food);
  4687  00F786  C184  F001         	movff	standbyMode@food,getLong@code
  4688  00F78A  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4689  00F78E  EC1F  F054         	call	_getLong	;wreg free
  4690  00F792  C001  F170         	movff	?_getLong,standbyMode@lng
  4691  00F796  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4692                           
  4693                           ;standbyMode.c: 1919: roundPieces[drawerCount] = round;
  4694  00F79A  90D8               	bcf	status,0,c
  4695  00F79C  0101               	movlb	1	; () banked
  4696  00F79E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4697  00F7A0  6ED9               	movwf	fsr2l,c
  4698  00F7A2  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4699  00F7A4  6EDA               	movwf	fsr2h,c
  4700  00F7A6  0E00               	movlw	low standbyMode@roundPieces
  4701  00F7A8  26D9               	addwf	fsr2l,f,c
  4702  00F7AA  0E01               	movlw	high standbyMode@roundPieces
  4703  00F7AC  22DA               	addwfc	fsr2h,f,c
  4704  00F7AE  C16C  FFDE         	movff	standbyMode@round,postinc2
  4705  00F7B2  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4706                           
  4707                           ;standbyMode.c: 1920: flatPieces[drawerCount] = flat;
  4708  00F7B6  90D8               	bcf	status,0,c
  4709  00F7B8  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4710  00F7BA  6ED9               	movwf	fsr2l,c
  4711  00F7BC  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4712  00F7BE  6EDA               	movwf	fsr2h,c
  4713  00F7C0  0E10               	movlw	low standbyMode@flatPieces
  4714  00F7C2  26D9               	addwf	fsr2l,f,c
  4715  00F7C4  0E01               	movlw	high standbyMode@flatPieces
  4716  00F7C6  22DA               	addwfc	fsr2h,f,c
  4717  00F7C8  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4718  00F7CC  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4719                           
  4720                           ;standbyMode.c: 1921: longPieces[drawerCount] = lng;
  4721  00F7D0  90D8               	bcf	status,0,c
  4722  00F7D2  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4723  00F7D4  6ED9               	movwf	fsr2l,c
  4724  00F7D6  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4725  00F7D8  6EDA               	movwf	fsr2h,c
  4726  00F7DA  0E20               	movlw	low standbyMode@longPieces
  4727  00F7DC  26D9               	addwf	fsr2l,f,c
  4728  00F7DE  0E01               	movlw	high standbyMode@longPieces
  4729  00F7E0  22DA               	addwfc	fsr2h,f,c
  4730  00F7E2  C170  FFDE         	movff	standbyMode@lng,postinc2
  4731  00F7E6  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4732                           
  4733                           ; BSR set to: 1
  4734                           ;standbyMode.c: 1922: drawerCount += 1;
  4735  00F7EA  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4736  00F7EC  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4737                           
  4738                           ; BSR set to: 1
  4739                           
  4740                           ; BSR set to: 1
  4741                           
  4742                           ; BSR set to: 1
  4743  00F7EE  D4A4               	goto	u13620
  4744  00F7F0                     l1290:
  4745                           
  4746                           ;standbyMode.c: 1923: }
  4747                           ;standbyMode.c: 1924: }
  4748                           ;standbyMode.c: 1925: }
  4749                           ;standbyMode.c: 1927: if (drawerCount == 0){
  4750                           
  4751                           ; BSR set to: 1
  4752  00F7F0  0101               	movlb	1	; () banked
  4753  00F7F2  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4754  00F7F4  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4755  00F7F6  A4D8               	btfss	status,2,c
  4756  00F7F8  D005               	goto	l1306
  4757                           
  4758                           ; BSR set to: 1
  4759                           ;standbyMode.c: 1928: return 0;
  4760  00F7FA  0E00               	movlw	0
  4761  00F7FC  6E5F               	movwf	?_standbyMode+1,c
  4762  00F7FE  0E00               	movlw	0
  4763  00F800  6E5E               	movwf	?_standbyMode,c
  4764                           
  4765                           ; BSR set to: 1
  4766                           ;standbyMode.c: 1929: }
  4767                           
  4768                           ; BSR set to: 1
  4769  00F802  0012               	return	
  4770  00F804                     l1306:
  4771                           
  4772                           ; BSR set to: 1
  4773                           ;standbyMode.c: 1930: else{
  4774                           ;standbyMode.c: 1931: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4775                           
  4776                           ; BSR set to: 1
  4777  00F804  0E01               	movlw	1
  4778  00F806  EC16  F04D         	call	_lcdInst
  4779  00F80A  0EC3               	movlw	195
  4780  00F80C  6E60               	movwf	??_standbyMode& (0+255),c
  4781  00F80E  0ECD               	movlw	205
  4782  00F810                     u14587:
  4783  00F810  2EE8               	decfsz	wreg,f,c
  4784  00F812  D7FE               	bra	u14587
  4785  00F814  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4786  00F816  D7FC               	bra	u14587
  4787  00F818  F000               	nop	
  4788                           
  4789                           ;standbyMode.c: 1932: printf("Inputs submitted");
  4790  00F81A  0EAB               	movlw	low STR_140
  4791  00F81C  6E0D               	movwf	printf@f,c
  4792  00F81E  0EFC               	movlw	high STR_140
  4793  00F820  6E0E               	movwf	printf@f+1,c
  4794  00F822  EC0C  F061         	call	_printf	;wreg free
  4795                           
  4796                           ;standbyMode.c: 1933: lcdInst(0xC0);;
  4797  00F826  0EC0               	movlw	192
  4798  00F828  EC16  F04D         	call	_lcdInst
  4799                           
  4800                           ;standbyMode.c: 1934: printf("successfully!");
  4801  00F82C  0E71               	movlw	low STR_141
  4802  00F82E  6E0D               	movwf	printf@f,c
  4803  00F830  0EFE               	movlw	high STR_141
  4804  00F832  6E0E               	movwf	printf@f+1,c
  4805  00F834  EC0C  F061         	call	_printf	;wreg free
  4806                           
  4807                           ;standbyMode.c: 1935: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4808  00F838  0E33               	movlw	51
  4809  00F83A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4810  00F83C  0EBB               	movlw	187
  4811  00F83E  6E60               	movwf	??_standbyMode& (0+255),c
  4812  00F840  0EE0               	movlw	224
  4813  00F842                     u14597:
  4814  00F842  2EE8               	decfsz	wreg,f,c
  4815  00F844  D7FE               	bra	u14597
  4816  00F846  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4817  00F848  D7FC               	bra	u14597
  4818  00F84A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4819  00F84C  D7FA               	bra	u14597
  4820                           
  4821                           ;standbyMode.c: 1937: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4822  00F84E  0E01               	movlw	1
  4823  00F850  EC16  F04D         	call	_lcdInst
  4824  00F854  0EC3               	movlw	195
  4825  00F856  6E60               	movwf	??_standbyMode& (0+255),c
  4826  00F858  0ECD               	movlw	205
  4827  00F85A                     u14607:
  4828  00F85A  2EE8               	decfsz	wreg,f,c
  4829  00F85C  D7FE               	bra	u14607
  4830  00F85E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4831  00F860  D7FC               	bra	u14607
  4832  00F862  F000               	nop	
  4833                           
  4834                           ;standbyMode.c: 1938: printf("Summary of");
  4835  00F864  0E13               	movlw	low STR_142
  4836  00F866  6E0D               	movwf	printf@f,c
  4837  00F868  0EFF               	movlw	high STR_142
  4838  00F86A  6E0E               	movwf	printf@f+1,c
  4839  00F86C  EC0C  F061         	call	_printf	;wreg free
  4840                           
  4841                           ;standbyMode.c: 1939: lcdInst(0xC0);;
  4842  00F870  0EC0               	movlw	192
  4843  00F872  EC16  F04D         	call	_lcdInst
  4844                           
  4845                           ;standbyMode.c: 1940: printf("inputs:");
  4846  00F876  0E7F               	movlw	low STR_143
  4847  00F878  6E0D               	movwf	printf@f,c
  4848  00F87A  0EFF               	movlw	high STR_143
  4849  00F87C  6E0E               	movwf	printf@f+1,c
  4850  00F87E  EC0C  F061         	call	_printf	;wreg free
  4851                           
  4852                           ;standbyMode.c: 1941: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4853  00F882  0E33               	movlw	51
  4854  00F884  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4855  00F886  0EBB               	movlw	187
  4856  00F888  6E60               	movwf	??_standbyMode& (0+255),c
  4857  00F88A  0EE0               	movlw	224
  4858  00F88C                     u14617:
  4859  00F88C  2EE8               	decfsz	wreg,f,c
  4860  00F88E  D7FE               	bra	u14617
  4861  00F890  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4862  00F892  D7FC               	bra	u14617
  4863  00F894  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4864  00F896  D7FA               	bra	u14617
  4865                           
  4866                           ;standbyMode.c: 1943: for (i=0; i<8; i++){
  4867  00F898  0E00               	movlw	0
  4868  00F89A  0101               	movlb	1	; () banked
  4869  00F89C  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4870  00F89E  0E00               	movlw	0
  4871  00F8A0  6F88               	movwf	standbyMode@i& (0+255),b
  4872                           
  4873                           ; BSR set to: 1
  4874  00F8A2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4875  00F8A4  E105               	bnz	u13880
  4876  00F8A6  0E08               	movlw	8
  4877  00F8A8  5D88               	subwf	standbyMode@i& (0+255),w,b
  4878  00F8AA  B0D8               	btfsc	status,0,c
  4879  00F8AC  D07D               	goto	u13900
  4880  00F8AE  D001               	goto	l1309
  4881  00F8B0                     u13880:
  4882                           
  4883                           ; BSR set to: 1
  4884  00F8B0  D07B               	goto	u13900
  4885  00F8B2                     l1309:
  4886                           
  4887                           ; BSR set to: 1
  4888                           ;standbyMode.c: 1944: if (drawerInformation[i] != 0){
  4889                           
  4890                           ; BSR set to: 1
  4891  00F8B2  90D8               	bcf	status,0,c
  4892  00F8B4  3588               	rlcf	standbyMode@i& (0+255),w,b
  4893  00F8B6  6ED9               	movwf	fsr2l,c
  4894  00F8B8  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4895  00F8BA  6EDA               	movwf	fsr2h,c
  4896  00F8BC  0E50               	movlw	low standbyMode@drawerInformation
  4897  00F8BE  26D9               	addwf	fsr2l,f,c
  4898  00F8C0  0E01               	movlw	high standbyMode@drawerInformation
  4899  00F8C2  22DA               	addwfc	fsr2h,f,c
  4900  00F8C4  50DE               	movf	postinc2,w,c
  4901  00F8C6  10DE               	iorwf	postinc2,w,c
  4902  00F8C8  B4D8               	btfsc	status,2,c
  4903  00F8CA  D068               	goto	l1311
  4904                           
  4905                           ; BSR set to: 1
  4906                           ;standbyMode.c: 1945: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4907  00F8CC  0E01               	movlw	1
  4908  00F8CE  EC16  F04D         	call	_lcdInst
  4909  00F8D2  0EC3               	movlw	195
  4910  00F8D4  6E60               	movwf	??_standbyMode& (0+255),c
  4911  00F8D6  0ECD               	movlw	205
  4912  00F8D8                     u14627:
  4913  00F8D8  2EE8               	decfsz	wreg,f,c
  4914  00F8DA  D7FE               	bra	u14627
  4915  00F8DC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4916  00F8DE  D7FC               	bra	u14627
  4917  00F8E0  F000               	nop	
  4918                           
  4919                           ;standbyMode.c: 1946: printf("Drawer %i:", drawerInformation[i]);
  4920  00F8E2  0E08               	movlw	low STR_101
  4921  00F8E4  6E0D               	movwf	printf@f,c
  4922  00F8E6  0EFF               	movlw	high STR_101
  4923  00F8E8  6E0E               	movwf	printf@f+1,c
  4924  00F8EA  90D8               	bcf	status,0,c
  4925  00F8EC  0101               	movlb	1	; () banked
  4926  00F8EE  3588               	rlcf	standbyMode@i& (0+255),w,b
  4927  00F8F0  6ED9               	movwf	fsr2l,c
  4928  00F8F2  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4929  00F8F4  6EDA               	movwf	fsr2h,c
  4930  00F8F6  0E50               	movlw	low standbyMode@drawerInformation
  4931  00F8F8  26D9               	addwf	fsr2l,f,c
  4932  00F8FA  0E01               	movlw	high standbyMode@drawerInformation
  4933  00F8FC  22DA               	addwfc	fsr2h,f,c
  4934  00F8FE  CFDE F00F          	movff	postinc2,?_printf+2
  4935  00F902  CFDD F010          	movff	postdec2,?_printf+3
  4936  00F906  EC0C  F061         	call	_printf	;wreg free
  4937                           
  4938                           ;standbyMode.c: 1947: lcdInst(0xC0);;
  4939  00F90A  0EC0               	movlw	192
  4940  00F90C  EC16  F04D         	call	_lcdInst
  4941                           
  4942                           ;standbyMode.c: 1948: printf("%s%s",inputs[dietType[i]], foodInputs[foodType[i]]);
  4943  00F910  0EB3               	movlw	low STR_102
  4944  00F912  6E0D               	movwf	printf@f,c
  4945  00F914  0EFF               	movlw	high STR_102
  4946  00F916  6E0E               	movwf	printf@f+1,c
  4947  00F918  90D8               	bcf	status,0,c
  4948  00F91A  0101               	movlb	1	; () banked
  4949  00F91C  3588               	rlcf	standbyMode@i& (0+255),w,b
  4950  00F91E  6ED9               	movwf	fsr2l,c
  4951  00F920  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4952  00F922  6EDA               	movwf	fsr2h,c
  4953  00F924  0E30               	movlw	low standbyMode@dietType
  4954  00F926  26D9               	addwf	fsr2l,f,c
  4955  00F928  0E01               	movlw	high standbyMode@dietType
  4956  00F92A  22DA               	addwfc	fsr2h,f,c
  4957  00F92C  CFDE F060          	movff	postinc2,??_standbyMode
  4958  00F930  CFDD F061          	movff	postdec2,??_standbyMode+1
  4959  00F934  90D8               	bcf	status,0,c
  4960  00F936  3660               	rlcf	??_standbyMode,f,c
  4961  00F938  3661               	rlcf	??_standbyMode+1,f,c
  4962  00F93A  0E50               	movlw	low _inputs
  4963  00F93C  2460               	addwf	??_standbyMode,w,c
  4964  00F93E  6ED9               	movwf	fsr2l,c
  4965  00F940  0E02               	movlw	high _inputs
  4966  00F942  2061               	addwfc	??_standbyMode+1,w,c
  4967  00F944  6EDA               	movwf	fsr2h,c
  4968  00F946  CFDE F00F          	movff	postinc2,?_printf+2
  4969  00F94A  CFDD F010          	movff	postdec2,?_printf+3
  4970  00F94E  90D8               	bcf	status,0,c
  4971  00F950  3588               	rlcf	standbyMode@i& (0+255),w,b
  4972  00F952  6ED9               	movwf	fsr2l,c
  4973  00F954  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4974  00F956  6EDA               	movwf	fsr2h,c
  4975  00F958  0E40               	movlw	low standbyMode@foodType
  4976  00F95A  26D9               	addwf	fsr2l,f,c
  4977  00F95C  0E01               	movlw	high standbyMode@foodType
  4978  00F95E  22DA               	addwfc	fsr2h,f,c
  4979  00F960  CFDE F062          	movff	postinc2,??_standbyMode+2
  4980  00F964  CFDD F063          	movff	postdec2,??_standbyMode+3
  4981  00F968  90D8               	bcf	status,0,c
  4982  00F96A  3662               	rlcf	??_standbyMode+2,f,c
  4983  00F96C  3663               	rlcf	??_standbyMode+3,f,c
  4984  00F96E  0E74               	movlw	low _foodInputs
  4985  00F970  2462               	addwf	??_standbyMode+2,w,c
  4986  00F972  6ED9               	movwf	fsr2l,c
  4987  00F974  0E02               	movlw	high _foodInputs
  4988  00F976  2063               	addwfc	??_standbyMode+3,w,c
  4989  00F978  6EDA               	movwf	fsr2h,c
  4990  00F97A  CFDE F011          	movff	postinc2,?_printf+4
  4991  00F97E  CFDD F012          	movff	postdec2,?_printf+5
  4992  00F982  EC0C  F061         	call	_printf	;wreg free
  4993                           
  4994                           ;standbyMode.c: 1949: _delay((unsigned long)((1500)*(40000000/4000.0)));
  4995  00F986  0E4D               	movlw	77
  4996  00F988  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4997  00F98A  0E19               	movlw	25
  4998  00F98C  6E60               	movwf	??_standbyMode& (0+255),c
  4999  00F98E  0E50               	movlw	80
  5000  00F990                     u14637:
  5001  00F990  2EE8               	decfsz	wreg,f,c
  5002  00F992  D7FE               	bra	u14637
  5003  00F994  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5004  00F996  D7FC               	bra	u14637
  5005  00F998  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5006  00F99A  D7FA               	bra	u14637
  5007  00F99C                     l1311:
  5008  00F99C  0101               	movlb	1	; () banked
  5009  00F99E  4B88               	infsnz	standbyMode@i& (0+255),f,b
  5010  00F9A0  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  5011  00F9A2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5012  00F9A4  E101               	bnz	l10598
  5013  00F9A6  D77F               	goto	L1
  5014  00F9A8                     u13900:
  5015  00F9A8                     l10598:
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;standbyMode.c: 1950: }
  5019                           ;standbyMode.c: 1951: }
  5020                           ;standbyMode.c: 1953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5021  00F9A8  0E01               	movlw	1
  5022  00F9AA  EC16  F04D         	call	_lcdInst
  5023  00F9AE  0EC3               	movlw	195
  5024  00F9B0  6E60               	movwf	??_standbyMode& (0+255),c
  5025  00F9B2  0ECD               	movlw	205
  5026  00F9B4                     u14647:
  5027  00F9B4  2EE8               	decfsz	wreg,f,c
  5028  00F9B6  D7FE               	bra	u14647
  5029  00F9B8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5030  00F9BA  D7FC               	bra	u14647
  5031  00F9BC  F000               	nop	
  5032                           
  5033                           ;standbyMode.c: 1954: printf("Operation will");
  5034  00F9BE  0E0A               	movlw	low STR_146
  5035  00F9C0  6E0D               	movwf	printf@f,c
  5036  00F9C2  0EFE               	movlw	high STR_146
  5037  00F9C4  6E0E               	movwf	printf@f+1,c
  5038  00F9C6  EC0C  F061         	call	_printf	;wreg free
  5039                           
  5040                           ;standbyMode.c: 1955: lcdInst(0xC0);;
  5041  00F9CA  0EC0               	movlw	192
  5042  00F9CC  EC16  F04D         	call	_lcdInst
  5043                           
  5044                           ;standbyMode.c: 1956: printf("begin shortly.");
  5045  00F9D0  0EB0               	movlw	low STR_147
  5046  00F9D2  6E0D               	movwf	printf@f,c
  5047  00F9D4  0EFD               	movlw	high STR_147
  5048  00F9D6  6E0E               	movwf	printf@f+1,c
  5049  00F9D8  EC0C  F061         	call	_printf	;wreg free
  5050                           
  5051                           ;standbyMode.c: 1957: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5052  00F9DC  0E33               	movlw	51
  5053  00F9DE  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5054  00F9E0  0EBB               	movlw	187
  5055  00F9E2  6E60               	movwf	??_standbyMode& (0+255),c
  5056  00F9E4  0EE0               	movlw	224
  5057  00F9E6                     u14657:
  5058  00F9E6  2EE8               	decfsz	wreg,f,c
  5059  00F9E8  D7FE               	bra	u14657
  5060  00F9EA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5061  00F9EC  D7FC               	bra	u14657
  5062  00F9EE  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5063  00F9F0  D7FA               	bra	u14657
  5064                           
  5065                           ;standbyMode.c: 1959: logNumber = readEEPROM(250);
  5066  00F9F2  0EFA               	movlw	250
  5067  00F9F4  EC20  F04D         	call	_readEEPROM
  5068  00F9F8  0101               	movlb	1	; () banked
  5069  00F9FA  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  5070                           
  5071                           ; BSR set to: 1
  5072                           ;standbyMode.c: 1960: if (logNumber == 4){
  5073  00F9FC  0E04               	movlw	4
  5074  00F9FE  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  5075  00FA00  B4D8               	btfsc	status,2,c
  5076                           
  5077                           ; BSR set to: 1
  5078                           ;standbyMode.c: 1961: shiftEEPROM();
  5079  00FA02  ECA2  F051         	call	_shiftEEPROM	;wreg free
  5080                           
  5081                           ;standbyMode.c: 1962: }
  5082                           ;standbyMode.c: 1963: for (i=0; i<8; i++){
  5083  00FA06  0E00               	movlw	0
  5084  00FA08  0101               	movlb	1	; () banked
  5085  00FA0A  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  5086  00FA0C  0E00               	movlw	0
  5087  00FA0E  6F88               	movwf	standbyMode@i& (0+255),b
  5088                           
  5089                           ; BSR set to: 1
  5090  00FA10  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5091  00FA12  E172               	bnz	l1314
  5092  00FA14  0E08               	movlw	8
  5093  00FA16  5D88               	subwf	standbyMode@i& (0+255),w,b
  5094  00FA18  B0D8               	btfsc	status,0,c
  5095  00FA1A  D06E               	goto	u13950
  5096                           
  5097                           ; BSR set to: 1
  5098                           ;standbyMode.c: 1964: if (logNumber == 0 || logNumber == 4){
  5099                           
  5100                           ; BSR set to: 1
  5101                           
  5102                           ; BSR set to: 1
  5103  00FA1C  517F               	movf	standbyMode@logNumber& (0+255),w,b
  5104  00FA1E  B4D8               	btfsc	status,2,c
  5105  00FA20  D004               	goto	u13940
  5106                           
  5107                           ; BSR set to: 1
  5108  00FA22  0E04               	movlw	4
  5109  00FA24  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  5110  00FA26  A4D8               	btfss	status,2,c
  5111  00FA28  D00F               	goto	l1315
  5112  00FA2A                     u13940:
  5113                           
  5114                           ; BSR set to: 1
  5115                           ;standbyMode.c: 1965: n = 3*i;
  5116                           
  5117                           ; BSR set to: 1
  5118  00FA2A  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  5119  00FA2E  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  5120  00FA32  0E00               	movlw	0
  5121  00FA34  6E04               	movwf	___wmul@multiplicand+1,c
  5122  00FA36  0E03               	movlw	3
  5123  00FA38  6E03               	movwf	___wmul@multiplicand,c
  5124  00FA3A  EC68  F04D         	call	___wmul	;wreg free
  5125  00FA3E  C001  F17B         	movff	?___wmul,standbyMode@n
  5126  00FA42  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  5127                           
  5128                           ;standbyMode.c: 1966: }
  5129  00FA46  D022               	goto	l1318
  5130  00FA48                     l1315:
  5131                           
  5132                           ;standbyMode.c: 1967: else{
  5133                           ;standbyMode.c: 1968: n = (logNumber-1)*35 + 3*i;
  5134  00FA48  0EFF               	movlw	255
  5135  00FA4A  0101               	movlb	1	; () banked
  5136  00FA4C  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  5137  00FA4E  6E01               	movwf	___wmul@multiplier,c
  5138  00FA50  6A02               	clrf	___wmul@multiplier+1,c
  5139  00FA52  0EFF               	movlw	255
  5140  00FA54  2202               	addwfc	___wmul@multiplier+1,f,c
  5141  00FA56  0E00               	movlw	0
  5142  00FA58  6E04               	movwf	___wmul@multiplicand+1,c
  5143  00FA5A  0E23               	movlw	35
  5144  00FA5C  6E03               	movwf	___wmul@multiplicand,c
  5145  00FA5E  EC68  F04D         	call	___wmul	;wreg free
  5146  00FA62  C001  F060         	movff	?___wmul,??_standbyMode
  5147  00FA66  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  5148  00FA6A  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  5149  00FA6E  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  5150  00FA72  0E00               	movlw	0
  5151  00FA74  6E04               	movwf	___wmul@multiplicand+1,c
  5152  00FA76  0E03               	movlw	3
  5153  00FA78  6E03               	movwf	___wmul@multiplicand,c
  5154  00FA7A  EC68  F04D         	call	___wmul	;wreg free
  5155  00FA7E  5001               	movf	?___wmul,w,c
  5156  00FA80  2460               	addwf	??_standbyMode,w,c
  5157  00FA82  0101               	movlb	1	; () banked
  5158  00FA84  6F7B               	movwf	standbyMode@n& (0+255),b
  5159  00FA86  5002               	movf	?___wmul+1,w,c
  5160  00FA88  2061               	addwfc	??_standbyMode+1,w,c
  5161  00FA8A  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  5162  00FA8C                     l1318:
  5163                           
  5164                           ;standbyMode.c: 1969: }
  5165                           ;standbyMode.c: 1970: writeEEPROM(11+n, drawerInformation[i]);
  5166                           
  5167                           ; BSR set to: 1
  5168  00FA8C  90D8               	bcf	status,0,c
  5169  00FA8E  0101               	movlb	1	; () banked
  5170  00FA90  3588               	rlcf	standbyMode@i& (0+255),w,b
  5171  00FA92  6ED9               	movwf	fsr2l,c
  5172  00FA94  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5173  00FA96  6EDA               	movwf	fsr2h,c
  5174  00FA98  0E50               	movlw	low standbyMode@drawerInformation
  5175  00FA9A  26D9               	addwf	fsr2l,f,c
  5176  00FA9C  0E01               	movlw	high standbyMode@drawerInformation
  5177  00FA9E  22DA               	addwfc	fsr2h,f,c
  5178  00FAA0  50DF               	movf	indf2,w,c
  5179  00FAA2  6E01               	movwf	writeEEPROM@data,c
  5180  00FAA4  517B               	movf	standbyMode@n& (0+255),w,b
  5181  00FAA6  0F0B               	addlw	11
  5182  00FAA8  EC7B  F04D         	call	_writeEEPROM
  5183                           
  5184                           ;standbyMode.c: 1971: writeEEPROM(12+n, dietType[i]);
  5185  00FAAC  90D8               	bcf	status,0,c
  5186  00FAAE  0101               	movlb	1	; () banked
  5187  00FAB0  3588               	rlcf	standbyMode@i& (0+255),w,b
  5188  00FAB2  6ED9               	movwf	fsr2l,c
  5189  00FAB4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5190  00FAB6  6EDA               	movwf	fsr2h,c
  5191  00FAB8  0E30               	movlw	low standbyMode@dietType
  5192  00FABA  26D9               	addwf	fsr2l,f,c
  5193  00FABC  0E01               	movlw	high standbyMode@dietType
  5194  00FABE  22DA               	addwfc	fsr2h,f,c
  5195  00FAC0  50DF               	movf	indf2,w,c
  5196  00FAC2  6E01               	movwf	writeEEPROM@data,c
  5197  00FAC4  517B               	movf	standbyMode@n& (0+255),w,b
  5198  00FAC6  0F0C               	addlw	12
  5199  00FAC8  EC7B  F04D         	call	_writeEEPROM
  5200                           
  5201                           ;standbyMode.c: 1972: writeEEPROM(13+n, foodType[i]);
  5202  00FACC  90D8               	bcf	status,0,c
  5203  00FACE  0101               	movlb	1	; () banked
  5204  00FAD0  3588               	rlcf	standbyMode@i& (0+255),w,b
  5205  00FAD2  6ED9               	movwf	fsr2l,c
  5206  00FAD4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  5207  00FAD6  6EDA               	movwf	fsr2h,c
  5208  00FAD8  0E40               	movlw	low standbyMode@foodType
  5209  00FADA  26D9               	addwf	fsr2l,f,c
  5210  00FADC  0E01               	movlw	high standbyMode@foodType
  5211  00FADE  22DA               	addwfc	fsr2h,f,c
  5212  00FAE0  50DF               	movf	indf2,w,c
  5213  00FAE2  6E01               	movwf	writeEEPROM@data,c
  5214  00FAE4  517B               	movf	standbyMode@n& (0+255),w,b
  5215  00FAE6  0F0D               	addlw	13
  5216  00FAE8  EC7B  F04D         	call	_writeEEPROM
  5217  00FAEC  0101               	movlb	1	; () banked
  5218  00FAEE  4B88               	infsnz	standbyMode@i& (0+255),f,b
  5219  00FAF0  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  5220                           
  5221                           ; BSR set to: 1
  5222  00FAF2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  5223  00FAF4  E101               	bnz	l10638
  5224  00FAF6  D78E               	goto	L2
  5225  00FAF8                     u13950:
  5226  00FAF8                     l1314:
  5227  00FAF8                     l10638:
  5228                           
  5229                           ; BSR set to: 1
  5230                           ;standbyMode.c: 1973: }
  5231                           ;standbyMode.c: 1974: return 1;
  5232  00FAF8  0E00               	movlw	0
  5233  00FAFA  6E5F               	movwf	?_standbyMode+1,c
  5234  00FAFC  0E01               	movlw	1
  5235  00FAFE  6E5E               	movwf	?_standbyMode,c
  5236                           
  5237                           ; BSR set to: 1
  5238                           ;standbyMode.c: 1975: }
  5239                           ;standbyMode.c: 1976: }
  5240                           
  5241                           ; BSR set to: 1
  5242  00FB00  0012               	return	
  5243  00FB02                     l1260:
  5244                           
  5245                           ; BSR set to: 1
  5246                           ;standbyMode.c: 1977: else if (keypress == 14){
  5247                           
  5248                           ; BSR set to: 1
  5249  00FB02  0E0E               	movlw	14
  5250  00FB04  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  5251  00FB06  A4D8               	btfss	status,2,c
  5252  00FB08  D05F               	goto	l1320
  5253  00FB0A                     u13960:
  5254                           
  5255                           ;standbyMode.c: 1979: unsigned int whichKey = viewLogs();
  5256                           
  5257                           ; BSR set to: 1
  5258                           
  5259                           ;standbyMode.c: 1978: while (1){
  5260  00FB0A  EC96  F05F         	call	_viewLogs	;wreg free
  5261  00FB0E  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  5262  00FB12  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  5263                           
  5264                           ;standbyMode.c: 1980: if (whichKey == 15){
  5265  00FB16  0E0F               	movlw	15
  5266  00FB18  0101               	movlb	1	; () banked
  5267  00FB1A  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5268  00FB1C  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5269  00FB1E  B4D8               	btfsc	status,2,c
  5270  00FB20  D7F4               	goto	u13960
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;standbyMode.c: 1983: else if (whichKey == 14){
  5274                           
  5275                           ; BSR set to: 1
  5276                           
  5277                           ; BSR set to: 1
  5278                           ;standbyMode.c: 1982: }
  5279                           
  5280                           ; BSR set to: 1
  5281                           ;standbyMode.c: 1981: continue;
  5282  00FB22  0E0E               	movlw	14
  5283  00FB24  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5284  00FB26  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5285  00FB28  A4D8               	btfss	status,2,c
  5286  00FB2A  D020               	goto	l1325
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;standbyMode.c: 1984: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5290  00FB2C  0E01               	movlw	1
  5291  00FB2E  EC16  F04D         	call	_lcdInst
  5292  00FB32  0EC3               	movlw	195
  5293  00FB34  6E60               	movwf	??_standbyMode& (0+255),c
  5294  00FB36  0ECD               	movlw	205
  5295  00FB38                     u14667:
  5296  00FB38  2EE8               	decfsz	wreg,f,c
  5297  00FB3A  D7FE               	bra	u14667
  5298  00FB3C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5299  00FB3E  D7FC               	bra	u14667
  5300  00FB40  F000               	nop	
  5301                           
  5302                           ;standbyMode.c: 1985: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5303  00FB42  0E0C               	movlw	12
  5304  00FB44  EC16  F04D         	call	_lcdInst
  5305                           
  5306                           ;standbyMode.c: 1986: printf("Rebooting.");
  5307  00FB48  0EF2               	movlw	low STR_148
  5308  00FB4A  6E0D               	movwf	printf@f,c
  5309  00FB4C  0EFE               	movlw	high STR_148
  5310  00FB4E  6E0E               	movwf	printf@f+1,c
  5311  00FB50  EC0C  F061         	call	_printf	;wreg free
  5312                           
  5313                           ;standbyMode.c: 1987: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5314  00FB54  0E66               	movlw	102
  5315  00FB56  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5316  00FB58  0E76               	movlw	118
  5317  00FB5A  6E60               	movwf	??_standbyMode& (0+255),c
  5318  00FB5C  0EC1               	movlw	193
  5319  00FB5E                     u14677:
  5320  00FB5E  2EE8               	decfsz	wreg,f,c
  5321  00FB60  D7FE               	bra	u14677
  5322  00FB62  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5323  00FB64  D7FC               	bra	u14677
  5324  00FB66  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5325  00FB68  D7FA               	bra	u14677
  5326  00FB6A  D028               	goto	L3
  5327  00FB6C                     l1325:
  5328                           
  5329                           ;standbyMode.c: 1990: else{
  5330                           ;standbyMode.c: 1991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5331  00FB6C  0E01               	movlw	1
  5332  00FB6E  EC16  F04D         	call	_lcdInst
  5333  00FB72  0EC3               	movlw	195
  5334  00FB74  6E60               	movwf	??_standbyMode& (0+255),c
  5335  00FB76  0ECD               	movlw	205
  5336  00FB78                     u14687:
  5337  00FB78  2EE8               	decfsz	wreg,f,c
  5338  00FB7A  D7FE               	bra	u14687
  5339  00FB7C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5340  00FB7E  D7FC               	bra	u14687
  5341  00FB80  F000               	nop	
  5342                           
  5343                           ;standbyMode.c: 1992: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5344  00FB82  0E0C               	movlw	12
  5345  00FB84  EC16  F04D         	call	_lcdInst
  5346                           
  5347                           ;standbyMode.c: 1993: printf("Invalid key!");
  5348  00FB88  0E9B               	movlw	low STR_149
  5349  00FB8A  6E0D               	movwf	printf@f,c
  5350  00FB8C  0EFE               	movlw	high STR_149
  5351  00FB8E  6E0E               	movwf	printf@f+1,c
  5352  00FB90  EC0C  F061         	call	_printf	;wreg free
  5353                           
  5354                           ;standbyMode.c: 1994: lcdInst(0xC0);;
  5355  00FB94  0EC0               	movlw	192
  5356  00FB96  EC16  F04D         	call	_lcdInst
  5357                           
  5358                           ;standbyMode.c: 1995: printf("Rebooting.");
  5359  00FB9A  0EF2               	movlw	low STR_148
  5360  00FB9C  6E0D               	movwf	printf@f,c
  5361  00FB9E  0EFE               	movlw	high STR_148
  5362  00FBA0  6E0E               	movwf	printf@f+1,c
  5363  00FBA2  EC0C  F061         	call	_printf	;wreg free
  5364                           
  5365                           ;standbyMode.c: 1996: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5366  00FBA6  0E66               	movlw	102
  5367  00FBA8  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5368  00FBAA  0E76               	movlw	118
  5369  00FBAC  6E60               	movwf	??_standbyMode& (0+255),c
  5370  00FBAE  0EC1               	movlw	193
  5371  00FBB0                     u14697:
  5372  00FBB0  2EE8               	decfsz	wreg,f,c
  5373  00FBB2  D7FE               	bra	u14697
  5374  00FBB4  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5375  00FBB6  D7FC               	bra	u14697
  5376  00FBB8  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5377  00FBBA  D7FA               	bra	u14697
  5378  00FBBC                     L3:
  5379  00FBBC  F000               	nop	
  5380                           
  5381                           ;standbyMode.c: 1998: }
  5382                           ;standbyMode.c: 1999: }
  5383                           ;standbyMode.c: 2000: return 0;
  5384                           
  5385                           ;standbyMode.c: 1997: break;
  5386  00FBBE  0E00               	movlw	0
  5387  00FBC0  6E5F               	movwf	?_standbyMode+1,c
  5388  00FBC2  0E00               	movlw	0
  5389  00FBC4  6E5E               	movwf	?_standbyMode,c
  5390                           
  5391                           ;standbyMode.c: 2001: }
  5392  00FBC6  0012               	return	
  5393  00FBC8                     l1320:
  5394                           
  5395                           ;standbyMode.c: 2003: else {
  5396                           ;standbyMode.c: 2004: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5397  00FBC8  0E01               	movlw	1
  5398  00FBCA  EC16  F04D         	call	_lcdInst
  5399  00FBCE  0EC3               	movlw	195
  5400  00FBD0  6E60               	movwf	??_standbyMode& (0+255),c
  5401  00FBD2  0ECD               	movlw	205
  5402  00FBD4                     u14707:
  5403  00FBD4  2EE8               	decfsz	wreg,f,c
  5404  00FBD6  D7FE               	bra	u14707
  5405  00FBD8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5406  00FBDA  D7FC               	bra	u14707
  5407  00FBDC  F000               	nop	
  5408                           
  5409                           ;standbyMode.c: 2005: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5410  00FBDE  0E0C               	movlw	12
  5411  00FBE0  EC16  F04D         	call	_lcdInst
  5412                           
  5413                           ;standbyMode.c: 2006: printf("Invalid key!");
  5414  00FBE4  0E9B               	movlw	low STR_149
  5415  00FBE6  6E0D               	movwf	printf@f,c
  5416  00FBE8  0EFE               	movlw	high STR_149
  5417  00FBEA  6E0E               	movwf	printf@f+1,c
  5418  00FBEC  EC0C  F061         	call	_printf	;wreg free
  5419                           
  5420                           ;standbyMode.c: 2007: lcdInst(0xC0);;
  5421  00FBF0  0EC0               	movlw	192
  5422  00FBF2  EC16  F04D         	call	_lcdInst
  5423                           
  5424                           ;standbyMode.c: 2008: printf("Rebooting.");
  5425  00FBF6  0EF2               	movlw	low STR_148
  5426  00FBF8  6E0D               	movwf	printf@f,c
  5427  00FBFA  0EFE               	movlw	high STR_148
  5428  00FBFC  6E0E               	movwf	printf@f+1,c
  5429  00FBFE  EC0C  F061         	call	_printf	;wreg free
  5430                           
  5431                           ;standbyMode.c: 2009: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5432  00FC02  0E66               	movlw	102
  5433  00FC04  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5434  00FC06  0E76               	movlw	118
  5435  00FC08  6E60               	movwf	??_standbyMode& (0+255),c
  5436  00FC0A  0EC1               	movlw	193
  5437  00FC0C                     u14717:
  5438  00FC0C  2EE8               	decfsz	wreg,f,c
  5439  00FC0E  D7FE               	bra	u14717
  5440  00FC10  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5441  00FC12  D7FC               	bra	u14717
  5442  00FC14  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5443  00FC16  D7FA               	bra	u14717
  5444  00FC18  F000               	nop	
  5445                           
  5446                           ;standbyMode.c: 2010: return 0;
  5447  00FC1A  0E00               	movlw	0
  5448  00FC1C  6E5F               	movwf	?_standbyMode+1,c
  5449  00FC1E  0E00               	movlw	0
  5450  00FC20  6E5E               	movwf	?_standbyMode,c
  5451  00FC22  0012               	return	
  5452  00FC24                     __end_of_standbyMode:
  5453                           	opt stack 0
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           plusw1	equ	0xFE3
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           plusw2	equ	0xFDB
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _which_drawer *****************
  5472 ;; Defined at:
  5473 ;;		line 1539 in file "standbyMode.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;  rand            2   43[COMRAM] unsigned int 
  5478 ;;  keypress        1   51[COMRAM] unsigned char 
  5479 ;;  count           2   49[COMRAM] unsigned int 
  5480 ;;  backCheck       2   47[COMRAM] unsigned int 
  5481 ;;  sum             2   45[COMRAM] unsigned int 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  2   40[COMRAM] unsigned int 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5491 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;Total ram usage:       12 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    3
  5498 ;; This function calls:
  5499 ;;		_decode_drawer
  5500 ;;		_lcdInst
  5501 ;;		_printf
  5502 ;;		_putch
  5503 ;; This function is called by:
  5504 ;;		_standbyMode
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text2
  5509  00B5D6                     __ptext2:
  5510                           	opt stack 0
  5511  00B5D6                     _which_drawer:
  5512                           	opt stack 26
  5513                           
  5514                           ;standbyMode.c: 1540: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5515                           
  5516                           ;incstack = 0
  5517  00B5D6  0E0C               	movlw	12
  5518  00B5D8  EC16  F04D         	call	_lcdInst
  5519                           
  5520                           ;standbyMode.c: 1541: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5521  00B5DC  0E01               	movlw	1
  5522  00B5DE  EC16  F04D         	call	_lcdInst
  5523  00B5E2  0EC3               	movlw	195
  5524  00B5E4  6E2B               	movwf	??_which_drawer& (0+255),c
  5525  00B5E6  0ECD               	movlw	205
  5526  00B5E8                     u14727:
  5527  00B5E8  2EE8               	decfsz	wreg,f,c
  5528  00B5EA  D7FE               	bra	u14727
  5529  00B5EC  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5530  00B5EE  D7FC               	bra	u14727
  5531  00B5F0  F000               	nop	
  5532                           
  5533                           ;standbyMode.c: 1542: printf("Drawer number:");
  5534  00B5F2  0EBF               	movlw	low STR_113
  5535  00B5F4  6E0D               	movwf	printf@f,c
  5536  00B5F6  0EFD               	movlw	high STR_113
  5537  00B5F8  6E0E               	movwf	printf@f+1,c
  5538  00B5FA  EC0C  F061         	call	_printf	;wreg free
  5539                           
  5540                           ;standbyMode.c: 1543: lcdInst(0xC0);;
  5541  00B5FE  0EC0               	movlw	192
  5542  00B600  EC16  F04D         	call	_lcdInst
  5543                           
  5544                           ;standbyMode.c: 1545: unsigned int count = 0;
  5545  00B604  0E00               	movlw	0
  5546  00B606  6E33               	movwf	which_drawer@count+1,c
  5547  00B608  0E00               	movlw	0
  5548  00B60A  6E32               	movwf	which_drawer@count,c
  5549                           
  5550                           ;standbyMode.c: 1546: unsigned int sum = 0;
  5551  00B60C  0E00               	movlw	0
  5552  00B60E  6E2F               	movwf	which_drawer@sum+1,c
  5553  00B610  0E00               	movlw	0
  5554  00B612  6E2E               	movwf	which_drawer@sum,c
  5555                           
  5556                           ;standbyMode.c: 1547: unsigned int backCheck = 0;
  5557  00B614  0E00               	movlw	0
  5558  00B616  6E31               	movwf	which_drawer@backCheck+1,c
  5559  00B618  0E00               	movlw	0
  5560  00B61A  6E30               	movwf	which_drawer@backCheck,c
  5561  00B61C                     
  5562                           ;standbyMode.c: 1550: while(PORTBbits.RB1 == 0){ continue; }
  5563  00B61C  A281               	btfss	3969,1,c	;volatile
  5564  00B61E  D7FE               	goto	l1201
  5565                           
  5566                           ;standbyMode.c: 1551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5567  00B620  3881               	swapf	3969,w,c	;volatile
  5568  00B622  0B0F               	andlw	15
  5569  00B624  0B0F               	andlw	15
  5570  00B626  6E34               	movwf	which_drawer@keypress,c
  5571  00B628  B281               	btfsc	3969,1,c	;volatile
  5572  00B62A  D7FE               	goto	l1206
  5573                           
  5574                           ;standbyMode.c: 1554: if(keypress == 15){
  5575  00B62C  0E0F               	movlw	15
  5576  00B62E  1834               	xorwf	which_drawer@keypress,w,c
  5577  00B630  B4D8               	btfsc	status,2,c
  5578  00B632  D0C3               	goto	l1209
  5579                           
  5580                           ;standbyMode.c: 1557: else if (keypress == 14){
  5581                           
  5582                           ;standbyMode.c: 1556: }
  5583                           
  5584                           ;standbyMode.c: 1555: break;
  5585  00B634  0E0E               	movlw	14
  5586  00B636  1834               	xorwf	which_drawer@keypress,w,c
  5587  00B638  A4D8               	btfss	status,2,c
  5588  00B63A  D005               	goto	l1211
  5589                           
  5590                           ;standbyMode.c: 1558: backCheck = 100;
  5591  00B63C  0E00               	movlw	0
  5592  00B63E  6E31               	movwf	which_drawer@backCheck+1,c
  5593  00B640  0E64               	movlw	100
  5594  00B642  6E30               	movwf	which_drawer@backCheck,c
  5595                           
  5596                           ;standbyMode.c: 1559: break;
  5597  00B644  D0BA               	goto	l1209
  5598  00B646                     l1211:
  5599                           
  5600                           ;standbyMode.c: 1561: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  5601  00B646  5034               	movf	which_drawer@keypress,w,c
  5602  00B648  B4D8               	btfsc	status,2,c
  5603  00B64A  D023               	goto	u13170
  5604  00B64C  0434               	decf	which_drawer@keypress,w,c
  5605  00B64E  B4D8               	btfsc	status,2,c
  5606  00B650  D020               	goto	u13170
  5607  00B652  0E02               	movlw	2
  5608  00B654  1834               	xorwf	which_drawer@keypress,w,c
  5609  00B656  B4D8               	btfsc	status,2,c
  5610  00B658  D01C               	goto	u13170
  5611  00B65A  0E04               	movlw	4
  5612  00B65C  1834               	xorwf	which_drawer@keypress,w,c
  5613  00B65E  B4D8               	btfsc	status,2,c
  5614  00B660  D018               	goto	u13170
  5615  00B662  0E05               	movlw	5
  5616  00B664  1834               	xorwf	which_drawer@keypress,w,c
  5617  00B666  B4D8               	btfsc	status,2,c
  5618  00B668  D014               	goto	u13170
  5619  00B66A  0E06               	movlw	6
  5620  00B66C  1834               	xorwf	which_drawer@keypress,w,c
  5621  00B66E  B4D8               	btfsc	status,2,c
  5622  00B670  D010               	goto	u13170
  5623  00B672  0E08               	movlw	8
  5624  00B674  1834               	xorwf	which_drawer@keypress,w,c
  5625  00B676  B4D8               	btfsc	status,2,c
  5626  00B678  D00C               	goto	u13170
  5627  00B67A  0E09               	movlw	9
  5628  00B67C  1834               	xorwf	which_drawer@keypress,w,c
  5629  00B67E  B4D8               	btfsc	status,2,c
  5630  00B680  D008               	goto	u13170
  5631  00B682  0E0A               	movlw	10
  5632  00B684  1834               	xorwf	which_drawer@keypress,w,c
  5633  00B686  B4D8               	btfsc	status,2,c
  5634  00B688  D004               	goto	u13170
  5635  00B68A  0E0D               	movlw	13
  5636  00B68C  1834               	xorwf	which_drawer@keypress,w,c
  5637  00B68E  A4D8               	btfss	status,2,c
  5638  00B690  D073               	goto	l1213
  5639  00B692                     u13170:
  5640                           
  5641                           ;standbyMode.c: 1562: if (count == 0){
  5642  00B692  5032               	movf	which_drawer@count,w,c
  5643  00B694  1033               	iorwf	which_drawer@count+1,w,c
  5644  00B696  A4D8               	btfss	status,2,c
  5645  00B698  D04C               	goto	l1216
  5646                           
  5647                           ;standbyMode.c: 1563: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  5648  00B69A  0434               	decf	which_drawer@keypress,w,c
  5649  00B69C  B4D8               	btfsc	status,2,c
  5650  00B69E  D01C               	goto	u13260
  5651  00B6A0  0E02               	movlw	2
  5652  00B6A2  1834               	xorwf	which_drawer@keypress,w,c
  5653  00B6A4  B4D8               	btfsc	status,2,c
  5654  00B6A6  D018               	goto	u13260
  5655  00B6A8  0E04               	movlw	4
  5656  00B6AA  1834               	xorwf	which_drawer@keypress,w,c
  5657  00B6AC  B4D8               	btfsc	status,2,c
  5658  00B6AE  D014               	goto	u13260
  5659  00B6B0  0E05               	movlw	5
  5660  00B6B2  1834               	xorwf	which_drawer@keypress,w,c
  5661  00B6B4  B4D8               	btfsc	status,2,c
  5662  00B6B6  D010               	goto	u13260
  5663  00B6B8  0E06               	movlw	6
  5664  00B6BA  1834               	xorwf	which_drawer@keypress,w,c
  5665  00B6BC  B4D8               	btfsc	status,2,c
  5666  00B6BE  D00C               	goto	u13260
  5667  00B6C0  0E08               	movlw	8
  5668  00B6C2  1834               	xorwf	which_drawer@keypress,w,c
  5669  00B6C4  B4D8               	btfsc	status,2,c
  5670  00B6C6  D008               	goto	u13260
  5671  00B6C8  0E09               	movlw	9
  5672  00B6CA  1834               	xorwf	which_drawer@keypress,w,c
  5673  00B6CC  B4D8               	btfsc	status,2,c
  5674  00B6CE  D004               	goto	u13260
  5675  00B6D0  0E0A               	movlw	10
  5676  00B6D2  1834               	xorwf	which_drawer@keypress,w,c
  5677  00B6D4  A4D8               	btfss	status,2,c
  5678  00B6D6  D014               	goto	l1217
  5679  00B6D8                     u13260:
  5680                           
  5681                           ;standbyMode.c: 1564: count += 2;
  5682  00B6D8  0E02               	movlw	2
  5683  00B6DA  2632               	addwf	which_drawer@count,f,c
  5684  00B6DC  0E00               	movlw	0
  5685  00B6DE  2233               	addwfc	which_drawer@count+1,f,c
  5686                           
  5687                           ;standbyMode.c: 1565: putch(input[keypress]);
  5688  00B6E0  5034               	movf	which_drawer@keypress,w,c
  5689  00B6E2  0D01               	mullw	1
  5690  00B6E4  0E36               	movlw	low _input
  5691  00B6E6  24F3               	addwf	prodl,w,c
  5692  00B6E8  6EF6               	movwf	tblptrl,c
  5693  00B6EA  0EFC               	movlw	high _input
  5694  00B6EC  20F4               	addwfc	prodh,w,c
  5695  00B6EE  6EF7               	movwf	tblptrh,c
  5696  00B6F0                     	if	1	;There are 3 active tblptr bytes
  5697  00B6F0  6AF8               	clrf	tblptru,c
  5698  00B6F2  0E00               	movlw	low (__mediumconst shr (0+16))
  5699  00B6F4  22F8               	addwfc	tblptru,f,c
  5700  00B6F6                     	endif
  5701  00B6F6  0008               	tblrd		*
  5702  00B6F8  50F5               	movf	tablat,w,c
  5703  00B6FA  EC2A  F04D         	call	_putch
  5704  00B6FE  D03A               	goto	l1227
  5705  00B700                     l1217:
  5706                           
  5707                           ;standbyMode.c: 1568: else if (keypress == 0){
  5708  00B700  5034               	movf	which_drawer@keypress,w,c
  5709  00B702  A4D8               	btfss	status,2,c
  5710  00B704  D78B               	goto	l1201
  5711                           
  5712                           ;standbyMode.c: 1569: putch(input[keypress]);
  5713  00B706  5034               	movf	which_drawer@keypress,w,c
  5714  00B708  0D01               	mullw	1
  5715  00B70A  0E36               	movlw	low _input
  5716  00B70C  24F3               	addwf	prodl,w,c
  5717  00B70E  6EF6               	movwf	tblptrl,c
  5718  00B710  0EFC               	movlw	high _input
  5719  00B712  20F4               	addwfc	prodh,w,c
  5720  00B714  6EF7               	movwf	tblptrh,c
  5721  00B716                     	if	1	;There are 3 active tblptr bytes
  5722  00B716  6AF8               	clrf	tblptru,c
  5723  00B718  0E00               	movlw	low (__mediumconst shr (0+16))
  5724  00B71A  22F8               	addwfc	tblptru,f,c
  5725  00B71C                     	endif
  5726  00B71C  0008               	tblrd		*
  5727  00B71E  50F5               	movf	tablat,w,c
  5728  00B720  EC2A  F04D         	call	_putch
  5729                           
  5730                           ;standbyMode.c: 1570: count += 1;
  5731  00B724  4A32               	infsnz	which_drawer@count,f,c
  5732  00B726  2A33               	incf	which_drawer@count+1,f,c
  5733  00B728  D023               	goto	u13310
  5734  00B72A                     L4:
  5735  00B72A  262E               	addwf	which_drawer@sum,f,c
  5736  00B72C  0E00               	movlw	0
  5737  00B72E  222F               	addwfc	which_drawer@sum+1,f,c
  5738                           
  5739                           ;standbyMode.c: 1572: }
  5740                           ;standbyMode.c: 1573: }
  5741  00B730  D775               	goto	l1201
  5742  00B732                     l1216:
  5743                           
  5744                           ;standbyMode.c: 1574: else if (count == 1){
  5745  00B732  0432               	decf	which_drawer@count,w,c
  5746  00B734  1033               	iorwf	which_drawer@count+1,w,c
  5747  00B736  A4D8               	btfss	status,2,c
  5748  00B738  D771               	goto	l1201
  5749                           
  5750                           ;standbyMode.c: 1575: if (keypress < 8 || keypress == 13){
  5751  00B73A  0E07               	movlw	7
  5752  00B73C  6434               	cpfsgt	which_drawer@keypress,c
  5753  00B73E  D004               	goto	u13300
  5754  00B740  0E0D               	movlw	13
  5755  00B742  1834               	xorwf	which_drawer@keypress,w,c
  5756  00B744  A4D8               	btfss	status,2,c
  5757  00B746  D76A               	goto	l1201
  5758  00B748                     u13300:
  5759                           
  5760                           ;standbyMode.c: 1576: putch(input[keypress]);
  5761  00B748  5034               	movf	which_drawer@keypress,w,c
  5762  00B74A  0D01               	mullw	1
  5763  00B74C  0E36               	movlw	low _input
  5764  00B74E  24F3               	addwf	prodl,w,c
  5765  00B750  6EF6               	movwf	tblptrl,c
  5766  00B752  0EFC               	movlw	high _input
  5767  00B754  20F4               	addwfc	prodh,w,c
  5768  00B756  6EF7               	movwf	tblptrh,c
  5769  00B758                     	if	1	;There are 3 active tblptr bytes
  5770  00B758  6AF8               	clrf	tblptru,c
  5771  00B75A  0E00               	movlw	low (__mediumconst shr (0+16))
  5772  00B75C  22F8               	addwfc	tblptru,f,c
  5773  00B75E                     	endif
  5774  00B75E  0008               	tblrd		*
  5775  00B760  50F5               	movf	tablat,w,c
  5776  00B762  EC2A  F04D         	call	_putch
  5777                           
  5778                           ;standbyMode.c: 1577: count += 1;
  5779  00B766  4A32               	infsnz	which_drawer@count,f,c
  5780  00B768  2A33               	incf	which_drawer@count+1,f,c
  5781                           
  5782                           ;standbyMode.c: 1578: if(keypress == 0){
  5783  00B76A  5034               	movf	which_drawer@keypress,w,c
  5784  00B76C  A4D8               	btfss	status,2,c
  5785  00B76E  D002               	goto	l1227
  5786  00B770                     u13310:
  5787                           
  5788                           ;standbyMode.c: 1579: sum += 20;
  5789  00B770  0E14               	movlw	20
  5790  00B772  D7DB               	goto	L4
  5791  00B774                     l1227:
  5792                           
  5793                           ;standbyMode.c: 1581: else {
  5794                           ;standbyMode.c: 1582: sum += keypress;
  5795  00B774  5034               	movf	which_drawer@keypress,w,c
  5796  00B776  D7D9               	goto	L4
  5797  00B778                     l1213:
  5798                           
  5799                           ;standbyMode.c: 1587: else if (keypress == 12){
  5800  00B778  0E0C               	movlw	12
  5801  00B77A  1834               	xorwf	which_drawer@keypress,w,c
  5802  00B77C  A4D8               	btfss	status,2,c
  5803  00B77E  D74E               	goto	l1201
  5804                           
  5805                           ;standbyMode.c: 1588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5806  00B780  0E01               	movlw	1
  5807  00B782  EC16  F04D         	call	_lcdInst
  5808  00B786  0EC3               	movlw	195
  5809  00B788  6E2B               	movwf	??_which_drawer& (0+255),c
  5810  00B78A  0ECD               	movlw	205
  5811  00B78C                     u14737:
  5812  00B78C  2EE8               	decfsz	wreg,f,c
  5813  00B78E  D7FE               	bra	u14737
  5814  00B790  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5815  00B792  D7FC               	bra	u14737
  5816  00B794  F000               	nop	
  5817                           
  5818                           ;standbyMode.c: 1589: printf("Drawer number:");
  5819  00B796  0EBF               	movlw	low STR_113
  5820  00B798  6E0D               	movwf	printf@f,c
  5821  00B79A  0EFD               	movlw	high STR_113
  5822  00B79C  6E0E               	movwf	printf@f+1,c
  5823  00B79E  EC0C  F061         	call	_printf	;wreg free
  5824                           
  5825                           ;standbyMode.c: 1590: lcdInst(0xC0);;
  5826  00B7A2  0EC0               	movlw	192
  5827  00B7A4  EC16  F04D         	call	_lcdInst
  5828                           
  5829                           ;standbyMode.c: 1591: count = 0;
  5830  00B7A8  0E00               	movlw	0
  5831  00B7AA  6E33               	movwf	which_drawer@count+1,c
  5832  00B7AC  0E00               	movlw	0
  5833  00B7AE  6E32               	movwf	which_drawer@count,c
  5834                           
  5835                           ;standbyMode.c: 1592: sum = 0;
  5836  00B7B0  0E00               	movlw	0
  5837  00B7B2  6E2F               	movwf	which_drawer@sum+1,c
  5838  00B7B4  0E00               	movlw	0
  5839  00B7B6  6E2E               	movwf	which_drawer@sum,c
  5840  00B7B8  D731               	goto	l1201
  5841  00B7BA                     l1209:
  5842                           
  5843                           ;standbyMode.c: 1593: }
  5844                           ;standbyMode.c: 1594: }
  5845                           ;standbyMode.c: 1596: if (backCheck == 100){
  5846  00B7BA  0E64               	movlw	100
  5847  00B7BC  1830               	xorwf	which_drawer@backCheck,w,c
  5848  00B7BE  1031               	iorwf	which_drawer@backCheck+1,w,c
  5849  00B7C0  A4D8               	btfss	status,2,c
  5850  00B7C2  D005               	goto	l1232
  5851                           
  5852                           ;standbyMode.c: 1597: return backCheck;
  5853  00B7C4  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5854  00B7C8  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5855                           
  5856                           ;standbyMode.c: 1598: }
  5857  00B7CC  0012               	return	
  5858  00B7CE                     l1232:
  5859                           
  5860                           ;standbyMode.c: 1599: else{
  5861                           ;standbyMode.c: 1600: unsigned int rand = decode_drawer(sum);
  5862  00B7CE  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5863  00B7D2  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5864  00B7D6  ECBE  F052         	call	_decode_drawer	;wreg free
  5865  00B7DA  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5866  00B7DE  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5867                           
  5868                           ;standbyMode.c: 1601: return rand;
  5869  00B7E2  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5870  00B7E6  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5871  00B7EA  0012               	return	
  5872  00B7EC                     __end_of_which_drawer:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           postinc0	equ	0xFEE
  5881                           wreg	equ	0xFE8
  5882                           postdec1	equ	0xFE5
  5883                           plusw1	equ	0xFE3
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           plusw2	equ	0xFDB
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _decode_drawer *****************
  5894 ;; Defined at:
  5895 ;;		line 1461 in file "standbyMode.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  drawer          2    0[COMRAM] unsigned int 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  returnValue     2    4[COMRAM] unsigned int 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  2    0[COMRAM] unsigned int 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:        6 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; This function calls:
  5916 ;;		Nothing
  5917 ;; This function is called by:
  5918 ;;		_which_drawer
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text3
  5923  00A57C                     __ptext3:
  5924                           	opt stack 0
  5925  00A57C                     _decode_drawer:
  5926                           	opt stack 28
  5927                           
  5928                           ;standbyMode.c: 1462: unsigned int returnValue;
  5929                           ;standbyMode.c: 1464: switch(drawer){
  5930                           
  5931                           ;incstack = 0
  5932  00A57C  D03A               	goto	l1182
  5933  00A57E                     
  5934                           ;standbyMode.c: 1467: returnValue = 1;
  5935  00A57E  0E00               	movlw	0
  5936  00A580  6E06               	movwf	decode_drawer@returnValue+1,c
  5937  00A582  0E01               	movlw	1
  5938  00A584  D02F               	goto	L16
  5939  00A586                     
  5940                           ;standbyMode.c: 1472: returnValue = 2;
  5941  00A586  0E00               	movlw	0
  5942  00A588  6E06               	movwf	decode_drawer@returnValue+1,c
  5943  00A58A  0E02               	movlw	2
  5944  00A58C  D02B               	goto	L16
  5945  00A58E                     
  5946                           ;standbyMode.c: 1477: returnValue = 3;
  5947  00A58E  0E00               	movlw	0
  5948  00A590  6E06               	movwf	decode_drawer@returnValue+1,c
  5949  00A592  0E03               	movlw	3
  5950  00A594  D027               	goto	L16
  5951  00A596                     
  5952                           ;standbyMode.c: 1482: returnValue = 7;
  5953  00A596  0E00               	movlw	0
  5954  00A598  6E06               	movwf	decode_drawer@returnValue+1,c
  5955  00A59A  0E07               	movlw	7
  5956  00A59C  D023               	goto	L16
  5957  00A59E                     
  5958                           ;standbyMode.c: 1487: returnValue = 8;
  5959  00A59E  0E00               	movlw	0
  5960  00A5A0  6E06               	movwf	decode_drawer@returnValue+1,c
  5961  00A5A2  0E08               	movlw	8
  5962  00A5A4  D01F               	goto	L16
  5963  00A5A6                     
  5964                           ;standbyMode.c: 1492: returnValue = 9;
  5965  00A5A6  0E00               	movlw	0
  5966  00A5A8  6E06               	movwf	decode_drawer@returnValue+1,c
  5967  00A5AA  0E09               	movlw	9
  5968  00A5AC  D01B               	goto	L16
  5969  00A5AE                     
  5970                           ;standbyMode.c: 1497: returnValue = 10;
  5971  00A5AE  0E00               	movlw	0
  5972  00A5B0  6E06               	movwf	decode_drawer@returnValue+1,c
  5973  00A5B2  0E0A               	movlw	10
  5974  00A5B4  D017               	goto	L16
  5975  00A5B6                     
  5976                           ;standbyMode.c: 1502: returnValue = 11;
  5977  00A5B6  0E00               	movlw	0
  5978  00A5B8  6E06               	movwf	decode_drawer@returnValue+1,c
  5979  00A5BA  0E0B               	movlw	11
  5980  00A5BC  D013               	goto	L16
  5981  00A5BE                     
  5982                           ;standbyMode.c: 1507: returnValue = 12;
  5983  00A5BE  0E00               	movlw	0
  5984  00A5C0  6E06               	movwf	decode_drawer@returnValue+1,c
  5985  00A5C2  0E0C               	movlw	12
  5986  00A5C4  D00F               	goto	L16
  5987  00A5C6                     
  5988                           ;standbyMode.c: 1512: returnValue = 13;
  5989  00A5C6  0E00               	movlw	0
  5990  00A5C8  6E06               	movwf	decode_drawer@returnValue+1,c
  5991  00A5CA  0E0D               	movlw	13
  5992  00A5CC  D00B               	goto	L16
  5993  00A5CE                     
  5994                           ;standbyMode.c: 1517: returnValue = 14;
  5995  00A5CE  0E00               	movlw	0
  5996  00A5D0  6E06               	movwf	decode_drawer@returnValue+1,c
  5997  00A5D2  0E0E               	movlw	14
  5998  00A5D4  D007               	goto	L16
  5999  00A5D6                     
  6000                           ;standbyMode.c: 1522: returnValue = 15;
  6001  00A5D6  0E00               	movlw	0
  6002  00A5D8  6E06               	movwf	decode_drawer@returnValue+1,c
  6003  00A5DA  0E0F               	movlw	15
  6004  00A5DC  D003               	goto	L16
  6005  00A5DE                     
  6006                           ;standbyMode.c: 1527: returnValue = 16;
  6007  00A5DE  0E00               	movlw	0
  6008  00A5E0  6E06               	movwf	decode_drawer@returnValue+1,c
  6009  00A5E2  0E10               	movlw	16
  6010  00A5E4                     L16:
  6011  00A5E4  6E05               	movwf	decode_drawer@returnValue,c
  6012                           
  6013                           ;standbyMode.c: 1528: break;
  6014  00A5E6  D036               	goto	l1184
  6015  00A5E8                     l1197:
  6016                           
  6017                           ;standbyMode.c: 1531: returnValue = drawer;
  6018  00A5E8  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  6019  00A5EC  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  6020                           
  6021                           ;standbyMode.c: 1533: }
  6022                           
  6023                           ;standbyMode.c: 1532: break;
  6024  00A5F0  D031               	goto	l1184
  6025  00A5F2                     l1182:
  6026  00A5F2  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  6027  00A5F6  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  6028                           
  6029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6030                           ; Switch size 1, requested type "space"
  6031                           ; Number of cases is 1, Range of values is 0 to 0
  6032                           ; switch strategies available:
  6033                           ; Name         Instructions Cycles
  6034                           ; simple_byte            4     3 (average)
  6035                           ;	Chosen strategy is simple_byte
  6036  00A5FA  5004               	movf	??_decode_drawer+1,w,c
  6037  00A5FC  0A00               	xorlw	0	; case 0
  6038  00A5FE  A4D8               	btfss	status,2,c
  6039  00A600  D7F3               	goto	l1197
  6040                           
  6041                           ; Switch size 1, requested type "space"
  6042                           ; Number of cases is 13, Range of values is 1 to 40
  6043                           ; switch strategies available:
  6044                           ; Name         Instructions Cycles
  6045                           ; simple_byte           40    21 (average)
  6046                           ;	Chosen strategy is simple_byte
  6047  00A602  5003               	movf	??_decode_drawer,w,c
  6048  00A604  0A01               	xorlw	1	; case 1
  6049  00A606  B4D8               	btfsc	status,2,c
  6050  00A608  D7BE               	goto	l1185
  6051  00A60A  0A03               	xorlw	3	; case 2
  6052  00A60C  B4D8               	btfsc	status,2,c
  6053  00A60E  D7BF               	goto	l1186
  6054  00A610  0A0A               	xorlw	10	; case 8
  6055  00A612  B4D8               	btfsc	status,2,c
  6056  00A614  D7C0               	goto	l1187
  6057  00A616  0A01               	xorlw	1	; case 9
  6058  00A618  B4D8               	btfsc	status,2,c
  6059  00A61A  D7C1               	goto	l1188
  6060  00A61C  0A03               	xorlw	3	; case 10
  6061  00A61E  B4D8               	btfsc	status,2,c
  6062  00A620  D7C2               	goto	l1189
  6063  00A622  0A1E               	xorlw	30	; case 20
  6064  00A624  B4D8               	btfsc	status,2,c
  6065  00A626  D7AB               	goto	l1183
  6066  00A628  0A01               	xorlw	1	; case 21
  6067  00A62A  B4D8               	btfsc	status,2,c
  6068  00A62C  D7C8               	goto	l1192
  6069  00A62E  0A03               	xorlw	3	; case 22
  6070  00A630  B4D8               	btfsc	status,2,c
  6071  00A632  D7C9               	goto	l1193
  6072  00A634  0A0E               	xorlw	14	; case 24
  6073  00A636  B4D8               	btfsc	status,2,c
  6074  00A638  D7CA               	goto	l1194
  6075  00A63A  0A01               	xorlw	1	; case 25
  6076  00A63C  B4D8               	btfsc	status,2,c
  6077  00A63E  D7CB               	goto	l1195
  6078  00A640  0A03               	xorlw	3	; case 26
  6079  00A642  B4D8               	btfsc	status,2,c
  6080  00A644  D7CC               	goto	l1196
  6081  00A646  0A3B               	xorlw	59	; case 33
  6082  00A648  B4D8               	btfsc	status,2,c
  6083  00A64A  D7B1               	goto	l1190
  6084  00A64C  0A09               	xorlw	9	; case 40
  6085  00A64E  B4D8               	btfsc	status,2,c
  6086  00A650  D7B2               	goto	l1191
  6087  00A652  D7CA               	goto	l1197
  6088  00A654                     l1184:
  6089                           
  6090                           ;standbyMode.c: 1534: return returnValue;
  6091  00A654  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  6092  00A658  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  6093  00A65C  0012               	return		;funcret
  6094  00A65E                     __end_of_decode_drawer:
  6095                           	opt stack 0
  6096                           tblptru	equ	0xFF8
  6097                           tblptrh	equ	0xFF7
  6098                           tblptrl	equ	0xFF6
  6099                           tablat	equ	0xFF5
  6100                           prodh	equ	0xFF4
  6101                           prodl	equ	0xFF3
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           plusw1	equ	0xFE3
  6106                           fsr1l	equ	0xFE1
  6107                           indf2	equ	0xFDF
  6108                           postinc2	equ	0xFDE
  6109                           postdec2	equ	0xFDD
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _viewLogs *****************
  6116 ;; Defined at:
  6117 ;;		line 753 in file "standbyMode.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  keypress2       1   92[COMRAM] unsigned char 
  6122 ;;  logView         2   89[COMRAM] unsigned int 
  6123 ;;  returnVal       2   87[COMRAM] unsigned int 
  6124 ;;  checkLog        2   85[COMRAM] unsigned int 
  6125 ;;  logNumber       1   91[COMRAM] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  2   81[COMRAM] unsigned int 
  6128 ;; Registers used:
  6129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:       12 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    4
  6142 ;; This function calls:
  6143 ;;		_displayLogs
  6144 ;;		_lcdInst
  6145 ;;		_printf
  6146 ;;		_putch
  6147 ;;		_readEEPROM
  6148 ;;		_verifyKeypress
  6149 ;; This function is called by:
  6150 ;;		_standbyMode
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text4
  6155  00BF2C                     __ptext4:
  6156                           	opt stack 0
  6157  00BF2C                     _viewLogs:
  6158                           	opt stack 25
  6159                           
  6160                           ;standbyMode.c: 755: unsigned char logNumber = readEEPROM(250);
  6161                           
  6162                           ;incstack = 0
  6163  00BF2C  0EFA               	movlw	250
  6164  00BF2E  EC20  F04D         	call	_readEEPROM
  6165  00BF32  6E5C               	movwf	viewLogs@logNumber,c
  6166                           
  6167                           ;standbyMode.c: 756: unsigned int logView = 0;
  6168  00BF34  0E00               	movlw	0
  6169  00BF36  6E5B               	movwf	viewLogs@logView+1,c
  6170  00BF38  0E00               	movlw	0
  6171  00BF3A  6E5A               	movwf	viewLogs@logView,c
  6172                           
  6173                           ;standbyMode.c: 757: unsigned int checkLog = 0;
  6174  00BF3C  0E00               	movlw	0
  6175  00BF3E  6E57               	movwf	viewLogs@checkLog+1,c
  6176  00BF40  0E00               	movlw	0
  6177  00BF42  6E56               	movwf	viewLogs@checkLog,c
  6178                           
  6179                           ;standbyMode.c: 758: unsigned int returnVal = 0;
  6180  00BF44  0E00               	movlw	0
  6181  00BF46  6E59               	movwf	viewLogs@returnVal+1,c
  6182  00BF48  0E00               	movlw	0
  6183  00BF4A  6E58               	movwf	viewLogs@returnVal,c
  6184                           
  6185                           ;standbyMode.c: 760: if (logNumber == 0){
  6186  00BF4C  505C               	movf	viewLogs@logNumber,w,c
  6187  00BF4E  A4D8               	btfss	status,2,c
  6188  00BF50  D02B               	goto	l923
  6189                           
  6190                           ;standbyMode.c: 761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6191  00BF52  0E01               	movlw	1
  6192  00BF54  EC16  F04D         	call	_lcdInst
  6193  00BF58  0EC3               	movlw	195
  6194  00BF5A  6E54               	movwf	??_viewLogs& (0+255),c
  6195  00BF5C  0ECD               	movlw	205
  6196  00BF5E                     u14747:
  6197  00BF5E  2EE8               	decfsz	wreg,f,c
  6198  00BF60  D7FE               	bra	u14747
  6199  00BF62  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6200  00BF64  D7FC               	bra	u14747
  6201  00BF66  F000               	nop	
  6202                           
  6203                           ;standbyMode.c: 762: printf("No logs");
  6204  00BF68  0E8F               	movlw	low STR_76
  6205  00BF6A  6E0D               	movwf	printf@f,c
  6206  00BF6C  0EFF               	movlw	high STR_76
  6207  00BF6E  6E0E               	movwf	printf@f+1,c
  6208  00BF70  EC0C  F061         	call	_printf	;wreg free
  6209                           
  6210                           ;standbyMode.c: 763: lcdInst(0xC0);;
  6211  00BF74  0EC0               	movlw	192
  6212  00BF76  EC16  F04D         	call	_lcdInst
  6213                           
  6214                           ;standbyMode.c: 764: printf("available.");
  6215  00BF7A  0EE7               	movlw	low STR_77
  6216  00BF7C  6E0D               	movwf	printf@f,c
  6217  00BF7E  0EFE               	movlw	high STR_77
  6218  00BF80  6E0E               	movwf	printf@f+1,c
  6219  00BF82  EC0C  F061         	call	_printf	;wreg free
  6220                           
  6221                           ;standbyMode.c: 765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6222  00BF86  0E66               	movlw	102
  6223  00BF88  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6224  00BF8A  0E76               	movlw	118
  6225  00BF8C  6E54               	movwf	??_viewLogs& (0+255),c
  6226  00BF8E  0EC1               	movlw	193
  6227  00BF90                     u14757:
  6228  00BF90  2EE8               	decfsz	wreg,f,c
  6229  00BF92  D7FE               	bra	u14757
  6230  00BF94  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6231  00BF96  D7FC               	bra	u14757
  6232  00BF98  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6233  00BF9A  D7FA               	bra	u14757
  6234  00BF9C  F000               	nop	
  6235                           
  6236                           ;standbyMode.c: 766: return 14;
  6237  00BF9E  0E00               	movlw	0
  6238  00BFA0  6E53               	movwf	?_viewLogs+1,c
  6239  00BFA2  0E0E               	movlw	14
  6240  00BFA4  6E52               	movwf	?_viewLogs,c
  6241                           
  6242                           ;standbyMode.c: 767: }
  6243  00BFA6  0012               	return	
  6244  00BFA8                     l923:
  6245                           
  6246                           ;standbyMode.c: 768: else {
  6247                           ;standbyMode.c: 769: if (logNumber == 1){
  6248  00BFA8  045C               	decf	viewLogs@logNumber,w,c
  6249  00BFAA  A4D8               	btfss	status,2,c
  6250  00BFAC  D053               	goto	l926
  6251                           
  6252                           ;standbyMode.c: 770: logView = 1;
  6253  00BFAE  0E00               	movlw	0
  6254  00BFB0  6E5B               	movwf	viewLogs@logView+1,c
  6255  00BFB2  0E01               	movlw	1
  6256  00BFB4  6E5A               	movwf	viewLogs@logView,c
  6257                           
  6258                           ;standbyMode.c: 772: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6259  00BFB6  0E01               	movlw	1
  6260  00BFB8  EC16  F04D         	call	_lcdInst
  6261  00BFBC  0EC3               	movlw	195
  6262  00BFBE  6E54               	movwf	??_viewLogs& (0+255),c
  6263  00BFC0  0ECD               	movlw	205
  6264  00BFC2                     u14767:
  6265  00BFC2  2EE8               	decfsz	wreg,f,c
  6266  00BFC4  D7FE               	bra	u14767
  6267  00BFC6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6268  00BFC8  D7FC               	bra	u14767
  6269  00BFCA  F000               	nop	
  6270                           
  6271                           ;standbyMode.c: 773: printf("1 previous log");
  6272  00BFCC  0EDD               	movlw	low STR_78
  6273  00BFCE  6E0D               	movwf	printf@f,c
  6274  00BFD0  0EFD               	movlw	high STR_78
  6275  00BFD2  6E0E               	movwf	printf@f+1,c
  6276  00BFD4  EC0C  F061         	call	_printf	;wreg free
  6277                           
  6278                           ;standbyMode.c: 774: lcdInst(0xC0);;
  6279  00BFD8  0EC0               	movlw	192
  6280  00BFDA  EC16  F04D         	call	_lcdInst
  6281                           
  6282                           ;standbyMode.c: 775: printf("available.");
  6283  00BFDE  0EE7               	movlw	low STR_77
  6284  00BFE0  6E0D               	movwf	printf@f,c
  6285  00BFE2  0EFE               	movlw	high STR_77
  6286  00BFE4  6E0E               	movwf	printf@f+1,c
  6287  00BFE6  EC0C  F061         	call	_printf	;wreg free
  6288                           
  6289                           ;standbyMode.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6290  00BFEA  0E66               	movlw	102
  6291  00BFEC  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6292  00BFEE  0E76               	movlw	118
  6293  00BFF0  6E54               	movwf	??_viewLogs& (0+255),c
  6294  00BFF2  0EC1               	movlw	193
  6295  00BFF4                     u14777:
  6296  00BFF4  2EE8               	decfsz	wreg,f,c
  6297  00BFF6  D7FE               	bra	u14777
  6298  00BFF8  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6299  00BFFA  D7FC               	bra	u14777
  6300  00BFFC  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6301  00BFFE  D7FA               	bra	u14777
  6302  00C000  F000               	nop	
  6303                           
  6304                           ;standbyMode.c: 778: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6305  00C002  0E01               	movlw	1
  6306  00C004  EC16  F04D         	call	_lcdInst
  6307  00C008  0EC3               	movlw	195
  6308  00C00A  6E54               	movwf	??_viewLogs& (0+255),c
  6309  00C00C  0ECD               	movlw	205
  6310  00C00E                     u14787:
  6311  00C00E  2EE8               	decfsz	wreg,f,c
  6312  00C010  D7FE               	bra	u14787
  6313  00C012  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6314  00C014  D7FC               	bra	u14787
  6315  00C016  F000               	nop	
  6316                           
  6317                           ;standbyMode.c: 779: printf("Press any key to");
  6318  00C018  0EDE               	movlw	low STR_80
  6319  00C01A  6E0D               	movwf	printf@f,c
  6320  00C01C  0EFC               	movlw	high STR_80
  6321  00C01E  6E0E               	movwf	printf@f+1,c
  6322  00C020  EC0C  F061         	call	_printf	;wreg free
  6323                           
  6324                           ;standbyMode.c: 780: lcdInst(0xC0);;
  6325  00C024  0EC0               	movlw	192
  6326  00C026  EC16  F04D         	call	_lcdInst
  6327                           
  6328                           ;standbyMode.c: 781: printf("move forward.");
  6329  00C02A  0E7F               	movlw	low STR_81
  6330  00C02C  6E0D               	movwf	printf@f,c
  6331  00C02E  0EFE               	movlw	high STR_81
  6332  00C030  6E0E               	movwf	printf@f+1,c
  6333  00C032  EC0C  F061         	call	_printf	;wreg free
  6334                           
  6335                           ;standbyMode.c: 782: _delay((unsigned long)((500)*(40000000/4000.0)));
  6336  00C036  0E1A               	movlw	26
  6337  00C038  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6338  00C03A  0E5E               	movlw	94
  6339  00C03C  6E54               	movwf	??_viewLogs& (0+255),c
  6340  00C03E  0E6E               	movlw	110
  6341  00C040                     u14797:
  6342  00C040  2EE8               	decfsz	wreg,f,c
  6343  00C042  D7FE               	bra	u14797
  6344  00C044  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6345  00C046  D7FC               	bra	u14797
  6346  00C048  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6347  00C04A  D7FA               	bra	u14797
  6348  00C04C  D000               	nop2	
  6349  00C04E                     
  6350                           ;standbyMode.c: 785: continue;
  6351  00C04E  B281               	btfsc	3969,1,c	;volatile
  6352  00C050  D0D4               	goto	u11620
  6353  00C052  D7FD               	goto	l928
  6354  00C054                     l926:
  6355                           
  6356                           ;standbyMode.c: 788: else {
  6357                           ;standbyMode.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6358  00C054  0E01               	movlw	1
  6359  00C056  EC16  F04D         	call	_lcdInst
  6360  00C05A  0EC3               	movlw	195
  6361  00C05C  6E54               	movwf	??_viewLogs& (0+255),c
  6362  00C05E  0ECD               	movlw	205
  6363  00C060                     u14807:
  6364  00C060  2EE8               	decfsz	wreg,f,c
  6365  00C062  D7FE               	bra	u14807
  6366  00C064  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6367  00C066  D7FC               	bra	u14807
  6368  00C068  F000               	nop	
  6369                           
  6370                           ;standbyMode.c: 790: printf("%i previous logs", logNumber);
  6371  00C06A  0EEF               	movlw	low STR_82
  6372  00C06C  6E0D               	movwf	printf@f,c
  6373  00C06E  0EFC               	movlw	high STR_82
  6374  00C070  6E0E               	movwf	printf@f+1,c
  6375  00C072  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  6376  00C076  6A10               	clrf	?_printf+3,c
  6377  00C078  EC0C  F061         	call	_printf	;wreg free
  6378                           
  6379                           ;standbyMode.c: 791: lcdInst(0xC0);;
  6380  00C07C  0EC0               	movlw	192
  6381  00C07E  EC16  F04D         	call	_lcdInst
  6382                           
  6383                           ;standbyMode.c: 792: printf("available.");
  6384  00C082  0EE7               	movlw	low STR_77
  6385  00C084  6E0D               	movwf	printf@f,c
  6386  00C086  0EFE               	movlw	high STR_77
  6387  00C088  6E0E               	movwf	printf@f+1,c
  6388  00C08A  EC0C  F061         	call	_printf	;wreg free
  6389                           
  6390                           ;standbyMode.c: 793: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6391  00C08E  0E66               	movlw	102
  6392  00C090  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6393  00C092  0E76               	movlw	118
  6394  00C094  6E54               	movwf	??_viewLogs& (0+255),c
  6395  00C096  0EC1               	movlw	193
  6396  00C098                     u14817:
  6397  00C098  2EE8               	decfsz	wreg,f,c
  6398  00C09A  D7FE               	bra	u14817
  6399  00C09C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6400  00C09E  D7FC               	bra	u14817
  6401  00C0A0  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6402  00C0A2  D7FA               	bra	u14817
  6403  00C0A4  F000               	nop	
  6404                           
  6405                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6406  00C0A6  0E01               	movlw	1
  6407  00C0A8  EC16  F04D         	call	_lcdInst
  6408  00C0AC  0EC3               	movlw	195
  6409  00C0AE  6E54               	movwf	??_viewLogs& (0+255),c
  6410  00C0B0  0ECD               	movlw	205
  6411  00C0B2                     u14827:
  6412  00C0B2  2EE8               	decfsz	wreg,f,c
  6413  00C0B4  D7FE               	bra	u14827
  6414  00C0B6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6415  00C0B8  D7FC               	bra	u14827
  6416  00C0BA  F000               	nop	
  6417                           
  6418                           ;standbyMode.c: 795: printf("Please input log");
  6419  00C0BC  0EBC               	movlw	low STR_84
  6420  00C0BE  6E0D               	movwf	printf@f,c
  6421  00C0C0  0EFC               	movlw	high STR_84
  6422  00C0C2  6E0E               	movwf	printf@f+1,c
  6423  00C0C4  EC0C  F061         	call	_printf	;wreg free
  6424                           
  6425                           ;standbyMode.c: 796: lcdInst(0xC0);;
  6426  00C0C8  0EC0               	movlw	192
  6427  00C0CA  EC16  F04D         	call	_lcdInst
  6428                           
  6429                           ;standbyMode.c: 797: printf("number: ");
  6430  00C0CE  0E5C               	movlw	low STR_85
  6431  00C0D0  6E0D               	movwf	printf@f,c
  6432  00C0D2  0EFF               	movlw	high STR_85
  6433  00C0D4  6E0E               	movwf	printf@f+1,c
  6434  00C0D6  EC0C  F061         	call	_printf	;wreg free
  6435  00C0DA                     
  6436                           ;standbyMode.c: 800: while(PORTBbits.RB1 == 0){ continue; }
  6437  00C0DA  A281               	btfss	3969,1,c	;volatile
  6438  00C0DC  D7FE               	goto	l931
  6439                           
  6440                           ;standbyMode.c: 801: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  6441  00C0DE  3881               	swapf	3969,w,c	;volatile
  6442  00C0E0  0B0F               	andlw	15
  6443  00C0E2  0B0F               	andlw	15
  6444  00C0E4  6E5D               	movwf	viewLogs@keypress2,c
  6445  00C0E6  B281               	btfsc	3969,1,c	;volatile
  6446  00C0E8  D7FE               	goto	l936
  6447                           
  6448                           ;standbyMode.c: 804: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  6449  00C0EA  505D               	movf	viewLogs@keypress2,w,c
  6450  00C0EC  B4D8               	btfsc	status,2,c
  6451  00C0EE  D00B               	goto	u11590
  6452  00C0F0  045D               	decf	viewLogs@keypress2,w,c
  6453  00C0F2  B4D8               	btfsc	status,2,c
  6454  00C0F4  D008               	goto	u11590
  6455  00C0F6  0E02               	movlw	2
  6456  00C0F8  185D               	xorwf	viewLogs@keypress2,w,c
  6457  00C0FA  B4D8               	btfsc	status,2,c
  6458  00C0FC  D004               	goto	u11590
  6459  00C0FE  0E04               	movlw	4
  6460  00C100  185D               	xorwf	viewLogs@keypress2,w,c
  6461  00C102  A4D8               	btfss	status,2,c
  6462  00C104  D7EA               	goto	l931
  6463  00C106                     u11590:
  6464                           
  6465                           ;standbyMode.c: 805: checkLog = verifyKeypress(logNumber, keypress2);
  6466  00C106  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  6467  00C10A  6A02               	clrf	verifyKeypress@keypress+1,c
  6468  00C10C  505C               	movf	viewLogs@logNumber,w,c
  6469  00C10E  EC39  F04E         	call	_verifyKeypress
  6470  00C112  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  6471  00C116  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  6472                           
  6473                           ;standbyMode.c: 806: if (checkLog == 1){
  6474  00C11A  0456               	decf	viewLogs@checkLog,w,c
  6475  00C11C  1057               	iorwf	viewLogs@checkLog+1,w,c
  6476  00C11E  A4D8               	btfss	status,2,c
  6477  00C120  D7DC               	goto	l931
  6478                           
  6479                           ;standbyMode.c: 807: putch(keys[keypress2]);
  6480  00C122  505D               	movf	viewLogs@keypress2,w,c
  6481  00C124  0D01               	mullw	1
  6482  00C126  0E25               	movlw	low _keys
  6483  00C128  24F3               	addwf	prodl,w,c
  6484  00C12A  6EF6               	movwf	tblptrl,c
  6485  00C12C  0EFC               	movlw	high _keys
  6486  00C12E  20F4               	addwfc	prodh,w,c
  6487  00C130  6EF7               	movwf	tblptrh,c
  6488  00C132                     	if	1	;There are 3 active tblptr bytes
  6489  00C132  6AF8               	clrf	tblptru,c
  6490  00C134  0E00               	movlw	low (__mediumconst shr (0+16))
  6491  00C136  22F8               	addwfc	tblptru,f,c
  6492  00C138                     	endif
  6493  00C138  0008               	tblrd		*
  6494  00C13A  50F5               	movf	tablat,w,c
  6495  00C13C  EC2A  F04D         	call	_putch
  6496                           
  6497                           ;standbyMode.c: 808: if (keypress2 == 4){
  6498  00C140  0E04               	movlw	4
  6499  00C142  185D               	xorwf	viewLogs@keypress2,w,c
  6500  00C144  A4D8               	btfss	status,2,c
  6501  00C146  D004               	goto	l942
  6502                           
  6503                           ;standbyMode.c: 809: logView = keypress2;
  6504  00C148  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  6505  00C14C  6A5B               	clrf	viewLogs@logView+1,c
  6506                           
  6507                           ;standbyMode.c: 810: }
  6508  00C14E  D006               	goto	l943
  6509  00C150                     l942:
  6510                           
  6511                           ;standbyMode.c: 811: else{
  6512                           ;standbyMode.c: 812: logView = keypress2 + 1;
  6513  00C150  0E01               	movlw	1
  6514  00C152  245D               	addwf	viewLogs@keypress2,w,c
  6515  00C154  6E5A               	movwf	viewLogs@logView,c
  6516  00C156  6A5B               	clrf	viewLogs@logView+1,c
  6517  00C158  0E00               	movlw	0
  6518  00C15A  225B               	addwfc	viewLogs@logView+1,f,c
  6519  00C15C                     l943:
  6520                           
  6521                           ;standbyMode.c: 813: }
  6522                           ;standbyMode.c: 814: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6523  00C15C  0E33               	movlw	51
  6524  00C15E  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6525  00C160  0EBB               	movlw	187
  6526  00C162  6E54               	movwf	??_viewLogs& (0+255),c
  6527  00C164  0EE0               	movlw	224
  6528  00C166                     u14837:
  6529  00C166  2EE8               	decfsz	wreg,f,c
  6530  00C168  D7FE               	bra	u14837
  6531  00C16A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6532  00C16C  D7FC               	bra	u14837
  6533  00C16E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6534  00C170  D7FA               	bra	u14837
  6535                           
  6536                           ;standbyMode.c: 816: }
  6537                           ;standbyMode.c: 817: }
  6538                           ;standbyMode.c: 818: }
  6539                           ;standbyMode.c: 820: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6540                           
  6541                           ;standbyMode.c: 815: break;
  6542  00C172  0E01               	movlw	1
  6543  00C174  EC16  F04D         	call	_lcdInst
  6544  00C178  0EC3               	movlw	195
  6545  00C17A  6E54               	movwf	??_viewLogs& (0+255),c
  6546  00C17C  0ECD               	movlw	205
  6547  00C17E                     u14847:
  6548  00C17E  2EE8               	decfsz	wreg,f,c
  6549  00C180  D7FE               	bra	u14847
  6550  00C182  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6551  00C184  D7FC               	bra	u14847
  6552  00C186  F000               	nop	
  6553                           
  6554                           ;standbyMode.c: 821: printf("Great!");
  6555  00C188  0EA6               	movlw	low STR_86
  6556  00C18A  6E0D               	movwf	printf@f,c
  6557  00C18C  0EFF               	movlw	high STR_86
  6558  00C18E  6E0E               	movwf	printf@f+1,c
  6559  00C190  EC0C  F061         	call	_printf	;wreg free
  6560                           
  6561                           ;standbyMode.c: 822: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6562  00C194  0E33               	movlw	51
  6563  00C196  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6564  00C198  0EBB               	movlw	187
  6565  00C19A  6E54               	movwf	??_viewLogs& (0+255),c
  6566  00C19C  0EE0               	movlw	224
  6567  00C19E                     u14857:
  6568  00C19E  2EE8               	decfsz	wreg,f,c
  6569  00C1A0  D7FE               	bra	u14857
  6570  00C1A2  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6571  00C1A4  D7FC               	bra	u14857
  6572  00C1A6  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6573  00C1A8  D7FA               	bra	u14857
  6574                           
  6575                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6576  00C1AA  0E01               	movlw	1
  6577  00C1AC  EC16  F04D         	call	_lcdInst
  6578  00C1B0  0EC3               	movlw	195
  6579  00C1B2  6E54               	movwf	??_viewLogs& (0+255),c
  6580  00C1B4  0ECD               	movlw	205
  6581  00C1B6                     u14867:
  6582  00C1B6  2EE8               	decfsz	wreg,f,c
  6583  00C1B8  D7FE               	bra	u14867
  6584  00C1BA  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6585  00C1BC  D7FC               	bra	u14867
  6586  00C1BE  F000               	nop	
  6587                           
  6588                           ;standbyMode.c: 824: printf("Press any key to");
  6589  00C1C0  0EDE               	movlw	low STR_80
  6590  00C1C2  6E0D               	movwf	printf@f,c
  6591  00C1C4  0EFC               	movlw	high STR_80
  6592  00C1C6  6E0E               	movwf	printf@f+1,c
  6593  00C1C8  EC0C  F061         	call	_printf	;wreg free
  6594                           
  6595                           ;standbyMode.c: 825: lcdInst(0xC0);;
  6596  00C1CC  0EC0               	movlw	192
  6597  00C1CE  EC16  F04D         	call	_lcdInst
  6598                           
  6599                           ;standbyMode.c: 826: printf("move forward.");
  6600  00C1D2  0E7F               	movlw	low STR_81
  6601  00C1D4  6E0D               	movwf	printf@f,c
  6602  00C1D6  0EFE               	movlw	high STR_81
  6603  00C1D8  6E0E               	movwf	printf@f+1,c
  6604  00C1DA  EC0C  F061         	call	_printf	;wreg free
  6605                           
  6606                           ;standbyMode.c: 827: _delay((unsigned long)((500)*(40000000/4000.0)));
  6607  00C1DE  0E1A               	movlw	26
  6608  00C1E0  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6609  00C1E2  0E5E               	movlw	94
  6610  00C1E4  6E54               	movwf	??_viewLogs& (0+255),c
  6611  00C1E6  0E6E               	movlw	110
  6612  00C1E8                     u14877:
  6613  00C1E8  2EE8               	decfsz	wreg,f,c
  6614  00C1EA  D7FE               	bra	u14877
  6615  00C1EC  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6616  00C1EE  D7FC               	bra	u14877
  6617  00C1F0  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6618  00C1F2  D7FA               	bra	u14877
  6619  00C1F4  D000               	nop2	
  6620  00C1F6                     
  6621                           ;standbyMode.c: 830: continue;
  6622  00C1F6  A281               	btfss	3969,1,c	;volatile
  6623  00C1F8  D7FE               	goto	l947
  6624  00C1FA                     u11620:
  6625                           
  6626                           ;standbyMode.c: 831: }
  6627                           ;standbyMode.c: 832: }
  6628                           ;standbyMode.c: 833: returnVal = displayLogs(logView);
  6629  00C1FA  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  6630  00C1FE  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  6631  00C202  EC9E  F065         	call	_displayLogs	;wreg free
  6632  00C206  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  6633  00C20A  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  6634                           
  6635                           ;standbyMode.c: 834: return returnVal;
  6636  00C20E  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  6637  00C212  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  6638  00C216  0012               	return	
  6639  00C218                     __end_of_viewLogs:
  6640                           	opt stack 0
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           postinc0	equ	0xFEE
  6648                           wreg	equ	0xFE8
  6649                           postdec1	equ	0xFE5
  6650                           plusw1	equ	0xFE3
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           plusw2	equ	0xFDB
  6656                           fsr2h	equ	0xFDA
  6657                           fsr2l	equ	0xFD9
  6658                           status	equ	0xFD8
  6659                           
  6660 ;; *************** function _verifyKeypress *****************
  6661 ;; Defined at:
  6662 ;;		line 739 in file "standbyMode.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  logNumber       1    wreg     unsigned char 
  6665 ;;  keypress        2    0[COMRAM] unsigned int 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  logNumber       1    4[COMRAM] unsigned char 
  6668 ;;  i               2    7[COMRAM] unsigned int 
  6669 ;;  returnVal       2    5[COMRAM] unsigned int 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  2    0[COMRAM] unsigned int 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6679 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6680 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6682 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;Total ram usage:        9 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; This function calls:
  6686 ;;		Nothing
  6687 ;; This function is called by:
  6688 ;;		_viewLogs
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text5
  6693  009C72                     __ptext5:
  6694                           	opt stack 0
  6695  009C72                     _verifyKeypress:
  6696                           	opt stack 28
  6697                           
  6698                           ;incstack = 0
  6699                           ;verifyKeypress@logNumber stored from wreg
  6700  009C72  6E05               	movwf	verifyKeypress@logNumber,c
  6701                           
  6702                           ;standbyMode.c: 740: unsigned int i = 0;
  6703  009C74  0E00               	movlw	0
  6704  009C76  6E09               	movwf	verifyKeypress@i+1,c
  6705  009C78  0E00               	movlw	0
  6706  009C7A  6E08               	movwf	verifyKeypress@i,c
  6707                           
  6708                           ;standbyMode.c: 741: unsigned int returnVal = 0;
  6709  009C7C  0E00               	movlw	0
  6710  009C7E  6E07               	movwf	verifyKeypress@returnVal+1,c
  6711  009C80  0E00               	movlw	0
  6712  009C82  6E06               	movwf	verifyKeypress@returnVal,c
  6713                           
  6714                           ;standbyMode.c: 743: for (i=0; i<logNumber; i++){
  6715  009C84  0E00               	movlw	0
  6716  009C86  6E09               	movwf	verifyKeypress@i+1,c
  6717  009C88  0E00               	movlw	0
  6718  009C8A  6E08               	movwf	verifyKeypress@i,c
  6719  009C8C  D00D               	goto	l916
  6720  009C8E                     
  6721                           ;standbyMode.c: 744: if (keypress == i){
  6722  009C8E  5008               	movf	verifyKeypress@i,w,c
  6723  009C90  1801               	xorwf	verifyKeypress@keypress,w,c
  6724  009C92  E108               	bnz	l7618
  6725  009C94  5009               	movf	verifyKeypress@i+1,w,c
  6726  009C96  1802               	xorwf	verifyKeypress@keypress+1,w,c
  6727  009C98  A4D8               	btfss	status,2,c
  6728  009C9A  D004               	goto	l918
  6729                           
  6730                           ;standbyMode.c: 745: returnVal = 1;
  6731  009C9C  0E00               	movlw	0
  6732  009C9E  6E07               	movwf	verifyKeypress@returnVal+1,c
  6733  009CA0  0E01               	movlw	1
  6734  009CA2  6E06               	movwf	verifyKeypress@returnVal,c
  6735  009CA4                     l918:
  6736  009CA4                     l7618:
  6737  009CA4  4A08               	infsnz	verifyKeypress@i,f,c
  6738  009CA6  2A09               	incf	verifyKeypress@i+1,f,c
  6739  009CA8                     l916:
  6740  009CA8  5005               	movf	verifyKeypress@logNumber,w,c
  6741  009CAA  6E03               	movwf	??_verifyKeypress& (0+255),c
  6742  009CAC  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  6743  009CAE  5003               	movf	??_verifyKeypress,w,c
  6744  009CB0  5C08               	subwf	verifyKeypress@i,w,c
  6745  009CB2  5004               	movf	??_verifyKeypress+1,w,c
  6746  009CB4  5809               	subwfb	verifyKeypress@i+1,w,c
  6747  009CB6  A0D8               	btfss	status,0,c
  6748  009CB8  D7EA               	goto	l917
  6749                           
  6750                           ;standbyMode.c: 746: }
  6751                           ;standbyMode.c: 747: }
  6752                           ;standbyMode.c: 748: return returnVal;
  6753  009CBA  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  6754  009CBE  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  6755  009CC2  0012               	return		;funcret
  6756  009CC4                     __end_of_verifyKeypress:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           postdec1	equ	0xFE5
  6767                           plusw1	equ	0xFE3
  6768                           fsr1l	equ	0xFE1
  6769                           indf2	equ	0xFDF
  6770                           postinc2	equ	0xFDE
  6771                           postdec2	equ	0xFDD
  6772                           plusw2	equ	0xFDB
  6773                           fsr2h	equ	0xFDA
  6774                           fsr2l	equ	0xFD9
  6775                           status	equ	0xFD8
  6776                           
  6777 ;; *************** function _displayLogs *****************
  6778 ;; Defined at:
  6779 ;;		line 914 in file "standbyMode.c"
  6780 ;; Parameters:    Size  Location     Type
  6781 ;;  logNumber       2   40[COMRAM] unsigned int 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  n               2   79[COMRAM] unsigned int 
  6784 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  6785 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  6786 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  6787 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  6788 ;;  i               2   69[COMRAM] unsigned int 
  6789 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  6790 ;;  operationTim    2   65[COMRAM] unsigned int 
  6791 ;;  foodType        2   62[COMRAM] unsigned int 
  6792 ;;  dietType        2   60[COMRAM] unsigned int 
  6793 ;;  seconds         2   58[COMRAM] unsigned int 
  6794 ;;  minutes         2   56[COMRAM] unsigned int 
  6795 ;;  longPieces      2   54[COMRAM] unsigned int 
  6796 ;;  flatPieces      2   52[COMRAM] unsigned int 
  6797 ;;  roundPieces     2   50[COMRAM] unsigned int 
  6798 ;;  day             2   48[COMRAM] unsigned int 
  6799 ;;  month           2   46[COMRAM] unsigned int 
  6800 ;;  year            2   44[COMRAM] unsigned int 
  6801 ;;  keypress3       1   64[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  2   40[COMRAM] unsigned int 
  6804 ;; Registers used:
  6805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:       41 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    3
  6818 ;; This function calls:
  6819 ;;		___lwdiv
  6820 ;;		___lwmod
  6821 ;;		___wmul
  6822 ;;		_lcdInst
  6823 ;;		_printf
  6824 ;;		_readEEPROM
  6825 ;; This function is called by:
  6826 ;;		_viewLogs
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text6
  6831  00CB3C                     __ptext6:
  6832                           	opt stack 0
  6833  00CB3C                     _displayLogs:
  6834                           	opt stack 25
  6835                           
  6836                           ;standbyMode.c: 915: unsigned int n = (logNumber-1)*35;
  6837                           
  6838                           ;incstack = 0
  6839  00CB3C  0EFF               	movlw	255
  6840  00CB3E  2429               	addwf	displayLogs@logNumber,w,c
  6841  00CB40  6E01               	movwf	___wmul@multiplier,c
  6842  00CB42  0EFF               	movlw	255
  6843  00CB44  202A               	addwfc	displayLogs@logNumber+1,w,c
  6844  00CB46  6E02               	movwf	___wmul@multiplier+1,c
  6845  00CB48  0E00               	movlw	0
  6846  00CB4A  6E04               	movwf	___wmul@multiplicand+1,c
  6847  00CB4C  0E23               	movlw	35
  6848  00CB4E  6E03               	movwf	___wmul@multiplicand,c
  6849  00CB50  EC68  F04D         	call	___wmul	;wreg free
  6850  00CB54  C001  F050         	movff	?___wmul,displayLogs@n
  6851  00CB58  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6852                           
  6853                           ;standbyMode.c: 916: unsigned int year = readEEPROM(n);
  6854  00CB5C  5050               	movf	displayLogs@n,w,c
  6855  00CB5E  EC20  F04D         	call	_readEEPROM
  6856  00CB62  6E2B               	movwf	??_displayLogs& (0+255),c
  6857  00CB64  502B               	movf	??_displayLogs,w,c
  6858  00CB66  6E2D               	movwf	displayLogs@year,c
  6859  00CB68  6A2E               	clrf	displayLogs@year+1,c
  6860                           
  6861                           ;standbyMode.c: 917: unsigned int month = readEEPROM(1+n);
  6862  00CB6A  2850               	incf	displayLogs@n,w,c
  6863  00CB6C  EC20  F04D         	call	_readEEPROM
  6864  00CB70  6E2B               	movwf	??_displayLogs& (0+255),c
  6865  00CB72  502B               	movf	??_displayLogs,w,c
  6866  00CB74  6E2F               	movwf	displayLogs@month,c
  6867  00CB76  6A30               	clrf	displayLogs@month+1,c
  6868                           
  6869                           ;standbyMode.c: 918: unsigned int day = readEEPROM(2+n);
  6870  00CB78  5050               	movf	displayLogs@n,w,c
  6871  00CB7A  0F02               	addlw	2
  6872  00CB7C  EC20  F04D         	call	_readEEPROM
  6873  00CB80  6E2B               	movwf	??_displayLogs& (0+255),c
  6874  00CB82  502B               	movf	??_displayLogs,w,c
  6875  00CB84  6E31               	movwf	displayLogs@day,c
  6876  00CB86  6A32               	clrf	displayLogs@day+1,c
  6877                           
  6878                           ;standbyMode.c: 919: unsigned int operationTime = readEEPROM(3+n);
  6879  00CB88  5050               	movf	displayLogs@n,w,c
  6880  00CB8A  0F03               	addlw	3
  6881  00CB8C  EC20  F04D         	call	_readEEPROM
  6882  00CB90  6E2B               	movwf	??_displayLogs& (0+255),c
  6883  00CB92  502B               	movf	??_displayLogs,w,c
  6884  00CB94  6E42               	movwf	displayLogs@operationTime,c
  6885  00CB96  6A43               	clrf	displayLogs@operationTime+1,c
  6886                           
  6887                           ;standbyMode.c: 920: unsigned int roundPieces = readEEPROM(4+n);
  6888  00CB98  5050               	movf	displayLogs@n,w,c
  6889  00CB9A  0F04               	addlw	4
  6890  00CB9C  EC20  F04D         	call	_readEEPROM
  6891  00CBA0  6E2B               	movwf	??_displayLogs& (0+255),c
  6892  00CBA2  502B               	movf	??_displayLogs,w,c
  6893  00CBA4  6E33               	movwf	displayLogs@roundPieces,c
  6894  00CBA6  6A34               	clrf	displayLogs@roundPieces+1,c
  6895                           
  6896                           ;standbyMode.c: 921: unsigned int flatPieces = readEEPROM(5+n);
  6897  00CBA8  5050               	movf	displayLogs@n,w,c
  6898  00CBAA  0F05               	addlw	5
  6899  00CBAC  EC20  F04D         	call	_readEEPROM
  6900  00CBB0  6E2B               	movwf	??_displayLogs& (0+255),c
  6901  00CBB2  502B               	movf	??_displayLogs,w,c
  6902  00CBB4  6E35               	movwf	displayLogs@flatPieces,c
  6903  00CBB6  6A36               	clrf	displayLogs@flatPieces+1,c
  6904                           
  6905                           ;standbyMode.c: 922: unsigned int longPieces = readEEPROM(6+n);
  6906  00CBB8  5050               	movf	displayLogs@n,w,c
  6907  00CBBA  0F06               	addlw	6
  6908  00CBBC  EC20  F04D         	call	_readEEPROM
  6909  00CBC0  6E2B               	movwf	??_displayLogs& (0+255),c
  6910  00CBC2  502B               	movf	??_displayLogs,w,c
  6911  00CBC4  6E37               	movwf	displayLogs@longPieces,c
  6912  00CBC6  6A38               	clrf	displayLogs@longPieces+1,c
  6913                           
  6914                           ;standbyMode.c: 923: unsigned int markedDrawer1 = readEEPROM(7+n);
  6915  00CBC8  5050               	movf	displayLogs@n,w,c
  6916  00CBCA  0F07               	addlw	7
  6917  00CBCC  EC20  F04D         	call	_readEEPROM
  6918  00CBD0  6E2B               	movwf	??_displayLogs& (0+255),c
  6919  00CBD2  502B               	movf	??_displayLogs,w,c
  6920  00CBD4  6E48               	movwf	displayLogs@markedDrawer1,c
  6921  00CBD6  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6922                           
  6923                           ;standbyMode.c: 924: unsigned int markedDrawer2 = readEEPROM(8+n);
  6924  00CBD8  5050               	movf	displayLogs@n,w,c
  6925  00CBDA  0F08               	addlw	8
  6926  00CBDC  EC20  F04D         	call	_readEEPROM
  6927  00CBE0  6E2B               	movwf	??_displayLogs& (0+255),c
  6928  00CBE2  502B               	movf	??_displayLogs,w,c
  6929  00CBE4  6E4A               	movwf	displayLogs@markedDrawer2,c
  6930  00CBE6  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6931                           
  6932                           ;standbyMode.c: 925: unsigned int markedDrawer3 = readEEPROM(9+n);
  6933  00CBE8  5050               	movf	displayLogs@n,w,c
  6934  00CBEA  0F09               	addlw	9
  6935  00CBEC  EC20  F04D         	call	_readEEPROM
  6936  00CBF0  6E2B               	movwf	??_displayLogs& (0+255),c
  6937  00CBF2  502B               	movf	??_displayLogs,w,c
  6938  00CBF4  6E4C               	movwf	displayLogs@markedDrawer3,c
  6939  00CBF6  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6940                           
  6941                           ;standbyMode.c: 926: unsigned int markedDrawer4 = readEEPROM(10+n);
  6942  00CBF8  5050               	movf	displayLogs@n,w,c
  6943  00CBFA  0F0A               	addlw	10
  6944  00CBFC  EC20  F04D         	call	_readEEPROM
  6945  00CC00  6E2B               	movwf	??_displayLogs& (0+255),c
  6946  00CC02  502B               	movf	??_displayLogs,w,c
  6947  00CC04  6E4E               	movwf	displayLogs@markedDrawer4,c
  6948  00CC06  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6949                           
  6950                           ;standbyMode.c: 927: unsigned int drawerNumber = readEEPROM(11+n);
  6951  00CC08  5050               	movf	displayLogs@n,w,c
  6952  00CC0A  0F0B               	addlw	11
  6953  00CC0C  EC20  F04D         	call	_readEEPROM
  6954  00CC10  6E2B               	movwf	??_displayLogs& (0+255),c
  6955  00CC12  502B               	movf	??_displayLogs,w,c
  6956  00CC14  6E44               	movwf	displayLogs@drawerNumber,c
  6957  00CC16  6A45               	clrf	displayLogs@drawerNumber+1,c
  6958                           
  6959                           ;standbyMode.c: 928: unsigned int dietType = readEEPROM(12+n);
  6960  00CC18  5050               	movf	displayLogs@n,w,c
  6961  00CC1A  0F0C               	addlw	12
  6962  00CC1C  EC20  F04D         	call	_readEEPROM
  6963  00CC20  6E2B               	movwf	??_displayLogs& (0+255),c
  6964  00CC22  502B               	movf	??_displayLogs,w,c
  6965  00CC24  6E3D               	movwf	displayLogs@dietType,c
  6966  00CC26  6A3E               	clrf	displayLogs@dietType+1,c
  6967                           
  6968                           ;standbyMode.c: 929: unsigned int foodType = readEEPROM(13+n);
  6969  00CC28  5050               	movf	displayLogs@n,w,c
  6970  00CC2A  0F0D               	addlw	13
  6971  00CC2C  EC20  F04D         	call	_readEEPROM
  6972  00CC30  6E2B               	movwf	??_displayLogs& (0+255),c
  6973  00CC32  502B               	movf	??_displayLogs,w,c
  6974  00CC34  6E3F               	movwf	displayLogs@foodType,c
  6975  00CC36  6A40               	clrf	displayLogs@foodType+1,c
  6976                           
  6977                           ;standbyMode.c: 930: unsigned int i = 0;
  6978  00CC38  0E00               	movlw	0
  6979  00CC3A  6E47               	movwf	displayLogs@i+1,c
  6980  00CC3C  0E00               	movlw	0
  6981  00CC3E  6E46               	movwf	displayLogs@i,c
  6982                           
  6983                           ;standbyMode.c: 932: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6984  00CC40  0E01               	movlw	1
  6985  00CC42  EC16  F04D         	call	_lcdInst
  6986  00CC46  0EC3               	movlw	195
  6987  00CC48  6E2B               	movwf	??_displayLogs& (0+255),c
  6988  00CC4A  0ECD               	movlw	205
  6989  00CC4C                     u14887:
  6990  00CC4C  2EE8               	decfsz	wreg,f,c
  6991  00CC4E  D7FE               	bra	u14887
  6992  00CC50  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6993  00CC52  D7FC               	bra	u14887
  6994  00CC54  F000               	nop	
  6995                           
  6996                           ;standbyMode.c: 933: printf("Date:");
  6997  00CC56  0EAD               	movlw	low STR_89
  6998  00CC58  6E0D               	movwf	printf@f,c
  6999  00CC5A  0EFF               	movlw	high STR_89
  7000  00CC5C  6E0E               	movwf	printf@f+1,c
  7001  00CC5E  EC0C  F061         	call	_printf	;wreg free
  7002                           
  7003                           ;standbyMode.c: 934: lcdInst(0xC0);;
  7004  00CC62  0EC0               	movlw	192
  7005  00CC64  EC16  F04D         	call	_lcdInst
  7006                           
  7007                           ;standbyMode.c: 935: printf("%02i/%02i/%02i", year, month, day);
  7008  00CC68  0EFB               	movlw	low STR_90
  7009  00CC6A  6E0D               	movwf	printf@f,c
  7010  00CC6C  0EFD               	movlw	high STR_90
  7011  00CC6E  6E0E               	movwf	printf@f+1,c
  7012  00CC70  C02D  F00F         	movff	displayLogs@year,?_printf+2
  7013  00CC74  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  7014  00CC78  C02F  F011         	movff	displayLogs@month,?_printf+4
  7015  00CC7C  C030  F012         	movff	displayLogs@month+1,?_printf+5
  7016  00CC80  C031  F013         	movff	displayLogs@day,?_printf+6
  7017  00CC84  C032  F014         	movff	displayLogs@day+1,?_printf+7
  7018  00CC88  EC0C  F061         	call	_printf	;wreg free
  7019                           
  7020                           ;standbyMode.c: 936: _delay((unsigned long)((700)*(40000000/4000.0)));
  7021  00CC8C  0E24               	movlw	36
  7022  00CC8E  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7023  00CC90  0E83               	movlw	131
  7024  00CC92  6E2B               	movwf	??_displayLogs& (0+255),c
  7025  00CC94  0ECF               	movlw	207
  7026  00CC96                     u14897:
  7027  00CC96  2EE8               	decfsz	wreg,f,c
  7028  00CC98  D7FE               	bra	u14897
  7029  00CC9A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7030  00CC9C  D7FC               	bra	u14897
  7031  00CC9E  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7032  00CCA0  D7FA               	bra	u14897
  7033  00CCA2  F000               	nop	
  7034  00CCA4                     
  7035                           ;standbyMode.c: 938: continue;
  7036  00CCA4  A281               	btfss	3969,1,c	;volatile
  7037  00CCA6  D7FE               	goto	l1005
  7038                           
  7039                           ;standbyMode.c: 939: }
  7040                           ;standbyMode.c: 941: unsigned int minutes = operationTime/60;
  7041  00CCA8  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  7042  00CCAC  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  7043  00CCB0  0E00               	movlw	0
  7044  00CCB2  6E04               	movwf	___lwdiv@divisor+1,c
  7045  00CCB4  0E3C               	movlw	60
  7046  00CCB6  6E03               	movwf	___lwdiv@divisor,c
  7047  00CCB8  EC10  F04E         	call	___lwdiv	;wreg free
  7048  00CCBC  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  7049  00CCC0  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  7050                           
  7051                           ;standbyMode.c: 942: unsigned int seconds = operationTime%60;
  7052  00CCC4  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  7053  00CCC8  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  7054  00CCCC  0E00               	movlw	0
  7055  00CCCE  6E0B               	movwf	___lwmod@divisor+1,c
  7056  00CCD0  0E3C               	movlw	60
  7057  00CCD2  6E0A               	movwf	___lwmod@divisor,c
  7058  00CCD4  ECC9  F04D         	call	___lwmod	;wreg free
  7059  00CCD8  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  7060  00CCDC  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  7061                           
  7062                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7063  00CCE0  0E01               	movlw	1
  7064  00CCE2  EC16  F04D         	call	_lcdInst
  7065  00CCE6  0EC3               	movlw	195
  7066  00CCE8  6E2B               	movwf	??_displayLogs& (0+255),c
  7067  00CCEA  0ECD               	movlw	205
  7068  00CCEC                     u14907:
  7069  00CCEC  2EE8               	decfsz	wreg,f,c
  7070  00CCEE  D7FE               	bra	u14907
  7071  00CCF0  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7072  00CCF2  D7FC               	bra	u14907
  7073  00CCF4  F000               	nop	
  7074                           
  7075                           ;standbyMode.c: 944: printf("Operation time:");
  7076  00CCF6  0E30               	movlw	low STR_91
  7077  00CCF8  6E0D               	movwf	printf@f,c
  7078  00CCFA  0EFD               	movlw	high STR_91
  7079  00CCFC  6E0E               	movwf	printf@f+1,c
  7080  00CCFE  EC0C  F061         	call	_printf	;wreg free
  7081                           
  7082                           ;standbyMode.c: 945: lcdInst(0xC0);;
  7083  00CD02  0EC0               	movlw	192
  7084  00CD04  EC16  F04D         	call	_lcdInst
  7085                           
  7086                           ;standbyMode.c: 946: printf("%i:%02i", minutes, seconds);
  7087  00CD08  0E87               	movlw	low STR_92
  7088  00CD0A  6E0D               	movwf	printf@f,c
  7089  00CD0C  0EFF               	movlw	high STR_92
  7090  00CD0E  6E0E               	movwf	printf@f+1,c
  7091  00CD10  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  7092  00CD14  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  7093  00CD18  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  7094  00CD1C  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  7095  00CD20  EC0C  F061         	call	_printf	;wreg free
  7096                           
  7097                           ;standbyMode.c: 947: _delay((unsigned long)((700)*(40000000/4000.0)));
  7098  00CD24  0E24               	movlw	36
  7099  00CD26  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7100  00CD28  0E83               	movlw	131
  7101  00CD2A  6E2B               	movwf	??_displayLogs& (0+255),c
  7102  00CD2C  0ECF               	movlw	207
  7103  00CD2E                     u14917:
  7104  00CD2E  2EE8               	decfsz	wreg,f,c
  7105  00CD30  D7FE               	bra	u14917
  7106  00CD32  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7107  00CD34  D7FC               	bra	u14917
  7108  00CD36  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7109  00CD38  D7FA               	bra	u14917
  7110  00CD3A  F000               	nop	
  7111  00CD3C                     
  7112                           ;standbyMode.c: 950: continue;
  7113  00CD3C  A281               	btfss	3969,1,c	;volatile
  7114  00CD3E  D7FE               	goto	l1008
  7115                           
  7116                           ;standbyMode.c: 951: }
  7117                           ;standbyMode.c: 953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7118  00CD40  0E01               	movlw	1
  7119  00CD42  EC16  F04D         	call	_lcdInst
  7120  00CD46  0EC3               	movlw	195
  7121  00CD48  6E2B               	movwf	??_displayLogs& (0+255),c
  7122  00CD4A  0ECD               	movlw	205
  7123  00CD4C                     u14927:
  7124  00CD4C  2EE8               	decfsz	wreg,f,c
  7125  00CD4E  D7FE               	bra	u14927
  7126  00CD50  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7127  00CD52  D7FC               	bra	u14927
  7128  00CD54  F000               	nop	
  7129                           
  7130                           ;standbyMode.c: 954: printf("Marked drawers:");
  7131  00CD56  0E40               	movlw	low STR_93
  7132  00CD58  6E0D               	movwf	printf@f,c
  7133  00CD5A  0EFD               	movlw	high STR_93
  7134  00CD5C  6E0E               	movwf	printf@f+1,c
  7135  00CD5E  EC0C  F061         	call	_printf	;wreg free
  7136                           
  7137                           ;standbyMode.c: 955: lcdInst(0xC0);;
  7138  00CD62  0EC0               	movlw	192
  7139  00CD64  EC16  F04D         	call	_lcdInst
  7140                           
  7141                           ;standbyMode.c: 957: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  7142  00CD68  504E               	movf	displayLogs@markedDrawer4,w,c
  7143  00CD6A  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7144  00CD6C  A4D8               	btfss	status,2,c
  7145  00CD6E  D01E               	goto	l1010
  7146  00CD70  504C               	movf	displayLogs@markedDrawer3,w,c
  7147  00CD72  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  7148  00CD74  A4D8               	btfss	status,2,c
  7149  00CD76  D01A               	goto	l1010
  7150  00CD78  504A               	movf	displayLogs@markedDrawer2,w,c
  7151  00CD7A  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  7152  00CD7C  A4D8               	btfss	status,2,c
  7153  00CD7E  D016               	goto	l1010
  7154                           
  7155                           ;standbyMode.c: 958: printf("%i", markedDrawer1);
  7156  00CD80  0EF8               	movlw	low (STR_97+12)
  7157  00CD82  6E0D               	movwf	printf@f,c
  7158  00CD84  0EFD               	movlw	high (STR_97+12)
  7159  00CD86  6E0E               	movwf	printf@f+1,c
  7160  00CD88  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7161  00CD8C  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7162  00CD90  EC0C  F061         	call	_printf	;wreg free
  7163                           
  7164                           ;standbyMode.c: 959: _delay((unsigned long)((700)*(40000000/4000.0)));
  7165  00CD94  0E24               	movlw	36
  7166  00CD96  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7167  00CD98  0E83               	movlw	131
  7168  00CD9A  6E2B               	movwf	??_displayLogs& (0+255),c
  7169  00CD9C  0ECF               	movlw	207
  7170  00CD9E                     u14937:
  7171  00CD9E  2EE8               	decfsz	wreg,f,c
  7172  00CDA0  D7FE               	bra	u14937
  7173  00CDA2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7174  00CDA4  D7FC               	bra	u14937
  7175  00CDA6  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7176  00CDA8  D7FA               	bra	u14937
  7177  00CDAA  D065               	goto	L19
  7178  00CDAC                     l1010:
  7179                           
  7180                           ;standbyMode.c: 962: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  7181  00CDAC  504E               	movf	displayLogs@markedDrawer4,w,c
  7182  00CDAE  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7183  00CDB0  A4D8               	btfss	status,2,c
  7184  00CDB2  D01E               	goto	l1012
  7185  00CDB4  504C               	movf	displayLogs@markedDrawer3,w,c
  7186  00CDB6  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  7187  00CDB8  A4D8               	btfss	status,2,c
  7188  00CDBA  D01A               	goto	l1012
  7189                           
  7190                           ;standbyMode.c: 963: printf("%i, %i", markedDrawer1, markedDrawer2);
  7191  00CDBC  0EF4               	movlw	low (STR_97+8)
  7192  00CDBE  6E0D               	movwf	printf@f,c
  7193  00CDC0  0EFD               	movlw	high (STR_97+8)
  7194  00CDC2  6E0E               	movwf	printf@f+1,c
  7195  00CDC4  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7196  00CDC8  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7197  00CDCC  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7198  00CDD0  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7199  00CDD4  EC0C  F061         	call	_printf	;wreg free
  7200                           
  7201                           ;standbyMode.c: 964: _delay((unsigned long)((700)*(40000000/4000.0)));
  7202  00CDD8  0E24               	movlw	36
  7203  00CDDA  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7204  00CDDC  0E83               	movlw	131
  7205  00CDDE  6E2B               	movwf	??_displayLogs& (0+255),c
  7206  00CDE0  0ECF               	movlw	207
  7207  00CDE2                     u14947:
  7208  00CDE2  2EE8               	decfsz	wreg,f,c
  7209  00CDE4  D7FE               	bra	u14947
  7210  00CDE6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7211  00CDE8  D7FC               	bra	u14947
  7212  00CDEA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7213  00CDEC  D7FA               	bra	u14947
  7214  00CDEE  D043               	goto	L19
  7215  00CDF0                     l1012:
  7216                           
  7217                           ;standbyMode.c: 967: else if (markedDrawer4 == 0){
  7218  00CDF0  504E               	movf	displayLogs@markedDrawer4,w,c
  7219  00CDF2  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  7220  00CDF4  A4D8               	btfss	status,2,c
  7221  00CDF6  D01E               	goto	l1014
  7222                           
  7223                           ;standbyMode.c: 968: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  7224  00CDF8  0EF0               	movlw	low (STR_97+4)
  7225  00CDFA  6E0D               	movwf	printf@f,c
  7226  00CDFC  0EFD               	movlw	high (STR_97+4)
  7227  00CDFE  6E0E               	movwf	printf@f+1,c
  7228  00CE00  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7229  00CE04  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7230  00CE08  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7231  00CE0C  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7232  00CE10  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  7233  00CE14  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  7234  00CE18  EC0C  F061         	call	_printf	;wreg free
  7235                           
  7236                           ;standbyMode.c: 969: _delay((unsigned long)((700)*(40000000/4000.0)));
  7237  00CE1C  0E24               	movlw	36
  7238  00CE1E  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7239  00CE20  0E83               	movlw	131
  7240  00CE22  6E2B               	movwf	??_displayLogs& (0+255),c
  7241  00CE24  0ECF               	movlw	207
  7242  00CE26                     u14957:
  7243  00CE26  2EE8               	decfsz	wreg,f,c
  7244  00CE28  D7FE               	bra	u14957
  7245  00CE2A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7246  00CE2C  D7FC               	bra	u14957
  7247  00CE2E  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7248  00CE30  D7FA               	bra	u14957
  7249  00CE32  D021               	goto	L19
  7250  00CE34                     l1014:
  7251                           
  7252                           ;standbyMode.c: 972: else {
  7253                           ;standbyMode.c: 973: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  7254  00CE34  0EEC               	movlw	low STR_97
  7255  00CE36  6E0D               	movwf	printf@f,c
  7256  00CE38  0EFD               	movlw	high STR_97
  7257  00CE3A  6E0E               	movwf	printf@f+1,c
  7258  00CE3C  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  7259  00CE40  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  7260  00CE44  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  7261  00CE48  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  7262  00CE4C  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  7263  00CE50  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  7264  00CE54  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  7265  00CE58  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  7266  00CE5C  EC0C  F061         	call	_printf	;wreg free
  7267                           
  7268                           ;standbyMode.c: 974: _delay((unsigned long)((700)*(40000000/4000.0)));
  7269  00CE60  0E24               	movlw	36
  7270  00CE62  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7271  00CE64  0E83               	movlw	131
  7272  00CE66  6E2B               	movwf	??_displayLogs& (0+255),c
  7273  00CE68  0ECF               	movlw	207
  7274  00CE6A                     u14967:
  7275  00CE6A  2EE8               	decfsz	wreg,f,c
  7276  00CE6C  D7FE               	bra	u14967
  7277  00CE6E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7278  00CE70  D7FC               	bra	u14967
  7279  00CE72  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7280  00CE74  D7FA               	bra	u14967
  7281  00CE76                     L19:
  7282  00CE76  F000               	nop	
  7283  00CE78                     
  7284                           ;standbyMode.c: 978: continue;
  7285                           
  7286                           ;standbyMode.c: 975: }
  7287                           ;standbyMode.c: 977: while(PORTBbits.RB1 == 0){
  7288  00CE78  A281               	btfss	3969,1,c	;volatile
  7289  00CE7A  D7FE               	goto	l1015
  7290                           
  7291                           ;standbyMode.c: 979: }
  7292                           ;standbyMode.c: 981: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7293  00CE7C  0E01               	movlw	1
  7294  00CE7E  EC16  F04D         	call	_lcdInst
  7295  00CE82  0EC3               	movlw	195
  7296  00CE84  6E2B               	movwf	??_displayLogs& (0+255),c
  7297  00CE86  0ECD               	movlw	205
  7298  00CE88                     u14977:
  7299  00CE88  2EE8               	decfsz	wreg,f,c
  7300  00CE8A  D7FE               	bra	u14977
  7301  00CE8C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7302  00CE8E  D7FC               	bra	u14977
  7303  00CE90  F000               	nop	
  7304                           
  7305                           ;standbyMode.c: 982: printf("Remaining pieces:");
  7306  00CE92  0E66               	movlw	low STR_98
  7307  00CE94  6E0D               	movwf	printf@f,c
  7308  00CE96  0EFC               	movlw	high STR_98
  7309  00CE98  6E0E               	movwf	printf@f+1,c
  7310  00CE9A  EC0C  F061         	call	_printf	;wreg free
  7311                           
  7312                           ;standbyMode.c: 983: lcdInst(0xC0);;
  7313  00CE9E  0EC0               	movlw	192
  7314  00CEA0  EC16  F04D         	call	_lcdInst
  7315                           
  7316                           ;standbyMode.c: 984: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  7317  00CEA4  0ECD               	movlw	low STR_99
  7318  00CEA6  6E0D               	movwf	printf@f,c
  7319  00CEA8  0EFC               	movlw	high STR_99
  7320  00CEAA  6E0E               	movwf	printf@f+1,c
  7321  00CEAC  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  7322  00CEB0  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  7323  00CEB4  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  7324  00CEB8  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  7325  00CEBC  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  7326  00CEC0  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  7327  00CEC4  EC0C  F061         	call	_printf	;wreg free
  7328                           
  7329                           ;standbyMode.c: 985: _delay((unsigned long)((700)*(40000000/4000.0)));
  7330  00CEC8  0E24               	movlw	36
  7331  00CECA  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7332  00CECC  0E83               	movlw	131
  7333  00CECE  6E2B               	movwf	??_displayLogs& (0+255),c
  7334  00CED0  0ECF               	movlw	207
  7335  00CED2                     u14987:
  7336  00CED2  2EE8               	decfsz	wreg,f,c
  7337  00CED4  D7FE               	bra	u14987
  7338  00CED6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7339  00CED8  D7FC               	bra	u14987
  7340  00CEDA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7341  00CEDC  D7FA               	bra	u14987
  7342  00CEDE  F000               	nop	
  7343  00CEE0                     
  7344                           ;standbyMode.c: 988: continue;
  7345  00CEE0  A281               	btfss	3969,1,c	;volatile
  7346  00CEE2  D7FE               	goto	l1020
  7347                           
  7348                           ;standbyMode.c: 989: }
  7349                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7350  00CEE4  0E01               	movlw	1
  7351  00CEE6  EC16  F04D         	call	_lcdInst
  7352  00CEEA  0EC3               	movlw	195
  7353  00CEEC  6E2B               	movwf	??_displayLogs& (0+255),c
  7354  00CEEE  0ECD               	movlw	205
  7355  00CEF0                     u14997:
  7356  00CEF0  2EE8               	decfsz	wreg,f,c
  7357  00CEF2  D7FE               	bra	u14997
  7358  00CEF4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7359  00CEF6  D7FC               	bra	u14997
  7360  00CEF8  F000               	nop	
  7361                           
  7362                           ;standbyMode.c: 992: printf("Input Summary:");
  7363  00CEFA  0ECE               	movlw	low STR_100
  7364  00CEFC  6E0D               	movwf	printf@f,c
  7365  00CEFE  0EFD               	movlw	high STR_100
  7366  00CF00  6E0E               	movwf	printf@f+1,c
  7367  00CF02  EC0C  F061         	call	_printf	;wreg free
  7368                           
  7369                           ;standbyMode.c: 993: _delay((unsigned long)((700)*(40000000/4000.0)));
  7370  00CF06  0E24               	movlw	36
  7371  00CF08  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7372  00CF0A  0E83               	movlw	131
  7373  00CF0C  6E2B               	movwf	??_displayLogs& (0+255),c
  7374  00CF0E  0ECF               	movlw	207
  7375  00CF10                     u15007:
  7376  00CF10  2EE8               	decfsz	wreg,f,c
  7377  00CF12  D7FE               	bra	u15007
  7378  00CF14  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7379  00CF16  D7FC               	bra	u15007
  7380  00CF18  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7381  00CF1A  D7FA               	bra	u15007
  7382  00CF1C  F000               	nop	
  7383  00CF1E                     
  7384                           ;standbyMode.c: 996: continue;
  7385  00CF1E  A281               	btfss	3969,1,c	;volatile
  7386  00CF20  D7FE               	goto	l1023
  7387                           
  7388                           ;standbyMode.c: 997: }
  7389                           ;standbyMode.c: 999: for (i=0; i<8; i++){
  7390  00CF22  0E00               	movlw	0
  7391  00CF24  6E47               	movwf	displayLogs@i+1,c
  7392  00CF26  0E00               	movlw	0
  7393  00CF28  6E46               	movwf	displayLogs@i,c
  7394  00CF2A  5047               	movf	displayLogs@i+1,w,c
  7395  00CF2C  E105               	bnz	u8980
  7396  00CF2E  0E08               	movlw	8
  7397  00CF30  5C46               	subwf	displayLogs@i,w,c
  7398  00CF32  B0D8               	btfsc	status,0,c
  7399  00CF34  D089               	goto	u9010
  7400  00CF36  D001               	goto	l1025
  7401  00CF38                     u8980:
  7402  00CF38  D087               	goto	u9010
  7403  00CF3A                     l1025:
  7404                           
  7405                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7406  00CF3A  0E01               	movlw	1
  7407  00CF3C  EC16  F04D         	call	_lcdInst
  7408  00CF40  0EC3               	movlw	195
  7409  00CF42  6E2B               	movwf	??_displayLogs& (0+255),c
  7410  00CF44  0ECD               	movlw	205
  7411  00CF46                     u15017:
  7412  00CF46  2EE8               	decfsz	wreg,f,c
  7413  00CF48  D7FE               	bra	u15017
  7414  00CF4A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7415  00CF4C  D7FC               	bra	u15017
  7416  00CF4E  F000               	nop	
  7417                           
  7418                           ;standbyMode.c: 1001: n = (logNumber-1)*35 + 3*i;
  7419  00CF50  0EFF               	movlw	255
  7420  00CF52  2429               	addwf	displayLogs@logNumber,w,c
  7421  00CF54  6E01               	movwf	___wmul@multiplier,c
  7422  00CF56  0EFF               	movlw	255
  7423  00CF58  202A               	addwfc	displayLogs@logNumber+1,w,c
  7424  00CF5A  6E02               	movwf	___wmul@multiplier+1,c
  7425  00CF5C  0E00               	movlw	0
  7426  00CF5E  6E04               	movwf	___wmul@multiplicand+1,c
  7427  00CF60  0E23               	movlw	35
  7428  00CF62  6E03               	movwf	___wmul@multiplicand,c
  7429  00CF64  EC68  F04D         	call	___wmul	;wreg free
  7430  00CF68  C001  F02B         	movff	?___wmul,??_displayLogs
  7431  00CF6C  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  7432  00CF70  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  7433  00CF74  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  7434  00CF78  0E00               	movlw	0
  7435  00CF7A  6E04               	movwf	___wmul@multiplicand+1,c
  7436  00CF7C  0E03               	movlw	3
  7437  00CF7E  6E03               	movwf	___wmul@multiplicand,c
  7438  00CF80  EC68  F04D         	call	___wmul	;wreg free
  7439  00CF84  5001               	movf	?___wmul,w,c
  7440  00CF86  242B               	addwf	??_displayLogs,w,c
  7441  00CF88  6E50               	movwf	displayLogs@n,c
  7442  00CF8A  5002               	movf	?___wmul+1,w,c
  7443  00CF8C  202C               	addwfc	??_displayLogs+1,w,c
  7444  00CF8E  6E51               	movwf	displayLogs@n+1,c
  7445                           
  7446                           ;standbyMode.c: 1002: drawerNumber = readEEPROM(11+n);
  7447  00CF90  5050               	movf	displayLogs@n,w,c
  7448  00CF92  0F0B               	addlw	11
  7449  00CF94  EC20  F04D         	call	_readEEPROM
  7450  00CF98  6E2B               	movwf	??_displayLogs& (0+255),c
  7451  00CF9A  502B               	movf	??_displayLogs,w,c
  7452  00CF9C  6E44               	movwf	displayLogs@drawerNumber,c
  7453  00CF9E  6A45               	clrf	displayLogs@drawerNumber+1,c
  7454                           
  7455                           ;standbyMode.c: 1003: dietType = readEEPROM(12+n);
  7456  00CFA0  5050               	movf	displayLogs@n,w,c
  7457  00CFA2  0F0C               	addlw	12
  7458  00CFA4  EC20  F04D         	call	_readEEPROM
  7459  00CFA8  6E2B               	movwf	??_displayLogs& (0+255),c
  7460  00CFAA  502B               	movf	??_displayLogs,w,c
  7461  00CFAC  6E3D               	movwf	displayLogs@dietType,c
  7462  00CFAE  6A3E               	clrf	displayLogs@dietType+1,c
  7463                           
  7464                           ;standbyMode.c: 1004: foodType = readEEPROM(13+n);
  7465  00CFB0  5050               	movf	displayLogs@n,w,c
  7466  00CFB2  0F0D               	addlw	13
  7467  00CFB4  EC20  F04D         	call	_readEEPROM
  7468  00CFB8  6E2B               	movwf	??_displayLogs& (0+255),c
  7469  00CFBA  502B               	movf	??_displayLogs,w,c
  7470  00CFBC  6E3F               	movwf	displayLogs@foodType,c
  7471  00CFBE  6A40               	clrf	displayLogs@foodType+1,c
  7472                           
  7473                           ;standbyMode.c: 1005: if (drawerNumber != 0){
  7474  00CFC0  5044               	movf	displayLogs@drawerNumber,w,c
  7475  00CFC2  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  7476  00CFC4  B4D8               	btfsc	status,2,c
  7477  00CFC6  D03B               	goto	u9000
  7478                           
  7479                           ;standbyMode.c: 1006: printf("Drawer %i:", drawerNumber);
  7480  00CFC8  0E08               	movlw	low STR_101
  7481  00CFCA  6E0D               	movwf	printf@f,c
  7482  00CFCC  0EFF               	movlw	high STR_101
  7483  00CFCE  6E0E               	movwf	printf@f+1,c
  7484  00CFD0  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  7485  00CFD4  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  7486  00CFD8  EC0C  F061         	call	_printf	;wreg free
  7487                           
  7488                           ;standbyMode.c: 1007: lcdInst(0xC0);;
  7489  00CFDC  0EC0               	movlw	192
  7490  00CFDE  EC16  F04D         	call	_lcdInst
  7491                           
  7492                           ;standbyMode.c: 1008: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  7493  00CFE2  0EB3               	movlw	low STR_102
  7494  00CFE4  6E0D               	movwf	printf@f,c
  7495  00CFE6  0EFF               	movlw	high STR_102
  7496  00CFE8  6E0E               	movwf	printf@f+1,c
  7497  00CFEA  90D8               	bcf	status,0,c
  7498  00CFEC  343D               	rlcf	displayLogs@dietType,w,c
  7499  00CFEE  6ED9               	movwf	fsr2l,c
  7500  00CFF0  343E               	rlcf	displayLogs@dietType+1,w,c
  7501  00CFF2  6EDA               	movwf	fsr2h,c
  7502  00CFF4  0E50               	movlw	low _inputs
  7503  00CFF6  26D9               	addwf	fsr2l,f,c
  7504  00CFF8  0E02               	movlw	high _inputs
  7505  00CFFA  22DA               	addwfc	fsr2h,f,c
  7506  00CFFC  CFDE F00F          	movff	postinc2,?_printf+2
  7507  00D000  CFDD F010          	movff	postdec2,?_printf+3
  7508  00D004  90D8               	bcf	status,0,c
  7509  00D006  343F               	rlcf	displayLogs@foodType,w,c
  7510  00D008  6ED9               	movwf	fsr2l,c
  7511  00D00A  3440               	rlcf	displayLogs@foodType+1,w,c
  7512  00D00C  6EDA               	movwf	fsr2h,c
  7513  00D00E  0E74               	movlw	low _foodInputs
  7514  00D010  26D9               	addwf	fsr2l,f,c
  7515  00D012  0E02               	movlw	high _foodInputs
  7516  00D014  22DA               	addwfc	fsr2h,f,c
  7517  00D016  CFDE F011          	movff	postinc2,?_printf+4
  7518  00D01A  CFDD F012          	movff	postdec2,?_printf+5
  7519  00D01E  EC0C  F061         	call	_printf	;wreg free
  7520                           
  7521                           ;standbyMode.c: 1009: _delay((unsigned long)((700)*(40000000/4000.0)));
  7522  00D022  0E24               	movlw	36
  7523  00D024  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7524  00D026  0E83               	movlw	131
  7525  00D028  6E2B               	movwf	??_displayLogs& (0+255),c
  7526  00D02A  0ECF               	movlw	207
  7527  00D02C                     u15027:
  7528  00D02C  2EE8               	decfsz	wreg,f,c
  7529  00D02E  D7FE               	bra	u15027
  7530  00D030  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7531  00D032  D7FC               	bra	u15027
  7532  00D034  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7533  00D036  D7FA               	bra	u15027
  7534  00D038  F000               	nop	
  7535  00D03A                     
  7536                           ;standbyMode.c: 1011: continue;
  7537  00D03A  A281               	btfss	3969,1,c	;volatile
  7538  00D03C  D7FE               	goto	l1029
  7539  00D03E                     u9000:
  7540  00D03E  4A46               	infsnz	displayLogs@i,f,c
  7541  00D040  2A47               	incf	displayLogs@i+1,f,c
  7542  00D042  5047               	movf	displayLogs@i+1,w,c
  7543  00D044  E101               	bnz	l7762
  7544  00D046  D773               	goto	L20
  7545  00D048                     u9010:
  7546  00D048                     l7762:
  7547                           
  7548                           ;standbyMode.c: 1012: }
  7549                           ;standbyMode.c: 1013: }
  7550                           ;standbyMode.c: 1014: }
  7551                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7552  00D048  0E01               	movlw	1
  7553  00D04A  EC16  F04D         	call	_lcdInst
  7554  00D04E  0EC3               	movlw	195
  7555  00D050  6E2B               	movwf	??_displayLogs& (0+255),c
  7556  00D052  0ECD               	movlw	205
  7557  00D054                     u15037:
  7558  00D054  2EE8               	decfsz	wreg,f,c
  7559  00D056  D7FE               	bra	u15037
  7560  00D058  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7561  00D05A  D7FC               	bra	u15037
  7562  00D05C  F000               	nop	
  7563                           
  7564                           ;standbyMode.c: 1017: printf("Another log?");
  7565  00D05E  0EB5               	movlw	low STR_103
  7566  00D060  6E0D               	movwf	printf@f,c
  7567  00D062  0EFE               	movlw	high STR_103
  7568  00D064  6E0E               	movwf	printf@f+1,c
  7569  00D066  EC0C  F061         	call	_printf	;wreg free
  7570                           
  7571                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  7572  00D06A  0EC0               	movlw	192
  7573  00D06C  EC16  F04D         	call	_lcdInst
  7574                           
  7575                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  7576  00D070  0E80               	movlw	low STR_104
  7577  00D072  6E0D               	movwf	printf@f,c
  7578  00D074  0EFD               	movlw	high STR_104
  7579  00D076  6E0E               	movwf	printf@f+1,c
  7580  00D078  EC0C  F061         	call	_printf	;wreg free
  7581                           
  7582                           ;standbyMode.c: 1020: _delay((unsigned long)((700)*(40000000/4000.0)));
  7583  00D07C  0E24               	movlw	36
  7584  00D07E  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7585  00D080  0E83               	movlw	131
  7586  00D082  6E2B               	movwf	??_displayLogs& (0+255),c
  7587  00D084  0ECF               	movlw	207
  7588  00D086                     u15047:
  7589  00D086  2EE8               	decfsz	wreg,f,c
  7590  00D088  D7FE               	bra	u15047
  7591  00D08A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7592  00D08C  D7FC               	bra	u15047
  7593  00D08E  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7594  00D090  D7FA               	bra	u15047
  7595  00D092  F000               	nop	
  7596  00D094  A281               	btfss	3969,1,c	;volatile
  7597  00D096  D7FE               	goto	l1032
  7598                           
  7599                           ;standbyMode.c: 1023: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  7600  00D098  3881               	swapf	3969,w,c	;volatile
  7601  00D09A  0B0F               	andlw	15
  7602  00D09C  0B0F               	andlw	15
  7603  00D09E  6E41               	movwf	displayLogs@keypress3,c
  7604  00D0A0  B281               	btfsc	3969,1,c	;volatile
  7605  00D0A2  D7FE               	goto	l1035
  7606                           
  7607                           ;standbyMode.c: 1025: return keypress3;
  7608  00D0A4  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  7609  00D0A8  6A2A               	clrf	?_displayLogs+1,c
  7610  00D0AA  0012               	return		;funcret
  7611  00D0AC                     __end_of_displayLogs:
  7612                           	opt stack 0
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           postinc0	equ	0xFEE
  7620                           wreg	equ	0xFE8
  7621                           postdec1	equ	0xFE5
  7622                           plusw1	equ	0xFE3
  7623                           fsr1l	equ	0xFE1
  7624                           indf2	equ	0xFDF
  7625                           postinc2	equ	0xFDE
  7626                           postdec2	equ	0xFDD
  7627                           plusw2	equ	0xFDB
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _shiftEEPROM *****************
  7633 ;; Defined at:
  7634 ;;		line 68 in file "EEPROMstorage.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  i               2    5[COMRAM] unsigned int 
  7639 ;;  temp            2    3[COMRAM] unsigned int 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      void 
  7642 ;; Registers used:
  7643 ;;		wreg, status,2, status,0, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7652 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7653 ;;Total ram usage:        5 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    1
  7656 ;; This function calls:
  7657 ;;		_readEEPROM
  7658 ;;		_writeEEPROM
  7659 ;; This function is called by:
  7660 ;;		_standbyMode
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text7
  7665  00A344                     __ptext7:
  7666                           	opt stack 0
  7667  00A344                     _shiftEEPROM:
  7668                           	opt stack 28
  7669                           
  7670                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  7671                           
  7672                           ;incstack = 0
  7673  00A344  0E00               	movlw	0
  7674  00A346  6E07               	movwf	shiftEEPROM@i+1,c
  7675  00A348  0E00               	movlw	0
  7676  00A34A  6E06               	movwf	shiftEEPROM@i,c
  7677                           
  7678                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  7679  00A34C  0E00               	movlw	0
  7680  00A34E  6E05               	movwf	shiftEEPROM@temp+1,c
  7681  00A350  0E00               	movlw	0
  7682  00A352  6E04               	movwf	shiftEEPROM@temp,c
  7683                           
  7684                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  7685  00A354  0E00               	movlw	0
  7686  00A356  6E07               	movwf	shiftEEPROM@i+1,c
  7687  00A358  0E46               	movlw	70
  7688  00A35A  6E06               	movwf	shiftEEPROM@i,c
  7689  00A35C                     l10036:
  7690  00A35C  5007               	movf	shiftEEPROM@i+1,w,c
  7691  00A35E  E114               	bnz	l10046
  7692  00A360  0E69               	movlw	105
  7693  00A362  5C06               	subwf	shiftEEPROM@i,w,c
  7694  00A364  B0D8               	btfsc	status,0,c
  7695  00A366  D010               	goto	u13370
  7696                           
  7697                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  7698  00A368  5006               	movf	shiftEEPROM@i,w,c
  7699  00A36A  EC20  F04D         	call	_readEEPROM
  7700  00A36E  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7701  00A370  5003               	movf	??_shiftEEPROM,w,c
  7702  00A372  6E04               	movwf	shiftEEPROM@temp,c
  7703  00A374  6A05               	clrf	shiftEEPROM@temp+1,c
  7704                           
  7705                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  7706  00A376  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7707  00A37A  5006               	movf	shiftEEPROM@i,w,c
  7708  00A37C  0F23               	addlw	35
  7709  00A37E  EC7B  F04D         	call	_writeEEPROM
  7710  00A382  4A06               	infsnz	shiftEEPROM@i,f,c
  7711  00A384  2A07               	incf	shiftEEPROM@i+1,f,c
  7712  00A386  D7EA               	goto	l10036
  7713  00A388                     u13370:
  7714  00A388                     l10046:
  7715                           
  7716                           ;EEPROMstorage.c: 74: }
  7717                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  7718  00A388  0E00               	movlw	0
  7719  00A38A  6E07               	movwf	shiftEEPROM@i+1,c
  7720  00A38C  0E23               	movlw	35
  7721  00A38E  6E06               	movwf	shiftEEPROM@i,c
  7722  00A390                     l10048:
  7723  00A390  5007               	movf	shiftEEPROM@i+1,w,c
  7724  00A392  E114               	bnz	l10058
  7725  00A394  0E46               	movlw	70
  7726  00A396  5C06               	subwf	shiftEEPROM@i,w,c
  7727  00A398  B0D8               	btfsc	status,0,c
  7728  00A39A  D010               	goto	u13390
  7729                           
  7730                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  7731  00A39C  5006               	movf	shiftEEPROM@i,w,c
  7732  00A39E  EC20  F04D         	call	_readEEPROM
  7733  00A3A2  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7734  00A3A4  5003               	movf	??_shiftEEPROM,w,c
  7735  00A3A6  6E04               	movwf	shiftEEPROM@temp,c
  7736  00A3A8  6A05               	clrf	shiftEEPROM@temp+1,c
  7737                           
  7738                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  7739  00A3AA  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7740  00A3AE  5006               	movf	shiftEEPROM@i,w,c
  7741  00A3B0  0F23               	addlw	35
  7742  00A3B2  EC7B  F04D         	call	_writeEEPROM
  7743  00A3B6  4A06               	infsnz	shiftEEPROM@i,f,c
  7744  00A3B8  2A07               	incf	shiftEEPROM@i+1,f,c
  7745  00A3BA  D7EA               	goto	l10048
  7746  00A3BC                     u13390:
  7747  00A3BC                     l10058:
  7748                           
  7749                           ;EEPROMstorage.c: 79: }
  7750                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  7751  00A3BC  0E00               	movlw	0
  7752  00A3BE  6E07               	movwf	shiftEEPROM@i+1,c
  7753  00A3C0  0E00               	movlw	0
  7754  00A3C2  6E06               	movwf	shiftEEPROM@i,c
  7755  00A3C4                     l10060:
  7756  00A3C4  5007               	movf	shiftEEPROM@i+1,w,c
  7757  00A3C6  E114               	bnz	l1367
  7758  00A3C8  0E23               	movlw	35
  7759  00A3CA  5C06               	subwf	shiftEEPROM@i,w,c
  7760  00A3CC  B0D8               	btfsc	status,0,c
  7761  00A3CE  0012               	return	
  7762                           
  7763                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  7764  00A3D0  5006               	movf	shiftEEPROM@i,w,c
  7765  00A3D2  EC20  F04D         	call	_readEEPROM
  7766  00A3D6  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7767  00A3D8  5003               	movf	??_shiftEEPROM,w,c
  7768  00A3DA  6E04               	movwf	shiftEEPROM@temp,c
  7769  00A3DC  6A05               	clrf	shiftEEPROM@temp+1,c
  7770                           
  7771                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  7772  00A3DE  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7773  00A3E2  5006               	movf	shiftEEPROM@i,w,c
  7774  00A3E4  0F23               	addlw	35
  7775  00A3E6  EC7B  F04D         	call	_writeEEPROM
  7776  00A3EA  4A06               	infsnz	shiftEEPROM@i,f,c
  7777  00A3EC  2A07               	incf	shiftEEPROM@i+1,f,c
  7778  00A3EE  D7EA               	goto	l10060
  7779  00A3F0                     l1367:
  7780  00A3F0  0012               	return		;funcret
  7781  00A3F2                     __end_of_shiftEEPROM:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           postdec1	equ	0xFE5
  7792                           plusw1	equ	0xFE3
  7793                           fsr1l	equ	0xFE1
  7794                           indf2	equ	0xFDF
  7795                           postinc2	equ	0xFDE
  7796                           postdec2	equ	0xFDD
  7797                           plusw2	equ	0xFDB
  7798                           fsr2h	equ	0xFDA
  7799                           fsr2l	equ	0xFD9
  7800                           status	equ	0xFD8
  7801                           
  7802 ;; *************** function _printFoodInput *****************
  7803 ;; Defined at:
  7804 ;;		line 839 in file "standbyMode.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  food            2    0[COMRAM] unsigned int 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;		None
  7809 ;; Return value:  Size  Location     Type
  7810 ;;                  2    0[COMRAM] unsigned int 
  7811 ;; Registers used:
  7812 ;;		wreg, status,2, status,0
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;Total ram usage:        2 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; This function calls:
  7825 ;;		Nothing
  7826 ;; This function is called by:
  7827 ;;		_standbyMode
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text8
  7832  00B7EC                     __ptext8:
  7833                           	opt stack 0
  7834  00B7EC                     _printFoodInput:
  7835                           	opt stack 29
  7836                           
  7837                           ;standbyMode.c: 842: if (food == 1 || food == 3 || food == 5){
  7838                           
  7839                           ;incstack = 0
  7840  00B7EC  0401               	decf	printFoodInput@food,w,c
  7841  00B7EE  1002               	iorwf	printFoodInput@food+1,w,c
  7842  00B7F0  B4D8               	btfsc	status,2,c
  7843  00B7F2  D00A               	goto	u11650
  7844  00B7F4  0E03               	movlw	3
  7845  00B7F6  1801               	xorwf	printFoodInput@food,w,c
  7846  00B7F8  1002               	iorwf	printFoodInput@food+1,w,c
  7847  00B7FA  B4D8               	btfsc	status,2,c
  7848  00B7FC  D005               	goto	u11650
  7849  00B7FE  0E05               	movlw	5
  7850  00B800  1801               	xorwf	printFoodInput@food,w,c
  7851  00B802  1002               	iorwf	printFoodInput@food+1,w,c
  7852  00B804  A4D8               	btfss	status,2,c
  7853  00B806  D005               	goto	l951
  7854  00B808                     u11650:
  7855                           
  7856                           ;standbyMode.c: 843: return 0;
  7857  00B808  0E00               	movlw	0
  7858  00B80A  6E02               	movwf	?_printFoodInput+1,c
  7859  00B80C  0E00               	movlw	0
  7860  00B80E  6E01               	movwf	?_printFoodInput,c
  7861                           
  7862                           ;standbyMode.c: 844: }
  7863  00B810  0012               	return	
  7864  00B812                     l951:
  7865                           
  7866                           ;standbyMode.c: 847: else if (food == 2 || food == 4 || food == 6){
  7867  00B812  0E02               	movlw	2
  7868  00B814  1801               	xorwf	printFoodInput@food,w,c
  7869  00B816  1002               	iorwf	printFoodInput@food+1,w,c
  7870  00B818  B4D8               	btfsc	status,2,c
  7871  00B81A  D00A               	goto	u11680
  7872  00B81C  0E04               	movlw	4
  7873  00B81E  1801               	xorwf	printFoodInput@food,w,c
  7874  00B820  1002               	iorwf	printFoodInput@food+1,w,c
  7875  00B822  B4D8               	btfsc	status,2,c
  7876  00B824  D005               	goto	u11680
  7877  00B826  0E06               	movlw	6
  7878  00B828  1801               	xorwf	printFoodInput@food,w,c
  7879  00B82A  1002               	iorwf	printFoodInput@food+1,w,c
  7880  00B82C  A4D8               	btfss	status,2,c
  7881  00B82E  D005               	goto	l956
  7882  00B830                     u11680:
  7883                           
  7884                           ;standbyMode.c: 848: return 1;
  7885  00B830  0E00               	movlw	0
  7886  00B832  6E02               	movwf	?_printFoodInput+1,c
  7887  00B834  0E01               	movlw	1
  7888  00B836  6E01               	movwf	?_printFoodInput,c
  7889                           
  7890                           ;standbyMode.c: 849: }
  7891  00B838  0012               	return	
  7892  00B83A                     l956:
  7893                           
  7894                           ;standbyMode.c: 852: else if (food == 7){
  7895  00B83A  0E07               	movlw	7
  7896  00B83C  1801               	xorwf	printFoodInput@food,w,c
  7897  00B83E  1002               	iorwf	printFoodInput@food+1,w,c
  7898  00B840  A4D8               	btfss	status,2,c
  7899  00B842  D005               	goto	l960
  7900                           
  7901                           ;standbyMode.c: 853: return 2;
  7902  00B844  0E00               	movlw	0
  7903  00B846  6E02               	movwf	?_printFoodInput+1,c
  7904  00B848  0E02               	movlw	2
  7905  00B84A  6E01               	movwf	?_printFoodInput,c
  7906                           
  7907                           ;standbyMode.c: 854: }
  7908  00B84C  0012               	return	
  7909  00B84E                     l960:
  7910                           
  7911                           ;standbyMode.c: 857: else if (food == 8 || food == 12 || food == 17){
  7912  00B84E  0E08               	movlw	8
  7913  00B850  1801               	xorwf	printFoodInput@food,w,c
  7914  00B852  1002               	iorwf	printFoodInput@food+1,w,c
  7915  00B854  B4D8               	btfsc	status,2,c
  7916  00B856  D00A               	goto	u11720
  7917  00B858  0E0C               	movlw	12
  7918  00B85A  1801               	xorwf	printFoodInput@food,w,c
  7919  00B85C  1002               	iorwf	printFoodInput@food+1,w,c
  7920  00B85E  B4D8               	btfsc	status,2,c
  7921  00B860  D005               	goto	u11720
  7922  00B862  0E11               	movlw	17
  7923  00B864  1801               	xorwf	printFoodInput@food,w,c
  7924  00B866  1002               	iorwf	printFoodInput@food+1,w,c
  7925  00B868  A4D8               	btfss	status,2,c
  7926  00B86A  D005               	goto	l962
  7927  00B86C                     u11720:
  7928                           
  7929                           ;standbyMode.c: 858: return 3;
  7930  00B86C  0E00               	movlw	0
  7931  00B86E  6E02               	movwf	?_printFoodInput+1,c
  7932  00B870  0E03               	movlw	3
  7933  00B872  6E01               	movwf	?_printFoodInput,c
  7934                           
  7935                           ;standbyMode.c: 859: }
  7936  00B874  0012               	return	
  7937  00B876                     l962:
  7938                           
  7939                           ;standbyMode.c: 862: else if (food == 9 || food == 13 || food == 18){
  7940  00B876  0E09               	movlw	9
  7941  00B878  1801               	xorwf	printFoodInput@food,w,c
  7942  00B87A  1002               	iorwf	printFoodInput@food+1,w,c
  7943  00B87C  B4D8               	btfsc	status,2,c
  7944  00B87E  D00A               	goto	u11750
  7945  00B880  0E0D               	movlw	13
  7946  00B882  1801               	xorwf	printFoodInput@food,w,c
  7947  00B884  1002               	iorwf	printFoodInput@food+1,w,c
  7948  00B886  B4D8               	btfsc	status,2,c
  7949  00B888  D005               	goto	u11750
  7950  00B88A  0E12               	movlw	18
  7951  00B88C  1801               	xorwf	printFoodInput@food,w,c
  7952  00B88E  1002               	iorwf	printFoodInput@food+1,w,c
  7953  00B890  A4D8               	btfss	status,2,c
  7954  00B892  D005               	goto	l966
  7955  00B894                     u11750:
  7956                           
  7957                           ;standbyMode.c: 863: return 4;
  7958  00B894  0E00               	movlw	0
  7959  00B896  6E02               	movwf	?_printFoodInput+1,c
  7960  00B898  0E04               	movlw	4
  7961  00B89A  6E01               	movwf	?_printFoodInput,c
  7962                           
  7963                           ;standbyMode.c: 864: }
  7964  00B89C  0012               	return	
  7965  00B89E                     l966:
  7966                           
  7967                           ;standbyMode.c: 867: else if (food == 14 || food == 19){
  7968  00B89E  0E0E               	movlw	14
  7969  00B8A0  1801               	xorwf	printFoodInput@food,w,c
  7970  00B8A2  1002               	iorwf	printFoodInput@food+1,w,c
  7971  00B8A4  B4D8               	btfsc	status,2,c
  7972  00B8A6  D005               	goto	u11770
  7973  00B8A8  0E13               	movlw	19
  7974  00B8AA  1801               	xorwf	printFoodInput@food,w,c
  7975  00B8AC  1002               	iorwf	printFoodInput@food+1,w,c
  7976  00B8AE  A4D8               	btfss	status,2,c
  7977  00B8B0  D005               	goto	l970
  7978  00B8B2                     u11770:
  7979                           
  7980                           ;standbyMode.c: 868: return 5;
  7981  00B8B2  0E00               	movlw	0
  7982  00B8B4  6E02               	movwf	?_printFoodInput+1,c
  7983  00B8B6  0E05               	movlw	5
  7984  00B8B8  6E01               	movwf	?_printFoodInput,c
  7985                           
  7986                           ;standbyMode.c: 869: }
  7987  00B8BA  0012               	return	
  7988  00B8BC                     l970:
  7989                           
  7990                           ;standbyMode.c: 872: else if (food == 10 || food == 15 || food == 20){
  7991  00B8BC  0E0A               	movlw	10
  7992  00B8BE  1801               	xorwf	printFoodInput@food,w,c
  7993  00B8C0  1002               	iorwf	printFoodInput@food+1,w,c
  7994  00B8C2  B4D8               	btfsc	status,2,c
  7995  00B8C4  D00A               	goto	u11800
  7996  00B8C6  0E0F               	movlw	15
  7997  00B8C8  1801               	xorwf	printFoodInput@food,w,c
  7998  00B8CA  1002               	iorwf	printFoodInput@food+1,w,c
  7999  00B8CC  B4D8               	btfsc	status,2,c
  8000  00B8CE  D005               	goto	u11800
  8001  00B8D0  0E14               	movlw	20
  8002  00B8D2  1801               	xorwf	printFoodInput@food,w,c
  8003  00B8D4  1002               	iorwf	printFoodInput@food+1,w,c
  8004  00B8D6  A4D8               	btfss	status,2,c
  8005  00B8D8  D005               	goto	l974
  8006  00B8DA                     u11800:
  8007                           
  8008                           ;standbyMode.c: 873: return 6;
  8009  00B8DA  0E00               	movlw	0
  8010  00B8DC  6E02               	movwf	?_printFoodInput+1,c
  8011  00B8DE  0E06               	movlw	6
  8012  00B8E0  6E01               	movwf	?_printFoodInput,c
  8013                           
  8014                           ;standbyMode.c: 874: }
  8015  00B8E2  0012               	return	
  8016  00B8E4                     l974:
  8017                           
  8018                           ;standbyMode.c: 877: else if (food == 11 || food == 16 || food == 21){
  8019  00B8E4  0E0B               	movlw	11
  8020  00B8E6  1801               	xorwf	printFoodInput@food,w,c
  8021  00B8E8  1002               	iorwf	printFoodInput@food+1,w,c
  8022  00B8EA  B4D8               	btfsc	status,2,c
  8023  00B8EC  D00A               	goto	u11830
  8024  00B8EE  0E10               	movlw	16
  8025  00B8F0  1801               	xorwf	printFoodInput@food,w,c
  8026  00B8F2  1002               	iorwf	printFoodInput@food+1,w,c
  8027  00B8F4  B4D8               	btfsc	status,2,c
  8028  00B8F6  D005               	goto	u11830
  8029  00B8F8  0E15               	movlw	21
  8030  00B8FA  1801               	xorwf	printFoodInput@food,w,c
  8031  00B8FC  1002               	iorwf	printFoodInput@food+1,w,c
  8032  00B8FE  A4D8               	btfss	status,2,c
  8033  00B900  D005               	goto	l978
  8034  00B902                     u11830:
  8035                           
  8036                           ;standbyMode.c: 878: return 7;
  8037  00B902  0E00               	movlw	0
  8038  00B904  6E02               	movwf	?_printFoodInput+1,c
  8039  00B906  0E07               	movlw	7
  8040  00B908  6E01               	movwf	?_printFoodInput,c
  8041                           
  8042                           ;standbyMode.c: 879: }
  8043  00B90A  0012               	return	
  8044  00B90C                     l978:
  8045                           
  8046                           ;standbyMode.c: 882: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  8047  00B90C  0E16               	movlw	22
  8048  00B90E  1801               	xorwf	printFoodInput@food,w,c
  8049  00B910  1002               	iorwf	printFoodInput@food+1,w,c
  8050  00B912  B4D8               	btfsc	status,2,c
  8051  00B914  D01E               	goto	u11900
  8052  00B916  0E18               	movlw	24
  8053  00B918  1801               	xorwf	printFoodInput@food,w,c
  8054  00B91A  1002               	iorwf	printFoodInput@food+1,w,c
  8055  00B91C  B4D8               	btfsc	status,2,c
  8056  00B91E  D019               	goto	u11900
  8057  00B920  0E1A               	movlw	26
  8058  00B922  1801               	xorwf	printFoodInput@food,w,c
  8059  00B924  1002               	iorwf	printFoodInput@food+1,w,c
  8060  00B926  B4D8               	btfsc	status,2,c
  8061  00B928  D014               	goto	u11900
  8062  00B92A  0E1C               	movlw	28
  8063  00B92C  1801               	xorwf	printFoodInput@food,w,c
  8064  00B92E  1002               	iorwf	printFoodInput@food+1,w,c
  8065  00B930  B4D8               	btfsc	status,2,c
  8066  00B932  D00F               	goto	u11900
  8067  00B934  0E20               	movlw	32
  8068  00B936  1801               	xorwf	printFoodInput@food,w,c
  8069  00B938  1002               	iorwf	printFoodInput@food+1,w,c
  8070  00B93A  B4D8               	btfsc	status,2,c
  8071  00B93C  D00A               	goto	u11900
  8072  00B93E  0E24               	movlw	36
  8073  00B940  1801               	xorwf	printFoodInput@food,w,c
  8074  00B942  1002               	iorwf	printFoodInput@food+1,w,c
  8075  00B944  B4D8               	btfsc	status,2,c
  8076  00B946  D005               	goto	u11900
  8077  00B948  0E26               	movlw	38
  8078  00B94A  1801               	xorwf	printFoodInput@food,w,c
  8079  00B94C  1002               	iorwf	printFoodInput@food+1,w,c
  8080  00B94E  A4D8               	btfss	status,2,c
  8081  00B950  D005               	goto	l982
  8082  00B952                     u11900:
  8083                           
  8084                           ;standbyMode.c: 883: return 8;
  8085  00B952  0E00               	movlw	0
  8086  00B954  6E02               	movwf	?_printFoodInput+1,c
  8087  00B956  0E08               	movlw	8
  8088  00B958  6E01               	movwf	?_printFoodInput,c
  8089                           
  8090                           ;standbyMode.c: 884: }
  8091  00B95A  0012               	return	
  8092  00B95C                     l982:
  8093                           
  8094                           ;standbyMode.c: 887: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  8095  00B95C  0E17               	movlw	23
  8096  00B95E  1801               	xorwf	printFoodInput@food,w,c
  8097  00B960  1002               	iorwf	printFoodInput@food+1,w,c
  8098  00B962  B4D8               	btfsc	status,2,c
  8099  00B964  D019               	goto	u11960
  8100  00B966  0E19               	movlw	25
  8101  00B968  1801               	xorwf	printFoodInput@food,w,c
  8102  00B96A  1002               	iorwf	printFoodInput@food+1,w,c
  8103  00B96C  B4D8               	btfsc	status,2,c
  8104  00B96E  D014               	goto	u11960
  8105  00B970  0E1D               	movlw	29
  8106  00B972  1801               	xorwf	printFoodInput@food,w,c
  8107  00B974  1002               	iorwf	printFoodInput@food+1,w,c
  8108  00B976  B4D8               	btfsc	status,2,c
  8109  00B978  D00F               	goto	u11960
  8110  00B97A  0E21               	movlw	33
  8111  00B97C  1801               	xorwf	printFoodInput@food,w,c
  8112  00B97E  1002               	iorwf	printFoodInput@food+1,w,c
  8113  00B980  B4D8               	btfsc	status,2,c
  8114  00B982  D00A               	goto	u11960
  8115  00B984  0E25               	movlw	37
  8116  00B986  1801               	xorwf	printFoodInput@food,w,c
  8117  00B988  1002               	iorwf	printFoodInput@food+1,w,c
  8118  00B98A  B4D8               	btfsc	status,2,c
  8119  00B98C  D005               	goto	u11960
  8120  00B98E  0E27               	movlw	39
  8121  00B990  1801               	xorwf	printFoodInput@food,w,c
  8122  00B992  1002               	iorwf	printFoodInput@food+1,w,c
  8123  00B994  A4D8               	btfss	status,2,c
  8124  00B996  D005               	goto	l986
  8125  00B998                     u11960:
  8126                           
  8127                           ;standbyMode.c: 888: return 9;
  8128  00B998  0E00               	movlw	0
  8129  00B99A  6E02               	movwf	?_printFoodInput+1,c
  8130  00B99C  0E09               	movlw	9
  8131  00B99E  6E01               	movwf	?_printFoodInput,c
  8132                           
  8133                           ;standbyMode.c: 889: }
  8134  00B9A0  0012               	return	
  8135  00B9A2                     l986:
  8136                           
  8137                           ;standbyMode.c: 892: else if (food == 30 || food == 34 || food == 40){
  8138  00B9A2  0E1E               	movlw	30
  8139  00B9A4  1801               	xorwf	printFoodInput@food,w,c
  8140  00B9A6  1002               	iorwf	printFoodInput@food+1,w,c
  8141  00B9A8  B4D8               	btfsc	status,2,c
  8142  00B9AA  D00A               	goto	u11990
  8143  00B9AC  0E22               	movlw	34
  8144  00B9AE  1801               	xorwf	printFoodInput@food,w,c
  8145  00B9B0  1002               	iorwf	printFoodInput@food+1,w,c
  8146  00B9B2  B4D8               	btfsc	status,2,c
  8147  00B9B4  D005               	goto	u11990
  8148  00B9B6  0E28               	movlw	40
  8149  00B9B8  1801               	xorwf	printFoodInput@food,w,c
  8150  00B9BA  1002               	iorwf	printFoodInput@food+1,w,c
  8151  00B9BC  A4D8               	btfss	status,2,c
  8152  00B9BE  D005               	goto	l990
  8153  00B9C0                     u11990:
  8154                           
  8155                           ;standbyMode.c: 893: return 10;
  8156  00B9C0  0E00               	movlw	0
  8157  00B9C2  6E02               	movwf	?_printFoodInput+1,c
  8158  00B9C4  0E0A               	movlw	10
  8159  00B9C6  6E01               	movwf	?_printFoodInput,c
  8160                           
  8161                           ;standbyMode.c: 894: }
  8162  00B9C8  0012               	return	
  8163  00B9CA                     l990:
  8164                           
  8165                           ;standbyMode.c: 897: else if (food == 27 || food == 31 || food == 35 || food == 41){
  8166  00B9CA  0E1B               	movlw	27
  8167  00B9CC  1801               	xorwf	printFoodInput@food,w,c
  8168  00B9CE  1002               	iorwf	printFoodInput@food+1,w,c
  8169  00B9D0  B4D8               	btfsc	status,2,c
  8170  00B9D2  D00F               	goto	u12030
  8171  00B9D4  0E1F               	movlw	31
  8172  00B9D6  1801               	xorwf	printFoodInput@food,w,c
  8173  00B9D8  1002               	iorwf	printFoodInput@food+1,w,c
  8174  00B9DA  B4D8               	btfsc	status,2,c
  8175  00B9DC  D00A               	goto	u12030
  8176  00B9DE  0E23               	movlw	35
  8177  00B9E0  1801               	xorwf	printFoodInput@food,w,c
  8178  00B9E2  1002               	iorwf	printFoodInput@food+1,w,c
  8179  00B9E4  B4D8               	btfsc	status,2,c
  8180  00B9E6  D005               	goto	u12030
  8181  00B9E8  0E29               	movlw	41
  8182  00B9EA  1801               	xorwf	printFoodInput@food,w,c
  8183  00B9EC  1002               	iorwf	printFoodInput@food+1,w,c
  8184  00B9EE  A4D8               	btfss	status,2,c
  8185  00B9F0  D005               	goto	l994
  8186  00B9F2                     u12030:
  8187                           
  8188                           ;standbyMode.c: 898: return 11;
  8189  00B9F2  0E00               	movlw	0
  8190  00B9F4  6E02               	movwf	?_printFoodInput+1,c
  8191  00B9F6  0E0B               	movlw	11
  8192  00B9F8  6E01               	movwf	?_printFoodInput,c
  8193                           
  8194                           ;standbyMode.c: 899: }
  8195  00B9FA  0012               	return	
  8196  00B9FC                     l994:
  8197                           
  8198                           ;standbyMode.c: 903: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  8199  00B9FC  0E2A               	movlw	42
  8200  00B9FE  1801               	xorwf	printFoodInput@food,w,c
  8201  00BA00  1002               	iorwf	printFoodInput@food+1,w,c
  8202  00BA02  B4D8               	btfsc	status,2,c
  8203  00BA04  D014               	goto	u12080
  8204  00BA06  0E2B               	movlw	43
  8205  00BA08  1801               	xorwf	printFoodInput@food,w,c
  8206  00BA0A  1002               	iorwf	printFoodInput@food+1,w,c
  8207  00BA0C  B4D8               	btfsc	status,2,c
  8208  00BA0E  D00F               	goto	u12080
  8209  00BA10  0E2C               	movlw	44
  8210  00BA12  1801               	xorwf	printFoodInput@food,w,c
  8211  00BA14  1002               	iorwf	printFoodInput@food+1,w,c
  8212  00BA16  B4D8               	btfsc	status,2,c
  8213  00BA18  D00A               	goto	u12080
  8214  00BA1A  0E2D               	movlw	45
  8215  00BA1C  1801               	xorwf	printFoodInput@food,w,c
  8216  00BA1E  1002               	iorwf	printFoodInput@food+1,w,c
  8217  00BA20  B4D8               	btfsc	status,2,c
  8218  00BA22  D005               	goto	u12080
  8219  00BA24  0E2E               	movlw	46
  8220  00BA26  1801               	xorwf	printFoodInput@food,w,c
  8221  00BA28  1002               	iorwf	printFoodInput@food+1,w,c
  8222  00BA2A  A4D8               	btfss	status,2,c
  8223  00BA2C  D005               	goto	l998
  8224  00BA2E                     u12080:
  8225                           
  8226                           ;standbyMode.c: 904: return 12;
  8227  00BA2E  0E00               	movlw	0
  8228  00BA30  6E02               	movwf	?_printFoodInput+1,c
  8229  00BA32  0E0C               	movlw	12
  8230  00BA34  6E01               	movwf	?_printFoodInput,c
  8231                           
  8232                           ;standbyMode.c: 905: }
  8233  00BA36  0012               	return	
  8234  00BA38                     l998:
  8235                           
  8236                           ;standbyMode.c: 907: else{
  8237                           ;standbyMode.c: 908: return 0;
  8238  00BA38  0E00               	movlw	0
  8239  00BA3A  6E02               	movwf	?_printFoodInput+1,c
  8240  00BA3C  0E00               	movlw	0
  8241  00BA3E  6E01               	movwf	?_printFoodInput,c
  8242  00BA40  0012               	return	
  8243  00BA42                     __end_of_printFoodInput:
  8244                           	opt stack 0
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           postinc0	equ	0xFEE
  8252                           wreg	equ	0xFE8
  8253                           postdec1	equ	0xFE5
  8254                           plusw1	equ	0xFE3
  8255                           fsr1l	equ	0xFE1
  8256                           indf2	equ	0xFDF
  8257                           postinc2	equ	0xFDE
  8258                           postdec2	equ	0xFDD
  8259                           plusw2	equ	0xFDB
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8
  8263                           
  8264 ;; *************** function _getRound *****************
  8265 ;; Defined at:
  8266 ;;		line 243 in file "standbyMode.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;  code            2    0[COMRAM] unsigned int 
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  returnValue     2    4[COMRAM] unsigned int 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  2    0[COMRAM] unsigned int 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;Total ram usage:        6 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; This function calls:
  8287 ;;		Nothing
  8288 ;; This function is called by:
  8289 ;;		_standbyMode
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text9
  8294  00A74E                     __ptext9:
  8295                           	opt stack 0
  8296  00A74E                     _getRound:
  8297                           	opt stack 29
  8298                           
  8299                           ;standbyMode.c: 244: unsigned int returnValue = 0;
  8300                           
  8301                           ;incstack = 0
  8302  00A74E  0E00               	movlw	0
  8303  00A750  6E06               	movwf	getRound@returnValue+1,c
  8304  00A752  0E00               	movlw	0
  8305  00A754  6E05               	movwf	getRound@returnValue,c
  8306                           
  8307                           ;standbyMode.c: 245: switch(code){
  8308  00A756  D00D               	goto	l806
  8309  00A758                     
  8310                           ;standbyMode.c: 253: returnValue = 2;
  8311  00A758  0E00               	movlw	0
  8312  00A75A  6E06               	movwf	getRound@returnValue+1,c
  8313  00A75C  0E02               	movlw	2
  8314  00A75E                     L22:
  8315  00A75E  6E05               	movwf	getRound@returnValue,c
  8316                           
  8317                           ;standbyMode.c: 259: break;
  8318  00A760  D069               	goto	l808
  8319  00A762                     
  8320                           ;standbyMode.c: 388: returnValue = 1;
  8321                           
  8322                           ;standbyMode.c: 387: case 45:
  8323                           
  8324                           ;standbyMode.c: 384: break;
  8325                           
  8326                           ;standbyMode.c: 383: returnValue = 1;
  8327                           
  8328                           ;standbyMode.c: 382: case 44:
  8329                           
  8330                           ;standbyMode.c: 379: break;
  8331                           
  8332                           ;standbyMode.c: 378: returnValue = 1;
  8333  00A762  0E00               	movlw	0
  8334  00A764  6E06               	movwf	getRound@returnValue+1,c
  8335  00A766  0E01               	movlw	1
  8336  00A768  D7FA               	goto	L22
  8337  00A76A                     
  8338                           ;standbyMode.c: 392: returnValue = 0;
  8339  00A76A  0E00               	movlw	0
  8340  00A76C  6E06               	movwf	getRound@returnValue+1,c
  8341  00A76E  0E00               	movlw	0
  8342  00A770  D7F6               	goto	L22
  8343  00A772                     l806:
  8344  00A772  C001  F003         	movff	getRound@code,??_getRound
  8345  00A776  C002  F004         	movff	getRound@code+1,??_getRound+1
  8346                           
  8347                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8348                           ; Switch size 1, requested type "space"
  8349                           ; Number of cases is 1, Range of values is 0 to 0
  8350                           ; switch strategies available:
  8351                           ; Name         Instructions Cycles
  8352                           ; simple_byte            4     3 (average)
  8353                           ;	Chosen strategy is simple_byte
  8354  00A77A  5004               	movf	??_getRound+1,w,c
  8355  00A77C  0A00               	xorlw	0	; case 0
  8356  00A77E  A4D8               	btfss	status,2,c
  8357  00A780  D7F4               	goto	l837
  8358                           
  8359                           ; Switch size 1, requested type "space"
  8360                           ; Number of cases is 29, Range of values is 1 to 45
  8361                           ; switch strategies available:
  8362                           ; Name         Instructions Cycles
  8363                           ; simple_byte           88    45 (average)
  8364                           ;	Chosen strategy is simple_byte
  8365  00A782  5003               	movf	??_getRound,w,c
  8366  00A784  0A01               	xorlw	1	; case 1
  8367  00A786  B4D8               	btfsc	status,2,c
  8368  00A788  D7EC               	goto	l834
  8369  00A78A  0A03               	xorlw	3	; case 2
  8370  00A78C  B4D8               	btfsc	status,2,c
  8371  00A78E  D7E4               	goto	l809
  8372  00A790  0A0A               	xorlw	10	; case 8
  8373  00A792  B4D8               	btfsc	status,2,c
  8374  00A794  D7E6               	goto	l834
  8375  00A796  0A01               	xorlw	1	; case 9
  8376  00A798  B4D8               	btfsc	status,2,c
  8377  00A79A  D7E3               	goto	l834
  8378  00A79C  0A03               	xorlw	3	; case 10
  8379  00A79E  B4D8               	btfsc	status,2,c
  8380  00A7A0  D7DB               	goto	l809
  8381  00A7A2  0A01               	xorlw	1	; case 11
  8382  00A7A4  B4D8               	btfsc	status,2,c
  8383  00A7A6  D7D8               	goto	l809
  8384  00A7A8  0A07               	xorlw	7	; case 12
  8385  00A7AA  B4D8               	btfsc	status,2,c
  8386  00A7AC  D7DA               	goto	l834
  8387  00A7AE  0A01               	xorlw	1	; case 13
  8388  00A7B0  B4D8               	btfsc	status,2,c
  8389  00A7B2  D7D7               	goto	l834
  8390  00A7B4  0A03               	xorlw	3	; case 14
  8391  00A7B6  B4D8               	btfsc	status,2,c
  8392  00A7B8  D7D4               	goto	l834
  8393  00A7BA  0A01               	xorlw	1	; case 15
  8394  00A7BC  B4D8               	btfsc	status,2,c
  8395  00A7BE  D7CC               	goto	l809
  8396  00A7C0  0A1F               	xorlw	31	; case 16
  8397  00A7C2  B4D8               	btfsc	status,2,c
  8398  00A7C4  D7C9               	goto	l809
  8399  00A7C6  0A06               	xorlw	6	; case 22
  8400  00A7C8  B4D8               	btfsc	status,2,c
  8401  00A7CA  D7C6               	goto	l809
  8402  00A7CC  0A01               	xorlw	1	; case 23
  8403  00A7CE  B4D8               	btfsc	status,2,c
  8404  00A7D0  D7C3               	goto	l809
  8405  00A7D2  0A0F               	xorlw	15	; case 24
  8406  00A7D4  B4D8               	btfsc	status,2,c
  8407  00A7D6  D7C0               	goto	l809
  8408  00A7D8  0A01               	xorlw	1	; case 25
  8409  00A7DA  B4D8               	btfsc	status,2,c
  8410  00A7DC  D7BD               	goto	l809
  8411  00A7DE  0A03               	xorlw	3	; case 26
  8412  00A7E0  B4D8               	btfsc	status,2,c
  8413  00A7E2  D7BF               	goto	l834
  8414  00A7E4  0A01               	xorlw	1	; case 27
  8415  00A7E6  B4D8               	btfsc	status,2,c
  8416  00A7E8  D7B7               	goto	l809
  8417  00A7EA  0A07               	xorlw	7	; case 28
  8418  00A7EC  B4D8               	btfsc	status,2,c
  8419  00A7EE  D7B9               	goto	l834
  8420  00A7F0  0A01               	xorlw	1	; case 29
  8421  00A7F2  B4D8               	btfsc	status,2,c
  8422  00A7F4  D7B6               	goto	l834
  8423  00A7F6  0A03               	xorlw	3	; case 30
  8424  00A7F8  B4D8               	btfsc	status,2,c
  8425  00A7FA  D7B3               	goto	l834
  8426  00A7FC  0A01               	xorlw	1	; case 31
  8427  00A7FE  B4D8               	btfsc	status,2,c
  8428  00A800  D7AB               	goto	l809
  8429  00A802  0A3F               	xorlw	63	; case 32
  8430  00A804  B4D8               	btfsc	status,2,c
  8431  00A806  D7AD               	goto	l834
  8432  00A808  0A01               	xorlw	1	; case 33
  8433  00A80A  B4D8               	btfsc	status,2,c
  8434  00A80C  D7AA               	goto	l834
  8435  00A80E  0A03               	xorlw	3	; case 34
  8436  00A810  B4D8               	btfsc	status,2,c
  8437  00A812  D7A7               	goto	l834
  8438  00A814  0A01               	xorlw	1	; case 35
  8439  00A816  B4D8               	btfsc	status,2,c
  8440  00A818  D79F               	goto	l809
  8441  00A81A  0A09               	xorlw	9	; case 42
  8442  00A81C  B4D8               	btfsc	status,2,c
  8443  00A81E  D79C               	goto	l809
  8444  00A820  0A01               	xorlw	1	; case 43
  8445  00A822  B4D8               	btfsc	status,2,c
  8446  00A824  D79E               	goto	l834
  8447  00A826  0A07               	xorlw	7	; case 44
  8448  00A828  B4D8               	btfsc	status,2,c
  8449  00A82A  D79B               	goto	l834
  8450  00A82C  0A01               	xorlw	1	; case 45
  8451  00A82E  B4D8               	btfsc	status,2,c
  8452  00A830  D798               	goto	l834
  8453  00A832  D79B               	goto	l837
  8454  00A834                     l808:
  8455                           
  8456                           ;standbyMode.c: 395: return returnValue;
  8457  00A834  C005  F001         	movff	getRound@returnValue,?_getRound
  8458  00A838  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  8459  00A83C  0012               	return		;funcret
  8460  00A83E                     __end_of_getRound:
  8461                           	opt stack 0
  8462                           tblptru	equ	0xFF8
  8463                           tblptrh	equ	0xFF7
  8464                           tblptrl	equ	0xFF6
  8465                           tablat	equ	0xFF5
  8466                           prodh	equ	0xFF4
  8467                           prodl	equ	0xFF3
  8468                           postinc0	equ	0xFEE
  8469                           wreg	equ	0xFE8
  8470                           postdec1	equ	0xFE5
  8471                           plusw1	equ	0xFE3
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           plusw2	equ	0xFDB
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function _getLong *****************
  8482 ;; Defined at:
  8483 ;;		line 556 in file "standbyMode.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  code            2    0[COMRAM] unsigned int 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  returnValue     2    4[COMRAM] unsigned int 
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  2    0[COMRAM] unsigned int 
  8490 ;; Registers used:
  8491 ;;		wreg, status,2, status,0
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;Total ram usage:        6 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; This function calls:
  8504 ;;		Nothing
  8505 ;; This function is called by:
  8506 ;;		_standbyMode
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           	psect	text10
  8511  00A83E                     __ptext10:
  8512                           	opt stack 0
  8513  00A83E                     _getLong:
  8514                           	opt stack 29
  8515                           
  8516                           ;standbyMode.c: 557: unsigned int returnValue = 0;
  8517                           
  8518                           ;incstack = 0
  8519  00A83E  0E00               	movlw	0
  8520  00A840  6E06               	movwf	getLong@returnValue+1,c
  8521  00A842  0E00               	movlw	0
  8522  00A844  6E05               	movwf	getLong@returnValue,c
  8523                           
  8524                           ;standbyMode.c: 559: switch(code){
  8525  00A846  D011               	goto	l876
  8526  00A848                     
  8527                           ;standbyMode.c: 577: returnValue = 1;
  8528  00A848  0E00               	movlw	0
  8529  00A84A  6E06               	movwf	getLong@returnValue+1,c
  8530  00A84C  0E01               	movlw	1
  8531  00A84E  D007               	goto	L36
  8532  00A850                     l885:
  8533                           
  8534                           ;standbyMode.c: 607: returnValue = 2;
  8535                           
  8536                           ;standbyMode.c: 606: case 18:
  8537                           
  8538                           ;standbyMode.c: 603: break;
  8539                           
  8540                           ;standbyMode.c: 602: returnValue = 1;
  8541                           
  8542                           ;standbyMode.c: 601: case 17:
  8543                           
  8544                           ;standbyMode.c: 598: break;
  8545                           
  8546                           ;standbyMode.c: 597: returnValue = 2;
  8547  00A850  0E00               	movlw	0
  8548  00A852  6E06               	movwf	getLong@returnValue+1,c
  8549  00A854  0E02               	movlw	2
  8550  00A856  D003               	goto	L36
  8551  00A858                     l888:
  8552                           
  8553                           ;standbyMode.c: 612: returnValue = 3;
  8554  00A858  0E00               	movlw	0
  8555  00A85A  6E06               	movwf	getLong@returnValue+1,c
  8556  00A85C  0E03               	movlw	3
  8557  00A85E                     L36:
  8558  00A85E  6E05               	movwf	getLong@returnValue,c
  8559                           
  8560                           ;standbyMode.c: 633: break;
  8561  00A860  D074               	goto	l878
  8562  00A862                     
  8563                           ;standbyMode.c: 731: returnValue = 0;
  8564  00A862  0E00               	movlw	0
  8565  00A864  6E06               	movwf	getLong@returnValue+1,c
  8566  00A866  0E00               	movlw	0
  8567  00A868  D7FA               	goto	L36
  8568  00A86A                     l876:
  8569  00A86A  C001  F003         	movff	getLong@code,??_getLong
  8570  00A86E  C002  F004         	movff	getLong@code+1,??_getLong+1
  8571                           
  8572                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8573                           ; Switch size 1, requested type "space"
  8574                           ; Number of cases is 1, Range of values is 0 to 0
  8575                           ; switch strategies available:
  8576                           ; Name         Instructions Cycles
  8577                           ; simple_byte            4     3 (average)
  8578                           ;	Chosen strategy is simple_byte
  8579  00A872  5004               	movf	??_getLong+1,w,c
  8580  00A874  0A00               	xorlw	0	; case 0
  8581  00A876  A4D8               	btfss	status,2,c
  8582  00A878  D7F4               	goto	l912
  8583                           
  8584                           ; Switch size 1, requested type "space"
  8585                           ; Number of cases is 34, Range of values is 5 to 46
  8586                           ; switch strategies available:
  8587                           ; Name         Instructions Cycles
  8588                           ; simple_byte          103    52 (average)
  8589                           ;	Chosen strategy is simple_byte
  8590  00A87A  5003               	movf	??_getLong,w,c
  8591  00A87C  0A05               	xorlw	5	; case 5
  8592  00A87E  B4D8               	btfsc	status,2,c
  8593  00A880  D7E3               	goto	l881
  8594  00A882  0A03               	xorlw	3	; case 6
  8595  00A884  B4D8               	btfsc	status,2,c
  8596  00A886  D7E4               	goto	l885
  8597  00A888  0A01               	xorlw	1	; case 7
  8598  00A88A  B4D8               	btfsc	status,2,c
  8599  00A88C  D7E5               	goto	l888
  8600  00A88E  0A0B               	xorlw	11	; case 12
  8601  00A890  B4D8               	btfsc	status,2,c
  8602  00A892  D7DA               	goto	l881
  8603  00A894  0A01               	xorlw	1	; case 13
  8604  00A896  B4D8               	btfsc	status,2,c
  8605  00A898  D7DB               	goto	l885
  8606  00A89A  0A03               	xorlw	3	; case 14
  8607  00A89C  B4D8               	btfsc	status,2,c
  8608  00A89E  D7DC               	goto	l888
  8609  00A8A0  0A01               	xorlw	1	; case 15
  8610  00A8A2  B4D8               	btfsc	status,2,c
  8611  00A8A4  D7D1               	goto	l881
  8612  00A8A6  0A1F               	xorlw	31	; case 16
  8613  00A8A8  B4D8               	btfsc	status,2,c
  8614  00A8AA  D7D2               	goto	l885
  8615  00A8AC  0A01               	xorlw	1	; case 17
  8616  00A8AE  B4D8               	btfsc	status,2,c
  8617  00A8B0  D7CB               	goto	l881
  8618  00A8B2  0A03               	xorlw	3	; case 18
  8619  00A8B4  B4D8               	btfsc	status,2,c
  8620  00A8B6  D7CC               	goto	l885
  8621  00A8B8  0A01               	xorlw	1	; case 19
  8622  00A8BA  B4D8               	btfsc	status,2,c
  8623  00A8BC  D7CD               	goto	l888
  8624  00A8BE  0A07               	xorlw	7	; case 20
  8625  00A8C0  B4D8               	btfsc	status,2,c
  8626  00A8C2  D7C2               	goto	l881
  8627  00A8C4  0A01               	xorlw	1	; case 21
  8628  00A8C6  B4D8               	btfsc	status,2,c
  8629  00A8C8  D7C3               	goto	l885
  8630  00A8CA  0A0D               	xorlw	13	; case 24
  8631  00A8CC  B4D8               	btfsc	status,2,c
  8632  00A8CE  D7BC               	goto	l881
  8633  00A8D0  0A01               	xorlw	1	; case 25
  8634  00A8D2  B4D8               	btfsc	status,2,c
  8635  00A8D4  D7BD               	goto	l885
  8636  00A8D6  0A05               	xorlw	5	; case 28
  8637  00A8D8  B4D8               	btfsc	status,2,c
  8638  00A8DA  D7BA               	goto	l885
  8639  00A8DC  0A01               	xorlw	1	; case 29
  8640  00A8DE  B4D8               	btfsc	status,2,c
  8641  00A8E0  D7BB               	goto	l888
  8642  00A8E2  0A03               	xorlw	3	; case 30
  8643  00A8E4  B4D8               	btfsc	status,2,c
  8644  00A8E6  D7B8               	goto	l888
  8645  00A8E8  0A01               	xorlw	1	; case 31
  8646  00A8EA  B4D8               	btfsc	status,2,c
  8647  00A8EC  D7B1               	goto	l885
  8648  00A8EE  0A3F               	xorlw	63	; case 32
  8649  00A8F0  B4D8               	btfsc	status,2,c
  8650  00A8F2  D7AA               	goto	l881
  8651  00A8F4  0A01               	xorlw	1	; case 33
  8652  00A8F6  B4D8               	btfsc	status,2,c
  8653  00A8F8  D7AB               	goto	l885
  8654  00A8FA  0A03               	xorlw	3	; case 34
  8655  00A8FC  B4D8               	btfsc	status,2,c
  8656  00A8FE  D7A4               	goto	l881
  8657  00A900  0A01               	xorlw	1	; case 35
  8658  00A902  B4D8               	btfsc	status,2,c
  8659  00A904  D7A1               	goto	l881
  8660  00A906  0A07               	xorlw	7	; case 36
  8661  00A908  B4D8               	btfsc	status,2,c
  8662  00A90A  D79E               	goto	l881
  8663  00A90C  0A01               	xorlw	1	; case 37
  8664  00A90E  B4D8               	btfsc	status,2,c
  8665  00A910  D79F               	goto	l885
  8666  00A912  0A03               	xorlw	3	; case 38
  8667  00A914  B4D8               	btfsc	status,2,c
  8668  00A916  D79C               	goto	l885
  8669  00A918  0A01               	xorlw	1	; case 39
  8670  00A91A  B4D8               	btfsc	status,2,c
  8671  00A91C  D79D               	goto	l888
  8672  00A91E  0A0F               	xorlw	15	; case 40
  8673  00A920  B4D8               	btfsc	status,2,c
  8674  00A922  D79A               	goto	l888
  8675  00A924  0A01               	xorlw	1	; case 41
  8676  00A926  B4D8               	btfsc	status,2,c
  8677  00A928  D793               	goto	l885
  8678  00A92A  0A03               	xorlw	3	; case 42
  8679  00A92C  B4D8               	btfsc	status,2,c
  8680  00A92E  D78C               	goto	l881
  8681  00A930  0A01               	xorlw	1	; case 43
  8682  00A932  B4D8               	btfsc	status,2,c
  8683  00A934  D789               	goto	l881
  8684  00A936  0A07               	xorlw	7	; case 44
  8685  00A938  B4D8               	btfsc	status,2,c
  8686  00A93A  D78A               	goto	l885
  8687  00A93C  0A01               	xorlw	1	; case 45
  8688  00A93E  B4D8               	btfsc	status,2,c
  8689  00A940  D78B               	goto	l888
  8690  00A942  0A03               	xorlw	3	; case 46
  8691  00A944  B4D8               	btfsc	status,2,c
  8692  00A946  D788               	goto	l888
  8693  00A948  D78C               	goto	l912
  8694  00A94A                     l878:
  8695                           
  8696                           ;standbyMode.c: 734: return returnValue;
  8697  00A94A  C005  F001         	movff	getLong@returnValue,?_getLong
  8698  00A94E  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  8699  00A952  0012               	return		;funcret
  8700  00A954                     __end_of_getLong:
  8701                           	opt stack 0
  8702                           tblptru	equ	0xFF8
  8703                           tblptrh	equ	0xFF7
  8704                           tblptrl	equ	0xFF6
  8705                           tablat	equ	0xFF5
  8706                           prodh	equ	0xFF4
  8707                           prodl	equ	0xFF3
  8708                           postinc0	equ	0xFEE
  8709                           wreg	equ	0xFE8
  8710                           postdec1	equ	0xFE5
  8711                           plusw1	equ	0xFE3
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           plusw2	equ	0xFDB
  8717                           fsr2h	equ	0xFDA
  8718                           fsr2l	equ	0xFD9
  8719                           status	equ	0xFD8
  8720                           
  8721 ;; *************** function _getFlat *****************
  8722 ;; Defined at:
  8723 ;;		line 399 in file "standbyMode.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  code            2    0[COMRAM] unsigned int 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  returnValue     2    4[COMRAM] unsigned int 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  2    0[COMRAM] unsigned int 
  8730 ;; Registers used:
  8731 ;;		wreg, status,2, status,0
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8737 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8741 ;;Total ram usage:        6 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		_standbyMode
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text11
  8751  00A65E                     __ptext11:
  8752                           	opt stack 0
  8753  00A65E                     _getFlat:
  8754                           	opt stack 29
  8755                           
  8756                           ;standbyMode.c: 400: unsigned int returnValue = 0;
  8757                           
  8758                           ;incstack = 0
  8759  00A65E  0E00               	movlw	0
  8760  00A660  6E06               	movwf	getFlat@returnValue+1,c
  8761  00A662  0E00               	movlw	0
  8762  00A664  6E05               	movwf	getFlat@returnValue,c
  8763                           
  8764                           ;standbyMode.c: 402: switch(code){
  8765  00A666  D00D               	goto	l841
  8766  00A668                     
  8767                           ;standbyMode.c: 405: returnValue = 1;
  8768  00A668  0E00               	movlw	0
  8769  00A66A  6E06               	movwf	getFlat@returnValue+1,c
  8770  00A66C  0E01               	movlw	1
  8771  00A66E  D003               	goto	L42
  8772  00A670                     
  8773                           ;standbyMode.c: 430: returnValue = 2;
  8774                           
  8775                           ;standbyMode.c: 429: case 11:
  8776                           
  8777                           ;standbyMode.c: 426: break;
  8778                           
  8779                           ;standbyMode.c: 425: returnValue = 1;
  8780                           
  8781                           ;standbyMode.c: 424: case 10:
  8782                           
  8783                           ;standbyMode.c: 421: break;
  8784                           
  8785                           ;standbyMode.c: 420: returnValue = 2;
  8786                           
  8787                           ;standbyMode.c: 419: case 9:
  8788                           
  8789                           ;standbyMode.c: 416: break;
  8790                           
  8791                           ;standbyMode.c: 415: returnValue = 1;
  8792                           
  8793                           ;standbyMode.c: 414: case 8:
  8794                           
  8795                           ;standbyMode.c: 411: break;
  8796                           
  8797                           ;standbyMode.c: 410: returnValue = 2;
  8798  00A670  0E00               	movlw	0
  8799  00A672  6E06               	movwf	getFlat@returnValue+1,c
  8800  00A674  0E02               	movlw	2
  8801  00A676                     L42:
  8802  00A676  6E05               	movwf	getFlat@returnValue,c
  8803                           
  8804                           ;standbyMode.c: 436: break;
  8805  00A678  D065               	goto	l843
  8806  00A67A                     
  8807                           ;standbyMode.c: 549: returnValue = 0;
  8808  00A67A  0E00               	movlw	0
  8809  00A67C  6E06               	movwf	getFlat@returnValue+1,c
  8810  00A67E  0E00               	movlw	0
  8811  00A680  D7FA               	goto	L42
  8812  00A682                     l841:
  8813  00A682  C001  F003         	movff	getFlat@code,??_getFlat
  8814  00A686  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  8815                           
  8816                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8817                           ; Switch size 1, requested type "space"
  8818                           ; Number of cases is 1, Range of values is 0 to 0
  8819                           ; switch strategies available:
  8820                           ; Name         Instructions Cycles
  8821                           ; simple_byte            4     3 (average)
  8822                           ;	Chosen strategy is simple_byte
  8823  00A68A  5004               	movf	??_getFlat+1,w,c
  8824  00A68C  0A00               	xorlw	0	; case 0
  8825  00A68E  A4D8               	btfss	status,2,c
  8826  00A690  D7F4               	goto	l872
  8827                           
  8828                           ; Switch size 1, requested type "space"
  8829                           ; Number of cases is 29, Range of values is 3 to 46
  8830                           ; switch strategies available:
  8831                           ; Name         Instructions Cycles
  8832                           ; simple_byte           88    45 (average)
  8833                           ;	Chosen strategy is simple_byte
  8834  00A692  5003               	movf	??_getFlat,w,c
  8835  00A694  0A03               	xorlw	3	; case 3
  8836  00A696  B4D8               	btfsc	status,2,c
  8837  00A698  D7E7               	goto	l842
  8838  00A69A  0A07               	xorlw	7	; case 4
  8839  00A69C  B4D8               	btfsc	status,2,c
  8840  00A69E  D7E8               	goto	l844
  8841  00A6A0  0A0C               	xorlw	12	; case 8
  8842  00A6A2  B4D8               	btfsc	status,2,c
  8843  00A6A4  D7E1               	goto	l842
  8844  00A6A6  0A01               	xorlw	1	; case 9
  8845  00A6A8  B4D8               	btfsc	status,2,c
  8846  00A6AA  D7E2               	goto	l844
  8847  00A6AC  0A03               	xorlw	3	; case 10
  8848  00A6AE  B4D8               	btfsc	status,2,c
  8849  00A6B0  D7DB               	goto	l842
  8850  00A6B2  0A01               	xorlw	1	; case 11
  8851  00A6B4  B4D8               	btfsc	status,2,c
  8852  00A6B6  D7DC               	goto	l844
  8853  00A6B8  0A1A               	xorlw	26	; case 17
  8854  00A6BA  B4D8               	btfsc	status,2,c
  8855  00A6BC  D7D5               	goto	l842
  8856  00A6BE  0A03               	xorlw	3	; case 18
  8857  00A6C0  B4D8               	btfsc	status,2,c
  8858  00A6C2  D7D2               	goto	l842
  8859  00A6C4  0A01               	xorlw	1	; case 19
  8860  00A6C6  B4D8               	btfsc	status,2,c
  8861  00A6C8  D7CF               	goto	l842
  8862  00A6CA  0A07               	xorlw	7	; case 20
  8863  00A6CC  B4D8               	btfsc	status,2,c
  8864  00A6CE  D7D0               	goto	l844
  8865  00A6D0  0A01               	xorlw	1	; case 21
  8866  00A6D2  B4D8               	btfsc	status,2,c
  8867  00A6D4  D7CD               	goto	l844
  8868  00A6D6  0A03               	xorlw	3	; case 22
  8869  00A6D8  B4D8               	btfsc	status,2,c
  8870  00A6DA  D7C6               	goto	l842
  8871  00A6DC  0A01               	xorlw	1	; case 23
  8872  00A6DE  B4D8               	btfsc	status,2,c
  8873  00A6E0  D7C7               	goto	l844
  8874  00A6E2  0A0D               	xorlw	13	; case 26
  8875  00A6E4  B4D8               	btfsc	status,2,c
  8876  00A6E6  D7C4               	goto	l844
  8877  00A6E8  0A01               	xorlw	1	; case 27
  8878  00A6EA  B4D8               	btfsc	status,2,c
  8879  00A6EC  D7C1               	goto	l844
  8880  00A6EE  0A3B               	xorlw	59	; case 32
  8881  00A6F0  B4D8               	btfsc	status,2,c
  8882  00A6F2  D7BA               	goto	l842
  8883  00A6F4  0A01               	xorlw	1	; case 33
  8884  00A6F6  B4D8               	btfsc	status,2,c
  8885  00A6F8  D7B7               	goto	l842
  8886  00A6FA  0A03               	xorlw	3	; case 34
  8887  00A6FC  B4D8               	btfsc	status,2,c
  8888  00A6FE  D7B8               	goto	l844
  8889  00A700  0A01               	xorlw	1	; case 35
  8890  00A702  B4D8               	btfsc	status,2,c
  8891  00A704  D7B1               	goto	l842
  8892  00A706  0A07               	xorlw	7	; case 36
  8893  00A708  B4D8               	btfsc	status,2,c
  8894  00A70A  D7B2               	goto	l844
  8895  00A70C  0A01               	xorlw	1	; case 37
  8896  00A70E  B4D8               	btfsc	status,2,c
  8897  00A710  D7AF               	goto	l844
  8898  00A712  0A03               	xorlw	3	; case 38
  8899  00A714  B4D8               	btfsc	status,2,c
  8900  00A716  D7A8               	goto	l842
  8901  00A718  0A01               	xorlw	1	; case 39
  8902  00A71A  B4D8               	btfsc	status,2,c
  8903  00A71C  D7A5               	goto	l842
  8904  00A71E  0A0F               	xorlw	15	; case 40
  8905  00A720  B4D8               	btfsc	status,2,c
  8906  00A722  D7A2               	goto	l842
  8907  00A724  0A01               	xorlw	1	; case 41
  8908  00A726  B4D8               	btfsc	status,2,c
  8909  00A728  D7A3               	goto	l844
  8910  00A72A  0A03               	xorlw	3	; case 42
  8911  00A72C  B4D8               	btfsc	status,2,c
  8912  00A72E  D79C               	goto	l842
  8913  00A730  0A01               	xorlw	1	; case 43
  8914  00A732  B4D8               	btfsc	status,2,c
  8915  00A734  D79D               	goto	l844
  8916  00A736  0A07               	xorlw	7	; case 44
  8917  00A738  B4D8               	btfsc	status,2,c
  8918  00A73A  D796               	goto	l842
  8919  00A73C  0A02               	xorlw	2	; case 46
  8920  00A73E  B4D8               	btfsc	status,2,c
  8921  00A740  D793               	goto	l842
  8922  00A742  D79B               	goto	l872
  8923  00A744                     l843:
  8924                           
  8925                           ;standbyMode.c: 552: return returnValue;
  8926  00A744  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8927  00A748  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8928  00A74C  0012               	return		;funcret
  8929  00A74E                     __end_of_getFlat:
  8930                           	opt stack 0
  8931                           tblptru	equ	0xFF8
  8932                           tblptrh	equ	0xFF7
  8933                           tblptrl	equ	0xFF6
  8934                           tablat	equ	0xFF5
  8935                           prodh	equ	0xFF4
  8936                           prodl	equ	0xFF3
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           plusw1	equ	0xFE3
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           plusw2	equ	0xFDB
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _food_press *****************
  8951 ;; Defined at:
  8952 ;;		line 1135 in file "standbyMode.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  dietSum         2   40[COMRAM] unsigned int 
  8955 ;;  drawer          2   42[COMRAM] unsigned int 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  keypress        1   54[COMRAM] unsigned char 
  8958 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8959 ;;  count           2   52[COMRAM] unsigned int 
  8960 ;;  isValid         2   50[COMRAM] unsigned int 
  8961 ;;  backCheck       2   48[COMRAM] unsigned int 
  8962 ;;  tally           2   46[COMRAM] unsigned int 
  8963 ;; Return value:  Size  Location     Type
  8964 ;;                  2   40[COMRAM] unsigned int 
  8965 ;; Registers used:
  8966 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;Total ram usage:       23 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    3
  8979 ;; This function calls:
  8980 ;;		_check_food
  8981 ;;		_get_digits
  8982 ;;		_lcdInst
  8983 ;;		_printf
  8984 ;;		_putch
  8985 ;; This function is called by:
  8986 ;;		_standbyMode
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text12
  8991  00B3DC                     __ptext12:
  8992                           	opt stack 0
  8993  00B3DC                     _food_press:
  8994                           	opt stack 26
  8995                           
  8996                           ;incstack = 0
  8997                           ;standbyMode.c: 1137: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8998  00B3DC  0E01               	movlw	1
  8999  00B3DE  EC16  F04D         	call	_lcdInst
  9000  00B3E2  0EC3               	movlw	195
  9001  00B3E4  6E2D               	movwf	??_food_press& (0+255),c
  9002  00B3E6  0ECD               	movlw	205
  9003  00B3E8                     u15057:
  9004  00B3E8  2EE8               	decfsz	wreg,f,c
  9005  00B3EA  D7FE               	bra	u15057
  9006  00B3EC  2E2D               	decfsz	??_food_press& (0+255),f,c
  9007  00B3EE  D7FC               	bra	u15057
  9008  00B3F0  F000               	nop	
  9009                           
  9010                           ;standbyMode.c: 1138: printf("Drawer %i food:", drawer);
  9011  00B3F2  0E20               	movlw	low STR_105
  9012  00B3F4  6E0D               	movwf	printf@f,c
  9013  00B3F6  0EFD               	movlw	high STR_105
  9014  00B3F8  6E0E               	movwf	printf@f+1,c
  9015  00B3FA  C02B  F00F         	movff	food_press@drawer,?_printf+2
  9016  00B3FE  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  9017  00B402  EC0C  F061         	call	_printf	;wreg free
  9018                           
  9019                           ;standbyMode.c: 1139: lcdInst(0xC0);;
  9020  00B406  0EC0               	movlw	192
  9021  00B408  EC16  F04D         	call	_lcdInst
  9022                           
  9023                           ;standbyMode.c: 1141: unsigned int tally = 0;
  9024  00B40C  0E00               	movlw	0
  9025  00B40E  6E30               	movwf	food_press@tally+1,c
  9026  00B410  0E00               	movlw	0
  9027  00B412  6E2F               	movwf	food_press@tally,c
  9028                           
  9029                           ;standbyMode.c: 1142: unsigned int count = 0;
  9030  00B414  0E00               	movlw	0
  9031  00B416  6E36               	movwf	food_press@count+1,c
  9032  00B418  0E00               	movlw	0
  9033  00B41A  6E35               	movwf	food_press@count,c
  9034                           
  9035                           ;standbyMode.c: 1143: unsigned int foodTable[4] = {0, 0, 0, 0};
  9036  00B41C  EE20  F0D0         	lfsr	2,food_press@F3117
  9037  00B420  EE10  F038         	lfsr	1,food_press@foodTable
  9038  00B424  0E07               	movlw	7
  9039  00B426                     u12091:
  9040  00B426  CFDB FFE3          	movff	plusw2,plusw1
  9041  00B42A  06E8               	decf	wreg,f,c
  9042  00B42C  E2FC               	bc	u12091
  9043                           
  9044                           ;standbyMode.c: 1144: unsigned int isValid = 0;
  9045  00B42E  0E00               	movlw	0
  9046  00B430  6E34               	movwf	food_press@isValid+1,c
  9047  00B432  0E00               	movlw	0
  9048  00B434  6E33               	movwf	food_press@isValid,c
  9049                           
  9050                           ;standbyMode.c: 1145: unsigned int backCheck = 0;
  9051  00B436  0E00               	movlw	0
  9052  00B438  6E32               	movwf	food_press@backCheck+1,c
  9053  00B43A  0E00               	movlw	0
  9054  00B43C  6E31               	movwf	food_press@backCheck,c
  9055                           
  9056                           ;standbyMode.c: 1146: tally = get_digits(dietSum);
  9057  00B43E  C029  F001         	movff	food_press@dietSum,get_digits@sum
  9058  00B442  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  9059  00B446  ECF9  F051         	call	_get_digits	;wreg free
  9060  00B44A  C001  F02F         	movff	?_get_digits,food_press@tally
  9061  00B44E  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  9062  00B452                     
  9063                           ;standbyMode.c: 1149: while(PORTBbits.RB1 == 0){ continue; }
  9064  00B452  A281               	btfss	3969,1,c	;volatile
  9065  00B454  D7FE               	goto	l1067
  9066                           
  9067                           ;standbyMode.c: 1150: unsigned char keypress = (PORTB & 0xF0) >> 4;
  9068  00B456  3881               	swapf	3969,w,c	;volatile
  9069  00B458  0B0F               	andlw	15
  9070  00B45A  0B0F               	andlw	15
  9071  00B45C  6E37               	movwf	food_press@keypress,c
  9072  00B45E  B281               	btfsc	3969,1,c	;volatile
  9073  00B460  D7FE               	goto	l1072
  9074                           
  9075                           ;standbyMode.c: 1153: if(keypress == 15){
  9076  00B462  0E0F               	movlw	15
  9077  00B464  1837               	xorwf	food_press@keypress,w,c
  9078  00B466  B4D8               	btfsc	status,2,c
  9079  00B468  D070               	goto	l1075
  9080                           
  9081                           ;standbyMode.c: 1156: else if (keypress == 14){
  9082                           
  9083                           ;standbyMode.c: 1155: }
  9084                           
  9085                           ;standbyMode.c: 1154: break;
  9086  00B46A  0E0E               	movlw	14
  9087  00B46C  1837               	xorwf	food_press@keypress,w,c
  9088  00B46E  A4D8               	btfss	status,2,c
  9089  00B470  D005               	goto	l1077
  9090                           
  9091                           ;standbyMode.c: 1157: backCheck = 1;
  9092  00B472  0E00               	movlw	0
  9093  00B474  6E32               	movwf	food_press@backCheck+1,c
  9094  00B476  0E01               	movlw	1
  9095  00B478  6E31               	movwf	food_press@backCheck,c
  9096                           
  9097                           ;standbyMode.c: 1158: break;
  9098  00B47A  D067               	goto	l1075
  9099  00B47C                     l1077:
  9100                           
  9101                           ;standbyMode.c: 1160: else if (keypress == 0 || keypress == 1 || keypress == 2){
  9102  00B47C  5037               	movf	food_press@keypress,w,c
  9103  00B47E  B4D8               	btfsc	status,2,c
  9104  00B480  D007               	goto	u12160
  9105  00B482  0437               	decf	food_press@keypress,w,c
  9106  00B484  B4D8               	btfsc	status,2,c
  9107  00B486  D004               	goto	u12160
  9108  00B488  0E02               	movlw	2
  9109  00B48A  1837               	xorwf	food_press@keypress,w,c
  9110  00B48C  A4D8               	btfss	status,2,c
  9111  00B48E  D02C               	goto	l1079
  9112  00B490                     u12160:
  9113                           
  9114                           ;standbyMode.c: 1161: if (count < tally){
  9115  00B490  502F               	movf	food_press@tally,w,c
  9116  00B492  5C35               	subwf	food_press@count,w,c
  9117  00B494  5030               	movf	food_press@tally+1,w,c
  9118  00B496  5836               	subwfb	food_press@count+1,w,c
  9119  00B498  B0D8               	btfsc	status,0,c
  9120  00B49A  D7DB               	goto	l1067
  9121                           
  9122                           ;standbyMode.c: 1162: putch(input[keypress]);
  9123  00B49C  5037               	movf	food_press@keypress,w,c
  9124  00B49E  0D01               	mullw	1
  9125  00B4A0  0E36               	movlw	low _input
  9126  00B4A2  24F3               	addwf	prodl,w,c
  9127  00B4A4  6EF6               	movwf	tblptrl,c
  9128  00B4A6  0EFC               	movlw	high _input
  9129  00B4A8  20F4               	addwfc	prodh,w,c
  9130  00B4AA  6EF7               	movwf	tblptrh,c
  9131  00B4AC                     	if	1	;There are 3 active tblptr bytes
  9132  00B4AC  6AF8               	clrf	tblptru,c
  9133  00B4AE  0E00               	movlw	low (__mediumconst shr (0+16))
  9134  00B4B0  22F8               	addwfc	tblptru,f,c
  9135  00B4B2                     	endif
  9136  00B4B2  0008               	tblrd		*
  9137  00B4B4  50F5               	movf	tablat,w,c
  9138  00B4B6  EC2A  F04D         	call	_putch
  9139                           
  9140                           ;standbyMode.c: 1163: foodTable[count] = keypress + 1;
  9141  00B4BA  5037               	movf	food_press@keypress,w,c
  9142  00B4BC  6E2D               	movwf	??_food_press& (0+255),c
  9143  00B4BE  6A2E               	clrf	(??_food_press+1)& (0+255),c
  9144  00B4C0  0E01               	movlw	1
  9145  00B4C2  262D               	addwf	??_food_press,f,c
  9146  00B4C4  0E00               	movlw	0
  9147  00B4C6  222E               	addwfc	??_food_press+1,f,c
  9148  00B4C8  90D8               	bcf	status,0,c
  9149  00B4CA  3435               	rlcf	food_press@count,w,c
  9150  00B4CC  6ED9               	movwf	fsr2l,c
  9151  00B4CE  3436               	rlcf	food_press@count+1,w,c
  9152  00B4D0  6EDA               	movwf	fsr2h,c
  9153  00B4D2  0E38               	movlw	low food_press@foodTable
  9154  00B4D4  26D9               	addwf	fsr2l,f,c
  9155  00B4D6  0E00               	movlw	high food_press@foodTable
  9156  00B4D8  22DA               	addwfc	fsr2h,f,c
  9157  00B4DA  C02D  FFDE         	movff	??_food_press,postinc2
  9158  00B4DE  C02E  FFDD         	movff	??_food_press+1,postdec2
  9159                           
  9160                           ;standbyMode.c: 1164: count += 1;
  9161  00B4E2  4A35               	infsnz	food_press@count,f,c
  9162  00B4E4  2A36               	incf	food_press@count+1,f,c
  9163                           
  9164                           ;standbyMode.c: 1165: }
  9165                           ;standbyMode.c: 1166: }
  9166  00B4E6  D7B5               	goto	l1067
  9167  00B4E8                     l1079:
  9168                           
  9169                           ;standbyMode.c: 1167: else if (keypress == 12){
  9170  00B4E8  0E0C               	movlw	12
  9171  00B4EA  1837               	xorwf	food_press@keypress,w,c
  9172  00B4EC  A4D8               	btfss	status,2,c
  9173  00B4EE  D7B1               	goto	l1067
  9174                           
  9175                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9176  00B4F0  0E01               	movlw	1
  9177  00B4F2  EC16  F04D         	call	_lcdInst
  9178  00B4F6  0EC3               	movlw	195
  9179  00B4F8  6E2D               	movwf	??_food_press& (0+255),c
  9180  00B4FA  0ECD               	movlw	205
  9181  00B4FC                     u15067:
  9182  00B4FC  2EE8               	decfsz	wreg,f,c
  9183  00B4FE  D7FE               	bra	u15067
  9184  00B500  2E2D               	decfsz	??_food_press& (0+255),f,c
  9185  00B502  D7FC               	bra	u15067
  9186  00B504  F000               	nop	
  9187                           
  9188                           ;standbyMode.c: 1169: printf("Drawer %i food:", drawer);
  9189  00B506  0E20               	movlw	low STR_105
  9190  00B508  6E0D               	movwf	printf@f,c
  9191  00B50A  0EFD               	movlw	high STR_105
  9192  00B50C  6E0E               	movwf	printf@f+1,c
  9193  00B50E  C02B  F00F         	movff	food_press@drawer,?_printf+2
  9194  00B512  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  9195  00B516  EC0C  F061         	call	_printf	;wreg free
  9196                           
  9197                           ;standbyMode.c: 1170: lcdInst(0xC0);;
  9198  00B51A  0EC0               	movlw	192
  9199  00B51C  EC16  F04D         	call	_lcdInst
  9200                           
  9201                           ;standbyMode.c: 1171: count = 0;
  9202  00B520  0E00               	movlw	0
  9203  00B522  6E36               	movwf	food_press@count+1,c
  9204  00B524  0E00               	movlw	0
  9205  00B526  6E35               	movwf	food_press@count,c
  9206                           
  9207                           ;standbyMode.c: 1172: foodTable[0] = 0;
  9208  00B528  0E00               	movlw	0
  9209  00B52A  6E39               	movwf	food_press@foodTable+1,c
  9210  00B52C  0E00               	movlw	0
  9211  00B52E  6E38               	movwf	food_press@foodTable,c
  9212                           
  9213                           ;standbyMode.c: 1173: foodTable[1] = 0;
  9214  00B530  0E00               	movlw	0
  9215  00B532  6E3B               	movwf	food_press@foodTable+3,c
  9216  00B534  0E00               	movlw	0
  9217  00B536  6E3A               	movwf	food_press@foodTable+2,c
  9218                           
  9219                           ;standbyMode.c: 1174: foodTable[2] = 0;
  9220  00B538  0E00               	movlw	0
  9221  00B53A  6E3D               	movwf	food_press@foodTable+5,c
  9222  00B53C  0E00               	movlw	0
  9223  00B53E  6E3C               	movwf	food_press@foodTable+4,c
  9224                           
  9225                           ;standbyMode.c: 1175: foodTable[3] = 0;
  9226  00B540  0E00               	movlw	0
  9227  00B542  6E3F               	movwf	food_press@foodTable+7,c
  9228  00B544  0E00               	movlw	0
  9229  00B546  6E3E               	movwf	food_press@foodTable+6,c
  9230  00B548  D784               	goto	l1067
  9231  00B54A                     l1075:
  9232                           
  9233                           ;standbyMode.c: 1176: }
  9234                           ;standbyMode.c: 1177: }
  9235                           ;standbyMode.c: 1179: if (backCheck == 1){
  9236  00B54A  0431               	decf	food_press@backCheck,w,c
  9237  00B54C  1032               	iorwf	food_press@backCheck+1,w,c
  9238  00B54E  A4D8               	btfss	status,2,c
  9239  00B550  D005               	goto	l1086
  9240                           
  9241                           ;standbyMode.c: 1180: return 100;
  9242  00B552  0E00               	movlw	0
  9243  00B554  6E2A               	movwf	?_food_press+1,c
  9244  00B556  0E64               	movlw	100
  9245  00B558  6E29               	movwf	?_food_press,c
  9246                           
  9247                           ;standbyMode.c: 1181: }
  9248  00B55A  0012               	return	
  9249  00B55C                     l1086:
  9250                           
  9251                           ;standbyMode.c: 1182: else {
  9252                           ;standbyMode.c: 1183: isValid = check_food(dietSum, foodTable);
  9253  00B55C  C029  F001         	movff	food_press@dietSum,check_food@sum
  9254  00B560  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  9255  00B564  0E38               	movlw	low food_press@foodTable
  9256  00B566  6E03               	movwf	check_food@foodInput,c
  9257  00B568  0E00               	movlw	high food_press@foodTable
  9258  00B56A  6E04               	movwf	check_food@foodInput+1,c
  9259  00B56C  ECCE  F06B         	call	_check_food	;wreg free
  9260  00B570  C001  F033         	movff	?_check_food,food_press@isValid
  9261  00B574  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  9262                           
  9263                           ;standbyMode.c: 1185: if (isValid == 0){
  9264  00B578  5033               	movf	food_press@isValid,w,c
  9265  00B57A  1034               	iorwf	food_press@isValid+1,w,c
  9266  00B57C  A4D8               	btfss	status,2,c
  9267  00B57E  D026               	goto	l1089
  9268                           
  9269                           ;standbyMode.c: 1186: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9270  00B580  0E01               	movlw	1
  9271  00B582  EC16  F04D         	call	_lcdInst
  9272  00B586  0EC3               	movlw	195
  9273  00B588  6E2D               	movwf	??_food_press& (0+255),c
  9274  00B58A  0ECD               	movlw	205
  9275  00B58C                     u15077:
  9276  00B58C  2EE8               	decfsz	wreg,f,c
  9277  00B58E  D7FE               	bra	u15077
  9278  00B590  2E2D               	decfsz	??_food_press& (0+255),f,c
  9279  00B592  D7FC               	bra	u15077
  9280  00B594  F000               	nop	
  9281                           
  9282                           ;standbyMode.c: 1187: printf("Invalid food!");
  9283  00B596  0E55               	movlw	low STR_107
  9284  00B598  6E0D               	movwf	printf@f,c
  9285  00B59A  0EFE               	movlw	high STR_107
  9286  00B59C  6E0E               	movwf	printf@f+1,c
  9287  00B59E  EC0C  F061         	call	_printf	;wreg free
  9288                           
  9289                           ;standbyMode.c: 1188: lcdInst(0xC0);;
  9290  00B5A2  0EC0               	movlw	192
  9291  00B5A4  EC16  F04D         	call	_lcdInst
  9292                           
  9293                           ;standbyMode.c: 1189: printf("Try again.");
  9294  00B5A8  0EFD               	movlw	low STR_108
  9295  00B5AA  6E0D               	movwf	printf@f,c
  9296  00B5AC  0EFE               	movlw	high STR_108
  9297  00B5AE  6E0E               	movwf	printf@f+1,c
  9298  00B5B0  EC0C  F061         	call	_printf	;wreg free
  9299                           
  9300                           ;standbyMode.c: 1190: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9301  00B5B4  0E33               	movlw	51
  9302  00B5B6  6E2E               	movwf	(??_food_press+1)& (0+255),c
  9303  00B5B8  0EBB               	movlw	187
  9304  00B5BA  6E2D               	movwf	??_food_press& (0+255),c
  9305  00B5BC  0EE0               	movlw	224
  9306  00B5BE                     u15087:
  9307  00B5BE  2EE8               	decfsz	wreg,f,c
  9308  00B5C0  D7FE               	bra	u15087
  9309  00B5C2  2E2D               	decfsz	??_food_press& (0+255),f,c
  9310  00B5C4  D7FC               	bra	u15087
  9311  00B5C6  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  9312  00B5C8  D7FA               	bra	u15087
  9313                           
  9314                           ;standbyMode.c: 1191: goto START;
  9315  00B5CA  D708               	goto	_food_press
  9316  00B5CC                     l1089:
  9317                           
  9318                           ;standbyMode.c: 1193: else {
  9319                           ;standbyMode.c: 1194: return isValid;
  9320  00B5CC  C033  F029         	movff	food_press@isValid,?_food_press
  9321  00B5D0  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  9322  00B5D4  0012               	return	
  9323  00B5D6                     __end_of_food_press:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           postinc0	equ	0xFEE
  9332                           wreg	equ	0xFE8
  9333                           postdec1	equ	0xFE5
  9334                           plusw1	equ	0xFE3
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           plusw2	equ	0xFDB
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _get_digits *****************
  9345 ;; Defined at:
  9346 ;;		line 1030 in file "standbyMode.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  sum             2    0[COMRAM] unsigned int 
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;  count           2    4[COMRAM] unsigned int 
  9351 ;; Return value:  Size  Location     Type
  9352 ;;                  2    0[COMRAM] unsigned int 
  9353 ;; Registers used:
  9354 ;;		wreg, status,2, status,0
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9360 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;Total ram usage:        6 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; This function calls:
  9367 ;;		Nothing
  9368 ;; This function is called by:
  9369 ;;		_food_press
  9370 ;; This function uses a non-reentrant model
  9371 ;;
  9372                           
  9373                           	psect	text13
  9374  00A3F2                     __ptext13:
  9375                           	opt stack 0
  9376  00A3F2                     _get_digits:
  9377                           	opt stack 28
  9378                           
  9379                           ;standbyMode.c: 1032: unsigned int count = 0;
  9380                           
  9381                           ;incstack = 0
  9382  00A3F2  0E00               	movlw	0
  9383  00A3F4  6E06               	movwf	get_digits@count+1,c
  9384  00A3F6  0E00               	movlw	0
  9385  00A3F8  6E05               	movwf	get_digits@count,c
  9386                           
  9387                           ;standbyMode.c: 1034: switch(sum){
  9388  00A3FA  D015               	goto	l1040
  9389  00A3FC                     
  9390                           ;standbyMode.c: 1047: count = 1;
  9391                           
  9392                           ;standbyMode.c: 1046: case 12:
  9393                           
  9394                           ;standbyMode.c: 1043: break;
  9395                           
  9396                           ;standbyMode.c: 1042: count = 1;
  9397                           
  9398                           ;standbyMode.c: 1041: case 7:
  9399                           
  9400                           ;standbyMode.c: 1038: break;
  9401                           
  9402                           ;standbyMode.c: 1037: count = 1;
  9403  00A3FC  0E00               	movlw	0
  9404  00A3FE  6E06               	movwf	get_digits@count+1,c
  9405  00A400  0E01               	movlw	1
  9406  00A402                     L43:
  9407  00A402  6E05               	movwf	get_digits@count,c
  9408                           
  9409                           ;standbyMode.c: 1053: break;
  9410  00A404  D050               	goto	l1042
  9411  00A406                     
  9412                           ;standbyMode.c: 1062: count = 2;
  9413                           
  9414                           ;standbyMode.c: 1061: case 19:
  9415                           
  9416                           ;standbyMode.c: 1058: break;
  9417                           
  9418                           ;standbyMode.c: 1057: count = 2;
  9419  00A406  0E00               	movlw	0
  9420  00A408  6E06               	movwf	get_digits@count+1,c
  9421  00A40A  0E02               	movlw	2
  9422  00A40C  D7FA               	goto	L43
  9423  00A40E                     
  9424                           ;standbyMode.c: 1097: count = 3;
  9425                           
  9426                           ;standbyMode.c: 1096: case 31:
  9427                           
  9428                           ;standbyMode.c: 1093: break;
  9429                           
  9430                           ;standbyMode.c: 1092: count = 3;
  9431                           
  9432                           ;standbyMode.c: 1091: case 26:
  9433                           
  9434                           ;standbyMode.c: 1088: break;
  9435                           
  9436                           ;standbyMode.c: 1087: count = 3;
  9437                           
  9438                           ;standbyMode.c: 1086: case 22:
  9439                           
  9440                           ;standbyMode.c: 1083: break;
  9441                           
  9442                           ;standbyMode.c: 1082: count = 3;
  9443                           
  9444                           ;standbyMode.c: 1081: case 27:
  9445                           
  9446                           ;standbyMode.c: 1078: break;
  9447                           
  9448                           ;standbyMode.c: 1077: count = 3;
  9449                           
  9450                           ;standbyMode.c: 1076: case 17:
  9451                           
  9452                           ;standbyMode.c: 1073: break;
  9453                           
  9454                           ;standbyMode.c: 1072: count = 3;
  9455                           
  9456                           ;standbyMode.c: 1071: case 18:
  9457                           
  9458                           ;standbyMode.c: 1068: break;
  9459                           
  9460                           ;standbyMode.c: 1067: count = 3;
  9461  00A40E  0E00               	movlw	0
  9462  00A410  6E06               	movwf	get_digits@count+1,c
  9463  00A412  0E03               	movlw	3
  9464  00A414  D7F6               	goto	L43
  9465  00A416                     
  9466                           ;standbyMode.c: 1122: count = 4;
  9467                           
  9468                           ;standbyMode.c: 1121: case 43:
  9469                           
  9470                           ;standbyMode.c: 1118: break;
  9471                           
  9472                           ;standbyMode.c: 1117: count = 4;
  9473                           
  9474                           ;standbyMode.c: 1116: case 39:
  9475                           
  9476                           ;standbyMode.c: 1113: break;
  9477                           
  9478                           ;standbyMode.c: 1112: count = 4;
  9479                           
  9480                           ;standbyMode.c: 1111: case 34:
  9481                           
  9482                           ;standbyMode.c: 1108: break;
  9483                           
  9484                           ;standbyMode.c: 1107: count = 4;
  9485                           
  9486                           ;standbyMode.c: 1106: case 29:
  9487                           
  9488                           ;standbyMode.c: 1103: break;
  9489                           
  9490                           ;standbyMode.c: 1102: count = 4;
  9491  00A416  0E00               	movlw	0
  9492  00A418  6E06               	movwf	get_digits@count+1,c
  9493  00A41A  0E04               	movlw	4
  9494  00A41C  D7F2               	goto	L43
  9495  00A41E                     
  9496                           ;standbyMode.c: 1127: count = 0;
  9497  00A41E  0E00               	movlw	0
  9498  00A420  6E06               	movwf	get_digits@count+1,c
  9499  00A422  0E00               	movlw	0
  9500  00A424  D7EE               	goto	L43
  9501  00A426                     l1040:
  9502  00A426  C001  F003         	movff	get_digits@sum,??_get_digits
  9503  00A42A  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  9504                           
  9505                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9506                           ; Switch size 1, requested type "space"
  9507                           ; Number of cases is 1, Range of values is 0 to 0
  9508                           ; switch strategies available:
  9509                           ; Name         Instructions Cycles
  9510                           ; simple_byte            4     3 (average)
  9511                           ;	Chosen strategy is simple_byte
  9512  00A42E  5004               	movf	??_get_digits+1,w,c
  9513  00A430  0A00               	xorlw	0	; case 0
  9514  00A432  A4D8               	btfss	status,2,c
  9515  00A434  D7F4               	goto	l1060
  9516                           
  9517                           ; Switch size 1, requested type "space"
  9518                           ; Number of cases is 18, Range of values is 3 to 43
  9519                           ; switch strategies available:
  9520                           ; Name         Instructions Cycles
  9521                           ; simple_byte           55    28 (average)
  9522                           ;	Chosen strategy is simple_byte
  9523  00A436  5003               	movf	??_get_digits,w,c
  9524  00A438  0A03               	xorlw	3	; case 3
  9525  00A43A  B4D8               	btfsc	status,2,c
  9526  00A43C  D7DF               	goto	l1041
  9527  00A43E  0A04               	xorlw	4	; case 7
  9528  00A440  B4D8               	btfsc	status,2,c
  9529  00A442  D7DC               	goto	l1041
  9530  00A444  0A0D               	xorlw	13	; case 10
  9531  00A446  B4D8               	btfsc	status,2,c
  9532  00A448  D7DE               	goto	l1046
  9533  00A44A  0A06               	xorlw	6	; case 12
  9534  00A44C  B4D8               	btfsc	status,2,c
  9535  00A44E  D7D6               	goto	l1041
  9536  00A450  0A01               	xorlw	1	; case 13
  9537  00A452  B4D8               	btfsc	status,2,c
  9538  00A454  D7DC               	goto	l1048
  9539  00A456  0A02               	xorlw	2	; case 15
  9540  00A458  B4D8               	btfsc	status,2,c
  9541  00A45A  D7D5               	goto	l1046
  9542  00A45C  0A1E               	xorlw	30	; case 17
  9543  00A45E  B4D8               	btfsc	status,2,c
  9544  00A460  D7D6               	goto	l1048
  9545  00A462  0A03               	xorlw	3	; case 18
  9546  00A464  B4D8               	btfsc	status,2,c
  9547  00A466  D7D3               	goto	l1048
  9548  00A468  0A01               	xorlw	1	; case 19
  9549  00A46A  B4D8               	btfsc	status,2,c
  9550  00A46C  D7CC               	goto	l1046
  9551  00A46E  0A05               	xorlw	5	; case 22
  9552  00A470  B4D8               	btfsc	status,2,c
  9553  00A472  D7CD               	goto	l1048
  9554  00A474  0A0F               	xorlw	15	; case 25
  9555  00A476  B4D8               	btfsc	status,2,c
  9556  00A478  D7CE               	goto	l1055
  9557  00A47A  0A03               	xorlw	3	; case 26
  9558  00A47C  B4D8               	btfsc	status,2,c
  9559  00A47E  D7C7               	goto	l1048
  9560  00A480  0A01               	xorlw	1	; case 27
  9561  00A482  B4D8               	btfsc	status,2,c
  9562  00A484  D7C4               	goto	l1048
  9563  00A486  0A06               	xorlw	6	; case 29
  9564  00A488  B4D8               	btfsc	status,2,c
  9565  00A48A  D7C5               	goto	l1055
  9566  00A48C  0A02               	xorlw	2	; case 31
  9567  00A48E  B4D8               	btfsc	status,2,c
  9568  00A490  D7BE               	goto	l1048
  9569  00A492  0A3D               	xorlw	61	; case 34
  9570  00A494  B4D8               	btfsc	status,2,c
  9571  00A496  D7BF               	goto	l1055
  9572  00A498  0A05               	xorlw	5	; case 39
  9573  00A49A  B4D8               	btfsc	status,2,c
  9574  00A49C  D7BC               	goto	l1055
  9575  00A49E  0A0C               	xorlw	12	; case 43
  9576  00A4A0  B4D8               	btfsc	status,2,c
  9577  00A4A2  D7B9               	goto	l1055
  9578  00A4A4  D7BC               	goto	l1060
  9579  00A4A6                     l1042:
  9580                           
  9581                           ;standbyMode.c: 1130: return count;
  9582  00A4A6  C005  F001         	movff	get_digits@count,?_get_digits
  9583  00A4AA  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  9584  00A4AE  0012               	return		;funcret
  9585  00A4B0                     __end_of_get_digits:
  9586                           	opt stack 0
  9587                           tblptru	equ	0xFF8
  9588                           tblptrh	equ	0xFF7
  9589                           tblptrl	equ	0xFF6
  9590                           tablat	equ	0xFF5
  9591                           prodh	equ	0xFF4
  9592                           prodl	equ	0xFF3
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           postdec1	equ	0xFE5
  9596                           plusw1	equ	0xFE3
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           plusw2	equ	0xFDB
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _check_food *****************
  9607 ;; Defined at:
  9608 ;;		line 21 in file "standbyMode.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;  sum             2    0[COMRAM] unsigned int 
  9611 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  9612 ;;		 -> food_press@foodTable(8), 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  returnValue     2    6[COMRAM] unsigned int 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  2    0[COMRAM] unsigned int 
  9617 ;; Registers used:
  9618 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        8 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_food_press
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text14
  9638  00D79C                     __ptext14:
  9639                           	opt stack 0
  9640  00D79C                     _check_food:
  9641                           	opt stack 28
  9642                           
  9643                           ;standbyMode.c: 22: unsigned int returnValue = 0;
  9644                           
  9645                           ;incstack = 0
  9646  00D79C  0E00               	movlw	0
  9647  00D79E  6E08               	movwf	check_food@returnValue+1,c
  9648  00D7A0  0E00               	movlw	0
  9649  00D7A2  6E07               	movwf	check_food@returnValue,c
  9650                           
  9651                           ;standbyMode.c: 24: switch(sum){
  9652  00D7A4  EFE3  F070         	goto	l708
  9653  00D7A8                     
  9654                           ;standbyMode.c: 27: if (foodInput[0] == 1){
  9655  00D7A8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9656  00D7AC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9657  00D7B0  04DE               	decf	postinc2,w,c
  9658  00D7B2  10DE               	iorwf	postinc2,w,c
  9659  00D7B4  A4D8               	btfss	status,2,c
  9660  00D7B6  D005               	goto	l710
  9661                           
  9662                           ;standbyMode.c: 28: returnValue = 1;
  9663  00D7B8  0E00               	movlw	0
  9664  00D7BA  6E08               	movwf	check_food@returnValue+1,c
  9665  00D7BC  0E01               	movlw	1
  9666  00D7BE  EFE1  F070         	goto	L88
  9667  00D7C2                     l710:
  9668                           
  9669                           ;standbyMode.c: 30: else if (foodInput[0] == 2){
  9670  00D7C2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9671  00D7C6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9672  00D7CA  0E02               	movlw	2
  9673  00D7CC  18DE               	xorwf	postinc2,w,c
  9674  00D7CE  10DE               	iorwf	postinc2,w,c
  9675  00D7D0  A4D8               	btfss	status,2,c
  9676  00D7D2  EF27  F071         	goto	l713
  9677                           
  9678                           ;standbyMode.c: 31: returnValue = 2;
  9679  00D7D6  0E00               	movlw	0
  9680  00D7D8  6E08               	movwf	check_food@returnValue+1,c
  9681  00D7DA  0E02               	movlw	2
  9682  00D7DC  EFE1  F070         	goto	L88
  9683  00D7E0                     
  9684                           ;standbyMode.c: 37: if (foodInput[0] == 1){
  9685  00D7E0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9686  00D7E4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9687  00D7E8  04DE               	decf	postinc2,w,c
  9688  00D7EA  10DE               	iorwf	postinc2,w,c
  9689  00D7EC  A4D8               	btfss	status,2,c
  9690  00D7EE  D005               	goto	l715
  9691                           
  9692                           ;standbyMode.c: 38: returnValue = 3;
  9693  00D7F0  0E00               	movlw	0
  9694  00D7F2  6E08               	movwf	check_food@returnValue+1,c
  9695  00D7F4  0E03               	movlw	3
  9696  00D7F6  EFE1  F070         	goto	L88
  9697  00D7FA                     l715:
  9698                           
  9699                           ;standbyMode.c: 40: else if (foodInput[0] == 2){
  9700  00D7FA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9701  00D7FE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9702  00D802  0E02               	movlw	2
  9703  00D804  18DE               	xorwf	postinc2,w,c
  9704  00D806  10DE               	iorwf	postinc2,w,c
  9705  00D808  A4D8               	btfss	status,2,c
  9706  00D80A  EF27  F071         	goto	l713
  9707                           
  9708                           ;standbyMode.c: 41: returnValue = 4;
  9709  00D80E  0E00               	movlw	0
  9710  00D810  6E08               	movwf	check_food@returnValue+1,c
  9711  00D812  0E04               	movlw	4
  9712  00D814  EFE1  F070         	goto	L88
  9713  00D818                     
  9714                           ;standbyMode.c: 47: if (foodInput[0] == 1){
  9715  00D818  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9716  00D81C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9717  00D820  04DE               	decf	postinc2,w,c
  9718  00D822  10DE               	iorwf	postinc2,w,c
  9719  00D824  A4D8               	btfss	status,2,c
  9720  00D826  D005               	goto	l719
  9721                           
  9722                           ;standbyMode.c: 48: returnValue = 5;
  9723  00D828  0E00               	movlw	0
  9724  00D82A  6E08               	movwf	check_food@returnValue+1,c
  9725  00D82C  0E05               	movlw	5
  9726  00D82E  EFE1  F070         	goto	L88
  9727  00D832                     l719:
  9728                           
  9729                           ;standbyMode.c: 50: else if (foodInput[0] == 2){
  9730  00D832  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9731  00D836  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9732  00D83A  0E02               	movlw	2
  9733  00D83C  18DE               	xorwf	postinc2,w,c
  9734  00D83E  10DE               	iorwf	postinc2,w,c
  9735  00D840  A4D8               	btfss	status,2,c
  9736  00D842  D005               	goto	l721
  9737                           
  9738                           ;standbyMode.c: 51: returnValue = 6;
  9739  00D844  0E00               	movlw	0
  9740  00D846  6E08               	movwf	check_food@returnValue+1,c
  9741  00D848  0E06               	movlw	6
  9742  00D84A  EFE1  F070         	goto	L88
  9743  00D84E                     l721:
  9744                           
  9745                           ;standbyMode.c: 53: else if (foodInput[0] == 3){
  9746  00D84E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9747  00D852  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9748  00D856  0E03               	movlw	3
  9749  00D858  18DE               	xorwf	postinc2,w,c
  9750  00D85A  10DE               	iorwf	postinc2,w,c
  9751  00D85C  A4D8               	btfss	status,2,c
  9752  00D85E  EF27  F071         	goto	l713
  9753                           
  9754                           ;standbyMode.c: 54: returnValue = 7;
  9755  00D862  0E00               	movlw	0
  9756  00D864  6E08               	movwf	check_food@returnValue+1,c
  9757  00D866  0E07               	movlw	7
  9758  00D868  EFE1  F070         	goto	L88
  9759  00D86C                     
  9760                           ;standbyMode.c: 60: if (foodInput[0] == 1 && foodInput[1] == 1){
  9761  00D86C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9762  00D870  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9763  00D874  04DE               	decf	postinc2,w,c
  9764  00D876  10DE               	iorwf	postinc2,w,c
  9765  00D878  A4D8               	btfss	status,2,c
  9766  00D87A  D00F               	goto	l725
  9767  00D87C  EE20 F002          	lfsr	2,2
  9768  00D880  5003               	movf	check_food@foodInput,w,c
  9769  00D882  26D9               	addwf	fsr2l,f,c
  9770  00D884  5004               	movf	check_food@foodInput+1,w,c
  9771  00D886  22DA               	addwfc	fsr2h,f,c
  9772  00D888  04DE               	decf	postinc2,w,c
  9773  00D88A  10DE               	iorwf	postinc2,w,c
  9774  00D88C  A4D8               	btfss	status,2,c
  9775  00D88E  D005               	goto	l725
  9776                           
  9777                           ;standbyMode.c: 61: returnValue = 8;
  9778  00D890  0E00               	movlw	0
  9779  00D892  6E08               	movwf	check_food@returnValue+1,c
  9780  00D894  0E08               	movlw	8
  9781  00D896  EFE1  F070         	goto	L88
  9782  00D89A                     l725:
  9783                           
  9784                           ;standbyMode.c: 63: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9785  00D89A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9786  00D89E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9787  00D8A2  04DE               	decf	postinc2,w,c
  9788  00D8A4  10DE               	iorwf	postinc2,w,c
  9789  00D8A6  A4D8               	btfss	status,2,c
  9790  00D8A8  D010               	goto	l727
  9791  00D8AA  EE20 F002          	lfsr	2,2
  9792  00D8AE  5003               	movf	check_food@foodInput,w,c
  9793  00D8B0  26D9               	addwf	fsr2l,f,c
  9794  00D8B2  5004               	movf	check_food@foodInput+1,w,c
  9795  00D8B4  22DA               	addwfc	fsr2h,f,c
  9796  00D8B6  0E02               	movlw	2
  9797  00D8B8  18DE               	xorwf	postinc2,w,c
  9798  00D8BA  10DE               	iorwf	postinc2,w,c
  9799  00D8BC  A4D8               	btfss	status,2,c
  9800  00D8BE  D005               	goto	l727
  9801                           
  9802                           ;standbyMode.c: 64: returnValue = 9;
  9803  00D8C0  0E00               	movlw	0
  9804  00D8C2  6E08               	movwf	check_food@returnValue+1,c
  9805  00D8C4  0E09               	movlw	9
  9806  00D8C6  EFE1  F070         	goto	L88
  9807  00D8CA                     l727:
  9808                           
  9809                           ;standbyMode.c: 66: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9810  00D8CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9811  00D8CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9812  00D8D2  0E02               	movlw	2
  9813  00D8D4  18DE               	xorwf	postinc2,w,c
  9814  00D8D6  10DE               	iorwf	postinc2,w,c
  9815  00D8D8  A4D8               	btfss	status,2,c
  9816  00D8DA  D00F               	goto	l729
  9817  00D8DC  EE20 F002          	lfsr	2,2
  9818  00D8E0  5003               	movf	check_food@foodInput,w,c
  9819  00D8E2  26D9               	addwf	fsr2l,f,c
  9820  00D8E4  5004               	movf	check_food@foodInput+1,w,c
  9821  00D8E6  22DA               	addwfc	fsr2h,f,c
  9822  00D8E8  04DE               	decf	postinc2,w,c
  9823  00D8EA  10DE               	iorwf	postinc2,w,c
  9824  00D8EC  A4D8               	btfss	status,2,c
  9825  00D8EE  D005               	goto	l729
  9826                           
  9827                           ;standbyMode.c: 67: returnValue = 10;
  9828  00D8F0  0E00               	movlw	0
  9829  00D8F2  6E08               	movwf	check_food@returnValue+1,c
  9830  00D8F4  0E0A               	movlw	10
  9831  00D8F6  EFE1  F070         	goto	L88
  9832  00D8FA                     l729:
  9833                           
  9834                           ;standbyMode.c: 69: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9835  00D8FA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9836  00D8FE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9837  00D902  0E02               	movlw	2
  9838  00D904  18DE               	xorwf	postinc2,w,c
  9839  00D906  10DE               	iorwf	postinc2,w,c
  9840  00D908  A4D8               	btfss	status,2,c
  9841  00D90A  EF27  F071         	goto	l713
  9842  00D90E  EE20 F002          	lfsr	2,2
  9843  00D912  5003               	movf	check_food@foodInput,w,c
  9844  00D914  26D9               	addwf	fsr2l,f,c
  9845  00D916  5004               	movf	check_food@foodInput+1,w,c
  9846  00D918  22DA               	addwfc	fsr2h,f,c
  9847  00D91A  0E02               	movlw	2
  9848  00D91C  18DE               	xorwf	postinc2,w,c
  9849  00D91E  10DE               	iorwf	postinc2,w,c
  9850  00D920  A4D8               	btfss	status,2,c
  9851  00D922  EF27  F071         	goto	l713
  9852                           
  9853                           ;standbyMode.c: 70: returnValue = 11;
  9854  00D926  0E00               	movlw	0
  9855  00D928  6E08               	movwf	check_food@returnValue+1,c
  9856  00D92A  0E0B               	movlw	11
  9857  00D92C  EFE1  F070         	goto	L88
  9858  00D930                     
  9859                           ;standbyMode.c: 76: if (foodInput[0] == 1 && foodInput[1] == 1){
  9860  00D930  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9861  00D934  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9862  00D938  04DE               	decf	postinc2,w,c
  9863  00D93A  10DE               	iorwf	postinc2,w,c
  9864  00D93C  A4D8               	btfss	status,2,c
  9865  00D93E  D00F               	goto	l733
  9866  00D940  EE20 F002          	lfsr	2,2
  9867  00D944  5003               	movf	check_food@foodInput,w,c
  9868  00D946  26D9               	addwf	fsr2l,f,c
  9869  00D948  5004               	movf	check_food@foodInput+1,w,c
  9870  00D94A  22DA               	addwfc	fsr2h,f,c
  9871  00D94C  04DE               	decf	postinc2,w,c
  9872  00D94E  10DE               	iorwf	postinc2,w,c
  9873  00D950  A4D8               	btfss	status,2,c
  9874  00D952  D005               	goto	l733
  9875                           
  9876                           ;standbyMode.c: 77: returnValue = 12;
  9877  00D954  0E00               	movlw	0
  9878  00D956  6E08               	movwf	check_food@returnValue+1,c
  9879  00D958  0E0C               	movlw	12
  9880  00D95A  EFE1  F070         	goto	L88
  9881  00D95E                     l733:
  9882                           
  9883                           ;standbyMode.c: 79: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9884  00D95E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9885  00D962  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9886  00D966  04DE               	decf	postinc2,w,c
  9887  00D968  10DE               	iorwf	postinc2,w,c
  9888  00D96A  A4D8               	btfss	status,2,c
  9889  00D96C  D010               	goto	l735
  9890  00D96E  EE20 F002          	lfsr	2,2
  9891  00D972  5003               	movf	check_food@foodInput,w,c
  9892  00D974  26D9               	addwf	fsr2l,f,c
  9893  00D976  5004               	movf	check_food@foodInput+1,w,c
  9894  00D978  22DA               	addwfc	fsr2h,f,c
  9895  00D97A  0E02               	movlw	2
  9896  00D97C  18DE               	xorwf	postinc2,w,c
  9897  00D97E  10DE               	iorwf	postinc2,w,c
  9898  00D980  A4D8               	btfss	status,2,c
  9899  00D982  D005               	goto	l735
  9900                           
  9901                           ;standbyMode.c: 80: returnValue = 13;
  9902  00D984  0E00               	movlw	0
  9903  00D986  6E08               	movwf	check_food@returnValue+1,c
  9904  00D988  0E0D               	movlw	13
  9905  00D98A  EFE1  F070         	goto	L88
  9906  00D98E                     l735:
  9907                           
  9908                           ;standbyMode.c: 82: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9909  00D98E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9910  00D992  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9911  00D996  04DE               	decf	postinc2,w,c
  9912  00D998  10DE               	iorwf	postinc2,w,c
  9913  00D99A  A4D8               	btfss	status,2,c
  9914  00D99C  D010               	goto	l737
  9915  00D99E  EE20 F002          	lfsr	2,2
  9916  00D9A2  5003               	movf	check_food@foodInput,w,c
  9917  00D9A4  26D9               	addwf	fsr2l,f,c
  9918  00D9A6  5004               	movf	check_food@foodInput+1,w,c
  9919  00D9A8  22DA               	addwfc	fsr2h,f,c
  9920  00D9AA  0E03               	movlw	3
  9921  00D9AC  18DE               	xorwf	postinc2,w,c
  9922  00D9AE  10DE               	iorwf	postinc2,w,c
  9923  00D9B0  A4D8               	btfss	status,2,c
  9924  00D9B2  D005               	goto	l737
  9925                           
  9926                           ;standbyMode.c: 83: returnValue = 14;
  9927  00D9B4  0E00               	movlw	0
  9928  00D9B6  6E08               	movwf	check_food@returnValue+1,c
  9929  00D9B8  0E0E               	movlw	14
  9930  00D9BA  EFE1  F070         	goto	L88
  9931  00D9BE                     l737:
  9932                           
  9933                           ;standbyMode.c: 85: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9934  00D9BE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9935  00D9C2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9936  00D9C6  0E02               	movlw	2
  9937  00D9C8  18DE               	xorwf	postinc2,w,c
  9938  00D9CA  10DE               	iorwf	postinc2,w,c
  9939  00D9CC  A4D8               	btfss	status,2,c
  9940  00D9CE  D00E               	goto	l739
  9941  00D9D0  EE20 F002          	lfsr	2,2
  9942  00D9D4  5003               	movf	check_food@foodInput,w,c
  9943  00D9D6  26D9               	addwf	fsr2l,f,c
  9944  00D9D8  5004               	movf	check_food@foodInput+1,w,c
  9945  00D9DA  22DA               	addwfc	fsr2h,f,c
  9946  00D9DC  04DE               	decf	postinc2,w,c
  9947  00D9DE  10DE               	iorwf	postinc2,w,c
  9948  00D9E0  A4D8               	btfss	status,2,c
  9949  00D9E2  D004               	goto	l739
  9950                           
  9951                           ;standbyMode.c: 86: returnValue = 15;
  9952  00D9E4  0E00               	movlw	0
  9953  00D9E6  6E08               	movwf	check_food@returnValue+1,c
  9954  00D9E8  0E0F               	movlw	15
  9955  00D9EA  D3EB               	goto	L88
  9956  00D9EC                     l739:
  9957                           
  9958                           ;standbyMode.c: 88: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9959  00D9EC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9960  00D9F0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9961  00D9F4  0E02               	movlw	2
  9962  00D9F6  18DE               	xorwf	postinc2,w,c
  9963  00D9F8  10DE               	iorwf	postinc2,w,c
  9964  00D9FA  A4D8               	btfss	status,2,c
  9965  00D9FC  EF27  F071         	goto	l713
  9966  00DA00  EE20 F002          	lfsr	2,2
  9967  00DA04  5003               	movf	check_food@foodInput,w,c
  9968  00DA06  26D9               	addwf	fsr2l,f,c
  9969  00DA08  5004               	movf	check_food@foodInput+1,w,c
  9970  00DA0A  22DA               	addwfc	fsr2h,f,c
  9971  00DA0C  0E02               	movlw	2
  9972  00DA0E  18DE               	xorwf	postinc2,w,c
  9973  00DA10  10DE               	iorwf	postinc2,w,c
  9974  00DA12  A4D8               	btfss	status,2,c
  9975  00DA14  EF27  F071         	goto	l713
  9976                           
  9977                           ;standbyMode.c: 89: returnValue = 16;
  9978  00DA18  0E00               	movlw	0
  9979  00DA1A  6E08               	movwf	check_food@returnValue+1,c
  9980  00DA1C  0E10               	movlw	16
  9981  00DA1E  D3D1               	goto	L88
  9982  00DA20                     
  9983                           ;standbyMode.c: 95: if (foodInput[0] == 1 && foodInput[1] == 1){
  9984  00DA20  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9985  00DA24  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9986  00DA28  04DE               	decf	postinc2,w,c
  9987  00DA2A  10DE               	iorwf	postinc2,w,c
  9988  00DA2C  A4D8               	btfss	status,2,c
  9989  00DA2E  D00E               	goto	l743
  9990  00DA30  EE20 F002          	lfsr	2,2
  9991  00DA34  5003               	movf	check_food@foodInput,w,c
  9992  00DA36  26D9               	addwf	fsr2l,f,c
  9993  00DA38  5004               	movf	check_food@foodInput+1,w,c
  9994  00DA3A  22DA               	addwfc	fsr2h,f,c
  9995  00DA3C  04DE               	decf	postinc2,w,c
  9996  00DA3E  10DE               	iorwf	postinc2,w,c
  9997  00DA40  A4D8               	btfss	status,2,c
  9998  00DA42  D004               	goto	l743
  9999                           
 10000                           ;standbyMode.c: 96: returnValue = 17;
 10001  00DA44  0E00               	movlw	0
 10002  00DA46  6E08               	movwf	check_food@returnValue+1,c
 10003  00DA48  0E11               	movlw	17
 10004  00DA4A  D3BB               	goto	L88
 10005  00DA4C                     l743:
 10006                           
 10007                           ;standbyMode.c: 98: else if (foodInput[0] == 1 && foodInput[1] == 2){
 10008  00DA4C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10009  00DA50  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10010  00DA54  04DE               	decf	postinc2,w,c
 10011  00DA56  10DE               	iorwf	postinc2,w,c
 10012  00DA58  A4D8               	btfss	status,2,c
 10013  00DA5A  D00F               	goto	l745
 10014  00DA5C  EE20 F002          	lfsr	2,2
 10015  00DA60  5003               	movf	check_food@foodInput,w,c
 10016  00DA62  26D9               	addwf	fsr2l,f,c
 10017  00DA64  5004               	movf	check_food@foodInput+1,w,c
 10018  00DA66  22DA               	addwfc	fsr2h,f,c
 10019  00DA68  0E02               	movlw	2
 10020  00DA6A  18DE               	xorwf	postinc2,w,c
 10021  00DA6C  10DE               	iorwf	postinc2,w,c
 10022  00DA6E  A4D8               	btfss	status,2,c
 10023  00DA70  D004               	goto	l745
 10024                           
 10025                           ;standbyMode.c: 99: returnValue = 18;
 10026  00DA72  0E00               	movlw	0
 10027  00DA74  6E08               	movwf	check_food@returnValue+1,c
 10028  00DA76  0E12               	movlw	18
 10029  00DA78  D3A4               	goto	L88
 10030  00DA7A                     l745:
 10031                           
 10032                           ;standbyMode.c: 101: else if (foodInput[0] == 1 && foodInput[1] == 3){
 10033  00DA7A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10034  00DA7E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10035  00DA82  04DE               	decf	postinc2,w,c
 10036  00DA84  10DE               	iorwf	postinc2,w,c
 10037  00DA86  A4D8               	btfss	status,2,c
 10038  00DA88  D00F               	goto	l747
 10039  00DA8A  EE20 F002          	lfsr	2,2
 10040  00DA8E  5003               	movf	check_food@foodInput,w,c
 10041  00DA90  26D9               	addwf	fsr2l,f,c
 10042  00DA92  5004               	movf	check_food@foodInput+1,w,c
 10043  00DA94  22DA               	addwfc	fsr2h,f,c
 10044  00DA96  0E03               	movlw	3
 10045  00DA98  18DE               	xorwf	postinc2,w,c
 10046  00DA9A  10DE               	iorwf	postinc2,w,c
 10047  00DA9C  A4D8               	btfss	status,2,c
 10048  00DA9E  D004               	goto	l747
 10049                           
 10050                           ;standbyMode.c: 102: returnValue = 19;
 10051  00DAA0  0E00               	movlw	0
 10052  00DAA2  6E08               	movwf	check_food@returnValue+1,c
 10053  00DAA4  0E13               	movlw	19
 10054  00DAA6  D38D               	goto	L88
 10055  00DAA8                     l747:
 10056                           
 10057                           ;standbyMode.c: 104: else if (foodInput[0] == 2 && foodInput[1] == 1){
 10058  00DAA8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10059  00DAAC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10060  00DAB0  0E02               	movlw	2
 10061  00DAB2  18DE               	xorwf	postinc2,w,c
 10062  00DAB4  10DE               	iorwf	postinc2,w,c
 10063  00DAB6  A4D8               	btfss	status,2,c
 10064  00DAB8  D00E               	goto	l749
 10065  00DABA  EE20 F002          	lfsr	2,2
 10066  00DABE  5003               	movf	check_food@foodInput,w,c
 10067  00DAC0  26D9               	addwf	fsr2l,f,c
 10068  00DAC2  5004               	movf	check_food@foodInput+1,w,c
 10069  00DAC4  22DA               	addwfc	fsr2h,f,c
 10070  00DAC6  04DE               	decf	postinc2,w,c
 10071  00DAC8  10DE               	iorwf	postinc2,w,c
 10072  00DACA  A4D8               	btfss	status,2,c
 10073  00DACC  D004               	goto	l749
 10074                           
 10075                           ;standbyMode.c: 105: returnValue = 20;
 10076  00DACE  0E00               	movlw	0
 10077  00DAD0  6E08               	movwf	check_food@returnValue+1,c
 10078  00DAD2  0E14               	movlw	20
 10079  00DAD4  D376               	goto	L88
 10080  00DAD6                     l749:
 10081                           
 10082                           ;standbyMode.c: 107: else if (foodInput[0] == 2 && foodInput[1] == 2){
 10083  00DAD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10084  00DADA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10085  00DADE  0E02               	movlw	2
 10086  00DAE0  18DE               	xorwf	postinc2,w,c
 10087  00DAE2  10DE               	iorwf	postinc2,w,c
 10088  00DAE4  A4D8               	btfss	status,2,c
 10089  00DAE6  D3B3               	goto	l713
 10090  00DAE8  EE20 F002          	lfsr	2,2
 10091  00DAEC  5003               	movf	check_food@foodInput,w,c
 10092  00DAEE  26D9               	addwf	fsr2l,f,c
 10093  00DAF0  5004               	movf	check_food@foodInput+1,w,c
 10094  00DAF2  22DA               	addwfc	fsr2h,f,c
 10095  00DAF4  0E02               	movlw	2
 10096  00DAF6  18DE               	xorwf	postinc2,w,c
 10097  00DAF8  10DE               	iorwf	postinc2,w,c
 10098  00DAFA  A4D8               	btfss	status,2,c
 10099  00DAFC  D3A8               	goto	l713
 10100                           
 10101                           ;standbyMode.c: 108: returnValue = 21;
 10102  00DAFE  0E00               	movlw	0
 10103  00DB00  6E08               	movwf	check_food@returnValue+1,c
 10104  00DB02  0E15               	movlw	21
 10105  00DB04  D35E               	goto	L88
 10106  00DB06                     
 10107                           ;standbyMode.c: 114: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10108  00DB06  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10109  00DB0A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10110  00DB0E  04DE               	decf	postinc2,w,c
 10111  00DB10  10DE               	iorwf	postinc2,w,c
 10112  00DB12  A4D8               	btfss	status,2,c
 10113  00DB14  D018               	goto	l753
 10114  00DB16  EE20 F002          	lfsr	2,2
 10115  00DB1A  5003               	movf	check_food@foodInput,w,c
 10116  00DB1C  26D9               	addwf	fsr2l,f,c
 10117  00DB1E  5004               	movf	check_food@foodInput+1,w,c
 10118  00DB20  22DA               	addwfc	fsr2h,f,c
 10119  00DB22  04DE               	decf	postinc2,w,c
 10120  00DB24  10DE               	iorwf	postinc2,w,c
 10121  00DB26  A4D8               	btfss	status,2,c
 10122  00DB28  D00E               	goto	l753
 10123  00DB2A  EE20 F004          	lfsr	2,4
 10124  00DB2E  5003               	movf	check_food@foodInput,w,c
 10125  00DB30  26D9               	addwf	fsr2l,f,c
 10126  00DB32  5004               	movf	check_food@foodInput+1,w,c
 10127  00DB34  22DA               	addwfc	fsr2h,f,c
 10128  00DB36  04DE               	decf	postinc2,w,c
 10129  00DB38  10DE               	iorwf	postinc2,w,c
 10130  00DB3A  A4D8               	btfss	status,2,c
 10131  00DB3C  D004               	goto	l753
 10132                           
 10133                           ;standbyMode.c: 115: returnValue = 22;
 10134  00DB3E  0E00               	movlw	0
 10135  00DB40  6E08               	movwf	check_food@returnValue+1,c
 10136  00DB42  0E16               	movlw	22
 10137  00DB44  D33E               	goto	L88
 10138  00DB46                     l753:
 10139                           
 10140                           ;standbyMode.c: 117: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10141  00DB46  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10142  00DB4A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10143  00DB4E  04DE               	decf	postinc2,w,c
 10144  00DB50  10DE               	iorwf	postinc2,w,c
 10145  00DB52  A4D8               	btfss	status,2,c
 10146  00DB54  D37C               	goto	l713
 10147  00DB56  EE20 F002          	lfsr	2,2
 10148  00DB5A  5003               	movf	check_food@foodInput,w,c
 10149  00DB5C  26D9               	addwf	fsr2l,f,c
 10150  00DB5E  5004               	movf	check_food@foodInput+1,w,c
 10151  00DB60  22DA               	addwfc	fsr2h,f,c
 10152  00DB62  04DE               	decf	postinc2,w,c
 10153  00DB64  10DE               	iorwf	postinc2,w,c
 10154  00DB66  A4D8               	btfss	status,2,c
 10155  00DB68  D372               	goto	l713
 10156  00DB6A  EE20 F004          	lfsr	2,4
 10157  00DB6E  5003               	movf	check_food@foodInput,w,c
 10158  00DB70  26D9               	addwf	fsr2l,f,c
 10159  00DB72  5004               	movf	check_food@foodInput+1,w,c
 10160  00DB74  22DA               	addwfc	fsr2h,f,c
 10161  00DB76  0E02               	movlw	2
 10162  00DB78  18DE               	xorwf	postinc2,w,c
 10163  00DB7A  10DE               	iorwf	postinc2,w,c
 10164  00DB7C  A4D8               	btfss	status,2,c
 10165  00DB7E  D367               	goto	l713
 10166                           
 10167                           ;standbyMode.c: 118: returnValue = 23;
 10168  00DB80  0E00               	movlw	0
 10169  00DB82  6E08               	movwf	check_food@returnValue+1,c
 10170  00DB84  0E17               	movlw	23
 10171  00DB86  D31D               	goto	L88
 10172  00DB88                     
 10173                           ;standbyMode.c: 124: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10174  00DB88  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10175  00DB8C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10176  00DB90  04DE               	decf	postinc2,w,c
 10177  00DB92  10DE               	iorwf	postinc2,w,c
 10178  00DB94  A4D8               	btfss	status,2,c
 10179  00DB96  D018               	goto	l757
 10180  00DB98  EE20 F002          	lfsr	2,2
 10181  00DB9C  5003               	movf	check_food@foodInput,w,c
 10182  00DB9E  26D9               	addwf	fsr2l,f,c
 10183  00DBA0  5004               	movf	check_food@foodInput+1,w,c
 10184  00DBA2  22DA               	addwfc	fsr2h,f,c
 10185  00DBA4  04DE               	decf	postinc2,w,c
 10186  00DBA6  10DE               	iorwf	postinc2,w,c
 10187  00DBA8  A4D8               	btfss	status,2,c
 10188  00DBAA  D00E               	goto	l757
 10189  00DBAC  EE20 F004          	lfsr	2,4
 10190  00DBB0  5003               	movf	check_food@foodInput,w,c
 10191  00DBB2  26D9               	addwf	fsr2l,f,c
 10192  00DBB4  5004               	movf	check_food@foodInput+1,w,c
 10193  00DBB6  22DA               	addwfc	fsr2h,f,c
 10194  00DBB8  04DE               	decf	postinc2,w,c
 10195  00DBBA  10DE               	iorwf	postinc2,w,c
 10196  00DBBC  A4D8               	btfss	status,2,c
 10197  00DBBE  D004               	goto	l757
 10198                           
 10199                           ;standbyMode.c: 125: returnValue = 24;
 10200  00DBC0  0E00               	movlw	0
 10201  00DBC2  6E08               	movwf	check_food@returnValue+1,c
 10202  00DBC4  0E18               	movlw	24
 10203  00DBC6  D2FD               	goto	L88
 10204  00DBC8                     l757:
 10205                           
 10206                           ;standbyMode.c: 127: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10207  00DBC8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10208  00DBCC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10209  00DBD0  04DE               	decf	postinc2,w,c
 10210  00DBD2  10DE               	iorwf	postinc2,w,c
 10211  00DBD4  A4D8               	btfss	status,2,c
 10212  00DBD6  D33B               	goto	l713
 10213  00DBD8  EE20 F002          	lfsr	2,2
 10214  00DBDC  5003               	movf	check_food@foodInput,w,c
 10215  00DBDE  26D9               	addwf	fsr2l,f,c
 10216  00DBE0  5004               	movf	check_food@foodInput+1,w,c
 10217  00DBE2  22DA               	addwfc	fsr2h,f,c
 10218  00DBE4  04DE               	decf	postinc2,w,c
 10219  00DBE6  10DE               	iorwf	postinc2,w,c
 10220  00DBE8  A4D8               	btfss	status,2,c
 10221  00DBEA  D331               	goto	l713
 10222  00DBEC  EE20 F004          	lfsr	2,4
 10223  00DBF0  5003               	movf	check_food@foodInput,w,c
 10224  00DBF2  26D9               	addwf	fsr2l,f,c
 10225  00DBF4  5004               	movf	check_food@foodInput+1,w,c
 10226  00DBF6  22DA               	addwfc	fsr2h,f,c
 10227  00DBF8  0E02               	movlw	2
 10228  00DBFA  18DE               	xorwf	postinc2,w,c
 10229  00DBFC  10DE               	iorwf	postinc2,w,c
 10230  00DBFE  A4D8               	btfss	status,2,c
 10231  00DC00  D326               	goto	l713
 10232                           
 10233                           ;standbyMode.c: 128: returnValue = 25;
 10234  00DC02  0E00               	movlw	0
 10235  00DC04  6E08               	movwf	check_food@returnValue+1,c
 10236  00DC06  0E19               	movlw	25
 10237  00DC08  D2DC               	goto	L88
 10238  00DC0A                     
 10239                           ;standbyMode.c: 134: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10240  00DC0A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10241  00DC0E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10242  00DC12  04DE               	decf	postinc2,w,c
 10243  00DC14  10DE               	iorwf	postinc2,w,c
 10244  00DC16  A4D8               	btfss	status,2,c
 10245  00DC18  D018               	goto	l761
 10246  00DC1A  EE20 F002          	lfsr	2,2
 10247  00DC1E  5003               	movf	check_food@foodInput,w,c
 10248  00DC20  26D9               	addwf	fsr2l,f,c
 10249  00DC22  5004               	movf	check_food@foodInput+1,w,c
 10250  00DC24  22DA               	addwfc	fsr2h,f,c
 10251  00DC26  04DE               	decf	postinc2,w,c
 10252  00DC28  10DE               	iorwf	postinc2,w,c
 10253  00DC2A  A4D8               	btfss	status,2,c
 10254  00DC2C  D00E               	goto	l761
 10255  00DC2E  EE20 F004          	lfsr	2,4
 10256  00DC32  5003               	movf	check_food@foodInput,w,c
 10257  00DC34  26D9               	addwf	fsr2l,f,c
 10258  00DC36  5004               	movf	check_food@foodInput+1,w,c
 10259  00DC38  22DA               	addwfc	fsr2h,f,c
 10260  00DC3A  04DE               	decf	postinc2,w,c
 10261  00DC3C  10DE               	iorwf	postinc2,w,c
 10262  00DC3E  A4D8               	btfss	status,2,c
 10263  00DC40  D004               	goto	l761
 10264                           
 10265                           ;standbyMode.c: 135: returnValue = 26;
 10266  00DC42  0E00               	movlw	0
 10267  00DC44  6E08               	movwf	check_food@returnValue+1,c
 10268  00DC46  0E1A               	movlw	26
 10269  00DC48  D2BC               	goto	L88
 10270  00DC4A                     l761:
 10271                           
 10272                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10273  00DC4A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10274  00DC4E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10275  00DC52  0E02               	movlw	2
 10276  00DC54  18DE               	xorwf	postinc2,w,c
 10277  00DC56  10DE               	iorwf	postinc2,w,c
 10278  00DC58  A4D8               	btfss	status,2,c
 10279  00DC5A  D2F9               	goto	l713
 10280  00DC5C  EE20 F002          	lfsr	2,2
 10281  00DC60  5003               	movf	check_food@foodInput,w,c
 10282  00DC62  26D9               	addwf	fsr2l,f,c
 10283  00DC64  5004               	movf	check_food@foodInput+1,w,c
 10284  00DC66  22DA               	addwfc	fsr2h,f,c
 10285  00DC68  04DE               	decf	postinc2,w,c
 10286  00DC6A  10DE               	iorwf	postinc2,w,c
 10287  00DC6C  A4D8               	btfss	status,2,c
 10288  00DC6E  D2EF               	goto	l713
 10289  00DC70  EE20 F004          	lfsr	2,4
 10290  00DC74  5003               	movf	check_food@foodInput,w,c
 10291  00DC76  26D9               	addwf	fsr2l,f,c
 10292  00DC78  5004               	movf	check_food@foodInput+1,w,c
 10293  00DC7A  22DA               	addwfc	fsr2h,f,c
 10294  00DC7C  04DE               	decf	postinc2,w,c
 10295  00DC7E  10DE               	iorwf	postinc2,w,c
 10296  00DC80  A4D8               	btfss	status,2,c
 10297  00DC82  D2E5               	goto	l713
 10298                           
 10299                           ;standbyMode.c: 138: returnValue = 27;
 10300  00DC84  0E00               	movlw	0
 10301  00DC86  6E08               	movwf	check_food@returnValue+1,c
 10302  00DC88  0E1B               	movlw	27
 10303  00DC8A  D29B               	goto	L88
 10304  00DC8C                     
 10305                           ;standbyMode.c: 144: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10306  00DC8C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10307  00DC90  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10308  00DC94  04DE               	decf	postinc2,w,c
 10309  00DC96  10DE               	iorwf	postinc2,w,c
 10310  00DC98  A4D8               	btfss	status,2,c
 10311  00DC9A  D018               	goto	l765
 10312  00DC9C  EE20 F002          	lfsr	2,2
 10313  00DCA0  5003               	movf	check_food@foodInput,w,c
 10314  00DCA2  26D9               	addwf	fsr2l,f,c
 10315  00DCA4  5004               	movf	check_food@foodInput+1,w,c
 10316  00DCA6  22DA               	addwfc	fsr2h,f,c
 10317  00DCA8  04DE               	decf	postinc2,w,c
 10318  00DCAA  10DE               	iorwf	postinc2,w,c
 10319  00DCAC  A4D8               	btfss	status,2,c
 10320  00DCAE  D00E               	goto	l765
 10321  00DCB0  EE20 F004          	lfsr	2,4
 10322  00DCB4  5003               	movf	check_food@foodInput,w,c
 10323  00DCB6  26D9               	addwf	fsr2l,f,c
 10324  00DCB8  5004               	movf	check_food@foodInput+1,w,c
 10325  00DCBA  22DA               	addwfc	fsr2h,f,c
 10326  00DCBC  04DE               	decf	postinc2,w,c
 10327  00DCBE  10DE               	iorwf	postinc2,w,c
 10328  00DCC0  A4D8               	btfss	status,2,c
 10329  00DCC2  D004               	goto	l765
 10330                           
 10331                           ;standbyMode.c: 145: returnValue = 28;
 10332  00DCC4  0E00               	movlw	0
 10333  00DCC6  6E08               	movwf	check_food@returnValue+1,c
 10334  00DCC8  0E1C               	movlw	28
 10335  00DCCA  D27B               	goto	L88
 10336  00DCCC                     l765:
 10337                           
 10338                           ;standbyMode.c: 147: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10339  00DCCC  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10340  00DCD0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10341  00DCD4  04DE               	decf	postinc2,w,c
 10342  00DCD6  10DE               	iorwf	postinc2,w,c
 10343  00DCD8  A4D8               	btfss	status,2,c
 10344  00DCDA  D019               	goto	l767
 10345  00DCDC  EE20 F002          	lfsr	2,2
 10346  00DCE0  5003               	movf	check_food@foodInput,w,c
 10347  00DCE2  26D9               	addwf	fsr2l,f,c
 10348  00DCE4  5004               	movf	check_food@foodInput+1,w,c
 10349  00DCE6  22DA               	addwfc	fsr2h,f,c
 10350  00DCE8  04DE               	decf	postinc2,w,c
 10351  00DCEA  10DE               	iorwf	postinc2,w,c
 10352  00DCEC  A4D8               	btfss	status,2,c
 10353  00DCEE  D00F               	goto	l767
 10354  00DCF0  EE20 F004          	lfsr	2,4
 10355  00DCF4  5003               	movf	check_food@foodInput,w,c
 10356  00DCF6  26D9               	addwf	fsr2l,f,c
 10357  00DCF8  5004               	movf	check_food@foodInput+1,w,c
 10358  00DCFA  22DA               	addwfc	fsr2h,f,c
 10359  00DCFC  0E02               	movlw	2
 10360  00DCFE  18DE               	xorwf	postinc2,w,c
 10361  00DD00  10DE               	iorwf	postinc2,w,c
 10362  00DD02  A4D8               	btfss	status,2,c
 10363  00DD04  D004               	goto	l767
 10364                           
 10365                           ;standbyMode.c: 148: returnValue = 29;
 10366  00DD06  0E00               	movlw	0
 10367  00DD08  6E08               	movwf	check_food@returnValue+1,c
 10368  00DD0A  0E1D               	movlw	29
 10369  00DD0C  D25A               	goto	L88
 10370  00DD0E                     l767:
 10371                           
 10372                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10373  00DD0E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10374  00DD12  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10375  00DD16  04DE               	decf	postinc2,w,c
 10376  00DD18  10DE               	iorwf	postinc2,w,c
 10377  00DD1A  A4D8               	btfss	status,2,c
 10378  00DD1C  D019               	goto	l769
 10379  00DD1E  EE20 F002          	lfsr	2,2
 10380  00DD22  5003               	movf	check_food@foodInput,w,c
 10381  00DD24  26D9               	addwf	fsr2l,f,c
 10382  00DD26  5004               	movf	check_food@foodInput+1,w,c
 10383  00DD28  22DA               	addwfc	fsr2h,f,c
 10384  00DD2A  0E02               	movlw	2
 10385  00DD2C  18DE               	xorwf	postinc2,w,c
 10386  00DD2E  10DE               	iorwf	postinc2,w,c
 10387  00DD30  A4D8               	btfss	status,2,c
 10388  00DD32  D00E               	goto	l769
 10389  00DD34  EE20 F004          	lfsr	2,4
 10390  00DD38  5003               	movf	check_food@foodInput,w,c
 10391  00DD3A  26D9               	addwf	fsr2l,f,c
 10392  00DD3C  5004               	movf	check_food@foodInput+1,w,c
 10393  00DD3E  22DA               	addwfc	fsr2h,f,c
 10394  00DD40  04DE               	decf	postinc2,w,c
 10395  00DD42  10DE               	iorwf	postinc2,w,c
 10396  00DD44  A4D8               	btfss	status,2,c
 10397  00DD46  D004               	goto	l769
 10398                           
 10399                           ;standbyMode.c: 151: returnValue = 30;
 10400  00DD48  0E00               	movlw	0
 10401  00DD4A  6E08               	movwf	check_food@returnValue+1,c
 10402  00DD4C  0E1E               	movlw	30
 10403  00DD4E  D239               	goto	L88
 10404  00DD50                     l769:
 10405                           
 10406                           ;standbyMode.c: 153: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10407  00DD50  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10408  00DD54  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10409  00DD58  0E02               	movlw	2
 10410  00DD5A  18DE               	xorwf	postinc2,w,c
 10411  00DD5C  10DE               	iorwf	postinc2,w,c
 10412  00DD5E  A4D8               	btfss	status,2,c
 10413  00DD60  D276               	goto	l713
 10414  00DD62  EE20 F002          	lfsr	2,2
 10415  00DD66  5003               	movf	check_food@foodInput,w,c
 10416  00DD68  26D9               	addwf	fsr2l,f,c
 10417  00DD6A  5004               	movf	check_food@foodInput+1,w,c
 10418  00DD6C  22DA               	addwfc	fsr2h,f,c
 10419  00DD6E  04DE               	decf	postinc2,w,c
 10420  00DD70  10DE               	iorwf	postinc2,w,c
 10421  00DD72  A4D8               	btfss	status,2,c
 10422  00DD74  D26C               	goto	l713
 10423  00DD76  EE20 F004          	lfsr	2,4
 10424  00DD7A  5003               	movf	check_food@foodInput,w,c
 10425  00DD7C  26D9               	addwf	fsr2l,f,c
 10426  00DD7E  5004               	movf	check_food@foodInput+1,w,c
 10427  00DD80  22DA               	addwfc	fsr2h,f,c
 10428  00DD82  04DE               	decf	postinc2,w,c
 10429  00DD84  10DE               	iorwf	postinc2,w,c
 10430  00DD86  A4D8               	btfss	status,2,c
 10431  00DD88  D262               	goto	l713
 10432                           
 10433                           ;standbyMode.c: 154: returnValue = 31;
 10434  00DD8A  0E00               	movlw	0
 10435  00DD8C  6E08               	movwf	check_food@returnValue+1,c
 10436  00DD8E  0E1F               	movlw	31
 10437  00DD90  D218               	goto	L88
 10438  00DD92                     
 10439                           ;standbyMode.c: 160: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10440  00DD92  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10441  00DD96  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10442  00DD9A  04DE               	decf	postinc2,w,c
 10443  00DD9C  10DE               	iorwf	postinc2,w,c
 10444  00DD9E  A4D8               	btfss	status,2,c
 10445  00DDA0  D018               	goto	l773
 10446  00DDA2  EE20 F002          	lfsr	2,2
 10447  00DDA6  5003               	movf	check_food@foodInput,w,c
 10448  00DDA8  26D9               	addwf	fsr2l,f,c
 10449  00DDAA  5004               	movf	check_food@foodInput+1,w,c
 10450  00DDAC  22DA               	addwfc	fsr2h,f,c
 10451  00DDAE  04DE               	decf	postinc2,w,c
 10452  00DDB0  10DE               	iorwf	postinc2,w,c
 10453  00DDB2  A4D8               	btfss	status,2,c
 10454  00DDB4  D00E               	goto	l773
 10455  00DDB6  EE20 F004          	lfsr	2,4
 10456  00DDBA  5003               	movf	check_food@foodInput,w,c
 10457  00DDBC  26D9               	addwf	fsr2l,f,c
 10458  00DDBE  5004               	movf	check_food@foodInput+1,w,c
 10459  00DDC0  22DA               	addwfc	fsr2h,f,c
 10460  00DDC2  04DE               	decf	postinc2,w,c
 10461  00DDC4  10DE               	iorwf	postinc2,w,c
 10462  00DDC6  A4D8               	btfss	status,2,c
 10463  00DDC8  D004               	goto	l773
 10464                           
 10465                           ;standbyMode.c: 161: returnValue = 32;
 10466  00DDCA  0E00               	movlw	0
 10467  00DDCC  6E08               	movwf	check_food@returnValue+1,c
 10468  00DDCE  0E20               	movlw	32
 10469  00DDD0  D1F8               	goto	L88
 10470  00DDD2                     l773:
 10471                           
 10472                           ;standbyMode.c: 163: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10473  00DDD2  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10474  00DDD6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10475  00DDDA  04DE               	decf	postinc2,w,c
 10476  00DDDC  10DE               	iorwf	postinc2,w,c
 10477  00DDDE  A4D8               	btfss	status,2,c
 10478  00DDE0  D019               	goto	l775
 10479  00DDE2  EE20 F002          	lfsr	2,2
 10480  00DDE6  5003               	movf	check_food@foodInput,w,c
 10481  00DDE8  26D9               	addwf	fsr2l,f,c
 10482  00DDEA  5004               	movf	check_food@foodInput+1,w,c
 10483  00DDEC  22DA               	addwfc	fsr2h,f,c
 10484  00DDEE  04DE               	decf	postinc2,w,c
 10485  00DDF0  10DE               	iorwf	postinc2,w,c
 10486  00DDF2  A4D8               	btfss	status,2,c
 10487  00DDF4  D00F               	goto	l775
 10488  00DDF6  EE20 F004          	lfsr	2,4
 10489  00DDFA  5003               	movf	check_food@foodInput,w,c
 10490  00DDFC  26D9               	addwf	fsr2l,f,c
 10491  00DDFE  5004               	movf	check_food@foodInput+1,w,c
 10492  00DE00  22DA               	addwfc	fsr2h,f,c
 10493  00DE02  0E02               	movlw	2
 10494  00DE04  18DE               	xorwf	postinc2,w,c
 10495  00DE06  10DE               	iorwf	postinc2,w,c
 10496  00DE08  A4D8               	btfss	status,2,c
 10497  00DE0A  D004               	goto	l775
 10498                           
 10499                           ;standbyMode.c: 164: returnValue = 33;
 10500  00DE0C  0E00               	movlw	0
 10501  00DE0E  6E08               	movwf	check_food@returnValue+1,c
 10502  00DE10  0E21               	movlw	33
 10503  00DE12  D1D7               	goto	L88
 10504  00DE14                     l775:
 10505                           
 10506                           ;standbyMode.c: 166: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10507  00DE14  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10508  00DE18  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10509  00DE1C  04DE               	decf	postinc2,w,c
 10510  00DE1E  10DE               	iorwf	postinc2,w,c
 10511  00DE20  A4D8               	btfss	status,2,c
 10512  00DE22  D019               	goto	l777
 10513  00DE24  EE20 F002          	lfsr	2,2
 10514  00DE28  5003               	movf	check_food@foodInput,w,c
 10515  00DE2A  26D9               	addwf	fsr2l,f,c
 10516  00DE2C  5004               	movf	check_food@foodInput+1,w,c
 10517  00DE2E  22DA               	addwfc	fsr2h,f,c
 10518  00DE30  0E02               	movlw	2
 10519  00DE32  18DE               	xorwf	postinc2,w,c
 10520  00DE34  10DE               	iorwf	postinc2,w,c
 10521  00DE36  A4D8               	btfss	status,2,c
 10522  00DE38  D00E               	goto	l777
 10523  00DE3A  EE20 F004          	lfsr	2,4
 10524  00DE3E  5003               	movf	check_food@foodInput,w,c
 10525  00DE40  26D9               	addwf	fsr2l,f,c
 10526  00DE42  5004               	movf	check_food@foodInput+1,w,c
 10527  00DE44  22DA               	addwfc	fsr2h,f,c
 10528  00DE46  04DE               	decf	postinc2,w,c
 10529  00DE48  10DE               	iorwf	postinc2,w,c
 10530  00DE4A  A4D8               	btfss	status,2,c
 10531  00DE4C  D004               	goto	l777
 10532                           
 10533                           ;standbyMode.c: 167: returnValue = 34;
 10534  00DE4E  0E00               	movlw	0
 10535  00DE50  6E08               	movwf	check_food@returnValue+1,c
 10536  00DE52  0E22               	movlw	34
 10537  00DE54  D1B6               	goto	L88
 10538  00DE56                     l777:
 10539                           
 10540                           ;standbyMode.c: 169: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10541  00DE56  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10542  00DE5A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10543  00DE5E  0E02               	movlw	2
 10544  00DE60  18DE               	xorwf	postinc2,w,c
 10545  00DE62  10DE               	iorwf	postinc2,w,c
 10546  00DE64  A4D8               	btfss	status,2,c
 10547  00DE66  D1F3               	goto	l713
 10548  00DE68  EE20 F002          	lfsr	2,2
 10549  00DE6C  5003               	movf	check_food@foodInput,w,c
 10550  00DE6E  26D9               	addwf	fsr2l,f,c
 10551  00DE70  5004               	movf	check_food@foodInput+1,w,c
 10552  00DE72  22DA               	addwfc	fsr2h,f,c
 10553  00DE74  04DE               	decf	postinc2,w,c
 10554  00DE76  10DE               	iorwf	postinc2,w,c
 10555  00DE78  A4D8               	btfss	status,2,c
 10556  00DE7A  D1E9               	goto	l713
 10557  00DE7C  EE20 F004          	lfsr	2,4
 10558  00DE80  5003               	movf	check_food@foodInput,w,c
 10559  00DE82  26D9               	addwf	fsr2l,f,c
 10560  00DE84  5004               	movf	check_food@foodInput+1,w,c
 10561  00DE86  22DA               	addwfc	fsr2h,f,c
 10562  00DE88  04DE               	decf	postinc2,w,c
 10563  00DE8A  10DE               	iorwf	postinc2,w,c
 10564  00DE8C  A4D8               	btfss	status,2,c
 10565  00DE8E  D1DF               	goto	l713
 10566                           
 10567                           ;standbyMode.c: 170: returnValue = 35;
 10568  00DE90  0E00               	movlw	0
 10569  00DE92  6E08               	movwf	check_food@returnValue+1,c
 10570  00DE94  0E23               	movlw	35
 10571  00DE96  D195               	goto	L88
 10572  00DE98                     
 10573                           ;standbyMode.c: 176: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10574  00DE98  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10575  00DE9C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10576  00DEA0  04DE               	decf	postinc2,w,c
 10577  00DEA2  10DE               	iorwf	postinc2,w,c
 10578  00DEA4  A4D8               	btfss	status,2,c
 10579  00DEA6  D018               	goto	l781
 10580  00DEA8  EE20 F002          	lfsr	2,2
 10581  00DEAC  5003               	movf	check_food@foodInput,w,c
 10582  00DEAE  26D9               	addwf	fsr2l,f,c
 10583  00DEB0  5004               	movf	check_food@foodInput+1,w,c
 10584  00DEB2  22DA               	addwfc	fsr2h,f,c
 10585  00DEB4  04DE               	decf	postinc2,w,c
 10586  00DEB6  10DE               	iorwf	postinc2,w,c
 10587  00DEB8  A4D8               	btfss	status,2,c
 10588  00DEBA  D00E               	goto	l781
 10589  00DEBC  EE20 F004          	lfsr	2,4
 10590  00DEC0  5003               	movf	check_food@foodInput,w,c
 10591  00DEC2  26D9               	addwf	fsr2l,f,c
 10592  00DEC4  5004               	movf	check_food@foodInput+1,w,c
 10593  00DEC6  22DA               	addwfc	fsr2h,f,c
 10594  00DEC8  04DE               	decf	postinc2,w,c
 10595  00DECA  10DE               	iorwf	postinc2,w,c
 10596  00DECC  A4D8               	btfss	status,2,c
 10597  00DECE  D004               	goto	l781
 10598                           
 10599                           ;standbyMode.c: 177: returnValue = 36;
 10600  00DED0  0E00               	movlw	0
 10601  00DED2  6E08               	movwf	check_food@returnValue+1,c
 10602  00DED4  0E24               	movlw	36
 10603  00DED6  D175               	goto	L88
 10604  00DED8                     l781:
 10605                           
 10606                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10607  00DED8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10608  00DEDC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10609  00DEE0  04DE               	decf	postinc2,w,c
 10610  00DEE2  10DE               	iorwf	postinc2,w,c
 10611  00DEE4  A4D8               	btfss	status,2,c
 10612  00DEE6  D1B3               	goto	l713
 10613  00DEE8  EE20 F002          	lfsr	2,2
 10614  00DEEC  5003               	movf	check_food@foodInput,w,c
 10615  00DEEE  26D9               	addwf	fsr2l,f,c
 10616  00DEF0  5004               	movf	check_food@foodInput+1,w,c
 10617  00DEF2  22DA               	addwfc	fsr2h,f,c
 10618  00DEF4  04DE               	decf	postinc2,w,c
 10619  00DEF6  10DE               	iorwf	postinc2,w,c
 10620  00DEF8  A4D8               	btfss	status,2,c
 10621  00DEFA  D1A9               	goto	l713
 10622  00DEFC  EE20 F004          	lfsr	2,4
 10623  00DF00  5003               	movf	check_food@foodInput,w,c
 10624  00DF02  26D9               	addwf	fsr2l,f,c
 10625  00DF04  5004               	movf	check_food@foodInput+1,w,c
 10626  00DF06  22DA               	addwfc	fsr2h,f,c
 10627  00DF08  0E02               	movlw	2
 10628  00DF0A  18DE               	xorwf	postinc2,w,c
 10629  00DF0C  10DE               	iorwf	postinc2,w,c
 10630  00DF0E  A4D8               	btfss	status,2,c
 10631  00DF10  D19E               	goto	l713
 10632                           
 10633                           ;standbyMode.c: 180: returnValue = 37;
 10634  00DF12  0E00               	movlw	0
 10635  00DF14  6E08               	movwf	check_food@returnValue+1,c
 10636  00DF16  0E25               	movlw	37
 10637  00DF18  D154               	goto	L88
 10638  00DF1A                     
 10639                           ;standbyMode.c: 186: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10640  00DF1A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10641  00DF1E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10642  00DF22  04DE               	decf	postinc2,w,c
 10643  00DF24  10DE               	iorwf	postinc2,w,c
 10644  00DF26  A4D8               	btfss	status,2,c
 10645  00DF28  D018               	goto	l785
 10646  00DF2A  EE20 F002          	lfsr	2,2
 10647  00DF2E  5003               	movf	check_food@foodInput,w,c
 10648  00DF30  26D9               	addwf	fsr2l,f,c
 10649  00DF32  5004               	movf	check_food@foodInput+1,w,c
 10650  00DF34  22DA               	addwfc	fsr2h,f,c
 10651  00DF36  04DE               	decf	postinc2,w,c
 10652  00DF38  10DE               	iorwf	postinc2,w,c
 10653  00DF3A  A4D8               	btfss	status,2,c
 10654  00DF3C  D00E               	goto	l785
 10655  00DF3E  EE20 F004          	lfsr	2,4
 10656  00DF42  5003               	movf	check_food@foodInput,w,c
 10657  00DF44  26D9               	addwf	fsr2l,f,c
 10658  00DF46  5004               	movf	check_food@foodInput+1,w,c
 10659  00DF48  22DA               	addwfc	fsr2h,f,c
 10660  00DF4A  04DE               	decf	postinc2,w,c
 10661  00DF4C  10DE               	iorwf	postinc2,w,c
 10662  00DF4E  A4D8               	btfss	status,2,c
 10663  00DF50  D004               	goto	l785
 10664                           
 10665                           ;standbyMode.c: 187: returnValue = 38;
 10666  00DF52  0E00               	movlw	0
 10667  00DF54  6E08               	movwf	check_food@returnValue+1,c
 10668  00DF56  0E26               	movlw	38
 10669  00DF58  D134               	goto	L88
 10670  00DF5A                     l785:
 10671                           
 10672                           ;standbyMode.c: 189: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10673  00DF5A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10674  00DF5E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10675  00DF62  04DE               	decf	postinc2,w,c
 10676  00DF64  10DE               	iorwf	postinc2,w,c
 10677  00DF66  A4D8               	btfss	status,2,c
 10678  00DF68  D019               	goto	l787
 10679  00DF6A  EE20 F002          	lfsr	2,2
 10680  00DF6E  5003               	movf	check_food@foodInput,w,c
 10681  00DF70  26D9               	addwf	fsr2l,f,c
 10682  00DF72  5004               	movf	check_food@foodInput+1,w,c
 10683  00DF74  22DA               	addwfc	fsr2h,f,c
 10684  00DF76  04DE               	decf	postinc2,w,c
 10685  00DF78  10DE               	iorwf	postinc2,w,c
 10686  00DF7A  A4D8               	btfss	status,2,c
 10687  00DF7C  D00F               	goto	l787
 10688  00DF7E  EE20 F004          	lfsr	2,4
 10689  00DF82  5003               	movf	check_food@foodInput,w,c
 10690  00DF84  26D9               	addwf	fsr2l,f,c
 10691  00DF86  5004               	movf	check_food@foodInput+1,w,c
 10692  00DF88  22DA               	addwfc	fsr2h,f,c
 10693  00DF8A  0E02               	movlw	2
 10694  00DF8C  18DE               	xorwf	postinc2,w,c
 10695  00DF8E  10DE               	iorwf	postinc2,w,c
 10696  00DF90  A4D8               	btfss	status,2,c
 10697  00DF92  D004               	goto	l787
 10698                           
 10699                           ;standbyMode.c: 190: returnValue = 39;
 10700  00DF94  0E00               	movlw	0
 10701  00DF96  6E08               	movwf	check_food@returnValue+1,c
 10702  00DF98  0E27               	movlw	39
 10703  00DF9A  D113               	goto	L88
 10704  00DF9C                     l787:
 10705                           
 10706                           ;standbyMode.c: 192: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10707  00DF9C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10708  00DFA0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10709  00DFA4  04DE               	decf	postinc2,w,c
 10710  00DFA6  10DE               	iorwf	postinc2,w,c
 10711  00DFA8  A4D8               	btfss	status,2,c
 10712  00DFAA  D019               	goto	l789
 10713  00DFAC  EE20 F002          	lfsr	2,2
 10714  00DFB0  5003               	movf	check_food@foodInput,w,c
 10715  00DFB2  26D9               	addwf	fsr2l,f,c
 10716  00DFB4  5004               	movf	check_food@foodInput+1,w,c
 10717  00DFB6  22DA               	addwfc	fsr2h,f,c
 10718  00DFB8  0E02               	movlw	2
 10719  00DFBA  18DE               	xorwf	postinc2,w,c
 10720  00DFBC  10DE               	iorwf	postinc2,w,c
 10721  00DFBE  A4D8               	btfss	status,2,c
 10722  00DFC0  D00E               	goto	l789
 10723  00DFC2  EE20 F004          	lfsr	2,4
 10724  00DFC6  5003               	movf	check_food@foodInput,w,c
 10725  00DFC8  26D9               	addwf	fsr2l,f,c
 10726  00DFCA  5004               	movf	check_food@foodInput+1,w,c
 10727  00DFCC  22DA               	addwfc	fsr2h,f,c
 10728  00DFCE  04DE               	decf	postinc2,w,c
 10729  00DFD0  10DE               	iorwf	postinc2,w,c
 10730  00DFD2  A4D8               	btfss	status,2,c
 10731  00DFD4  D004               	goto	l789
 10732                           
 10733                           ;standbyMode.c: 193: returnValue = 40;
 10734  00DFD6  0E00               	movlw	0
 10735  00DFD8  6E08               	movwf	check_food@returnValue+1,c
 10736  00DFDA  0E28               	movlw	40
 10737  00DFDC  D0F2               	goto	L88
 10738  00DFDE                     l789:
 10739                           
 10740                           ;standbyMode.c: 195: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10741  00DFDE  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10742  00DFE2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10743  00DFE6  0E02               	movlw	2
 10744  00DFE8  18DE               	xorwf	postinc2,w,c
 10745  00DFEA  10DE               	iorwf	postinc2,w,c
 10746  00DFEC  A4D8               	btfss	status,2,c
 10747  00DFEE  D12F               	goto	l713
 10748  00DFF0  EE20 F002          	lfsr	2,2
 10749  00DFF4  5003               	movf	check_food@foodInput,w,c
 10750  00DFF6  26D9               	addwf	fsr2l,f,c
 10751  00DFF8  5004               	movf	check_food@foodInput+1,w,c
 10752  00DFFA  22DA               	addwfc	fsr2h,f,c
 10753  00DFFC  04DE               	decf	postinc2,w,c
 10754  00DFFE  10DE               	iorwf	postinc2,w,c
 10755  00E000  A4D8               	btfss	status,2,c
 10756  00E002  D125               	goto	l713
 10757  00E004  EE20 F004          	lfsr	2,4
 10758  00E008  5003               	movf	check_food@foodInput,w,c
 10759  00E00A  26D9               	addwf	fsr2l,f,c
 10760  00E00C  5004               	movf	check_food@foodInput+1,w,c
 10761  00E00E  22DA               	addwfc	fsr2h,f,c
 10762  00E010  04DE               	decf	postinc2,w,c
 10763  00E012  10DE               	iorwf	postinc2,w,c
 10764  00E014  A4D8               	btfss	status,2,c
 10765  00E016  D11B               	goto	l713
 10766                           
 10767                           ;standbyMode.c: 196: returnValue = 41;
 10768  00E018  0E00               	movlw	0
 10769  00E01A  6E08               	movwf	check_food@returnValue+1,c
 10770  00E01C  0E29               	movlw	41
 10771  00E01E  D0D1               	goto	L88
 10772  00E020                     
 10773                           ;standbyMode.c: 202: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10774  00E020  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10775  00E024  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10776  00E028  04DE               	decf	postinc2,w,c
 10777  00E02A  10DE               	iorwf	postinc2,w,c
 10778  00E02C  A4D8               	btfss	status,2,c
 10779  00E02E  D10F               	goto	l713
 10780  00E030  EE20 F002          	lfsr	2,2
 10781  00E034  5003               	movf	check_food@foodInput,w,c
 10782  00E036  26D9               	addwf	fsr2l,f,c
 10783  00E038  5004               	movf	check_food@foodInput+1,w,c
 10784  00E03A  22DA               	addwfc	fsr2h,f,c
 10785  00E03C  04DE               	decf	postinc2,w,c
 10786  00E03E  10DE               	iorwf	postinc2,w,c
 10787  00E040  A4D8               	btfss	status,2,c
 10788  00E042  D105               	goto	l713
 10789  00E044  EE20 F004          	lfsr	2,4
 10790  00E048  5003               	movf	check_food@foodInput,w,c
 10791  00E04A  26D9               	addwf	fsr2l,f,c
 10792  00E04C  5004               	movf	check_food@foodInput+1,w,c
 10793  00E04E  22DA               	addwfc	fsr2h,f,c
 10794  00E050  04DE               	decf	postinc2,w,c
 10795  00E052  10DE               	iorwf	postinc2,w,c
 10796  00E054  A4D8               	btfss	status,2,c
 10797  00E056  D0FB               	goto	l713
 10798  00E058  EE20 F006          	lfsr	2,6
 10799  00E05C  5003               	movf	check_food@foodInput,w,c
 10800  00E05E  26D9               	addwf	fsr2l,f,c
 10801  00E060  5004               	movf	check_food@foodInput+1,w,c
 10802  00E062  22DA               	addwfc	fsr2h,f,c
 10803  00E064  04DE               	decf	postinc2,w,c
 10804  00E066  10DE               	iorwf	postinc2,w,c
 10805  00E068  A4D8               	btfss	status,2,c
 10806  00E06A  D0F1               	goto	l713
 10807                           
 10808                           ;standbyMode.c: 203: returnValue = 42;
 10809  00E06C  0E00               	movlw	0
 10810  00E06E  6E08               	movwf	check_food@returnValue+1,c
 10811  00E070  0E2A               	movlw	42
 10812  00E072  D0A7               	goto	L88
 10813  00E074                     
 10814                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10815  00E074  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10816  00E078  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10817  00E07C  04DE               	decf	postinc2,w,c
 10818  00E07E  10DE               	iorwf	postinc2,w,c
 10819  00E080  A4D8               	btfss	status,2,c
 10820  00E082  D0E5               	goto	l713
 10821  00E084  EE20 F002          	lfsr	2,2
 10822  00E088  5003               	movf	check_food@foodInput,w,c
 10823  00E08A  26D9               	addwf	fsr2l,f,c
 10824  00E08C  5004               	movf	check_food@foodInput+1,w,c
 10825  00E08E  22DA               	addwfc	fsr2h,f,c
 10826  00E090  04DE               	decf	postinc2,w,c
 10827  00E092  10DE               	iorwf	postinc2,w,c
 10828  00E094  A4D8               	btfss	status,2,c
 10829  00E096  D0DB               	goto	l713
 10830  00E098  EE20 F004          	lfsr	2,4
 10831  00E09C  5003               	movf	check_food@foodInput,w,c
 10832  00E09E  26D9               	addwf	fsr2l,f,c
 10833  00E0A0  5004               	movf	check_food@foodInput+1,w,c
 10834  00E0A2  22DA               	addwfc	fsr2h,f,c
 10835  00E0A4  04DE               	decf	postinc2,w,c
 10836  00E0A6  10DE               	iorwf	postinc2,w,c
 10837  00E0A8  A4D8               	btfss	status,2,c
 10838  00E0AA  D0D1               	goto	l713
 10839  00E0AC  EE20 F006          	lfsr	2,6
 10840  00E0B0  5003               	movf	check_food@foodInput,w,c
 10841  00E0B2  26D9               	addwf	fsr2l,f,c
 10842  00E0B4  5004               	movf	check_food@foodInput+1,w,c
 10843  00E0B6  22DA               	addwfc	fsr2h,f,c
 10844  00E0B8  04DE               	decf	postinc2,w,c
 10845  00E0BA  10DE               	iorwf	postinc2,w,c
 10846  00E0BC  A4D8               	btfss	status,2,c
 10847  00E0BE  D0C7               	goto	l713
 10848                           
 10849                           ;standbyMode.c: 210: returnValue = 43;
 10850  00E0C0  0E00               	movlw	0
 10851  00E0C2  6E08               	movwf	check_food@returnValue+1,c
 10852  00E0C4  0E2B               	movlw	43
 10853  00E0C6  D07D               	goto	L88
 10854  00E0C8                     
 10855                           ;standbyMode.c: 216: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10856  00E0C8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10857  00E0CC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10858  00E0D0  04DE               	decf	postinc2,w,c
 10859  00E0D2  10DE               	iorwf	postinc2,w,c
 10860  00E0D4  A4D8               	btfss	status,2,c
 10861  00E0D6  D0BB               	goto	l713
 10862  00E0D8  EE20 F002          	lfsr	2,2
 10863  00E0DC  5003               	movf	check_food@foodInput,w,c
 10864  00E0DE  26D9               	addwf	fsr2l,f,c
 10865  00E0E0  5004               	movf	check_food@foodInput+1,w,c
 10866  00E0E2  22DA               	addwfc	fsr2h,f,c
 10867  00E0E4  04DE               	decf	postinc2,w,c
 10868  00E0E6  10DE               	iorwf	postinc2,w,c
 10869  00E0E8  A4D8               	btfss	status,2,c
 10870  00E0EA  D0B1               	goto	l713
 10871  00E0EC  EE20 F004          	lfsr	2,4
 10872  00E0F0  5003               	movf	check_food@foodInput,w,c
 10873  00E0F2  26D9               	addwf	fsr2l,f,c
 10874  00E0F4  5004               	movf	check_food@foodInput+1,w,c
 10875  00E0F6  22DA               	addwfc	fsr2h,f,c
 10876  00E0F8  04DE               	decf	postinc2,w,c
 10877  00E0FA  10DE               	iorwf	postinc2,w,c
 10878  00E0FC  A4D8               	btfss	status,2,c
 10879  00E0FE  D0A7               	goto	l713
 10880  00E100  EE20 F006          	lfsr	2,6
 10881  00E104  5003               	movf	check_food@foodInput,w,c
 10882  00E106  26D9               	addwf	fsr2l,f,c
 10883  00E108  5004               	movf	check_food@foodInput+1,w,c
 10884  00E10A  22DA               	addwfc	fsr2h,f,c
 10885  00E10C  04DE               	decf	postinc2,w,c
 10886  00E10E  10DE               	iorwf	postinc2,w,c
 10887  00E110  A4D8               	btfss	status,2,c
 10888  00E112  D09D               	goto	l713
 10889                           
 10890                           ;standbyMode.c: 217: returnValue = 44;
 10891  00E114  0E00               	movlw	0
 10892  00E116  6E08               	movwf	check_food@returnValue+1,c
 10893  00E118  0E2C               	movlw	44
 10894  00E11A  D053               	goto	L88
 10895  00E11C                     
 10896                           ;standbyMode.c: 223: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10897  00E11C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10898  00E120  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10899  00E124  04DE               	decf	postinc2,w,c
 10900  00E126  10DE               	iorwf	postinc2,w,c
 10901  00E128  A4D8               	btfss	status,2,c
 10902  00E12A  D091               	goto	l713
 10903  00E12C  EE20 F002          	lfsr	2,2
 10904  00E130  5003               	movf	check_food@foodInput,w,c
 10905  00E132  26D9               	addwf	fsr2l,f,c
 10906  00E134  5004               	movf	check_food@foodInput+1,w,c
 10907  00E136  22DA               	addwfc	fsr2h,f,c
 10908  00E138  04DE               	decf	postinc2,w,c
 10909  00E13A  10DE               	iorwf	postinc2,w,c
 10910  00E13C  A4D8               	btfss	status,2,c
 10911  00E13E  D087               	goto	l713
 10912  00E140  EE20 F004          	lfsr	2,4
 10913  00E144  5003               	movf	check_food@foodInput,w,c
 10914  00E146  26D9               	addwf	fsr2l,f,c
 10915  00E148  5004               	movf	check_food@foodInput+1,w,c
 10916  00E14A  22DA               	addwfc	fsr2h,f,c
 10917  00E14C  04DE               	decf	postinc2,w,c
 10918  00E14E  10DE               	iorwf	postinc2,w,c
 10919  00E150  A4D8               	btfss	status,2,c
 10920  00E152  D07D               	goto	l713
 10921  00E154  EE20 F006          	lfsr	2,6
 10922  00E158  5003               	movf	check_food@foodInput,w,c
 10923  00E15A  26D9               	addwf	fsr2l,f,c
 10924  00E15C  5004               	movf	check_food@foodInput+1,w,c
 10925  00E15E  22DA               	addwfc	fsr2h,f,c
 10926  00E160  04DE               	decf	postinc2,w,c
 10927  00E162  10DE               	iorwf	postinc2,w,c
 10928  00E164  A4D8               	btfss	status,2,c
 10929  00E166  D073               	goto	l713
 10930                           
 10931                           ;standbyMode.c: 224: returnValue = 45;
 10932  00E168  0E00               	movlw	0
 10933  00E16A  6E08               	movwf	check_food@returnValue+1,c
 10934  00E16C  0E2D               	movlw	45
 10935  00E16E  D029               	goto	L88
 10936  00E170                     
 10937                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10938  00E170  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10939  00E174  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10940  00E178  04DE               	decf	postinc2,w,c
 10941  00E17A  10DE               	iorwf	postinc2,w,c
 10942  00E17C  A4D8               	btfss	status,2,c
 10943  00E17E  D067               	goto	l713
 10944  00E180  EE20 F002          	lfsr	2,2
 10945  00E184  5003               	movf	check_food@foodInput,w,c
 10946  00E186  26D9               	addwf	fsr2l,f,c
 10947  00E188  5004               	movf	check_food@foodInput+1,w,c
 10948  00E18A  22DA               	addwfc	fsr2h,f,c
 10949  00E18C  04DE               	decf	postinc2,w,c
 10950  00E18E  10DE               	iorwf	postinc2,w,c
 10951  00E190  A4D8               	btfss	status,2,c
 10952  00E192  D05D               	goto	l713
 10953  00E194  EE20 F004          	lfsr	2,4
 10954  00E198  5003               	movf	check_food@foodInput,w,c
 10955  00E19A  26D9               	addwf	fsr2l,f,c
 10956  00E19C  5004               	movf	check_food@foodInput+1,w,c
 10957  00E19E  22DA               	addwfc	fsr2h,f,c
 10958  00E1A0  04DE               	decf	postinc2,w,c
 10959  00E1A2  10DE               	iorwf	postinc2,w,c
 10960  00E1A4  A4D8               	btfss	status,2,c
 10961  00E1A6  D053               	goto	l713
 10962  00E1A8  EE20 F006          	lfsr	2,6
 10963  00E1AC  5003               	movf	check_food@foodInput,w,c
 10964  00E1AE  26D9               	addwf	fsr2l,f,c
 10965  00E1B0  5004               	movf	check_food@foodInput+1,w,c
 10966  00E1B2  22DA               	addwfc	fsr2h,f,c
 10967  00E1B4  04DE               	decf	postinc2,w,c
 10968  00E1B6  10DE               	iorwf	postinc2,w,c
 10969  00E1B8  A4D8               	btfss	status,2,c
 10970  00E1BA  D049               	goto	l713
 10971                           
 10972                           ;standbyMode.c: 231: returnValue = 46;
 10973  00E1BC  0E00               	movlw	0
 10974  00E1BE  6E08               	movwf	check_food@returnValue+1,c
 10975  00E1C0  0E2E               	movlw	46
 10976  00E1C2                     L88:
 10977  00E1C2  6E07               	movwf	check_food@returnValue,c
 10978                           
 10979                           ;standbyMode.c: 238: }
 10980                           
 10981                           ;standbyMode.c: 237: break;
 10982                           
 10983                           ;standbyMode.c: 236: default:
 10984                           
 10985                           ;standbyMode.c: 232: }
 10986                           ;standbyMode.c: 233: break;
 10987  00E1C4  D044               	goto	l713
 10988  00E1C6                     l708:
 10989  00E1C6  C001  F005         	movff	check_food@sum,??_check_food
 10990  00E1CA  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10991                           
 10992                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10993                           ; Switch size 1, requested type "space"
 10994                           ; Number of cases is 1, Range of values is 0 to 0
 10995                           ; switch strategies available:
 10996                           ; Name         Instructions Cycles
 10997                           ; simple_byte            4     3 (average)
 10998                           ;	Chosen strategy is simple_byte
 10999  00E1CE  5006               	movf	??_check_food+1,w,c
 11000  00E1D0  0A00               	xorlw	0	; case 0
 11001  00E1D2  A4D8               	btfss	status,2,c
 11002  00E1D4  D03C               	goto	l713
 11003                           
 11004                           ; Switch size 1, requested type "space"
 11005                           ; Number of cases is 18, Range of values is 3 to 43
 11006                           ; switch strategies available:
 11007                           ; Name         Instructions Cycles
 11008                           ; simple_byte           55    28 (average)
 11009                           ;	Chosen strategy is simple_byte
 11010  00E1D6  5005               	movf	??_check_food,w,c
 11011  00E1D8  0A03               	xorlw	3	; case 3
 11012  00E1DA  B4D8               	btfsc	status,2,c
 11013  00E1DC  EFD4  F06B         	goto	l709
 11014  00E1E0  0A04               	xorlw	4	; case 7
 11015  00E1E2  B4D8               	btfsc	status,2,c
 11016  00E1E4  EFF0  F06B         	goto	l714
 11017  00E1E8  0A0D               	xorlw	13	; case 10
 11018  00E1EA  B4D8               	btfsc	status,2,c
 11019  00E1EC  EF36  F06C         	goto	l724
 11020  00E1F0  0A06               	xorlw	6	; case 12
 11021  00E1F2  B4D8               	btfsc	status,2,c
 11022  00E1F4  EF0C  F06C         	goto	l718
 11023  00E1F8  0A01               	xorlw	1	; case 13
 11024  00E1FA  B4D8               	btfsc	status,2,c
 11025  00E1FC  D484               	goto	l752
 11026  00E1FE  0A02               	xorlw	2	; case 15
 11027  00E200  B4D8               	btfsc	status,2,c
 11028  00E202  EF98  F06C         	goto	l732
 11029  00E206  0A1E               	xorlw	30	; case 17
 11030  00E208  B4D8               	btfsc	status,2,c
 11031  00E20A  D4FF               	goto	l760
 11032  00E20C  0A03               	xorlw	3	; case 18
 11033  00E20E  B4D8               	btfsc	status,2,c
 11034  00E210  D4BB               	goto	l756
 11035  00E212  0A01               	xorlw	1	; case 19
 11036  00E214  B4D8               	btfsc	status,2,c
 11037  00E216  D404               	goto	l742
 11038  00E218  0A05               	xorlw	5	; case 22
 11039  00E21A  B4D8               	btfsc	status,2,c
 11040  00E21C  D5BA               	goto	l772
 11041  00E21E  0A0F               	xorlw	15	; case 25
 11042  00E220  B4D8               	btfsc	status,2,c
 11043  00E222  D6FE               	goto	l792
 11044  00E224  0A03               	xorlw	3	; case 26
 11045  00E226  B4D8               	btfsc	status,2,c
 11046  00E228  D637               	goto	l780
 11047  00E22A  0A01               	xorlw	1	; case 27
 11048  00E22C  B4D8               	btfsc	status,2,c
 11049  00E22E  D52E               	goto	l764
 11050  00E230  0A06               	xorlw	6	; case 29
 11051  00E232  B4D8               	btfsc	status,2,c
 11052  00E234  D71F               	goto	l794
 11053  00E236  0A02               	xorlw	2	; case 31
 11054  00E238  B4D8               	btfsc	status,2,c
 11055  00E23A  D66F               	goto	l784
 11056  00E23C  0A3D               	xorlw	61	; case 34
 11057  00E23E  B4D8               	btfsc	status,2,c
 11058  00E240  D743               	goto	l796
 11059  00E242  0A05               	xorlw	5	; case 39
 11060  00E244  B4D8               	btfsc	status,2,c
 11061  00E246  D76A               	goto	l798
 11062  00E248  0A0C               	xorlw	12	; case 43
 11063  00E24A  B4D8               	btfsc	status,2,c
 11064  00E24C  D791               	goto	l800
 11065  00E24E                     l713:
 11066                           
 11067                           ;standbyMode.c: 239: return returnValue;
 11068  00E24E  C007  F001         	movff	check_food@returnValue,?_check_food
 11069  00E252  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 11070  00E256  0012               	return		;funcret
 11071  00E258                     __end_of_check_food:
 11072                           	opt stack 0
 11073                           tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           plusw1	equ	0xFE3
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           plusw2	equ	0xFDB
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function _diet_press *****************
 11093 ;; Defined at:
 11094 ;;		line 1201 in file "standbyMode.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  drawer          2   40[COMRAM] unsigned int 
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;  keypress        1   54[COMRAM] unsigned char 
 11099 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 11100 ;;  sum             2   52[COMRAM] unsigned int 
 11101 ;;  count           2   50[COMRAM] unsigned int 
 11102 ;;  backCheck       2   48[COMRAM] unsigned int 
 11103 ;;  i               2   46[COMRAM] unsigned int 
 11104 ;;  previous        2   44[COMRAM] unsigned int 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;                  2   40[COMRAM] unsigned int 
 11107 ;; Registers used:
 11108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11114 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;Total ram usage:       23 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    3
 11121 ;; This function calls:
 11122 ;;		_lcdInst
 11123 ;;		_printf
 11124 ;;		_putch
 11125 ;; This function is called by:
 11126 ;;		_standbyMode
 11127 ;; This function uses a non-reentrant model
 11128 ;;
 11129                           
 11130                           	psect	text15
 11131  00C60A                     __ptext15:
 11132                           	opt stack 0
 11133  00C60A                     _diet_press:
 11134                           	opt stack 26
 11135                           
 11136                           ;incstack = 0
 11137                           ;standbyMode.c: 1204: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 11138  00C60A  0E01               	movlw	1
 11139  00C60C  EC16  F04D         	call	_lcdInst
 11140  00C610  0EC3               	movlw	195
 11141  00C612  6E2B               	movwf	??_diet_press& (0+255),c
 11142  00C614  0ECD               	movlw	205
 11143  00C616                     u15097:
 11144  00C616  2EE8               	decfsz	wreg,f,c
 11145  00C618  D7FE               	bra	u15097
 11146  00C61A  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11147  00C61C  D7FC               	bra	u15097
 11148  00C61E  F000               	nop	
 11149                           
 11150                           ;standbyMode.c: 1205: printf("Drawer %i diet:", drawer);
 11151  00C620  0E50               	movlw	low STR_109
 11152  00C622  6E0D               	movwf	printf@f,c
 11153  00C624  0EFD               	movlw	high STR_109
 11154  00C626  6E0E               	movwf	printf@f+1,c
 11155  00C628  C029  F00F         	movff	diet_press@drawer,?_printf+2
 11156  00C62C  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 11157  00C630  EC0C  F061         	call	_printf	;wreg free
 11158                           
 11159                           ;standbyMode.c: 1206: lcdInst(0xC0);;
 11160  00C634  0EC0               	movlw	192
 11161  00C636  EC16  F04D         	call	_lcdInst
 11162                           
 11163                           ;standbyMode.c: 1208: unsigned int count = 0;
 11164  00C63A  0E00               	movlw	0
 11165  00C63C  6E34               	movwf	diet_press@count+1,c
 11166  00C63E  0E00               	movlw	0
 11167  00C640  6E33               	movwf	diet_press@count,c
 11168                           
 11169                           ;standbyMode.c: 1209: unsigned int previous = 0;
 11170  00C642  0E00               	movlw	0
 11171  00C644  6E2E               	movwf	diet_press@previous+1,c
 11172  00C646  0E00               	movlw	0
 11173  00C648  6E2D               	movwf	diet_press@previous,c
 11174                           
 11175                           ;standbyMode.c: 1210: unsigned int sum = 0;
 11176  00C64A  0E00               	movlw	0
 11177  00C64C  6E36               	movwf	diet_press@sum+1,c
 11178  00C64E  0E00               	movlw	0
 11179  00C650  6E35               	movwf	diet_press@sum,c
 11180                           
 11181                           ;standbyMode.c: 1211: unsigned int i = 0;
 11182  00C652  0E00               	movlw	0
 11183  00C654  6E30               	movwf	diet_press@i+1,c
 11184  00C656  0E00               	movlw	0
 11185  00C658  6E2F               	movwf	diet_press@i,c
 11186                           
 11187                           ;standbyMode.c: 1212: unsigned int dietTable[4] = {0, 0, 0, 0};
 11188  00C65A  EE21  F0EA         	lfsr	2,diet_press@F3132
 11189  00C65E  EE10  F038         	lfsr	1,diet_press@dietTable
 11190  00C662  0E07               	movlw	7
 11191  00C664                     u12211:
 11192  00C664  CFDB FFE3          	movff	plusw2,plusw1
 11193  00C668  06E8               	decf	wreg,f,c
 11194  00C66A  E2FC               	bc	u12211
 11195                           
 11196                           ;standbyMode.c: 1213: unsigned int backCheck = 0;
 11197  00C66C  0E00               	movlw	0
 11198  00C66E  6E32               	movwf	diet_press@backCheck+1,c
 11199  00C670  0E00               	movlw	0
 11200  00C672  6E31               	movwf	diet_press@backCheck,c
 11201  00C674                     l1097:
 11202  00C674  A281               	btfss	3969,1,c	;volatile
 11203  00C676  D7FE               	goto	l1096
 11204                           
 11205                           ;standbyMode.c: 1217: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11206  00C678  3881               	swapf	3969,w,c	;volatile
 11207  00C67A  0B0F               	andlw	15
 11208  00C67C  0B0F               	andlw	15
 11209  00C67E  6E37               	movwf	diet_press@keypress,c
 11210  00C680  B281               	btfsc	3969,1,c	;volatile
 11211  00C682  D7FE               	goto	l1101
 11212                           
 11213                           ;standbyMode.c: 1220: if(keypress == 15){
 11214  00C684  0E0F               	movlw	15
 11215  00C686  1837               	xorwf	diet_press@keypress,w,c
 11216  00C688  B4D8               	btfsc	status,2,c
 11217  00C68A  D086               	goto	l1104
 11218                           
 11219                           ;standbyMode.c: 1223: else if (keypress == 14){
 11220                           
 11221                           ;standbyMode.c: 1222: }
 11222                           
 11223                           ;standbyMode.c: 1221: break;
 11224  00C68C  0E0E               	movlw	14
 11225  00C68E  1837               	xorwf	diet_press@keypress,w,c
 11226  00C690  A4D8               	btfss	status,2,c
 11227  00C692  D005               	goto	l1106
 11228                           
 11229                           ;standbyMode.c: 1224: backCheck = 1;
 11230  00C694  0E00               	movlw	0
 11231  00C696  6E32               	movwf	diet_press@backCheck+1,c
 11232  00C698  0E01               	movlw	1
 11233  00C69A  6E31               	movwf	diet_press@backCheck,c
 11234                           
 11235                           ;standbyMode.c: 1225: break;
 11236  00C69C  D07D               	goto	l1104
 11237  00C69E                     l1106:
 11238                           
 11239                           ;standbyMode.c: 1227: else if (keypress == 12){
 11240  00C69E  0E0C               	movlw	12
 11241  00C6A0  1837               	xorwf	diet_press@keypress,w,c
 11242  00C6A2  A4D8               	btfss	status,2,c
 11243  00C6A4  D02D               	goto	l1108
 11244                           
 11245                           ;standbyMode.c: 1228: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11246  00C6A6  0E01               	movlw	1
 11247  00C6A8  EC16  F04D         	call	_lcdInst
 11248  00C6AC  0EC3               	movlw	195
 11249  00C6AE  6E2B               	movwf	??_diet_press& (0+255),c
 11250  00C6B0  0ECD               	movlw	205
 11251  00C6B2                     u15107:
 11252  00C6B2  2EE8               	decfsz	wreg,f,c
 11253  00C6B4  D7FE               	bra	u15107
 11254  00C6B6  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11255  00C6B8  D7FC               	bra	u15107
 11256  00C6BA  F000               	nop	
 11257                           
 11258                           ;standbyMode.c: 1229: printf("Drawer %i diet:", drawer);
 11259  00C6BC  0E50               	movlw	low STR_109
 11260  00C6BE  6E0D               	movwf	printf@f,c
 11261  00C6C0  0EFD               	movlw	high STR_109
 11262  00C6C2  6E0E               	movwf	printf@f+1,c
 11263  00C6C4  C029  F00F         	movff	diet_press@drawer,?_printf+2
 11264  00C6C8  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 11265  00C6CC  EC0C  F061         	call	_printf	;wreg free
 11266                           
 11267                           ;standbyMode.c: 1230: lcdInst(0xC0);;
 11268  00C6D0  0EC0               	movlw	192
 11269  00C6D2  EC16  F04D         	call	_lcdInst
 11270                           
 11271                           ;standbyMode.c: 1231: count = 0;
 11272  00C6D6  0E00               	movlw	0
 11273  00C6D8  6E34               	movwf	diet_press@count+1,c
 11274  00C6DA  0E00               	movlw	0
 11275  00C6DC  6E33               	movwf	diet_press@count,c
 11276                           
 11277                           ;standbyMode.c: 1232: dietTable[0] = 0;
 11278  00C6DE  0E00               	movlw	0
 11279  00C6E0  6E39               	movwf	diet_press@dietTable+1,c
 11280  00C6E2  0E00               	movlw	0
 11281  00C6E4  6E38               	movwf	diet_press@dietTable,c
 11282                           
 11283                           ;standbyMode.c: 1233: dietTable[1] = 0;
 11284  00C6E6  0E00               	movlw	0
 11285  00C6E8  6E3B               	movwf	diet_press@dietTable+3,c
 11286  00C6EA  0E00               	movlw	0
 11287  00C6EC  6E3A               	movwf	diet_press@dietTable+2,c
 11288                           
 11289                           ;standbyMode.c: 1234: dietTable[2] = 0;
 11290  00C6EE  0E00               	movlw	0
 11291  00C6F0  6E3D               	movwf	diet_press@dietTable+5,c
 11292  00C6F2  0E00               	movlw	0
 11293  00C6F4  6E3C               	movwf	diet_press@dietTable+4,c
 11294                           
 11295                           ;standbyMode.c: 1235: dietTable[3] = 0;
 11296  00C6F6  0E00               	movlw	0
 11297  00C6F8  6E3F               	movwf	diet_press@dietTable+7,c
 11298  00C6FA  0E00               	movlw	0
 11299  00C6FC  6E3E               	movwf	diet_press@dietTable+6,c
 11300                           
 11301                           ;standbyMode.c: 1236: }
 11302  00C6FE  D7BA               	goto	l1096
 11303  00C700                     l1108:
 11304                           
 11305                           ;standbyMode.c: 1237: else if (count <= 3){
 11306  00C700  5034               	movf	diet_press@count+1,w,c
 11307  00C702  E1B8               	bnz	l1097
 11308  00C704  0E04               	movlw	4
 11309  00C706  5C33               	subwf	diet_press@count,w,c
 11310  00C708  B0D8               	btfsc	status,0,c
 11311  00C70A  D7B4               	goto	l1096
 11312                           
 11313                           ;standbyMode.c: 1238: if (keypress == 3 || keypress == 7){
 11314  00C70C  0E03               	movlw	3
 11315  00C70E  1837               	xorwf	diet_press@keypress,w,c
 11316  00C710  B4D8               	btfsc	status,2,c
 11317  00C712  D004               	goto	u12290
 11318  00C714  0E07               	movlw	7
 11319  00C716  1837               	xorwf	diet_press@keypress,w,c
 11320  00C718  A4D8               	btfss	status,2,c
 11321  00C71A  D016               	goto	l1111
 11322  00C71C                     u12290:
 11323                           
 11324                           ;standbyMode.c: 1239: putch(input[keypress]);
 11325  00C71C  5037               	movf	diet_press@keypress,w,c
 11326  00C71E  0D01               	mullw	1
 11327  00C720  0E36               	movlw	low _input
 11328  00C722  24F3               	addwf	prodl,w,c
 11329  00C724  6EF6               	movwf	tblptrl,c
 11330  00C726  0EFC               	movlw	high _input
 11331  00C728  20F4               	addwfc	prodh,w,c
 11332  00C72A  6EF7               	movwf	tblptrh,c
 11333  00C72C                     	if	1	;There are 3 active tblptr bytes
 11334  00C72C  6AF8               	clrf	tblptru,c
 11335  00C72E  0E00               	movlw	low (__mediumconst shr (0+16))
 11336  00C730  22F8               	addwfc	tblptru,f,c
 11337  00C732                     	endif
 11338  00C732  0008               	tblrd		*
 11339  00C734  50F5               	movf	tablat,w,c
 11340  00C736  EC2A  F04D         	call	_putch
 11341                           
 11342                           ;standbyMode.c: 1240: dietTable[count] = keypress;
 11343  00C73A  5037               	movf	diet_press@keypress,w,c
 11344  00C73C  6E2B               	movwf	??_diet_press& (0+255),c
 11345  00C73E  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11346  00C740  D01D               	goto	L107
 11347  00C742                     l9628:
 11348                           
 11349                           ;standbyMode.c: 1241: count += 1;
 11350  00C742  4A33               	infsnz	diet_press@count,f,c
 11351  00C744  2A34               	incf	diet_press@count+1,f,c
 11352                           
 11353                           ;standbyMode.c: 1242: }
 11354  00C746  D796               	goto	l1096
 11355  00C748                     l1111:
 11356                           
 11357                           ;standbyMode.c: 1243: else if (keypress == 11){
 11358  00C748  0E0B               	movlw	11
 11359  00C74A  1837               	xorwf	diet_press@keypress,w,c
 11360  00C74C  A4D8               	btfss	status,2,c
 11361  00C74E  D792               	goto	l1096
 11362                           
 11363                           ;standbyMode.c: 1244: putch(input[keypress]);
 11364  00C750  5037               	movf	diet_press@keypress,w,c
 11365  00C752  0D01               	mullw	1
 11366  00C754  0E36               	movlw	low _input
 11367  00C756  24F3               	addwf	prodl,w,c
 11368  00C758  6EF6               	movwf	tblptrl,c
 11369  00C75A  0EFC               	movlw	high _input
 11370  00C75C  20F4               	addwfc	prodh,w,c
 11371  00C75E  6EF7               	movwf	tblptrh,c
 11372  00C760                     	if	1	;There are 3 active tblptr bytes
 11373  00C760  6AF8               	clrf	tblptru,c
 11374  00C762  0E00               	movlw	low (__mediumconst shr (0+16))
 11375  00C764  22F8               	addwfc	tblptru,f,c
 11376  00C766                     	endif
 11377  00C766  0008               	tblrd		*
 11378  00C768  50F5               	movf	tablat,w,c
 11379  00C76A  EC2A  F04D         	call	_putch
 11380                           
 11381                           ;standbyMode.c: 1245: dietTable[count] = keypress + 1;
 11382  00C76E  5037               	movf	diet_press@keypress,w,c
 11383  00C770  6E2B               	movwf	??_diet_press& (0+255),c
 11384  00C772  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11385  00C774  0E01               	movlw	1
 11386  00C776  262B               	addwf	??_diet_press,f,c
 11387  00C778  0E00               	movlw	0
 11388  00C77A  222C               	addwfc	??_diet_press+1,f,c
 11389  00C77C                     L107:
 11390  00C77C  90D8               	bcf	status,0,c
 11391  00C77E  3433               	rlcf	diet_press@count,w,c
 11392  00C780  6ED9               	movwf	fsr2l,c
 11393  00C782  3434               	rlcf	diet_press@count+1,w,c
 11394  00C784  6EDA               	movwf	fsr2h,c
 11395  00C786  0E38               	movlw	low diet_press@dietTable
 11396  00C788  26D9               	addwf	fsr2l,f,c
 11397  00C78A  0E00               	movlw	high diet_press@dietTable
 11398  00C78C  22DA               	addwfc	fsr2h,f,c
 11399  00C78E  C02B  FFDE         	movff	??_diet_press,postinc2
 11400  00C792  C02C  FFDD         	movff	??_diet_press+1,postdec2
 11401  00C796  D7D5               	goto	l9628
 11402  00C798                     l1104:
 11403                           
 11404                           ;standbyMode.c: 1247: }
 11405                           ;standbyMode.c: 1248: }
 11406                           ;standbyMode.c: 1249: }
 11407                           ;standbyMode.c: 1251: if (backCheck == 1){
 11408  00C798  0431               	decf	diet_press@backCheck,w,c
 11409  00C79A  1032               	iorwf	diet_press@backCheck+1,w,c
 11410  00C79C  A4D8               	btfss	status,2,c
 11411  00C79E  D004               	goto	l1117
 11412                           
 11413                           ;standbyMode.c: 1252: sum = 100;
 11414  00C7A0  0E00               	movlw	0
 11415  00C7A2  6E36               	movwf	diet_press@sum+1,c
 11416  00C7A4  0E64               	movlw	100
 11417  00C7A6  D199               	goto	L106
 11418  00C7A8                     l1117:
 11419                           
 11420                           ;standbyMode.c: 1256: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11421  00C7A8  0E0C               	movlw	12
 11422  00C7AA  1838               	xorwf	diet_press@dietTable,w,c
 11423  00C7AC  1039               	iorwf	diet_press@dietTable+1,w,c
 11424  00C7AE  A4D8               	btfss	status,2,c
 11425  00C7B0  D010               	goto	l1119
 11426  00C7B2  503A               	movf	diet_press@dietTable+2,w,c
 11427  00C7B4  103B               	iorwf	diet_press@dietTable+3,w,c
 11428  00C7B6  A4D8               	btfss	status,2,c
 11429  00C7B8  D00C               	goto	l1119
 11430  00C7BA  503C               	movf	diet_press@dietTable+4,w,c
 11431  00C7BC  103D               	iorwf	diet_press@dietTable+5,w,c
 11432  00C7BE  A4D8               	btfss	status,2,c
 11433  00C7C0  D008               	goto	l1119
 11434  00C7C2  503E               	movf	diet_press@dietTable+6,w,c
 11435  00C7C4  103F               	iorwf	diet_press@dietTable+7,w,c
 11436  00C7C6  A4D8               	btfss	status,2,c
 11437  00C7C8  D004               	goto	l1119
 11438                           
 11439                           ;standbyMode.c: 1257: sum = 12;
 11440  00C7CA  0E00               	movlw	0
 11441  00C7CC  6E36               	movwf	diet_press@sum+1,c
 11442  00C7CE  0E0C               	movlw	12
 11443  00C7D0  D184               	goto	L106
 11444  00C7D2                     l1119:
 11445                           
 11446                           ;standbyMode.c: 1261: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11447  00C7D2  0E03               	movlw	3
 11448  00C7D4  1838               	xorwf	diet_press@dietTable,w,c
 11449  00C7D6  1039               	iorwf	diet_press@dietTable+1,w,c
 11450  00C7D8  A4D8               	btfss	status,2,c
 11451  00C7DA  D010               	goto	l1121
 11452  00C7DC  503A               	movf	diet_press@dietTable+2,w,c
 11453  00C7DE  103B               	iorwf	diet_press@dietTable+3,w,c
 11454  00C7E0  A4D8               	btfss	status,2,c
 11455  00C7E2  D00C               	goto	l1121
 11456  00C7E4  503C               	movf	diet_press@dietTable+4,w,c
 11457  00C7E6  103D               	iorwf	diet_press@dietTable+5,w,c
 11458  00C7E8  A4D8               	btfss	status,2,c
 11459  00C7EA  D008               	goto	l1121
 11460  00C7EC  503E               	movf	diet_press@dietTable+6,w,c
 11461  00C7EE  103F               	iorwf	diet_press@dietTable+7,w,c
 11462  00C7F0  A4D8               	btfss	status,2,c
 11463  00C7F2  D004               	goto	l1121
 11464                           
 11465                           ;standbyMode.c: 1262: sum = 3;
 11466  00C7F4  0E00               	movlw	0
 11467  00C7F6  6E36               	movwf	diet_press@sum+1,c
 11468  00C7F8  0E03               	movlw	3
 11469  00C7FA  D16F               	goto	L106
 11470  00C7FC                     l1121:
 11471                           
 11472                           ;standbyMode.c: 1266: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11473  00C7FC  0E07               	movlw	7
 11474  00C7FE  1838               	xorwf	diet_press@dietTable,w,c
 11475  00C800  1039               	iorwf	diet_press@dietTable+1,w,c
 11476  00C802  A4D8               	btfss	status,2,c
 11477  00C804  D010               	goto	l1123
 11478  00C806  503A               	movf	diet_press@dietTable+2,w,c
 11479  00C808  103B               	iorwf	diet_press@dietTable+3,w,c
 11480  00C80A  A4D8               	btfss	status,2,c
 11481  00C80C  D00C               	goto	l1123
 11482  00C80E  503C               	movf	diet_press@dietTable+4,w,c
 11483  00C810  103D               	iorwf	diet_press@dietTable+5,w,c
 11484  00C812  A4D8               	btfss	status,2,c
 11485  00C814  D008               	goto	l1123
 11486  00C816  503E               	movf	diet_press@dietTable+6,w,c
 11487  00C818  103F               	iorwf	diet_press@dietTable+7,w,c
 11488  00C81A  A4D8               	btfss	status,2,c
 11489  00C81C  D004               	goto	l1123
 11490                           
 11491                           ;standbyMode.c: 1267: sum = 7;
 11492  00C81E  0E00               	movlw	0
 11493  00C820  6E36               	movwf	diet_press@sum+1,c
 11494  00C822  0E07               	movlw	7
 11495  00C824  D15A               	goto	L106
 11496  00C826                     l1123:
 11497                           
 11498                           ;standbyMode.c: 1271: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11499  00C826  0E03               	movlw	3
 11500  00C828  1838               	xorwf	diet_press@dietTable,w,c
 11501  00C82A  1039               	iorwf	diet_press@dietTable+1,w,c
 11502  00C82C  A4D8               	btfss	status,2,c
 11503  00C82E  D011               	goto	l1125
 11504  00C830  0E07               	movlw	7
 11505  00C832  183A               	xorwf	diet_press@dietTable+2,w,c
 11506  00C834  103B               	iorwf	diet_press@dietTable+3,w,c
 11507  00C836  A4D8               	btfss	status,2,c
 11508  00C838  D00C               	goto	l1125
 11509  00C83A  503C               	movf	diet_press@dietTable+4,w,c
 11510  00C83C  103D               	iorwf	diet_press@dietTable+5,w,c
 11511  00C83E  A4D8               	btfss	status,2,c
 11512  00C840  D008               	goto	l1125
 11513  00C842  503E               	movf	diet_press@dietTable+6,w,c
 11514  00C844  103F               	iorwf	diet_press@dietTable+7,w,c
 11515  00C846  A4D8               	btfss	status,2,c
 11516  00C848  D004               	goto	l1125
 11517                           
 11518                           ;standbyMode.c: 1272: sum = 10;
 11519  00C84A  0E00               	movlw	0
 11520  00C84C  6E36               	movwf	diet_press@sum+1,c
 11521  00C84E  0E0A               	movlw	10
 11522  00C850  D144               	goto	L106
 11523  00C852                     l1125:
 11524                           
 11525                           ;standbyMode.c: 1276: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11526  00C852  0E03               	movlw	3
 11527  00C854  1838               	xorwf	diet_press@dietTable,w,c
 11528  00C856  1039               	iorwf	diet_press@dietTable+1,w,c
 11529  00C858  A4D8               	btfss	status,2,c
 11530  00C85A  D011               	goto	l1127
 11531  00C85C  0E0C               	movlw	12
 11532  00C85E  183A               	xorwf	diet_press@dietTable+2,w,c
 11533  00C860  103B               	iorwf	diet_press@dietTable+3,w,c
 11534  00C862  A4D8               	btfss	status,2,c
 11535  00C864  D00C               	goto	l1127
 11536  00C866  503C               	movf	diet_press@dietTable+4,w,c
 11537  00C868  103D               	iorwf	diet_press@dietTable+5,w,c
 11538  00C86A  A4D8               	btfss	status,2,c
 11539  00C86C  D008               	goto	l1127
 11540  00C86E  503E               	movf	diet_press@dietTable+6,w,c
 11541  00C870  103F               	iorwf	diet_press@dietTable+7,w,c
 11542  00C872  A4D8               	btfss	status,2,c
 11543  00C874  D004               	goto	l1127
 11544                           
 11545                           ;standbyMode.c: 1277: sum = 15;
 11546  00C876  0E00               	movlw	0
 11547  00C878  6E36               	movwf	diet_press@sum+1,c
 11548  00C87A  0E0F               	movlw	15
 11549  00C87C  D12E               	goto	L106
 11550  00C87E                     l1127:
 11551                           
 11552                           ;standbyMode.c: 1281: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11553  00C87E  0E07               	movlw	7
 11554  00C880  1838               	xorwf	diet_press@dietTable,w,c
 11555  00C882  1039               	iorwf	diet_press@dietTable+1,w,c
 11556  00C884  A4D8               	btfss	status,2,c
 11557  00C886  D011               	goto	l1129
 11558  00C888  0E0C               	movlw	12
 11559  00C88A  183A               	xorwf	diet_press@dietTable+2,w,c
 11560  00C88C  103B               	iorwf	diet_press@dietTable+3,w,c
 11561  00C88E  A4D8               	btfss	status,2,c
 11562  00C890  D00C               	goto	l1129
 11563  00C892  503C               	movf	diet_press@dietTable+4,w,c
 11564  00C894  103D               	iorwf	diet_press@dietTable+5,w,c
 11565  00C896  A4D8               	btfss	status,2,c
 11566  00C898  D008               	goto	l1129
 11567  00C89A  503E               	movf	diet_press@dietTable+6,w,c
 11568  00C89C  103F               	iorwf	diet_press@dietTable+7,w,c
 11569  00C89E  A4D8               	btfss	status,2,c
 11570  00C8A0  D004               	goto	l1129
 11571                           
 11572                           ;standbyMode.c: 1282: sum = 19;
 11573  00C8A2  0E00               	movlw	0
 11574  00C8A4  6E36               	movwf	diet_press@sum+1,c
 11575  00C8A6  0E13               	movlw	19
 11576  00C8A8  D118               	goto	L106
 11577  00C8AA                     l1129:
 11578                           
 11579                           ;standbyMode.c: 1286: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11580  00C8AA  0E03               	movlw	3
 11581  00C8AC  1838               	xorwf	diet_press@dietTable,w,c
 11582  00C8AE  1039               	iorwf	diet_press@dietTable+1,w,c
 11583  00C8B0  A4D8               	btfss	status,2,c
 11584  00C8B2  D012               	goto	l1131
 11585  00C8B4  0E03               	movlw	3
 11586  00C8B6  183A               	xorwf	diet_press@dietTable+2,w,c
 11587  00C8B8  103B               	iorwf	diet_press@dietTable+3,w,c
 11588  00C8BA  A4D8               	btfss	status,2,c
 11589  00C8BC  D00D               	goto	l1131
 11590  00C8BE  0E07               	movlw	7
 11591  00C8C0  183C               	xorwf	diet_press@dietTable+4,w,c
 11592  00C8C2  103D               	iorwf	diet_press@dietTable+5,w,c
 11593  00C8C4  A4D8               	btfss	status,2,c
 11594  00C8C6  D008               	goto	l1131
 11595  00C8C8  503E               	movf	diet_press@dietTable+6,w,c
 11596  00C8CA  103F               	iorwf	diet_press@dietTable+7,w,c
 11597  00C8CC  A4D8               	btfss	status,2,c
 11598  00C8CE  D004               	goto	l1131
 11599                           
 11600                           ;standbyMode.c: 1287: sum = 13;
 11601  00C8D0  0E00               	movlw	0
 11602  00C8D2  6E36               	movwf	diet_press@sum+1,c
 11603  00C8D4  0E0D               	movlw	13
 11604  00C8D6  D101               	goto	L106
 11605  00C8D8                     l1131:
 11606                           
 11607                           ;standbyMode.c: 1291: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11608  00C8D8  0E03               	movlw	3
 11609  00C8DA  1838               	xorwf	diet_press@dietTable,w,c
 11610  00C8DC  1039               	iorwf	diet_press@dietTable+1,w,c
 11611  00C8DE  A4D8               	btfss	status,2,c
 11612  00C8E0  D012               	goto	l1133
 11613  00C8E2  0E03               	movlw	3
 11614  00C8E4  183A               	xorwf	diet_press@dietTable+2,w,c
 11615  00C8E6  103B               	iorwf	diet_press@dietTable+3,w,c
 11616  00C8E8  A4D8               	btfss	status,2,c
 11617  00C8EA  D00D               	goto	l1133
 11618  00C8EC  0E0C               	movlw	12
 11619  00C8EE  183C               	xorwf	diet_press@dietTable+4,w,c
 11620  00C8F0  103D               	iorwf	diet_press@dietTable+5,w,c
 11621  00C8F2  A4D8               	btfss	status,2,c
 11622  00C8F4  D008               	goto	l1133
 11623  00C8F6  503E               	movf	diet_press@dietTable+6,w,c
 11624  00C8F8  103F               	iorwf	diet_press@dietTable+7,w,c
 11625  00C8FA  A4D8               	btfss	status,2,c
 11626  00C8FC  D004               	goto	l1133
 11627                           
 11628                           ;standbyMode.c: 1292: sum = 18;
 11629  00C8FE  0E00               	movlw	0
 11630  00C900  6E36               	movwf	diet_press@sum+1,c
 11631  00C902  0E12               	movlw	18
 11632  00C904  D0EA               	goto	L106
 11633  00C906                     l1133:
 11634                           
 11635                           ;standbyMode.c: 1296: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11636  00C906  0E03               	movlw	3
 11637  00C908  1838               	xorwf	diet_press@dietTable,w,c
 11638  00C90A  1039               	iorwf	diet_press@dietTable+1,w,c
 11639  00C90C  A4D8               	btfss	status,2,c
 11640  00C90E  D012               	goto	l1135
 11641  00C910  0E07               	movlw	7
 11642  00C912  183A               	xorwf	diet_press@dietTable+2,w,c
 11643  00C914  103B               	iorwf	diet_press@dietTable+3,w,c
 11644  00C916  A4D8               	btfss	status,2,c
 11645  00C918  D00D               	goto	l1135
 11646  00C91A  0E07               	movlw	7
 11647  00C91C  183C               	xorwf	diet_press@dietTable+4,w,c
 11648  00C91E  103D               	iorwf	diet_press@dietTable+5,w,c
 11649  00C920  A4D8               	btfss	status,2,c
 11650  00C922  D008               	goto	l1135
 11651  00C924  503E               	movf	diet_press@dietTable+6,w,c
 11652  00C926  103F               	iorwf	diet_press@dietTable+7,w,c
 11653  00C928  A4D8               	btfss	status,2,c
 11654  00C92A  D004               	goto	l1135
 11655                           
 11656                           ;standbyMode.c: 1297: sum = 17;
 11657  00C92C  0E00               	movlw	0
 11658  00C92E  6E36               	movwf	diet_press@sum+1,c
 11659  00C930  0E11               	movlw	17
 11660  00C932  D0D3               	goto	L106
 11661  00C934                     l1135:
 11662                           
 11663                           ;standbyMode.c: 1301: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11664  00C934  0E03               	movlw	3
 11665  00C936  1838               	xorwf	diet_press@dietTable,w,c
 11666  00C938  1039               	iorwf	diet_press@dietTable+1,w,c
 11667  00C93A  A4D8               	btfss	status,2,c
 11668  00C93C  D012               	goto	l1137
 11669  00C93E  0E0C               	movlw	12
 11670  00C940  183A               	xorwf	diet_press@dietTable+2,w,c
 11671  00C942  103B               	iorwf	diet_press@dietTable+3,w,c
 11672  00C944  A4D8               	btfss	status,2,c
 11673  00C946  D00D               	goto	l1137
 11674  00C948  0E0C               	movlw	12
 11675  00C94A  183C               	xorwf	diet_press@dietTable+4,w,c
 11676  00C94C  103D               	iorwf	diet_press@dietTable+5,w,c
 11677  00C94E  A4D8               	btfss	status,2,c
 11678  00C950  D008               	goto	l1137
 11679  00C952  503E               	movf	diet_press@dietTable+6,w,c
 11680  00C954  103F               	iorwf	diet_press@dietTable+7,w,c
 11681  00C956  A4D8               	btfss	status,2,c
 11682  00C958  D004               	goto	l1137
 11683                           
 11684                           ;standbyMode.c: 1302: sum = 27;
 11685  00C95A  0E00               	movlw	0
 11686  00C95C  6E36               	movwf	diet_press@sum+1,c
 11687  00C95E  0E1B               	movlw	27
 11688  00C960  D0BC               	goto	L106
 11689  00C962                     l1137:
 11690                           
 11691                           ;standbyMode.c: 1306: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11692  00C962  0E03               	movlw	3
 11693  00C964  1838               	xorwf	diet_press@dietTable,w,c
 11694  00C966  1039               	iorwf	diet_press@dietTable+1,w,c
 11695  00C968  A4D8               	btfss	status,2,c
 11696  00C96A  D012               	goto	l1139
 11697  00C96C  0E07               	movlw	7
 11698  00C96E  183A               	xorwf	diet_press@dietTable+2,w,c
 11699  00C970  103B               	iorwf	diet_press@dietTable+3,w,c
 11700  00C972  A4D8               	btfss	status,2,c
 11701  00C974  D00D               	goto	l1139
 11702  00C976  0E0C               	movlw	12
 11703  00C978  183C               	xorwf	diet_press@dietTable+4,w,c
 11704  00C97A  103D               	iorwf	diet_press@dietTable+5,w,c
 11705  00C97C  A4D8               	btfss	status,2,c
 11706  00C97E  D008               	goto	l1139
 11707  00C980  503E               	movf	diet_press@dietTable+6,w,c
 11708  00C982  103F               	iorwf	diet_press@dietTable+7,w,c
 11709  00C984  A4D8               	btfss	status,2,c
 11710  00C986  D004               	goto	l1139
 11711                           
 11712                           ;standbyMode.c: 1307: sum = 22;
 11713  00C988  0E00               	movlw	0
 11714  00C98A  6E36               	movwf	diet_press@sum+1,c
 11715  00C98C  0E16               	movlw	22
 11716  00C98E  D0A5               	goto	L106
 11717  00C990                     l1139:
 11718                           
 11719                           ;standbyMode.c: 1311: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11720  00C990  0E07               	movlw	7
 11721  00C992  1838               	xorwf	diet_press@dietTable,w,c
 11722  00C994  1039               	iorwf	diet_press@dietTable+1,w,c
 11723  00C996  A4D8               	btfss	status,2,c
 11724  00C998  D012               	goto	l1141
 11725  00C99A  0E07               	movlw	7
 11726  00C99C  183A               	xorwf	diet_press@dietTable+2,w,c
 11727  00C99E  103B               	iorwf	diet_press@dietTable+3,w,c
 11728  00C9A0  A4D8               	btfss	status,2,c
 11729  00C9A2  D00D               	goto	l1141
 11730  00C9A4  0E0C               	movlw	12
 11731  00C9A6  183C               	xorwf	diet_press@dietTable+4,w,c
 11732  00C9A8  103D               	iorwf	diet_press@dietTable+5,w,c
 11733  00C9AA  A4D8               	btfss	status,2,c
 11734  00C9AC  D008               	goto	l1141
 11735  00C9AE  503E               	movf	diet_press@dietTable+6,w,c
 11736  00C9B0  103F               	iorwf	diet_press@dietTable+7,w,c
 11737  00C9B2  A4D8               	btfss	status,2,c
 11738  00C9B4  D004               	goto	l1141
 11739                           
 11740                           ;standbyMode.c: 1312: sum = 26;
 11741  00C9B6  0E00               	movlw	0
 11742  00C9B8  6E36               	movwf	diet_press@sum+1,c
 11743  00C9BA  0E1A               	movlw	26
 11744  00C9BC  D08E               	goto	L106
 11745  00C9BE                     l1141:
 11746                           
 11747                           ;standbyMode.c: 1316: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11748  00C9BE  0E07               	movlw	7
 11749  00C9C0  1838               	xorwf	diet_press@dietTable,w,c
 11750  00C9C2  1039               	iorwf	diet_press@dietTable+1,w,c
 11751  00C9C4  A4D8               	btfss	status,2,c
 11752  00C9C6  D012               	goto	l1143
 11753  00C9C8  0E0C               	movlw	12
 11754  00C9CA  183A               	xorwf	diet_press@dietTable+2,w,c
 11755  00C9CC  103B               	iorwf	diet_press@dietTable+3,w,c
 11756  00C9CE  A4D8               	btfss	status,2,c
 11757  00C9D0  D00D               	goto	l1143
 11758  00C9D2  0E0C               	movlw	12
 11759  00C9D4  183C               	xorwf	diet_press@dietTable+4,w,c
 11760  00C9D6  103D               	iorwf	diet_press@dietTable+5,w,c
 11761  00C9D8  A4D8               	btfss	status,2,c
 11762  00C9DA  D008               	goto	l1143
 11763  00C9DC  503E               	movf	diet_press@dietTable+6,w,c
 11764  00C9DE  103F               	iorwf	diet_press@dietTable+7,w,c
 11765  00C9E0  A4D8               	btfss	status,2,c
 11766  00C9E2  D004               	goto	l1143
 11767                           
 11768                           ;standbyMode.c: 1317: sum = 31;
 11769  00C9E4  0E00               	movlw	0
 11770  00C9E6  6E36               	movwf	diet_press@sum+1,c
 11771  00C9E8  0E1F               	movlw	31
 11772  00C9EA  D077               	goto	L106
 11773  00C9EC                     l1143:
 11774                           
 11775                           ;standbyMode.c: 1321: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11776  00C9EC  0E03               	movlw	3
 11777  00C9EE  1838               	xorwf	diet_press@dietTable,w,c
 11778  00C9F0  1039               	iorwf	diet_press@dietTable+1,w,c
 11779  00C9F2  A4D8               	btfss	status,2,c
 11780  00C9F4  D013               	goto	l1145
 11781  00C9F6  0E03               	movlw	3
 11782  00C9F8  183A               	xorwf	diet_press@dietTable+2,w,c
 11783  00C9FA  103B               	iorwf	diet_press@dietTable+3,w,c
 11784  00C9FC  A4D8               	btfss	status,2,c
 11785  00C9FE  D00E               	goto	l1145
 11786  00CA00  0E07               	movlw	7
 11787  00CA02  183C               	xorwf	diet_press@dietTable+4,w,c
 11788  00CA04  103D               	iorwf	diet_press@dietTable+5,w,c
 11789  00CA06  A4D8               	btfss	status,2,c
 11790  00CA08  D009               	goto	l1145
 11791  00CA0A  0E0C               	movlw	12
 11792  00CA0C  183E               	xorwf	diet_press@dietTable+6,w,c
 11793  00CA0E  103F               	iorwf	diet_press@dietTable+7,w,c
 11794  00CA10  A4D8               	btfss	status,2,c
 11795  00CA12  D004               	goto	l1145
 11796                           
 11797                           ;standbyMode.c: 1322: sum = 25;
 11798  00CA14  0E00               	movlw	0
 11799  00CA16  6E36               	movwf	diet_press@sum+1,c
 11800  00CA18  0E19               	movlw	25
 11801  00CA1A  D05F               	goto	L106
 11802  00CA1C                     l1145:
 11803                           
 11804                           ;standbyMode.c: 1326: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11805  00CA1C  0E03               	movlw	3
 11806  00CA1E  1838               	xorwf	diet_press@dietTable,w,c
 11807  00CA20  1039               	iorwf	diet_press@dietTable+1,w,c
 11808  00CA22  A4D8               	btfss	status,2,c
 11809  00CA24  D013               	goto	l1147
 11810  00CA26  0E07               	movlw	7
 11811  00CA28  183A               	xorwf	diet_press@dietTable+2,w,c
 11812  00CA2A  103B               	iorwf	diet_press@dietTable+3,w,c
 11813  00CA2C  A4D8               	btfss	status,2,c
 11814  00CA2E  D00E               	goto	l1147
 11815  00CA30  0E07               	movlw	7
 11816  00CA32  183C               	xorwf	diet_press@dietTable+4,w,c
 11817  00CA34  103D               	iorwf	diet_press@dietTable+5,w,c
 11818  00CA36  A4D8               	btfss	status,2,c
 11819  00CA38  D009               	goto	l1147
 11820  00CA3A  0E0C               	movlw	12
 11821  00CA3C  183E               	xorwf	diet_press@dietTable+6,w,c
 11822  00CA3E  103F               	iorwf	diet_press@dietTable+7,w,c
 11823  00CA40  A4D8               	btfss	status,2,c
 11824  00CA42  D004               	goto	l1147
 11825                           
 11826                           ;standbyMode.c: 1327: sum = 29;
 11827  00CA44  0E00               	movlw	0
 11828  00CA46  6E36               	movwf	diet_press@sum+1,c
 11829  00CA48  0E1D               	movlw	29
 11830  00CA4A  D047               	goto	L106
 11831  00CA4C                     l1147:
 11832                           
 11833                           ;standbyMode.c: 1331: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 11834  00CA4C  0E03               	movlw	3
 11835  00CA4E  1838               	xorwf	diet_press@dietTable,w,c
 11836  00CA50  1039               	iorwf	diet_press@dietTable+1,w,c
 11837  00CA52  A4D8               	btfss	status,2,c
 11838  00CA54  D013               	goto	l1149
 11839  00CA56  0E07               	movlw	7
 11840  00CA58  183A               	xorwf	diet_press@dietTable+2,w,c
 11841  00CA5A  103B               	iorwf	diet_press@dietTable+3,w,c
 11842  00CA5C  A4D8               	btfss	status,2,c
 11843  00CA5E  D00E               	goto	l1149
 11844  00CA60  0E0C               	movlw	12
 11845  00CA62  183C               	xorwf	diet_press@dietTable+4,w,c
 11846  00CA64  103D               	iorwf	diet_press@dietTable+5,w,c
 11847  00CA66  A4D8               	btfss	status,2,c
 11848  00CA68  D009               	goto	l1149
 11849  00CA6A  0E0C               	movlw	12
 11850  00CA6C  183E               	xorwf	diet_press@dietTable+6,w,c
 11851  00CA6E  103F               	iorwf	diet_press@dietTable+7,w,c
 11852  00CA70  A4D8               	btfss	status,2,c
 11853  00CA72  D004               	goto	l1149
 11854                           
 11855                           ;standbyMode.c: 1332: sum = 34;
 11856  00CA74  0E00               	movlw	0
 11857  00CA76  6E36               	movwf	diet_press@sum+1,c
 11858  00CA78  0E22               	movlw	34
 11859  00CA7A  D02F               	goto	L106
 11860  00CA7C                     l1149:
 11861                           
 11862                           ;standbyMode.c: 1336: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11863  00CA7C  0E03               	movlw	3
 11864  00CA7E  1838               	xorwf	diet_press@dietTable,w,c
 11865  00CA80  1039               	iorwf	diet_press@dietTable+1,w,c
 11866  00CA82  A4D8               	btfss	status,2,c
 11867  00CA84  D013               	goto	l1151
 11868  00CA86  0E0C               	movlw	12
 11869  00CA88  183A               	xorwf	diet_press@dietTable+2,w,c
 11870  00CA8A  103B               	iorwf	diet_press@dietTable+3,w,c
 11871  00CA8C  A4D8               	btfss	status,2,c
 11872  00CA8E  D00E               	goto	l1151
 11873  00CA90  0E0C               	movlw	12
 11874  00CA92  183C               	xorwf	diet_press@dietTable+4,w,c
 11875  00CA94  103D               	iorwf	diet_press@dietTable+5,w,c
 11876  00CA96  A4D8               	btfss	status,2,c
 11877  00CA98  D009               	goto	l1151
 11878  00CA9A  0E0C               	movlw	12
 11879  00CA9C  183E               	xorwf	diet_press@dietTable+6,w,c
 11880  00CA9E  103F               	iorwf	diet_press@dietTable+7,w,c
 11881  00CAA0  A4D8               	btfss	status,2,c
 11882  00CAA2  D004               	goto	l1151
 11883                           
 11884                           ;standbyMode.c: 1337: sum = 39;
 11885  00CAA4  0E00               	movlw	0
 11886  00CAA6  6E36               	movwf	diet_press@sum+1,c
 11887  00CAA8  0E27               	movlw	39
 11888  00CAAA  D017               	goto	L106
 11889  00CAAC                     l1151:
 11890                           
 11891                           ;standbyMode.c: 1341: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11892  00CAAC  0E07               	movlw	7
 11893  00CAAE  1838               	xorwf	diet_press@dietTable,w,c
 11894  00CAB0  1039               	iorwf	diet_press@dietTable+1,w,c
 11895  00CAB2  A4D8               	btfss	status,2,c
 11896  00CAB4  D014               	goto	l1153
 11897  00CAB6  0E0C               	movlw	12
 11898  00CAB8  183A               	xorwf	diet_press@dietTable+2,w,c
 11899  00CABA  103B               	iorwf	diet_press@dietTable+3,w,c
 11900  00CABC  A4D8               	btfss	status,2,c
 11901  00CABE  D00F               	goto	l1153
 11902  00CAC0  0E0C               	movlw	12
 11903  00CAC2  183C               	xorwf	diet_press@dietTable+4,w,c
 11904  00CAC4  103D               	iorwf	diet_press@dietTable+5,w,c
 11905  00CAC6  A4D8               	btfss	status,2,c
 11906  00CAC8  D00A               	goto	l1153
 11907  00CACA  0E0C               	movlw	12
 11908  00CACC  183E               	xorwf	diet_press@dietTable+6,w,c
 11909  00CACE  103F               	iorwf	diet_press@dietTable+7,w,c
 11910  00CAD0  A4D8               	btfss	status,2,c
 11911  00CAD2  D005               	goto	l1153
 11912                           
 11913                           ;standbyMode.c: 1342: sum = 43;
 11914  00CAD4  0E00               	movlw	0
 11915  00CAD6  6E36               	movwf	diet_press@sum+1,c
 11916  00CAD8  0E2B               	movlw	43
 11917  00CADA                     L106:
 11918  00CADA  6E35               	movwf	diet_press@sum,c
 11919                           
 11920                           ;standbyMode.c: 1343: }
 11921  00CADC  D02A               	goto	l1154
 11922  00CADE                     l1153:
 11923                           
 11924                           ;standbyMode.c: 1346: else{
 11925                           ;standbyMode.c: 1347: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11926  00CADE  0E01               	movlw	1
 11927  00CAE0  EC16  F04D         	call	_lcdInst
 11928  00CAE4  0EC3               	movlw	195
 11929  00CAE6  6E2B               	movwf	??_diet_press& (0+255),c
 11930  00CAE8  0ECD               	movlw	205
 11931  00CAEA                     u15117:
 11932  00CAEA  2EE8               	decfsz	wreg,f,c
 11933  00CAEC  D7FE               	bra	u15117
 11934  00CAEE  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11935  00CAF0  D7FC               	bra	u15117
 11936  00CAF2  F000               	nop	
 11937                           
 11938                           ;standbyMode.c: 1348: printf("Invalid diet!");
 11939  00CAF4  0E63               	movlw	low STR_111
 11940  00CAF6  6E0D               	movwf	printf@f,c
 11941  00CAF8  0EFE               	movlw	high STR_111
 11942  00CAFA  6E0E               	movwf	printf@f+1,c
 11943  00CAFC  EC0C  F061         	call	_printf	;wreg free
 11944                           
 11945                           ;standbyMode.c: 1349: lcdInst(0xC0);;
 11946  00CB00  0EC0               	movlw	192
 11947  00CB02  EC16  F04D         	call	_lcdInst
 11948                           
 11949                           ;standbyMode.c: 1350: printf("Try again.");
 11950  00CB06  0EFD               	movlw	low STR_108
 11951  00CB08  6E0D               	movwf	printf@f,c
 11952  00CB0A  0EFE               	movlw	high STR_108
 11953  00CB0C  6E0E               	movwf	printf@f+1,c
 11954  00CB0E  EC0C  F061         	call	_printf	;wreg free
 11955                           
 11956                           ;standbyMode.c: 1351: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11957  00CB12  0E33               	movlw	51
 11958  00CB14  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11959  00CB16  0EBB               	movlw	187
 11960  00CB18  6E2B               	movwf	??_diet_press& (0+255),c
 11961  00CB1A  0EE0               	movlw	224
 11962  00CB1C                     u15127:
 11963  00CB1C  2EE8               	decfsz	wreg,f,c
 11964  00CB1E  D7FE               	bra	u15127
 11965  00CB20  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11966  00CB22  D7FC               	bra	u15127
 11967  00CB24  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11968  00CB26  D7FA               	bra	u15127
 11969                           
 11970                           ;standbyMode.c: 1352: sum = 0;
 11971  00CB28  0E00               	movlw	0
 11972  00CB2A  6E36               	movwf	diet_press@sum+1,c
 11973  00CB2C  0E00               	movlw	0
 11974  00CB2E  6E35               	movwf	diet_press@sum,c
 11975                           
 11976                           ;standbyMode.c: 1353: goto START;
 11977  00CB30  D56C               	goto	_diet_press
 11978  00CB32                     l1154:
 11979                           
 11980                           ;standbyMode.c: 1354: }
 11981                           ;standbyMode.c: 1355: return sum;
 11982  00CB32  C035  F029         	movff	diet_press@sum,?_diet_press
 11983  00CB36  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11984  00CB3A  0012               	return		;funcret
 11985  00CB3C                     __end_of_diet_press:
 11986                           	opt stack 0
 11987                           tblptru	equ	0xFF8
 11988                           tblptrh	equ	0xFF7
 11989                           tblptrl	equ	0xFF6
 11990                           tablat	equ	0xFF5
 11991                           prodh	equ	0xFF4
 11992                           prodl	equ	0xFF3
 11993                           postinc0	equ	0xFEE
 11994                           wreg	equ	0xFE8
 11995                           postdec1	equ	0xFE5
 11996                           plusw1	equ	0xFE3
 11997                           fsr1l	equ	0xFE1
 11998                           indf2	equ	0xFDF
 11999                           postinc2	equ	0xFDE
 12000                           postdec2	equ	0xFDD
 12001                           plusw2	equ	0xFDB
 12002                           fsr2h	equ	0xFDA
 12003                           fsr2l	equ	0xFD9
 12004                           status	equ	0xFD8
 12005                           
 12006 ;; *************** function _decode_diet *****************
 12007 ;; Defined at:
 12008 ;;		line 1359 in file "standbyMode.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;  dietType        2    0[COMRAM] unsigned int 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  returnValue     2    4[COMRAM] unsigned int 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  2    0[COMRAM] unsigned int 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12022 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12026 ;;Total ram usage:        6 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; This function calls:
 12029 ;;		Nothing
 12030 ;; This function is called by:
 12031 ;;		_standbyMode
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text16
 12036  00AA6E                     __ptext16:
 12037                           	opt stack 0
 12038  00AA6E                     _decode_diet:
 12039                           	opt stack 29
 12040                           
 12041                           ;standbyMode.c: 1360: unsigned int returnValue = 100;
 12042                           
 12043                           ;incstack = 0
 12044  00AA6E  0E00               	movlw	0
 12045  00AA70  6E06               	movwf	decode_diet@returnValue+1,c
 12046  00AA72  0E64               	movlw	100
 12047  00AA74  6E05               	movwf	decode_diet@returnValue,c
 12048                           
 12049                           ;standbyMode.c: 1362: switch(dietType){
 12050  00AA76  D049               	goto	l1158
 12051  00AA78                     
 12052                           ;standbyMode.c: 1365: returnValue = 2;
 12053  00AA78  0E00               	movlw	0
 12054  00AA7A  6E06               	movwf	decode_diet@returnValue+1,c
 12055  00AA7C  0E02               	movlw	2
 12056  00AA7E  D043               	goto	L124
 12057  00AA80                     
 12058                           ;standbyMode.c: 1370: returnValue = 0;
 12059  00AA80  0E00               	movlw	0
 12060  00AA82  6E06               	movwf	decode_diet@returnValue+1,c
 12061  00AA84  0E00               	movlw	0
 12062  00AA86  D03F               	goto	L124
 12063  00AA88                     
 12064                           ;standbyMode.c: 1375: returnValue = 1;
 12065  00AA88  0E00               	movlw	0
 12066  00AA8A  6E06               	movwf	decode_diet@returnValue+1,c
 12067  00AA8C  0E01               	movlw	1
 12068  00AA8E  D03B               	goto	L124
 12069  00AA90                     
 12070                           ;standbyMode.c: 1380: returnValue = 3;
 12071  00AA90  0E00               	movlw	0
 12072  00AA92  6E06               	movwf	decode_diet@returnValue+1,c
 12073  00AA94  0E03               	movlw	3
 12074  00AA96  D037               	goto	L124
 12075  00AA98                     
 12076                           ;standbyMode.c: 1385: returnValue = 4;
 12077  00AA98  0E00               	movlw	0
 12078  00AA9A  6E06               	movwf	decode_diet@returnValue+1,c
 12079  00AA9C  0E04               	movlw	4
 12080  00AA9E  D033               	goto	L124
 12081  00AAA0                     
 12082                           ;standbyMode.c: 1390: returnValue = 5;
 12083  00AAA0  0E00               	movlw	0
 12084  00AAA2  6E06               	movwf	decode_diet@returnValue+1,c
 12085  00AAA4  0E05               	movlw	5
 12086  00AAA6  D02F               	goto	L124
 12087  00AAA8                     
 12088                           ;standbyMode.c: 1395: returnValue = 6;
 12089  00AAA8  0E00               	movlw	0
 12090  00AAAA  6E06               	movwf	decode_diet@returnValue+1,c
 12091  00AAAC  0E06               	movlw	6
 12092  00AAAE  D02B               	goto	L124
 12093  00AAB0                     
 12094                           ;standbyMode.c: 1400: returnValue = 7;
 12095  00AAB0  0E00               	movlw	0
 12096  00AAB2  6E06               	movwf	decode_diet@returnValue+1,c
 12097  00AAB4  0E07               	movlw	7
 12098  00AAB6  D027               	goto	L124
 12099  00AAB8                     
 12100                           ;standbyMode.c: 1405: returnValue = 8;
 12101  00AAB8  0E00               	movlw	0
 12102  00AABA  6E06               	movwf	decode_diet@returnValue+1,c
 12103  00AABC  0E08               	movlw	8
 12104  00AABE  D023               	goto	L124
 12105  00AAC0                     
 12106                           ;standbyMode.c: 1410: returnValue = 9;
 12107  00AAC0  0E00               	movlw	0
 12108  00AAC2  6E06               	movwf	decode_diet@returnValue+1,c
 12109  00AAC4  0E09               	movlw	9
 12110  00AAC6  D01F               	goto	L124
 12111  00AAC8                     
 12112                           ;standbyMode.c: 1415: returnValue = 10;
 12113  00AAC8  0E00               	movlw	0
 12114  00AACA  6E06               	movwf	decode_diet@returnValue+1,c
 12115  00AACC  0E0A               	movlw	10
 12116  00AACE  D01B               	goto	L124
 12117  00AAD0                     
 12118                           ;standbyMode.c: 1420: returnValue = 11;
 12119  00AAD0  0E00               	movlw	0
 12120  00AAD2  6E06               	movwf	decode_diet@returnValue+1,c
 12121  00AAD4  0E0B               	movlw	11
 12122  00AAD6  D017               	goto	L124
 12123  00AAD8                     
 12124                           ;standbyMode.c: 1425: returnValue = 12;
 12125  00AAD8  0E00               	movlw	0
 12126  00AADA  6E06               	movwf	decode_diet@returnValue+1,c
 12127  00AADC  0E0C               	movlw	12
 12128  00AADE  D013               	goto	L124
 12129  00AAE0                     
 12130                           ;standbyMode.c: 1430: returnValue = 13;
 12131  00AAE0  0E00               	movlw	0
 12132  00AAE2  6E06               	movwf	decode_diet@returnValue+1,c
 12133  00AAE4  0E0D               	movlw	13
 12134  00AAE6  D00F               	goto	L124
 12135  00AAE8                     
 12136                           ;standbyMode.c: 1435: returnValue = 14;
 12137  00AAE8  0E00               	movlw	0
 12138  00AAEA  6E06               	movwf	decode_diet@returnValue+1,c
 12139  00AAEC  0E0E               	movlw	14
 12140  00AAEE  D00B               	goto	L124
 12141  00AAF0                     
 12142                           ;standbyMode.c: 1440: returnValue = 15;
 12143  00AAF0  0E00               	movlw	0
 12144  00AAF2  6E06               	movwf	decode_diet@returnValue+1,c
 12145  00AAF4  0E0F               	movlw	15
 12146  00AAF6  D007               	goto	L124
 12147  00AAF8                     
 12148                           ;standbyMode.c: 1445: returnValue = 16;
 12149  00AAF8  0E00               	movlw	0
 12150  00AAFA  6E06               	movwf	decode_diet@returnValue+1,c
 12151  00AAFC  0E10               	movlw	16
 12152  00AAFE  D003               	goto	L124
 12153  00AB00                     
 12154                           ;standbyMode.c: 1450: returnValue = 17;
 12155  00AB00  0E00               	movlw	0
 12156  00AB02  6E06               	movwf	decode_diet@returnValue+1,c
 12157  00AB04  0E11               	movlw	17
 12158  00AB06                     L124:
 12159  00AB06  6E05               	movwf	decode_diet@returnValue,c
 12160                           
 12161                           ;standbyMode.c: 1455: }
 12162                           
 12163                           ;standbyMode.c: 1454: break;
 12164                           
 12165                           ;standbyMode.c: 1453: default:
 12166                           
 12167                           ;standbyMode.c: 1451: break;
 12168  00AB08  D03F               	goto	l1160
 12169  00AB0A                     l1158:
 12170  00AB0A  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 12171  00AB0E  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 12172                           
 12173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12174                           ; Switch size 1, requested type "space"
 12175                           ; Number of cases is 1, Range of values is 0 to 0
 12176                           ; switch strategies available:
 12177                           ; Name         Instructions Cycles
 12178                           ; simple_byte            4     3 (average)
 12179                           ;	Chosen strategy is simple_byte
 12180  00AB12  5004               	movf	??_decode_diet+1,w,c
 12181  00AB14  0A00               	xorlw	0	; case 0
 12182  00AB16  A4D8               	btfss	status,2,c
 12183  00AB18  D037               	goto	l1160
 12184                           
 12185                           ; Switch size 1, requested type "space"
 12186                           ; Number of cases is 18, Range of values is 3 to 43
 12187                           ; switch strategies available:
 12188                           ; Name         Instructions Cycles
 12189                           ; simple_byte           55    28 (average)
 12190                           ;	Chosen strategy is simple_byte
 12191  00AB1A  5003               	movf	??_decode_diet,w,c
 12192  00AB1C  0A03               	xorlw	3	; case 3
 12193  00AB1E  B4D8               	btfsc	status,2,c
 12194  00AB20  D7AF               	goto	l1161
 12195  00AB22  0A04               	xorlw	4	; case 7
 12196  00AB24  B4D8               	btfsc	status,2,c
 12197  00AB26  D7B0               	goto	l1162
 12198  00AB28  0A0D               	xorlw	13	; case 10
 12199  00AB2A  B4D8               	btfsc	status,2,c
 12200  00AB2C  D7B1               	goto	l1163
 12201  00AB2E  0A06               	xorlw	6	; case 12
 12202  00AB30  B4D8               	btfsc	status,2,c
 12203  00AB32  D7A2               	goto	l1159
 12204  00AB34  0A01               	xorlw	1	; case 13
 12205  00AB36  B4D8               	btfsc	status,2,c
 12206  00AB38  D7B7               	goto	l1166
 12207  00AB3A  0A02               	xorlw	2	; case 15
 12208  00AB3C  B4D8               	btfsc	status,2,c
 12209  00AB3E  D7AC               	goto	l1164
 12210  00AB40  0A1E               	xorlw	30	; case 17
 12211  00AB42  B4D8               	btfsc	status,2,c
 12212  00AB44  D7B9               	goto	l1168
 12213  00AB46  0A03               	xorlw	3	; case 18
 12214  00AB48  B4D8               	btfsc	status,2,c
 12215  00AB4A  D7B2               	goto	l1167
 12216  00AB4C  0A01               	xorlw	1	; case 19
 12217  00AB4E  B4D8               	btfsc	status,2,c
 12218  00AB50  D7A7               	goto	l1165
 12219  00AB52  0A05               	xorlw	5	; case 22
 12220  00AB54  B4D8               	btfsc	status,2,c
 12221  00AB56  D7B8               	goto	l1170
 12222  00AB58  0A0F               	xorlw	15	; case 25
 12223  00AB5A  B4D8               	btfsc	status,2,c
 12224  00AB5C  D7C1               	goto	l1173
 12225  00AB5E  0A03               	xorlw	3	; case 26
 12226  00AB60  B4D8               	btfsc	status,2,c
 12227  00AB62  D7B6               	goto	l1171
 12228  00AB64  0A01               	xorlw	1	; case 27
 12229  00AB66  B4D8               	btfsc	status,2,c
 12230  00AB68  D7AB               	goto	l1169
 12231  00AB6A  0A06               	xorlw	6	; case 29
 12232  00AB6C  B4D8               	btfsc	status,2,c
 12233  00AB6E  D7BC               	goto	l1174
 12234  00AB70  0A02               	xorlw	2	; case 31
 12235  00AB72  B4D8               	btfsc	status,2,c
 12236  00AB74  D7B1               	goto	l1172
 12237  00AB76  0A3D               	xorlw	61	; case 34
 12238  00AB78  B4D8               	btfsc	status,2,c
 12239  00AB7A  D7BA               	goto	l1175
 12240  00AB7C  0A05               	xorlw	5	; case 39
 12241  00AB7E  B4D8               	btfsc	status,2,c
 12242  00AB80  D7BB               	goto	l1176
 12243  00AB82  0A0C               	xorlw	12	; case 43
 12244  00AB84  B4D8               	btfsc	status,2,c
 12245  00AB86  D7BC               	goto	l1177
 12246  00AB88                     l1160:
 12247                           
 12248                           ;standbyMode.c: 1456: return returnValue;
 12249  00AB88  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 12250  00AB8C  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 12251  00AB90  0012               	return		;funcret
 12252  00AB92                     __end_of_decode_diet:
 12253                           	opt stack 0
 12254                           tblptru	equ	0xFF8
 12255                           tblptrh	equ	0xFF7
 12256                           tblptrl	equ	0xFF6
 12257                           tablat	equ	0xFF5
 12258                           prodh	equ	0xFF4
 12259                           prodl	equ	0xFF3
 12260                           postinc0	equ	0xFEE
 12261                           wreg	equ	0xFE8
 12262                           postdec1	equ	0xFE5
 12263                           plusw1	equ	0xFE3
 12264                           fsr1l	equ	0xFE1
 12265                           indf2	equ	0xFDF
 12266                           postinc2	equ	0xFDE
 12267                           postdec2	equ	0xFDD
 12268                           plusw2	equ	0xFDB
 12269                           fsr2h	equ	0xFDA
 12270                           fsr2l	equ	0xFD9
 12271                           status	equ	0xFD8
 12272                           
 12273 ;; *************** function _I2C_Master_Write *****************
 12274 ;; Defined at:
 12275 ;;		line 108 in file "I2C.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      void 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;Total ram usage:        2 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    1
 12296 ;; This function calls:
 12297 ;;		_I2C_Master_Wait
 12298 ;; This function is called by:
 12299 ;;		_standbyMode
 12300 ;;		_RTC_setTime
 12301 ;;		_tick
 12302 ;;		_tock
 12303 ;;		_sendByteToArduino
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           	psect	text17
 12308  009A10                     __ptext17:
 12309                           	opt stack 0
 12310  009A10                     _I2C_Master_Write:
 12311                           	opt stack 28
 12312                           
 12313                           ;I2C.c: 116: I2C_Master_Wait();
 12314                           
 12315                           ;incstack = 0
 12316  009A10  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12317                           
 12318                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12319  009A14  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12320  009A18  0012               	return		;funcret
 12321  009A1A                     __end_of_I2C_Master_Write:
 12322                           	opt stack 0
 12323                           tblptru	equ	0xFF8
 12324                           tblptrh	equ	0xFF7
 12325                           tblptrl	equ	0xFF6
 12326                           tablat	equ	0xFF5
 12327                           prodh	equ	0xFF4
 12328                           prodl	equ	0xFF3
 12329                           postinc0	equ	0xFEE
 12330                           wreg	equ	0xFE8
 12331                           postdec1	equ	0xFE5
 12332                           plusw1	equ	0xFE3
 12333                           fsr1l	equ	0xFE1
 12334                           indf2	equ	0xFDF
 12335                           postinc2	equ	0xFDE
 12336                           postdec2	equ	0xFDD
 12337                           plusw2	equ	0xFDB
 12338                           fsr2h	equ	0xFDA
 12339                           fsr2l	equ	0xFD9
 12340                           status	equ	0xFD8
 12341                           
 12342 ;; *************** function _I2C_Master_Stop *****************
 12343 ;; Defined at:
 12344 ;;		line 95 in file "I2C.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;		None
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;		None
 12349 ;; Return value:  Size  Location     Type
 12350 ;;                  1    wreg      void 
 12351 ;; Registers used:
 12352 ;;		wreg, status,2, status,0, cstack
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12362 ;;Total ram usage:        0 bytes
 12363 ;; Hardware stack levels used:    1
 12364 ;; Hardware stack levels required when called:    1
 12365 ;; This function calls:
 12366 ;;		_I2C_Master_Wait
 12367 ;; This function is called by:
 12368 ;;		_standbyMode
 12369 ;;		_RTC_setTime
 12370 ;;		_tick
 12371 ;;		_tock
 12372 ;;		_sendByteToArduino
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text18
 12377  009A00                     __ptext18:
 12378                           	opt stack 0
 12379  009A00                     _I2C_Master_Stop:
 12380                           	opt stack 28
 12381                           
 12382                           ;I2C.c: 104: I2C_Master_Wait();
 12383                           
 12384                           ;incstack = 0
 12385  009A00  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12386                           
 12387                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12388  009A04  84C5               	bsf	4037,2,c	;volatile
 12389  009A06  0012               	return		;funcret
 12390  009A08                     __end_of_I2C_Master_Stop:
 12391                           	opt stack 0
 12392                           tblptru	equ	0xFF8
 12393                           tblptrh	equ	0xFF7
 12394                           tblptrl	equ	0xFF6
 12395                           tablat	equ	0xFF5
 12396                           prodh	equ	0xFF4
 12397                           prodl	equ	0xFF3
 12398                           postinc0	equ	0xFEE
 12399                           wreg	equ	0xFE8
 12400                           postdec1	equ	0xFE5
 12401                           plusw1	equ	0xFE3
 12402                           fsr1l	equ	0xFE1
 12403                           indf2	equ	0xFDF
 12404                           postinc2	equ	0xFDE
 12405                           postdec2	equ	0xFDD
 12406                           plusw2	equ	0xFDB
 12407                           fsr2h	equ	0xFDA
 12408                           fsr2l	equ	0xFD9
 12409                           status	equ	0xFD8
 12410                           
 12411 ;; *************** function _I2C_Master_Start *****************
 12412 ;; Defined at:
 12413 ;;		line 69 in file "I2C.c"
 12414 ;; Parameters:    Size  Location     Type
 12415 ;;		None
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;		None
 12418 ;; Return value:  Size  Location     Type
 12419 ;;                  1    wreg      void 
 12420 ;; Registers used:
 12421 ;;		wreg, status,2, status,0, cstack
 12422 ;; Tracked objects:
 12423 ;;		On entry : 0/0
 12424 ;;		On exit  : 0/0
 12425 ;;		Unchanged: 0/0
 12426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12431 ;;Total ram usage:        0 bytes
 12432 ;; Hardware stack levels used:    1
 12433 ;; Hardware stack levels required when called:    1
 12434 ;; This function calls:
 12435 ;;		_I2C_Master_Wait
 12436 ;; This function is called by:
 12437 ;;		_standbyMode
 12438 ;;		_RTC_setTime
 12439 ;;		_tick
 12440 ;;		_tock
 12441 ;;		_sendByteToArduino
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text19
 12446  0099F8                     __ptext19:
 12447                           	opt stack 0
 12448  0099F8                     _I2C_Master_Start:
 12449                           	opt stack 28
 12450                           
 12451                           ;I2C.c: 78: I2C_Master_Wait();
 12452                           
 12453                           ;incstack = 0
 12454  0099F8  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12455                           
 12456                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12457  0099FC  80C5               	bsf	4037,0,c	;volatile
 12458  0099FE  0012               	return		;funcret
 12459  009A00                     __end_of_I2C_Master_Start:
 12460                           	opt stack 0
 12461                           tblptru	equ	0xFF8
 12462                           tblptrh	equ	0xFF7
 12463                           tblptrl	equ	0xFF6
 12464                           tablat	equ	0xFF5
 12465                           prodh	equ	0xFF4
 12466                           prodl	equ	0xFF3
 12467                           postinc0	equ	0xFEE
 12468                           wreg	equ	0xFE8
 12469                           postdec1	equ	0xFE5
 12470                           plusw1	equ	0xFE3
 12471                           fsr1l	equ	0xFE1
 12472                           indf2	equ	0xFDF
 12473                           postinc2	equ	0xFDE
 12474                           postdec2	equ	0xFDD
 12475                           plusw2	equ	0xFDB
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _I2C_Master_Read *****************
 12481 ;; Defined at:
 12482 ;;		line 120 in file "I2C.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  ackBit          1    wreg     unsigned char 
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;  ackBit          1    1[COMRAM] unsigned char 
 12487 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12488 ;; Return value:  Size  Location     Type
 12489 ;;                  1    wreg      unsigned char 
 12490 ;; Registers used:
 12491 ;;		wreg, status,2, status,0, cstack
 12492 ;; Tracked objects:
 12493 ;;		On entry : 0/0
 12494 ;;		On exit  : 0/0
 12495 ;;		Unchanged: 0/0
 12496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12501 ;;Total ram usage:        2 bytes
 12502 ;; Hardware stack levels used:    1
 12503 ;; Hardware stack levels required when called:    1
 12504 ;; This function calls:
 12505 ;;		_I2C_Master_Wait
 12506 ;; This function is called by:
 12507 ;;		_standbyMode
 12508 ;;		_tick
 12509 ;;		_tock
 12510 ;; This function uses a non-reentrant model
 12511 ;;
 12512                           
 12513                           	psect	text20
 12514  009A86                     __ptext20:
 12515                           	opt stack 0
 12516  009A86                     _I2C_Master_Read:
 12517                           	opt stack 28
 12518                           
 12519                           ;incstack = 0
 12520                           ;I2C_Master_Read@ackBit stored from wreg
 12521  009A86  6E02               	movwf	I2C_Master_Read@ackBit,c
 12522                           
 12523                           ;I2C.c: 130: unsigned char receivedByte;
 12524                           ;I2C.c: 132: I2C_Master_Wait();
 12525  009A88  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12526                           
 12527                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12528  009A8C  86C5               	bsf	4037,3,c	;volatile
 12529                           
 12530                           ;I2C.c: 135: I2C_Master_Wait();
 12531  009A8E  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12532                           
 12533                           ;I2C.c: 136: receivedByte = SSPBUF;
 12534  009A92  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12535                           
 12536                           ;I2C.c: 138: I2C_Master_Wait();
 12537  009A96  EC0D  F04D         	call	_I2C_Master_Wait	;wreg free
 12538                           
 12539                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12540  009A9A  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12541  009A9C  D002               	bra	u13355
 12542  009A9E  9AC5               	bcf	4037,5,c	;volatile
 12543  009AA0  D001               	bra	u13356
 12544  009AA2                     u13355:
 12545  009AA2  8AC5               	bsf	4037,5,c	;volatile
 12546  009AA4                     u13356:
 12547                           
 12548                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12549  009AA4  88C5               	bsf	4037,4,c	;volatile
 12550                           
 12551                           ;I2C.c: 142: return receivedByte;
 12552  009AA6  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12553  009AA8  0012               	return	
 12554  009AAA                     __end_of_I2C_Master_Read:
 12555                           	opt stack 0
 12556                           tblptru	equ	0xFF8
 12557                           tblptrh	equ	0xFF7
 12558                           tblptrl	equ	0xFF6
 12559                           tablat	equ	0xFF5
 12560                           prodh	equ	0xFF4
 12561                           prodl	equ	0xFF3
 12562                           postinc0	equ	0xFEE
 12563                           wreg	equ	0xFE8
 12564                           postdec1	equ	0xFE5
 12565                           plusw1	equ	0xFE3
 12566                           fsr1l	equ	0xFE1
 12567                           indf2	equ	0xFDF
 12568                           postinc2	equ	0xFDE
 12569                           postdec2	equ	0xFDD
 12570                           plusw2	equ	0xFDB
 12571                           fsr2h	equ	0xFDA
 12572                           fsr2l	equ	0xFD9
 12573                           status	equ	0xFD8
 12574                           
 12575 ;; *************** function _I2C_Master_Wait *****************
 12576 ;; Defined at:
 12577 ;;		line 51 in file "I2C.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		wreg, status,2, status,0
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12595 ;;Total ram usage:        1 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_I2C_Master_Start
 12601 ;;		_I2C_Master_Stop
 12602 ;;		_I2C_Master_Write
 12603 ;;		_I2C_Master_Read
 12604 ;;		_I2C_Master_RepeatedStart
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           	psect	text21
 12609  009A1A                     __ptext21:
 12610                           	opt stack 0
 12611  009A1A                     _I2C_Master_Wait:
 12612                           	opt stack 28
 12613                           
 12614                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12615                           
 12616                           ;incstack = 0
 12617  009A1A  B4C7               	btfsc	4039,2,c	;volatile
 12618  009A1C  D7FE               	goto	_I2C_Master_Wait
 12619  009A1E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12620  009A22  0E1F               	movlw	31
 12621  009A24  1601               	andwf	??_I2C_Master_Wait,f,c
 12622  009A26  B4D8               	btfsc	status,2,c
 12623  009A28  0012               	return	
 12624  009A2A  D7F7               	goto	_I2C_Master_Wait
 12625  009A2C                     __end_of_I2C_Master_Wait:
 12626                           	opt stack 0
 12627                           tblptru	equ	0xFF8
 12628                           tblptrh	equ	0xFF7
 12629                           tblptrl	equ	0xFF6
 12630                           tablat	equ	0xFF5
 12631                           prodh	equ	0xFF4
 12632                           prodl	equ	0xFF3
 12633                           postinc0	equ	0xFEE
 12634                           wreg	equ	0xFE8
 12635                           postdec1	equ	0xFE5
 12636                           plusw1	equ	0xFE3
 12637                           fsr1l	equ	0xFE1
 12638                           indf2	equ	0xFDF
 12639                           postinc2	equ	0xFDE
 12640                           postdec2	equ	0xFDD
 12641                           plusw2	equ	0xFDB
 12642                           fsr2h	equ	0xFDA
 12643                           fsr2l	equ	0xFD9
 12644                           status	equ	0xFD8
 12645                           
 12646 ;; *************** function _I2C_Master_Init *****************
 12647 ;; Defined at:
 12648 ;;		line 14 in file "I2C.c"
 12649 ;; Parameters:    Size  Location     Type
 12650 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12651 ;; Auto vars:     Size  Location     Type
 12652 ;;		None
 12653 ;; Return value:  Size  Location     Type
 12654 ;;                  1    wreg      void 
 12655 ;; Registers used:
 12656 ;;		wreg, status,2, status,0, cstack
 12657 ;; Tracked objects:
 12658 ;;		On entry : 0/0
 12659 ;;		On exit  : 0/0
 12660 ;;		Unchanged: 0/0
 12661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12662 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12666 ;;Total ram usage:        8 bytes
 12667 ;; Hardware stack levels used:    1
 12668 ;; Hardware stack levels required when called:    1
 12669 ;; This function calls:
 12670 ;;		___lldiv
 12671 ;; This function is called by:
 12672 ;;		_standbyMode
 12673 ;;		_tick
 12674 ;;		_tock
 12675 ;; This function uses a non-reentrant model
 12676 ;;
 12677                           
 12678                           	psect	text22
 12679  009D20                     __ptext22:
 12680                           	opt stack 0
 12681  009D20                     _I2C_Master_Init:
 12682                           	opt stack 28
 12683                           
 12684                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12685                           
 12686                           ;incstack = 0
 12687  009D20  9AC6               	bcf	4038,5,c	;volatile
 12688                           
 12689                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12690  009D22  8694               	bsf	3988,3,c	;volatile
 12691                           
 12692                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12693  009D24  8894               	bsf	3988,4,c	;volatile
 12694                           
 12695                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12696  009D26  0E80               	movlw	128
 12697  009D28  6EC7               	movwf	4039,c	;volatile
 12698                           
 12699                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12700  009D2A  0E28               	movlw	40
 12701  009D2C  6EC6               	movwf	4038,c	;volatile
 12702                           
 12703                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12704  009D2E  0E00               	movlw	0
 12705  009D30  6EC5               	movwf	4037,c	;volatile
 12706                           
 12707                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12708  009D32  0E00               	movlw	0
 12709  009D34  6E01               	movwf	___lldiv@dividend,c
 12710  009D36  0E5A               	movlw	90
 12711  009D38  6E02               	movwf	___lldiv@dividend+1,c
 12712  009D3A  0E62               	movlw	98
 12713  009D3C  6E03               	movwf	___lldiv@dividend+2,c
 12714  009D3E  0E02               	movlw	2
 12715  009D40  6E04               	movwf	___lldiv@dividend+3,c
 12716  009D42  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12717  009D46  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12718  009D4A  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12719  009D4E  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12720  009D52  0E02               	movlw	2
 12721  009D54                     u13345:
 12722  009D54  90D8               	bcf	status,0,c
 12723  009D56  3612               	rlcf	??_I2C_Master_Init,f,c
 12724  009D58  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12725  009D5A  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12726  009D5C  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12727  009D5E  2EE8               	decfsz	wreg,f,c
 12728  009D60  D7F9               	goto	u13345
 12729  009D62  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12730  009D66  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12731  009D6A  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12732  009D6E  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12733  009D72  EC9D  F04F         	call	___lldiv	;wreg free
 12734  009D76  0401               	decf	?___lldiv,w,c
 12735  009D78  6EC8               	movwf	4040,c	;volatile
 12736  009D7A  0012               	return		;funcret
 12737  009D7C                     __end_of_I2C_Master_Init:
 12738                           	opt stack 0
 12739                           tblptru	equ	0xFF8
 12740                           tblptrh	equ	0xFF7
 12741                           tblptrl	equ	0xFF6
 12742                           tablat	equ	0xFF5
 12743                           prodh	equ	0xFF4
 12744                           prodl	equ	0xFF3
 12745                           postinc0	equ	0xFEE
 12746                           wreg	equ	0xFE8
 12747                           postdec1	equ	0xFE5
 12748                           plusw1	equ	0xFE3
 12749                           fsr1l	equ	0xFE1
 12750                           indf2	equ	0xFDF
 12751                           postinc2	equ	0xFDE
 12752                           postdec2	equ	0xFDD
 12753                           plusw2	equ	0xFDB
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function ___lldiv *****************
 12759 ;; Defined at:
 12760 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  dividend        4    0[COMRAM] unsigned long 
 12763 ;;  divisor         4    4[COMRAM] unsigned long 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  quotient        4    8[COMRAM] unsigned long 
 12766 ;;  counter         1   12[COMRAM] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  4    0[COMRAM] unsigned long 
 12769 ;; Registers used:
 12770 ;;		wreg, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12776 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;Total ram usage:       13 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; This function calls:
 12783 ;;		Nothing
 12784 ;; This function is called by:
 12785 ;;		_I2C_Master_Init
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text23
 12790  009F3A                     __ptext23:
 12791                           	opt stack 0
 12792  009F3A                     ___lldiv:
 12793                           	opt stack 28
 12794                           
 12795                           ;incstack = 0
 12796  009F3A  0E00               	movlw	0
 12797  009F3C  6E09               	movwf	___lldiv@quotient,c
 12798  009F3E  0E00               	movlw	0
 12799  009F40  6E0A               	movwf	___lldiv@quotient+1,c
 12800  009F42  0E00               	movlw	0
 12801  009F44  6E0B               	movwf	___lldiv@quotient+2,c
 12802  009F46  0E00               	movlw	0
 12803  009F48  6E0C               	movwf	___lldiv@quotient+3,c
 12804  009F4A  5005               	movf	___lldiv@divisor,w,c
 12805  009F4C  1006               	iorwf	___lldiv@divisor+1,w,c
 12806  009F4E  1007               	iorwf	___lldiv@divisor+2,w,c
 12807  009F50  1008               	iorwf	___lldiv@divisor+3,w,c
 12808  009F52  B4D8               	btfsc	status,2,c
 12809  009F54  D02A               	goto	l2018
 12810  009F56  0E01               	movlw	1
 12811  009F58  6E0D               	movwf	___lldiv@counter,c
 12812  009F5A  D006               	goto	l2013
 12813  009F5C  90D8               	bcf	status,0,c
 12814  009F5E  3605               	rlcf	___lldiv@divisor,f,c
 12815  009F60  3606               	rlcf	___lldiv@divisor+1,f,c
 12816  009F62  3607               	rlcf	___lldiv@divisor+2,f,c
 12817  009F64  3608               	rlcf	___lldiv@divisor+3,f,c
 12818  009F66  2A0D               	incf	___lldiv@counter,f,c
 12819  009F68                     l2013:
 12820  009F68  AE08               	btfss	___lldiv@divisor+3,7,c
 12821  009F6A  D7F8               	goto	l2014
 12822  009F6C                     u9090:
 12823  009F6C  90D8               	bcf	status,0,c
 12824  009F6E  3609               	rlcf	___lldiv@quotient,f,c
 12825  009F70  360A               	rlcf	___lldiv@quotient+1,f,c
 12826  009F72  360B               	rlcf	___lldiv@quotient+2,f,c
 12827  009F74  360C               	rlcf	___lldiv@quotient+3,f,c
 12828  009F76  5005               	movf	___lldiv@divisor,w,c
 12829  009F78  5C01               	subwf	___lldiv@dividend,w,c
 12830  009F7A  5006               	movf	___lldiv@divisor+1,w,c
 12831  009F7C  5802               	subwfb	___lldiv@dividend+1,w,c
 12832  009F7E  5007               	movf	___lldiv@divisor+2,w,c
 12833  009F80  5803               	subwfb	___lldiv@dividend+2,w,c
 12834  009F82  5008               	movf	___lldiv@divisor+3,w,c
 12835  009F84  5804               	subwfb	___lldiv@dividend+3,w,c
 12836  009F86  A0D8               	btfss	status,0,c
 12837  009F88  D009               	goto	l2017
 12838  009F8A  5005               	movf	___lldiv@divisor,w,c
 12839  009F8C  5E01               	subwf	___lldiv@dividend,f,c
 12840  009F8E  5006               	movf	___lldiv@divisor+1,w,c
 12841  009F90  5A02               	subwfb	___lldiv@dividend+1,f,c
 12842  009F92  5007               	movf	___lldiv@divisor+2,w,c
 12843  009F94  5A03               	subwfb	___lldiv@dividend+2,f,c
 12844  009F96  5008               	movf	___lldiv@divisor+3,w,c
 12845  009F98  5A04               	subwfb	___lldiv@dividend+3,f,c
 12846  009F9A  8009               	bsf	___lldiv@quotient,0,c
 12847  009F9C                     l2017:
 12848  009F9C  90D8               	bcf	status,0,c
 12849  009F9E  3208               	rrcf	___lldiv@divisor+3,f,c
 12850  009FA0  3207               	rrcf	___lldiv@divisor+2,f,c
 12851  009FA2  3206               	rrcf	___lldiv@divisor+1,f,c
 12852  009FA4  3205               	rrcf	___lldiv@divisor,f,c
 12853  009FA6  2E0D               	decfsz	___lldiv@counter,f,c
 12854  009FA8  D7E1               	goto	u9090
 12855  009FAA                     l2018:
 12856  009FAA  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12857  009FAE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12858  009FB2  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12859  009FB6  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12860  009FBA  0012               	return		;funcret
 12861  009FBC                     __end_of___lldiv:
 12862                           	opt stack 0
 12863                           tblptru	equ	0xFF8
 12864                           tblptrh	equ	0xFF7
 12865                           tblptrl	equ	0xFF6
 12866                           tablat	equ	0xFF5
 12867                           prodh	equ	0xFF4
 12868                           prodl	equ	0xFF3
 12869                           postinc0	equ	0xFEE
 12870                           wreg	equ	0xFE8
 12871                           postdec1	equ	0xFE5
 12872                           plusw1	equ	0xFE3
 12873                           fsr1l	equ	0xFE1
 12874                           indf2	equ	0xFDF
 12875                           postinc2	equ	0xFDE
 12876                           postdec2	equ	0xFDD
 12877                           plusw2	equ	0xFDB
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function _mainOperation *****************
 12883 ;; Defined at:
 12884 ;;		line 1019 in file "operationMode.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;		None
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;  sortedDrawer   16   50[BANK0 ] unsigned int [8]
 12889 ;;  foodTable      16   32[BANK0 ] unsigned int [8]
 12890 ;;  dietTable      16   16[BANK0 ] unsigned int [8]
 12891 ;;  drawerTable    16    0[BANK0 ] unsigned int [8]
 12892 ;;  i               2   78[BANK0 ] unsigned int 
 12893 ;;  trueValue       2   76[BANK0 ] unsigned int 
 12894 ;;  currentDrawe    2   74[BANK0 ] unsigned int 
 12895 ;;  longPieces      2   72[BANK0 ] unsigned int 
 12896 ;;  flatPieces      2   70[BANK0 ] unsigned int 
 12897 ;;  roundPieces     2   68[BANK0 ] unsigned int 
 12898 ;;  nextDrawer      2   66[BANK0 ] unsigned int 
 12899 ;;  temp            2   48[BANK0 ] unsigned int 
 12900 ;; Return value:  Size  Location     Type
 12901 ;;                  1    wreg      void 
 12902 ;; Registers used:
 12903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12904 ;; Tracked objects:
 12905 ;;		On entry : 0/0
 12906 ;;		On exit  : 0/0
 12907 ;;		Unchanged: 0/0
 12908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12912 ;;      Totals:         2      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12913 ;;Total ram usage:       82 bytes
 12914 ;; Hardware stack levels used:    1
 12915 ;; Hardware stack levels required when called:    3
 12916 ;; This function calls:
 12917 ;;		_configDrawer
 12918 ;;		_distributePieces
 12919 ;;		_findDrawerIndex
 12920 ;;		_getFlatPieces
 12921 ;;		_getLongPieces
 12922 ;;		_getRoundPieces
 12923 ;;		_getUserInputs
 12924 ;;		_initArm
 12925 ;;		_lcdInst
 12926 ;;		_moveHorizontally
 12927 ;;		_moveVertically
 12928 ;;		_printf
 12929 ;;		_sortDrawerList
 12930 ;;		_trapDoor
 12931 ;;		_uartTransmitBlocking
 12932 ;; This function is called by:
 12933 ;;		_main
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text24
 12938  00D0AC                     __ptext24:
 12939                           	opt stack 0
 12940  00D0AC                     _mainOperation:
 12941                           	opt stack 27
 12942                           
 12943                           ;operationMode.c: 1020: unsigned int i = 0;
 12944                           
 12945                           ;incstack = 0
 12946  00D0AC  0E00               	movlw	0
 12947  00D0AE  0100               	movlb	0	; () banked
 12948  00D0B0  6FCF               	movwf	(mainOperation@i+1)& (0+255),b
 12949  00D0B2  0E00               	movlw	0
 12950  00D0B4  6FCE               	movwf	mainOperation@i& (0+255),b
 12951                           
 12952                           ;operationMode.c: 1021: unsigned int currentDrawer = 0;
 12953  00D0B6  0E00               	movlw	0
 12954  00D0B8  6FCB               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12955  00D0BA  0E00               	movlw	0
 12956  00D0BC  6FCA               	movwf	mainOperation@currentDrawer& (0+255),b
 12957                           
 12958                           ;operationMode.c: 1022: unsigned int temp = 0;
 12959  00D0BE  0E00               	movlw	0
 12960  00D0C0  6FB1               	movwf	(mainOperation@temp+1)& (0+255),b
 12961  00D0C2  0E00               	movlw	0
 12962  00D0C4  6FB0               	movwf	mainOperation@temp& (0+255),b
 12963                           
 12964                           ;operationMode.c: 1023: unsigned int nextDrawer = 0;
 12965  00D0C6  0E00               	movlw	0
 12966  00D0C8  6FC3               	movwf	(mainOperation@nextDrawer+1)& (0+255),b
 12967  00D0CA  0E00               	movlw	0
 12968  00D0CC  6FC2               	movwf	mainOperation@nextDrawer& (0+255),b
 12969                           
 12970                           ;operationMode.c: 1024: unsigned int trueValue = 0;
 12971  00D0CE  0E00               	movlw	0
 12972  00D0D0  6FCD               	movwf	(mainOperation@trueValue+1)& (0+255),b
 12973  00D0D2  0E00               	movlw	0
 12974  00D0D4  6FCC               	movwf	mainOperation@trueValue& (0+255),b
 12975                           
 12976                           ;operationMode.c: 1025: unsigned int roundPieces = 0;
 12977  00D0D6  0E00               	movlw	0
 12978  00D0D8  6FC5               	movwf	(mainOperation@roundPieces+1)& (0+255),b
 12979  00D0DA  0E00               	movlw	0
 12980  00D0DC  6FC4               	movwf	mainOperation@roundPieces& (0+255),b
 12981                           
 12982                           ;operationMode.c: 1026: unsigned int flatPieces = 0;
 12983  00D0DE  0E00               	movlw	0
 12984  00D0E0  6FC7               	movwf	(mainOperation@flatPieces+1)& (0+255),b
 12985  00D0E2  0E00               	movlw	0
 12986  00D0E4  6FC6               	movwf	mainOperation@flatPieces& (0+255),b
 12987                           
 12988                           ;operationMode.c: 1027: unsigned int longPieces = 0;
 12989  00D0E6  0E00               	movlw	0
 12990  00D0E8  6FC9               	movwf	(mainOperation@longPieces+1)& (0+255),b
 12991  00D0EA  0E00               	movlw	0
 12992  00D0EC  6FC8               	movwf	mainOperation@longPieces& (0+255),b
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;operationMode.c: 1029: unsigned int drawerTable[8] = {0,0,0,0,0,0,0,0};
 12996  00D0EE  EE21  F0DA         	lfsr	2,mainOperation@F3176
 12997  00D0F2  EE10  F080         	lfsr	1,mainOperation@drawerTable
 12998  00D0F6  0E0F               	movlw	15
 12999  00D0F8                     u13991:
 13000  00D0F8  CFDB FFE3          	movff	plusw2,plusw1
 13001  00D0FC  06E8               	decf	wreg,f,c
 13002  00D0FE  E2FC               	bc	u13991
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;operationMode.c: 1030: unsigned int sortedDrawerTable[8] = {0,0,0,0,0,0,0,0};
 13006  00D100  EE21  F0CA         	lfsr	2,mainOperation@F3178
 13007  00D104  EE10  F0B2         	lfsr	1,mainOperation@sortedDrawerTable
 13008  00D108  0E0F               	movlw	15
 13009  00D10A                     u14001:
 13010  00D10A  CFDB FFE3          	movff	plusw2,plusw1
 13011  00D10E  06E8               	decf	wreg,f,c
 13012  00D110  E2FC               	bc	u14001
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;operationMode.c: 1031: unsigned int dietTable[8] = {0,0,0,0,0,0,0,0};
 13016  00D112  EE21  F0BA         	lfsr	2,mainOperation@F3180
 13017  00D116  EE10  F090         	lfsr	1,mainOperation@dietTable
 13018  00D11A  0E0F               	movlw	15
 13019  00D11C                     u14011:
 13020  00D11C  CFDB FFE3          	movff	plusw2,plusw1
 13021  00D120  06E8               	decf	wreg,f,c
 13022  00D122  E2FC               	bc	u14011
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;operationMode.c: 1032: unsigned int foodTable[8] = {0,0,0,0,0,0,0,0};
 13026  00D124  EE21  F0AA         	lfsr	2,mainOperation@F3182
 13027  00D128  EE10  F0A0         	lfsr	1,mainOperation@foodTable
 13028  00D12C  0E0F               	movlw	15
 13029  00D12E                     u14021:
 13030  00D12E  CFDB FFE3          	movff	plusw2,plusw1
 13031  00D132  06E8               	decf	wreg,f,c
 13032  00D134  E2FC               	bc	u14021
 13033                           
 13034                           ;operationMode.c: 1035: currentDrawer = 1;
 13035  00D136  0E00               	movlw	0
 13036  00D138  6FCB               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 13037  00D13A  0E01               	movlw	1
 13038  00D13C  6FCA               	movwf	mainOperation@currentDrawer& (0+255),b
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;operationMode.c: 1037: getUserInputs(drawerTable, dietTable, foodTable);
 13042  00D13E  0E80               	movlw	low mainOperation@drawerTable
 13043  00D140  6E07               	movwf	getUserInputs@drawerTable,c
 13044  00D142  0E00               	movlw	high mainOperation@drawerTable
 13045  00D144  6E08               	movwf	getUserInputs@drawerTable+1,c
 13046  00D146  0E90               	movlw	low mainOperation@dietTable
 13047  00D148  6E09               	movwf	getUserInputs@dietTable,c
 13048  00D14A  0E00               	movlw	high mainOperation@dietTable
 13049  00D14C  6E0A               	movwf	getUserInputs@dietTable+1,c
 13050  00D14E  0EA0               	movlw	low mainOperation@foodTable
 13051  00D150  6E0B               	movwf	getUserInputs@foodTable,c
 13052  00D152  0E00               	movlw	high mainOperation@foodTable
 13053  00D154  6E0C               	movwf	getUserInputs@foodTable+1,c
 13054  00D156  ECAA  F054         	call	_getUserInputs	;wreg free
 13055                           
 13056                           ;operationMode.c: 1038: sortDrawerList(drawerTable, sortedDrawerTable);
 13057  00D15A  0E80               	movlw	low mainOperation@drawerTable
 13058  00D15C  6E01               	movwf	sortDrawerList@drawerTable,c
 13059  00D15E  0E00               	movlw	high mainOperation@drawerTable
 13060  00D160  6E02               	movwf	sortDrawerList@drawerTable+1,c
 13061  00D162  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13062  00D164  6E03               	movwf	sortDrawerList@sortedDrawerTable,c
 13063  00D166  0E00               	movlw	high mainOperation@sortedDrawerTable
 13064  00D168  6E04               	movwf	sortDrawerList@sortedDrawerTable+1,c
 13065  00D16A  EC2C  F071         	call	_sortDrawerList	;wreg free
 13066                           
 13067                           ;operationMode.c: 1040: for (i=0; i<8; i++){
 13068  00D16E  0E00               	movlw	0
 13069  00D170  0100               	movlb	0	; () banked
 13070  00D172  6FCF               	movwf	(mainOperation@i+1)& (0+255),b
 13071  00D174  0E00               	movlw	0
 13072  00D176  6FCE               	movwf	mainOperation@i& (0+255),b
 13073                           
 13074                           ; BSR set to: 0
 13075  00D178  51CF               	movf	(mainOperation@i+1)& (0+255),w,b
 13076  00D17A  E105               	bnz	u14030
 13077  00D17C  0E08               	movlw	8
 13078  00D17E  5DCE               	subwf	mainOperation@i& (0+255),w,b
 13079  00D180  B0D8               	btfsc	status,0,c
 13080  00D182  D2AD               	goto	u14070
 13081  00D184  D001               	goto	l651
 13082  00D186                     u14030:
 13083                           
 13084                           ; BSR set to: 0
 13085  00D186  D2AB               	goto	u14070
 13086  00D188                     l651:
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;operationMode.c: 1041: if (sortedDrawerTable[i] != 0){
 13090                           
 13091                           ; BSR set to: 0
 13092  00D188  90D8               	bcf	status,0,c
 13093  00D18A  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13094  00D18C  6ED9               	movwf	fsr2l,c
 13095  00D18E  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13096  00D190  6EDA               	movwf	fsr2h,c
 13097  00D192  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13098  00D194  26D9               	addwf	fsr2l,f,c
 13099  00D196  0E00               	movlw	high mainOperation@sortedDrawerTable
 13100  00D198  22DA               	addwfc	fsr2h,f,c
 13101  00D19A  50DE               	movf	postinc2,w,c
 13102  00D19C  10DE               	iorwf	postinc2,w,c
 13103  00D19E  B4D8               	btfsc	status,2,c
 13104  00D1A0  D298               	goto	l653
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;operationMode.c: 1042: currentDrawer = sortedDrawerTable[i];
 13108  00D1A2  90D8               	bcf	status,0,c
 13109  00D1A4  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13110  00D1A6  6ED9               	movwf	fsr2l,c
 13111  00D1A8  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13112  00D1AA  6EDA               	movwf	fsr2h,c
 13113  00D1AC  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13114  00D1AE  26D9               	addwf	fsr2l,f,c
 13115  00D1B0  0E00               	movlw	high mainOperation@sortedDrawerTable
 13116  00D1B2  22DA               	addwfc	fsr2h,f,c
 13117  00D1B4  CFDE F0CA          	movff	postinc2,mainOperation@currentDrawer
 13118  00D1B8  CFDD F0CB          	movff	postdec2,mainOperation@currentDrawer+1
 13119                           
 13120                           ;operationMode.c: 1043: nextDrawer = sortedDrawerTable[i+1];
 13121  00D1BC  C0CE  F039         	movff	mainOperation@i,??_mainOperation
 13122  00D1C0  C0CF  F03A         	movff	mainOperation@i+1,??_mainOperation+1
 13123  00D1C4  90D8               	bcf	status,0,c
 13124  00D1C6  3639               	rlcf	??_mainOperation,f,c
 13125  00D1C8  363A               	rlcf	??_mainOperation+1,f,c
 13126  00D1CA  0E02               	movlw	2
 13127  00D1CC  2639               	addwf	??_mainOperation,f,c
 13128  00D1CE  0E00               	movlw	0
 13129  00D1D0  223A               	addwfc	??_mainOperation+1,f,c
 13130  00D1D2  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13131  00D1D4  2439               	addwf	??_mainOperation,w,c
 13132  00D1D6  6ED9               	movwf	fsr2l,c
 13133  00D1D8  0E00               	movlw	high mainOperation@sortedDrawerTable
 13134  00D1DA  203A               	addwfc	??_mainOperation+1,w,c
 13135  00D1DC  6EDA               	movwf	fsr2h,c
 13136  00D1DE  CFDE F0C2          	movff	postinc2,mainOperation@nextDrawer
 13137  00D1E2  CFDD F0C3          	movff	postdec2,mainOperation@nextDrawer+1
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;operationMode.c: 1045: if (currentDrawer != 1 && i == 0){
 13141  00D1E6  05CA               	decf	mainOperation@currentDrawer& (0+255),w,b
 13142  00D1E8  11CB               	iorwf	(mainOperation@currentDrawer+1)& (0+255),w,b
 13143  00D1EA  B4D8               	btfsc	status,2,c
 13144  00D1EC  D072               	goto	l654
 13145                           
 13146                           ; BSR set to: 0
 13147  00D1EE  51CE               	movf	mainOperation@i& (0+255),w,b
 13148  00D1F0  11CF               	iorwf	(mainOperation@i+1)& (0+255),w,b
 13149  00D1F2  A4D8               	btfss	status,2,c
 13150  00D1F4  D06E               	goto	l654
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;operationMode.c: 1046: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13154  00D1F6  0E01               	movlw	1
 13155  00D1F8  EC16  F04D         	call	_lcdInst
 13156  00D1FC  0EC3               	movlw	195
 13157  00D1FE  6E39               	movwf	??_mainOperation& (0+255),c
 13158  00D200  0ECD               	movlw	205
 13159  00D202                     u15137:
 13160  00D202  2EE8               	decfsz	wreg,f,c
 13161  00D204  D7FE               	bra	u15137
 13162  00D206  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13163  00D208  D7FC               	bra	u15137
 13164  00D20A  F000               	nop	
 13165                           
 13166                           ;operationMode.c: 1047: printf("Moving to");
 13167  00D20C  0E52               	movlw	low STR_34
 13168  00D20E  6E0D               	movwf	printf@f,c
 13169  00D210  0EFF               	movlw	high STR_34
 13170  00D212  6E0E               	movwf	printf@f+1,c
 13171  00D214  EC0C  F061         	call	_printf	;wreg free
 13172                           
 13173                           ;operationMode.c: 1048: lcdInst(0xC0);;
 13174  00D218  0EC0               	movlw	192
 13175  00D21A  EC16  F04D         	call	_lcdInst
 13176                           
 13177                           ;operationMode.c: 1049: printf("drawer %i", sortedDrawerTable[i]);
 13178  00D21E  0E48               	movlw	low STR_35
 13179  00D220  6E0D               	movwf	printf@f,c
 13180  00D222  0EFF               	movlw	high STR_35
 13181  00D224  6E0E               	movwf	printf@f+1,c
 13182  00D226  90D8               	bcf	status,0,c
 13183  00D228  0100               	movlb	0	; () banked
 13184  00D22A  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13185  00D22C  6ED9               	movwf	fsr2l,c
 13186  00D22E  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13187  00D230  6EDA               	movwf	fsr2h,c
 13188  00D232  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13189  00D234  26D9               	addwf	fsr2l,f,c
 13190  00D236  0E00               	movlw	high mainOperation@sortedDrawerTable
 13191  00D238  22DA               	addwfc	fsr2h,f,c
 13192  00D23A  CFDE F00F          	movff	postinc2,?_printf+2
 13193  00D23E  CFDD F010          	movff	postdec2,?_printf+3
 13194  00D242  EC0C  F061         	call	_printf	;wreg free
 13195                           
 13196                           ;operationMode.c: 1050: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13197  00D246  0E66               	movlw	102
 13198  00D248  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13199  00D24A  0E76               	movlw	118
 13200  00D24C  6E39               	movwf	??_mainOperation& (0+255),c
 13201  00D24E  0EC1               	movlw	193
 13202  00D250                     u15147:
 13203  00D250  2EE8               	decfsz	wreg,f,c
 13204  00D252  D7FE               	bra	u15147
 13205  00D254  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13206  00D256  D7FC               	bra	u15147
 13207  00D258  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13208  00D25A  D7FA               	bra	u15147
 13209  00D25C  F000               	nop	
 13210                           
 13211                           ;operationMode.c: 1051: temp = moveVertically(1, sortedDrawerTable[i]);
 13212  00D25E  0E00               	movlw	0
 13213  00D260  6E0D               	movwf	moveVertically@currentDrawer+1,c
 13214  00D262  0E01               	movlw	1
 13215  00D264  6E0C               	movwf	moveVertically@currentDrawer,c
 13216  00D266  90D8               	bcf	status,0,c
 13217  00D268  0100               	movlb	0	; () banked
 13218  00D26A  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13219  00D26C  6ED9               	movwf	fsr2l,c
 13220  00D26E  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13221  00D270  6EDA               	movwf	fsr2h,c
 13222  00D272  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13223  00D274  26D9               	addwf	fsr2l,f,c
 13224  00D276  0E00               	movlw	high mainOperation@sortedDrawerTable
 13225  00D278  22DA               	addwfc	fsr2h,f,c
 13226  00D27A  CFDE F00E          	movff	postinc2,moveVertically@nextDrawer
 13227  00D27E  CFDD F00F          	movff	postdec2,moveVertically@nextDrawer+1
 13228  00D282  EC52  F05E         	call	_moveVertically	;wreg free
 13229  00D286  C00C  F0B0         	movff	?_moveVertically,mainOperation@temp
 13230  00D28A  C00D  F0B1         	movff	?_moveVertically+1,mainOperation@temp+1
 13231                           
 13232                           ;operationMode.c: 1052: moveHorizontally(1, sortedDrawerTable[i]);
 13233  00D28E  0E00               	movlw	0
 13234  00D290  6E0D               	movwf	moveHorizontally@currentDrawer+1,c
 13235  00D292  0E01               	movlw	1
 13236  00D294  6E0C               	movwf	moveHorizontally@currentDrawer,c
 13237  00D296  90D8               	bcf	status,0,c
 13238  00D298  0100               	movlb	0	; () banked
 13239  00D29A  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13240  00D29C  6ED9               	movwf	fsr2l,c
 13241  00D29E  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13242  00D2A0  6EDA               	movwf	fsr2h,c
 13243  00D2A2  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13244  00D2A4  26D9               	addwf	fsr2l,f,c
 13245  00D2A6  0E00               	movlw	high mainOperation@sortedDrawerTable
 13246  00D2A8  22DA               	addwfc	fsr2h,f,c
 13247  00D2AA  CFDE F00E          	movff	postinc2,moveHorizontally@nextDrawer
 13248  00D2AE  CFDD F00F          	movff	postdec2,moveHorizontally@nextDrawer+1
 13249  00D2B2  EC6A  F058         	call	_moveHorizontally	;wreg free
 13250                           
 13251                           ;operationMode.c: 1053: currentDrawer = sortedDrawerTable[i];
 13252  00D2B6  90D8               	bcf	status,0,c
 13253  00D2B8  0100               	movlb	0	; () banked
 13254  00D2BA  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13255  00D2BC  6ED9               	movwf	fsr2l,c
 13256  00D2BE  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13257  00D2C0  6EDA               	movwf	fsr2h,c
 13258  00D2C2  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13259  00D2C4  26D9               	addwf	fsr2l,f,c
 13260  00D2C6  0E00               	movlw	high mainOperation@sortedDrawerTable
 13261  00D2C8  22DA               	addwfc	fsr2h,f,c
 13262  00D2CA  CFDE F0CA          	movff	postinc2,mainOperation@currentDrawer
 13263  00D2CE  CFDD F0CB          	movff	postdec2,mainOperation@currentDrawer+1
 13264  00D2D2                     l654:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;operationMode.c: 1054: }
 13268                           ;operationMode.c: 1056: uartTransmitBlocking(drawerDown, 1);
 13269                           
 13270                           ; BSR set to: 0
 13271  00D2D2  0EF8               	movlw	low _drawerDown
 13272  00D2D4  6E01               	movwf	uartTransmitBlocking@data,c
 13273  00D2D6  0E00               	movlw	high _drawerDown
 13274  00D2D8  6E02               	movwf	uartTransmitBlocking@data+1,c
 13275  00D2DA  0E01               	movlw	1
 13276  00D2DC  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13277  00D2DE  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 13278                           
 13279                           ;operationMode.c: 1057: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13280  00D2E2  0E33               	movlw	51
 13281  00D2E4  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13282  00D2E6  0EBB               	movlw	187
 13283  00D2E8  6E39               	movwf	??_mainOperation& (0+255),c
 13284  00D2EA  0EE0               	movlw	224
 13285  00D2EC                     u15157:
 13286  00D2EC  2EE8               	decfsz	wreg,f,c
 13287  00D2EE  D7FE               	bra	u15157
 13288  00D2F0  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13289  00D2F2  D7FC               	bra	u15157
 13290  00D2F4  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13291  00D2F6  D7FA               	bra	u15157
 13292                           
 13293                           ;operationMode.c: 1058: configDrawer(0);
 13294  00D2F8  0E00               	movlw	0
 13295  00D2FA  6E07               	movwf	configDrawer@direction+1,c
 13296  00D2FC  0E00               	movlw	0
 13297  00D2FE  6E06               	movwf	configDrawer@direction,c
 13298  00D300  EC90  F04D         	call	_configDrawer	;wreg free
 13299                           
 13300                           ;operationMode.c: 1059: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13301  00D304  0E33               	movlw	51
 13302  00D306  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13303  00D308  0EBB               	movlw	187
 13304  00D30A  6E39               	movwf	??_mainOperation& (0+255),c
 13305  00D30C  0EE0               	movlw	224
 13306  00D30E                     u15167:
 13307  00D30E  2EE8               	decfsz	wreg,f,c
 13308  00D310  D7FE               	bra	u15167
 13309  00D312  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13310  00D314  D7FC               	bra	u15167
 13311  00D316  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13312  00D318  D7FA               	bra	u15167
 13313                           
 13314                           ;operationMode.c: 1060: uartTransmitBlocking(drawerUp, 1);
 13315  00D31A  0EF9               	movlw	low _drawerUp
 13316  00D31C  6E01               	movwf	uartTransmitBlocking@data,c
 13317  00D31E  0E00               	movlw	high _drawerUp
 13318  00D320  6E02               	movwf	uartTransmitBlocking@data+1,c
 13319  00D322  0E01               	movlw	1
 13320  00D324  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13321  00D326  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 13322                           
 13323                           ;operationMode.c: 1061: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13324  00D32A  0E33               	movlw	51
 13325  00D32C  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13326  00D32E  0EBB               	movlw	187
 13327  00D330  6E39               	movwf	??_mainOperation& (0+255),c
 13328  00D332  0EE0               	movlw	224
 13329  00D334                     u15177:
 13330  00D334  2EE8               	decfsz	wreg,f,c
 13331  00D336  D7FE               	bra	u15177
 13332  00D338  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13333  00D33A  D7FC               	bra	u15177
 13334  00D33C  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13335  00D33E  D7FA               	bra	u15177
 13336                           
 13337                           ;operationMode.c: 1062: configDrawer(1);
 13338  00D340  0E00               	movlw	0
 13339  00D342  6E07               	movwf	configDrawer@direction+1,c
 13340  00D344  0E01               	movlw	1
 13341  00D346  6E06               	movwf	configDrawer@direction,c
 13342  00D348  EC90  F04D         	call	_configDrawer	;wreg free
 13343                           
 13344                           ;operationMode.c: 1063: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13345  00D34C  0E33               	movlw	51
 13346  00D34E  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13347  00D350  0EBB               	movlw	187
 13348  00D352  6E39               	movwf	??_mainOperation& (0+255),c
 13349  00D354  0EE0               	movlw	224
 13350  00D356                     u15187:
 13351  00D356  2EE8               	decfsz	wreg,f,c
 13352  00D358  D7FE               	bra	u15187
 13353  00D35A  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13354  00D35C  D7FC               	bra	u15187
 13355  00D35E  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13356  00D360  D7FA               	bra	u15187
 13357                           
 13358                           ;operationMode.c: 1065: trueValue = findDrawerIndex(drawerTable, sortedDrawerTable[i]);
 13359  00D362  0E80               	movlw	low mainOperation@drawerTable
 13360  00D364  6E01               	movwf	findDrawerIndex@drawerTable,c
 13361  00D366  0E00               	movlw	high mainOperation@drawerTable
 13362  00D368  6E02               	movwf	findDrawerIndex@drawerTable+1,c
 13363  00D36A  90D8               	bcf	status,0,c
 13364  00D36C  0100               	movlb	0	; () banked
 13365  00D36E  35CE               	rlcf	mainOperation@i& (0+255),w,b
 13366  00D370  6ED9               	movwf	fsr2l,c
 13367  00D372  35CF               	rlcf	(mainOperation@i+1)& (0+255),w,b
 13368  00D374  6EDA               	movwf	fsr2h,c
 13369  00D376  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13370  00D378  26D9               	addwf	fsr2l,f,c
 13371  00D37A  0E00               	movlw	high mainOperation@sortedDrawerTable
 13372  00D37C  22DA               	addwfc	fsr2h,f,c
 13373  00D37E  CFDE F003          	movff	postinc2,findDrawerIndex@sortedDrawerValue
 13374  00D382  CFDD F004          	movff	postdec2,findDrawerIndex@sortedDrawerValue+1
 13375  00D386  ECBE  F04E         	call	_findDrawerIndex	;wreg free
 13376  00D38A  C001  F0CC         	movff	?_findDrawerIndex,mainOperation@trueValue
 13377  00D38E  C002  F0CD         	movff	?_findDrawerIndex+1,mainOperation@trueValue+1
 13378                           
 13379                           ;operationMode.c: 1066: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13380  00D392  0E01               	movlw	1
 13381  00D394  EC16  F04D         	call	_lcdInst
 13382  00D398  0EC3               	movlw	195
 13383  00D39A  6E39               	movwf	??_mainOperation& (0+255),c
 13384  00D39C  0ECD               	movlw	205
 13385  00D39E                     u15197:
 13386  00D39E  2EE8               	decfsz	wreg,f,c
 13387  00D3A0  D7FE               	bra	u15197
 13388  00D3A2  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13389  00D3A4  D7FC               	bra	u15197
 13390  00D3A6  F000               	nop	
 13391                           
 13392                           ;operationMode.c: 1067: printf("Diet: %s", inputs[dietTable[trueValue]]);
 13393  00D3A8  0E6E               	movlw	low STR_36
 13394  00D3AA  6E0D               	movwf	printf@f,c
 13395  00D3AC  0EFF               	movlw	high STR_36
 13396  00D3AE  6E0E               	movwf	printf@f+1,c
 13397  00D3B0  90D8               	bcf	status,0,c
 13398  00D3B2  0100               	movlb	0	; () banked
 13399  00D3B4  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13400  00D3B6  6ED9               	movwf	fsr2l,c
 13401  00D3B8  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13402  00D3BA  6EDA               	movwf	fsr2h,c
 13403  00D3BC  0E90               	movlw	low mainOperation@dietTable
 13404  00D3BE  26D9               	addwf	fsr2l,f,c
 13405  00D3C0  0E00               	movlw	high mainOperation@dietTable
 13406  00D3C2  22DA               	addwfc	fsr2h,f,c
 13407  00D3C4  CFDE F039          	movff	postinc2,??_mainOperation
 13408  00D3C8  CFDD F03A          	movff	postdec2,??_mainOperation+1
 13409  00D3CC  90D8               	bcf	status,0,c
 13410  00D3CE  3639               	rlcf	??_mainOperation,f,c
 13411  00D3D0  363A               	rlcf	??_mainOperation+1,f,c
 13412  00D3D2  0E50               	movlw	low _inputs
 13413  00D3D4  2439               	addwf	??_mainOperation,w,c
 13414  00D3D6  6ED9               	movwf	fsr2l,c
 13415  00D3D8  0E02               	movlw	high _inputs
 13416  00D3DA  203A               	addwfc	??_mainOperation+1,w,c
 13417  00D3DC  6EDA               	movwf	fsr2h,c
 13418  00D3DE  CFDE F00F          	movff	postinc2,?_printf+2
 13419  00D3E2  CFDD F010          	movff	postdec2,?_printf+3
 13420  00D3E6  EC0C  F061         	call	_printf	;wreg free
 13421                           
 13422                           ;operationMode.c: 1068: lcdInst(0xC0);;
 13423  00D3EA  0EC0               	movlw	192
 13424  00D3EC  EC16  F04D         	call	_lcdInst
 13425                           
 13426                           ;operationMode.c: 1069: printf("Food: %s", foodInputs[foodTable[trueValue]]);
 13427  00D3F0  0E65               	movlw	low STR_37
 13428  00D3F2  6E0D               	movwf	printf@f,c
 13429  00D3F4  0EFF               	movlw	high STR_37
 13430  00D3F6  6E0E               	movwf	printf@f+1,c
 13431  00D3F8  90D8               	bcf	status,0,c
 13432  00D3FA  0100               	movlb	0	; () banked
 13433  00D3FC  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13434  00D3FE  6ED9               	movwf	fsr2l,c
 13435  00D400  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13436  00D402  6EDA               	movwf	fsr2h,c
 13437  00D404  0EA0               	movlw	low mainOperation@foodTable
 13438  00D406  26D9               	addwf	fsr2l,f,c
 13439  00D408  0E00               	movlw	high mainOperation@foodTable
 13440  00D40A  22DA               	addwfc	fsr2h,f,c
 13441  00D40C  CFDE F039          	movff	postinc2,??_mainOperation
 13442  00D410  CFDD F03A          	movff	postdec2,??_mainOperation+1
 13443  00D414  90D8               	bcf	status,0,c
 13444  00D416  3639               	rlcf	??_mainOperation,f,c
 13445  00D418  363A               	rlcf	??_mainOperation+1,f,c
 13446  00D41A  0E74               	movlw	low _foodInputs
 13447  00D41C  2439               	addwf	??_mainOperation,w,c
 13448  00D41E  6ED9               	movwf	fsr2l,c
 13449  00D420  0E02               	movlw	high _foodInputs
 13450  00D422  203A               	addwfc	??_mainOperation+1,w,c
 13451  00D424  6EDA               	movwf	fsr2h,c
 13452  00D426  CFDE F00F          	movff	postinc2,?_printf+2
 13453  00D42A  CFDD F010          	movff	postdec2,?_printf+3
 13454  00D42E  EC0C  F061         	call	_printf	;wreg free
 13455                           
 13456                           ;operationMode.c: 1070: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13457  00D432  0E66               	movlw	102
 13458  00D434  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13459  00D436  0E76               	movlw	118
 13460  00D438  6E39               	movwf	??_mainOperation& (0+255),c
 13461  00D43A  0EC1               	movlw	193
 13462  00D43C                     u15207:
 13463  00D43C  2EE8               	decfsz	wreg,f,c
 13464  00D43E  D7FE               	bra	u15207
 13465  00D440  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13466  00D442  D7FC               	bra	u15207
 13467  00D444  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13468  00D446  D7FA               	bra	u15207
 13469  00D448  F000               	nop	
 13470                           
 13471                           ;operationMode.c: 1071: roundPieces = getRoundPieces(dietTable[trueValue], foodTable[tru
      +                          eValue]);
 13472  00D44A  90D8               	bcf	status,0,c
 13473  00D44C  0100               	movlb	0	; () banked
 13474  00D44E  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13475  00D450  6ED9               	movwf	fsr2l,c
 13476  00D452  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13477  00D454  6EDA               	movwf	fsr2h,c
 13478  00D456  0E90               	movlw	low mainOperation@dietTable
 13479  00D458  26D9               	addwf	fsr2l,f,c
 13480  00D45A  0E00               	movlw	high mainOperation@dietTable
 13481  00D45C  22DA               	addwfc	fsr2h,f,c
 13482  00D45E  CFDE F001          	movff	postinc2,getRoundPieces@dietType
 13483  00D462  CFDD F002          	movff	postdec2,getRoundPieces@dietType+1
 13484  00D466  90D8               	bcf	status,0,c
 13485  00D468  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13486  00D46A  6ED9               	movwf	fsr2l,c
 13487  00D46C  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13488  00D46E  6EDA               	movwf	fsr2h,c
 13489  00D470  0EA0               	movlw	low mainOperation@foodTable
 13490  00D472  26D9               	addwf	fsr2l,f,c
 13491  00D474  0E00               	movlw	high mainOperation@foodTable
 13492  00D476  22DA               	addwfc	fsr2h,f,c
 13493  00D478  CFDE F003          	movff	postinc2,getRoundPieces@foodType
 13494  00D47C  CFDD F004          	movff	postdec2,getRoundPieces@foodType+1
 13495  00D480  ECC9  F055         	call	_getRoundPieces	;wreg free
 13496  00D484  C001  F0C4         	movff	?_getRoundPieces,mainOperation@roundPieces
 13497  00D488  C002  F0C5         	movff	?_getRoundPieces+1,mainOperation@roundPieces+1
 13498                           
 13499                           ;operationMode.c: 1072: flatPieces = getFlatPieces(dietTable[trueValue], foodTable[trueV
      +                          alue]);
 13500  00D48C  90D8               	bcf	status,0,c
 13501  00D48E  0100               	movlb	0	; () banked
 13502  00D490  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13503  00D492  6ED9               	movwf	fsr2l,c
 13504  00D494  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13505  00D496  6EDA               	movwf	fsr2h,c
 13506  00D498  0E90               	movlw	low mainOperation@dietTable
 13507  00D49A  26D9               	addwf	fsr2l,f,c
 13508  00D49C  0E00               	movlw	high mainOperation@dietTable
 13509  00D49E  22DA               	addwfc	fsr2h,f,c
 13510  00D4A0  CFDE F001          	movff	postinc2,getFlatPieces@dietType
 13511  00D4A4  CFDD F002          	movff	postdec2,getFlatPieces@dietType+1
 13512  00D4A8  90D8               	bcf	status,0,c
 13513  00D4AA  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13514  00D4AC  6ED9               	movwf	fsr2l,c
 13515  00D4AE  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13516  00D4B0  6EDA               	movwf	fsr2h,c
 13517  00D4B2  0EA0               	movlw	low mainOperation@foodTable
 13518  00D4B4  26D9               	addwf	fsr2l,f,c
 13519  00D4B6  0E00               	movlw	high mainOperation@foodTable
 13520  00D4B8  22DA               	addwfc	fsr2h,f,c
 13521  00D4BA  CFDE F003          	movff	postinc2,getFlatPieces@foodType
 13522  00D4BE  CFDD F004          	movff	postdec2,getFlatPieces@foodType+1
 13523  00D4C2  EC00  F057         	call	_getFlatPieces	;wreg free
 13524  00D4C6  C001  F0C6         	movff	?_getFlatPieces,mainOperation@flatPieces
 13525  00D4CA  C002  F0C7         	movff	?_getFlatPieces+1,mainOperation@flatPieces+1
 13526                           
 13527                           ;operationMode.c: 1073: longPieces = getLongPieces(dietTable[trueValue], foodTable[trueV
      +                          alue]);
 13528  00D4CE  90D8               	bcf	status,0,c
 13529  00D4D0  0100               	movlb	0	; () banked
 13530  00D4D2  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13531  00D4D4  6ED9               	movwf	fsr2l,c
 13532  00D4D6  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13533  00D4D8  6EDA               	movwf	fsr2h,c
 13534  00D4DA  0E90               	movlw	low mainOperation@dietTable
 13535  00D4DC  26D9               	addwf	fsr2l,f,c
 13536  00D4DE  0E00               	movlw	high mainOperation@dietTable
 13537  00D4E0  22DA               	addwfc	fsr2h,f,c
 13538  00D4E2  CFDE F001          	movff	postinc2,getLongPieces@dietType
 13539  00D4E6  CFDD F002          	movff	postdec2,getLongPieces@dietType+1
 13540  00D4EA  90D8               	bcf	status,0,c
 13541  00D4EC  35CC               	rlcf	mainOperation@trueValue& (0+255),w,b
 13542  00D4EE  6ED9               	movwf	fsr2l,c
 13543  00D4F0  35CD               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13544  00D4F2  6EDA               	movwf	fsr2h,c
 13545  00D4F4  0EA0               	movlw	low mainOperation@foodTable
 13546  00D4F6  26D9               	addwf	fsr2l,f,c
 13547  00D4F8  0E00               	movlw	high mainOperation@foodTable
 13548  00D4FA  22DA               	addwfc	fsr2h,f,c
 13549  00D4FC  CFDE F003          	movff	postinc2,getLongPieces@foodType
 13550  00D500  CFDD F004          	movff	postdec2,getLongPieces@foodType+1
 13551  00D504  EC24  F059         	call	_getLongPieces	;wreg free
 13552  00D508  C001  F0C8         	movff	?_getLongPieces,mainOperation@longPieces
 13553  00D50C  C002  F0C9         	movff	?_getLongPieces+1,mainOperation@longPieces+1
 13554                           
 13555                           ;operationMode.c: 1074: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13556  00D510  0E01               	movlw	1
 13557  00D512  EC16  F04D         	call	_lcdInst
 13558  00D516  0EC3               	movlw	195
 13559  00D518  6E39               	movwf	??_mainOperation& (0+255),c
 13560  00D51A  0ECD               	movlw	205
 13561  00D51C                     u15217:
 13562  00D51C  2EE8               	decfsz	wreg,f,c
 13563  00D51E  D7FE               	bra	u15217
 13564  00D520  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13565  00D522  D7FC               	bra	u15217
 13566  00D524  F000               	nop	
 13567                           
 13568                           ;operationMode.c: 1075: printf("R:%i F:%i L:%i", roundPieces, flatPieces, longPieces);
 13569  00D526  0E46               	movlw	low STR_38
 13570  00D528  6E0D               	movwf	printf@f,c
 13571  00D52A  0EFE               	movlw	high STR_38
 13572  00D52C  6E0E               	movwf	printf@f+1,c
 13573  00D52E  C0C4  F00F         	movff	mainOperation@roundPieces,?_printf+2
 13574  00D532  C0C5  F010         	movff	mainOperation@roundPieces+1,?_printf+3
 13575  00D536  C0C6  F011         	movff	mainOperation@flatPieces,?_printf+4
 13576  00D53A  C0C7  F012         	movff	mainOperation@flatPieces+1,?_printf+5
 13577  00D53E  C0C8  F013         	movff	mainOperation@longPieces,?_printf+6
 13578  00D542  C0C9  F014         	movff	mainOperation@longPieces+1,?_printf+7
 13579  00D546  EC0C  F061         	call	_printf	;wreg free
 13580                           
 13581                           ;operationMode.c: 1076: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13582  00D54A  0E66               	movlw	102
 13583  00D54C  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13584  00D54E  0E76               	movlw	118
 13585  00D550  6E39               	movwf	??_mainOperation& (0+255),c
 13586  00D552  0EC1               	movlw	193
 13587  00D554                     u15227:
 13588  00D554  2EE8               	decfsz	wreg,f,c
 13589  00D556  D7FE               	bra	u15227
 13590  00D558  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13591  00D55A  D7FC               	bra	u15227
 13592  00D55C  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13593  00D55E  D7FA               	bra	u15227
 13594  00D560  F000               	nop	
 13595                           
 13596                           ;operationMode.c: 1077: distributePieces(roundPieces, flatPieces, longPieces);
 13597  00D562  C0C4  F00C         	movff	mainOperation@roundPieces,distributePieces@roundPieces
 13598  00D566  C0C5  F00D         	movff	mainOperation@roundPieces+1,distributePieces@roundPieces+1
 13599  00D56A  C0C6  F00E         	movff	mainOperation@flatPieces,distributePieces@flatPieces
 13600  00D56E  C0C7  F00F         	movff	mainOperation@flatPieces+1,distributePieces@flatPieces+1
 13601  00D572  C0C8  F010         	movff	mainOperation@longPieces,distributePieces@longPieces
 13602  00D576  C0C9  F011         	movff	mainOperation@longPieces+1,distributePieces@longPieces+1
 13603  00D57A  ECB3  F057         	call	_distributePieces	;wreg free
 13604                           
 13605                           ;operationMode.c: 1078: _delay((unsigned long)((5000)*(40000000/4000.0)));
 13606  00D57E  0EFE               	movlw	254
 13607  00D580  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13608  00D582  0EA7               	movlw	167
 13609  00D584  6E39               	movwf	??_mainOperation& (0+255),c
 13610  00D586  0E66               	movlw	102
 13611  00D588                     u15237:
 13612  00D588  2EE8               	decfsz	wreg,f,c
 13613  00D58A  D7FE               	bra	u15237
 13614  00D58C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13615  00D58E  D7FC               	bra	u15237
 13616  00D590  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13617  00D592  D7FA               	bra	u15237
 13618                           
 13619                           ;operationMode.c: 1080: configDrawer(0);
 13620  00D594  0E00               	movlw	0
 13621  00D596  6E07               	movwf	configDrawer@direction+1,c
 13622  00D598  0E00               	movlw	0
 13623  00D59A  6E06               	movwf	configDrawer@direction,c
 13624  00D59C  EC90  F04D         	call	_configDrawer	;wreg free
 13625                           
 13626                           ;operationMode.c: 1081: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13627  00D5A0  0E33               	movlw	51
 13628  00D5A2  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13629  00D5A4  0EBB               	movlw	187
 13630  00D5A6  6E39               	movwf	??_mainOperation& (0+255),c
 13631  00D5A8  0EE0               	movlw	224
 13632  00D5AA                     u15247:
 13633  00D5AA  2EE8               	decfsz	wreg,f,c
 13634  00D5AC  D7FE               	bra	u15247
 13635  00D5AE  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13636  00D5B0  D7FC               	bra	u15247
 13637  00D5B2  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13638  00D5B4  D7FA               	bra	u15247
 13639                           
 13640                           ;operationMode.c: 1082: uartTransmitBlocking(drawerDown, 1);
 13641  00D5B6  0EF8               	movlw	low _drawerDown
 13642  00D5B8  6E01               	movwf	uartTransmitBlocking@data,c
 13643  00D5BA  0E00               	movlw	high _drawerDown
 13644  00D5BC  6E02               	movwf	uartTransmitBlocking@data+1,c
 13645  00D5BE  0E01               	movlw	1
 13646  00D5C0  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13647  00D5C2  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 13648                           
 13649                           ;operationMode.c: 1083: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13650  00D5C6  0E33               	movlw	51
 13651  00D5C8  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13652  00D5CA  0EBB               	movlw	187
 13653  00D5CC  6E39               	movwf	??_mainOperation& (0+255),c
 13654  00D5CE  0EE0               	movlw	224
 13655  00D5D0                     u15257:
 13656  00D5D0  2EE8               	decfsz	wreg,f,c
 13657  00D5D2  D7FE               	bra	u15257
 13658  00D5D4  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13659  00D5D6  D7FC               	bra	u15257
 13660  00D5D8  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13661  00D5DA  D7FA               	bra	u15257
 13662                           
 13663                           ;operationMode.c: 1084: configDrawer(1);
 13664  00D5DC  0E00               	movlw	0
 13665  00D5DE  6E07               	movwf	configDrawer@direction+1,c
 13666  00D5E0  0E01               	movlw	1
 13667  00D5E2  6E06               	movwf	configDrawer@direction,c
 13668  00D5E4  EC90  F04D         	call	_configDrawer	;wreg free
 13669                           
 13670                           ;operationMode.c: 1085: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13671  00D5E8  0E33               	movlw	51
 13672  00D5EA  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13673  00D5EC  0EBB               	movlw	187
 13674  00D5EE  6E39               	movwf	??_mainOperation& (0+255),c
 13675  00D5F0  0EE0               	movlw	224
 13676  00D5F2                     u15267:
 13677  00D5F2  2EE8               	decfsz	wreg,f,c
 13678  00D5F4  D7FE               	bra	u15267
 13679  00D5F6  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13680  00D5F8  D7FC               	bra	u15267
 13681  00D5FA  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13682  00D5FC  D7FA               	bra	u15267
 13683                           
 13684                           ;operationMode.c: 1086: uartTransmitBlocking(drawerUp, 1);
 13685  00D5FE  0EF9               	movlw	low _drawerUp
 13686  00D600  6E01               	movwf	uartTransmitBlocking@data,c
 13687  00D602  0E00               	movlw	high _drawerUp
 13688  00D604  6E02               	movwf	uartTransmitBlocking@data+1,c
 13689  00D606  0E01               	movlw	1
 13690  00D608  6E03               	movwf	uartTransmitBlocking@numBytes,c
 13691  00D60A  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 13692                           
 13693                           ;operationMode.c: 1087: _delay((unsigned long)((1000)*(40000000/4000.0)));
 13694  00D60E  0E33               	movlw	51
 13695  00D610  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13696  00D612  0EBB               	movlw	187
 13697  00D614  6E39               	movwf	??_mainOperation& (0+255),c
 13698  00D616  0EE0               	movlw	224
 13699  00D618                     u15277:
 13700  00D618  2EE8               	decfsz	wreg,f,c
 13701  00D61A  D7FE               	bra	u15277
 13702  00D61C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13703  00D61E  D7FC               	bra	u15277
 13704  00D620  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13705  00D622  D7FA               	bra	u15277
 13706                           
 13707                           ;operationMode.c: 1089: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13708  00D624  0E01               	movlw	1
 13709  00D626  EC16  F04D         	call	_lcdInst
 13710  00D62A  0EC3               	movlw	195
 13711  00D62C  6E39               	movwf	??_mainOperation& (0+255),c
 13712  00D62E  0ECD               	movlw	205
 13713  00D630                     u15287:
 13714  00D630  2EE8               	decfsz	wreg,f,c
 13715  00D632  D7FE               	bra	u15287
 13716  00D634  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13717  00D636  D7FC               	bra	u15287
 13718  00D638  F000               	nop	
 13719                           
 13720                           ;operationMode.c: 1090: printf("Moving to");
 13721  00D63A  0E52               	movlw	low STR_34
 13722  00D63C  6E0D               	movwf	printf@f,c
 13723  00D63E  0EFF               	movlw	high STR_34
 13724  00D640  6E0E               	movwf	printf@f+1,c
 13725  00D642  EC0C  F061         	call	_printf	;wreg free
 13726                           
 13727                           ;operationMode.c: 1091: lcdInst(0xC0);;
 13728  00D646  0EC0               	movlw	192
 13729  00D648  EC16  F04D         	call	_lcdInst
 13730                           
 13731                           ;operationMode.c: 1092: printf("drawer %i", sortedDrawerTable[i+1]);
 13732  00D64C  0E48               	movlw	low STR_35
 13733  00D64E  6E0D               	movwf	printf@f,c
 13734  00D650  0EFF               	movlw	high STR_35
 13735  00D652  6E0E               	movwf	printf@f+1,c
 13736  00D654  C0CE  F039         	movff	mainOperation@i,??_mainOperation
 13737  00D658  C0CF  F03A         	movff	mainOperation@i+1,??_mainOperation+1
 13738  00D65C  90D8               	bcf	status,0,c
 13739  00D65E  3639               	rlcf	??_mainOperation,f,c
 13740  00D660  363A               	rlcf	??_mainOperation+1,f,c
 13741  00D662  0E02               	movlw	2
 13742  00D664  2639               	addwf	??_mainOperation,f,c
 13743  00D666  0E00               	movlw	0
 13744  00D668  223A               	addwfc	??_mainOperation+1,f,c
 13745  00D66A  0EB2               	movlw	low mainOperation@sortedDrawerTable
 13746  00D66C  2439               	addwf	??_mainOperation,w,c
 13747  00D66E  6ED9               	movwf	fsr2l,c
 13748  00D670  0E00               	movlw	high mainOperation@sortedDrawerTable
 13749  00D672  203A               	addwfc	??_mainOperation+1,w,c
 13750  00D674  6EDA               	movwf	fsr2h,c
 13751  00D676  CFDE F00F          	movff	postinc2,?_printf+2
 13752  00D67A  CFDD F010          	movff	postdec2,?_printf+3
 13753  00D67E  EC0C  F061         	call	_printf	;wreg free
 13754                           
 13755                           ;operationMode.c: 1093: temp = moveVertically(currentDrawer, nextDrawer);
 13756  00D682  C0CA  F00C         	movff	mainOperation@currentDrawer,moveVertically@currentDrawer
 13757  00D686  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveVertically@currentDrawer+1
 13758  00D68A  C0C2  F00E         	movff	mainOperation@nextDrawer,moveVertically@nextDrawer
 13759  00D68E  C0C3  F00F         	movff	mainOperation@nextDrawer+1,moveVertically@nextDrawer+1
 13760  00D692  EC52  F05E         	call	_moveVertically	;wreg free
 13761  00D696  C00C  F0B0         	movff	?_moveVertically,mainOperation@temp
 13762  00D69A  C00D  F0B1         	movff	?_moveVertically+1,mainOperation@temp+1
 13763                           
 13764                           ;operationMode.c: 1094: currentDrawer = temp;
 13765  00D69E  C0B0  F0CA         	movff	mainOperation@temp,mainOperation@currentDrawer
 13766  00D6A2  C0B1  F0CB         	movff	mainOperation@temp+1,mainOperation@currentDrawer+1
 13767                           
 13768                           ;operationMode.c: 1095: moveHorizontally(currentDrawer, nextDrawer);
 13769  00D6A6  C0CA  F00C         	movff	mainOperation@currentDrawer,moveHorizontally@currentDrawer
 13770  00D6AA  C0CB  F00D         	movff	mainOperation@currentDrawer+1,moveHorizontally@currentDrawer+1
 13771  00D6AE  C0C2  F00E         	movff	mainOperation@nextDrawer,moveHorizontally@nextDrawer
 13772  00D6B2  C0C3  F00F         	movff	mainOperation@nextDrawer+1,moveHorizontally@nextDrawer+1
 13773  00D6B6  EC6A  F058         	call	_moveHorizontally	;wreg free
 13774                           
 13775                           ;operationMode.c: 1096: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13776  00D6BA  0E66               	movlw	102
 13777  00D6BC  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13778  00D6BE  0E76               	movlw	118
 13779  00D6C0  6E39               	movwf	??_mainOperation& (0+255),c
 13780  00D6C2  0EC1               	movlw	193
 13781  00D6C4                     u15297:
 13782  00D6C4  2EE8               	decfsz	wreg,f,c
 13783  00D6C6  D7FE               	bra	u15297
 13784  00D6C8  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13785  00D6CA  D7FC               	bra	u15297
 13786  00D6CC  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13787  00D6CE  D7FA               	bra	u15297
 13788  00D6D0  F000               	nop	
 13789  00D6D2                     l653:
 13790  00D6D2  0100               	movlb	0	; () banked
 13791  00D6D4  4BCE               	infsnz	mainOperation@i& (0+255),f,b
 13792  00D6D6  2BCF               	incf	(mainOperation@i+1)& (0+255),f,b
 13793                           
 13794                           ; BSR set to: 0
 13795  00D6D8  51CF               	movf	(mainOperation@i+1)& (0+255),w,b
 13796  00D6DA  E101               	bnz	l10834
 13797  00D6DC  D54F               	goto	L125
 13798  00D6DE                     u14070:
 13799  00D6DE                     l10834:
 13800                           
 13801                           ; BSR set to: 0
 13802                           ;operationMode.c: 1097: }
 13803                           ;operationMode.c: 1098: }
 13804                           ;operationMode.c: 1099: initArm(currentDrawer);
 13805  00D6DE  C0CA  F00C         	movff	mainOperation@currentDrawer,initArm@currentDrawer
 13806  00D6E2  C0CB  F00D         	movff	mainOperation@currentDrawer+1,initArm@currentDrawer+1
 13807  00D6E6  EC21  F05D         	call	_initArm	;wreg free
 13808                           
 13809                           ;operationMode.c: 1100: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13810  00D6EA  0E01               	movlw	1
 13811  00D6EC  EC16  F04D         	call	_lcdInst
 13812  00D6F0  0EC3               	movlw	195
 13813  00D6F2  6E39               	movwf	??_mainOperation& (0+255),c
 13814  00D6F4  0ECD               	movlw	205
 13815  00D6F6                     u15307:
 13816  00D6F6  2EE8               	decfsz	wreg,f,c
 13817  00D6F8  D7FE               	bra	u15307
 13818  00D6FA  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13819  00D6FC  D7FC               	bra	u15307
 13820  00D6FE  F000               	nop	
 13821                           
 13822                           ;operationMode.c: 1101: printf("Initializing");
 13823  00D700  0ECF               	movlw	low STR_41
 13824  00D702  6E0D               	movwf	printf@f,c
 13825  00D704  0EFE               	movlw	high STR_41
 13826  00D706  6E0E               	movwf	printf@f+1,c
 13827  00D708  EC0C  F061         	call	_printf	;wreg free
 13828                           
 13829                           ;operationMode.c: 1102: lcdInst(0xC0);;
 13830  00D70C  0EC0               	movlw	192
 13831  00D70E  EC16  F04D         	call	_lcdInst
 13832                           
 13833                           ;operationMode.c: 1103: printf("Arm");
 13834  00D712  0EF2               	movlw	low STR_42
 13835  00D714  6E0D               	movwf	printf@f,c
 13836  00D716  0EFF               	movlw	high STR_42
 13837  00D718  6E0E               	movwf	printf@f+1,c
 13838  00D71A  EC0C  F061         	call	_printf	;wreg free
 13839                           
 13840                           ;operationMode.c: 1104: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13841  00D71E  0E66               	movlw	102
 13842  00D720  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13843  00D722  0E76               	movlw	118
 13844  00D724  6E39               	movwf	??_mainOperation& (0+255),c
 13845  00D726  0EC1               	movlw	193
 13846  00D728                     u15317:
 13847  00D728  2EE8               	decfsz	wreg,f,c
 13848  00D72A  D7FE               	bra	u15317
 13849  00D72C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13850  00D72E  D7FC               	bra	u15317
 13851  00D730  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13852  00D732  D7FA               	bra	u15317
 13853  00D734  F000               	nop	
 13854                           
 13855                           ;operationMode.c: 1107: trapDoor(1);
 13856  00D736  0E00               	movlw	0
 13857  00D738  6E02               	movwf	trapDoor@direction+1,c
 13858  00D73A  0E01               	movlw	1
 13859  00D73C  6E01               	movwf	trapDoor@direction,c
 13860  00D73E  EC62  F04E         	call	_trapDoor	;wreg free
 13861                           
 13862                           ;operationMode.c: 1108: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13863  00D742  0E01               	movlw	1
 13864  00D744  EC16  F04D         	call	_lcdInst
 13865  00D748  0EC3               	movlw	195
 13866  00D74A  6E39               	movwf	??_mainOperation& (0+255),c
 13867  00D74C  0ECD               	movlw	205
 13868  00D74E                     u15327:
 13869  00D74E  2EE8               	decfsz	wreg,f,c
 13870  00D750  D7FE               	bra	u15327
 13871  00D752  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13872  00D754  D7FC               	bra	u15327
 13873  00D756  F000               	nop	
 13874                           
 13875                           ;operationMode.c: 1109: printf("Distributing to");
 13876  00D758  0E90               	movlw	low STR_43
 13877  00D75A  6E0D               	movwf	printf@f,c
 13878  00D75C  0EFD               	movlw	high STR_43
 13879  00D75E  6E0E               	movwf	printf@f+1,c
 13880  00D760  EC0C  F061         	call	_printf	;wreg free
 13881                           
 13882                           ;operationMode.c: 1110: lcdInst(0xC0);;
 13883  00D764  0EC0               	movlw	192
 13884  00D766  EC16  F04D         	call	_lcdInst
 13885                           
 13886                           ;operationMode.c: 1111: printf("reservoir.");
 13887  00D76A  0E29               	movlw	low STR_44
 13888  00D76C  6E0D               	movwf	printf@f,c
 13889  00D76E  0EFF               	movlw	high STR_44
 13890  00D770  6E0E               	movwf	printf@f+1,c
 13891  00D772  EC0C  F061         	call	_printf	;wreg free
 13892                           
 13893                           ;operationMode.c: 1112: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13894  00D776  0E66               	movlw	102
 13895  00D778  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13896  00D77A  0E76               	movlw	118
 13897  00D77C  6E39               	movwf	??_mainOperation& (0+255),c
 13898  00D77E  0EC1               	movlw	193
 13899  00D780                     u15337:
 13900  00D780  2EE8               	decfsz	wreg,f,c
 13901  00D782  D7FE               	bra	u15337
 13902  00D784  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13903  00D786  D7FC               	bra	u15337
 13904  00D788  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13905  00D78A  D7FA               	bra	u15337
 13906  00D78C  F000               	nop	
 13907                           
 13908                           ;operationMode.c: 1113: trapDoor(0);
 13909  00D78E  0E00               	movlw	0
 13910  00D790  6E02               	movwf	trapDoor@direction+1,c
 13911  00D792  0E00               	movlw	0
 13912  00D794  6E01               	movwf	trapDoor@direction,c
 13913  00D796  EC62  F04E         	call	_trapDoor	;wreg free
 13914  00D79A  0012               	return		;funcret
 13915  00D79C                     __end_of_mainOperation:
 13916                           	opt stack 0
 13917                           tblptru	equ	0xFF8
 13918                           tblptrh	equ	0xFF7
 13919                           tblptrl	equ	0xFF6
 13920                           tablat	equ	0xFF5
 13921                           prodh	equ	0xFF4
 13922                           prodl	equ	0xFF3
 13923                           postinc0	equ	0xFEE
 13924                           wreg	equ	0xFE8
 13925                           postdec1	equ	0xFE5
 13926                           plusw1	equ	0xFE3
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           postdec2	equ	0xFDD
 13931                           plusw2	equ	0xFDB
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _trapDoor *****************
 13937 ;; Defined at:
 13938 ;;		line 990 in file "operationMode.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;  direction       2    0[COMRAM] unsigned int 
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;  i               2    4[COMRAM] unsigned int 
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      void 
 13945 ;; Registers used:
 13946 ;;		wreg, status,2, status,0
 13947 ;; Tracked objects:
 13948 ;;		On entry : 0/0
 13949 ;;		On exit  : 0/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13952 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;Total ram usage:        6 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; This function calls:
 13959 ;;		Nothing
 13960 ;; This function is called by:
 13961 ;;		_mainOperation
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           	psect	text25
 13966  009CC4                     __ptext25:
 13967                           	opt stack 0
 13968  009CC4                     _trapDoor:
 13969                           	opt stack 29
 13970                           
 13971                           ;operationMode.c: 995: unsigned int i = 0;
 13972                           
 13973                           ;incstack = 0
 13974  009CC4  0E00               	movlw	0
 13975  009CC6  6E06               	movwf	trapDoor@i+1,c
 13976  009CC8  0E00               	movlw	0
 13977  009CCA  6E05               	movwf	trapDoor@i,c
 13978                           
 13979                           ;operationMode.c: 998: if (direction == 1){
 13980  009CCC  0401               	decf	trapDoor@direction,w,c
 13981  009CCE  1002               	iorwf	trapDoor@direction+1,w,c
 13982  009CD0  A4D8               	btfss	status,2,c
 13983  009CD2  D00F               	goto	l637
 13984                           
 13985                           ;operationMode.c: 999: LATAbits.LATA4 = 1;
 13986  009CD4  8889               	bsf	3977,4,c	;volatile
 13987                           
 13988                           ;operationMode.c: 1000: LATAbits.LATA5 = 0;
 13989  009CD6  9A89               	bcf	3977,5,c	;volatile
 13990                           
 13991                           ;operationMode.c: 1001: LATEbits.LATE1 = 1;
 13992  009CD8  828D               	bsf	3981,1,c	;volatile
 13993                           
 13994                           ;operationMode.c: 1002: _delay((unsigned long)((500)*(40000000/4000.0)));
 13995  009CDA  0E1A               	movlw	26
 13996  009CDC  6E04               	movwf	(??_trapDoor+1)& (0+255),c
 13997  009CDE  0E5E               	movlw	94
 13998  009CE0  6E03               	movwf	??_trapDoor& (0+255),c
 13999  009CE2  0E6E               	movlw	110
 14000  009CE4                     u15347:
 14001  009CE4  2EE8               	decfsz	wreg,f,c
 14002  009CE6  D7FE               	bra	u15347
 14003  009CE8  2E03               	decfsz	??_trapDoor& (0+255),f,c
 14004  009CEA  D7FC               	bra	u15347
 14005  009CEC  2E04               	decfsz	(??_trapDoor+1)& (0+255),f,c
 14006  009CEE  D7FA               	bra	u15347
 14007  009CF0  D012               	goto	L126
 14008  009CF2                     l637:
 14009                           
 14010                           ;operationMode.c: 1006: else if (direction == 1){
 14011  009CF2  0401               	decf	trapDoor@direction,w,c
 14012  009CF4  1002               	iorwf	trapDoor@direction+1,w,c
 14013  009CF6  A4D8               	btfss	status,2,c
 14014  009CF8  D00F               	goto	l639
 14015                           
 14016                           ;operationMode.c: 1007: LATAbits.LATA4 = 0;
 14017  009CFA  9889               	bcf	3977,4,c	;volatile
 14018                           
 14019                           ;operationMode.c: 1008: LATAbits.LATA5 = 1;
 14020  009CFC  8A89               	bsf	3977,5,c	;volatile
 14021                           
 14022                           ;operationMode.c: 1009: LATEbits.LATE1 = 1;
 14023  009CFE  828D               	bsf	3981,1,c	;volatile
 14024                           
 14025                           ;operationMode.c: 1010: _delay((unsigned long)((500)*(40000000/4000.0)));
 14026  009D00  0E1A               	movlw	26
 14027  009D02  6E04               	movwf	(??_trapDoor+1)& (0+255),c
 14028  009D04  0E5E               	movlw	94
 14029  009D06  6E03               	movwf	??_trapDoor& (0+255),c
 14030  009D08  0E6E               	movlw	110
 14031  009D0A                     u15357:
 14032  009D0A  2EE8               	decfsz	wreg,f,c
 14033  009D0C  D7FE               	bra	u15357
 14034  009D0E  2E03               	decfsz	??_trapDoor& (0+255),f,c
 14035  009D10  D7FC               	bra	u15357
 14036  009D12  2E04               	decfsz	(??_trapDoor+1)& (0+255),f,c
 14037  009D14  D7FA               	bra	u15357
 14038  009D16                     L126:
 14039  009D16  D000               	nop2	
 14040  009D18                     l639:
 14041                           
 14042                           ;operationMode.c: 1011: }
 14043                           ;operationMode.c: 1013: LATAbits.LATA4 = 0;
 14044  009D18  9889               	bcf	3977,4,c	;volatile
 14045                           
 14046                           ;operationMode.c: 1014: LATAbits.LATA5 = 0;
 14047  009D1A  9A89               	bcf	3977,5,c	;volatile
 14048                           
 14049                           ;operationMode.c: 1015: LATEbits.LATE1 = 0;
 14050  009D1C  928D               	bcf	3981,1,c	;volatile
 14051  009D1E  0012               	return		;funcret
 14052  009D20                     __end_of_trapDoor:
 14053                           	opt stack 0
 14054                           tblptru	equ	0xFF8
 14055                           tblptrh	equ	0xFF7
 14056                           tblptrl	equ	0xFF6
 14057                           tablat	equ	0xFF5
 14058                           prodh	equ	0xFF4
 14059                           prodl	equ	0xFF3
 14060                           postinc0	equ	0xFEE
 14061                           wreg	equ	0xFE8
 14062                           postdec1	equ	0xFE5
 14063                           plusw1	equ	0xFE3
 14064                           fsr1l	equ	0xFE1
 14065                           indf2	equ	0xFDF
 14066                           postinc2	equ	0xFDE
 14067                           postdec2	equ	0xFDD
 14068                           plusw2	equ	0xFDB
 14069                           fsr2h	equ	0xFDA
 14070                           fsr2l	equ	0xFD9
 14071                           status	equ	0xFD8
 14072                           
 14073 ;; *************** function _sortDrawerList *****************
 14074 ;; Defined at:
 14075 ;;		line 59 in file "operationMode.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 14078 ;;		 -> mainOperation@drawerTable(16), 
 14079 ;;  sortedDrawer    2    2[COMRAM] PTR unsigned int 
 14080 ;;		 -> mainOperation@sortedDrawerTable(16), 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  sublist3        8   34[COMRAM] unsigned int [4]
 14083 ;;  sublist2        8   26[COMRAM] unsigned int [4]
 14084 ;;  sublist4        8   18[COMRAM] unsigned int [4]
 14085 ;;  sublist1        8   10[COMRAM] unsigned int [4]
 14086 ;;  i               2   54[COMRAM] unsigned int 
 14087 ;;  j               2   52[COMRAM] unsigned int 
 14088 ;;  count3          2   50[COMRAM] unsigned int 
 14089 ;;  count1          2   48[COMRAM] unsigned int 
 14090 ;;  temp            2   46[COMRAM] unsigned int 
 14091 ;;  count2          2   44[COMRAM] unsigned int 
 14092 ;;  count4          2   42[COMRAM] unsigned int 
 14093 ;; Return value:  Size  Location     Type
 14094 ;;                  1    wreg      void 
 14095 ;; Registers used:
 14096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14097 ;; Tracked objects:
 14098 ;;		On entry : 0/0
 14099 ;;		On exit  : 0/0
 14100 ;;		Unchanged: 0/0
 14101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Locals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14106 ;;Total ram usage:       56 bytes
 14107 ;; Hardware stack levels used:    1
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		_mainOperation
 14112 ;; This function uses a non-reentrant model
 14113 ;;
 14114                           
 14115                           	psect	text26
 14116  00E258                     __ptext26:
 14117                           	opt stack 0
 14118  00E258                     _sortDrawerList:
 14119                           	opt stack 29
 14120                           
 14121                           ;operationMode.c: 60: unsigned int i = 0;
 14122                           
 14123                           ;incstack = 0
 14124  00E258  0E00               	movlw	0
 14125  00E25A  6E38               	movwf	sortDrawerList@i+1,c
 14126  00E25C  0E00               	movlw	0
 14127  00E25E  6E37               	movwf	sortDrawerList@i,c
 14128                           
 14129                           ;operationMode.c: 61: unsigned int j = 0;
 14130  00E260  0E00               	movlw	0
 14131  00E262  6E36               	movwf	sortDrawerList@j+1,c
 14132  00E264  0E00               	movlw	0
 14133  00E266  6E35               	movwf	sortDrawerList@j,c
 14134                           
 14135                           ;operationMode.c: 62: unsigned int sublist1[] = {0,0,0,0};
 14136  00E268  EE20  F0F0         	lfsr	2,sortDrawerList@F3094
 14137  00E26C  EE10  F00B         	lfsr	1,sortDrawerList@sublist1
 14138  00E270  0E07               	movlw	7
 14139  00E272                     u9151:
 14140  00E272  CFDB FFE3          	movff	plusw2,plusw1
 14141  00E276  06E8               	decf	wreg,f,c
 14142  00E278  E2FC               	bc	u9151
 14143                           
 14144                           ;operationMode.c: 63: unsigned int count1 = 0;
 14145  00E27A  0E00               	movlw	0
 14146  00E27C  6E32               	movwf	sortDrawerList@count1+1,c
 14147  00E27E  0E00               	movlw	0
 14148  00E280  6E31               	movwf	sortDrawerList@count1,c
 14149                           
 14150                           ;operationMode.c: 64: unsigned int sublist2[] = {0,0,0,0};
 14151  00E282  EE20  F0E8         	lfsr	2,sortDrawerList@F3097
 14152  00E286  EE10  F01B         	lfsr	1,sortDrawerList@sublist2
 14153  00E28A  0E07               	movlw	7
 14154  00E28C                     u9161:
 14155  00E28C  CFDB FFE3          	movff	plusw2,plusw1
 14156  00E290  06E8               	decf	wreg,f,c
 14157  00E292  E2FC               	bc	u9161
 14158                           
 14159                           ;operationMode.c: 65: unsigned int count2 = 0;
 14160  00E294  0E00               	movlw	0
 14161  00E296  6E2E               	movwf	sortDrawerList@count2+1,c
 14162  00E298  0E00               	movlw	0
 14163  00E29A  6E2D               	movwf	sortDrawerList@count2,c
 14164                           
 14165                           ;operationMode.c: 66: unsigned int sublist3[] = {0,0,0,0};
 14166  00E29C  EE20  F0E0         	lfsr	2,sortDrawerList@F3100
 14167  00E2A0  EE10  F023         	lfsr	1,sortDrawerList@sublist3
 14168  00E2A4  0E07               	movlw	7
 14169  00E2A6                     u9171:
 14170  00E2A6  CFDB FFE3          	movff	plusw2,plusw1
 14171  00E2AA  06E8               	decf	wreg,f,c
 14172  00E2AC  E2FC               	bc	u9171
 14173                           
 14174                           ;operationMode.c: 67: unsigned int count3 = 0;
 14175  00E2AE  0E00               	movlw	0
 14176  00E2B0  6E34               	movwf	sortDrawerList@count3+1,c
 14177  00E2B2  0E00               	movlw	0
 14178  00E2B4  6E33               	movwf	sortDrawerList@count3,c
 14179                           
 14180                           ;operationMode.c: 68: unsigned int sublist4[] = {0,0,0,0};
 14181  00E2B6  EE20  F0D8         	lfsr	2,sortDrawerList@F3103
 14182  00E2BA  EE10  F013         	lfsr	1,sortDrawerList@sublist4
 14183  00E2BE  0E07               	movlw	7
 14184  00E2C0                     u9181:
 14185  00E2C0  CFDB FFE3          	movff	plusw2,plusw1
 14186  00E2C4  06E8               	decf	wreg,f,c
 14187  00E2C6  E2FC               	bc	u9181
 14188                           
 14189                           ;operationMode.c: 69: unsigned int count4 = 0;
 14190  00E2C8  0E00               	movlw	0
 14191  00E2CA  6E2C               	movwf	sortDrawerList@count4+1,c
 14192  00E2CC  0E00               	movlw	0
 14193  00E2CE  6E2B               	movwf	sortDrawerList@count4,c
 14194                           
 14195                           ;operationMode.c: 70: unsigned int temp;
 14196                           ;operationMode.c: 72: for (i=0; i<8; i++){
 14197  00E2D0  0E00               	movlw	0
 14198  00E2D2  6E38               	movwf	sortDrawerList@i+1,c
 14199  00E2D4  0E00               	movlw	0
 14200  00E2D6  6E37               	movwf	sortDrawerList@i,c
 14201  00E2D8                     l7954:
 14202  00E2D8  5038               	movf	sortDrawerList@i+1,w,c
 14203  00E2DA  E11D               	bnz	l7964
 14204  00E2DC  0E08               	movlw	8
 14205  00E2DE  5C37               	subwf	sortDrawerList@i,w,c
 14206  00E2E0  B0D8               	btfsc	status,0,c
 14207  00E2E2  D019               	goto	u9200
 14208                           
 14209                           ;operationMode.c: 73: sortedDrawerTable[i] = drawerTable[i];
 14210  00E2E4  90D8               	bcf	status,0,c
 14211  00E2E6  3437               	rlcf	sortDrawerList@i,w,c
 14212  00E2E8  6ED9               	movwf	fsr2l,c
 14213  00E2EA  3438               	rlcf	sortDrawerList@i+1,w,c
 14214  00E2EC  6EDA               	movwf	fsr2h,c
 14215  00E2EE  5001               	movf	sortDrawerList@drawerTable,w,c
 14216  00E2F0  26D9               	addwf	fsr2l,f,c
 14217  00E2F2  5002               	movf	sortDrawerList@drawerTable+1,w,c
 14218  00E2F4  22DA               	addwfc	fsr2h,f,c
 14219  00E2F6  90D8               	bcf	status,0,c
 14220  00E2F8  3437               	rlcf	sortDrawerList@i,w,c
 14221  00E2FA  6EE1               	movwf	fsr1l,c
 14222  00E2FC  3438               	rlcf	sortDrawerList@i+1,w,c
 14223  00E2FE  6EE2               	movwf	fsr1h,c
 14224  00E300  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14225  00E302  26E1               	addwf	fsr1l,f,c
 14226  00E304  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14227  00E306  22E2               	addwfc	fsr1h,f,c
 14228  00E308  CFDE FFE6          	movff	postinc2,postinc1
 14229  00E30C  CFDD FFE5          	movff	postdec2,postdec1
 14230  00E310  4A37               	infsnz	sortDrawerList@i,f,c
 14231  00E312  2A38               	incf	sortDrawerList@i+1,f,c
 14232  00E314  D7E1               	goto	l7954
 14233  00E316                     u9200:
 14234  00E316                     l7964:
 14235                           
 14236                           ;operationMode.c: 74: }
 14237                           ;operationMode.c: 76: for(i=0; i<8; i++){
 14238  00E316  0E00               	movlw	0
 14239  00E318  6E38               	movwf	sortDrawerList@i+1,c
 14240  00E31A  0E00               	movlw	0
 14241  00E31C  6E37               	movwf	sortDrawerList@i,c
 14242  00E31E  5038               	movf	sortDrawerList@i+1,w,c
 14243  00E320  E105               	bnz	u9210
 14244  00E322  0E08               	movlw	8
 14245  00E324  5C37               	subwf	sortDrawerList@i,w,c
 14246  00E326  B0D8               	btfsc	status,0,c
 14247  00E328  D149               	goto	u9380
 14248  00E32A  D001               	goto	l163
 14249  00E32C                     u9210:
 14250  00E32C  D147               	goto	u9380
 14251  00E32E                     l163:
 14252                           
 14253                           ;operationMode.c: 77: if (sortedDrawerTable[i] == 1 || sortedDrawerTable[i] == 2 || sort
      +                          edDrawerTable[i] == 3 || sortedDrawerTable[i] == 4){
 14254  00E32E  90D8               	bcf	status,0,c
 14255  00E330  3437               	rlcf	sortDrawerList@i,w,c
 14256  00E332  6ED9               	movwf	fsr2l,c
 14257  00E334  3438               	rlcf	sortDrawerList@i+1,w,c
 14258  00E336  6EDA               	movwf	fsr2h,c
 14259  00E338  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14260  00E33A  26D9               	addwf	fsr2l,f,c
 14261  00E33C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14262  00E33E  22DA               	addwfc	fsr2h,f,c
 14263  00E340  04DE               	decf	postinc2,w,c
 14264  00E342  10DE               	iorwf	postinc2,w,c
 14265  00E344  B4D8               	btfsc	status,2,c
 14266  00E346  D02A               	goto	u9250
 14267  00E348  90D8               	bcf	status,0,c
 14268  00E34A  3437               	rlcf	sortDrawerList@i,w,c
 14269  00E34C  6ED9               	movwf	fsr2l,c
 14270  00E34E  3438               	rlcf	sortDrawerList@i+1,w,c
 14271  00E350  6EDA               	movwf	fsr2h,c
 14272  00E352  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14273  00E354  26D9               	addwf	fsr2l,f,c
 14274  00E356  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14275  00E358  22DA               	addwfc	fsr2h,f,c
 14276  00E35A  0E02               	movlw	2
 14277  00E35C  18DE               	xorwf	postinc2,w,c
 14278  00E35E  10DE               	iorwf	postinc2,w,c
 14279  00E360  B4D8               	btfsc	status,2,c
 14280  00E362  D01C               	goto	u9250
 14281  00E364  90D8               	bcf	status,0,c
 14282  00E366  3437               	rlcf	sortDrawerList@i,w,c
 14283  00E368  6ED9               	movwf	fsr2l,c
 14284  00E36A  3438               	rlcf	sortDrawerList@i+1,w,c
 14285  00E36C  6EDA               	movwf	fsr2h,c
 14286  00E36E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14287  00E370  26D9               	addwf	fsr2l,f,c
 14288  00E372  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14289  00E374  22DA               	addwfc	fsr2h,f,c
 14290  00E376  0E03               	movlw	3
 14291  00E378  18DE               	xorwf	postinc2,w,c
 14292  00E37A  10DE               	iorwf	postinc2,w,c
 14293  00E37C  B4D8               	btfsc	status,2,c
 14294  00E37E  D00E               	goto	u9250
 14295  00E380  90D8               	bcf	status,0,c
 14296  00E382  3437               	rlcf	sortDrawerList@i,w,c
 14297  00E384  6ED9               	movwf	fsr2l,c
 14298  00E386  3438               	rlcf	sortDrawerList@i+1,w,c
 14299  00E388  6EDA               	movwf	fsr2h,c
 14300  00E38A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14301  00E38C  26D9               	addwf	fsr2l,f,c
 14302  00E38E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14303  00E390  22DA               	addwfc	fsr2h,f,c
 14304  00E392  0E04               	movlw	4
 14305  00E394  18DE               	xorwf	postinc2,w,c
 14306  00E396  10DE               	iorwf	postinc2,w,c
 14307  00E398  A4D8               	btfss	status,2,c
 14308  00E39A  D019               	goto	l165
 14309  00E39C                     u9250:
 14310                           
 14311                           ;operationMode.c: 78: sublist1[count1]=sortedDrawerTable[i];
 14312  00E39C  90D8               	bcf	status,0,c
 14313  00E39E  3437               	rlcf	sortDrawerList@i,w,c
 14314  00E3A0  6ED9               	movwf	fsr2l,c
 14315  00E3A2  3438               	rlcf	sortDrawerList@i+1,w,c
 14316  00E3A4  6EDA               	movwf	fsr2h,c
 14317  00E3A6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14318  00E3A8  26D9               	addwf	fsr2l,f,c
 14319  00E3AA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14320  00E3AC  22DA               	addwfc	fsr2h,f,c
 14321  00E3AE  90D8               	bcf	status,0,c
 14322  00E3B0  3431               	rlcf	sortDrawerList@count1,w,c
 14323  00E3B2  6EE1               	movwf	fsr1l,c
 14324  00E3B4  3432               	rlcf	sortDrawerList@count1+1,w,c
 14325  00E3B6  6EE2               	movwf	fsr1h,c
 14326  00E3B8  0E0B               	movlw	low sortDrawerList@sublist1
 14327  00E3BA  26E1               	addwf	fsr1l,f,c
 14328  00E3BC  0E00               	movlw	high sortDrawerList@sublist1
 14329  00E3BE  22E2               	addwfc	fsr1h,f,c
 14330  00E3C0  CFDE FFE6          	movff	postinc2,postinc1
 14331  00E3C4  CFDD FFE5          	movff	postdec2,postdec1
 14332                           
 14333                           ;operationMode.c: 79: count1 += 1;
 14334  00E3C8  4A31               	infsnz	sortDrawerList@count1,f,c
 14335  00E3CA  2A32               	incf	sortDrawerList@count1+1,f,c
 14336                           
 14337                           ;operationMode.c: 80: }
 14338  00E3CC  D0F2               	goto	l177
 14339  00E3CE                     l165:
 14340                           
 14341                           ;operationMode.c: 81: else if (sortedDrawerTable[i] == 5 || sortedDrawerTable[i] == 6 ||
      +                           sortedDrawerTable[i] == 7 || sortedDrawerTable[i] == 8){
 14342  00E3CE  90D8               	bcf	status,0,c
 14343  00E3D0  3437               	rlcf	sortDrawerList@i,w,c
 14344  00E3D2  6ED9               	movwf	fsr2l,c
 14345  00E3D4  3438               	rlcf	sortDrawerList@i+1,w,c
 14346  00E3D6  6EDA               	movwf	fsr2h,c
 14347  00E3D8  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14348  00E3DA  26D9               	addwf	fsr2l,f,c
 14349  00E3DC  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14350  00E3DE  22DA               	addwfc	fsr2h,f,c
 14351  00E3E0  0E05               	movlw	5
 14352  00E3E2  18DE               	xorwf	postinc2,w,c
 14353  00E3E4  10DE               	iorwf	postinc2,w,c
 14354  00E3E6  B4D8               	btfsc	status,2,c
 14355  00E3E8  D02A               	goto	u9290
 14356  00E3EA  90D8               	bcf	status,0,c
 14357  00E3EC  3437               	rlcf	sortDrawerList@i,w,c
 14358  00E3EE  6ED9               	movwf	fsr2l,c
 14359  00E3F0  3438               	rlcf	sortDrawerList@i+1,w,c
 14360  00E3F2  6EDA               	movwf	fsr2h,c
 14361  00E3F4  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14362  00E3F6  26D9               	addwf	fsr2l,f,c
 14363  00E3F8  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14364  00E3FA  22DA               	addwfc	fsr2h,f,c
 14365  00E3FC  0E06               	movlw	6
 14366  00E3FE  18DE               	xorwf	postinc2,w,c
 14367  00E400  10DE               	iorwf	postinc2,w,c
 14368  00E402  B4D8               	btfsc	status,2,c
 14369  00E404  D01C               	goto	u9290
 14370  00E406  90D8               	bcf	status,0,c
 14371  00E408  3437               	rlcf	sortDrawerList@i,w,c
 14372  00E40A  6ED9               	movwf	fsr2l,c
 14373  00E40C  3438               	rlcf	sortDrawerList@i+1,w,c
 14374  00E40E  6EDA               	movwf	fsr2h,c
 14375  00E410  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14376  00E412  26D9               	addwf	fsr2l,f,c
 14377  00E414  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14378  00E416  22DA               	addwfc	fsr2h,f,c
 14379  00E418  0E07               	movlw	7
 14380  00E41A  18DE               	xorwf	postinc2,w,c
 14381  00E41C  10DE               	iorwf	postinc2,w,c
 14382  00E41E  B4D8               	btfsc	status,2,c
 14383  00E420  D00E               	goto	u9290
 14384  00E422  90D8               	bcf	status,0,c
 14385  00E424  3437               	rlcf	sortDrawerList@i,w,c
 14386  00E426  6ED9               	movwf	fsr2l,c
 14387  00E428  3438               	rlcf	sortDrawerList@i+1,w,c
 14388  00E42A  6EDA               	movwf	fsr2h,c
 14389  00E42C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14390  00E42E  26D9               	addwf	fsr2l,f,c
 14391  00E430  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14392  00E432  22DA               	addwfc	fsr2h,f,c
 14393  00E434  0E08               	movlw	8
 14394  00E436  18DE               	xorwf	postinc2,w,c
 14395  00E438  10DE               	iorwf	postinc2,w,c
 14396  00E43A  A4D8               	btfss	status,2,c
 14397  00E43C  D019               	goto	l169
 14398  00E43E                     u9290:
 14399                           
 14400                           ;operationMode.c: 82: sublist2[count2]=sortedDrawerTable[i];
 14401  00E43E  90D8               	bcf	status,0,c
 14402  00E440  3437               	rlcf	sortDrawerList@i,w,c
 14403  00E442  6ED9               	movwf	fsr2l,c
 14404  00E444  3438               	rlcf	sortDrawerList@i+1,w,c
 14405  00E446  6EDA               	movwf	fsr2h,c
 14406  00E448  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14407  00E44A  26D9               	addwf	fsr2l,f,c
 14408  00E44C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14409  00E44E  22DA               	addwfc	fsr2h,f,c
 14410  00E450  90D8               	bcf	status,0,c
 14411  00E452  342D               	rlcf	sortDrawerList@count2,w,c
 14412  00E454  6EE1               	movwf	fsr1l,c
 14413  00E456  342E               	rlcf	sortDrawerList@count2+1,w,c
 14414  00E458  6EE2               	movwf	fsr1h,c
 14415  00E45A  0E1B               	movlw	low sortDrawerList@sublist2
 14416  00E45C  26E1               	addwf	fsr1l,f,c
 14417  00E45E  0E00               	movlw	high sortDrawerList@sublist2
 14418  00E460  22E2               	addwfc	fsr1h,f,c
 14419  00E462  CFDE FFE6          	movff	postinc2,postinc1
 14420  00E466  CFDD FFE5          	movff	postdec2,postdec1
 14421                           
 14422                           ;operationMode.c: 83: count2 += 1;
 14423  00E46A  4A2D               	infsnz	sortDrawerList@count2,f,c
 14424  00E46C  2A2E               	incf	sortDrawerList@count2+1,f,c
 14425                           
 14426                           ;operationMode.c: 84: }
 14427  00E46E  D0A1               	goto	l177
 14428  00E470                     l169:
 14429                           
 14430                           ;operationMode.c: 85: else if (sortedDrawerTable[i] == 9 || sortedDrawerTable[i] == 10 |
      +                          | sortedDrawerTable[i] == 11 || sortedDrawerTable[i] == 12){
 14431  00E470  90D8               	bcf	status,0,c
 14432  00E472  3437               	rlcf	sortDrawerList@i,w,c
 14433  00E474  6ED9               	movwf	fsr2l,c
 14434  00E476  3438               	rlcf	sortDrawerList@i+1,w,c
 14435  00E478  6EDA               	movwf	fsr2h,c
 14436  00E47A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14437  00E47C  26D9               	addwf	fsr2l,f,c
 14438  00E47E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14439  00E480  22DA               	addwfc	fsr2h,f,c
 14440  00E482  0E09               	movlw	9
 14441  00E484  18DE               	xorwf	postinc2,w,c
 14442  00E486  10DE               	iorwf	postinc2,w,c
 14443  00E488  B4D8               	btfsc	status,2,c
 14444  00E48A  D02A               	goto	u9330
 14445  00E48C  90D8               	bcf	status,0,c
 14446  00E48E  3437               	rlcf	sortDrawerList@i,w,c
 14447  00E490  6ED9               	movwf	fsr2l,c
 14448  00E492  3438               	rlcf	sortDrawerList@i+1,w,c
 14449  00E494  6EDA               	movwf	fsr2h,c
 14450  00E496  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14451  00E498  26D9               	addwf	fsr2l,f,c
 14452  00E49A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14453  00E49C  22DA               	addwfc	fsr2h,f,c
 14454  00E49E  0E0A               	movlw	10
 14455  00E4A0  18DE               	xorwf	postinc2,w,c
 14456  00E4A2  10DE               	iorwf	postinc2,w,c
 14457  00E4A4  B4D8               	btfsc	status,2,c
 14458  00E4A6  D01C               	goto	u9330
 14459  00E4A8  90D8               	bcf	status,0,c
 14460  00E4AA  3437               	rlcf	sortDrawerList@i,w,c
 14461  00E4AC  6ED9               	movwf	fsr2l,c
 14462  00E4AE  3438               	rlcf	sortDrawerList@i+1,w,c
 14463  00E4B0  6EDA               	movwf	fsr2h,c
 14464  00E4B2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14465  00E4B4  26D9               	addwf	fsr2l,f,c
 14466  00E4B6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14467  00E4B8  22DA               	addwfc	fsr2h,f,c
 14468  00E4BA  0E0B               	movlw	11
 14469  00E4BC  18DE               	xorwf	postinc2,w,c
 14470  00E4BE  10DE               	iorwf	postinc2,w,c
 14471  00E4C0  B4D8               	btfsc	status,2,c
 14472  00E4C2  D00E               	goto	u9330
 14473  00E4C4  90D8               	bcf	status,0,c
 14474  00E4C6  3437               	rlcf	sortDrawerList@i,w,c
 14475  00E4C8  6ED9               	movwf	fsr2l,c
 14476  00E4CA  3438               	rlcf	sortDrawerList@i+1,w,c
 14477  00E4CC  6EDA               	movwf	fsr2h,c
 14478  00E4CE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14479  00E4D0  26D9               	addwf	fsr2l,f,c
 14480  00E4D2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14481  00E4D4  22DA               	addwfc	fsr2h,f,c
 14482  00E4D6  0E0C               	movlw	12
 14483  00E4D8  18DE               	xorwf	postinc2,w,c
 14484  00E4DA  10DE               	iorwf	postinc2,w,c
 14485  00E4DC  A4D8               	btfss	status,2,c
 14486  00E4DE  D019               	goto	l173
 14487  00E4E0                     u9330:
 14488                           
 14489                           ;operationMode.c: 86: sublist3[count3]=sortedDrawerTable[i];
 14490  00E4E0  90D8               	bcf	status,0,c
 14491  00E4E2  3437               	rlcf	sortDrawerList@i,w,c
 14492  00E4E4  6ED9               	movwf	fsr2l,c
 14493  00E4E6  3438               	rlcf	sortDrawerList@i+1,w,c
 14494  00E4E8  6EDA               	movwf	fsr2h,c
 14495  00E4EA  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14496  00E4EC  26D9               	addwf	fsr2l,f,c
 14497  00E4EE  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14498  00E4F0  22DA               	addwfc	fsr2h,f,c
 14499  00E4F2  90D8               	bcf	status,0,c
 14500  00E4F4  3433               	rlcf	sortDrawerList@count3,w,c
 14501  00E4F6  6EE1               	movwf	fsr1l,c
 14502  00E4F8  3434               	rlcf	sortDrawerList@count3+1,w,c
 14503  00E4FA  6EE2               	movwf	fsr1h,c
 14504  00E4FC  0E23               	movlw	low sortDrawerList@sublist3
 14505  00E4FE  26E1               	addwf	fsr1l,f,c
 14506  00E500  0E00               	movlw	high sortDrawerList@sublist3
 14507  00E502  22E2               	addwfc	fsr1h,f,c
 14508  00E504  CFDE FFE6          	movff	postinc2,postinc1
 14509  00E508  CFDD FFE5          	movff	postdec2,postdec1
 14510                           
 14511                           ;operationMode.c: 87: count3 += 1;
 14512  00E50C  4A33               	infsnz	sortDrawerList@count3,f,c
 14513  00E50E  2A34               	incf	sortDrawerList@count3+1,f,c
 14514                           
 14515                           ;operationMode.c: 88: }
 14516  00E510  D050               	goto	l177
 14517  00E512                     l173:
 14518                           
 14519                           ;operationMode.c: 89: else if (sortedDrawerTable[i] == 13 || sortedDrawerTable[i] == 14 
      +                          || sortedDrawerTable[i] == 15 || sortedDrawerTable[i] == 16){
 14520  00E512  90D8               	bcf	status,0,c
 14521  00E514  3437               	rlcf	sortDrawerList@i,w,c
 14522  00E516  6ED9               	movwf	fsr2l,c
 14523  00E518  3438               	rlcf	sortDrawerList@i+1,w,c
 14524  00E51A  6EDA               	movwf	fsr2h,c
 14525  00E51C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14526  00E51E  26D9               	addwf	fsr2l,f,c
 14527  00E520  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14528  00E522  22DA               	addwfc	fsr2h,f,c
 14529  00E524  0E0D               	movlw	13
 14530  00E526  18DE               	xorwf	postinc2,w,c
 14531  00E528  10DE               	iorwf	postinc2,w,c
 14532  00E52A  B4D8               	btfsc	status,2,c
 14533  00E52C  D02A               	goto	u9370
 14534  00E52E  90D8               	bcf	status,0,c
 14535  00E530  3437               	rlcf	sortDrawerList@i,w,c
 14536  00E532  6ED9               	movwf	fsr2l,c
 14537  00E534  3438               	rlcf	sortDrawerList@i+1,w,c
 14538  00E536  6EDA               	movwf	fsr2h,c
 14539  00E538  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14540  00E53A  26D9               	addwf	fsr2l,f,c
 14541  00E53C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14542  00E53E  22DA               	addwfc	fsr2h,f,c
 14543  00E540  0E0E               	movlw	14
 14544  00E542  18DE               	xorwf	postinc2,w,c
 14545  00E544  10DE               	iorwf	postinc2,w,c
 14546  00E546  B4D8               	btfsc	status,2,c
 14547  00E548  D01C               	goto	u9370
 14548  00E54A  90D8               	bcf	status,0,c
 14549  00E54C  3437               	rlcf	sortDrawerList@i,w,c
 14550  00E54E  6ED9               	movwf	fsr2l,c
 14551  00E550  3438               	rlcf	sortDrawerList@i+1,w,c
 14552  00E552  6EDA               	movwf	fsr2h,c
 14553  00E554  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14554  00E556  26D9               	addwf	fsr2l,f,c
 14555  00E558  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14556  00E55A  22DA               	addwfc	fsr2h,f,c
 14557  00E55C  0E0F               	movlw	15
 14558  00E55E  18DE               	xorwf	postinc2,w,c
 14559  00E560  10DE               	iorwf	postinc2,w,c
 14560  00E562  B4D8               	btfsc	status,2,c
 14561  00E564  D00E               	goto	u9370
 14562  00E566  90D8               	bcf	status,0,c
 14563  00E568  3437               	rlcf	sortDrawerList@i,w,c
 14564  00E56A  6ED9               	movwf	fsr2l,c
 14565  00E56C  3438               	rlcf	sortDrawerList@i+1,w,c
 14566  00E56E  6EDA               	movwf	fsr2h,c
 14567  00E570  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14568  00E572  26D9               	addwf	fsr2l,f,c
 14569  00E574  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14570  00E576  22DA               	addwfc	fsr2h,f,c
 14571  00E578  0E10               	movlw	16
 14572  00E57A  18DE               	xorwf	postinc2,w,c
 14573  00E57C  10DE               	iorwf	postinc2,w,c
 14574  00E57E  A4D8               	btfss	status,2,c
 14575  00E580  D018               	goto	l177
 14576  00E582                     u9370:
 14577                           
 14578                           ;operationMode.c: 90: sublist4[count4]=sortedDrawerTable[i];
 14579  00E582  90D8               	bcf	status,0,c
 14580  00E584  3437               	rlcf	sortDrawerList@i,w,c
 14581  00E586  6ED9               	movwf	fsr2l,c
 14582  00E588  3438               	rlcf	sortDrawerList@i+1,w,c
 14583  00E58A  6EDA               	movwf	fsr2h,c
 14584  00E58C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14585  00E58E  26D9               	addwf	fsr2l,f,c
 14586  00E590  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14587  00E592  22DA               	addwfc	fsr2h,f,c
 14588  00E594  90D8               	bcf	status,0,c
 14589  00E596  342B               	rlcf	sortDrawerList@count4,w,c
 14590  00E598  6EE1               	movwf	fsr1l,c
 14591  00E59A  342C               	rlcf	sortDrawerList@count4+1,w,c
 14592  00E59C  6EE2               	movwf	fsr1h,c
 14593  00E59E  0E13               	movlw	low sortDrawerList@sublist4
 14594  00E5A0  26E1               	addwf	fsr1l,f,c
 14595  00E5A2  0E00               	movlw	high sortDrawerList@sublist4
 14596  00E5A4  22E2               	addwfc	fsr1h,f,c
 14597  00E5A6  CFDE FFE6          	movff	postinc2,postinc1
 14598  00E5AA  CFDD FFE5          	movff	postdec2,postdec1
 14599                           
 14600                           ;operationMode.c: 91: count4 += 1;
 14601  00E5AE  4A2B               	infsnz	sortDrawerList@count4,f,c
 14602  00E5B0  2A2C               	incf	sortDrawerList@count4+1,f,c
 14603  00E5B2                     l177:
 14604  00E5B2  4A37               	infsnz	sortDrawerList@i,f,c
 14605  00E5B4  2A38               	incf	sortDrawerList@i+1,f,c
 14606  00E5B6  5038               	movf	sortDrawerList@i+1,w,c
 14607  00E5B8  E101               	bnz	l8022
 14608  00E5BA  D6B3               	goto	L127
 14609  00E5BC                     u9380:
 14610  00E5BC                     l8022:
 14611                           
 14612                           ;operationMode.c: 92: }
 14613                           ;operationMode.c: 93: }
 14614                           ;operationMode.c: 95: for (i=0; i<count1; i++){
 14615  00E5BC  0E00               	movlw	0
 14616  00E5BE  6E38               	movwf	sortDrawerList@i+1,c
 14617  00E5C0  0E00               	movlw	0
 14618  00E5C2  6E37               	movwf	sortDrawerList@i,c
 14619  00E5C4  D057               	goto	l180
 14620  00E5C6                     
 14621                           ;operationMode.c: 96: for (j=0; j<count1; j++){
 14622  00E5C6  0E00               	movlw	0
 14623  00E5C8  6E36               	movwf	sortDrawerList@j+1,c
 14624  00E5CA  0E00               	movlw	0
 14625  00E5CC  6E35               	movwf	sortDrawerList@j,c
 14626  00E5CE  D04A               	goto	l182
 14627  00E5D0                     
 14628                           ;operationMode.c: 97: if (sublist1[j] > sublist1[i]){
 14629  00E5D0  90D8               	bcf	status,0,c
 14630  00E5D2  3435               	rlcf	sortDrawerList@j,w,c
 14631  00E5D4  6ED9               	movwf	fsr2l,c
 14632  00E5D6  3436               	rlcf	sortDrawerList@j+1,w,c
 14633  00E5D8  6EDA               	movwf	fsr2h,c
 14634  00E5DA  0E0B               	movlw	low sortDrawerList@sublist1
 14635  00E5DC  26D9               	addwf	fsr2l,f,c
 14636  00E5DE  0E00               	movlw	high sortDrawerList@sublist1
 14637  00E5E0  22DA               	addwfc	fsr2h,f,c
 14638  00E5E2  90D8               	bcf	status,0,c
 14639  00E5E4  3437               	rlcf	sortDrawerList@i,w,c
 14640  00E5E6  6EE1               	movwf	fsr1l,c
 14641  00E5E8  3438               	rlcf	sortDrawerList@i+1,w,c
 14642  00E5EA  6EE2               	movwf	fsr1h,c
 14643  00E5EC  0E0B               	movlw	low sortDrawerList@sublist1
 14644  00E5EE  26E1               	addwf	fsr1l,f,c
 14645  00E5F0  0E00               	movlw	high sortDrawerList@sublist1
 14646  00E5F2  22E2               	addwfc	fsr1h,f,c
 14647  00E5F4  50DE               	movf	postinc2,w,c
 14648  00E5F6  5CE6               	subwf	postinc1,w,c
 14649  00E5F8  50DE               	movf	postinc2,w,c
 14650  00E5FA  58E6               	subwfb	postinc1,w,c
 14651  00E5FC  B0D8               	btfsc	status,0,c
 14652  00E5FE  D030               	goto	l184
 14653                           
 14654                           ;operationMode.c: 98: temp = sublist1[i];
 14655  00E600  90D8               	bcf	status,0,c
 14656  00E602  3437               	rlcf	sortDrawerList@i,w,c
 14657  00E604  6ED9               	movwf	fsr2l,c
 14658  00E606  3438               	rlcf	sortDrawerList@i+1,w,c
 14659  00E608  6EDA               	movwf	fsr2h,c
 14660  00E60A  0E0B               	movlw	low sortDrawerList@sublist1
 14661  00E60C  26D9               	addwf	fsr2l,f,c
 14662  00E60E  0E00               	movlw	high sortDrawerList@sublist1
 14663  00E610  22DA               	addwfc	fsr2h,f,c
 14664  00E612  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14665  00E616  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14666                           
 14667                           ;operationMode.c: 99: sublist1[i] = sublist1[j];
 14668  00E61A  90D8               	bcf	status,0,c
 14669  00E61C  3435               	rlcf	sortDrawerList@j,w,c
 14670  00E61E  6ED9               	movwf	fsr2l,c
 14671  00E620  3436               	rlcf	sortDrawerList@j+1,w,c
 14672  00E622  6EDA               	movwf	fsr2h,c
 14673  00E624  0E0B               	movlw	low sortDrawerList@sublist1
 14674  00E626  26D9               	addwf	fsr2l,f,c
 14675  00E628  0E00               	movlw	high sortDrawerList@sublist1
 14676  00E62A  22DA               	addwfc	fsr2h,f,c
 14677  00E62C  90D8               	bcf	status,0,c
 14678  00E62E  3437               	rlcf	sortDrawerList@i,w,c
 14679  00E630  6EE1               	movwf	fsr1l,c
 14680  00E632  3438               	rlcf	sortDrawerList@i+1,w,c
 14681  00E634  6EE2               	movwf	fsr1h,c
 14682  00E636  0E0B               	movlw	low sortDrawerList@sublist1
 14683  00E638  26E1               	addwf	fsr1l,f,c
 14684  00E63A  0E00               	movlw	high sortDrawerList@sublist1
 14685  00E63C  22E2               	addwfc	fsr1h,f,c
 14686  00E63E  CFDE FFE6          	movff	postinc2,postinc1
 14687  00E642  CFDD FFE5          	movff	postdec2,postdec1
 14688                           
 14689                           ;operationMode.c: 100: sublist1[j] = temp;
 14690  00E646  90D8               	bcf	status,0,c
 14691  00E648  3435               	rlcf	sortDrawerList@j,w,c
 14692  00E64A  6ED9               	movwf	fsr2l,c
 14693  00E64C  3436               	rlcf	sortDrawerList@j+1,w,c
 14694  00E64E  6EDA               	movwf	fsr2h,c
 14695  00E650  0E0B               	movlw	low sortDrawerList@sublist1
 14696  00E652  26D9               	addwf	fsr2l,f,c
 14697  00E654  0E00               	movlw	high sortDrawerList@sublist1
 14698  00E656  22DA               	addwfc	fsr2h,f,c
 14699  00E658  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14700  00E65C  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14701  00E660                     l184:
 14702  00E660  4A35               	infsnz	sortDrawerList@j,f,c
 14703  00E662  2A36               	incf	sortDrawerList@j+1,f,c
 14704  00E664                     l182:
 14705  00E664  5031               	movf	sortDrawerList@count1,w,c
 14706  00E666  5C35               	subwf	sortDrawerList@j,w,c
 14707  00E668  5032               	movf	sortDrawerList@count1+1,w,c
 14708  00E66A  5836               	subwfb	sortDrawerList@j+1,w,c
 14709  00E66C  A0D8               	btfss	status,0,c
 14710  00E66E  D7B0               	goto	l183
 14711  00E670  4A37               	infsnz	sortDrawerList@i,f,c
 14712  00E672  2A38               	incf	sortDrawerList@i+1,f,c
 14713  00E674                     l180:
 14714  00E674  5031               	movf	sortDrawerList@count1,w,c
 14715  00E676  5C37               	subwf	sortDrawerList@i,w,c
 14716  00E678  5032               	movf	sortDrawerList@count1+1,w,c
 14717  00E67A  5838               	subwfb	sortDrawerList@i+1,w,c
 14718  00E67C  A0D8               	btfss	status,0,c
 14719  00E67E  D7A3               	goto	l181
 14720                           
 14721                           ;operationMode.c: 101: }
 14722                           ;operationMode.c: 102: }
 14723                           ;operationMode.c: 103: }
 14724                           ;operationMode.c: 105: for (i=0; i<count3; i++){
 14725  00E680  0E00               	movlw	0
 14726  00E682  6E38               	movwf	sortDrawerList@i+1,c
 14727  00E684  0E00               	movlw	0
 14728  00E686  6E37               	movwf	sortDrawerList@i,c
 14729  00E688  D057               	goto	l187
 14730  00E68A                     
 14731                           ;operationMode.c: 106: for (j=0; j<count3; j++){
 14732  00E68A  0E00               	movlw	0
 14733  00E68C  6E36               	movwf	sortDrawerList@j+1,c
 14734  00E68E  0E00               	movlw	0
 14735  00E690  6E35               	movwf	sortDrawerList@j,c
 14736  00E692  D04A               	goto	l189
 14737  00E694                     
 14738                           ;operationMode.c: 107: if (sublist3[j] > sublist3[i]){
 14739  00E694  90D8               	bcf	status,0,c
 14740  00E696  3435               	rlcf	sortDrawerList@j,w,c
 14741  00E698  6ED9               	movwf	fsr2l,c
 14742  00E69A  3436               	rlcf	sortDrawerList@j+1,w,c
 14743  00E69C  6EDA               	movwf	fsr2h,c
 14744  00E69E  0E23               	movlw	low sortDrawerList@sublist3
 14745  00E6A0  26D9               	addwf	fsr2l,f,c
 14746  00E6A2  0E00               	movlw	high sortDrawerList@sublist3
 14747  00E6A4  22DA               	addwfc	fsr2h,f,c
 14748  00E6A6  90D8               	bcf	status,0,c
 14749  00E6A8  3437               	rlcf	sortDrawerList@i,w,c
 14750  00E6AA  6EE1               	movwf	fsr1l,c
 14751  00E6AC  3438               	rlcf	sortDrawerList@i+1,w,c
 14752  00E6AE  6EE2               	movwf	fsr1h,c
 14753  00E6B0  0E23               	movlw	low sortDrawerList@sublist3
 14754  00E6B2  26E1               	addwf	fsr1l,f,c
 14755  00E6B4  0E00               	movlw	high sortDrawerList@sublist3
 14756  00E6B6  22E2               	addwfc	fsr1h,f,c
 14757  00E6B8  50DE               	movf	postinc2,w,c
 14758  00E6BA  5CE6               	subwf	postinc1,w,c
 14759  00E6BC  50DE               	movf	postinc2,w,c
 14760  00E6BE  58E6               	subwfb	postinc1,w,c
 14761  00E6C0  B0D8               	btfsc	status,0,c
 14762  00E6C2  D030               	goto	l191
 14763                           
 14764                           ;operationMode.c: 108: temp = sublist3[i];
 14765  00E6C4  90D8               	bcf	status,0,c
 14766  00E6C6  3437               	rlcf	sortDrawerList@i,w,c
 14767  00E6C8  6ED9               	movwf	fsr2l,c
 14768  00E6CA  3438               	rlcf	sortDrawerList@i+1,w,c
 14769  00E6CC  6EDA               	movwf	fsr2h,c
 14770  00E6CE  0E23               	movlw	low sortDrawerList@sublist3
 14771  00E6D0  26D9               	addwf	fsr2l,f,c
 14772  00E6D2  0E00               	movlw	high sortDrawerList@sublist3
 14773  00E6D4  22DA               	addwfc	fsr2h,f,c
 14774  00E6D6  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14775  00E6DA  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14776                           
 14777                           ;operationMode.c: 109: sublist3[i] = sublist3[j];
 14778  00E6DE  90D8               	bcf	status,0,c
 14779  00E6E0  3435               	rlcf	sortDrawerList@j,w,c
 14780  00E6E2  6ED9               	movwf	fsr2l,c
 14781  00E6E4  3436               	rlcf	sortDrawerList@j+1,w,c
 14782  00E6E6  6EDA               	movwf	fsr2h,c
 14783  00E6E8  0E23               	movlw	low sortDrawerList@sublist3
 14784  00E6EA  26D9               	addwf	fsr2l,f,c
 14785  00E6EC  0E00               	movlw	high sortDrawerList@sublist3
 14786  00E6EE  22DA               	addwfc	fsr2h,f,c
 14787  00E6F0  90D8               	bcf	status,0,c
 14788  00E6F2  3437               	rlcf	sortDrawerList@i,w,c
 14789  00E6F4  6EE1               	movwf	fsr1l,c
 14790  00E6F6  3438               	rlcf	sortDrawerList@i+1,w,c
 14791  00E6F8  6EE2               	movwf	fsr1h,c
 14792  00E6FA  0E23               	movlw	low sortDrawerList@sublist3
 14793  00E6FC  26E1               	addwf	fsr1l,f,c
 14794  00E6FE  0E00               	movlw	high sortDrawerList@sublist3
 14795  00E700  22E2               	addwfc	fsr1h,f,c
 14796  00E702  CFDE FFE6          	movff	postinc2,postinc1
 14797  00E706  CFDD FFE5          	movff	postdec2,postdec1
 14798                           
 14799                           ;operationMode.c: 110: sublist3[j] = temp;
 14800  00E70A  90D8               	bcf	status,0,c
 14801  00E70C  3435               	rlcf	sortDrawerList@j,w,c
 14802  00E70E  6ED9               	movwf	fsr2l,c
 14803  00E710  3436               	rlcf	sortDrawerList@j+1,w,c
 14804  00E712  6EDA               	movwf	fsr2h,c
 14805  00E714  0E23               	movlw	low sortDrawerList@sublist3
 14806  00E716  26D9               	addwf	fsr2l,f,c
 14807  00E718  0E00               	movlw	high sortDrawerList@sublist3
 14808  00E71A  22DA               	addwfc	fsr2h,f,c
 14809  00E71C  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14810  00E720  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14811  00E724                     l191:
 14812  00E724  4A35               	infsnz	sortDrawerList@j,f,c
 14813  00E726  2A36               	incf	sortDrawerList@j+1,f,c
 14814  00E728                     l189:
 14815  00E728  5033               	movf	sortDrawerList@count3,w,c
 14816  00E72A  5C35               	subwf	sortDrawerList@j,w,c
 14817  00E72C  5034               	movf	sortDrawerList@count3+1,w,c
 14818  00E72E  5836               	subwfb	sortDrawerList@j+1,w,c
 14819  00E730  A0D8               	btfss	status,0,c
 14820  00E732  D7B0               	goto	l190
 14821  00E734  4A37               	infsnz	sortDrawerList@i,f,c
 14822  00E736  2A38               	incf	sortDrawerList@i+1,f,c
 14823  00E738                     l187:
 14824  00E738  5033               	movf	sortDrawerList@count3,w,c
 14825  00E73A  5C37               	subwf	sortDrawerList@i,w,c
 14826  00E73C  5034               	movf	sortDrawerList@count3+1,w,c
 14827  00E73E  5838               	subwfb	sortDrawerList@i+1,w,c
 14828  00E740  A0D8               	btfss	status,0,c
 14829  00E742  D7A3               	goto	l188
 14830                           
 14831                           ;operationMode.c: 111: }
 14832                           ;operationMode.c: 112: }
 14833                           ;operationMode.c: 113: }
 14834                           ;operationMode.c: 115: for (i=0; i<count2; i++){
 14835  00E744  0E00               	movlw	0
 14836  00E746  6E38               	movwf	sortDrawerList@i+1,c
 14837  00E748  0E00               	movlw	0
 14838  00E74A  6E37               	movwf	sortDrawerList@i,c
 14839  00E74C  D057               	goto	l194
 14840  00E74E                     
 14841                           ;operationMode.c: 116: for (j=0; j<count2; j++){
 14842  00E74E  0E00               	movlw	0
 14843  00E750  6E36               	movwf	sortDrawerList@j+1,c
 14844  00E752  0E00               	movlw	0
 14845  00E754  6E35               	movwf	sortDrawerList@j,c
 14846  00E756  D04A               	goto	l196
 14847  00E758                     
 14848                           ;operationMode.c: 117: if (sublist2[j] < sublist2[i]){
 14849  00E758  90D8               	bcf	status,0,c
 14850  00E75A  3437               	rlcf	sortDrawerList@i,w,c
 14851  00E75C  6ED9               	movwf	fsr2l,c
 14852  00E75E  3438               	rlcf	sortDrawerList@i+1,w,c
 14853  00E760  6EDA               	movwf	fsr2h,c
 14854  00E762  0E1B               	movlw	low sortDrawerList@sublist2
 14855  00E764  26D9               	addwf	fsr2l,f,c
 14856  00E766  0E00               	movlw	high sortDrawerList@sublist2
 14857  00E768  22DA               	addwfc	fsr2h,f,c
 14858  00E76A  90D8               	bcf	status,0,c
 14859  00E76C  3435               	rlcf	sortDrawerList@j,w,c
 14860  00E76E  6EE1               	movwf	fsr1l,c
 14861  00E770  3436               	rlcf	sortDrawerList@j+1,w,c
 14862  00E772  6EE2               	movwf	fsr1h,c
 14863  00E774  0E1B               	movlw	low sortDrawerList@sublist2
 14864  00E776  26E1               	addwf	fsr1l,f,c
 14865  00E778  0E00               	movlw	high sortDrawerList@sublist2
 14866  00E77A  22E2               	addwfc	fsr1h,f,c
 14867  00E77C  50DE               	movf	postinc2,w,c
 14868  00E77E  5CE6               	subwf	postinc1,w,c
 14869  00E780  50DE               	movf	postinc2,w,c
 14870  00E782  58E6               	subwfb	postinc1,w,c
 14871  00E784  B0D8               	btfsc	status,0,c
 14872  00E786  D030               	goto	l198
 14873                           
 14874                           ;operationMode.c: 118: temp = sublist2[i];
 14875  00E788  90D8               	bcf	status,0,c
 14876  00E78A  3437               	rlcf	sortDrawerList@i,w,c
 14877  00E78C  6ED9               	movwf	fsr2l,c
 14878  00E78E  3438               	rlcf	sortDrawerList@i+1,w,c
 14879  00E790  6EDA               	movwf	fsr2h,c
 14880  00E792  0E1B               	movlw	low sortDrawerList@sublist2
 14881  00E794  26D9               	addwf	fsr2l,f,c
 14882  00E796  0E00               	movlw	high sortDrawerList@sublist2
 14883  00E798  22DA               	addwfc	fsr2h,f,c
 14884  00E79A  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14885  00E79E  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14886                           
 14887                           ;operationMode.c: 119: sublist2[i] = sublist2[j];
 14888  00E7A2  90D8               	bcf	status,0,c
 14889  00E7A4  3435               	rlcf	sortDrawerList@j,w,c
 14890  00E7A6  6ED9               	movwf	fsr2l,c
 14891  00E7A8  3436               	rlcf	sortDrawerList@j+1,w,c
 14892  00E7AA  6EDA               	movwf	fsr2h,c
 14893  00E7AC  0E1B               	movlw	low sortDrawerList@sublist2
 14894  00E7AE  26D9               	addwf	fsr2l,f,c
 14895  00E7B0  0E00               	movlw	high sortDrawerList@sublist2
 14896  00E7B2  22DA               	addwfc	fsr2h,f,c
 14897  00E7B4  90D8               	bcf	status,0,c
 14898  00E7B6  3437               	rlcf	sortDrawerList@i,w,c
 14899  00E7B8  6EE1               	movwf	fsr1l,c
 14900  00E7BA  3438               	rlcf	sortDrawerList@i+1,w,c
 14901  00E7BC  6EE2               	movwf	fsr1h,c
 14902  00E7BE  0E1B               	movlw	low sortDrawerList@sublist2
 14903  00E7C0  26E1               	addwf	fsr1l,f,c
 14904  00E7C2  0E00               	movlw	high sortDrawerList@sublist2
 14905  00E7C4  22E2               	addwfc	fsr1h,f,c
 14906  00E7C6  CFDE FFE6          	movff	postinc2,postinc1
 14907  00E7CA  CFDD FFE5          	movff	postdec2,postdec1
 14908                           
 14909                           ;operationMode.c: 120: sublist2[j] = temp;
 14910  00E7CE  90D8               	bcf	status,0,c
 14911  00E7D0  3435               	rlcf	sortDrawerList@j,w,c
 14912  00E7D2  6ED9               	movwf	fsr2l,c
 14913  00E7D4  3436               	rlcf	sortDrawerList@j+1,w,c
 14914  00E7D6  6EDA               	movwf	fsr2h,c
 14915  00E7D8  0E1B               	movlw	low sortDrawerList@sublist2
 14916  00E7DA  26D9               	addwf	fsr2l,f,c
 14917  00E7DC  0E00               	movlw	high sortDrawerList@sublist2
 14918  00E7DE  22DA               	addwfc	fsr2h,f,c
 14919  00E7E0  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14920  00E7E4  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14921  00E7E8                     l198:
 14922  00E7E8  4A35               	infsnz	sortDrawerList@j,f,c
 14923  00E7EA  2A36               	incf	sortDrawerList@j+1,f,c
 14924  00E7EC                     l196:
 14925  00E7EC  502D               	movf	sortDrawerList@count2,w,c
 14926  00E7EE  5C35               	subwf	sortDrawerList@j,w,c
 14927  00E7F0  502E               	movf	sortDrawerList@count2+1,w,c
 14928  00E7F2  5836               	subwfb	sortDrawerList@j+1,w,c
 14929  00E7F4  A0D8               	btfss	status,0,c
 14930  00E7F6  D7B0               	goto	l197
 14931  00E7F8  4A37               	infsnz	sortDrawerList@i,f,c
 14932  00E7FA  2A38               	incf	sortDrawerList@i+1,f,c
 14933  00E7FC                     l194:
 14934  00E7FC  502D               	movf	sortDrawerList@count2,w,c
 14935  00E7FE  5C37               	subwf	sortDrawerList@i,w,c
 14936  00E800  502E               	movf	sortDrawerList@count2+1,w,c
 14937  00E802  5838               	subwfb	sortDrawerList@i+1,w,c
 14938  00E804  A0D8               	btfss	status,0,c
 14939  00E806  D7A3               	goto	l195
 14940                           
 14941                           ;operationMode.c: 121: }
 14942                           ;operationMode.c: 122: }
 14943                           ;operationMode.c: 123: }
 14944                           ;operationMode.c: 125: for (i=0; i<count4; i++){
 14945  00E808  0E00               	movlw	0
 14946  00E80A  6E38               	movwf	sortDrawerList@i+1,c
 14947  00E80C  0E00               	movlw	0
 14948  00E80E  6E37               	movwf	sortDrawerList@i,c
 14949  00E810  D057               	goto	l201
 14950  00E812                     
 14951                           ;operationMode.c: 126: for (j=0; j<count4; j++){
 14952  00E812  0E00               	movlw	0
 14953  00E814  6E36               	movwf	sortDrawerList@j+1,c
 14954  00E816  0E00               	movlw	0
 14955  00E818  6E35               	movwf	sortDrawerList@j,c
 14956  00E81A  D04A               	goto	l203
 14957  00E81C                     
 14958                           ;operationMode.c: 127: if (sublist4[j] < sublist4[i]){
 14959  00E81C  90D8               	bcf	status,0,c
 14960  00E81E  3437               	rlcf	sortDrawerList@i,w,c
 14961  00E820  6ED9               	movwf	fsr2l,c
 14962  00E822  3438               	rlcf	sortDrawerList@i+1,w,c
 14963  00E824  6EDA               	movwf	fsr2h,c
 14964  00E826  0E13               	movlw	low sortDrawerList@sublist4
 14965  00E828  26D9               	addwf	fsr2l,f,c
 14966  00E82A  0E00               	movlw	high sortDrawerList@sublist4
 14967  00E82C  22DA               	addwfc	fsr2h,f,c
 14968  00E82E  90D8               	bcf	status,0,c
 14969  00E830  3435               	rlcf	sortDrawerList@j,w,c
 14970  00E832  6EE1               	movwf	fsr1l,c
 14971  00E834  3436               	rlcf	sortDrawerList@j+1,w,c
 14972  00E836  6EE2               	movwf	fsr1h,c
 14973  00E838  0E13               	movlw	low sortDrawerList@sublist4
 14974  00E83A  26E1               	addwf	fsr1l,f,c
 14975  00E83C  0E00               	movlw	high sortDrawerList@sublist4
 14976  00E83E  22E2               	addwfc	fsr1h,f,c
 14977  00E840  50DE               	movf	postinc2,w,c
 14978  00E842  5CE6               	subwf	postinc1,w,c
 14979  00E844  50DE               	movf	postinc2,w,c
 14980  00E846  58E6               	subwfb	postinc1,w,c
 14981  00E848  B0D8               	btfsc	status,0,c
 14982  00E84A  D030               	goto	l205
 14983                           
 14984                           ;operationMode.c: 128: temp = sublist4[i];
 14985  00E84C  90D8               	bcf	status,0,c
 14986  00E84E  3437               	rlcf	sortDrawerList@i,w,c
 14987  00E850  6ED9               	movwf	fsr2l,c
 14988  00E852  3438               	rlcf	sortDrawerList@i+1,w,c
 14989  00E854  6EDA               	movwf	fsr2h,c
 14990  00E856  0E13               	movlw	low sortDrawerList@sublist4
 14991  00E858  26D9               	addwf	fsr2l,f,c
 14992  00E85A  0E00               	movlw	high sortDrawerList@sublist4
 14993  00E85C  22DA               	addwfc	fsr2h,f,c
 14994  00E85E  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14995  00E862  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14996                           
 14997                           ;operationMode.c: 129: sublist4[i] = sublist4[j];
 14998  00E866  90D8               	bcf	status,0,c
 14999  00E868  3435               	rlcf	sortDrawerList@j,w,c
 15000  00E86A  6ED9               	movwf	fsr2l,c
 15001  00E86C  3436               	rlcf	sortDrawerList@j+1,w,c
 15002  00E86E  6EDA               	movwf	fsr2h,c
 15003  00E870  0E13               	movlw	low sortDrawerList@sublist4
 15004  00E872  26D9               	addwf	fsr2l,f,c
 15005  00E874  0E00               	movlw	high sortDrawerList@sublist4
 15006  00E876  22DA               	addwfc	fsr2h,f,c
 15007  00E878  90D8               	bcf	status,0,c
 15008  00E87A  3437               	rlcf	sortDrawerList@i,w,c
 15009  00E87C  6EE1               	movwf	fsr1l,c
 15010  00E87E  3438               	rlcf	sortDrawerList@i+1,w,c
 15011  00E880  6EE2               	movwf	fsr1h,c
 15012  00E882  0E13               	movlw	low sortDrawerList@sublist4
 15013  00E884  26E1               	addwf	fsr1l,f,c
 15014  00E886  0E00               	movlw	high sortDrawerList@sublist4
 15015  00E888  22E2               	addwfc	fsr1h,f,c
 15016  00E88A  CFDE FFE6          	movff	postinc2,postinc1
 15017  00E88E  CFDD FFE5          	movff	postdec2,postdec1
 15018                           
 15019                           ;operationMode.c: 130: sublist4[j] = temp;
 15020  00E892  90D8               	bcf	status,0,c
 15021  00E894  3435               	rlcf	sortDrawerList@j,w,c
 15022  00E896  6ED9               	movwf	fsr2l,c
 15023  00E898  3436               	rlcf	sortDrawerList@j+1,w,c
 15024  00E89A  6EDA               	movwf	fsr2h,c
 15025  00E89C  0E13               	movlw	low sortDrawerList@sublist4
 15026  00E89E  26D9               	addwf	fsr2l,f,c
 15027  00E8A0  0E00               	movlw	high sortDrawerList@sublist4
 15028  00E8A2  22DA               	addwfc	fsr2h,f,c
 15029  00E8A4  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15030  00E8A8  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15031  00E8AC                     l205:
 15032  00E8AC  4A35               	infsnz	sortDrawerList@j,f,c
 15033  00E8AE  2A36               	incf	sortDrawerList@j+1,f,c
 15034  00E8B0                     l203:
 15035  00E8B0  502B               	movf	sortDrawerList@count4,w,c
 15036  00E8B2  5C35               	subwf	sortDrawerList@j,w,c
 15037  00E8B4  502C               	movf	sortDrawerList@count4+1,w,c
 15038  00E8B6  5836               	subwfb	sortDrawerList@j+1,w,c
 15039  00E8B8  A0D8               	btfss	status,0,c
 15040  00E8BA  D7B0               	goto	l204
 15041  00E8BC  4A37               	infsnz	sortDrawerList@i,f,c
 15042  00E8BE  2A38               	incf	sortDrawerList@i+1,f,c
 15043  00E8C0                     l201:
 15044  00E8C0  502B               	movf	sortDrawerList@count4,w,c
 15045  00E8C2  5C37               	subwf	sortDrawerList@i,w,c
 15046  00E8C4  502C               	movf	sortDrawerList@count4+1,w,c
 15047  00E8C6  5838               	subwfb	sortDrawerList@i+1,w,c
 15048  00E8C8  A0D8               	btfss	status,0,c
 15049  00E8CA  D7A3               	goto	l202
 15050                           
 15051                           ;operationMode.c: 131: }
 15052                           ;operationMode.c: 132: }
 15053                           ;operationMode.c: 133: }
 15054                           ;operationMode.c: 135: if (sublist3[count3 - 1] == 10 || sublist3[count3 - 1] == 9){
 15055  00E8CC  0EFE               	movlw	254
 15056  00E8CE  6E05               	movwf	??_sortDrawerList& (0+255),c
 15057  00E8D0  0EFF               	movlw	255
 15058  00E8D2  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15059  00E8D4  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 15060  00E8D8  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 15061  00E8DC  90D8               	bcf	status,0,c
 15062  00E8DE  3607               	rlcf	??_sortDrawerList+2,f,c
 15063  00E8E0  3608               	rlcf	??_sortDrawerList+3,f,c
 15064  00E8E2  5005               	movf	??_sortDrawerList,w,c
 15065  00E8E4  2607               	addwf	??_sortDrawerList+2,f,c
 15066  00E8E6  5006               	movf	??_sortDrawerList+1,w,c
 15067  00E8E8  2208               	addwfc	??_sortDrawerList+3,f,c
 15068  00E8EA  0E23               	movlw	low sortDrawerList@sublist3
 15069  00E8EC  2407               	addwf	??_sortDrawerList+2,w,c
 15070  00E8EE  6ED9               	movwf	fsr2l,c
 15071  00E8F0  0E00               	movlw	high sortDrawerList@sublist3
 15072  00E8F2  2008               	addwfc	??_sortDrawerList+3,w,c
 15073  00E8F4  6EDA               	movwf	fsr2h,c
 15074  00E8F6  0E0A               	movlw	10
 15075  00E8F8  18DE               	xorwf	postinc2,w,c
 15076  00E8FA  10DE               	iorwf	postinc2,w,c
 15077  00E8FC  B4D8               	btfsc	status,2,c
 15078  00E8FE  D01A               	goto	u9520
 15079  00E900  0EFE               	movlw	254
 15080  00E902  6E05               	movwf	??_sortDrawerList& (0+255),c
 15081  00E904  0EFF               	movlw	255
 15082  00E906  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15083  00E908  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 15084  00E90C  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 15085  00E910  90D8               	bcf	status,0,c
 15086  00E912  3607               	rlcf	??_sortDrawerList+2,f,c
 15087  00E914  3608               	rlcf	??_sortDrawerList+3,f,c
 15088  00E916  5005               	movf	??_sortDrawerList,w,c
 15089  00E918  2607               	addwf	??_sortDrawerList+2,f,c
 15090  00E91A  5006               	movf	??_sortDrawerList+1,w,c
 15091  00E91C  2208               	addwfc	??_sortDrawerList+3,f,c
 15092  00E91E  0E23               	movlw	low sortDrawerList@sublist3
 15093  00E920  2407               	addwf	??_sortDrawerList+2,w,c
 15094  00E922  6ED9               	movwf	fsr2l,c
 15095  00E924  0E00               	movlw	high sortDrawerList@sublist3
 15096  00E926  2008               	addwfc	??_sortDrawerList+3,w,c
 15097  00E928  6EDA               	movwf	fsr2h,c
 15098  00E92A  0E09               	movlw	9
 15099  00E92C  18DE               	xorwf	postinc2,w,c
 15100  00E92E  10DE               	iorwf	postinc2,w,c
 15101  00E930  A4D8               	btfss	status,2,c
 15102  00E932  D062               	goto	u9550
 15103  00E934                     u9520:
 15104                           
 15105                           ;operationMode.c: 136: for (i=0; i<count4; i++){
 15106  00E934  0E00               	movlw	0
 15107  00E936  6E38               	movwf	sortDrawerList@i+1,c
 15108  00E938  0E00               	movlw	0
 15109  00E93A  6E37               	movwf	sortDrawerList@i,c
 15110  00E93C  D057               	goto	l211
 15111  00E93E                     
 15112                           ;operationMode.c: 137: for (j=0; j<count4; j++){
 15113  00E93E  0E00               	movlw	0
 15114  00E940  6E36               	movwf	sortDrawerList@j+1,c
 15115  00E942  0E00               	movlw	0
 15116  00E944  6E35               	movwf	sortDrawerList@j,c
 15117  00E946  D04A               	goto	l213
 15118  00E948                     
 15119                           ;operationMode.c: 138: if (sublist4[j] > sublist4[i]){
 15120  00E948  90D8               	bcf	status,0,c
 15121  00E94A  3435               	rlcf	sortDrawerList@j,w,c
 15122  00E94C  6ED9               	movwf	fsr2l,c
 15123  00E94E  3436               	rlcf	sortDrawerList@j+1,w,c
 15124  00E950  6EDA               	movwf	fsr2h,c
 15125  00E952  0E13               	movlw	low sortDrawerList@sublist4
 15126  00E954  26D9               	addwf	fsr2l,f,c
 15127  00E956  0E00               	movlw	high sortDrawerList@sublist4
 15128  00E958  22DA               	addwfc	fsr2h,f,c
 15129  00E95A  90D8               	bcf	status,0,c
 15130  00E95C  3437               	rlcf	sortDrawerList@i,w,c
 15131  00E95E  6EE1               	movwf	fsr1l,c
 15132  00E960  3438               	rlcf	sortDrawerList@i+1,w,c
 15133  00E962  6EE2               	movwf	fsr1h,c
 15134  00E964  0E13               	movlw	low sortDrawerList@sublist4
 15135  00E966  26E1               	addwf	fsr1l,f,c
 15136  00E968  0E00               	movlw	high sortDrawerList@sublist4
 15137  00E96A  22E2               	addwfc	fsr1h,f,c
 15138  00E96C  50DE               	movf	postinc2,w,c
 15139  00E96E  5CE6               	subwf	postinc1,w,c
 15140  00E970  50DE               	movf	postinc2,w,c
 15141  00E972  58E6               	subwfb	postinc1,w,c
 15142  00E974  B0D8               	btfsc	status,0,c
 15143  00E976  D030               	goto	l215
 15144                           
 15145                           ;operationMode.c: 139: temp = sublist4[i];
 15146  00E978  90D8               	bcf	status,0,c
 15147  00E97A  3437               	rlcf	sortDrawerList@i,w,c
 15148  00E97C  6ED9               	movwf	fsr2l,c
 15149  00E97E  3438               	rlcf	sortDrawerList@i+1,w,c
 15150  00E980  6EDA               	movwf	fsr2h,c
 15151  00E982  0E13               	movlw	low sortDrawerList@sublist4
 15152  00E984  26D9               	addwf	fsr2l,f,c
 15153  00E986  0E00               	movlw	high sortDrawerList@sublist4
 15154  00E988  22DA               	addwfc	fsr2h,f,c
 15155  00E98A  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15156  00E98E  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15157                           
 15158                           ;operationMode.c: 140: sublist4[i] = sublist4[j];
 15159  00E992  90D8               	bcf	status,0,c
 15160  00E994  3435               	rlcf	sortDrawerList@j,w,c
 15161  00E996  6ED9               	movwf	fsr2l,c
 15162  00E998  3436               	rlcf	sortDrawerList@j+1,w,c
 15163  00E99A  6EDA               	movwf	fsr2h,c
 15164  00E99C  0E13               	movlw	low sortDrawerList@sublist4
 15165  00E99E  26D9               	addwf	fsr2l,f,c
 15166  00E9A0  0E00               	movlw	high sortDrawerList@sublist4
 15167  00E9A2  22DA               	addwfc	fsr2h,f,c
 15168  00E9A4  90D8               	bcf	status,0,c
 15169  00E9A6  3437               	rlcf	sortDrawerList@i,w,c
 15170  00E9A8  6EE1               	movwf	fsr1l,c
 15171  00E9AA  3438               	rlcf	sortDrawerList@i+1,w,c
 15172  00E9AC  6EE2               	movwf	fsr1h,c
 15173  00E9AE  0E13               	movlw	low sortDrawerList@sublist4
 15174  00E9B0  26E1               	addwf	fsr1l,f,c
 15175  00E9B2  0E00               	movlw	high sortDrawerList@sublist4
 15176  00E9B4  22E2               	addwfc	fsr1h,f,c
 15177  00E9B6  CFDE FFE6          	movff	postinc2,postinc1
 15178  00E9BA  CFDD FFE5          	movff	postdec2,postdec1
 15179                           
 15180                           ;operationMode.c: 141: sublist4[j] = temp;
 15181  00E9BE  90D8               	bcf	status,0,c
 15182  00E9C0  3435               	rlcf	sortDrawerList@j,w,c
 15183  00E9C2  6ED9               	movwf	fsr2l,c
 15184  00E9C4  3436               	rlcf	sortDrawerList@j+1,w,c
 15185  00E9C6  6EDA               	movwf	fsr2h,c
 15186  00E9C8  0E13               	movlw	low sortDrawerList@sublist4
 15187  00E9CA  26D9               	addwf	fsr2l,f,c
 15188  00E9CC  0E00               	movlw	high sortDrawerList@sublist4
 15189  00E9CE  22DA               	addwfc	fsr2h,f,c
 15190  00E9D0  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15191  00E9D4  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15192  00E9D8                     l215:
 15193  00E9D8  4A35               	infsnz	sortDrawerList@j,f,c
 15194  00E9DA  2A36               	incf	sortDrawerList@j+1,f,c
 15195  00E9DC                     l213:
 15196  00E9DC  502B               	movf	sortDrawerList@count4,w,c
 15197  00E9DE  5C35               	subwf	sortDrawerList@j,w,c
 15198  00E9E0  502C               	movf	sortDrawerList@count4+1,w,c
 15199  00E9E2  5836               	subwfb	sortDrawerList@j+1,w,c
 15200  00E9E4  A0D8               	btfss	status,0,c
 15201  00E9E6  D7B0               	goto	l214
 15202  00E9E8  4A37               	infsnz	sortDrawerList@i,f,c
 15203  00E9EA  2A38               	incf	sortDrawerList@i+1,f,c
 15204  00E9EC                     l211:
 15205  00E9EC  502B               	movf	sortDrawerList@count4,w,c
 15206  00E9EE  5C37               	subwf	sortDrawerList@i,w,c
 15207  00E9F0  502C               	movf	sortDrawerList@count4+1,w,c
 15208  00E9F2  5838               	subwfb	sortDrawerList@i+1,w,c
 15209  00E9F4  A0D8               	btfss	status,0,c
 15210  00E9F6  D7A3               	goto	l212
 15211  00E9F8                     u9550:
 15212                           
 15213                           ;operationMode.c: 142: }
 15214                           ;operationMode.c: 143: }
 15215                           ;operationMode.c: 144: }
 15216                           ;operationMode.c: 145: }
 15217                           ;operationMode.c: 147: if (sublist2[0] == 7 || sublist2[0] == 8){
 15218  00E9F8  0E07               	movlw	7
 15219  00E9FA  181B               	xorwf	sortDrawerList@sublist2,w,c
 15220  00E9FC  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 15221  00E9FE  B4D8               	btfsc	status,2,c
 15222  00EA00  D005               	goto	u9570
 15223  00EA02  0E08               	movlw	8
 15224  00EA04  181B               	xorwf	sortDrawerList@sublist2,w,c
 15225  00EA06  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 15226  00EA08  A4D8               	btfss	status,2,c
 15227  00EA0A  D062               	goto	u9600
 15228  00EA0C                     u9570:
 15229                           
 15230                           ;operationMode.c: 148: for (i=0; i<count3; i++){
 15231  00EA0C  0E00               	movlw	0
 15232  00EA0E  6E38               	movwf	sortDrawerList@i+1,c
 15233  00EA10  0E00               	movlw	0
 15234  00EA12  6E37               	movwf	sortDrawerList@i,c
 15235  00EA14  D057               	goto	l221
 15236  00EA16                     
 15237                           ;operationMode.c: 149: for (j=0; j<count3; j++){
 15238  00EA16  0E00               	movlw	0
 15239  00EA18  6E36               	movwf	sortDrawerList@j+1,c
 15240  00EA1A  0E00               	movlw	0
 15241  00EA1C  6E35               	movwf	sortDrawerList@j,c
 15242  00EA1E  D04A               	goto	l223
 15243  00EA20                     
 15244                           ;operationMode.c: 150: if (sublist3[j] < sublist3[i]){
 15245  00EA20  90D8               	bcf	status,0,c
 15246  00EA22  3437               	rlcf	sortDrawerList@i,w,c
 15247  00EA24  6ED9               	movwf	fsr2l,c
 15248  00EA26  3438               	rlcf	sortDrawerList@i+1,w,c
 15249  00EA28  6EDA               	movwf	fsr2h,c
 15250  00EA2A  0E23               	movlw	low sortDrawerList@sublist3
 15251  00EA2C  26D9               	addwf	fsr2l,f,c
 15252  00EA2E  0E00               	movlw	high sortDrawerList@sublist3
 15253  00EA30  22DA               	addwfc	fsr2h,f,c
 15254  00EA32  90D8               	bcf	status,0,c
 15255  00EA34  3435               	rlcf	sortDrawerList@j,w,c
 15256  00EA36  6EE1               	movwf	fsr1l,c
 15257  00EA38  3436               	rlcf	sortDrawerList@j+1,w,c
 15258  00EA3A  6EE2               	movwf	fsr1h,c
 15259  00EA3C  0E23               	movlw	low sortDrawerList@sublist3
 15260  00EA3E  26E1               	addwf	fsr1l,f,c
 15261  00EA40  0E00               	movlw	high sortDrawerList@sublist3
 15262  00EA42  22E2               	addwfc	fsr1h,f,c
 15263  00EA44  50DE               	movf	postinc2,w,c
 15264  00EA46  5CE6               	subwf	postinc1,w,c
 15265  00EA48  50DE               	movf	postinc2,w,c
 15266  00EA4A  58E6               	subwfb	postinc1,w,c
 15267  00EA4C  B0D8               	btfsc	status,0,c
 15268  00EA4E  D030               	goto	l225
 15269                           
 15270                           ;operationMode.c: 151: temp = sublist3[i];
 15271  00EA50  90D8               	bcf	status,0,c
 15272  00EA52  3437               	rlcf	sortDrawerList@i,w,c
 15273  00EA54  6ED9               	movwf	fsr2l,c
 15274  00EA56  3438               	rlcf	sortDrawerList@i+1,w,c
 15275  00EA58  6EDA               	movwf	fsr2h,c
 15276  00EA5A  0E23               	movlw	low sortDrawerList@sublist3
 15277  00EA5C  26D9               	addwf	fsr2l,f,c
 15278  00EA5E  0E00               	movlw	high sortDrawerList@sublist3
 15279  00EA60  22DA               	addwfc	fsr2h,f,c
 15280  00EA62  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15281  00EA66  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15282                           
 15283                           ;operationMode.c: 152: sublist3[i] = sublist3[j];
 15284  00EA6A  90D8               	bcf	status,0,c
 15285  00EA6C  3435               	rlcf	sortDrawerList@j,w,c
 15286  00EA6E  6ED9               	movwf	fsr2l,c
 15287  00EA70  3436               	rlcf	sortDrawerList@j+1,w,c
 15288  00EA72  6EDA               	movwf	fsr2h,c
 15289  00EA74  0E23               	movlw	low sortDrawerList@sublist3
 15290  00EA76  26D9               	addwf	fsr2l,f,c
 15291  00EA78  0E00               	movlw	high sortDrawerList@sublist3
 15292  00EA7A  22DA               	addwfc	fsr2h,f,c
 15293  00EA7C  90D8               	bcf	status,0,c
 15294  00EA7E  3437               	rlcf	sortDrawerList@i,w,c
 15295  00EA80  6EE1               	movwf	fsr1l,c
 15296  00EA82  3438               	rlcf	sortDrawerList@i+1,w,c
 15297  00EA84  6EE2               	movwf	fsr1h,c
 15298  00EA86  0E23               	movlw	low sortDrawerList@sublist3
 15299  00EA88  26E1               	addwf	fsr1l,f,c
 15300  00EA8A  0E00               	movlw	high sortDrawerList@sublist3
 15301  00EA8C  22E2               	addwfc	fsr1h,f,c
 15302  00EA8E  CFDE FFE6          	movff	postinc2,postinc1
 15303  00EA92  CFDD FFE5          	movff	postdec2,postdec1
 15304                           
 15305                           ;operationMode.c: 153: sublist3[j] = temp;
 15306  00EA96  90D8               	bcf	status,0,c
 15307  00EA98  3435               	rlcf	sortDrawerList@j,w,c
 15308  00EA9A  6ED9               	movwf	fsr2l,c
 15309  00EA9C  3436               	rlcf	sortDrawerList@j+1,w,c
 15310  00EA9E  6EDA               	movwf	fsr2h,c
 15311  00EAA0  0E23               	movlw	low sortDrawerList@sublist3
 15312  00EAA2  26D9               	addwf	fsr2l,f,c
 15313  00EAA4  0E00               	movlw	high sortDrawerList@sublist3
 15314  00EAA6  22DA               	addwfc	fsr2h,f,c
 15315  00EAA8  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15316  00EAAC  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15317  00EAB0                     l225:
 15318  00EAB0  4A35               	infsnz	sortDrawerList@j,f,c
 15319  00EAB2  2A36               	incf	sortDrawerList@j+1,f,c
 15320  00EAB4                     l223:
 15321  00EAB4  5033               	movf	sortDrawerList@count3,w,c
 15322  00EAB6  5C35               	subwf	sortDrawerList@j,w,c
 15323  00EAB8  5034               	movf	sortDrawerList@count3+1,w,c
 15324  00EABA  5836               	subwfb	sortDrawerList@j+1,w,c
 15325  00EABC  A0D8               	btfss	status,0,c
 15326  00EABE  D7B0               	goto	l224
 15327  00EAC0  4A37               	infsnz	sortDrawerList@i,f,c
 15328  00EAC2  2A38               	incf	sortDrawerList@i+1,f,c
 15329  00EAC4                     l221:
 15330  00EAC4  5033               	movf	sortDrawerList@count3,w,c
 15331  00EAC6  5C37               	subwf	sortDrawerList@i,w,c
 15332  00EAC8  5034               	movf	sortDrawerList@count3+1,w,c
 15333  00EACA  5838               	subwfb	sortDrawerList@i+1,w,c
 15334  00EACC  A0D8               	btfss	status,0,c
 15335  00EACE  D7A3               	goto	l222
 15336  00EAD0                     u9600:
 15337                           
 15338                           ;operationMode.c: 154: }
 15339                           ;operationMode.c: 155: }
 15340                           ;operationMode.c: 156: }
 15341                           ;operationMode.c: 157: }
 15342                           ;operationMode.c: 159: if (sublist1[count1 - 1] == 1 || sublist1[count1 - 1] == 2){
 15343  00EAD0  0EFE               	movlw	254
 15344  00EAD2  6E05               	movwf	??_sortDrawerList& (0+255),c
 15345  00EAD4  0EFF               	movlw	255
 15346  00EAD6  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15347  00EAD8  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 15348  00EADC  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 15349  00EAE0  90D8               	bcf	status,0,c
 15350  00EAE2  3607               	rlcf	??_sortDrawerList+2,f,c
 15351  00EAE4  3608               	rlcf	??_sortDrawerList+3,f,c
 15352  00EAE6  5005               	movf	??_sortDrawerList,w,c
 15353  00EAE8  2607               	addwf	??_sortDrawerList+2,f,c
 15354  00EAEA  5006               	movf	??_sortDrawerList+1,w,c
 15355  00EAEC  2208               	addwfc	??_sortDrawerList+3,f,c
 15356  00EAEE  0E0B               	movlw	low sortDrawerList@sublist1
 15357  00EAF0  2407               	addwf	??_sortDrawerList+2,w,c
 15358  00EAF2  6ED9               	movwf	fsr2l,c
 15359  00EAF4  0E00               	movlw	high sortDrawerList@sublist1
 15360  00EAF6  2008               	addwfc	??_sortDrawerList+3,w,c
 15361  00EAF8  6EDA               	movwf	fsr2h,c
 15362  00EAFA  04DE               	decf	postinc2,w,c
 15363  00EAFC  10DE               	iorwf	postinc2,w,c
 15364  00EAFE  B4D8               	btfsc	status,2,c
 15365  00EB00  D01A               	goto	u9620
 15366  00EB02  0EFE               	movlw	254
 15367  00EB04  6E05               	movwf	??_sortDrawerList& (0+255),c
 15368  00EB06  0EFF               	movlw	255
 15369  00EB08  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15370  00EB0A  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 15371  00EB0E  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 15372  00EB12  90D8               	bcf	status,0,c
 15373  00EB14  3607               	rlcf	??_sortDrawerList+2,f,c
 15374  00EB16  3608               	rlcf	??_sortDrawerList+3,f,c
 15375  00EB18  5005               	movf	??_sortDrawerList,w,c
 15376  00EB1A  2607               	addwf	??_sortDrawerList+2,f,c
 15377  00EB1C  5006               	movf	??_sortDrawerList+1,w,c
 15378  00EB1E  2208               	addwfc	??_sortDrawerList+3,f,c
 15379  00EB20  0E0B               	movlw	low sortDrawerList@sublist1
 15380  00EB22  2407               	addwf	??_sortDrawerList+2,w,c
 15381  00EB24  6ED9               	movwf	fsr2l,c
 15382  00EB26  0E00               	movlw	high sortDrawerList@sublist1
 15383  00EB28  2008               	addwfc	??_sortDrawerList+3,w,c
 15384  00EB2A  6EDA               	movwf	fsr2h,c
 15385  00EB2C  0E02               	movlw	2
 15386  00EB2E  18DE               	xorwf	postinc2,w,c
 15387  00EB30  10DE               	iorwf	postinc2,w,c
 15388  00EB32  A4D8               	btfss	status,2,c
 15389  00EB34  D062               	goto	u9650
 15390  00EB36                     u9620:
 15391                           
 15392                           ;operationMode.c: 160: for (i=0; i<count2; i++){
 15393  00EB36  0E00               	movlw	0
 15394  00EB38  6E38               	movwf	sortDrawerList@i+1,c
 15395  00EB3A  0E00               	movlw	0
 15396  00EB3C  6E37               	movwf	sortDrawerList@i,c
 15397  00EB3E  D057               	goto	l231
 15398  00EB40                     
 15399                           ;operationMode.c: 161: for (j=0; j<count2; j++){
 15400  00EB40  0E00               	movlw	0
 15401  00EB42  6E36               	movwf	sortDrawerList@j+1,c
 15402  00EB44  0E00               	movlw	0
 15403  00EB46  6E35               	movwf	sortDrawerList@j,c
 15404  00EB48  D04A               	goto	l233
 15405  00EB4A                     
 15406                           ;operationMode.c: 162: if (sublist2[j] > sublist2[i]){
 15407  00EB4A  90D8               	bcf	status,0,c
 15408  00EB4C  3435               	rlcf	sortDrawerList@j,w,c
 15409  00EB4E  6ED9               	movwf	fsr2l,c
 15410  00EB50  3436               	rlcf	sortDrawerList@j+1,w,c
 15411  00EB52  6EDA               	movwf	fsr2h,c
 15412  00EB54  0E1B               	movlw	low sortDrawerList@sublist2
 15413  00EB56  26D9               	addwf	fsr2l,f,c
 15414  00EB58  0E00               	movlw	high sortDrawerList@sublist2
 15415  00EB5A  22DA               	addwfc	fsr2h,f,c
 15416  00EB5C  90D8               	bcf	status,0,c
 15417  00EB5E  3437               	rlcf	sortDrawerList@i,w,c
 15418  00EB60  6EE1               	movwf	fsr1l,c
 15419  00EB62  3438               	rlcf	sortDrawerList@i+1,w,c
 15420  00EB64  6EE2               	movwf	fsr1h,c
 15421  00EB66  0E1B               	movlw	low sortDrawerList@sublist2
 15422  00EB68  26E1               	addwf	fsr1l,f,c
 15423  00EB6A  0E00               	movlw	high sortDrawerList@sublist2
 15424  00EB6C  22E2               	addwfc	fsr1h,f,c
 15425  00EB6E  50DE               	movf	postinc2,w,c
 15426  00EB70  5CE6               	subwf	postinc1,w,c
 15427  00EB72  50DE               	movf	postinc2,w,c
 15428  00EB74  58E6               	subwfb	postinc1,w,c
 15429  00EB76  B0D8               	btfsc	status,0,c
 15430  00EB78  D030               	goto	l235
 15431                           
 15432                           ;operationMode.c: 163: temp = sublist2[i];
 15433  00EB7A  90D8               	bcf	status,0,c
 15434  00EB7C  3437               	rlcf	sortDrawerList@i,w,c
 15435  00EB7E  6ED9               	movwf	fsr2l,c
 15436  00EB80  3438               	rlcf	sortDrawerList@i+1,w,c
 15437  00EB82  6EDA               	movwf	fsr2h,c
 15438  00EB84  0E1B               	movlw	low sortDrawerList@sublist2
 15439  00EB86  26D9               	addwf	fsr2l,f,c
 15440  00EB88  0E00               	movlw	high sortDrawerList@sublist2
 15441  00EB8A  22DA               	addwfc	fsr2h,f,c
 15442  00EB8C  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 15443  00EB90  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 15444                           
 15445                           ;operationMode.c: 164: sublist2[i] = sublist2[j];
 15446  00EB94  90D8               	bcf	status,0,c
 15447  00EB96  3435               	rlcf	sortDrawerList@j,w,c
 15448  00EB98  6ED9               	movwf	fsr2l,c
 15449  00EB9A  3436               	rlcf	sortDrawerList@j+1,w,c
 15450  00EB9C  6EDA               	movwf	fsr2h,c
 15451  00EB9E  0E1B               	movlw	low sortDrawerList@sublist2
 15452  00EBA0  26D9               	addwf	fsr2l,f,c
 15453  00EBA2  0E00               	movlw	high sortDrawerList@sublist2
 15454  00EBA4  22DA               	addwfc	fsr2h,f,c
 15455  00EBA6  90D8               	bcf	status,0,c
 15456  00EBA8  3437               	rlcf	sortDrawerList@i,w,c
 15457  00EBAA  6EE1               	movwf	fsr1l,c
 15458  00EBAC  3438               	rlcf	sortDrawerList@i+1,w,c
 15459  00EBAE  6EE2               	movwf	fsr1h,c
 15460  00EBB0  0E1B               	movlw	low sortDrawerList@sublist2
 15461  00EBB2  26E1               	addwf	fsr1l,f,c
 15462  00EBB4  0E00               	movlw	high sortDrawerList@sublist2
 15463  00EBB6  22E2               	addwfc	fsr1h,f,c
 15464  00EBB8  CFDE FFE6          	movff	postinc2,postinc1
 15465  00EBBC  CFDD FFE5          	movff	postdec2,postdec1
 15466                           
 15467                           ;operationMode.c: 165: sublist2[j] = temp;
 15468  00EBC0  90D8               	bcf	status,0,c
 15469  00EBC2  3435               	rlcf	sortDrawerList@j,w,c
 15470  00EBC4  6ED9               	movwf	fsr2l,c
 15471  00EBC6  3436               	rlcf	sortDrawerList@j+1,w,c
 15472  00EBC8  6EDA               	movwf	fsr2h,c
 15473  00EBCA  0E1B               	movlw	low sortDrawerList@sublist2
 15474  00EBCC  26D9               	addwf	fsr2l,f,c
 15475  00EBCE  0E00               	movlw	high sortDrawerList@sublist2
 15476  00EBD0  22DA               	addwfc	fsr2h,f,c
 15477  00EBD2  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 15478  00EBD6  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 15479  00EBDA                     l235:
 15480  00EBDA  4A35               	infsnz	sortDrawerList@j,f,c
 15481  00EBDC  2A36               	incf	sortDrawerList@j+1,f,c
 15482  00EBDE                     l233:
 15483  00EBDE  502D               	movf	sortDrawerList@count2,w,c
 15484  00EBE0  5C35               	subwf	sortDrawerList@j,w,c
 15485  00EBE2  502E               	movf	sortDrawerList@count2+1,w,c
 15486  00EBE4  5836               	subwfb	sortDrawerList@j+1,w,c
 15487  00EBE6  A0D8               	btfss	status,0,c
 15488  00EBE8  D7B0               	goto	l234
 15489  00EBEA  4A37               	infsnz	sortDrawerList@i,f,c
 15490  00EBEC  2A38               	incf	sortDrawerList@i+1,f,c
 15491  00EBEE                     l231:
 15492  00EBEE  502D               	movf	sortDrawerList@count2,w,c
 15493  00EBF0  5C37               	subwf	sortDrawerList@i,w,c
 15494  00EBF2  502E               	movf	sortDrawerList@count2+1,w,c
 15495  00EBF4  5838               	subwfb	sortDrawerList@i+1,w,c
 15496  00EBF6  A0D8               	btfss	status,0,c
 15497  00EBF8  D7A3               	goto	l232
 15498  00EBFA                     u9650:
 15499                           
 15500                           ;operationMode.c: 166: }
 15501                           ;operationMode.c: 167: }
 15502                           ;operationMode.c: 168: }
 15503                           ;operationMode.c: 169: }
 15504                           ;operationMode.c: 171: for (i=0; i<count1; i++){
 15505  00EBFA  0E00               	movlw	0
 15506  00EBFC  6E38               	movwf	sortDrawerList@i+1,c
 15507  00EBFE  0E00               	movlw	0
 15508  00EC00  6E37               	movwf	sortDrawerList@i,c
 15509  00EC02  D018               	goto	l238
 15510  00EC04                     
 15511                           ;operationMode.c: 172: sortedDrawerTable[i] = sublist1[i];
 15512  00EC04  90D8               	bcf	status,0,c
 15513  00EC06  3437               	rlcf	sortDrawerList@i,w,c
 15514  00EC08  6ED9               	movwf	fsr2l,c
 15515  00EC0A  3438               	rlcf	sortDrawerList@i+1,w,c
 15516  00EC0C  6EDA               	movwf	fsr2h,c
 15517  00EC0E  0E0B               	movlw	low sortDrawerList@sublist1
 15518  00EC10  26D9               	addwf	fsr2l,f,c
 15519  00EC12  0E00               	movlw	high sortDrawerList@sublist1
 15520  00EC14  22DA               	addwfc	fsr2h,f,c
 15521  00EC16  90D8               	bcf	status,0,c
 15522  00EC18  3437               	rlcf	sortDrawerList@i,w,c
 15523  00EC1A  6EE1               	movwf	fsr1l,c
 15524  00EC1C  3438               	rlcf	sortDrawerList@i+1,w,c
 15525  00EC1E  6EE2               	movwf	fsr1h,c
 15526  00EC20  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 15527  00EC22  26E1               	addwf	fsr1l,f,c
 15528  00EC24  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 15529  00EC26  22E2               	addwfc	fsr1h,f,c
 15530  00EC28  CFDE FFE6          	movff	postinc2,postinc1
 15531  00EC2C  CFDD FFE5          	movff	postdec2,postdec1
 15532  00EC30  4A37               	infsnz	sortDrawerList@i,f,c
 15533  00EC32  2A38               	incf	sortDrawerList@i+1,f,c
 15534  00EC34                     l238:
 15535  00EC34  5031               	movf	sortDrawerList@count1,w,c
 15536  00EC36  5C37               	subwf	sortDrawerList@i,w,c
 15537  00EC38  5032               	movf	sortDrawerList@count1+1,w,c
 15538  00EC3A  5838               	subwfb	sortDrawerList@i+1,w,c
 15539  00EC3C  A0D8               	btfss	status,0,c
 15540  00EC3E  D7E2               	goto	l239
 15541                           
 15542                           ;operationMode.c: 173: }
 15543                           ;operationMode.c: 174: for (i=0; i<count2; i++){
 15544  00EC40  0E00               	movlw	0
 15545  00EC42  6E38               	movwf	sortDrawerList@i+1,c
 15546  00EC44  0E00               	movlw	0
 15547  00EC46  6E37               	movwf	sortDrawerList@i,c
 15548  00EC48  D01E               	goto	l241
 15549  00EC4A                     
 15550                           ;operationMode.c: 175: sortedDrawerTable[i+count1] = sublist2[i];
 15551  00EC4A  90D8               	bcf	status,0,c
 15552  00EC4C  3437               	rlcf	sortDrawerList@i,w,c
 15553  00EC4E  6ED9               	movwf	fsr2l,c
 15554  00EC50  3438               	rlcf	sortDrawerList@i+1,w,c
 15555  00EC52  6EDA               	movwf	fsr2h,c
 15556  00EC54  0E1B               	movlw	low sortDrawerList@sublist2
 15557  00EC56  26D9               	addwf	fsr2l,f,c
 15558  00EC58  0E00               	movlw	high sortDrawerList@sublist2
 15559  00EC5A  22DA               	addwfc	fsr2h,f,c
 15560  00EC5C  5031               	movf	sortDrawerList@count1,w,c
 15561  00EC5E  2437               	addwf	sortDrawerList@i,w,c
 15562  00EC60  6E05               	movwf	??_sortDrawerList& (0+255),c
 15563  00EC62  5032               	movf	sortDrawerList@count1+1,w,c
 15564  00EC64  2038               	addwfc	sortDrawerList@i+1,w,c
 15565  00EC66  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15566  00EC68  90D8               	bcf	status,0,c
 15567  00EC6A  3605               	rlcf	??_sortDrawerList,f,c
 15568  00EC6C  3606               	rlcf	??_sortDrawerList+1,f,c
 15569  00EC6E  5005               	movf	??_sortDrawerList,w,c
 15570  00EC70  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15571  00EC72  6EE1               	movwf	fsr1l,c
 15572  00EC74  5006               	movf	??_sortDrawerList+1,w,c
 15573  00EC76  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15574  00EC78  6EE2               	movwf	fsr1h,c
 15575  00EC7A  CFDE FFE6          	movff	postinc2,postinc1
 15576  00EC7E  CFDD FFE5          	movff	postdec2,postdec1
 15577  00EC82  4A37               	infsnz	sortDrawerList@i,f,c
 15578  00EC84  2A38               	incf	sortDrawerList@i+1,f,c
 15579  00EC86                     l241:
 15580  00EC86  502D               	movf	sortDrawerList@count2,w,c
 15581  00EC88  5C37               	subwf	sortDrawerList@i,w,c
 15582  00EC8A  502E               	movf	sortDrawerList@count2+1,w,c
 15583  00EC8C  5838               	subwfb	sortDrawerList@i+1,w,c
 15584  00EC8E  A0D8               	btfss	status,0,c
 15585  00EC90  D7DC               	goto	l242
 15586                           
 15587                           ;operationMode.c: 176: }
 15588                           ;operationMode.c: 177: for (i=0; i<count3; i++){
 15589  00EC92  0E00               	movlw	0
 15590  00EC94  6E38               	movwf	sortDrawerList@i+1,c
 15591  00EC96  0E00               	movlw	0
 15592  00EC98  6E37               	movwf	sortDrawerList@i,c
 15593  00EC9A  D022               	goto	l244
 15594  00EC9C                     
 15595                           ;operationMode.c: 178: sortedDrawerTable[i+count1+count2] = sublist3[i];
 15596  00EC9C  90D8               	bcf	status,0,c
 15597  00EC9E  3437               	rlcf	sortDrawerList@i,w,c
 15598  00ECA0  6ED9               	movwf	fsr2l,c
 15599  00ECA2  3438               	rlcf	sortDrawerList@i+1,w,c
 15600  00ECA4  6EDA               	movwf	fsr2h,c
 15601  00ECA6  0E23               	movlw	low sortDrawerList@sublist3
 15602  00ECA8  26D9               	addwf	fsr2l,f,c
 15603  00ECAA  0E00               	movlw	high sortDrawerList@sublist3
 15604  00ECAC  22DA               	addwfc	fsr2h,f,c
 15605  00ECAE  5031               	movf	sortDrawerList@count1,w,c
 15606  00ECB0  2437               	addwf	sortDrawerList@i,w,c
 15607  00ECB2  6E05               	movwf	??_sortDrawerList& (0+255),c
 15608  00ECB4  5032               	movf	sortDrawerList@count1+1,w,c
 15609  00ECB6  2038               	addwfc	sortDrawerList@i+1,w,c
 15610  00ECB8  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15611  00ECBA  502D               	movf	sortDrawerList@count2,w,c
 15612  00ECBC  2605               	addwf	??_sortDrawerList,f,c
 15613  00ECBE  502E               	movf	sortDrawerList@count2+1,w,c
 15614  00ECC0  2206               	addwfc	??_sortDrawerList+1,f,c
 15615  00ECC2  90D8               	bcf	status,0,c
 15616  00ECC4  3605               	rlcf	??_sortDrawerList,f,c
 15617  00ECC6  3606               	rlcf	??_sortDrawerList+1,f,c
 15618  00ECC8  5005               	movf	??_sortDrawerList,w,c
 15619  00ECCA  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15620  00ECCC  6EE1               	movwf	fsr1l,c
 15621  00ECCE  5006               	movf	??_sortDrawerList+1,w,c
 15622  00ECD0  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15623  00ECD2  6EE2               	movwf	fsr1h,c
 15624  00ECD4  CFDE FFE6          	movff	postinc2,postinc1
 15625  00ECD8  CFDD FFE5          	movff	postdec2,postdec1
 15626  00ECDC  4A37               	infsnz	sortDrawerList@i,f,c
 15627  00ECDE  2A38               	incf	sortDrawerList@i+1,f,c
 15628  00ECE0                     l244:
 15629  00ECE0  5033               	movf	sortDrawerList@count3,w,c
 15630  00ECE2  5C37               	subwf	sortDrawerList@i,w,c
 15631  00ECE4  5034               	movf	sortDrawerList@count3+1,w,c
 15632  00ECE6  5838               	subwfb	sortDrawerList@i+1,w,c
 15633  00ECE8  A0D8               	btfss	status,0,c
 15634  00ECEA  D7D8               	goto	l245
 15635                           
 15636                           ;operationMode.c: 179: }
 15637                           ;operationMode.c: 180: for (i=0; i<count4; i++){
 15638  00ECEC  0E00               	movlw	0
 15639  00ECEE  6E38               	movwf	sortDrawerList@i+1,c
 15640  00ECF0  0E00               	movlw	0
 15641  00ECF2  6E37               	movwf	sortDrawerList@i,c
 15642  00ECF4  D026               	goto	l247
 15643  00ECF6                     
 15644                           ;operationMode.c: 181: sortedDrawerTable[i+count1+count2+count3] = sublist4[i];
 15645  00ECF6  90D8               	bcf	status,0,c
 15646  00ECF8  3437               	rlcf	sortDrawerList@i,w,c
 15647  00ECFA  6ED9               	movwf	fsr2l,c
 15648  00ECFC  3438               	rlcf	sortDrawerList@i+1,w,c
 15649  00ECFE  6EDA               	movwf	fsr2h,c
 15650  00ED00  0E13               	movlw	low sortDrawerList@sublist4
 15651  00ED02  26D9               	addwf	fsr2l,f,c
 15652  00ED04  0E00               	movlw	high sortDrawerList@sublist4
 15653  00ED06  22DA               	addwfc	fsr2h,f,c
 15654  00ED08  5031               	movf	sortDrawerList@count1,w,c
 15655  00ED0A  2437               	addwf	sortDrawerList@i,w,c
 15656  00ED0C  6E05               	movwf	??_sortDrawerList& (0+255),c
 15657  00ED0E  5032               	movf	sortDrawerList@count1+1,w,c
 15658  00ED10  2038               	addwfc	sortDrawerList@i+1,w,c
 15659  00ED12  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 15660  00ED14  502D               	movf	sortDrawerList@count2,w,c
 15661  00ED16  2605               	addwf	??_sortDrawerList,f,c
 15662  00ED18  502E               	movf	sortDrawerList@count2+1,w,c
 15663  00ED1A  2206               	addwfc	??_sortDrawerList+1,f,c
 15664  00ED1C  5033               	movf	sortDrawerList@count3,w,c
 15665  00ED1E  2605               	addwf	??_sortDrawerList,f,c
 15666  00ED20  5034               	movf	sortDrawerList@count3+1,w,c
 15667  00ED22  2206               	addwfc	??_sortDrawerList+1,f,c
 15668  00ED24  90D8               	bcf	status,0,c
 15669  00ED26  3605               	rlcf	??_sortDrawerList,f,c
 15670  00ED28  3606               	rlcf	??_sortDrawerList+1,f,c
 15671  00ED2A  5005               	movf	??_sortDrawerList,w,c
 15672  00ED2C  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 15673  00ED2E  6EE1               	movwf	fsr1l,c
 15674  00ED30  5006               	movf	??_sortDrawerList+1,w,c
 15675  00ED32  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 15676  00ED34  6EE2               	movwf	fsr1h,c
 15677  00ED36  CFDE FFE6          	movff	postinc2,postinc1
 15678  00ED3A  CFDD FFE5          	movff	postdec2,postdec1
 15679  00ED3E  4A37               	infsnz	sortDrawerList@i,f,c
 15680  00ED40  2A38               	incf	sortDrawerList@i+1,f,c
 15681  00ED42                     l247:
 15682  00ED42  502B               	movf	sortDrawerList@count4,w,c
 15683  00ED44  5C37               	subwf	sortDrawerList@i,w,c
 15684  00ED46  502C               	movf	sortDrawerList@count4+1,w,c
 15685  00ED48  5838               	subwfb	sortDrawerList@i+1,w,c
 15686  00ED4A  B0D8               	btfsc	status,0,c
 15687  00ED4C  0012               	return	
 15688  00ED4E  D7D3               	goto	l248
 15689  00ED50                     __end_of_sortDrawerList:
 15690                           	opt stack 0
 15691                           tblptru	equ	0xFF8
 15692                           tblptrh	equ	0xFF7
 15693                           tblptrl	equ	0xFF6
 15694                           tablat	equ	0xFF5
 15695                           prodh	equ	0xFF4
 15696                           prodl	equ	0xFF3
 15697                           postinc0	equ	0xFEE
 15698                           wreg	equ	0xFE8
 15699                           postinc1	equ	0xFE6
 15700                           postdec1	equ	0xFE5
 15701                           plusw1	equ	0xFE3
 15702                           fsr1h	equ	0xFE2
 15703                           fsr1l	equ	0xFE1
 15704                           indf2	equ	0xFDF
 15705                           postinc2	equ	0xFDE
 15706                           postdec2	equ	0xFDD
 15707                           plusw2	equ	0xFDB
 15708                           fsr2h	equ	0xFDA
 15709                           fsr2l	equ	0xFD9
 15710                           status	equ	0xFD8
 15711                           
 15712 ;; *************** function _printf *****************
 15713 ;; Defined at:
 15714 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  f               2   12[COMRAM] PTR const unsigned char 
 15717 ;;		 -> STR_152(11), STR_151(13), STR_150(11), STR_149(13), 
 15718 ;;		 -> STR_148(11), STR_147(15), STR_146(15), STR_145(5), 
 15719 ;;		 -> STR_144(11), STR_143(8), STR_142(11), STR_141(14), 
 15720 ;;		 -> STR_140(17), STR_139(8), STR_138(15), STR_137(16), 
 15721 ;;		 -> STR_136(10), STR_135(8), STR_134(15), STR_133(16), 
 15722 ;;		 -> STR_132(10), STR_131(16), STR_130(16), STR_129(17), 
 15723 ;;		 -> STR_128(13), STR_127(17), STR_126(14), STR_125(11), 
 15724 ;;		 -> STR_124(11), STR_123(15), STR_122(15), STR_121(10), 
 15725 ;;		 -> STR_120(13), STR_119(16), STR_118(16), STR_117(17), 
 15726 ;;		 -> STR_116(17), STR_115(8), STR_114(15), STR_113(15), 
 15727 ;;		 -> STR_112(11), STR_111(14), STR_110(16), STR_109(16), 
 15728 ;;		 -> STR_108(11), STR_107(14), STR_106(16), STR_105(16), 
 15729 ;;		 -> STR_104(16), STR_103(13), STR_102(5), STR_101(11), 
 15730 ;;		 -> STR_100(15), STR_99(17), STR_98(18), STR_97(15), 
 15731 ;;		 -> STR_96(11), STR_95(7), STR_94(3), STR_93(16), 
 15732 ;;		 -> STR_92(8), STR_91(16), STR_90(15), STR_89(6), 
 15733 ;;		 -> STR_88(14), STR_87(17), STR_86(7), STR_85(9), 
 15734 ;;		 -> STR_84(17), STR_83(11), STR_82(17), STR_81(14), 
 15735 ;;		 -> STR_80(17), STR_79(11), STR_78(15), STR_77(11), 
 15736 ;;		 -> STR_76(8), STR_44(11), STR_43(16), STR_42(4), 
 15737 ;;		 -> STR_41(13), STR_40(10), STR_39(10), STR_38(15), 
 15738 ;;		 -> STR_37(9), STR_36(9), STR_35(10), STR_34(10), 
 15739 ;;		 -> STR_2(16), STR_1(8), 
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;  idx             1   26[COMRAM] unsigned char 
 15742 ;;  tmpval          4    0        struct .
 15743 ;;  width           2   37[COMRAM] int 
 15744 ;;  val             2   34[COMRAM] unsigned int 
 15745 ;;  len             2   32[COMRAM] unsigned int 
 15746 ;;  ap              2   30[COMRAM] PTR void [1]
 15747 ;;		 -> ?_printf(2), 
 15748 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 15749 ;;		 -> STR_153(7), STR_75(5), STR_74(4), STR_73(4), 
 15750 ;;		 -> STR_72(4), STR_71(4), STR_70(3), STR_69(3), 
 15751 ;;		 -> STR_68(3), STR_67(3), STR_66(3), STR_65(2), 
 15752 ;;		 -> STR_64(2), STR_63(2), STR_62(5), STR_61(5), 
 15753 ;;		 -> STR_60(5), STR_59(5), STR_58(5), STR_57(4), 
 15754 ;;		 -> STR_56(4), STR_55(4), STR_54(4), STR_53(4), 
 15755 ;;		 -> STR_52(4), STR_51(4), STR_50(3), STR_49(3), 
 15756 ;;		 -> STR_48(3), STR_47(2), STR_46(2), STR_45(2), 
 15757 ;;		 -> STR_33(5), STR_32(4), STR_31(4), STR_30(4), 
 15758 ;;		 -> STR_29(4), STR_28(3), STR_27(3), STR_26(3), 
 15759 ;;		 -> STR_25(3), STR_24(3), STR_23(2), STR_22(2), 
 15760 ;;		 -> STR_21(2), STR_20(5), STR_19(5), STR_18(5), 
 15761 ;;		 -> STR_17(5), STR_16(5), STR_15(4), STR_14(4), 
 15762 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(4), 
 15763 ;;		 -> STR_9(4), STR_8(3), STR_7(3), STR_6(3), 
 15764 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
 15765 ;;  c               1   39[COMRAM] char 
 15766 ;;  flag            1   36[COMRAM] unsigned char 
 15767 ;;  prec            1   27[COMRAM] char 
 15768 ;; Return value:  Size  Location     Type
 15769 ;;                  2   12[COMRAM] int 
 15770 ;; Registers used:
 15771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15772 ;; Tracked objects:
 15773 ;;		On entry : 0/0
 15774 ;;		On exit  : 0/0
 15775 ;;		Unchanged: 0/0
 15776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15777 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15780 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15781 ;;Total ram usage:       28 bytes
 15782 ;; Hardware stack levels used:    1
 15783 ;; Hardware stack levels required when called:    2
 15784 ;; This function calls:
 15785 ;;		___lwdiv
 15786 ;;		___lwmod
 15787 ;;		___wmul
 15788 ;;		_isdigit
 15789 ;;		_putch
 15790 ;; This function is called by:
 15791 ;;		_main
 15792 ;;		_mainOperation
 15793 ;;		_viewLogs
 15794 ;;		_displayLogs
 15795 ;;		_food_press
 15796 ;;		_diet_press
 15797 ;;		_which_drawer
 15798 ;;		_standbyMode
 15799 ;; This function uses a non-reentrant model
 15800 ;;
 15801                           
 15802                           	psect	text27
 15803  00C218                     __ptext27:
 15804                           	opt stack 0
 15805  00C218                     _printf:
 15806                           	opt stack 26
 15807                           
 15808                           ;doprnt.c: 466: va_list ap;
 15809                           ;doprnt.c: 499: signed char c;
 15810                           ;doprnt.c: 501: int width;
 15811                           ;doprnt.c: 506: signed char prec;
 15812                           ;doprnt.c: 508: unsigned char flag;
 15813                           ;doprnt.c: 523: union {
 15814                           ;doprnt.c: 524: unsigned long vd;
 15815                           ;doprnt.c: 525: double integ;
 15816                           ;doprnt.c: 526: } tmpval;
 15817                           ;doprnt.c: 528: unsigned int val;
 15818                           ;doprnt.c: 529: unsigned len;
 15819                           ;doprnt.c: 530: const char * cp;
 15820                           ;doprnt.c: 533: *ap = __va_start();
 15821                           
 15822                           ;incstack = 0
 15823  00C218  0E0F               	movlw	low (?_printf+2)
 15824  00C21A  6E1F               	movwf	printf@ap,c
 15825  00C21C  0E00               	movlw	high (?_printf+2)
 15826  00C21E  6E20               	movwf	printf@ap+1,c
 15827                           
 15828                           ;doprnt.c: 536: while(c = *f++) {
 15829  00C220  D1E6               	goto	u7510
 15830  00C222                     
 15831                           ;doprnt.c: 538: if(c != '%')
 15832  00C222  0E25               	movlw	37
 15833  00C224  1828               	xorwf	printf@c,w,c
 15834  00C226  B4D8               	btfsc	status,2,c
 15835  00C228  D004               	goto	l1592
 15836                           
 15837                           ;doprnt.c: 540: {
 15838                           ;doprnt.c: 541: (putch(c) );
 15839  00C22A  5028               	movf	printf@c,w,c
 15840  00C22C  EC2A  F04D         	call	_putch
 15841                           
 15842                           ;doprnt.c: 542: continue;
 15843  00C230  D1DE               	goto	u7510
 15844  00C232                     l1592:
 15845                           
 15846                           ;doprnt.c: 543: }
 15847                           ;doprnt.c: 546: width = 0;
 15848  00C232  0E00               	movlw	0
 15849  00C234  6E27               	movwf	printf@width+1,c
 15850  00C236  0E00               	movlw	0
 15851  00C238  6E26               	movwf	printf@width,c
 15852                           
 15853                           ;doprnt.c: 548: flag = 0;
 15854  00C23A  0E00               	movlw	0
 15855  00C23C  6E25               	movwf	printf@flag,c
 15856                           
 15857                           ;doprnt.c: 551: switch(*f) {
 15858                           
 15859                           ;doprnt.c: 550: for(;;) {
 15860  00C23E  D003               	goto	l1594
 15861  00C240                     
 15862                           ;doprnt.c: 580: flag |= 0x04;
 15863  00C240  8425               	bsf	printf@flag,2,c
 15864                           
 15865                           ;doprnt.c: 581: f++;
 15866  00C242  4A0D               	infsnz	printf@f,f,c
 15867  00C244  2A0E               	incf	printf@f+1,f,c
 15868  00C246                     l1594:
 15869  00C246  C00D  FFF6         	movff	printf@f,tblptrl
 15870  00C24A  C00E  FFF7         	movff	printf@f+1,tblptrh
 15871  00C24E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15872  00C24E  6AF8               	clrf	tblptru,c
 15873  00C250                     	endif
 15874  00C250                     	if	0	;tblptru may be non-zero
 15875  00C250                     	endif
 15876  00C250  0008               	tblrd		*
 15877  00C252  50F5               	movf	tablat,w,c
 15878                           
 15879                           ; Switch size 1, requested type "space"
 15880                           ; Number of cases is 1, Range of values is 48 to 48
 15881                           ; switch strategies available:
 15882                           ; Name         Instructions Cycles
 15883                           ; simple_byte            4     3 (average)
 15884                           ;	Chosen strategy is simple_byte
 15885  00C254  0A30               	xorlw	48	; case 48
 15886  00C256  B4D8               	btfsc	status,2,c
 15887  00C258  D7F3               	goto	l1595
 15888                           
 15889                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15890                           
 15891                           ;doprnt.c: 586: }
 15892                           
 15893                           ;doprnt.c: 585: break;
 15894  00C25A  C00D  FFF6         	movff	printf@f,tblptrl
 15895  00C25E  C00E  FFF7         	movff	printf@f+1,tblptrh
 15896  00C262                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15897  00C262  6AF8               	clrf	tblptru,c
 15898  00C264                     	endif
 15899  00C264                     	if	0	;tblptru may be non-zero
 15900  00C264                     	endif
 15901  00C264  0008               	tblrd		*
 15902  00C266  50F5               	movf	tablat,w,c
 15903  00C268  EC34  F04D         	call	_isdigit
 15904  00C26C  A0D8               	btfss	status,0,c
 15905  00C26E  D092               	goto	l1602
 15906                           
 15907                           ;doprnt.c: 598: width = 0;
 15908  00C270  0E00               	movlw	0
 15909  00C272  6E27               	movwf	printf@width+1,c
 15910  00C274  0E00               	movlw	0
 15911  00C276  6E26               	movwf	printf@width,c
 15912  00C278                     
 15913                           ;doprnt.c: 600: width *= 10;
 15914  00C278  C026  F001         	movff	printf@width,___wmul@multiplier
 15915  00C27C  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 15916  00C280  0E00               	movlw	0
 15917  00C282  6E04               	movwf	___wmul@multiplicand+1,c
 15918  00C284  0E0A               	movlw	10
 15919  00C286  6E03               	movwf	___wmul@multiplicand,c
 15920  00C288  EC68  F04D         	call	___wmul	;wreg free
 15921  00C28C  C001  F026         	movff	?___wmul,printf@width
 15922  00C290  C002  F027         	movff	?___wmul+1,printf@width+1
 15923                           
 15924                           ;doprnt.c: 601: width += *f++ - '0';
 15925  00C294  0ED0               	movlw	208
 15926  00C296  6E17               	movwf	??_printf& (0+255),c
 15927  00C298  0EFF               	movlw	255
 15928  00C29A  6E18               	movwf	(??_printf+1)& (0+255),c
 15929  00C29C  C00D  FFF6         	movff	printf@f,tblptrl
 15930  00C2A0  C00E  FFF7         	movff	printf@f+1,tblptrh
 15931  00C2A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15932  00C2A4  6AF8               	clrf	tblptru,c
 15933  00C2A6                     	endif
 15934  00C2A6                     	if	0	;tblptru may be non-zero
 15935  00C2A6                     	endif
 15936  00C2A6  0008               	tblrd		*
 15937  00C2A8  50F5               	movf	tablat,w,c
 15938  00C2AA  6E19               	movwf	(??_printf+2)& (0+255),c
 15939  00C2AC  6A1A               	clrf	(??_printf+3)& (0+255),c
 15940  00C2AE  5017               	movf	??_printf,w,c
 15941  00C2B0  2619               	addwf	??_printf+2,f,c
 15942  00C2B2  5018               	movf	??_printf+1,w,c
 15943  00C2B4  221A               	addwfc	??_printf+3,f,c
 15944  00C2B6  5019               	movf	??_printf+2,w,c
 15945  00C2B8  2626               	addwf	printf@width,f,c
 15946  00C2BA  501A               	movf	??_printf+3,w,c
 15947  00C2BC  2227               	addwfc	printf@width+1,f,c
 15948  00C2BE  4A0D               	infsnz	printf@f,f,c
 15949  00C2C0  2A0E               	incf	printf@f+1,f,c
 15950                           
 15951                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15952  00C2C2  C00D  FFF6         	movff	printf@f,tblptrl
 15953  00C2C6  C00E  FFF7         	movff	printf@f+1,tblptrh
 15954  00C2CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15955  00C2CA  6AF8               	clrf	tblptru,c
 15956  00C2CC                     	endif
 15957  00C2CC                     	if	0	;tblptru may be non-zero
 15958  00C2CC                     	endif
 15959  00C2CC  0008               	tblrd		*
 15960  00C2CE  50F5               	movf	tablat,w,c
 15961  00C2D0  EC34  F04D         	call	_isdigit
 15962  00C2D4  A0D8               	btfss	status,0,c
 15963  00C2D6  D05E               	goto	l1602
 15964  00C2D8  D7CF               	goto	l1600
 15965  00C2DA                     
 15966                           ;doprnt.c: 721: flag |= 0x80;
 15967  00C2DA  8E25               	bsf	printf@flag,7,c
 15968                           
 15969                           ;doprnt.c: 723: break;
 15970  00C2DC  D076               	goto	l1607
 15971  00C2DE                     
 15972                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15973  00C2DE  C01F  FFD9         	movff	printf@ap,fsr2l
 15974  00C2E2  C020  FFDA         	movff	printf@ap+1,fsr2h
 15975  00C2E6  CFDE F01D          	movff	postinc2,printf@cp
 15976  00C2EA  CFDD F01E          	movff	postdec2,printf@cp+1
 15977  00C2EE  0E02               	movlw	2
 15978  00C2F0  261F               	addwf	printf@ap,f,c
 15979  00C2F2  0E00               	movlw	0
 15980  00C2F4  2220               	addwfc	printf@ap+1,f,c
 15981                           
 15982                           ;doprnt.c: 740: if(!cp)
 15983  00C2F6  501D               	movf	printf@cp,w,c
 15984  00C2F8  101E               	iorwf	printf@cp+1,w,c
 15985  00C2FA  A4D8               	btfss	status,2,c
 15986  00C2FC  D004               	goto	l1610
 15987                           
 15988                           ;doprnt.c: 741: cp = "(null)";
 15989  00C2FE  0E9F               	movlw	low STR_153
 15990  00C300  6E1D               	movwf	printf@cp,c
 15991  00C302  0EFF               	movlw	high STR_153
 15992  00C304  6E1E               	movwf	printf@cp+1,c
 15993  00C306                     l1610:
 15994                           
 15995                           ;doprnt.c: 745: len = 0;
 15996  00C306  0E00               	movlw	0
 15997  00C308  6E22               	movwf	printf@len+1,c
 15998  00C30A  0E00               	movlw	0
 15999  00C30C  6E21               	movwf	printf@len,c
 16000                           
 16001                           ;doprnt.c: 746: while(cp[len])
 16002  00C30E  D002               	goto	l1611
 16003  00C310                     
 16004                           ;doprnt.c: 747: len++;
 16005  00C310  4A21               	infsnz	printf@len,f,c
 16006  00C312  2A22               	incf	printf@len+1,f,c
 16007  00C314                     l1611:
 16008  00C314  5021               	movf	printf@len,w,c
 16009  00C316  241D               	addwf	printf@cp,w,c
 16010  00C318  6E17               	movwf	??_printf& (0+255),c
 16011  00C31A  5022               	movf	printf@len+1,w,c
 16012  00C31C  201E               	addwfc	printf@cp+1,w,c
 16013  00C31E  6E18               	movwf	(??_printf+1)& (0+255),c
 16014  00C320  C017  FFF6         	movff	??_printf,tblptrl
 16015  00C324  C018  FFF7         	movff	??_printf+1,tblptrh
 16016  00C328                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16017  00C328  6AF8               	clrf	tblptru,c
 16018  00C32A                     	endif
 16019  00C32A                     	if	0	;tblptru may be non-zero
 16020  00C32A                     	endif
 16021  00C32A  0008               	tblrd		*
 16022  00C32C  50F5               	movf	tablat,w,c
 16023  00C32E  0900               	iorlw	0
 16024  00C330  A4D8               	btfss	status,2,c
 16025  00C332  D7EE               	goto	l1612
 16026                           
 16027                           ;doprnt.c: 757: if(width > len)
 16028  00C334  5026               	movf	printf@width,w,c
 16029  00C336  5C21               	subwf	printf@len,w,c
 16030  00C338  5027               	movf	printf@width+1,w,c
 16031  00C33A  5822               	subwfb	printf@len+1,w,c
 16032  00C33C  B0D8               	btfsc	status,0,c
 16033  00C33E  D005               	goto	l1614
 16034                           
 16035                           ;doprnt.c: 758: width -= len;
 16036  00C340  5021               	movf	printf@len,w,c
 16037  00C342  5E26               	subwf	printf@width,f,c
 16038  00C344  5022               	movf	printf@len+1,w,c
 16039  00C346  5A27               	subwfb	printf@width+1,f,c
 16040  00C348  D008               	goto	l1616
 16041  00C34A                     l1614:
 16042                           
 16043                           ;doprnt.c: 759: else
 16044                           ;doprnt.c: 760: width = 0;
 16045  00C34A  0E00               	movlw	0
 16046  00C34C  6E27               	movwf	printf@width+1,c
 16047  00C34E  0E00               	movlw	0
 16048  00C350  6E26               	movwf	printf@width,c
 16049                           
 16050                           ;doprnt.c: 764: while(width--)
 16051  00C352  D003               	goto	l1616
 16052  00C354                     l6986:
 16053                           
 16054                           ;doprnt.c: 765: (putch(' ') );
 16055  00C354  0E20               	movlw	32
 16056  00C356  EC2A  F04D         	call	_putch
 16057  00C35A                     l1616:
 16058  00C35A  0626               	decf	printf@width,f,c
 16059  00C35C  A0D8               	btfss	status,0,c
 16060  00C35E  0627               	decf	printf@width+1,f,c
 16061  00C360  2826               	incf	printf@width,w,c
 16062  00C362  E1F8               	bnz	l6986
 16063  00C364  2827               	incf	printf@width+1,w,c
 16064  00C366  B4D8               	btfsc	status,2,c
 16065  00C368  D00C               	goto	l1619
 16066  00C36A  D7F4               	goto	l1617
 16067  00C36C                     l6990:
 16068                           
 16069                           ;doprnt.c: 768: (putch(*cp++) );
 16070  00C36C  C01D  FFF6         	movff	printf@cp,tblptrl
 16071  00C370  C01E  FFF7         	movff	printf@cp+1,tblptrh
 16072  00C374                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16073  00C374  6AF8               	clrf	tblptru,c
 16074  00C376                     	endif
 16075  00C376                     	if	0	;tblptru may be non-zero
 16076  00C376                     	endif
 16077  00C376  0008               	tblrd		*
 16078  00C378  50F5               	movf	tablat,w,c
 16079  00C37A  EC2A  F04D         	call	_putch
 16080  00C37E  4A1D               	infsnz	printf@cp,f,c
 16081  00C380  2A1E               	incf	printf@cp+1,f,c
 16082  00C382                     l1619:
 16083  00C382  0621               	decf	printf@len,f,c
 16084  00C384  A0D8               	btfss	status,0,c
 16085  00C386  0622               	decf	printf@len+1,f,c
 16086  00C388  2821               	incf	printf@len,w,c
 16087  00C38A  E1F0               	bnz	l6990
 16088  00C38C  2822               	incf	printf@len+1,w,c
 16089  00C38E  B4D8               	btfsc	status,2,c
 16090  00C390  D12E               	goto	u7510
 16091  00C392  D7EC               	goto	l1620
 16092  00C394                     l1602:
 16093  00C394  C00D  FFF6         	movff	printf@f,tblptrl
 16094  00C398  C00E  FFF7         	movff	printf@f+1,tblptrh
 16095  00C39C  4A0D               	infsnz	printf@f,f,c
 16096  00C39E  2A0E               	incf	printf@f+1,f,c
 16097  00C3A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16098  00C3A0  6AF8               	clrf	tblptru,c
 16099  00C3A2                     	endif
 16100  00C3A2                     	if	0	;tblptru may be non-zero
 16101  00C3A2                     	endif
 16102  00C3A2  0008               	tblrd		*
 16103  00C3A4  CFF5 F028          	movff	tablat,printf@c
 16104  00C3A8  5028               	movf	printf@c,w,c
 16105                           
 16106                           ; Switch size 1, requested type "space"
 16107                           ; Number of cases is 5, Range of values is 0 to 120
 16108                           ; switch strategies available:
 16109                           ; Name         Instructions Cycles
 16110                           ; simple_byte           16     9 (average)
 16111                           ;	Chosen strategy is simple_byte
 16112  00C3AA  0A00               	xorlw	0	; case 0
 16113  00C3AC  B4D8               	btfsc	status,2,c
 16114  00C3AE  0012               	return	
 16115  00C3B0  0A64               	xorlw	100	; case 100
 16116  00C3B2  B4D8               	btfsc	status,2,c
 16117  00C3B4  D00A               	goto	l1607
 16118  00C3B6  0A0D               	xorlw	13	; case 105
 16119  00C3B8  B4D8               	btfsc	status,2,c
 16120  00C3BA  D007               	goto	l1607
 16121  00C3BC  0A1A               	xorlw	26	; case 115
 16122  00C3BE  B4D8               	btfsc	status,2,c
 16123  00C3C0  D78E               	goto	l1609
 16124  00C3C2  0A0B               	xorlw	11	; case 120
 16125  00C3C4  B4D8               	btfsc	status,2,c
 16126  00C3C6  D789               	goto	l1608
 16127  00C3C8  D112               	goto	u7510
 16128  00C3CA                     l1607:
 16129                           
 16130                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 16131  00C3CA  BE25               	btfsc	printf@flag,7,c
 16132  00C3CC  D015               	goto	l1623
 16133                           
 16134                           ;doprnt.c: 1253: {
 16135                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 16136  00C3CE  C01F  FFD9         	movff	printf@ap,fsr2l
 16137  00C3D2  C020  FFDA         	movff	printf@ap+1,fsr2h
 16138  00C3D6  CFDE F023          	movff	postinc2,printf@val
 16139  00C3DA  CFDD F024          	movff	postdec2,printf@val+1
 16140  00C3DE  0E02               	movlw	2
 16141  00C3E0  261F               	addwf	printf@ap,f,c
 16142  00C3E2  0E00               	movlw	0
 16143  00C3E4  2220               	addwfc	printf@ap+1,f,c
 16144                           
 16145                           ;doprnt.c: 1261: if((int)val < 0) {
 16146  00C3E6  AE24               	btfss	printf@val+1,7,c
 16147  00C3E8  D04A               	goto	l1626
 16148                           
 16149                           ;doprnt.c: 1262: flag |= 0x03;
 16150  00C3EA  0E03               	movlw	3
 16151  00C3EC  1225               	iorwf	printf@flag,f,c
 16152                           
 16153                           ;doprnt.c: 1263: val = -val;
 16154  00C3EE  6C23               	negf	printf@val,c
 16155  00C3F0  1E24               	comf	printf@val+1,f,c
 16156  00C3F2  B0D8               	btfsc	status,0,c
 16157  00C3F4  2A24               	incf	printf@val+1,f,c
 16158                           
 16159                           ;doprnt.c: 1264: }
 16160                           ;doprnt.c: 1266: }
 16161  00C3F6  D043               	goto	l1626
 16162  00C3F8                     l1623:
 16163                           
 16164                           ;doprnt.c: 1268: else
 16165                           ;doprnt.c: 1273: {
 16166                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 16167  00C3F8  C01F  FFD9         	movff	printf@ap,fsr2l
 16168  00C3FC  C020  FFDA         	movff	printf@ap+1,fsr2h
 16169  00C400  CFDE F023          	movff	postinc2,printf@val
 16170  00C404  CFDD F024          	movff	postdec2,printf@val+1
 16171  00C408  0E02               	movlw	2
 16172  00C40A  261F               	addwf	printf@ap,f,c
 16173  00C40C  0E00               	movlw	0
 16174  00C40E  2220               	addwfc	printf@ap+1,f,c
 16175                           
 16176                           ;doprnt.c: 1287: }
 16177                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 16178  00C410  D036               	goto	l1626
 16179  00C412                     
 16180                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 16181  00C412  0E01               	movlw	1
 16182  00C414  6E28               	movwf	printf@c,c
 16183  00C416                     l7016:
 16184  00C416  0E05               	movlw	5
 16185  00C418  1828               	xorwf	printf@c,w,c
 16186  00C41A  B4D8               	btfsc	status,2,c
 16187  00C41C  D038               	goto	l1631
 16188                           
 16189                           ;doprnt.c: 1306: if(val < dpowers[c])
 16190  00C41E  5028               	movf	printf@c,w,c
 16191  00C420  0D02               	mullw	2
 16192  00C422  0E47               	movlw	low _dpowers
 16193  00C424  24F3               	addwf	prodl,w,c
 16194  00C426  6EF6               	movwf	tblptrl,c
 16195  00C428  0EFC               	movlw	high _dpowers
 16196  00C42A  20F4               	addwfc	prodh,w,c
 16197  00C42C  6EF7               	movwf	tblptrh,c
 16198  00C42E                     	if	1	;There are 3 active tblptr bytes
 16199  00C42E  6AF8               	clrf	tblptru,c
 16200  00C430  0E00               	movlw	low (__mediumconst shr (0+16))
 16201  00C432  22F8               	addwfc	tblptru,f,c
 16202  00C434                     	endif
 16203  00C434  0009               	tblrd		*+
 16204  00C436  50F5               	movf	tablat,w,c
 16205  00C438  5C23               	subwf	printf@val,w,c
 16206  00C43A  0009               	tblrd		*+
 16207  00C43C  50F5               	movf	tablat,w,c
 16208  00C43E  5824               	subwfb	printf@val+1,w,c
 16209  00C440  A0D8               	btfss	status,0,c
 16210  00C442  D025               	goto	l1631
 16211                           
 16212                           ;doprnt.c: 1307: break;
 16213  00C444  2A28               	incf	printf@c,f,c
 16214  00C446  D7E7               	goto	l7016
 16215  00C448                     
 16216                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 16217  00C448  0E01               	movlw	1
 16218  00C44A  6E28               	movwf	printf@c,c
 16219  00C44C                     l7030:
 16220  00C44C  0E04               	movlw	4
 16221  00C44E  1828               	xorwf	printf@c,w,c
 16222  00C450  B4D8               	btfsc	status,2,c
 16223  00C452  D01D               	goto	l1631
 16224                           
 16225                           ;doprnt.c: 1317: if(val < hexpowers[c])
 16226  00C454  5028               	movf	printf@c,w,c
 16227  00C456  0D02               	mullw	2
 16228  00C458  0E51               	movlw	low _hexpowers
 16229  00C45A  24F3               	addwf	prodl,w,c
 16230  00C45C  6EF6               	movwf	tblptrl,c
 16231  00C45E  0EFC               	movlw	high _hexpowers
 16232  00C460  20F4               	addwfc	prodh,w,c
 16233  00C462  6EF7               	movwf	tblptrh,c
 16234  00C464                     	if	1	;There are 3 active tblptr bytes
 16235  00C464  6AF8               	clrf	tblptru,c
 16236  00C466  0E00               	movlw	low (__mediumconst shr (0+16))
 16237  00C468  22F8               	addwfc	tblptru,f,c
 16238  00C46A                     	endif
 16239  00C46A  0009               	tblrd		*+
 16240  00C46C  50F5               	movf	tablat,w,c
 16241  00C46E  5C23               	subwf	printf@val,w,c
 16242  00C470  0009               	tblrd		*+
 16243  00C472  50F5               	movf	tablat,w,c
 16244  00C474  5824               	subwfb	printf@val+1,w,c
 16245  00C476  A0D8               	btfss	status,0,c
 16246  00C478  D00A               	goto	l1631
 16247                           
 16248                           ;doprnt.c: 1318: break;
 16249  00C47A  2A28               	incf	printf@c,f,c
 16250  00C47C  D7E7               	goto	l7030
 16251  00C47E                     l1626:
 16252  00C47E  5025               	movf	printf@flag,w,c
 16253  00C480  0B80               	andlw	128
 16254                           
 16255                           ; Switch size 1, requested type "space"
 16256                           ; Number of cases is 2, Range of values is 0 to 128
 16257                           ; switch strategies available:
 16258                           ; Name         Instructions Cycles
 16259                           ; simple_byte            7     4 (average)
 16260                           ;	Chosen strategy is simple_byte
 16261  00C482  0A00               	xorlw	0	; case 0
 16262  00C484  B4D8               	btfsc	status,2,c
 16263  00C486  D7C5               	goto	l1627
 16264  00C488  0A80               	xorlw	128	; case 128
 16265  00C48A  B4D8               	btfsc	status,2,c
 16266  00C48C  D7DD               	goto	l1632
 16267  00C48E                     l1631:
 16268                           
 16269                           ;doprnt.c: 1345: if(width && flag & 0x03)
 16270  00C48E  5026               	movf	printf@width,w,c
 16271  00C490  1027               	iorwf	printf@width+1,w,c
 16272  00C492  B4D8               	btfsc	status,2,c
 16273  00C494  D009               	goto	l1636
 16274  00C496  C025  F017         	movff	printf@flag,??_printf
 16275  00C49A  0E03               	movlw	3
 16276  00C49C  1617               	andwf	??_printf,f,c
 16277  00C49E  B4D8               	btfsc	status,2,c
 16278  00C4A0  D003               	goto	l1636
 16279                           
 16280                           ;doprnt.c: 1346: width--;
 16281  00C4A2  0626               	decf	printf@width,f,c
 16282  00C4A4  A0D8               	btfss	status,0,c
 16283  00C4A6  0627               	decf	printf@width+1,f,c
 16284  00C4A8                     l1636:
 16285                           
 16286                           ;doprnt.c: 1381: if(width > c)
 16287  00C4A8  0E80               	movlw	128
 16288  00C4AA  BE28               	btfsc	printf@c,7,c
 16289  00C4AC  0E7F               	movlw	127
 16290  00C4AE  6E17               	movwf	??_printf& (0+255),c
 16291  00C4B0  5026               	movf	printf@width,w,c
 16292  00C4B2  5C28               	subwf	printf@c,w,c
 16293  00C4B4  5027               	movf	printf@width+1,w,c
 16294  00C4B6  0A80               	xorlw	128
 16295  00C4B8  5817               	subwfb	??_printf& (0+255),w,c
 16296  00C4BA  B0D8               	btfsc	status,0,c
 16297  00C4BC  D007               	goto	l1637
 16298                           
 16299                           ;doprnt.c: 1382: width -= c;
 16300  00C4BE  5028               	movf	printf@c,w,c
 16301  00C4C0  5E26               	subwf	printf@width,f,c
 16302  00C4C2  0E00               	movlw	0
 16303  00C4C4  BE28               	btfsc	printf@c,7,c
 16304  00C4C6  0EFF               	movlw	255
 16305  00C4C8  5A27               	subwfb	printf@width+1,f,c
 16306  00C4CA  D004               	goto	l1638
 16307  00C4CC                     l1637:
 16308                           
 16309                           ;doprnt.c: 1383: else
 16310                           ;doprnt.c: 1384: width = 0;
 16311  00C4CC  0E00               	movlw	0
 16312  00C4CE  6E27               	movwf	printf@width+1,c
 16313  00C4D0  0E00               	movlw	0
 16314  00C4D2  6E26               	movwf	printf@width,c
 16315  00C4D4                     l1638:
 16316                           
 16317                           ;doprnt.c: 1387: if(flag & 0x04) {
 16318  00C4D4  A425               	btfss	printf@flag,2,c
 16319  00C4D6  D014               	goto	l1639
 16320                           
 16321                           ;doprnt.c: 1392: if(flag & 0x03)
 16322  00C4D8  C025  F017         	movff	printf@flag,??_printf
 16323  00C4DC  0E03               	movlw	3
 16324  00C4DE  1617               	andwf	??_printf,f,c
 16325  00C4E0  B4D8               	btfsc	status,2,c
 16326  00C4E2  D003               	goto	l1640
 16327                           
 16328                           ;doprnt.c: 1393: (putch('-') );
 16329  00C4E4  0E2D               	movlw	45
 16330  00C4E6  EC2A  F04D         	call	_putch
 16331  00C4EA                     l1640:
 16332                           
 16333                           ;doprnt.c: 1415: if(width)
 16334  00C4EA  5026               	movf	printf@width,w,c
 16335  00C4EC  1027               	iorwf	printf@width+1,w,c
 16336  00C4EE  B4D8               	btfsc	status,2,c
 16337  00C4F0  D01E               	goto	l1648
 16338                           
 16339                           ;doprnt.c: 1417: (putch('0') );
 16340                           
 16341                           ;doprnt.c: 1416: do
 16342  00C4F2  0E30               	movlw	48
 16343  00C4F4  EC2A  F04D         	call	_putch
 16344                           
 16345                           ;doprnt.c: 1418: while(--width);
 16346  00C4F8  0626               	decf	printf@width,f,c
 16347  00C4FA  A0D8               	btfss	status,0,c
 16348  00C4FC  0627               	decf	printf@width+1,f,c
 16349  00C4FE  D7F5               	goto	l1640
 16350  00C500                     l1639:
 16351                           
 16352                           ;doprnt.c: 1422: {
 16353                           ;doprnt.c: 1424: if(width
 16354                           ;doprnt.c: 1428: )
 16355  00C500  5026               	movf	printf@width,w,c
 16356  00C502  1027               	iorwf	printf@width+1,w,c
 16357  00C504  B4D8               	btfsc	status,2,c
 16358  00C506  D00A               	goto	u7490
 16359  00C508                     u7480:
 16360                           
 16361                           ;doprnt.c: 1430: (putch(' ') );
 16362                           
 16363                           ;doprnt.c: 1429: do
 16364  00C508  0E20               	movlw	32
 16365  00C50A  EC2A  F04D         	call	_putch
 16366                           
 16367                           ;doprnt.c: 1431: while(--width);
 16368  00C50E  0626               	decf	printf@width,f,c
 16369  00C510  A0D8               	btfss	status,0,c
 16370  00C512  0627               	decf	printf@width+1,f,c
 16371  00C514  5026               	movf	printf@width,w,c
 16372  00C516  1027               	iorwf	printf@width+1,w,c
 16373  00C518  A4D8               	btfss	status,2,c
 16374  00C51A  D7F6               	goto	u7480
 16375  00C51C                     u7490:
 16376                           
 16377                           ;doprnt.c: 1438: if(flag & 0x03)
 16378  00C51C  C025  F017         	movff	printf@flag,??_printf
 16379  00C520  0E03               	movlw	3
 16380  00C522  1617               	andwf	??_printf,f,c
 16381  00C524  B4D8               	btfsc	status,2,c
 16382  00C526  D003               	goto	l1648
 16383                           
 16384                           ;doprnt.c: 1439: (putch('-') );
 16385  00C528  0E2D               	movlw	45
 16386  00C52A  EC2A  F04D         	call	_putch
 16387  00C52E                     l1648:
 16388                           
 16389                           ;doprnt.c: 1469: }
 16390                           ;doprnt.c: 1472: prec = c;
 16391  00C52E  C028  F01C         	movff	printf@c,printf@prec
 16392                           
 16393                           ;doprnt.c: 1474: while(prec--) {
 16394  00C532  D059               	goto	l1649
 16395  00C534                     
 16396                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16397  00C534  501C               	movf	printf@prec,w,c
 16398  00C536  0D02               	mullw	2
 16399  00C538  0E47               	movlw	low _dpowers
 16400  00C53A  24F3               	addwf	prodl,w,c
 16401  00C53C  6EF6               	movwf	tblptrl,c
 16402  00C53E  0EFC               	movlw	high _dpowers
 16403  00C540  20F4               	addwfc	prodh,w,c
 16404  00C542  6EF7               	movwf	tblptrh,c
 16405  00C544                     	if	1	;There are 3 active tblptr bytes
 16406  00C544  6AF8               	clrf	tblptru,c
 16407  00C546  0E00               	movlw	low (__mediumconst shr (0+16))
 16408  00C548  22F8               	addwfc	tblptru,f,c
 16409  00C54A                     	endif
 16410  00C54A  0009               	tblrd		*+
 16411  00C54C  CFF5 F003          	movff	tablat,___lwdiv@divisor
 16412  00C550  000A               	tblrd		*-
 16413  00C552  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 16414  00C556  C023  F001         	movff	printf@val,___lwdiv@dividend
 16415  00C55A  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 16416  00C55E  EC10  F04E         	call	___lwdiv	;wreg free
 16417  00C562  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 16418  00C566  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 16419  00C56A  0E00               	movlw	0
 16420  00C56C  6E0B               	movwf	___lwmod@divisor+1,c
 16421  00C56E  0E0A               	movlw	10
 16422  00C570  6E0A               	movwf	___lwmod@divisor,c
 16423  00C572  ECC9  F04D         	call	___lwmod	;wreg free
 16424  00C576  5008               	movf	?___lwmod,w,c
 16425  00C578  0F30               	addlw	48
 16426  00C57A  6E28               	movwf	printf@c,c
 16427                           
 16428                           ;doprnt.c: 1491: break;
 16429  00C57C  D031               	goto	l1653
 16430  00C57E                     
 16431                           ;doprnt.c: 1499: {
 16432                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16433  00C57E  C023  F001         	movff	printf@val,___lwdiv@dividend
 16434  00C582  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 16435  00C586  501C               	movf	printf@prec,w,c
 16436  00C588  0D02               	mullw	2
 16437  00C58A  0E51               	movlw	low _hexpowers
 16438  00C58C  24F3               	addwf	prodl,w,c
 16439  00C58E  6EF6               	movwf	tblptrl,c
 16440  00C590  0EFC               	movlw	high _hexpowers
 16441  00C592  20F4               	addwfc	prodh,w,c
 16442  00C594  6EF7               	movwf	tblptrh,c
 16443  00C596                     	if	1	;There are 3 active tblptr bytes
 16444  00C596  6AF8               	clrf	tblptru,c
 16445  00C598  0E00               	movlw	low (__mediumconst shr (0+16))
 16446  00C59A  22F8               	addwfc	tblptru,f,c
 16447  00C59C                     	endif
 16448  00C59C  0009               	tblrd		*+
 16449  00C59E  CFF5 F003          	movff	tablat,___lwdiv@divisor
 16450  00C5A2  000A               	tblrd		*-
 16451  00C5A4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 16452  00C5A8  EC10  F04E         	call	___lwdiv	;wreg free
 16453  00C5AC  5001               	movf	?___lwdiv,w,c
 16454  00C5AE  0B0F               	andlw	15
 16455  00C5B0  6E1B               	movwf	printf@idx,c
 16456                           
 16457                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16458  00C5B2  501B               	movf	printf@idx,w,c
 16459  00C5B4  0D01               	mullw	1
 16460  00C5B6  0E78               	movlw	low STR_154
 16461  00C5B8  24F3               	addwf	prodl,w,c
 16462  00C5BA  6EF6               	movwf	tblptrl,c
 16463  00C5BC  0EFC               	movlw	high STR_154
 16464  00C5BE  20F4               	addwfc	prodh,w,c
 16465  00C5C0  6EF7               	movwf	tblptrh,c
 16466  00C5C2                     	if	1	;There are 3 active tblptr bytes
 16467  00C5C2  6AF8               	clrf	tblptru,c
 16468  00C5C4  0E00               	movlw	low (__mediumconst shr (0+16))
 16469  00C5C6  22F8               	addwfc	tblptru,f,c
 16470  00C5C8                     	endif
 16471  00C5C8  0008               	tblrd		*
 16472  00C5CA  CFF5 F028          	movff	tablat,printf@c
 16473                           
 16474                           ;doprnt.c: 1523: }
 16475                           
 16476                           ;doprnt.c: 1508: }
 16477                           ;doprnt.c: 1510: break;
 16478  00C5CE  D008               	goto	l1653
 16479  00C5D0  5025               	movf	printf@flag,w,c
 16480  00C5D2  0B80               	andlw	128
 16481                           
 16482                           ; Switch size 1, requested type "space"
 16483                           ; Number of cases is 2, Range of values is 0 to 128
 16484                           ; switch strategies available:
 16485                           ; Name         Instructions Cycles
 16486                           ; simple_byte            7     4 (average)
 16487                           ;	Chosen strategy is simple_byte
 16488  00C5D4  0A00               	xorlw	0	; case 0
 16489  00C5D6  B4D8               	btfsc	status,2,c
 16490  00C5D8  D7AD               	goto	l1652
 16491  00C5DA  0A80               	xorlw	128	; case 128
 16492  00C5DC  B4D8               	btfsc	status,2,c
 16493  00C5DE  D7CF               	goto	l1654
 16494  00C5E0                     l1653:
 16495                           
 16496                           ;doprnt.c: 1524: (putch(c) );
 16497  00C5E0  5028               	movf	printf@c,w,c
 16498  00C5E2  EC2A  F04D         	call	_putch
 16499  00C5E6                     l1649:
 16500  00C5E6  061C               	decf	printf@prec,f,c
 16501  00C5E8  281C               	incf	printf@prec,w,c
 16502  00C5EA  A4D8               	btfss	status,2,c
 16503  00C5EC  D7F1               	goto	l1651
 16504  00C5EE                     u7510:
 16505  00C5EE  C00D  FFF6         	movff	printf@f,tblptrl
 16506  00C5F2  C00E  FFF7         	movff	printf@f+1,tblptrh
 16507  00C5F6  4A0D               	infsnz	printf@f,f,c
 16508  00C5F8  2A0E               	incf	printf@f+1,f,c
 16509  00C5FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16510  00C5FA  6AF8               	clrf	tblptru,c
 16511  00C5FC                     	endif
 16512  00C5FC                     	if	0	;tblptru may be non-zero
 16513  00C5FC                     	endif
 16514  00C5FC  0008               	tblrd		*
 16515  00C5FE  CFF5 F028          	movff	tablat,printf@c
 16516  00C602  5028               	movf	printf@c,w,c
 16517  00C604  B4D8               	btfsc	status,2,c
 16518  00C606  0012               	return	
 16519  00C608  D60C               	goto	l1591
 16520  00C60A                     __end_of_printf:
 16521                           	opt stack 0
 16522                           tblptru	equ	0xFF8
 16523                           tblptrh	equ	0xFF7
 16524                           tblptrl	equ	0xFF6
 16525                           tablat	equ	0xFF5
 16526                           prodh	equ	0xFF4
 16527                           prodl	equ	0xFF3
 16528                           postinc0	equ	0xFEE
 16529                           wreg	equ	0xFE8
 16530                           postinc1	equ	0xFE6
 16531                           postdec1	equ	0xFE5
 16532                           plusw1	equ	0xFE3
 16533                           fsr1h	equ	0xFE2
 16534                           fsr1l	equ	0xFE1
 16535                           indf2	equ	0xFDF
 16536                           postinc2	equ	0xFDE
 16537                           postdec2	equ	0xFDD
 16538                           plusw2	equ	0xFDB
 16539                           fsr2h	equ	0xFDA
 16540                           fsr2l	equ	0xFD9
 16541                           status	equ	0xFD8
 16542                           
 16543 ;; *************** function _putch *****************
 16544 ;; Defined at:
 16545 ;;		line 72 in file "LCD.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  data            1    wreg     unsigned char 
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;  data            1    2[COMRAM] unsigned char 
 16550 ;; Return value:  Size  Location     Type
 16551 ;;                  1    wreg      void 
 16552 ;; Registers used:
 16553 ;;		wreg, status,2, status,0, cstack
 16554 ;; Tracked objects:
 16555 ;;		On entry : 0/0
 16556 ;;		On exit  : 0/0
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16563 ;;Total ram usage:        1 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; Hardware stack levels required when called:    1
 16566 ;; This function calls:
 16567 ;;		_lcdNibble
 16568 ;; This function is called by:
 16569 ;;		_viewLogs
 16570 ;;		_food_press
 16571 ;;		_diet_press
 16572 ;;		_which_drawer
 16573 ;;		_printf
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           	psect	text28
 16578  009A54                     __ptext28:
 16579                           	opt stack 0
 16580  009A54                     _putch:
 16581                           	opt stack 27
 16582                           
 16583                           ;incstack = 0
 16584                           ;putch@data stored from wreg
 16585  009A54  6E03               	movwf	putch@data,c
 16586                           
 16587                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 16588  009A56  848C               	bsf	3980,2,c	;volatile
 16589                           
 16590                           ;LCD.c: 81: lcdNibble(data);
 16591  009A58  5003               	movf	putch@data,w,c
 16592  009A5A  EC5E  F04F         	call	_lcdNibble
 16593                           
 16594                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 16595  009A5E  0EC8               	movlw	200
 16596  009A60                     u15367:
 16597  009A60  D000               	nop2	
 16598  009A62  2EE8               	decfsz	wreg,f,c
 16599  009A64  D7FD               	bra	u15367
 16600  009A66  0012               	return		;funcret
 16601  009A68                     __end_of_putch:
 16602                           	opt stack 0
 16603                           tblptru	equ	0xFF8
 16604                           tblptrh	equ	0xFF7
 16605                           tblptrl	equ	0xFF6
 16606                           tablat	equ	0xFF5
 16607                           prodh	equ	0xFF4
 16608                           prodl	equ	0xFF3
 16609                           postinc0	equ	0xFEE
 16610                           wreg	equ	0xFE8
 16611                           postinc1	equ	0xFE6
 16612                           postdec1	equ	0xFE5
 16613                           plusw1	equ	0xFE3
 16614                           fsr1h	equ	0xFE2
 16615                           fsr1l	equ	0xFE1
 16616                           indf2	equ	0xFDF
 16617                           postinc2	equ	0xFDE
 16618                           postdec2	equ	0xFDD
 16619                           plusw2	equ	0xFDB
 16620                           fsr2h	equ	0xFDA
 16621                           fsr2l	equ	0xFD9
 16622                           status	equ	0xFD8
 16623                           
 16624 ;; *************** function _isdigit *****************
 16625 ;; Defined at:
 16626 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  c               1    wreg     unsigned char 
 16629 ;; Auto vars:     Size  Location     Type
 16630 ;;  c               1    2[COMRAM] unsigned char 
 16631 ;; Return value:  Size  Location     Type
 16632 ;;		None               void
 16633 ;; Registers used:
 16634 ;;		wreg, status,2, status,0
 16635 ;; Tracked objects:
 16636 ;;		On entry : 0/0
 16637 ;;		On exit  : 0/0
 16638 ;;		Unchanged: 0/0
 16639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16643 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16644 ;;Total ram usage:        3 bytes
 16645 ;; Hardware stack levels used:    1
 16646 ;; This function calls:
 16647 ;;		Nothing
 16648 ;; This function is called by:
 16649 ;;		_printf
 16650 ;; This function uses a non-reentrant model
 16651 ;;
 16652                           
 16653                           	psect	text29
 16654  009A68                     __ptext29:
 16655                           	opt stack 0
 16656  009A68                     _isdigit:
 16657                           	opt stack 27
 16658                           
 16659                           ;incstack = 0
 16660                           ;isdigit@c stored from wreg
 16661  009A68  6E03               	movwf	isdigit@c,c
 16662  009A6A  0E00               	movlw	0
 16663  009A6C  6E02               	movwf	_isdigit$1966,c
 16664  009A6E  0E3A               	movlw	58
 16665  009A70  6003               	cpfslt	isdigit@c,c
 16666  009A72  D005               	goto	l1987
 16667  009A74  0E2F               	movlw	47
 16668  009A76  6403               	cpfsgt	isdigit@c,c
 16669  009A78  D002               	goto	l1987
 16670  009A7A  0E01               	movlw	1
 16671  009A7C  6E02               	movwf	_isdigit$1966,c
 16672  009A7E                     l1987:
 16673  009A7E  C002  F001         	movff	_isdigit$1966,??_isdigit
 16674  009A82  3001               	rrcf	??_isdigit,w,c
 16675  009A84  0012               	return	
 16676  009A86                     __end_of_isdigit:
 16677                           	opt stack 0
 16678                           tblptru	equ	0xFF8
 16679                           tblptrh	equ	0xFF7
 16680                           tblptrl	equ	0xFF6
 16681                           tablat	equ	0xFF5
 16682                           prodh	equ	0xFF4
 16683                           prodl	equ	0xFF3
 16684                           postinc0	equ	0xFEE
 16685                           wreg	equ	0xFE8
 16686                           postinc1	equ	0xFE6
 16687                           postdec1	equ	0xFE5
 16688                           plusw1	equ	0xFE3
 16689                           fsr1h	equ	0xFE2
 16690                           fsr1l	equ	0xFE1
 16691                           indf2	equ	0xFDF
 16692                           postinc2	equ	0xFDE
 16693                           postdec2	equ	0xFDD
 16694                           plusw2	equ	0xFDB
 16695                           fsr2h	equ	0xFDA
 16696                           fsr2l	equ	0xFD9
 16697                           status	equ	0xFD8
 16698                           
 16699 ;; *************** function ___lwmod *****************
 16700 ;; Defined at:
 16701 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 16702 ;; Parameters:    Size  Location     Type
 16703 ;;  dividend        2    7[COMRAM] unsigned int 
 16704 ;;  divisor         2    9[COMRAM] unsigned int 
 16705 ;; Auto vars:     Size  Location     Type
 16706 ;;  counter         1   11[COMRAM] unsigned char 
 16707 ;; Return value:  Size  Location     Type
 16708 ;;                  2    7[COMRAM] unsigned int 
 16709 ;; Registers used:
 16710 ;;		wreg, status,2, status,0
 16711 ;; Tracked objects:
 16712 ;;		On entry : 0/0
 16713 ;;		On exit  : 0/0
 16714 ;;		Unchanged: 0/0
 16715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16716 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16719 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16720 ;;Total ram usage:        5 bytes
 16721 ;; Hardware stack levels used:    1
 16722 ;; This function calls:
 16723 ;;		Nothing
 16724 ;; This function is called by:
 16725 ;;		_displayLogs
 16726 ;;		_printf
 16727 ;; This function uses a non-reentrant model
 16728 ;;
 16729                           
 16730                           	psect	text30
 16731  009B92                     __ptext30:
 16732                           	opt stack 0
 16733  009B92                     ___lwmod:
 16734                           	opt stack 27
 16735                           
 16736                           ;incstack = 0
 16737  009B92  500A               	movf	___lwmod@divisor,w,c
 16738  009B94  100B               	iorwf	___lwmod@divisor+1,w,c
 16739  009B96  B4D8               	btfsc	status,2,c
 16740  009B98  D018               	goto	l2081
 16741  009B9A  0E01               	movlw	1
 16742  009B9C  6E0C               	movwf	___lwmod@counter,c
 16743  009B9E  D004               	goto	l2076
 16744  009BA0  90D8               	bcf	status,0,c
 16745  009BA2  360A               	rlcf	___lwmod@divisor,f,c
 16746  009BA4  360B               	rlcf	___lwmod@divisor+1,f,c
 16747  009BA6  2A0C               	incf	___lwmod@counter,f,c
 16748  009BA8                     l2076:
 16749  009BA8  AE0B               	btfss	___lwmod@divisor+1,7,c
 16750  009BAA  D7FA               	goto	l2077
 16751  009BAC                     u7230:
 16752  009BAC  500A               	movf	___lwmod@divisor,w,c
 16753  009BAE  5C08               	subwf	___lwmod@dividend,w,c
 16754  009BB0  500B               	movf	___lwmod@divisor+1,w,c
 16755  009BB2  5809               	subwfb	___lwmod@dividend+1,w,c
 16756  009BB4  A0D8               	btfss	status,0,c
 16757  009BB6  D004               	goto	l2080
 16758  009BB8  500A               	movf	___lwmod@divisor,w,c
 16759  009BBA  5E08               	subwf	___lwmod@dividend,f,c
 16760  009BBC  500B               	movf	___lwmod@divisor+1,w,c
 16761  009BBE  5A09               	subwfb	___lwmod@dividend+1,f,c
 16762  009BC0                     l2080:
 16763  009BC0  90D8               	bcf	status,0,c
 16764  009BC2  320B               	rrcf	___lwmod@divisor+1,f,c
 16765  009BC4  320A               	rrcf	___lwmod@divisor,f,c
 16766  009BC6  2E0C               	decfsz	___lwmod@counter,f,c
 16767  009BC8  D7F1               	goto	u7230
 16768  009BCA                     l2081:
 16769  009BCA  C008  F008         	movff	___lwmod@dividend,?___lwmod
 16770  009BCE  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 16771  009BD2  0012               	return		;funcret
 16772  009BD4                     __end_of___lwmod:
 16773                           	opt stack 0
 16774                           tblptru	equ	0xFF8
 16775                           tblptrh	equ	0xFF7
 16776                           tblptrl	equ	0xFF6
 16777                           tablat	equ	0xFF5
 16778                           prodh	equ	0xFF4
 16779                           prodl	equ	0xFF3
 16780                           postinc0	equ	0xFEE
 16781                           wreg	equ	0xFE8
 16782                           postinc1	equ	0xFE6
 16783                           postdec1	equ	0xFE5
 16784                           plusw1	equ	0xFE3
 16785                           fsr1h	equ	0xFE2
 16786                           fsr1l	equ	0xFE1
 16787                           indf2	equ	0xFDF
 16788                           postinc2	equ	0xFDE
 16789                           postdec2	equ	0xFDD
 16790                           plusw2	equ	0xFDB
 16791                           fsr2h	equ	0xFDA
 16792                           fsr2l	equ	0xFD9
 16793                           status	equ	0xFD8
 16794                           
 16795 ;; *************** function ___lwdiv *****************
 16796 ;; Defined at:
 16797 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  dividend        2    0[COMRAM] unsigned int 
 16800 ;;  divisor         2    2[COMRAM] unsigned int 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  quotient        2    4[COMRAM] unsigned int 
 16803 ;;  counter         1    6[COMRAM] unsigned char 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  2    0[COMRAM] unsigned int 
 16806 ;; Registers used:
 16807 ;;		wreg, status,2, status,0
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16816 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;Total ram usage:        7 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; This function calls:
 16820 ;;		Nothing
 16821 ;; This function is called by:
 16822 ;;		_displayLogs
 16823 ;;		_printf
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text31
 16828  009C20                     __ptext31:
 16829                           	opt stack 0
 16830  009C20                     ___lwdiv:
 16831                           	opt stack 27
 16832                           
 16833                           ;incstack = 0
 16834  009C20  0E00               	movlw	0
 16835  009C22  6E06               	movwf	___lwdiv@quotient+1,c
 16836  009C24  0E00               	movlw	0
 16837  009C26  6E05               	movwf	___lwdiv@quotient,c
 16838  009C28  5003               	movf	___lwdiv@divisor,w,c
 16839  009C2A  1004               	iorwf	___lwdiv@divisor+1,w,c
 16840  009C2C  B4D8               	btfsc	status,2,c
 16841  009C2E  D01C               	goto	l2071
 16842  009C30  0E01               	movlw	1
 16843  009C32  6E07               	movwf	___lwdiv@counter,c
 16844  009C34  D004               	goto	l2066
 16845  009C36  90D8               	bcf	status,0,c
 16846  009C38  3603               	rlcf	___lwdiv@divisor,f,c
 16847  009C3A  3604               	rlcf	___lwdiv@divisor+1,f,c
 16848  009C3C  2A07               	incf	___lwdiv@counter,f,c
 16849  009C3E                     l2066:
 16850  009C3E  AE04               	btfss	___lwdiv@divisor+1,7,c
 16851  009C40  D7FA               	goto	l2067
 16852  009C42                     u7200:
 16853  009C42  90D8               	bcf	status,0,c
 16854  009C44  3605               	rlcf	___lwdiv@quotient,f,c
 16855  009C46  3606               	rlcf	___lwdiv@quotient+1,f,c
 16856  009C48  5003               	movf	___lwdiv@divisor,w,c
 16857  009C4A  5C01               	subwf	___lwdiv@dividend,w,c
 16858  009C4C  5004               	movf	___lwdiv@divisor+1,w,c
 16859  009C4E  5802               	subwfb	___lwdiv@dividend+1,w,c
 16860  009C50  A0D8               	btfss	status,0,c
 16861  009C52  D005               	goto	l2070
 16862  009C54  5003               	movf	___lwdiv@divisor,w,c
 16863  009C56  5E01               	subwf	___lwdiv@dividend,f,c
 16864  009C58  5004               	movf	___lwdiv@divisor+1,w,c
 16865  009C5A  5A02               	subwfb	___lwdiv@dividend+1,f,c
 16866  009C5C  8005               	bsf	___lwdiv@quotient,0,c
 16867  009C5E                     l2070:
 16868  009C5E  90D8               	bcf	status,0,c
 16869  009C60  3204               	rrcf	___lwdiv@divisor+1,f,c
 16870  009C62  3203               	rrcf	___lwdiv@divisor,f,c
 16871  009C64  2E07               	decfsz	___lwdiv@counter,f,c
 16872  009C66  D7ED               	goto	u7200
 16873  009C68                     l2071:
 16874  009C68  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 16875  009C6C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 16876  009C70  0012               	return		;funcret
 16877  009C72                     __end_of___lwdiv:
 16878                           	opt stack 0
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           postinc0	equ	0xFEE
 16886                           wreg	equ	0xFE8
 16887                           postinc1	equ	0xFE6
 16888                           postdec1	equ	0xFE5
 16889                           plusw1	equ	0xFE3
 16890                           fsr1h	equ	0xFE2
 16891                           fsr1l	equ	0xFE1
 16892                           indf2	equ	0xFDF
 16893                           postinc2	equ	0xFDE
 16894                           postdec2	equ	0xFDD
 16895                           plusw2	equ	0xFDB
 16896                           fsr2h	equ	0xFDA
 16897                           fsr2l	equ	0xFD9
 16898                           status	equ	0xFD8
 16899                           
 16900 ;; *************** function _moveVertically *****************
 16901 ;; Defined at:
 16902 ;;		line 681 in file "operationMode.c"
 16903 ;; Parameters:    Size  Location     Type
 16904 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 16905 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 16906 ;; Auto vars:     Size  Location     Type
 16907 ;;		None
 16908 ;; Return value:  Size  Location     Type
 16909 ;;                  2   11[COMRAM] unsigned int 
 16910 ;; Registers used:
 16911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/0
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16921 ;;Total ram usage:        4 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:    2
 16924 ;; This function calls:
 16925 ;;		_verticalStepper
 16926 ;; This function is called by:
 16927 ;;		_mainOperation
 16928 ;; This function uses a non-reentrant model
 16929 ;;
 16930                           
 16931                           	psect	text32
 16932  00BCA4                     __ptext32:
 16933                           	opt stack 0
 16934  00BCA4                     _moveVertically:
 16935                           	opt stack 27
 16936                           
 16937                           ;operationMode.c: 683: if (currentDrawer != 0 && nextDrawer != 0 && nextDrawer > current
      +                          Drawer){
 16938                           
 16939                           ;incstack = 0
 16940  00BCA4  500C               	movf	moveVertically@currentDrawer,w,c
 16941  00BCA6  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16942  00BCA8  B4D8               	btfsc	status,2,c
 16943  00BCAA  D13B               	goto	l491
 16944  00BCAC  500E               	movf	moveVertically@nextDrawer,w,c
 16945  00BCAE  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16946  00BCB0  B4D8               	btfsc	status,2,c
 16947  00BCB2  D137               	goto	l491
 16948  00BCB4  500E               	movf	moveVertically@nextDrawer,w,c
 16949  00BCB6  5C0C               	subwf	moveVertically@currentDrawer,w,c
 16950  00BCB8  500F               	movf	moveVertically@nextDrawer+1,w,c
 16951  00BCBA  580D               	subwfb	moveVertically@currentDrawer+1,w,c
 16952  00BCBC  B0D8               	btfsc	status,0,c
 16953  00BCBE  D131               	goto	l491
 16954                           
 16955                           ;operationMode.c: 684: if (currentDrawer == 1 || currentDrawer == 2 || currentDrawer == 
      +                          3 || currentDrawer == 4){
 16956  00BCC0  040C               	decf	moveVertically@currentDrawer,w,c
 16957  00BCC2  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16958  00BCC4  B4D8               	btfsc	status,2,c
 16959  00BCC6  D00F               	goto	u10710
 16960  00BCC8  0E02               	movlw	2
 16961  00BCCA  180C               	xorwf	moveVertically@currentDrawer,w,c
 16962  00BCCC  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16963  00BCCE  B4D8               	btfsc	status,2,c
 16964  00BCD0  D00A               	goto	u10710
 16965  00BCD2  0E03               	movlw	3
 16966  00BCD4  180C               	xorwf	moveVertically@currentDrawer,w,c
 16967  00BCD6  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16968  00BCD8  B4D8               	btfsc	status,2,c
 16969  00BCDA  D005               	goto	u10710
 16970  00BCDC  0E04               	movlw	4
 16971  00BCDE  180C               	xorwf	moveVertically@currentDrawer,w,c
 16972  00BCE0  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 16973  00BCE2  A4D8               	btfss	status,2,c
 16974  00BCE4  D087               	goto	l492
 16975  00BCE6                     u10710:
 16976                           
 16977                           ;operationMode.c: 685: if (nextDrawer == 5 || nextDrawer == 6 || nextDrawer == 7 || next
      +                          Drawer == 8){
 16978  00BCE6  0E05               	movlw	5
 16979  00BCE8  180E               	xorwf	moveVertically@nextDrawer,w,c
 16980  00BCEA  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16981  00BCEC  B4D8               	btfsc	status,2,c
 16982  00BCEE  D00F               	goto	u10750
 16983  00BCF0  0E06               	movlw	6
 16984  00BCF2  180E               	xorwf	moveVertically@nextDrawer,w,c
 16985  00BCF4  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16986  00BCF6  B4D8               	btfsc	status,2,c
 16987  00BCF8  D00A               	goto	u10750
 16988  00BCFA  0E07               	movlw	7
 16989  00BCFC  180E               	xorwf	moveVertically@nextDrawer,w,c
 16990  00BCFE  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16991  00BD00  B4D8               	btfsc	status,2,c
 16992  00BD02  D005               	goto	u10750
 16993  00BD04  0E08               	movlw	8
 16994  00BD06  180E               	xorwf	moveVertically@nextDrawer,w,c
 16995  00BD08  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 16996  00BD0A  A4D8               	btfss	status,2,c
 16997  00BD0C  D011               	goto	l495
 16998  00BD0E                     u10750:
 16999                           
 17000                           ;operationMode.c: 686: verticalStepper(1, 0);
 17001  00BD0E  0E00               	movlw	0
 17002  00BD10  6E07               	movwf	verticalStepper@rotations+1,c
 17003  00BD12  0E01               	movlw	1
 17004  00BD14  6E06               	movwf	verticalStepper@rotations,c
 17005  00BD16  0E00               	movlw	0
 17006  00BD18  6E09               	movwf	verticalStepper@direction+1,c
 17007  00BD1A  0E00               	movlw	0
 17008  00BD1C  6E08               	movwf	verticalStepper@direction,c
 17009  00BD1E  EC26  F04F         	call	_verticalStepper	;wreg free
 17010                           
 17011                           ;operationMode.c: 687: return (currentDrawer + 4);
 17012  00BD22  0E04               	movlw	4
 17013  00BD24  240C               	addwf	moveVertically@currentDrawer,w,c
 17014  00BD26  6E0C               	movwf	?_moveVertically,c
 17015  00BD28  0E00               	movlw	0
 17016  00BD2A  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17017  00BD2C  6E0D               	movwf	?_moveVertically+1,c
 17018                           
 17019                           ;operationMode.c: 688: }
 17020  00BD2E  0012               	return	
 17021  00BD30                     l495:
 17022                           
 17023                           ;operationMode.c: 689: else if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 
      +                          || nextDrawer == 12){
 17024  00BD30  0E09               	movlw	9
 17025  00BD32  180E               	xorwf	moveVertically@nextDrawer,w,c
 17026  00BD34  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17027  00BD36  B4D8               	btfsc	status,2,c
 17028  00BD38  D00F               	goto	u10790
 17029  00BD3A  0E0A               	movlw	10
 17030  00BD3C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17031  00BD3E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17032  00BD40  B4D8               	btfsc	status,2,c
 17033  00BD42  D00A               	goto	u10790
 17034  00BD44  0E0B               	movlw	11
 17035  00BD46  180E               	xorwf	moveVertically@nextDrawer,w,c
 17036  00BD48  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17037  00BD4A  B4D8               	btfsc	status,2,c
 17038  00BD4C  D005               	goto	u10790
 17039  00BD4E  0E0C               	movlw	12
 17040  00BD50  180E               	xorwf	moveVertically@nextDrawer,w,c
 17041  00BD52  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17042  00BD54  A4D8               	btfss	status,2,c
 17043  00BD56  D011               	goto	l500
 17044  00BD58                     u10790:
 17045                           
 17046                           ;operationMode.c: 690: verticalStepper(2, 0);
 17047  00BD58  0E00               	movlw	0
 17048  00BD5A  6E07               	movwf	verticalStepper@rotations+1,c
 17049  00BD5C  0E02               	movlw	2
 17050  00BD5E  6E06               	movwf	verticalStepper@rotations,c
 17051  00BD60  0E00               	movlw	0
 17052  00BD62  6E09               	movwf	verticalStepper@direction+1,c
 17053  00BD64  0E00               	movlw	0
 17054  00BD66  6E08               	movwf	verticalStepper@direction,c
 17055  00BD68  EC26  F04F         	call	_verticalStepper	;wreg free
 17056                           
 17057                           ;operationMode.c: 691: return (currentDrawer + 8);
 17058  00BD6C  0E08               	movlw	8
 17059  00BD6E  240C               	addwf	moveVertically@currentDrawer,w,c
 17060  00BD70  6E0C               	movwf	?_moveVertically,c
 17061  00BD72  0E00               	movlw	0
 17062  00BD74  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17063  00BD76  6E0D               	movwf	?_moveVertically+1,c
 17064                           
 17065                           ;operationMode.c: 692: }
 17066  00BD78  0012               	return	
 17067  00BD7A                     l500:
 17068                           
 17069                           ;operationMode.c: 693: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 17070  00BD7A  0E0D               	movlw	13
 17071  00BD7C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17072  00BD7E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17073  00BD80  B4D8               	btfsc	status,2,c
 17074  00BD82  D00F               	goto	u10830
 17075  00BD84  0E0E               	movlw	14
 17076  00BD86  180E               	xorwf	moveVertically@nextDrawer,w,c
 17077  00BD88  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17078  00BD8A  B4D8               	btfsc	status,2,c
 17079  00BD8C  D00A               	goto	u10830
 17080  00BD8E  0E0F               	movlw	15
 17081  00BD90  180E               	xorwf	moveVertically@nextDrawer,w,c
 17082  00BD92  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17083  00BD94  B4D8               	btfsc	status,2,c
 17084  00BD96  D005               	goto	u10830
 17085  00BD98  0E10               	movlw	16
 17086  00BD9A  180E               	xorwf	moveVertically@nextDrawer,w,c
 17087  00BD9C  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17088  00BD9E  A4D8               	btfss	status,2,c
 17089  00BDA0  D011               	goto	l504
 17090  00BDA2                     u10830:
 17091                           
 17092                           ;operationMode.c: 694: verticalStepper(3, 0);
 17093  00BDA2  0E00               	movlw	0
 17094  00BDA4  6E07               	movwf	verticalStepper@rotations+1,c
 17095  00BDA6  0E03               	movlw	3
 17096  00BDA8  6E06               	movwf	verticalStepper@rotations,c
 17097  00BDAA  0E00               	movlw	0
 17098  00BDAC  6E09               	movwf	verticalStepper@direction+1,c
 17099  00BDAE  0E00               	movlw	0
 17100  00BDB0  6E08               	movwf	verticalStepper@direction,c
 17101  00BDB2  EC26  F04F         	call	_verticalStepper	;wreg free
 17102                           
 17103                           ;operationMode.c: 695: return (currentDrawer + 12);
 17104  00BDB6  0E0C               	movlw	12
 17105  00BDB8  240C               	addwf	moveVertically@currentDrawer,w,c
 17106  00BDBA  6E0C               	movwf	?_moveVertically,c
 17107  00BDBC  0E00               	movlw	0
 17108  00BDBE  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17109  00BDC0  6E0D               	movwf	?_moveVertically+1,c
 17110                           
 17111                           ;operationMode.c: 696: }
 17112  00BDC2  0012               	return	
 17113  00BDC4                     l504:
 17114                           
 17115                           ;operationMode.c: 697: else if (nextDrawer == 1 || nextDrawer == 2 || nextDrawer == 3 ||
      +                           nextDrawer == 4){
 17116  00BDC4  040E               	decf	moveVertically@nextDrawer,w,c
 17117  00BDC6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17118  00BDC8  B4D8               	btfsc	status,2,c
 17119  00BDCA  D00F               	goto	u10870
 17120  00BDCC  0E02               	movlw	2
 17121  00BDCE  180E               	xorwf	moveVertically@nextDrawer,w,c
 17122  00BDD0  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17123  00BDD2  B4D8               	btfsc	status,2,c
 17124  00BDD4  D00A               	goto	u10870
 17125  00BDD6  0E03               	movlw	3
 17126  00BDD8  180E               	xorwf	moveVertically@nextDrawer,w,c
 17127  00BDDA  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17128  00BDDC  B4D8               	btfsc	status,2,c
 17129  00BDDE  D005               	goto	u10870
 17130  00BDE0  0E04               	movlw	4
 17131  00BDE2  180E               	xorwf	moveVertically@nextDrawer,w,c
 17132  00BDE4  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17133  00BDE6  A4D8               	btfss	status,2,c
 17134  00BDE8  0012               	return	
 17135  00BDEA                     u10870:
 17136                           
 17137                           ;operationMode.c: 698: return currentDrawer;
 17138  00BDEA  C00C  F00C         	movff	moveVertically@currentDrawer,?_moveVertically
 17139  00BDEE  C00D  F00D         	movff	moveVertically@currentDrawer+1,?_moveVertically+1
 17140                           
 17141                           ;operationMode.c: 699: }
 17142                           ;operationMode.c: 700: }
 17143  00BDF2  0012               	return	
 17144  00BDF4                     l492:
 17145                           
 17146                           ;operationMode.c: 701: else if (currentDrawer == 5 || currentDrawer == 6 || currentDrawe
      +                          r == 7 || currentDrawer == 8){
 17147  00BDF4  0E05               	movlw	5
 17148  00BDF6  180C               	xorwf	moveVertically@currentDrawer,w,c
 17149  00BDF8  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17150  00BDFA  B4D8               	btfsc	status,2,c
 17151  00BDFC  D00F               	goto	u10910
 17152  00BDFE  0E06               	movlw	6
 17153  00BE00  180C               	xorwf	moveVertically@currentDrawer,w,c
 17154  00BE02  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17155  00BE04  B4D8               	btfsc	status,2,c
 17156  00BE06  D00A               	goto	u10910
 17157  00BE08  0E07               	movlw	7
 17158  00BE0A  180C               	xorwf	moveVertically@currentDrawer,w,c
 17159  00BE0C  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17160  00BE0E  B4D8               	btfsc	status,2,c
 17161  00BE10  D005               	goto	u10910
 17162  00BE12  0E08               	movlw	8
 17163  00BE14  180C               	xorwf	moveVertically@currentDrawer,w,c
 17164  00BE16  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17165  00BE18  A4D8               	btfss	status,2,c
 17166  00BE1A  D04A               	goto	l512
 17167  00BE1C                     u10910:
 17168                           
 17169                           ;operationMode.c: 702: if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 || ne
      +                          xtDrawer == 12){
 17170  00BE1C  0E09               	movlw	9
 17171  00BE1E  180E               	xorwf	moveVertically@nextDrawer,w,c
 17172  00BE20  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17173  00BE22  B4D8               	btfsc	status,2,c
 17174  00BE24  D00F               	goto	u10950
 17175  00BE26  0E0A               	movlw	10
 17176  00BE28  180E               	xorwf	moveVertically@nextDrawer,w,c
 17177  00BE2A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17178  00BE2C  B4D8               	btfsc	status,2,c
 17179  00BE2E  D00A               	goto	u10950
 17180  00BE30  0E0B               	movlw	11
 17181  00BE32  180E               	xorwf	moveVertically@nextDrawer,w,c
 17182  00BE34  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17183  00BE36  B4D8               	btfsc	status,2,c
 17184  00BE38  D005               	goto	u10950
 17185  00BE3A  0E0C               	movlw	12
 17186  00BE3C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17187  00BE3E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17188  00BE40  A4D8               	btfss	status,2,c
 17189  00BE42  D011               	goto	l515
 17190  00BE44                     u10950:
 17191                           
 17192                           ;operationMode.c: 703: verticalStepper(1, 0);
 17193  00BE44  0E00               	movlw	0
 17194  00BE46  6E07               	movwf	verticalStepper@rotations+1,c
 17195  00BE48  0E01               	movlw	1
 17196  00BE4A  6E06               	movwf	verticalStepper@rotations,c
 17197  00BE4C  0E00               	movlw	0
 17198  00BE4E  6E09               	movwf	verticalStepper@direction+1,c
 17199  00BE50  0E00               	movlw	0
 17200  00BE52  6E08               	movwf	verticalStepper@direction,c
 17201  00BE54  EC26  F04F         	call	_verticalStepper	;wreg free
 17202                           
 17203                           ;operationMode.c: 704: return (currentDrawer + 4);
 17204  00BE58  0E04               	movlw	4
 17205  00BE5A  240C               	addwf	moveVertically@currentDrawer,w,c
 17206  00BE5C  6E0C               	movwf	?_moveVertically,c
 17207  00BE5E  0E00               	movlw	0
 17208  00BE60  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17209  00BE62  6E0D               	movwf	?_moveVertically+1,c
 17210                           
 17211                           ;operationMode.c: 705: }
 17212  00BE64  0012               	return	
 17213  00BE66                     l515:
 17214                           
 17215                           ;operationMode.c: 706: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 17216  00BE66  0E0D               	movlw	13
 17217  00BE68  180E               	xorwf	moveVertically@nextDrawer,w,c
 17218  00BE6A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17219  00BE6C  B4D8               	btfsc	status,2,c
 17220  00BE6E  D00F               	goto	u10990
 17221  00BE70  0E0E               	movlw	14
 17222  00BE72  180E               	xorwf	moveVertically@nextDrawer,w,c
 17223  00BE74  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17224  00BE76  B4D8               	btfsc	status,2,c
 17225  00BE78  D00A               	goto	u10990
 17226  00BE7A  0E0F               	movlw	15
 17227  00BE7C  180E               	xorwf	moveVertically@nextDrawer,w,c
 17228  00BE7E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17229  00BE80  B4D8               	btfsc	status,2,c
 17230  00BE82  D005               	goto	u10990
 17231  00BE84  0E10               	movlw	16
 17232  00BE86  180E               	xorwf	moveVertically@nextDrawer,w,c
 17233  00BE88  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17234  00BE8A  A4D8               	btfss	status,2,c
 17235  00BE8C  0012               	return	
 17236  00BE8E                     u10990:
 17237                           
 17238                           ;operationMode.c: 707: verticalStepper(2, 0);
 17239  00BE8E  0E00               	movlw	0
 17240  00BE90  6E07               	movwf	verticalStepper@rotations+1,c
 17241  00BE92  0E02               	movlw	2
 17242  00BE94  6E06               	movwf	verticalStepper@rotations,c
 17243  00BE96  0E00               	movlw	0
 17244  00BE98  6E09               	movwf	verticalStepper@direction+1,c
 17245  00BE9A  0E00               	movlw	0
 17246  00BE9C  6E08               	movwf	verticalStepper@direction,c
 17247  00BE9E  EC26  F04F         	call	_verticalStepper	;wreg free
 17248                           
 17249                           ;operationMode.c: 708: return (currentDrawer + 8);
 17250  00BEA2  0E08               	movlw	8
 17251  00BEA4  240C               	addwf	moveVertically@currentDrawer,w,c
 17252  00BEA6  6E0C               	movwf	?_moveVertically,c
 17253  00BEA8  0E00               	movlw	0
 17254  00BEAA  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17255  00BEAC  6E0D               	movwf	?_moveVertically+1,c
 17256                           
 17257                           ;operationMode.c: 709: }
 17258                           ;operationMode.c: 710: }
 17259  00BEAE  0012               	return	
 17260  00BEB0                     l512:
 17261                           
 17262                           ;operationMode.c: 711: else if (currentDrawer == 9 || currentDrawer == 10 || currentDraw
      +                          er == 11 || currentDrawer == 12){
 17263  00BEB0  0E09               	movlw	9
 17264  00BEB2  180C               	xorwf	moveVertically@currentDrawer,w,c
 17265  00BEB4  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17266  00BEB6  B4D8               	btfsc	status,2,c
 17267  00BEB8  D00F               	goto	u11030
 17268  00BEBA  0E0A               	movlw	10
 17269  00BEBC  180C               	xorwf	moveVertically@currentDrawer,w,c
 17270  00BEBE  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17271  00BEC0  B4D8               	btfsc	status,2,c
 17272  00BEC2  D00A               	goto	u11030
 17273  00BEC4  0E0B               	movlw	11
 17274  00BEC6  180C               	xorwf	moveVertically@currentDrawer,w,c
 17275  00BEC8  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17276  00BECA  B4D8               	btfsc	status,2,c
 17277  00BECC  D005               	goto	u11030
 17278  00BECE  0E0C               	movlw	12
 17279  00BED0  180C               	xorwf	moveVertically@currentDrawer,w,c
 17280  00BED2  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 17281  00BED4  A4D8               	btfss	status,2,c
 17282  00BED6  0012               	return	
 17283  00BED8                     u11030:
 17284                           
 17285                           ;operationMode.c: 712: if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15 || n
      +                          extDrawer == 16){
 17286  00BED8  0E0D               	movlw	13
 17287  00BEDA  180E               	xorwf	moveVertically@nextDrawer,w,c
 17288  00BEDC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17289  00BEDE  B4D8               	btfsc	status,2,c
 17290  00BEE0  D00F               	goto	u11070
 17291  00BEE2  0E0E               	movlw	14
 17292  00BEE4  180E               	xorwf	moveVertically@nextDrawer,w,c
 17293  00BEE6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17294  00BEE8  B4D8               	btfsc	status,2,c
 17295  00BEEA  D00A               	goto	u11070
 17296  00BEEC  0E0F               	movlw	15
 17297  00BEEE  180E               	xorwf	moveVertically@nextDrawer,w,c
 17298  00BEF0  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17299  00BEF2  B4D8               	btfsc	status,2,c
 17300  00BEF4  D005               	goto	u11070
 17301  00BEF6  0E10               	movlw	16
 17302  00BEF8  180E               	xorwf	moveVertically@nextDrawer,w,c
 17303  00BEFA  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 17304  00BEFC  A4D8               	btfss	status,2,c
 17305  00BEFE  0012               	return	
 17306  00BF00                     u11070:
 17307                           
 17308                           ;operationMode.c: 713: verticalStepper(1, 0);
 17309  00BF00  0E00               	movlw	0
 17310  00BF02  6E07               	movwf	verticalStepper@rotations+1,c
 17311  00BF04  0E01               	movlw	1
 17312  00BF06  6E06               	movwf	verticalStepper@rotations,c
 17313  00BF08  0E00               	movlw	0
 17314  00BF0A  6E09               	movwf	verticalStepper@direction+1,c
 17315  00BF0C  0E00               	movlw	0
 17316  00BF0E  6E08               	movwf	verticalStepper@direction,c
 17317  00BF10  EC26  F04F         	call	_verticalStepper	;wreg free
 17318                           
 17319                           ;operationMode.c: 714: return (currentDrawer + 4);
 17320  00BF14  0E04               	movlw	4
 17321  00BF16  240C               	addwf	moveVertically@currentDrawer,w,c
 17322  00BF18  6E0C               	movwf	?_moveVertically,c
 17323  00BF1A  0E00               	movlw	0
 17324  00BF1C  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 17325  00BF1E  6E0D               	movwf	?_moveVertically+1,c
 17326                           
 17327                           ;operationMode.c: 715: }
 17328                           ;operationMode.c: 716: }
 17329                           ;operationMode.c: 717: }
 17330  00BF20  0012               	return	
 17331  00BF22                     l491:
 17332                           
 17333                           ;operationMode.c: 718: else{
 17334                           ;operationMode.c: 719: return currentDrawer;
 17335  00BF22  C00C  F00C         	movff	moveVertically@currentDrawer,?_moveVertically
 17336  00BF26  C00D  F00D         	movff	moveVertically@currentDrawer+1,?_moveVertically+1
 17337  00BF2A  0012               	return	
 17338  00BF2C                     __end_of_moveVertically:
 17339                           	opt stack 0
 17340                           tblptru	equ	0xFF8
 17341                           tblptrh	equ	0xFF7
 17342                           tblptrl	equ	0xFF6
 17343                           tablat	equ	0xFF5
 17344                           prodh	equ	0xFF4
 17345                           prodl	equ	0xFF3
 17346                           postinc0	equ	0xFEE
 17347                           wreg	equ	0xFE8
 17348                           postinc1	equ	0xFE6
 17349                           postdec1	equ	0xFE5
 17350                           plusw1	equ	0xFE3
 17351                           fsr1h	equ	0xFE2
 17352                           fsr1l	equ	0xFE1
 17353                           indf2	equ	0xFDF
 17354                           postinc2	equ	0xFDE
 17355                           postdec2	equ	0xFDD
 17356                           plusw2	equ	0xFDB
 17357                           fsr2h	equ	0xFDA
 17358                           fsr2l	equ	0xFD9
 17359                           status	equ	0xFD8
 17360                           
 17361 ;; *************** function _moveHorizontally *****************
 17362 ;; Defined at:
 17363 ;;		line 725 in file "operationMode.c"
 17364 ;; Parameters:    Size  Location     Type
 17365 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 17366 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 17367 ;; Auto vars:     Size  Location     Type
 17368 ;;		None
 17369 ;; Return value:  Size  Location     Type
 17370 ;;                  1    wreg      void 
 17371 ;; Registers used:
 17372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17373 ;; Tracked objects:
 17374 ;;		On entry : 0/0
 17375 ;;		On exit  : 0/0
 17376 ;;		Unchanged: 0/0
 17377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17381 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17382 ;;Total ram usage:        6 bytes
 17383 ;; Hardware stack levels used:    1
 17384 ;; Hardware stack levels required when called:    2
 17385 ;; This function calls:
 17386 ;;		_horizontalStepper
 17387 ;; This function is called by:
 17388 ;;		_mainOperation
 17389 ;; This function uses a non-reentrant model
 17390 ;;
 17391                           
 17392                           	psect	text33
 17393  00B0D4                     __ptext33:
 17394                           	opt stack 0
 17395  00B0D4                     _moveHorizontally:
 17396                           	opt stack 27
 17397                           
 17398                           ;operationMode.c: 726: if (currentDrawer != 0 && nextDrawer != 0){
 17399                           
 17400                           ;incstack = 0
 17401  00B0D4  500C               	movf	moveHorizontally@currentDrawer,w,c
 17402  00B0D6  100D               	iorwf	moveHorizontally@currentDrawer+1,w,c
 17403  00B0D8  B4D8               	btfsc	status,2,c
 17404  00B0DA  0012               	return	
 17405  00B0DC  500E               	movf	moveHorizontally@nextDrawer,w,c
 17406  00B0DE  100F               	iorwf	moveHorizontally@nextDrawer+1,w,c
 17407  00B0E0  B4D8               	btfsc	status,2,c
 17408  00B0E2  0012               	return	
 17409                           
 17410                           ;operationMode.c: 728: if (currentDrawer < nextDrawer){
 17411  00B0E4  500E               	movf	moveHorizontally@nextDrawer,w,c
 17412  00B0E6  5C0C               	subwf	moveHorizontally@currentDrawer,w,c
 17413  00B0E8  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17414  00B0EA  580D               	subwfb	moveHorizontally@currentDrawer+1,w,c
 17415  00B0EC  B0D8               	btfsc	status,0,c
 17416  00B0EE  D053               	goto	l533
 17417                           
 17418                           ;operationMode.c: 729: if ((nextDrawer - currentDrawer) == 1){
 17419  00B0F0  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17420  00B0F4  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17421  00B0F8  1E10               	comf	??_moveHorizontally,f,c
 17422  00B0FA  1E11               	comf	??_moveHorizontally+1,f,c
 17423  00B0FC  4A10               	infsnz	??_moveHorizontally,f,c
 17424  00B0FE  2A11               	incf	??_moveHorizontally+1,f,c
 17425  00B100  500E               	movf	moveHorizontally@nextDrawer,w,c
 17426  00B102  2610               	addwf	??_moveHorizontally,f,c
 17427  00B104  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17428  00B106  2211               	addwfc	??_moveHorizontally+1,f,c
 17429  00B108  0410               	decf	??_moveHorizontally,w,c
 17430  00B10A  1011               	iorwf	??_moveHorizontally+1,w,c
 17431  00B10C  A4D8               	btfss	status,2,c
 17432  00B10E  D00B               	goto	l534
 17433                           
 17434                           ;operationMode.c: 730: horizontalStepper(1, 0);
 17435  00B110  0E00               	movlw	0
 17436  00B112  6E07               	movwf	horizontalStepper@rotations+1,c
 17437  00B114  0E01               	movlw	1
 17438  00B116  6E06               	movwf	horizontalStepper@rotations,c
 17439  00B118  0E00               	movlw	0
 17440  00B11A  6E09               	movwf	horizontalStepper@direction+1,c
 17441  00B11C  0E00               	movlw	0
 17442  00B11E  6E08               	movwf	horizontalStepper@direction,c
 17443  00B120  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17444                           
 17445                           ;operationMode.c: 731: }
 17446  00B124  0012               	return	
 17447  00B126                     l534:
 17448                           
 17449                           ;operationMode.c: 732: else if ((nextDrawer - currentDrawer) == 2){
 17450  00B126  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17451  00B12A  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17452  00B12E  1E10               	comf	??_moveHorizontally,f,c
 17453  00B130  1E11               	comf	??_moveHorizontally+1,f,c
 17454  00B132  4A10               	infsnz	??_moveHorizontally,f,c
 17455  00B134  2A11               	incf	??_moveHorizontally+1,f,c
 17456  00B136  500E               	movf	moveHorizontally@nextDrawer,w,c
 17457  00B138  2610               	addwf	??_moveHorizontally,f,c
 17458  00B13A  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17459  00B13C  2211               	addwfc	??_moveHorizontally+1,f,c
 17460  00B13E  0E02               	movlw	2
 17461  00B140  1810               	xorwf	??_moveHorizontally,w,c
 17462  00B142  1011               	iorwf	??_moveHorizontally+1,w,c
 17463  00B144  A4D8               	btfss	status,2,c
 17464  00B146  D00B               	goto	l536
 17465                           
 17466                           ;operationMode.c: 733: horizontalStepper(2, 0);
 17467  00B148  0E00               	movlw	0
 17468  00B14A  6E07               	movwf	horizontalStepper@rotations+1,c
 17469  00B14C  0E02               	movlw	2
 17470  00B14E  6E06               	movwf	horizontalStepper@rotations,c
 17471  00B150  0E00               	movlw	0
 17472  00B152  6E09               	movwf	horizontalStepper@direction+1,c
 17473  00B154  0E00               	movlw	0
 17474  00B156  6E08               	movwf	horizontalStepper@direction,c
 17475  00B158  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17476                           
 17477                           ;operationMode.c: 734: }
 17478  00B15C  0012               	return	
 17479  00B15E                     l536:
 17480                           
 17481                           ;operationMode.c: 735: else if ((nextDrawer - currentDrawer) == 3){
 17482  00B15E  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 17483  00B162  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 17484  00B166  1E10               	comf	??_moveHorizontally,f,c
 17485  00B168  1E11               	comf	??_moveHorizontally+1,f,c
 17486  00B16A  4A10               	infsnz	??_moveHorizontally,f,c
 17487  00B16C  2A11               	incf	??_moveHorizontally+1,f,c
 17488  00B16E  500E               	movf	moveHorizontally@nextDrawer,w,c
 17489  00B170  2610               	addwf	??_moveHorizontally,f,c
 17490  00B172  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 17491  00B174  2211               	addwfc	??_moveHorizontally+1,f,c
 17492  00B176  0E03               	movlw	3
 17493  00B178  1810               	xorwf	??_moveHorizontally,w,c
 17494  00B17A  1011               	iorwf	??_moveHorizontally+1,w,c
 17495  00B17C  A4D8               	btfss	status,2,c
 17496  00B17E  0012               	return	
 17497                           
 17498                           ;operationMode.c: 736: horizontalStepper(3, 0);
 17499  00B180  0E00               	movlw	0
 17500  00B182  6E07               	movwf	horizontalStepper@rotations+1,c
 17501  00B184  0E03               	movlw	3
 17502  00B186  6E06               	movwf	horizontalStepper@rotations,c
 17503  00B188  0E00               	movlw	0
 17504  00B18A  6E09               	movwf	horizontalStepper@direction+1,c
 17505  00B18C  0E00               	movlw	0
 17506  00B18E  6E08               	movwf	horizontalStepper@direction,c
 17507  00B190  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17508                           
 17509                           ;operationMode.c: 737: }
 17510                           ;operationMode.c: 738: }
 17511  00B194  0012               	return	
 17512  00B196                     l533:
 17513                           
 17514                           ;operationMode.c: 740: else if (currentDrawer > nextDrawer){
 17515  00B196  500C               	movf	moveHorizontally@currentDrawer,w,c
 17516  00B198  5C0E               	subwf	moveHorizontally@nextDrawer,w,c
 17517  00B19A  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17518  00B19C  580F               	subwfb	moveHorizontally@nextDrawer+1,w,c
 17519  00B19E  B0D8               	btfsc	status,0,c
 17520  00B1A0  0012               	return	
 17521                           
 17522                           ;operationMode.c: 741: if ((currentDrawer - nextDrawer) == 1){
 17523  00B1A2  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17524  00B1A6  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17525  00B1AA  1E10               	comf	??_moveHorizontally,f,c
 17526  00B1AC  1E11               	comf	??_moveHorizontally+1,f,c
 17527  00B1AE  4A10               	infsnz	??_moveHorizontally,f,c
 17528  00B1B0  2A11               	incf	??_moveHorizontally+1,f,c
 17529  00B1B2  500C               	movf	moveHorizontally@currentDrawer,w,c
 17530  00B1B4  2610               	addwf	??_moveHorizontally,f,c
 17531  00B1B6  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17532  00B1B8  2211               	addwfc	??_moveHorizontally+1,f,c
 17533  00B1BA  0410               	decf	??_moveHorizontally,w,c
 17534  00B1BC  1011               	iorwf	??_moveHorizontally+1,w,c
 17535  00B1BE  A4D8               	btfss	status,2,c
 17536  00B1C0  D00B               	goto	l541
 17537                           
 17538                           ;operationMode.c: 742: horizontalStepper(1, 1);
 17539  00B1C2  0E00               	movlw	0
 17540  00B1C4  6E07               	movwf	horizontalStepper@rotations+1,c
 17541  00B1C6  0E01               	movlw	1
 17542  00B1C8  6E06               	movwf	horizontalStepper@rotations,c
 17543  00B1CA  0E00               	movlw	0
 17544  00B1CC  6E09               	movwf	horizontalStepper@direction+1,c
 17545  00B1CE  0E01               	movlw	1
 17546  00B1D0  6E08               	movwf	horizontalStepper@direction,c
 17547  00B1D2  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17548                           
 17549                           ;operationMode.c: 743: }
 17550  00B1D6  0012               	return	
 17551  00B1D8                     l541:
 17552                           
 17553                           ;operationMode.c: 744: else if ((currentDrawer - nextDrawer) == 2){
 17554  00B1D8  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17555  00B1DC  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17556  00B1E0  1E10               	comf	??_moveHorizontally,f,c
 17557  00B1E2  1E11               	comf	??_moveHorizontally+1,f,c
 17558  00B1E4  4A10               	infsnz	??_moveHorizontally,f,c
 17559  00B1E6  2A11               	incf	??_moveHorizontally+1,f,c
 17560  00B1E8  500C               	movf	moveHorizontally@currentDrawer,w,c
 17561  00B1EA  2610               	addwf	??_moveHorizontally,f,c
 17562  00B1EC  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17563  00B1EE  2211               	addwfc	??_moveHorizontally+1,f,c
 17564  00B1F0  0E02               	movlw	2
 17565  00B1F2  1810               	xorwf	??_moveHorizontally,w,c
 17566  00B1F4  1011               	iorwf	??_moveHorizontally+1,w,c
 17567  00B1F6  A4D8               	btfss	status,2,c
 17568  00B1F8  D00B               	goto	l543
 17569                           
 17570                           ;operationMode.c: 745: horizontalStepper(2, 1);
 17571  00B1FA  0E00               	movlw	0
 17572  00B1FC  6E07               	movwf	horizontalStepper@rotations+1,c
 17573  00B1FE  0E02               	movlw	2
 17574  00B200  6E06               	movwf	horizontalStepper@rotations,c
 17575  00B202  0E00               	movlw	0
 17576  00B204  6E09               	movwf	horizontalStepper@direction+1,c
 17577  00B206  0E01               	movlw	1
 17578  00B208  6E08               	movwf	horizontalStepper@direction,c
 17579  00B20A  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17580                           
 17581                           ;operationMode.c: 746: }
 17582  00B20E  0012               	return	
 17583  00B210                     l543:
 17584                           
 17585                           ;operationMode.c: 747: else if ((currentDrawer - nextDrawer) == 3){
 17586  00B210  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 17587  00B214  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 17588  00B218  1E10               	comf	??_moveHorizontally,f,c
 17589  00B21A  1E11               	comf	??_moveHorizontally+1,f,c
 17590  00B21C  4A10               	infsnz	??_moveHorizontally,f,c
 17591  00B21E  2A11               	incf	??_moveHorizontally+1,f,c
 17592  00B220  500C               	movf	moveHorizontally@currentDrawer,w,c
 17593  00B222  2610               	addwf	??_moveHorizontally,f,c
 17594  00B224  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 17595  00B226  2211               	addwfc	??_moveHorizontally+1,f,c
 17596  00B228  0E03               	movlw	3
 17597  00B22A  1810               	xorwf	??_moveHorizontally,w,c
 17598  00B22C  1011               	iorwf	??_moveHorizontally+1,w,c
 17599  00B22E  A4D8               	btfss	status,2,c
 17600  00B230  0012               	return	
 17601                           
 17602                           ;operationMode.c: 748: horizontalStepper(3, 1);
 17603  00B232  0E00               	movlw	0
 17604  00B234  6E07               	movwf	horizontalStepper@rotations+1,c
 17605  00B236  0E03               	movlw	3
 17606  00B238  6E06               	movwf	horizontalStepper@rotations,c
 17607  00B23A  0E00               	movlw	0
 17608  00B23C  6E09               	movwf	horizontalStepper@direction+1,c
 17609  00B23E  0E01               	movlw	1
 17610  00B240  6E08               	movwf	horizontalStepper@direction,c
 17611  00B242  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17612  00B246  0012               	return	
 17613  00B248                     __end_of_moveHorizontally:
 17614                           	opt stack 0
 17615                           tblptru	equ	0xFF8
 17616                           tblptrh	equ	0xFF7
 17617                           tblptrl	equ	0xFF6
 17618                           tablat	equ	0xFF5
 17619                           prodh	equ	0xFF4
 17620                           prodl	equ	0xFF3
 17621                           postinc0	equ	0xFEE
 17622                           wreg	equ	0xFE8
 17623                           postinc1	equ	0xFE6
 17624                           postdec1	equ	0xFE5
 17625                           plusw1	equ	0xFE3
 17626                           fsr1h	equ	0xFE2
 17627                           fsr1l	equ	0xFE1
 17628                           indf2	equ	0xFDF
 17629                           postinc2	equ	0xFDE
 17630                           postdec2	equ	0xFDD
 17631                           plusw2	equ	0xFDB
 17632                           fsr2h	equ	0xFDA
 17633                           fsr2l	equ	0xFD9
 17634                           status	equ	0xFD8
 17635                           
 17636 ;; *************** function _initArm *****************
 17637 ;; Defined at:
 17638 ;;		line 755 in file "operationMode.c"
 17639 ;; Parameters:    Size  Location     Type
 17640 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 17641 ;; Auto vars:     Size  Location     Type
 17642 ;;		None
 17643 ;; Return value:  Size  Location     Type
 17644 ;;                  1    wreg      void 
 17645 ;; Registers used:
 17646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17647 ;; Tracked objects:
 17648 ;;		On entry : 0/0
 17649 ;;		On exit  : 0/0
 17650 ;;		Unchanged: 0/0
 17651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17652 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;Total ram usage:        2 bytes
 17657 ;; Hardware stack levels used:    1
 17658 ;; Hardware stack levels required when called:    2
 17659 ;; This function calls:
 17660 ;;		_horizontalStepper
 17661 ;;		_verticalStepper
 17662 ;; This function is called by:
 17663 ;;		_mainOperation
 17664 ;; This function uses a non-reentrant model
 17665 ;;
 17666                           
 17667                           	psect	text34
 17668  00BA42                     __ptext34:
 17669                           	opt stack 0
 17670  00BA42                     _initArm:
 17671                           	opt stack 27
 17672                           
 17673                           ;operationMode.c: 756: if (currentDrawer != 0){
 17674                           
 17675                           ;incstack = 0
 17676  00BA42  500C               	movf	initArm@currentDrawer,w,c
 17677  00BA44  100D               	iorwf	initArm@currentDrawer+1,w,c
 17678  00BA46  B4D8               	btfsc	status,2,c
 17679  00BA48  0012               	return	
 17680                           
 17681                           ;operationMode.c: 757: if (currentDrawer == 1 || currentDrawer == 2 || currentDrawer == 
      +                          3 || currentDrawer == 4){
 17682  00BA4A  040C               	decf	initArm@currentDrawer,w,c
 17683  00BA4C  100D               	iorwf	initArm@currentDrawer+1,w,c
 17684  00BA4E  B4D8               	btfsc	status,2,c
 17685  00BA50  D00F               	goto	u11220
 17686  00BA52  0E02               	movlw	2
 17687  00BA54  180C               	xorwf	initArm@currentDrawer,w,c
 17688  00BA56  100D               	iorwf	initArm@currentDrawer+1,w,c
 17689  00BA58  B4D8               	btfsc	status,2,c
 17690  00BA5A  D00A               	goto	u11220
 17691  00BA5C  0E03               	movlw	3
 17692  00BA5E  180C               	xorwf	initArm@currentDrawer,w,c
 17693  00BA60  100D               	iorwf	initArm@currentDrawer+1,w,c
 17694  00BA62  B4D8               	btfsc	status,2,c
 17695  00BA64  D005               	goto	u11220
 17696  00BA66  0E04               	movlw	4
 17697  00BA68  180C               	xorwf	initArm@currentDrawer,w,c
 17698  00BA6A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17699  00BA6C  A4D8               	btfss	status,2,c
 17700  00BA6E  D030               	goto	l550
 17701  00BA70                     u11220:
 17702                           
 17703                           ;operationMode.c: 758: if (currentDrawer == 4){
 17704  00BA70  0E04               	movlw	4
 17705  00BA72  180C               	xorwf	initArm@currentDrawer,w,c
 17706  00BA74  100D               	iorwf	initArm@currentDrawer+1,w,c
 17707  00BA76  A4D8               	btfss	status,2,c
 17708  00BA78  D00B               	goto	l553
 17709                           
 17710                           ;operationMode.c: 759: horizontalStepper(3, 1);
 17711  00BA7A  0E00               	movlw	0
 17712  00BA7C  6E07               	movwf	horizontalStepper@rotations+1,c
 17713  00BA7E  0E03               	movlw	3
 17714  00BA80  6E06               	movwf	horizontalStepper@rotations,c
 17715  00BA82  0E00               	movlw	0
 17716  00BA84  6E09               	movwf	horizontalStepper@direction+1,c
 17717  00BA86  0E01               	movlw	1
 17718  00BA88  6E08               	movwf	horizontalStepper@direction,c
 17719  00BA8A  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17720                           
 17721                           ;operationMode.c: 760: }
 17722  00BA8E  0012               	return	
 17723  00BA90                     l553:
 17724                           
 17725                           ;operationMode.c: 761: else if (currentDrawer == 3){
 17726  00BA90  0E03               	movlw	3
 17727  00BA92  180C               	xorwf	initArm@currentDrawer,w,c
 17728  00BA94  100D               	iorwf	initArm@currentDrawer+1,w,c
 17729  00BA96  A4D8               	btfss	status,2,c
 17730  00BA98  D00B               	goto	l555
 17731                           
 17732                           ;operationMode.c: 762: horizontalStepper(2, 1);
 17733  00BA9A  0E00               	movlw	0
 17734  00BA9C  6E07               	movwf	horizontalStepper@rotations+1,c
 17735  00BA9E  0E02               	movlw	2
 17736  00BAA0  6E06               	movwf	horizontalStepper@rotations,c
 17737  00BAA2  0E00               	movlw	0
 17738  00BAA4  6E09               	movwf	horizontalStepper@direction+1,c
 17739  00BAA6  0E01               	movlw	1
 17740  00BAA8  6E08               	movwf	horizontalStepper@direction,c
 17741  00BAAA  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17742                           
 17743                           ;operationMode.c: 763: }
 17744  00BAAE  0012               	return	
 17745  00BAB0                     l555:
 17746                           
 17747                           ;operationMode.c: 764: else if (currentDrawer == 2){
 17748  00BAB0  0E02               	movlw	2
 17749  00BAB2  180C               	xorwf	initArm@currentDrawer,w,c
 17750  00BAB4  100D               	iorwf	initArm@currentDrawer+1,w,c
 17751  00BAB6  A4D8               	btfss	status,2,c
 17752  00BAB8  0012               	return	
 17753                           
 17754                           ;operationMode.c: 765: horizontalStepper(1, 1);
 17755  00BABA  0E00               	movlw	0
 17756  00BABC  6E07               	movwf	horizontalStepper@rotations+1,c
 17757  00BABE  0E01               	movlw	1
 17758  00BAC0  6E06               	movwf	horizontalStepper@rotations,c
 17759  00BAC2  0E00               	movlw	0
 17760  00BAC4  6E09               	movwf	horizontalStepper@direction+1,c
 17761  00BAC6  0E01               	movlw	1
 17762  00BAC8  6E08               	movwf	horizontalStepper@direction,c
 17763  00BACA  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17764                           
 17765                           ;operationMode.c: 766: }
 17766                           ;operationMode.c: 767: }
 17767  00BACE  0012               	return	
 17768  00BAD0                     l550:
 17769                           
 17770                           ;operationMode.c: 768: else if (currentDrawer == 5 || currentDrawer == 6 || currentDrawe
      +                          r == 7 || currentDrawer == 8){
 17771  00BAD0  0E05               	movlw	5
 17772  00BAD2  180C               	xorwf	initArm@currentDrawer,w,c
 17773  00BAD4  100D               	iorwf	initArm@currentDrawer+1,w,c
 17774  00BAD6  B4D8               	btfsc	status,2,c
 17775  00BAD8  D00F               	goto	u11290
 17776  00BADA  0E06               	movlw	6
 17777  00BADC  180C               	xorwf	initArm@currentDrawer,w,c
 17778  00BADE  100D               	iorwf	initArm@currentDrawer+1,w,c
 17779  00BAE0  B4D8               	btfsc	status,2,c
 17780  00BAE2  D00A               	goto	u11290
 17781  00BAE4  0E07               	movlw	7
 17782  00BAE6  180C               	xorwf	initArm@currentDrawer,w,c
 17783  00BAE8  100D               	iorwf	initArm@currentDrawer+1,w,c
 17784  00BAEA  B4D8               	btfsc	status,2,c
 17785  00BAEC  D005               	goto	u11290
 17786  00BAEE  0E08               	movlw	8
 17787  00BAF0  180C               	xorwf	initArm@currentDrawer,w,c
 17788  00BAF2  100D               	iorwf	initArm@currentDrawer+1,w,c
 17789  00BAF4  A4D8               	btfss	status,2,c
 17790  00BAF6  D03A               	goto	l559
 17791  00BAF8                     u11290:
 17792                           
 17793                           ;operationMode.c: 769: verticalStepper(1, 1);
 17794  00BAF8  0E00               	movlw	0
 17795  00BAFA  6E07               	movwf	verticalStepper@rotations+1,c
 17796  00BAFC  0E01               	movlw	1
 17797  00BAFE  6E06               	movwf	verticalStepper@rotations,c
 17798  00BB00  0E00               	movlw	0
 17799  00BB02  6E09               	movwf	verticalStepper@direction+1,c
 17800  00BB04  0E01               	movlw	1
 17801  00BB06  6E08               	movwf	verticalStepper@direction,c
 17802  00BB08  EC26  F04F         	call	_verticalStepper	;wreg free
 17803                           
 17804                           ;operationMode.c: 770: if (currentDrawer == 8){
 17805  00BB0C  0E08               	movlw	8
 17806  00BB0E  180C               	xorwf	initArm@currentDrawer,w,c
 17807  00BB10  100D               	iorwf	initArm@currentDrawer+1,w,c
 17808  00BB12  A4D8               	btfss	status,2,c
 17809  00BB14  D00B               	goto	l562
 17810                           
 17811                           ;operationMode.c: 771: horizontalStepper(3, 1);
 17812  00BB16  0E00               	movlw	0
 17813  00BB18  6E07               	movwf	horizontalStepper@rotations+1,c
 17814  00BB1A  0E03               	movlw	3
 17815  00BB1C  6E06               	movwf	horizontalStepper@rotations,c
 17816  00BB1E  0E00               	movlw	0
 17817  00BB20  6E09               	movwf	horizontalStepper@direction+1,c
 17818  00BB22  0E01               	movlw	1
 17819  00BB24  6E08               	movwf	horizontalStepper@direction,c
 17820  00BB26  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17821                           
 17822                           ;operationMode.c: 772: }
 17823  00BB2A  0012               	return	
 17824  00BB2C                     l562:
 17825                           
 17826                           ;operationMode.c: 773: else if (currentDrawer == 7){
 17827  00BB2C  0E07               	movlw	7
 17828  00BB2E  180C               	xorwf	initArm@currentDrawer,w,c
 17829  00BB30  100D               	iorwf	initArm@currentDrawer+1,w,c
 17830  00BB32  A4D8               	btfss	status,2,c
 17831  00BB34  D00B               	goto	l564
 17832                           
 17833                           ;operationMode.c: 774: horizontalStepper(2, 1);
 17834  00BB36  0E00               	movlw	0
 17835  00BB38  6E07               	movwf	horizontalStepper@rotations+1,c
 17836  00BB3A  0E02               	movlw	2
 17837  00BB3C  6E06               	movwf	horizontalStepper@rotations,c
 17838  00BB3E  0E00               	movlw	0
 17839  00BB40  6E09               	movwf	horizontalStepper@direction+1,c
 17840  00BB42  0E01               	movlw	1
 17841  00BB44  6E08               	movwf	horizontalStepper@direction,c
 17842  00BB46  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17843                           
 17844                           ;operationMode.c: 775: }
 17845  00BB4A  0012               	return	
 17846  00BB4C                     l564:
 17847                           
 17848                           ;operationMode.c: 776: else if (currentDrawer == 6){
 17849  00BB4C  0E06               	movlw	6
 17850  00BB4E  180C               	xorwf	initArm@currentDrawer,w,c
 17851  00BB50  100D               	iorwf	initArm@currentDrawer+1,w,c
 17852  00BB52  A4D8               	btfss	status,2,c
 17853  00BB54  0012               	return	
 17854                           
 17855                           ;operationMode.c: 777: horizontalStepper(1, 1);
 17856  00BB56  0E00               	movlw	0
 17857  00BB58  6E07               	movwf	horizontalStepper@rotations+1,c
 17858  00BB5A  0E01               	movlw	1
 17859  00BB5C  6E06               	movwf	horizontalStepper@rotations,c
 17860  00BB5E  0E00               	movlw	0
 17861  00BB60  6E09               	movwf	horizontalStepper@direction+1,c
 17862  00BB62  0E01               	movlw	1
 17863  00BB64  6E08               	movwf	horizontalStepper@direction,c
 17864  00BB66  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17865                           
 17866                           ;operationMode.c: 778: }
 17867                           ;operationMode.c: 779: }
 17868  00BB6A  0012               	return	
 17869  00BB6C                     l559:
 17870                           
 17871                           ;operationMode.c: 780: else if (currentDrawer == 9 || currentDrawer == 10 || currentDraw
      +                          er == 11 || currentDrawer == 12){
 17872  00BB6C  0E09               	movlw	9
 17873  00BB6E  180C               	xorwf	initArm@currentDrawer,w,c
 17874  00BB70  100D               	iorwf	initArm@currentDrawer+1,w,c
 17875  00BB72  B4D8               	btfsc	status,2,c
 17876  00BB74  D00F               	goto	u11360
 17877  00BB76  0E0A               	movlw	10
 17878  00BB78  180C               	xorwf	initArm@currentDrawer,w,c
 17879  00BB7A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17880  00BB7C  B4D8               	btfsc	status,2,c
 17881  00BB7E  D00A               	goto	u11360
 17882  00BB80  0E0B               	movlw	11
 17883  00BB82  180C               	xorwf	initArm@currentDrawer,w,c
 17884  00BB84  100D               	iorwf	initArm@currentDrawer+1,w,c
 17885  00BB86  B4D8               	btfsc	status,2,c
 17886  00BB88  D005               	goto	u11360
 17887  00BB8A  0E0C               	movlw	12
 17888  00BB8C  180C               	xorwf	initArm@currentDrawer,w,c
 17889  00BB8E  100D               	iorwf	initArm@currentDrawer+1,w,c
 17890  00BB90  A4D8               	btfss	status,2,c
 17891  00BB92  D03A               	goto	l568
 17892  00BB94                     u11360:
 17893                           
 17894                           ;operationMode.c: 781: verticalStepper(2, 1);
 17895  00BB94  0E00               	movlw	0
 17896  00BB96  6E07               	movwf	verticalStepper@rotations+1,c
 17897  00BB98  0E02               	movlw	2
 17898  00BB9A  6E06               	movwf	verticalStepper@rotations,c
 17899  00BB9C  0E00               	movlw	0
 17900  00BB9E  6E09               	movwf	verticalStepper@direction+1,c
 17901  00BBA0  0E01               	movlw	1
 17902  00BBA2  6E08               	movwf	verticalStepper@direction,c
 17903  00BBA4  EC26  F04F         	call	_verticalStepper	;wreg free
 17904                           
 17905                           ;operationMode.c: 782: if (currentDrawer == 12){
 17906  00BBA8  0E0C               	movlw	12
 17907  00BBAA  180C               	xorwf	initArm@currentDrawer,w,c
 17908  00BBAC  100D               	iorwf	initArm@currentDrawer+1,w,c
 17909  00BBAE  A4D8               	btfss	status,2,c
 17910  00BBB0  D00B               	goto	l571
 17911                           
 17912                           ;operationMode.c: 783: horizontalStepper(3, 1);
 17913  00BBB2  0E00               	movlw	0
 17914  00BBB4  6E07               	movwf	horizontalStepper@rotations+1,c
 17915  00BBB6  0E03               	movlw	3
 17916  00BBB8  6E06               	movwf	horizontalStepper@rotations,c
 17917  00BBBA  0E00               	movlw	0
 17918  00BBBC  6E09               	movwf	horizontalStepper@direction+1,c
 17919  00BBBE  0E01               	movlw	1
 17920  00BBC0  6E08               	movwf	horizontalStepper@direction,c
 17921  00BBC2  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17922                           
 17923                           ;operationMode.c: 784: }
 17924  00BBC6  0012               	return	
 17925  00BBC8                     l571:
 17926                           
 17927                           ;operationMode.c: 785: else if (currentDrawer == 11){
 17928  00BBC8  0E0B               	movlw	11
 17929  00BBCA  180C               	xorwf	initArm@currentDrawer,w,c
 17930  00BBCC  100D               	iorwf	initArm@currentDrawer+1,w,c
 17931  00BBCE  A4D8               	btfss	status,2,c
 17932  00BBD0  D00B               	goto	l573
 17933                           
 17934                           ;operationMode.c: 786: horizontalStepper(2, 1);
 17935  00BBD2  0E00               	movlw	0
 17936  00BBD4  6E07               	movwf	horizontalStepper@rotations+1,c
 17937  00BBD6  0E02               	movlw	2
 17938  00BBD8  6E06               	movwf	horizontalStepper@rotations,c
 17939  00BBDA  0E00               	movlw	0
 17940  00BBDC  6E09               	movwf	horizontalStepper@direction+1,c
 17941  00BBDE  0E01               	movlw	1
 17942  00BBE0  6E08               	movwf	horizontalStepper@direction,c
 17943  00BBE2  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17944                           
 17945                           ;operationMode.c: 787: }
 17946  00BBE6  0012               	return	
 17947  00BBE8                     l573:
 17948                           
 17949                           ;operationMode.c: 788: else if (currentDrawer == 10){
 17950  00BBE8  0E0A               	movlw	10
 17951  00BBEA  180C               	xorwf	initArm@currentDrawer,w,c
 17952  00BBEC  100D               	iorwf	initArm@currentDrawer+1,w,c
 17953  00BBEE  A4D8               	btfss	status,2,c
 17954  00BBF0  0012               	return	
 17955                           
 17956                           ;operationMode.c: 789: horizontalStepper(1, 1);
 17957  00BBF2  0E00               	movlw	0
 17958  00BBF4  6E07               	movwf	horizontalStepper@rotations+1,c
 17959  00BBF6  0E01               	movlw	1
 17960  00BBF8  6E06               	movwf	horizontalStepper@rotations,c
 17961  00BBFA  0E00               	movlw	0
 17962  00BBFC  6E09               	movwf	horizontalStepper@direction+1,c
 17963  00BBFE  0E01               	movlw	1
 17964  00BC00  6E08               	movwf	horizontalStepper@direction,c
 17965  00BC02  ECEE  F04E         	call	_horizontalStepper	;wreg free
 17966                           
 17967                           ;operationMode.c: 790: }
 17968                           ;operationMode.c: 791: }
 17969  00BC06  0012               	return	
 17970  00BC08                     l568:
 17971                           
 17972                           ;operationMode.c: 792: else if (currentDrawer == 13 || currentDrawer == 14 || currentDra
      +                          wer == 15 || currentDrawer == 16){
 17973  00BC08  0E0D               	movlw	13
 17974  00BC0A  180C               	xorwf	initArm@currentDrawer,w,c
 17975  00BC0C  100D               	iorwf	initArm@currentDrawer+1,w,c
 17976  00BC0E  B4D8               	btfsc	status,2,c
 17977  00BC10  D00F               	goto	u11430
 17978  00BC12  0E0E               	movlw	14
 17979  00BC14  180C               	xorwf	initArm@currentDrawer,w,c
 17980  00BC16  100D               	iorwf	initArm@currentDrawer+1,w,c
 17981  00BC18  B4D8               	btfsc	status,2,c
 17982  00BC1A  D00A               	goto	u11430
 17983  00BC1C  0E0F               	movlw	15
 17984  00BC1E  180C               	xorwf	initArm@currentDrawer,w,c
 17985  00BC20  100D               	iorwf	initArm@currentDrawer+1,w,c
 17986  00BC22  B4D8               	btfsc	status,2,c
 17987  00BC24  D005               	goto	u11430
 17988  00BC26  0E10               	movlw	16
 17989  00BC28  180C               	xorwf	initArm@currentDrawer,w,c
 17990  00BC2A  100D               	iorwf	initArm@currentDrawer+1,w,c
 17991  00BC2C  A4D8               	btfss	status,2,c
 17992  00BC2E  0012               	return	
 17993  00BC30                     u11430:
 17994                           
 17995                           ;operationMode.c: 793: verticalStepper(3, 1);
 17996  00BC30  0E00               	movlw	0
 17997  00BC32  6E07               	movwf	verticalStepper@rotations+1,c
 17998  00BC34  0E03               	movlw	3
 17999  00BC36  6E06               	movwf	verticalStepper@rotations,c
 18000  00BC38  0E00               	movlw	0
 18001  00BC3A  6E09               	movwf	verticalStepper@direction+1,c
 18002  00BC3C  0E01               	movlw	1
 18003  00BC3E  6E08               	movwf	verticalStepper@direction,c
 18004  00BC40  EC26  F04F         	call	_verticalStepper	;wreg free
 18005                           
 18006                           ;operationMode.c: 794: if (currentDrawer == 16){
 18007  00BC44  0E10               	movlw	16
 18008  00BC46  180C               	xorwf	initArm@currentDrawer,w,c
 18009  00BC48  100D               	iorwf	initArm@currentDrawer+1,w,c
 18010  00BC4A  A4D8               	btfss	status,2,c
 18011  00BC4C  D00B               	goto	l580
 18012                           
 18013                           ;operationMode.c: 795: horizontalStepper(3, 1);
 18014  00BC4E  0E00               	movlw	0
 18015  00BC50  6E07               	movwf	horizontalStepper@rotations+1,c
 18016  00BC52  0E03               	movlw	3
 18017  00BC54  6E06               	movwf	horizontalStepper@rotations,c
 18018  00BC56  0E00               	movlw	0
 18019  00BC58  6E09               	movwf	horizontalStepper@direction+1,c
 18020  00BC5A  0E01               	movlw	1
 18021  00BC5C  6E08               	movwf	horizontalStepper@direction,c
 18022  00BC5E  ECEE  F04E         	call	_horizontalStepper	;wreg free
 18023                           
 18024                           ;operationMode.c: 796: }
 18025  00BC62  0012               	return	
 18026  00BC64                     l580:
 18027                           
 18028                           ;operationMode.c: 797: else if (currentDrawer == 15){
 18029  00BC64  0E0F               	movlw	15
 18030  00BC66  180C               	xorwf	initArm@currentDrawer,w,c
 18031  00BC68  100D               	iorwf	initArm@currentDrawer+1,w,c
 18032  00BC6A  A4D8               	btfss	status,2,c
 18033  00BC6C  D00B               	goto	l582
 18034                           
 18035                           ;operationMode.c: 798: horizontalStepper(2, 1);
 18036  00BC6E  0E00               	movlw	0
 18037  00BC70  6E07               	movwf	horizontalStepper@rotations+1,c
 18038  00BC72  0E02               	movlw	2
 18039  00BC74  6E06               	movwf	horizontalStepper@rotations,c
 18040  00BC76  0E00               	movlw	0
 18041  00BC78  6E09               	movwf	horizontalStepper@direction+1,c
 18042  00BC7A  0E01               	movlw	1
 18043  00BC7C  6E08               	movwf	horizontalStepper@direction,c
 18044  00BC7E  ECEE  F04E         	call	_horizontalStepper	;wreg free
 18045                           
 18046                           ;operationMode.c: 799: }
 18047  00BC82  0012               	return	
 18048  00BC84                     l582:
 18049                           
 18050                           ;operationMode.c: 800: else if (currentDrawer == 14){
 18051  00BC84  0E0E               	movlw	14
 18052  00BC86  180C               	xorwf	initArm@currentDrawer,w,c
 18053  00BC88  100D               	iorwf	initArm@currentDrawer+1,w,c
 18054  00BC8A  A4D8               	btfss	status,2,c
 18055  00BC8C  0012               	return	
 18056                           
 18057                           ;operationMode.c: 801: horizontalStepper(1, 1);
 18058  00BC8E  0E00               	movlw	0
 18059  00BC90  6E07               	movwf	horizontalStepper@rotations+1,c
 18060  00BC92  0E01               	movlw	1
 18061  00BC94  6E06               	movwf	horizontalStepper@rotations,c
 18062  00BC96  0E00               	movlw	0
 18063  00BC98  6E09               	movwf	horizontalStepper@direction+1,c
 18064  00BC9A  0E01               	movlw	1
 18065  00BC9C  6E08               	movwf	horizontalStepper@direction,c
 18066  00BC9E  ECEE  F04E         	call	_horizontalStepper	;wreg free
 18067  00BCA2  0012               	return	
 18068  00BCA4                     __end_of_initArm:
 18069                           	opt stack 0
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           postinc0	equ	0xFEE
 18077                           wreg	equ	0xFE8
 18078                           postinc1	equ	0xFE6
 18079                           postdec1	equ	0xFE5
 18080                           plusw1	equ	0xFE3
 18081                           fsr1h	equ	0xFE2
 18082                           fsr1l	equ	0xFE1
 18083                           indf2	equ	0xFDF
 18084                           postinc2	equ	0xFDE
 18085                           postdec2	equ	0xFDD
 18086                           plusw2	equ	0xFDB
 18087                           fsr2h	equ	0xFDA
 18088                           fsr2l	equ	0xFD9
 18089                           status	equ	0xFD8
 18090                           
 18091 ;; *************** function _verticalStepper *****************
 18092 ;; Defined at:
 18093 ;;		line 625 in file "operationMode.c"
 18094 ;; Parameters:    Size  Location     Type
 18095 ;;  rotations       2    5[COMRAM] unsigned int 
 18096 ;;  direction       2    7[COMRAM] unsigned int 
 18097 ;; Auto vars:     Size  Location     Type
 18098 ;;  i               2    9[COMRAM] unsigned int 
 18099 ;; Return value:  Size  Location     Type
 18100 ;;                  1    wreg      void 
 18101 ;; Registers used:
 18102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18103 ;; Tracked objects:
 18104 ;;		On entry : 0/0
 18105 ;;		On exit  : 0/0
 18106 ;;		Unchanged: 0/0
 18107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18111 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18112 ;;Total ram usage:        6 bytes
 18113 ;; Hardware stack levels used:    1
 18114 ;; Hardware stack levels required when called:    1
 18115 ;; This function calls:
 18116 ;;		_uartTransmitBlocking
 18117 ;; This function is called by:
 18118 ;;		_moveVertically
 18119 ;;		_initArm
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123                           	psect	text35
 18124  009E4C                     __ptext35:
 18125                           	opt stack 0
 18126  009E4C                     _verticalStepper:
 18127                           	opt stack 27
 18128                           
 18129                           ;operationMode.c: 628: unsigned int i = 0;
 18130                           
 18131                           ;incstack = 0
 18132  009E4C  0E00               	movlw	0
 18133  009E4E  6E0B               	movwf	verticalStepper@i+1,c
 18134  009E50  0E00               	movlw	0
 18135  009E52  6E0A               	movwf	verticalStepper@i,c
 18136                           
 18137                           ;operationMode.c: 631: if (direction == 1){
 18138  009E54  0408               	decf	verticalStepper@direction,w,c
 18139  009E56  1009               	iorwf	verticalStepper@direction+1,w,c
 18140  009E58  A4D8               	btfss	status,2,c
 18141  009E5A  D016               	goto	l461
 18142                           
 18143                           ;operationMode.c: 632: for (i=0; i<rotations; i++){
 18144  009E5C  0E00               	movlw	0
 18145  009E5E  6E0B               	movwf	verticalStepper@i+1,c
 18146  009E60  0E00               	movlw	0
 18147  009E62  6E0A               	movwf	verticalStepper@i,c
 18148  009E64  D00A               	goto	l462
 18149  009E66                     
 18150                           ;operationMode.c: 633: uartTransmitBlocking(rowUp, 1);
 18151  009E66  0E75               	movlw	low _rowUp
 18152  009E68  6E01               	movwf	uartTransmitBlocking@data,c
 18153  009E6A  0E00               	movlw	high _rowUp
 18154  009E6C  6E02               	movwf	uartTransmitBlocking@data+1,c
 18155  009E6E  0E01               	movlw	1
 18156  009E70  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18157  009E72  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 18158  009E76  4A0A               	infsnz	verticalStepper@i,f,c
 18159  009E78  2A0B               	incf	verticalStepper@i+1,f,c
 18160  009E7A                     l462:
 18161  009E7A  5006               	movf	verticalStepper@rotations,w,c
 18162  009E7C  5C0A               	subwf	verticalStepper@i,w,c
 18163  009E7E  5007               	movf	verticalStepper@rotations+1,w,c
 18164  009E80  580B               	subwfb	verticalStepper@i+1,w,c
 18165  009E82  B0D8               	btfsc	status,0,c
 18166  009E84  0012               	return	
 18167  009E86  D7EF               	goto	l463
 18168  009E88                     l461:
 18169                           
 18170                           ;operationMode.c: 638: else if (direction == 0){
 18171  009E88  5008               	movf	verticalStepper@direction,w,c
 18172  009E8A  1009               	iorwf	verticalStepper@direction+1,w,c
 18173  009E8C  A4D8               	btfss	status,2,c
 18174  009E8E  0012               	return	
 18175                           
 18176                           ;operationMode.c: 639: for (i=0; i<rotations; i++){
 18177  009E90  0E00               	movlw	0
 18178  009E92  6E0B               	movwf	verticalStepper@i+1,c
 18179  009E94  0E00               	movlw	0
 18180  009E96  6E0A               	movwf	verticalStepper@i,c
 18181  009E98  D00A               	goto	l467
 18182  009E9A                     
 18183                           ;operationMode.c: 640: uartTransmitBlocking(rowDown, 1);
 18184  009E9A  0E74               	movlw	low _rowDown
 18185  009E9C  6E01               	movwf	uartTransmitBlocking@data,c
 18186  009E9E  0E00               	movlw	high _rowDown
 18187  009EA0  6E02               	movwf	uartTransmitBlocking@data+1,c
 18188  009EA2  0E01               	movlw	1
 18189  009EA4  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18190  009EA6  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 18191  009EAA  4A0A               	infsnz	verticalStepper@i,f,c
 18192  009EAC  2A0B               	incf	verticalStepper@i+1,f,c
 18193  009EAE                     l467:
 18194  009EAE  5006               	movf	verticalStepper@rotations,w,c
 18195  009EB0  5C0A               	subwf	verticalStepper@i,w,c
 18196  009EB2  5007               	movf	verticalStepper@rotations+1,w,c
 18197  009EB4  580B               	subwfb	verticalStepper@i+1,w,c
 18198  009EB6  B0D8               	btfsc	status,0,c
 18199  009EB8  0012               	return	
 18200  009EBA  D7EF               	goto	l468
 18201  009EBC                     __end_of_verticalStepper:
 18202                           	opt stack 0
 18203                           tblptru	equ	0xFF8
 18204                           tblptrh	equ	0xFF7
 18205                           tblptrl	equ	0xFF6
 18206                           tablat	equ	0xFF5
 18207                           prodh	equ	0xFF4
 18208                           prodl	equ	0xFF3
 18209                           postinc0	equ	0xFEE
 18210                           wreg	equ	0xFE8
 18211                           postinc1	equ	0xFE6
 18212                           postdec1	equ	0xFE5
 18213                           plusw1	equ	0xFE3
 18214                           fsr1h	equ	0xFE2
 18215                           fsr1l	equ	0xFE1
 18216                           indf2	equ	0xFDF
 18217                           postinc2	equ	0xFDE
 18218                           postdec2	equ	0xFDD
 18219                           plusw2	equ	0xFDB
 18220                           fsr2h	equ	0xFDA
 18221                           fsr2l	equ	0xFD9
 18222                           status	equ	0xFD8
 18223                           
 18224 ;; *************** function _horizontalStepper *****************
 18225 ;; Defined at:
 18226 ;;		line 646 in file "operationMode.c"
 18227 ;; Parameters:    Size  Location     Type
 18228 ;;  rotations       2    5[COMRAM] unsigned int 
 18229 ;;  direction       2    7[COMRAM] unsigned int 
 18230 ;; Auto vars:     Size  Location     Type
 18231 ;;  i               2    9[COMRAM] unsigned int 
 18232 ;; Return value:  Size  Location     Type
 18233 ;;                  1    wreg      void 
 18234 ;; Registers used:
 18235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18236 ;; Tracked objects:
 18237 ;;		On entry : 0/0
 18238 ;;		On exit  : 0/0
 18239 ;;		Unchanged: 0/0
 18240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18241 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18242 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18244 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18245 ;;Total ram usage:        6 bytes
 18246 ;; Hardware stack levels used:    1
 18247 ;; Hardware stack levels required when called:    1
 18248 ;; This function calls:
 18249 ;;		_uartTransmitBlocking
 18250 ;; This function is called by:
 18251 ;;		_moveHorizontally
 18252 ;;		_initArm
 18253 ;; This function uses a non-reentrant model
 18254 ;;
 18255                           
 18256                           	psect	text36
 18257  009DDC                     __ptext36:
 18258                           	opt stack 0
 18259  009DDC                     _horizontalStepper:
 18260                           	opt stack 27
 18261                           
 18262                           ;operationMode.c: 649: unsigned int i = 0;
 18263                           
 18264                           ;incstack = 0
 18265  009DDC  0E00               	movlw	0
 18266  009DDE  6E0B               	movwf	horizontalStepper@i+1,c
 18267  009DE0  0E00               	movlw	0
 18268  009DE2  6E0A               	movwf	horizontalStepper@i,c
 18269                           
 18270                           ;operationMode.c: 652: if (direction == 1){
 18271  009DE4  0408               	decf	horizontalStepper@direction,w,c
 18272  009DE6  1009               	iorwf	horizontalStepper@direction+1,w,c
 18273  009DE8  A4D8               	btfss	status,2,c
 18274  009DEA  D016               	goto	l473
 18275                           
 18276                           ;operationMode.c: 653: for (i=0; i<rotations; i++){
 18277  009DEC  0E00               	movlw	0
 18278  009DEE  6E0B               	movwf	horizontalStepper@i+1,c
 18279  009DF0  0E00               	movlw	0
 18280  009DF2  6E0A               	movwf	horizontalStepper@i,c
 18281  009DF4  D00A               	goto	l474
 18282  009DF6                     
 18283                           ;operationMode.c: 654: uartTransmitBlocking(columnLeft, 1);
 18284  009DF6  0E73               	movlw	low _columnLeft
 18285  009DF8  6E01               	movwf	uartTransmitBlocking@data,c
 18286  009DFA  0E00               	movlw	high _columnLeft
 18287  009DFC  6E02               	movwf	uartTransmitBlocking@data+1,c
 18288  009DFE  0E01               	movlw	1
 18289  009E00  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18290  009E02  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 18291  009E06  4A0A               	infsnz	horizontalStepper@i,f,c
 18292  009E08  2A0B               	incf	horizontalStepper@i+1,f,c
 18293  009E0A                     l474:
 18294  009E0A  5006               	movf	horizontalStepper@rotations,w,c
 18295  009E0C  5C0A               	subwf	horizontalStepper@i,w,c
 18296  009E0E  5007               	movf	horizontalStepper@rotations+1,w,c
 18297  009E10  580B               	subwfb	horizontalStepper@i+1,w,c
 18298  009E12  B0D8               	btfsc	status,0,c
 18299  009E14  0012               	return	
 18300  009E16  D7EF               	goto	l475
 18301  009E18                     l473:
 18302                           
 18303                           ;operationMode.c: 658: else if (direction == 0){
 18304  009E18  5008               	movf	horizontalStepper@direction,w,c
 18305  009E1A  1009               	iorwf	horizontalStepper@direction+1,w,c
 18306  009E1C  A4D8               	btfss	status,2,c
 18307  009E1E  0012               	return	
 18308                           
 18309                           ;operationMode.c: 659: for (i=0; i<rotations; i++){
 18310  009E20  0E00               	movlw	0
 18311  009E22  6E0B               	movwf	horizontalStepper@i+1,c
 18312  009E24  0E00               	movlw	0
 18313  009E26  6E0A               	movwf	horizontalStepper@i,c
 18314  009E28  D00A               	goto	l479
 18315  009E2A                     
 18316                           ;operationMode.c: 660: uartTransmitBlocking(columnRight, 1);
 18317  009E2A  0E72               	movlw	low _columnRight
 18318  009E2C  6E01               	movwf	uartTransmitBlocking@data,c
 18319  009E2E  0E00               	movlw	high _columnRight
 18320  009E30  6E02               	movwf	uartTransmitBlocking@data+1,c
 18321  009E32  0E01               	movlw	1
 18322  009E34  6E03               	movwf	uartTransmitBlocking@numBytes,c
 18323  009E36  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 18324  009E3A  4A0A               	infsnz	horizontalStepper@i,f,c
 18325  009E3C  2A0B               	incf	horizontalStepper@i+1,f,c
 18326  009E3E                     l479:
 18327  009E3E  5006               	movf	horizontalStepper@rotations,w,c
 18328  009E40  5C0A               	subwf	horizontalStepper@i,w,c
 18329  009E42  5007               	movf	horizontalStepper@rotations+1,w,c
 18330  009E44  580B               	subwfb	horizontalStepper@i+1,w,c
 18331  009E46  B0D8               	btfsc	status,0,c
 18332  009E48  0012               	return	
 18333  009E4A  D7EF               	goto	l480
 18334  009E4C                     __end_of_horizontalStepper:
 18335                           	opt stack 0
 18336                           tblptru	equ	0xFF8
 18337                           tblptrh	equ	0xFF7
 18338                           tblptrl	equ	0xFF6
 18339                           tablat	equ	0xFF5
 18340                           prodh	equ	0xFF4
 18341                           prodl	equ	0xFF3
 18342                           postinc0	equ	0xFEE
 18343                           wreg	equ	0xFE8
 18344                           postinc1	equ	0xFE6
 18345                           postdec1	equ	0xFE5
 18346                           plusw1	equ	0xFE3
 18347                           fsr1h	equ	0xFE2
 18348                           fsr1l	equ	0xFE1
 18349                           indf2	equ	0xFDF
 18350                           postinc2	equ	0xFDE
 18351                           postdec2	equ	0xFDD
 18352                           plusw2	equ	0xFDB
 18353                           fsr2h	equ	0xFDA
 18354                           fsr2l	equ	0xFD9
 18355                           status	equ	0xFD8
 18356                           
 18357 ;; *************** function _getUserInputs *****************
 18358 ;; Defined at:
 18359 ;;		line 30 in file "operationMode.c"
 18360 ;; Parameters:    Size  Location     Type
 18361 ;;  drawerTable     2    6[COMRAM] PTR unsigned int 
 18362 ;;		 -> mainOperation@drawerTable(16), 
 18363 ;;  dietTable       2    8[COMRAM] PTR unsigned int 
 18364 ;;		 -> mainOperation@dietTable(16), 
 18365 ;;  foodTable       2   10[COMRAM] PTR unsigned int 
 18366 ;;		 -> mainOperation@foodTable(16), 
 18367 ;; Auto vars:     Size  Location     Type
 18368 ;;  i               2   22[COMRAM] unsigned int 
 18369 ;;  data            2   20[COMRAM] unsigned int 
 18370 ;;  n               2   18[COMRAM] unsigned int 
 18371 ;;  count           2   16[COMRAM] unsigned int 
 18372 ;;  logNumber       2   14[COMRAM] unsigned int 
 18373 ;; Return value:  Size  Location     Type
 18374 ;;                  1    wreg      void 
 18375 ;; Registers used:
 18376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18377 ;; Tracked objects:
 18378 ;;		On entry : 0/0
 18379 ;;		On exit  : 0/0
 18380 ;;		Unchanged: 0/0
 18381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18382 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18383 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;Total ram usage:       18 bytes
 18387 ;; Hardware stack levels used:    1
 18388 ;; Hardware stack levels required when called:    1
 18389 ;; This function calls:
 18390 ;;		___wmul
 18391 ;;		_readEEPROM
 18392 ;; This function is called by:
 18393 ;;		_mainOperation
 18394 ;; This function uses a non-reentrant model
 18395 ;;
 18396                           
 18397                           	psect	text37
 18398  00A954                     __ptext37:
 18399                           	opt stack 0
 18400  00A954                     _getUserInputs:
 18401                           	opt stack 28
 18402                           
 18403                           ;operationMode.c: 31: unsigned int data = 0;
 18404                           
 18405                           ;incstack = 0
 18406  00A954  0E00               	movlw	0
 18407  00A956  6E16               	movwf	getUserInputs@data+1,c
 18408  00A958  0E00               	movlw	0
 18409  00A95A  6E15               	movwf	getUserInputs@data,c
 18410                           
 18411                           ;operationMode.c: 32: unsigned int i = 0;
 18412  00A95C  0E00               	movlw	0
 18413  00A95E  6E18               	movwf	getUserInputs@i+1,c
 18414  00A960  0E00               	movlw	0
 18415  00A962  6E17               	movwf	getUserInputs@i,c
 18416                           
 18417                           ;operationMode.c: 33: unsigned int logNumber = 0;
 18418  00A964  0E00               	movlw	0
 18419  00A966  6E10               	movwf	getUserInputs@logNumber+1,c
 18420  00A968  0E00               	movlw	0
 18421  00A96A  6E0F               	movwf	getUserInputs@logNumber,c
 18422                           
 18423                           ;operationMode.c: 34: unsigned int n = 0;
 18424  00A96C  0E00               	movlw	0
 18425  00A96E  6E14               	movwf	getUserInputs@n+1,c
 18426  00A970  0E00               	movlw	0
 18427  00A972  6E13               	movwf	getUserInputs@n,c
 18428                           
 18429                           ;operationMode.c: 35: unsigned int count = 0;
 18430  00A974  0E00               	movlw	0
 18431  00A976  6E12               	movwf	getUserInputs@count+1,c
 18432  00A978  0E00               	movlw	0
 18433  00A97A  6E11               	movwf	getUserInputs@count,c
 18434                           
 18435                           ;operationMode.c: 37: logNumber = readEEPROM(250);
 18436  00A97C  0EFA               	movlw	250
 18437  00A97E  EC20  F04D         	call	_readEEPROM
 18438  00A982  6E0D               	movwf	??_getUserInputs& (0+255),c
 18439  00A984  500D               	movf	??_getUserInputs,w,c
 18440  00A986  6E0F               	movwf	getUserInputs@logNumber,c
 18441  00A988  6A10               	clrf	getUserInputs@logNumber+1,c
 18442                           
 18443                           ;operationMode.c: 39: if (logNumber == 0 || logNumber == 4){
 18444  00A98A  500F               	movf	getUserInputs@logNumber,w,c
 18445  00A98C  1010               	iorwf	getUserInputs@logNumber+1,w,c
 18446  00A98E  B4D8               	btfsc	status,2,c
 18447  00A990  D005               	goto	u9120
 18448  00A992  0E04               	movlw	4
 18449  00A994  180F               	xorwf	getUserInputs@logNumber,w,c
 18450  00A996  1010               	iorwf	getUserInputs@logNumber+1,w,c
 18451  00A998  A4D8               	btfss	status,2,c
 18452  00A99A  D005               	goto	l144
 18453  00A99C                     u9120:
 18454                           
 18455                           ;operationMode.c: 40: n = 0;
 18456  00A99C  0E00               	movlw	0
 18457  00A99E  6E14               	movwf	getUserInputs@n+1,c
 18458  00A9A0  0E00               	movlw	0
 18459  00A9A2  6E13               	movwf	getUserInputs@n,c
 18460                           
 18461                           ;operationMode.c: 41: }
 18462  00A9A4  D010               	goto	l147
 18463  00A9A6                     l144:
 18464                           
 18465                           ;operationMode.c: 42: else{
 18466                           ;operationMode.c: 43: n = (logNumber-1)*35;
 18467  00A9A6  0EFF               	movlw	255
 18468  00A9A8  240F               	addwf	getUserInputs@logNumber,w,c
 18469  00A9AA  6E01               	movwf	___wmul@multiplier,c
 18470  00A9AC  0EFF               	movlw	255
 18471  00A9AE  2010               	addwfc	getUserInputs@logNumber+1,w,c
 18472  00A9B0  6E02               	movwf	___wmul@multiplier+1,c
 18473  00A9B2  0E00               	movlw	0
 18474  00A9B4  6E04               	movwf	___wmul@multiplicand+1,c
 18475  00A9B6  0E23               	movlw	35
 18476  00A9B8  6E03               	movwf	___wmul@multiplicand,c
 18477  00A9BA  EC68  F04D         	call	___wmul	;wreg free
 18478  00A9BE  C001  F013         	movff	?___wmul,getUserInputs@n
 18479  00A9C2  C002  F014         	movff	?___wmul+1,getUserInputs@n+1
 18480  00A9C6                     l147:
 18481                           
 18482                           ;operationMode.c: 44: }
 18483                           ;operationMode.c: 46: for (i=11; i<35; i+=3){
 18484  00A9C6  0E00               	movlw	0
 18485  00A9C8  6E18               	movwf	getUserInputs@i+1,c
 18486  00A9CA  0E0B               	movlw	11
 18487  00A9CC  6E17               	movwf	getUserInputs@i,c
 18488  00A9CE                     l7918:
 18489  00A9CE  5018               	movf	getUserInputs@i+1,w,c
 18490  00A9D0  E14D               	bnz	l150
 18491  00A9D2  0E23               	movlw	35
 18492  00A9D4  5C17               	subwf	getUserInputs@i,w,c
 18493  00A9D6  B0D8               	btfsc	status,0,c
 18494  00A9D8  0012               	return	
 18495                           
 18496                           ;operationMode.c: 47: data = readEEPROM(i+n);
 18497  00A9DA  5017               	movf	getUserInputs@i,w,c
 18498  00A9DC  2413               	addwf	getUserInputs@n,w,c
 18499  00A9DE  EC20  F04D         	call	_readEEPROM
 18500  00A9E2  6E0D               	movwf	??_getUserInputs& (0+255),c
 18501  00A9E4  500D               	movf	??_getUserInputs,w,c
 18502  00A9E6  6E15               	movwf	getUserInputs@data,c
 18503  00A9E8  6A16               	clrf	getUserInputs@data+1,c
 18504                           
 18505                           ;operationMode.c: 48: drawerTable[count] = data;
 18506  00A9EA  90D8               	bcf	status,0,c
 18507  00A9EC  3411               	rlcf	getUserInputs@count,w,c
 18508  00A9EE  6ED9               	movwf	fsr2l,c
 18509  00A9F0  3412               	rlcf	getUserInputs@count+1,w,c
 18510  00A9F2  6EDA               	movwf	fsr2h,c
 18511  00A9F4  5007               	movf	getUserInputs@drawerTable,w,c
 18512  00A9F6  26D9               	addwf	fsr2l,f,c
 18513  00A9F8  5008               	movf	getUserInputs@drawerTable+1,w,c
 18514  00A9FA  22DA               	addwfc	fsr2h,f,c
 18515  00A9FC  C015  FFDE         	movff	getUserInputs@data,postinc2
 18516  00AA00  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18517                           
 18518                           ;operationMode.c: 49: data = readEEPROM(i+1+n);
 18519  00AA04  5017               	movf	getUserInputs@i,w,c
 18520  00AA06  2413               	addwf	getUserInputs@n,w,c
 18521  00AA08  6E0D               	movwf	??_getUserInputs& (0+255),c
 18522  00AA0A  280D               	incf	??_getUserInputs,w,c
 18523  00AA0C  EC20  F04D         	call	_readEEPROM
 18524  00AA10  6E0E               	movwf	(??_getUserInputs+1)& (0+255),c
 18525  00AA12  500E               	movf	??_getUserInputs+1,w,c
 18526  00AA14  6E15               	movwf	getUserInputs@data,c
 18527  00AA16  6A16               	clrf	getUserInputs@data+1,c
 18528                           
 18529                           ;operationMode.c: 50: dietTable[count] = data;
 18530  00AA18  90D8               	bcf	status,0,c
 18531  00AA1A  3411               	rlcf	getUserInputs@count,w,c
 18532  00AA1C  6ED9               	movwf	fsr2l,c
 18533  00AA1E  3412               	rlcf	getUserInputs@count+1,w,c
 18534  00AA20  6EDA               	movwf	fsr2h,c
 18535  00AA22  5009               	movf	getUserInputs@dietTable,w,c
 18536  00AA24  26D9               	addwf	fsr2l,f,c
 18537  00AA26  500A               	movf	getUserInputs@dietTable+1,w,c
 18538  00AA28  22DA               	addwfc	fsr2h,f,c
 18539  00AA2A  C015  FFDE         	movff	getUserInputs@data,postinc2
 18540  00AA2E  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18541                           
 18542                           ;operationMode.c: 51: data = readEEPROM(i+2+n);
 18543  00AA32  5017               	movf	getUserInputs@i,w,c
 18544  00AA34  2413               	addwf	getUserInputs@n,w,c
 18545  00AA36  0F02               	addlw	2
 18546  00AA38  EC20  F04D         	call	_readEEPROM
 18547  00AA3C  6E0D               	movwf	??_getUserInputs& (0+255),c
 18548  00AA3E  500D               	movf	??_getUserInputs,w,c
 18549  00AA40  6E15               	movwf	getUserInputs@data,c
 18550  00AA42  6A16               	clrf	getUserInputs@data+1,c
 18551                           
 18552                           ;operationMode.c: 52: foodTable[count] = data;
 18553  00AA44  90D8               	bcf	status,0,c
 18554  00AA46  3411               	rlcf	getUserInputs@count,w,c
 18555  00AA48  6ED9               	movwf	fsr2l,c
 18556  00AA4A  3412               	rlcf	getUserInputs@count+1,w,c
 18557  00AA4C  6EDA               	movwf	fsr2h,c
 18558  00AA4E  500B               	movf	getUserInputs@foodTable,w,c
 18559  00AA50  26D9               	addwf	fsr2l,f,c
 18560  00AA52  500C               	movf	getUserInputs@foodTable+1,w,c
 18561  00AA54  22DA               	addwfc	fsr2h,f,c
 18562  00AA56  C015  FFDE         	movff	getUserInputs@data,postinc2
 18563  00AA5A  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 18564                           
 18565                           ;operationMode.c: 53: count += 1;
 18566  00AA5E  4A11               	infsnz	getUserInputs@count,f,c
 18567  00AA60  2A12               	incf	getUserInputs@count+1,f,c
 18568  00AA62  0E03               	movlw	3
 18569  00AA64  2617               	addwf	getUserInputs@i,f,c
 18570  00AA66  0E00               	movlw	0
 18571  00AA68  2218               	addwfc	getUserInputs@i+1,f,c
 18572  00AA6A  D7B1               	goto	l7918
 18573  00AA6C                     l150:
 18574  00AA6C  0012               	return		;funcret
 18575  00AA6E                     __end_of_getUserInputs:
 18576                           	opt stack 0
 18577                           tblptru	equ	0xFF8
 18578                           tblptrh	equ	0xFF7
 18579                           tblptrl	equ	0xFF6
 18580                           tablat	equ	0xFF5
 18581                           prodh	equ	0xFF4
 18582                           prodl	equ	0xFF3
 18583                           postinc0	equ	0xFEE
 18584                           wreg	equ	0xFE8
 18585                           postinc1	equ	0xFE6
 18586                           postdec1	equ	0xFE5
 18587                           plusw1	equ	0xFE3
 18588                           fsr1h	equ	0xFE2
 18589                           fsr1l	equ	0xFE1
 18590                           indf2	equ	0xFDF
 18591                           postinc2	equ	0xFDE
 18592                           postdec2	equ	0xFDD
 18593                           plusw2	equ	0xFDB
 18594                           fsr2h	equ	0xFDA
 18595                           fsr2l	equ	0xFD9
 18596                           status	equ	0xFD8
 18597                           
 18598 ;; *************** function _readEEPROM *****************
 18599 ;; Defined at:
 18600 ;;		line 29 in file "EEPROMstorage.c"
 18601 ;; Parameters:    Size  Location     Type
 18602 ;;  address         1    wreg     unsigned char 
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;  address         1    0[COMRAM] unsigned char 
 18605 ;; Return value:  Size  Location     Type
 18606 ;;                  1    wreg      unsigned char 
 18607 ;; Registers used:
 18608 ;;		wreg, status,2
 18609 ;; Tracked objects:
 18610 ;;		On entry : 0/0
 18611 ;;		On exit  : 0/0
 18612 ;;		Unchanged: 0/0
 18613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18618 ;;Total ram usage:        1 bytes
 18619 ;; Hardware stack levels used:    1
 18620 ;; This function calls:
 18621 ;;		Nothing
 18622 ;; This function is called by:
 18623 ;;		_main
 18624 ;;		_getUserInputs
 18625 ;;		_viewLogs
 18626 ;;		_displayLogs
 18627 ;;		_standbyMode
 18628 ;;		_shiftEEPROM
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           	psect	text38
 18633  009A40                     __ptext38:
 18634                           	opt stack 0
 18635  009A40                     _readEEPROM:
 18636                           	opt stack 28
 18637                           
 18638                           ;incstack = 0
 18639                           ;readEEPROM@address stored from wreg
 18640  009A40  6E01               	movwf	readEEPROM@address,c
 18641  009A42                     
 18642                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 18643  009A42  B2A6               	btfsc	4006,1,c	;volsfr
 18644  009A44  D7FE               	goto	l7098
 18645                           
 18646                           ;EEPROMstorage.c: 32: EEADR = address;
 18647  009A46  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 18648                           
 18649                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 18650  009A4A  9EA6               	bcf	4006,7,c	;volsfr
 18651                           
 18652                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 18653  009A4C  9CA6               	bcf	4006,6,c	;volsfr
 18654                           
 18655                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 18656  009A4E  80A6               	bsf	4006,0,c	;volsfr
 18657                           
 18658                           ;EEPROMstorage.c: 36: return( EEDATA );
 18659  009A50  50A8               	movf	4008,w,c	;volatile
 18660  009A52  0012               	return	
 18661  009A54                     __end_of_readEEPROM:
 18662                           	opt stack 0
 18663                           tblptru	equ	0xFF8
 18664                           tblptrh	equ	0xFF7
 18665                           tblptrl	equ	0xFF6
 18666                           tablat	equ	0xFF5
 18667                           prodh	equ	0xFF4
 18668                           prodl	equ	0xFF3
 18669                           postinc0	equ	0xFEE
 18670                           wreg	equ	0xFE8
 18671                           postinc1	equ	0xFE6
 18672                           postdec1	equ	0xFE5
 18673                           plusw1	equ	0xFE3
 18674                           fsr1h	equ	0xFE2
 18675                           fsr1l	equ	0xFE1
 18676                           indf2	equ	0xFDF
 18677                           postinc2	equ	0xFDE
 18678                           postdec2	equ	0xFDD
 18679                           plusw2	equ	0xFDB
 18680                           fsr2h	equ	0xFDA
 18681                           fsr2l	equ	0xFD9
 18682                           status	equ	0xFD8
 18683                           
 18684 ;; *************** function _getRoundPieces *****************
 18685 ;; Defined at:
 18686 ;;		line 200 in file "operationMode.c"
 18687 ;; Parameters:    Size  Location     Type
 18688 ;;  dietType        2    0[COMRAM] unsigned int 
 18689 ;;  foodType        2    2[COMRAM] unsigned int 
 18690 ;; Auto vars:     Size  Location     Type
 18691 ;;  returnValue     2    6[COMRAM] unsigned int 
 18692 ;; Return value:  Size  Location     Type
 18693 ;;                  2    0[COMRAM] unsigned int 
 18694 ;; Registers used:
 18695 ;;		wreg, status,2, status,0
 18696 ;; Tracked objects:
 18697 ;;		On entry : 0/0
 18698 ;;		On exit  : 0/0
 18699 ;;		Unchanged: 0/0
 18700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18704 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18705 ;;Total ram usage:        8 bytes
 18706 ;; Hardware stack levels used:    1
 18707 ;; This function calls:
 18708 ;;		Nothing
 18709 ;; This function is called by:
 18710 ;;		_mainOperation
 18711 ;; This function uses a non-reentrant model
 18712 ;;
 18713                           
 18714                           	psect	text39
 18715  00AB92                     __ptext39:
 18716                           	opt stack 0
 18717  00AB92                     _getRoundPieces:
 18718                           	opt stack 29
 18719                           
 18720                           ;operationMode.c: 201: unsigned int returnValue = 0;
 18721                           
 18722                           ;incstack = 0
 18723  00AB92  0E00               	movlw	0
 18724  00AB94  6E08               	movwf	getRoundPieces@returnValue+1,c
 18725  00AB96  0E00               	movlw	0
 18726  00AB98  6E07               	movwf	getRoundPieces@returnValue,c
 18727                           
 18728                           ;operationMode.c: 203: switch(dietType){
 18729  00AB9A  D060               	goto	l259
 18730  00AB9C                     
 18731                           ;operationMode.c: 206: if (foodType == 0){
 18732  00AB9C  5003               	movf	getRoundPieces@foodType,w,c
 18733  00AB9E  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18734  00ABA0  A4D8               	btfss	status,2,c
 18735  00ABA2  D004               	goto	l261
 18736  00ABA4                     u9730:
 18737                           
 18738                           ;operationMode.c: 207: returnValue = 1;
 18739  00ABA4  0E00               	movlw	0
 18740  00ABA6  6E08               	movwf	getRoundPieces@returnValue+1,c
 18741  00ABA8  0E01               	movlw	1
 18742  00ABAA  D008               	goto	L129
 18743  00ABAC                     l261:
 18744                           
 18745                           ;operationMode.c: 209: else if (foodType == 1){
 18746  00ABAC  0403               	decf	getRoundPieces@foodType,w,c
 18747  00ABAE  D045               	goto	L168
 18748  00ABB0                     
 18749                           ;operationMode.c: 215: if (foodType == 3){
 18750  00ABB0  0E03               	movlw	3
 18751  00ABB2  1803               	xorwf	getRoundPieces@foodType,w,c
 18752  00ABB4  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18753  00ABB6  A4D8               	btfss	status,2,c
 18754  00ABB8  D003               	goto	l266
 18755  00ABBA  D7F4               	goto	u9730
 18756  00ABBC                     L129:
 18757  00ABBC  6E07               	movwf	getRoundPieces@returnValue,c
 18758                           
 18759                           ;operationMode.c: 217: }
 18760  00ABBE  D07C               	goto	l264
 18761  00ABC0                     l266:
 18762                           
 18763                           ;operationMode.c: 218: else if (foodType == 4){
 18764  00ABC0  0E04               	movlw	4
 18765  00ABC2  1803               	xorwf	getRoundPieces@foodType,w,c
 18766  00ABC4  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18767  00ABC6  B4D8               	btfsc	status,2,c
 18768  00ABC8  D7ED               	goto	u9730
 18769                           
 18770                           ;operationMode.c: 221: else if (foodType == 6){
 18771                           
 18772                           ;operationMode.c: 220: }
 18773                           
 18774                           ;operationMode.c: 219: returnValue = 1;
 18775  00ABCA  0E06               	movlw	6
 18776  00ABCC  1803               	xorwf	getRoundPieces@foodType,w,c
 18777  00ABCE  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18778  00ABD0  B4D8               	btfsc	status,2,c
 18779  00ABD2  D036               	goto	u9980
 18780  00ABD4                     
 18781                           ;operationMode.c: 224: else if (foodType == 7){
 18782  00ABD4  0E07               	movlw	7
 18783  00ABD6  D030               	goto	L170
 18784  00ABD8                     
 18785                           ;operationMode.c: 230: if (foodType == 3){
 18786  00ABD8  0E03               	movlw	3
 18787  00ABDA  1803               	xorwf	getRoundPieces@foodType,w,c
 18788  00ABDC  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18789  00ABDE  B4D8               	btfsc	status,2,c
 18790  00ABE0  D7E1               	goto	u9730
 18791                           
 18792                           ;operationMode.c: 233: else if (foodType == 4){
 18793                           
 18794                           ;operationMode.c: 232: }
 18795                           
 18796                           ;operationMode.c: 231: returnValue = 1;
 18797  00ABE2  0E04               	movlw	4
 18798  00ABE4  1803               	xorwf	getRoundPieces@foodType,w,c
 18799  00ABE6  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18800  00ABE8  B4D8               	btfsc	status,2,c
 18801  00ABEA  D7DC               	goto	u9730
 18802                           
 18803                           ;operationMode.c: 236: else if (foodType == 5){
 18804                           
 18805                           ;operationMode.c: 235: }
 18806                           
 18807                           ;operationMode.c: 234: returnValue = 1;
 18808  00ABEC  0E05               	movlw	5
 18809  00ABEE  1803               	xorwf	getRoundPieces@foodType,w,c
 18810  00ABF0  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18811  00ABF2  B4D8               	btfsc	status,2,c
 18812  00ABF4  D7D7               	goto	u9730
 18813                           
 18814                           ;operationMode.c: 239: else if (foodType == 6){
 18815                           
 18816                           ;operationMode.c: 238: }
 18817                           
 18818                           ;operationMode.c: 237: returnValue = 1;
 18819  00ABF6  0E06               	movlw	6
 18820  00ABF8  1803               	xorwf	getRoundPieces@foodType,w,c
 18821  00ABFA  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18822  00ABFC  A4D8               	btfss	status,2,c
 18823  00ABFE  D7EA               	goto	l270
 18824  00AC00  D01F               	goto	u9980
 18825  00AC02                     
 18826                           ;operationMode.c: 257: if (foodType == 8){
 18827                           
 18828                           ;operationMode.c: 256: case 7:
 18829                           
 18830                           ;operationMode.c: 253: }
 18831                           ;operationMode.c: 254: break;
 18832                           
 18833                           ;operationMode.c: 252: returnValue = 2;
 18834                           
 18835                           ;operationMode.c: 251: else if (foodType == 9){
 18836                           
 18837                           ;operationMode.c: 250: }
 18838                           
 18839                           ;operationMode.c: 249: returnValue = 2;
 18840                           
 18841                           ;operationMode.c: 248: if (foodType == 8){
 18842  00AC02  0E08               	movlw	8
 18843  00AC04  1803               	xorwf	getRoundPieces@foodType,w,c
 18844  00AC06  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18845  00AC08  B4D8               	btfsc	status,2,c
 18846  00AC0A  D01A               	goto	u9980
 18847                           
 18848                           ;operationMode.c: 260: else if (foodType == 9){
 18849                           
 18850                           ;operationMode.c: 259: }
 18851                           
 18852                           ;operationMode.c: 258: returnValue = 2;
 18853  00AC0C  0E09               	movlw	9
 18854  00AC0E  D014               	goto	L170
 18855  00AC10                     
 18856                           ;operationMode.c: 266: if (foodType == 8){
 18857  00AC10  0E08               	movlw	8
 18858  00AC12  D00B               	goto	L172
 18859  00AC14                     
 18860                           ;operationMode.c: 290: if (foodType == 8){
 18861                           
 18862                           ;operationMode.c: 289: case 10:
 18863                           
 18864                           ;operationMode.c: 286: }
 18865                           ;operationMode.c: 287: break;
 18866                           
 18867                           ;operationMode.c: 285: returnValue = 2;
 18868                           
 18869                           ;operationMode.c: 284: else if (foodType == 11){
 18870                           
 18871                           ;operationMode.c: 283: }
 18872                           
 18873                           ;operationMode.c: 282: returnValue = 1;
 18874                           
 18875                           ;operationMode.c: 281: else if (foodType == 10){
 18876                           
 18877                           ;operationMode.c: 280: }
 18878                           
 18879                           ;operationMode.c: 279: returnValue = 1;
 18880                           
 18881                           ;operationMode.c: 278: else if (foodType == 9){
 18882                           
 18883                           ;operationMode.c: 277: }
 18884                           
 18885                           ;operationMode.c: 276: returnValue = 1;
 18886                           
 18887                           ;operationMode.c: 275: if (foodType == 8){
 18888  00AC14  0E08               	movlw	8
 18889  00AC16  1803               	xorwf	getRoundPieces@foodType,w,c
 18890  00AC18  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18891  00AC1A  B4D8               	btfsc	status,2,c
 18892  00AC1C  D7C3               	goto	u9730
 18893                           
 18894                           ;operationMode.c: 293: else if (foodType == 9){
 18895                           
 18896                           ;operationMode.c: 292: }
 18897                           
 18898                           ;operationMode.c: 291: returnValue = 1;
 18899  00AC1E  0E09               	movlw	9
 18900  00AC20  1803               	xorwf	getRoundPieces@foodType,w,c
 18901  00AC22  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18902  00AC24  B4D8               	btfsc	status,2,c
 18903  00AC26  D7BE               	goto	u9730
 18904                           
 18905                           ;operationMode.c: 296: else if (foodType == 10){
 18906                           
 18907                           ;operationMode.c: 295: }
 18908                           
 18909                           ;operationMode.c: 294: returnValue = 1;
 18910  00AC28  0E0A               	movlw	10
 18911  00AC2A                     L172:
 18912  00AC2A  1803               	xorwf	getRoundPieces@foodType,w,c
 18913  00AC2C  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18914  00AC2E  B4D8               	btfsc	status,2,c
 18915  00AC30  D7B9               	goto	u9730
 18916                           
 18917                           ;operationMode.c: 299: else if (foodType == 11){
 18918                           
 18919                           ;operationMode.c: 298: }
 18920                           
 18921                           ;operationMode.c: 297: returnValue = 1;
 18922  00AC32  0E0B               	movlw	11
 18923  00AC34  D001               	goto	L170
 18924  00AC36                     
 18925                           ;operationMode.c: 305: if (foodType == 12){
 18926  00AC36  0E0C               	movlw	12
 18927  00AC38                     L170:
 18928  00AC38  1803               	xorwf	getRoundPieces@foodType,w,c
 18929  00AC3A                     L168:
 18930  00AC3A  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18931  00AC3C  A4D8               	btfss	status,2,c
 18932  00AC3E  D03C               	goto	l264
 18933  00AC40                     u9980:
 18934                           
 18935                           ;operationMode.c: 306: returnValue = 2;
 18936  00AC40  0E00               	movlw	0
 18937  00AC42  6E08               	movwf	getRoundPieces@returnValue+1,c
 18938  00AC44  0E02               	movlw	2
 18939  00AC46  D7BA               	goto	L129
 18940  00AC48                     
 18941                           ;operationMode.c: 323: if (foodType == 12){
 18942                           
 18943                           ;operationMode.c: 322: case 16:
 18944                           
 18945                           ;operationMode.c: 319: }
 18946                           ;operationMode.c: 320: break;
 18947                           
 18948                           ;operationMode.c: 318: returnValue = 1;
 18949                           
 18950                           ;operationMode.c: 317: if (foodType == 12){
 18951                           
 18952                           ;operationMode.c: 316: case 15:
 18953                           
 18954                           ;operationMode.c: 313: }
 18955                           ;operationMode.c: 314: break;
 18956                           
 18957                           ;operationMode.c: 312: returnValue = 1;
 18958                           
 18959                           ;operationMode.c: 311: if (foodType == 12){
 18960  00AC48  0E0C               	movlw	12
 18961  00AC4A  1803               	xorwf	getRoundPieces@foodType,w,c
 18962  00AC4C  1004               	iorwf	getRoundPieces@foodType+1,w,c
 18963  00AC4E  A4D8               	btfss	status,2,c
 18964  00AC50  D033               	goto	l264
 18965  00AC52  D7A8               	goto	u9730
 18966  00AC54                     
 18967                           ;operationMode.c: 328: returnValue = 0;
 18968  00AC54  0E00               	movlw	0
 18969  00AC56  6E08               	movwf	getRoundPieces@returnValue+1,c
 18970  00AC58  0E00               	movlw	0
 18971  00AC5A  D7B0               	goto	L129
 18972  00AC5C                     l259:
 18973  00AC5C  C001  F005         	movff	getRoundPieces@dietType,??_getRoundPieces
 18974  00AC60  C002  F006         	movff	getRoundPieces@dietType+1,??_getRoundPieces+1
 18975                           
 18976                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18977                           ; Switch size 1, requested type "space"
 18978                           ; Number of cases is 1, Range of values is 0 to 0
 18979                           ; switch strategies available:
 18980                           ; Name         Instructions Cycles
 18981                           ; simple_byte            4     3 (average)
 18982                           ;	Chosen strategy is simple_byte
 18983  00AC64  5006               	movf	??_getRoundPieces+1,w,c
 18984  00AC66  0A00               	xorlw	0	; case 0
 18985  00AC68  A4D8               	btfss	status,2,c
 18986  00AC6A  D7F4               	goto	l319
 18987                           
 18988                           ; Switch size 1, requested type "space"
 18989                           ; Number of cases is 12, Range of values is 0 to 16
 18990                           ; switch strategies available:
 18991                           ; Name         Instructions Cycles
 18992                           ; simple_byte           37    19 (average)
 18993                           ;	Chosen strategy is simple_byte
 18994  00AC6C  5005               	movf	??_getRoundPieces,w,c
 18995  00AC6E  0A00               	xorlw	0	; case 0
 18996  00AC70  B4D8               	btfsc	status,2,c
 18997  00AC72  D794               	goto	l260
 18998  00AC74  0A03               	xorlw	3	; case 3
 18999  00AC76  B4D8               	btfsc	status,2,c
 19000  00AC78  D79B               	goto	l265
 19001  00AC7A  0A07               	xorlw	7	; case 4
 19002  00AC7C  B4D8               	btfsc	status,2,c
 19003  00AC7E  D7AC               	goto	l273
 19004  00AC80  0A02               	xorlw	2	; case 6
 19005  00AC82  B4D8               	btfsc	status,2,c
 19006  00AC84  D7BE               	goto	l283
 19007  00AC86  0A01               	xorlw	1	; case 7
 19008  00AC88  B4D8               	btfsc	status,2,c
 19009  00AC8A  D7BB               	goto	l283
 19010  00AC8C  0A0F               	xorlw	15	; case 8
 19011  00AC8E  B4D8               	btfsc	status,2,c
 19012  00AC90  D7BF               	goto	l291
 19013  00AC92  0A01               	xorlw	1	; case 9
 19014  00AC94  B4D8               	btfsc	status,2,c
 19015  00AC96  D7BE               	goto	l295
 19016  00AC98  0A03               	xorlw	3	; case 10
 19017  00AC9A  B4D8               	btfsc	status,2,c
 19018  00AC9C  D7BB               	goto	l295
 19019  00AC9E  0A07               	xorlw	7	; case 13
 19020  00ACA0  B4D8               	btfsc	status,2,c
 19021  00ACA2  D7C9               	goto	l311
 19022  00ACA4  0A03               	xorlw	3	; case 14
 19023  00ACA6  B4D8               	btfsc	status,2,c
 19024  00ACA8  D7CF               	goto	l313
 19025  00ACAA  0A01               	xorlw	1	; case 15
 19026  00ACAC  B4D8               	btfsc	status,2,c
 19027  00ACAE  D7CC               	goto	l313
 19028  00ACB0  0A1F               	xorlw	31	; case 16
 19029  00ACB2  B4D8               	btfsc	status,2,c
 19030  00ACB4  D7C9               	goto	l313
 19031  00ACB6  D7CE               	goto	l319
 19032  00ACB8                     l264:
 19033                           
 19034                           ;operationMode.c: 331: return returnValue;
 19035  00ACB8  C007  F001         	movff	getRoundPieces@returnValue,?_getRoundPieces
 19036  00ACBC  C008  F002         	movff	getRoundPieces@returnValue+1,?_getRoundPieces+1
 19037  00ACC0  0012               	return		;funcret
 19038  00ACC2                     __end_of_getRoundPieces:
 19039                           	opt stack 0
 19040                           tblptru	equ	0xFF8
 19041                           tblptrh	equ	0xFF7
 19042                           tblptrl	equ	0xFF6
 19043                           tablat	equ	0xFF5
 19044                           prodh	equ	0xFF4
 19045                           prodl	equ	0xFF3
 19046                           postinc0	equ	0xFEE
 19047                           wreg	equ	0xFE8
 19048                           postinc1	equ	0xFE6
 19049                           postdec1	equ	0xFE5
 19050                           plusw1	equ	0xFE3
 19051                           fsr1h	equ	0xFE2
 19052                           fsr1l	equ	0xFE1
 19053                           indf2	equ	0xFDF
 19054                           postinc2	equ	0xFDE
 19055                           postdec2	equ	0xFDD
 19056                           plusw2	equ	0xFDB
 19057                           fsr2h	equ	0xFDA
 19058                           fsr2l	equ	0xFD9
 19059                           status	equ	0xFD8
 19060                           
 19061 ;; *************** function _getLongPieces *****************
 19062 ;; Defined at:
 19063 ;;		line 472 in file "operationMode.c"
 19064 ;; Parameters:    Size  Location     Type
 19065 ;;  dietType        2    0[COMRAM] unsigned int 
 19066 ;;  foodType        2    2[COMRAM] unsigned int 
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;  returnValue     2    6[COMRAM] unsigned int 
 19069 ;; Return value:  Size  Location     Type
 19070 ;;                  2    0[COMRAM] unsigned int 
 19071 ;; Registers used:
 19072 ;;		wreg, status,2, status,0
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19078 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19079 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19080 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19081 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19082 ;;Total ram usage:        8 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; This function calls:
 19085 ;;		Nothing
 19086 ;; This function is called by:
 19087 ;;		_mainOperation
 19088 ;; This function uses a non-reentrant model
 19089 ;;
 19090                           
 19091                           	psect	text40
 19092  00B248                     __ptext40:
 19093                           	opt stack 0
 19094  00B248                     _getLongPieces:
 19095                           	opt stack 29
 19096                           
 19097                           ;operationMode.c: 473: unsigned int returnValue = 0;
 19098                           
 19099                           ;incstack = 0
 19100  00B248  0E00               	movlw	0
 19101  00B24A  6E08               	movwf	getLongPieces@returnValue+1,c
 19102  00B24C  0E00               	movlw	0
 19103  00B24E  6E07               	movwf	getLongPieces@returnValue,c
 19104                           
 19105                           ;operationMode.c: 474: switch(dietType){
 19106  00B250  D08F               	goto	l387
 19107  00B252                     
 19108                           ;operationMode.c: 477: if (foodType == 0){
 19109  00B252  5003               	movf	getLongPieces@foodType,w,c
 19110  00B254  1004               	iorwf	getLongPieces@foodType+1,w,c
 19111  00B256  B4D8               	btfsc	status,2,c
 19112  00B258  D00B               	goto	u10340
 19113                           
 19114                           ;operationMode.c: 480: else if (foodType == 1){
 19115                           
 19116                           ;operationMode.c: 479: }
 19117                           
 19118                           ;operationMode.c: 478: returnValue = 1;
 19119  00B25A  0403               	decf	getLongPieces@foodType,w,c
 19120  00B25C  1004               	iorwf	getLongPieces@foodType+1,w,c
 19121  00B25E  B4D8               	btfsc	status,2,c
 19122  00B260  D010               	goto	u10350
 19123                           
 19124                           ;operationMode.c: 483: else if (foodType == 2){
 19125                           
 19126                           ;operationMode.c: 482: }
 19127                           
 19128                           ;operationMode.c: 481: returnValue = 2;
 19129  00B262  0E02               	movlw	2
 19130  00B264  D07A               	goto	L151
 19131  00B266                     
 19132                           ;operationMode.c: 489: if (foodType == 3){
 19133  00B266  0E03               	movlw	3
 19134  00B268  1803               	xorwf	getLongPieces@foodType,w,c
 19135  00B26A  1004               	iorwf	getLongPieces@foodType+1,w,c
 19136  00B26C  A4D8               	btfss	status,2,c
 19137  00B26E  D004               	goto	l396
 19138  00B270                     u10340:
 19139                           
 19140                           ;operationMode.c: 490: returnValue = 1;
 19141  00B270  0E00               	movlw	0
 19142  00B272  6E08               	movwf	getLongPieces@returnValue+1,c
 19143  00B274  0E01               	movlw	1
 19144  00B276  D02E               	goto	L148
 19145  00B278                     l396:
 19146                           
 19147                           ;operationMode.c: 492: else if (foodType == 4){
 19148  00B278  0E04               	movlw	4
 19149  00B27A  1803               	xorwf	getLongPieces@foodType,w,c
 19150  00B27C  1004               	iorwf	getLongPieces@foodType+1,w,c
 19151  00B27E  A4D8               	btfss	status,2,c
 19152  00B280  D004               	goto	l398
 19153  00B282                     u10350:
 19154                           
 19155                           ;operationMode.c: 493: returnValue = 2;
 19156  00B282  0E00               	movlw	0
 19157  00B284  6E08               	movwf	getLongPieces@returnValue+1,c
 19158  00B286  0E02               	movlw	2
 19159  00B288  D025               	goto	L148
 19160  00B28A                     l398:
 19161                           
 19162                           ;operationMode.c: 495: else if (foodType == 5){
 19163  00B28A  0E05               	movlw	5
 19164  00B28C  1803               	xorwf	getLongPieces@foodType,w,c
 19165  00B28E  1004               	iorwf	getLongPieces@foodType+1,w,c
 19166  00B290  A4D8               	btfss	status,2,c
 19167  00B292  D013               	goto	L173
 19168  00B294                     u10360:
 19169                           
 19170                           ;operationMode.c: 496: returnValue = 3;
 19171  00B294  0E00               	movlw	0
 19172  00B296  6E08               	movwf	getLongPieces@returnValue+1,c
 19173  00B298  0E03               	movlw	3
 19174  00B29A  D01C               	goto	L148
 19175  00B29C                     
 19176                           ;operationMode.c: 507: if (foodType == 3){
 19177  00B29C  0E03               	movlw	3
 19178  00B29E  1803               	xorwf	getLongPieces@foodType,w,c
 19179  00B2A0  1004               	iorwf	getLongPieces@foodType+1,w,c
 19180  00B2A2  B4D8               	btfsc	status,2,c
 19181  00B2A4  D7E5               	goto	u10340
 19182                           
 19183                           ;operationMode.c: 510: else if (foodType == 4){
 19184                           
 19185                           ;operationMode.c: 509: }
 19186                           
 19187                           ;operationMode.c: 508: returnValue = 1;
 19188  00B2A6  0E04               	movlw	4
 19189  00B2A8  1803               	xorwf	getLongPieces@foodType,w,c
 19190  00B2AA  1004               	iorwf	getLongPieces@foodType+1,w,c
 19191  00B2AC  B4D8               	btfsc	status,2,c
 19192  00B2AE  D7E9               	goto	u10350
 19193                           
 19194                           ;operationMode.c: 513: else if (foodType == 5){
 19195                           
 19196                           ;operationMode.c: 512: }
 19197                           
 19198                           ;operationMode.c: 511: returnValue = 2;
 19199  00B2B0  0E05               	movlw	5
 19200  00B2B2  1803               	xorwf	getLongPieces@foodType,w,c
 19201  00B2B4  1004               	iorwf	getLongPieces@foodType+1,w,c
 19202  00B2B6  B4D8               	btfsc	status,2,c
 19203  00B2B8  D7ED               	goto	u10360
 19204  00B2BA                     L173:
 19205                           
 19206                           ;operationMode.c: 516: else if (foodType == 6){
 19207                           
 19208                           ;operationMode.c: 515: }
 19209                           
 19210                           ;operationMode.c: 514: returnValue = 3;
 19211  00B2BA  0E06               	movlw	6
 19212  00B2BC  1803               	xorwf	getLongPieces@foodType,w,c
 19213  00B2BE  1004               	iorwf	getLongPieces@foodType+1,w,c
 19214  00B2C0  B4D8               	btfsc	status,2,c
 19215  00B2C2  D7D6               	goto	u10340
 19216                           
 19217                           ;operationMode.c: 519: else if (foodType == 7){
 19218                           
 19219                           ;operationMode.c: 518: }
 19220                           
 19221                           ;operationMode.c: 517: returnValue = 1;
 19222  00B2C4  0E07               	movlw	7
 19223  00B2C6  D001               	goto	L152
 19224  00B2C8                     
 19225                           ;operationMode.c: 528: else if (foodType == 9){
 19226  00B2C8  0E09               	movlw	9
 19227  00B2CA                     L152:
 19228  00B2CA  1803               	xorwf	getLongPieces@foodType,w,c
 19229  00B2CC  1004               	iorwf	getLongPieces@foodType+1,w,c
 19230  00B2CE  A4D8               	btfss	status,2,c
 19231  00B2D0  D080               	goto	l394
 19232  00B2D2  D7D7               	goto	u10350
 19233  00B2D4                     L148:
 19234  00B2D4  6E07               	movwf	getLongPieces@returnValue,c
 19235                           
 19236                           ;operationMode.c: 530: }
 19237                           ;operationMode.c: 531: break;
 19238  00B2D6  D07D               	goto	l394
 19239  00B2D8                     
 19240                           ;operationMode.c: 534: if (foodType == 8){
 19241  00B2D8  0E08               	movlw	8
 19242  00B2DA  1803               	xorwf	getLongPieces@foodType,w,c
 19243  00B2DC  1004               	iorwf	getLongPieces@foodType+1,w,c
 19244  00B2DE  B4D8               	btfsc	status,2,c
 19245  00B2E0  D7D0               	goto	u10350
 19246                           
 19247                           ;operationMode.c: 537: else if (foodType == 9){
 19248                           
 19249                           ;operationMode.c: 536: }
 19250                           
 19251                           ;operationMode.c: 535: returnValue = 2;
 19252  00B2E2  0E09               	movlw	9
 19253  00B2E4  1803               	xorwf	getLongPieces@foodType,w,c
 19254  00B2E6  1004               	iorwf	getLongPieces@foodType+1,w,c
 19255  00B2E8  B4D8               	btfsc	status,2,c
 19256  00B2EA  D7D4               	goto	u10360
 19257                           
 19258                           ;operationMode.c: 540: else if (foodType == 10){
 19259                           
 19260                           ;operationMode.c: 539: }
 19261                           
 19262                           ;operationMode.c: 538: returnValue = 3;
 19263  00B2EC  0E0A               	movlw	10
 19264  00B2EE  1803               	xorwf	getLongPieces@foodType,w,c
 19265  00B2F0  1004               	iorwf	getLongPieces@foodType+1,w,c
 19266  00B2F2  B4D8               	btfsc	status,2,c
 19267  00B2F4  D7CF               	goto	u10360
 19268  00B2F6                     
 19269                           ;operationMode.c: 543: else if (foodType == 11){
 19270  00B2F6  0E0B               	movlw	11
 19271  00B2F8  D7E8               	goto	L152
 19272  00B2FA                     
 19273                           ;operationMode.c: 549: if (foodType == 8){
 19274  00B2FA  0E08               	movlw	8
 19275  00B2FC  1803               	xorwf	getLongPieces@foodType,w,c
 19276  00B2FE  1004               	iorwf	getLongPieces@foodType+1,w,c
 19277  00B300  B4D8               	btfsc	status,2,c
 19278  00B302  D7B6               	goto	u10340
 19279                           
 19280                           ;operationMode.c: 552: else if (foodType == 9){
 19281                           
 19282                           ;operationMode.c: 551: }
 19283                           
 19284                           ;operationMode.c: 550: returnValue = 1;
 19285  00B304  0E09               	movlw	9
 19286  00B306  1803               	xorwf	getLongPieces@foodType,w,c
 19287  00B308  1004               	iorwf	getLongPieces@foodType+1,w,c
 19288  00B30A  B4D8               	btfsc	status,2,c
 19289  00B30C  D7BA               	goto	u10350
 19290                           
 19291                           ;operationMode.c: 555: else if (foodType == 10){
 19292                           
 19293                           ;operationMode.c: 554: }
 19294                           
 19295                           ;operationMode.c: 553: returnValue = 2;
 19296  00B30E  0E0A               	movlw	10
 19297  00B310  1803               	xorwf	getLongPieces@foodType,w,c
 19298  00B312  1004               	iorwf	getLongPieces@foodType+1,w,c
 19299  00B314  B4D8               	btfsc	status,2,c
 19300  00B316  D7AC               	goto	u10340
 19301                           
 19302                           ;operationMode.c: 558: else if (foodType == 11){
 19303                           
 19304                           ;operationMode.c: 557: }
 19305                           
 19306                           ;operationMode.c: 556: returnValue = 1;
 19307  00B318  0E0B               	movlw	11
 19308  00B31A  D016               	goto	L150
 19309  00B31C                     l435:
 19310                           
 19311                           ;operationMode.c: 564: if (foodType == 8){
 19312  00B31C  0E08               	movlw	8
 19313  00B31E  1803               	xorwf	getLongPieces@foodType,w,c
 19314  00B320  1004               	iorwf	getLongPieces@foodType+1,w,c
 19315  00B322  A4D8               	btfss	status,2,c
 19316  00B324  D7D1               	goto	l416
 19317  00B326  D7A4               	goto	u10340
 19318  00B328                     
 19319                           ;operationMode.c: 573: if (foodType == 8){
 19320  00B328  0E08               	movlw	8
 19321  00B32A  1803               	xorwf	getLongPieces@foodType,w,c
 19322  00B32C  1004               	iorwf	getLongPieces@foodType+1,w,c
 19323  00B32E  B4D8               	btfsc	status,2,c
 19324  00B330  D7A8               	goto	u10350
 19325                           
 19326                           ;operationMode.c: 576: else if (foodType == 9){
 19327                           
 19328                           ;operationMode.c: 575: }
 19329                           
 19330                           ;operationMode.c: 574: returnValue = 2;
 19331  00B332  0E09               	movlw	9
 19332  00B334  1803               	xorwf	getLongPieces@foodType,w,c
 19333  00B336  1004               	iorwf	getLongPieces@foodType+1,w,c
 19334  00B338  B4D8               	btfsc	status,2,c
 19335  00B33A  D7AC               	goto	u10360
 19336                           
 19337                           ;operationMode.c: 579: else if (foodType == 10){
 19338                           
 19339                           ;operationMode.c: 578: }
 19340                           
 19341                           ;operationMode.c: 577: returnValue = 3;
 19342  00B33C  0E0A               	movlw	10
 19343  00B33E  1803               	xorwf	getLongPieces@foodType,w,c
 19344  00B340  1004               	iorwf	getLongPieces@foodType+1,w,c
 19345  00B342  A4D8               	btfss	status,2,c
 19346  00B344  D7D8               	goto	l424
 19347  00B346  D7A6               	goto	u10360
 19348  00B348                     L150:
 19349  00B348  1803               	xorwf	getLongPieces@foodType,w,c
 19350  00B34A  1004               	iorwf	getLongPieces@foodType+1,w,c
 19351  00B34C  A4D8               	btfss	status,2,c
 19352  00B34E  D041               	goto	l394
 19353  00B350  D78F               	goto	u10340
 19354  00B352                     l449:
 19355                           
 19356                           ;operationMode.c: 594: if (foodType == 12){
 19357  00B352  0E0C               	movlw	12
 19358  00B354  D7F9               	goto	L150
 19359  00B356                     
 19360                           ;operationMode.c: 600: if (foodType == 12){
 19361  00B356  0E0C               	movlw	12
 19362  00B358  D7B8               	goto	L152
 19363  00B35A                     L151:
 19364  00B35A  1803               	xorwf	getLongPieces@foodType,w,c
 19365  00B35C  1004               	iorwf	getLongPieces@foodType+1,w,c
 19366  00B35E  A4D8               	btfss	status,2,c
 19367  00B360  D038               	goto	l394
 19368  00B362  D798               	goto	u10360
 19369  00B364                     l455:
 19370                           
 19371                           ;operationMode.c: 612: if (foodType == 12){
 19372  00B364  0E0C               	movlw	12
 19373  00B366  D7F9               	goto	L151
 19374  00B368                     
 19375                           ;operationMode.c: 617: returnValue = 0;
 19376  00B368  0E00               	movlw	0
 19377  00B36A  6E08               	movwf	getLongPieces@returnValue+1,c
 19378  00B36C  0E00               	movlw	0
 19379  00B36E  D7B2               	goto	L148
 19380  00B370                     l387:
 19381  00B370  C001  F005         	movff	getLongPieces@dietType,??_getLongPieces
 19382  00B374  C002  F006         	movff	getLongPieces@dietType+1,??_getLongPieces+1
 19383                           
 19384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19385                           ; Switch size 1, requested type "space"
 19386                           ; Number of cases is 1, Range of values is 0 to 0
 19387                           ; switch strategies available:
 19388                           ; Name         Instructions Cycles
 19389                           ; simple_byte            4     3 (average)
 19390                           ;	Chosen strategy is simple_byte
 19391  00B378  5006               	movf	??_getLongPieces+1,w,c
 19392  00B37A  0A00               	xorlw	0	; case 0
 19393  00B37C  A4D8               	btfss	status,2,c
 19394  00B37E  D7F4               	goto	l457
 19395                           
 19396                           ; Switch size 1, requested type "space"
 19397                           ; Number of cases is 13, Range of values is 2 to 17
 19398                           ; switch strategies available:
 19399                           ; Name         Instructions Cycles
 19400                           ; simple_byte           40    21 (average)
 19401                           ;	Chosen strategy is simple_byte
 19402  00B380  5005               	movf	??_getLongPieces,w,c
 19403  00B382  0A02               	xorlw	2	; case 2
 19404  00B384  B4D8               	btfsc	status,2,c
 19405  00B386  D765               	goto	l388
 19406  00B388  0A06               	xorlw	6	; case 4
 19407  00B38A  B4D8               	btfsc	status,2,c
 19408  00B38C  D76C               	goto	l395
 19409  00B38E  0A01               	xorlw	1	; case 5
 19410  00B390  B4D8               	btfsc	status,2,c
 19411  00B392  D784               	goto	l405
 19412  00B394  0A02               	xorlw	2	; case 7
 19413  00B396  B4D8               	btfsc	status,2,c
 19414  00B398  D7C1               	goto	l435
 19415  00B39A  0A0E               	xorlw	14	; case 9
 19416  00B39C  B4D8               	btfsc	status,2,c
 19417  00B39E  D79C               	goto	l419
 19418  00B3A0  0A03               	xorlw	3	; case 10
 19419  00B3A2  B4D8               	btfsc	status,2,c
 19420  00B3A4  D7AA               	goto	l427
 19421  00B3A6  0A01               	xorlw	1	; case 11
 19422  00B3A8  B4D8               	btfsc	status,2,c
 19423  00B3AA  D7B8               	goto	l435
 19424  00B3AC  0A07               	xorlw	7	; case 12
 19425  00B3AE  B4D8               	btfsc	status,2,c
 19426  00B3B0  D7BB               	goto	l439
 19427  00B3B2  0A01               	xorlw	1	; case 13
 19428  00B3B4  B4D8               	btfsc	status,2,c
 19429  00B3B6  D7CD               	goto	l449
 19430  00B3B8  0A03               	xorlw	3	; case 14
 19431  00B3BA  B4D8               	btfsc	status,2,c
 19432  00B3BC  D7CA               	goto	l449
 19433  00B3BE  0A01               	xorlw	1	; case 15
 19434  00B3C0  B4D8               	btfsc	status,2,c
 19435  00B3C2  D7C9               	goto	l451
 19436  00B3C4  0A1F               	xorlw	31	; case 16
 19437  00B3C6  B4D8               	btfsc	status,2,c
 19438  00B3C8  D7CD               	goto	l455
 19439  00B3CA  0A01               	xorlw	1	; case 17
 19440  00B3CC  B4D8               	btfsc	status,2,c
 19441  00B3CE  D7CA               	goto	l455
 19442  00B3D0  D7CB               	goto	l457
 19443  00B3D2                     l394:
 19444                           
 19445                           ;operationMode.c: 620: return returnValue;
 19446  00B3D2  C007  F001         	movff	getLongPieces@returnValue,?_getLongPieces
 19447  00B3D6  C008  F002         	movff	getLongPieces@returnValue+1,?_getLongPieces+1
 19448  00B3DA  0012               	return		;funcret
 19449  00B3DC                     __end_of_getLongPieces:
 19450                           	opt stack 0
 19451                           tblptru	equ	0xFF8
 19452                           tblptrh	equ	0xFF7
 19453                           tblptrl	equ	0xFF6
 19454                           tablat	equ	0xFF5
 19455                           prodh	equ	0xFF4
 19456                           prodl	equ	0xFF3
 19457                           postinc0	equ	0xFEE
 19458                           wreg	equ	0xFE8
 19459                           postinc1	equ	0xFE6
 19460                           postdec1	equ	0xFE5
 19461                           plusw1	equ	0xFE3
 19462                           fsr1h	equ	0xFE2
 19463                           fsr1l	equ	0xFE1
 19464                           indf2	equ	0xFDF
 19465                           postinc2	equ	0xFDE
 19466                           postdec2	equ	0xFDD
 19467                           plusw2	equ	0xFDB
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function _getFlatPieces *****************
 19473 ;; Defined at:
 19474 ;;		line 336 in file "operationMode.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;  dietType        2    0[COMRAM] unsigned int 
 19477 ;;  foodType        2    2[COMRAM] unsigned int 
 19478 ;; Auto vars:     Size  Location     Type
 19479 ;;  returnValue     2    6[COMRAM] unsigned int 
 19480 ;; Return value:  Size  Location     Type
 19481 ;;                  2    0[COMRAM] unsigned int 
 19482 ;; Registers used:
 19483 ;;		wreg, status,2, status,0
 19484 ;; Tracked objects:
 19485 ;;		On entry : 0/0
 19486 ;;		On exit  : 0/0
 19487 ;;		Unchanged: 0/0
 19488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19489 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19491 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19492 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19493 ;;Total ram usage:        8 bytes
 19494 ;; Hardware stack levels used:    1
 19495 ;; This function calls:
 19496 ;;		Nothing
 19497 ;; This function is called by:
 19498 ;;		_mainOperation
 19499 ;; This function uses a non-reentrant model
 19500 ;;
 19501                           
 19502                           	psect	text41
 19503  00AE00                     __ptext41:
 19504                           	opt stack 0
 19505  00AE00                     _getFlatPieces:
 19506                           	opt stack 29
 19507                           
 19508                           ;operationMode.c: 337: unsigned int returnValue = 0;
 19509                           
 19510                           ;incstack = 0
 19511  00AE00  0E00               	movlw	0
 19512  00AE02  6E08               	movwf	getFlatPieces@returnValue+1,c
 19513  00AE04  0E00               	movlw	0
 19514  00AE06  6E07               	movwf	getFlatPieces@returnValue,c
 19515                           
 19516                           ;operationMode.c: 339: switch(dietType){
 19517  00AE08  D07B               	goto	l323
 19518  00AE0A                     
 19519                           ;operationMode.c: 342: if (foodType == 0){
 19520  00AE0A  5003               	movf	getFlatPieces@foodType,w,c
 19521  00AE0C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19522  00AE0E  A4D8               	btfss	status,2,c
 19523  00AE10  D004               	goto	l325
 19524  00AE12                     u10020:
 19525                           
 19526                           ;operationMode.c: 343: returnValue = 1;
 19527  00AE12  0E00               	movlw	0
 19528  00AE14  6E08               	movwf	getFlatPieces@returnValue+1,c
 19529  00AE16  0E01               	movlw	1
 19530  00AE18  D020               	goto	L158
 19531  00AE1A                     l325:
 19532                           
 19533                           ;operationMode.c: 345: else if (foodType == 1){
 19534  00AE1A  0403               	decf	getFlatPieces@foodType,w,c
 19535  00AE1C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19536  00AE1E  A4D8               	btfss	status,2,c
 19537  00AE20  D09D               	goto	l328
 19538  00AE22                     u10030:
 19539                           
 19540                           ;operationMode.c: 346: returnValue = 2;
 19541  00AE22  0E00               	movlw	0
 19542  00AE24  6E08               	movwf	getFlatPieces@returnValue+1,c
 19543  00AE26  0E02               	movlw	2
 19544  00AE28  D018               	goto	L158
 19545  00AE2A                     
 19546                           ;operationMode.c: 351: if (foodType == 3){
 19547  00AE2A  0E03               	movlw	3
 19548  00AE2C  1803               	xorwf	getFlatPieces@foodType,w,c
 19549  00AE2E  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19550  00AE30  B4D8               	btfsc	status,2,c
 19551  00AE32  D7EF               	goto	u10020
 19552                           
 19553                           ;operationMode.c: 354: else if (foodType == 4){
 19554                           
 19555                           ;operationMode.c: 353: }
 19556                           
 19557                           ;operationMode.c: 352: returnValue = 1;
 19558  00AE34  0E04               	movlw	4
 19559  00AE36  1803               	xorwf	getFlatPieces@foodType,w,c
 19560  00AE38  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19561  00AE3A  B4D8               	btfsc	status,2,c
 19562  00AE3C  D7F2               	goto	u10030
 19563                           
 19564                           ;operationMode.c: 357: else if (foodType == 6){
 19565                           
 19566                           ;operationMode.c: 356: }
 19567                           
 19568                           ;operationMode.c: 355: returnValue = 2;
 19569  00AE3E  0E06               	movlw	6
 19570  00AE40  1803               	xorwf	getFlatPieces@foodType,w,c
 19571  00AE42  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19572  00AE44  B4D8               	btfsc	status,2,c
 19573  00AE46  D7E5               	goto	u10020
 19574  00AE48                     l334:
 19575                           
 19576                           ;operationMode.c: 360: else if (foodType == 7){
 19577  00AE48  0E07               	movlw	7
 19578  00AE4A  1803               	xorwf	getFlatPieces@foodType,w,c
 19579  00AE4C  D7E7               	goto	L171
 19580  00AE4E                     
 19581                           ;operationMode.c: 366: if (foodType == 3){
 19582  00AE4E  0E03               	movlw	3
 19583  00AE50  1803               	xorwf	getFlatPieces@foodType,w,c
 19584  00AE52  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19585  00AE54  A4D8               	btfss	status,2,c
 19586  00AE56  D003               	goto	l338
 19587  00AE58  D7DC               	goto	u10020
 19588  00AE5A                     L158:
 19589  00AE5A  6E07               	movwf	getFlatPieces@returnValue,c
 19590                           
 19591                           ;operationMode.c: 368: }
 19592  00AE5C  D07F               	goto	l328
 19593  00AE5E                     l338:
 19594                           
 19595                           ;operationMode.c: 369: else if (foodType == 4){
 19596  00AE5E  0E04               	movlw	4
 19597  00AE60  1803               	xorwf	getFlatPieces@foodType,w,c
 19598  00AE62  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19599  00AE64  B4D8               	btfsc	status,2,c
 19600  00AE66  D7D5               	goto	u10020
 19601                           
 19602                           ;operationMode.c: 372: else if (foodType == 5){
 19603                           
 19604                           ;operationMode.c: 371: }
 19605                           
 19606                           ;operationMode.c: 370: returnValue = 1;
 19607  00AE68  0E05               	movlw	5
 19608  00AE6A  1803               	xorwf	getFlatPieces@foodType,w,c
 19609  00AE6C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19610  00AE6E  B4D8               	btfsc	status,2,c
 19611  00AE70  D7D0               	goto	u10020
 19612                           
 19613                           ;operationMode.c: 375: else if (foodType == 6){
 19614                           
 19615                           ;operationMode.c: 374: }
 19616                           
 19617                           ;operationMode.c: 373: returnValue = 1;
 19618  00AE72  0E06               	movlw	6
 19619  00AE74  1803               	xorwf	getFlatPieces@foodType,w,c
 19620  00AE76  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19621  00AE78  B4D8               	btfsc	status,2,c
 19622  00AE7A  D7D3               	goto	u10030
 19623                           
 19624                           ;operationMode.c: 377: }
 19625                           
 19626                           ;operationMode.c: 376: returnValue = 2;
 19627  00AE7C  D7E5               	goto	l334
 19628  00AE7E                     
 19629                           ;operationMode.c: 384: if (foodType == 8){
 19630  00AE7E  0E08               	movlw	8
 19631  00AE80  1803               	xorwf	getFlatPieces@foodType,w,c
 19632  00AE82  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19633  00AE84  A4D8               	btfss	status,2,c
 19634  00AE86  D022               	goto	l364
 19635  00AE88  D7C4               	goto	u10020
 19636  00AE8A                     
 19637                           ;operationMode.c: 393: if (foodType == 8){
 19638  00AE8A  0E08               	movlw	8
 19639  00AE8C  1803               	xorwf	getFlatPieces@foodType,w,c
 19640  00AE8E  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19641  00AE90  B4D8               	btfsc	status,2,c
 19642  00AE92  D7C7               	goto	u10030
 19643  00AE94                     
 19644                           ;operationMode.c: 396: else if (foodType == 11){
 19645  00AE94  0E0B               	movlw	11
 19646  00AE96  D7D9               	goto	L164
 19647  00AE98                     
 19648                           ;operationMode.c: 402: if (foodType == 8){
 19649  00AE98  0E08               	movlw	8
 19650  00AE9A  1803               	xorwf	getFlatPieces@foodType,w,c
 19651  00AE9C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19652  00AE9E  B4D8               	btfsc	status,2,c
 19653  00AEA0  D7B8               	goto	u10020
 19654                           
 19655                           ;operationMode.c: 405: else if (foodType == 9){
 19656                           
 19657                           ;operationMode.c: 404: }
 19658                           
 19659                           ;operationMode.c: 403: returnValue = 1;
 19660  00AEA2  0E09               	movlw	9
 19661  00AEA4  1803               	xorwf	getFlatPieces@foodType,w,c
 19662  00AEA6  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19663  00AEA8  B4D8               	btfsc	status,2,c
 19664  00AEAA  D7B3               	goto	u10020
 19665                           
 19666                           ;operationMode.c: 408: else if (foodType == 10){
 19667                           
 19668                           ;operationMode.c: 407: }
 19669                           
 19670                           ;operationMode.c: 406: returnValue = 1;
 19671  00AEAC  0E0A               	movlw	10
 19672  00AEAE  1803               	xorwf	getFlatPieces@foodType,w,c
 19673  00AEB0  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19674  00AEB2  B4D8               	btfsc	status,2,c
 19675  00AEB4  D7B6               	goto	u10030
 19676                           
 19677                           ;operationMode.c: 411: else if (foodType == 11){
 19678                           
 19679                           ;operationMode.c: 410: }
 19680                           
 19681                           ;operationMode.c: 409: returnValue = 2;
 19682  00AEB6  0E0B               	movlw	11
 19683  00AEB8                     L160:
 19684  00AEB8  1803               	xorwf	getFlatPieces@foodType,w,c
 19685  00AEBA  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19686  00AEBC  A4D8               	btfss	status,2,c
 19687  00AEBE  D04E               	goto	l328
 19688  00AEC0  D7A8               	goto	u10020
 19689  00AEC2                     
 19690                           ;operationMode.c: 417: if (foodType == 8){
 19691  00AEC2  0E08               	movlw	8
 19692  00AEC4  1803               	xorwf	getFlatPieces@foodType,w,c
 19693  00AEC6  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19694  00AEC8  B4D8               	btfsc	status,2,c
 19695  00AECA  D7AB               	goto	u10030
 19696  00AECC                     l364:
 19697                           
 19698                           ;operationMode.c: 420: else if (foodType == 9){
 19699  00AECC  0E09               	movlw	9
 19700  00AECE  D7BD               	goto	L164
 19701  00AED0                     
 19702                           ;operationMode.c: 426: if (foodType == 8){
 19703  00AED0  0E08               	movlw	8
 19704  00AED2  1803               	xorwf	getFlatPieces@foodType,w,c
 19705  00AED4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19706  00AED6  B4D8               	btfsc	status,2,c
 19707  00AED8  D79C               	goto	u10020
 19708                           
 19709                           ;operationMode.c: 429: else if (foodType == 9){
 19710                           
 19711                           ;operationMode.c: 428: }
 19712                           
 19713                           ;operationMode.c: 427: returnValue = 1;
 19714  00AEDA  0E09               	movlw	9
 19715  00AEDC  1803               	xorwf	getFlatPieces@foodType,w,c
 19716  00AEDE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19717  00AEE0  B4D8               	btfsc	status,2,c
 19718  00AEE2  D797               	goto	u10020
 19719                           
 19720                           ;operationMode.c: 432: else if (foodType == 10){
 19721                           
 19722                           ;operationMode.c: 431: }
 19723                           
 19724                           ;operationMode.c: 430: returnValue = 1;
 19725  00AEE4  0E0A               	movlw	10
 19726  00AEE6  1803               	xorwf	getFlatPieces@foodType,w,c
 19727  00AEE8  1004               	iorwf	getFlatPieces@foodType+1,w,c
 19728  00AEEA  A4D8               	btfss	status,2,c
 19729  00AEEC  D7D3               	goto	l352
 19730  00AEEE  D791               	goto	u10020
 19731  00AEF0                     
 19732                           ;operationMode.c: 447: if (foodType == 12){
 19733  00AEF0  0E0C               	movlw	12
 19734  00AEF2  D7AB               	goto	L164
 19735  00AEF4                     
 19736                           ;operationMode.c: 459: if (foodType == 12){
 19737  00AEF4  0E0C               	movlw	12
 19738  00AEF6  D7E0               	goto	L160
 19739  00AEF8                     
 19740                           ;operationMode.c: 464: returnValue = 0;
 19741  00AEF8  0E00               	movlw	0
 19742  00AEFA  6E08               	movwf	getFlatPieces@returnValue+1,c
 19743  00AEFC  0E00               	movlw	0
 19744  00AEFE  D7AD               	goto	L158
 19745  00AF00                     l323:
 19746  00AF00  C001  F005         	movff	getFlatPieces@dietType,??_getFlatPieces
 19747  00AF04  C002  F006         	movff	getFlatPieces@dietType+1,??_getFlatPieces+1
 19748                           
 19749                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19750                           ; Switch size 1, requested type "space"
 19751                           ; Number of cases is 1, Range of values is 0 to 0
 19752                           ; switch strategies available:
 19753                           ; Name         Instructions Cycles
 19754                           ; simple_byte            4     3 (average)
 19755                           ;	Chosen strategy is simple_byte
 19756  00AF08  5006               	movf	??_getFlatPieces+1,w,c
 19757  00AF0A  0A00               	xorlw	0	; case 0
 19758  00AF0C  A4D8               	btfss	status,2,c
 19759  00AF0E  D7F4               	goto	l383
 19760                           
 19761                           ; Switch size 1, requested type "space"
 19762                           ; Number of cases is 12, Range of values is 1 to 17
 19763                           ; switch strategies available:
 19764                           ; Name         Instructions Cycles
 19765                           ; simple_byte           37    19 (average)
 19766                           ;	Chosen strategy is simple_byte
 19767  00AF10  5005               	movf	??_getFlatPieces,w,c
 19768  00AF12  0A01               	xorlw	1	; case 1
 19769  00AF14  B4D8               	btfsc	status,2,c
 19770  00AF16  D779               	goto	l324
 19771  00AF18  0A02               	xorlw	2	; case 3
 19772  00AF1A  B4D8               	btfsc	status,2,c
 19773  00AF1C  D786               	goto	l329
 19774  00AF1E  0A06               	xorlw	6	; case 5
 19775  00AF20  B4D8               	btfsc	status,2,c
 19776  00AF22  D795               	goto	l337
 19777  00AF24  0A03               	xorlw	3	; case 6
 19778  00AF26  B4D8               	btfsc	status,2,c
 19779  00AF28  D7AA               	goto	l347
 19780  00AF2A  0A0E               	xorlw	14	; case 8
 19781  00AF2C  B4D8               	btfsc	status,2,c
 19782  00AF2E  D7AD               	goto	l351
 19783  00AF30  0A02               	xorlw	2	; case 10
 19784  00AF32  B4D8               	btfsc	status,2,c
 19785  00AF34  D7B1               	goto	l355
 19786  00AF36  0A01               	xorlw	1	; case 11
 19787  00AF38  B4D8               	btfsc	status,2,c
 19788  00AF3A  D7C3               	goto	l363
 19789  00AF3C  0A07               	xorlw	7	; case 12
 19790  00AF3E  B4D8               	btfsc	status,2,c
 19791  00AF40  D7C7               	goto	l367
 19792  00AF42  0A01               	xorlw	1	; case 13
 19793  00AF44  B4D8               	btfsc	status,2,c
 19794  00AF46  D7D6               	goto	l381
 19795  00AF48  0A03               	xorlw	3	; case 14
 19796  00AF4A  B4D8               	btfsc	status,2,c
 19797  00AF4C  D7D1               	goto	l377
 19798  00AF4E  0A01               	xorlw	1	; case 15
 19799  00AF50  B4D8               	btfsc	status,2,c
 19800  00AF52  D7D0               	goto	l381
 19801  00AF54  0A1E               	xorlw	30	; case 17
 19802  00AF56  B4D8               	btfsc	status,2,c
 19803  00AF58  D7CD               	goto	l381
 19804  00AF5A  D7CE               	goto	l383
 19805  00AF5C                     l328:
 19806                           
 19807                           ;operationMode.c: 467: return returnValue;
 19808  00AF5C  C007  F001         	movff	getFlatPieces@returnValue,?_getFlatPieces
 19809  00AF60  C008  F002         	movff	getFlatPieces@returnValue+1,?_getFlatPieces+1
 19810  00AF64  0012               	return		;funcret
 19811  00AF66                     __end_of_getFlatPieces:
 19812                           	opt stack 0
 19813                           tblptru	equ	0xFF8
 19814                           tblptrh	equ	0xFF7
 19815                           tblptrl	equ	0xFF6
 19816                           tablat	equ	0xFF5
 19817                           prodh	equ	0xFF4
 19818                           prodl	equ	0xFF3
 19819                           postinc0	equ	0xFEE
 19820                           wreg	equ	0xFE8
 19821                           postinc1	equ	0xFE6
 19822                           postdec1	equ	0xFE5
 19823                           plusw1	equ	0xFE3
 19824                           fsr1h	equ	0xFE2
 19825                           fsr1l	equ	0xFE1
 19826                           indf2	equ	0xFDF
 19827                           postinc2	equ	0xFDE
 19828                           postdec2	equ	0xFDD
 19829                           plusw2	equ	0xFDB
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _findDrawerIndex *****************
 19835 ;; Defined at:
 19836 ;;		line 187 in file "operationMode.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 19839 ;;		 -> mainOperation@drawerTable(16), 
 19840 ;;  sortedDrawer    2    2[COMRAM] unsigned int 
 19841 ;; Auto vars:     Size  Location     Type
 19842 ;;  i               2    8[COMRAM] unsigned int 
 19843 ;;  returnValue     2    6[COMRAM] unsigned int 
 19844 ;; Return value:  Size  Location     Type
 19845 ;;                  2    0[COMRAM] unsigned int 
 19846 ;; Registers used:
 19847 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19848 ;; Tracked objects:
 19849 ;;		On entry : 0/0
 19850 ;;		On exit  : 0/0
 19851 ;;		Unchanged: 0/0
 19852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19853 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19857 ;;Total ram usage:       10 bytes
 19858 ;; Hardware stack levels used:    1
 19859 ;; This function calls:
 19860 ;;		Nothing
 19861 ;; This function is called by:
 19862 ;;		_mainOperation
 19863 ;; This function uses a non-reentrant model
 19864 ;;
 19865                           
 19866                           	psect	text42
 19867  009D7C                     __ptext42:
 19868                           	opt stack 0
 19869  009D7C                     _findDrawerIndex:
 19870                           	opt stack 29
 19871                           
 19872                           ;operationMode.c: 188: unsigned int returnValue = 0;
 19873                           
 19874                           ;incstack = 0
 19875  009D7C  0E00               	movlw	0
 19876  009D7E  6E08               	movwf	findDrawerIndex@returnValue+1,c
 19877  009D80  0E00               	movlw	0
 19878  009D82  6E07               	movwf	findDrawerIndex@returnValue,c
 19879                           
 19880                           ;operationMode.c: 189: unsigned int i = 0;
 19881  009D84  0E00               	movlw	0
 19882  009D86  6E0A               	movwf	findDrawerIndex@i+1,c
 19883  009D88  0E00               	movlw	0
 19884  009D8A  6E09               	movwf	findDrawerIndex@i,c
 19885                           
 19886                           ;operationMode.c: 191: for (i=0; i<8; i++){
 19887  009D8C  0E00               	movlw	0
 19888  009D8E  6E0A               	movwf	findDrawerIndex@i+1,c
 19889  009D90  0E00               	movlw	0
 19890  009D92  6E09               	movwf	findDrawerIndex@i,c
 19891  009D94  500A               	movf	findDrawerIndex@i+1,w,c
 19892  009D96  E11D               	bnz	l254
 19893  009D98  D018               	goto	L165
 19894  009D9A                     
 19895                           ;operationMode.c: 192: if(drawerTable[i] == sortedDrawerValue){
 19896  009D9A  90D8               	bcf	status,0,c
 19897  009D9C  3409               	rlcf	findDrawerIndex@i,w,c
 19898  009D9E  6ED9               	movwf	fsr2l,c
 19899  009DA0  340A               	rlcf	findDrawerIndex@i+1,w,c
 19900  009DA2  6EDA               	movwf	fsr2h,c
 19901  009DA4  5001               	movf	findDrawerIndex@drawerTable,w,c
 19902  009DA6  26D9               	addwf	fsr2l,f,c
 19903  009DA8  5002               	movf	findDrawerIndex@drawerTable+1,w,c
 19904  009DAA  22DA               	addwfc	fsr2h,f,c
 19905  009DAC  5003               	movf	findDrawerIndex@sortedDrawerValue,w,c
 19906  009DAE  18DE               	xorwf	postinc2,w,c
 19907  009DB0  E108               	bnz	l8216
 19908  009DB2  5004               	movf	findDrawerIndex@sortedDrawerValue+1,w,c
 19909  009DB4  18DE               	xorwf	postinc2,w,c
 19910  009DB6  A4D8               	btfss	status,2,c
 19911  009DB8  D004               	goto	l255
 19912                           
 19913                           ;operationMode.c: 193: returnValue = i;
 19914  009DBA  C009  F007         	movff	findDrawerIndex@i,findDrawerIndex@returnValue
 19915  009DBE  C00A  F008         	movff	findDrawerIndex@i+1,findDrawerIndex@returnValue+1
 19916  009DC2                     l255:
 19917  009DC2                     l8216:
 19918  009DC2  4A09               	infsnz	findDrawerIndex@i,f,c
 19919  009DC4  2A0A               	incf	findDrawerIndex@i+1,f,c
 19920  009DC6  500A               	movf	findDrawerIndex@i+1,w,c
 19921  009DC8  E104               	bnz	u9720
 19922  009DCA                     L165:
 19923  009DCA  0E08               	movlw	8
 19924  009DCC  5C09               	subwf	findDrawerIndex@i,w,c
 19925  009DCE  A0D8               	btfss	status,0,c
 19926  009DD0  D7E4               	goto	l253
 19927  009DD2                     u9720:
 19928  009DD2                     l254:
 19929                           
 19930                           ;operationMode.c: 194: }
 19931                           ;operationMode.c: 195: }
 19932                           ;operationMode.c: 196: return returnValue;
 19933  009DD2  C007  F001         	movff	findDrawerIndex@returnValue,?_findDrawerIndex
 19934  009DD6  C008  F002         	movff	findDrawerIndex@returnValue+1,?_findDrawerIndex+1
 19935  009DDA  0012               	return		;funcret
 19936  009DDC                     __end_of_findDrawerIndex:
 19937                           	opt stack 0
 19938                           tblptru	equ	0xFF8
 19939                           tblptrh	equ	0xFF7
 19940                           tblptrl	equ	0xFF6
 19941                           tablat	equ	0xFF5
 19942                           prodh	equ	0xFF4
 19943                           prodl	equ	0xFF3
 19944                           postinc0	equ	0xFEE
 19945                           wreg	equ	0xFE8
 19946                           postinc1	equ	0xFE6
 19947                           postdec1	equ	0xFE5
 19948                           plusw1	equ	0xFE3
 19949                           fsr1h	equ	0xFE2
 19950                           fsr1l	equ	0xFE1
 19951                           indf2	equ	0xFDF
 19952                           postinc2	equ	0xFDE
 19953                           postdec2	equ	0xFDD
 19954                           plusw2	equ	0xFDB
 19955                           fsr2h	equ	0xFDA
 19956                           fsr2l	equ	0xFD9
 19957                           status	equ	0xFD8
 19958                           
 19959 ;; *************** function _distributePieces *****************
 19960 ;; Defined at:
 19961 ;;		line 938 in file "operationMode.c"
 19962 ;; Parameters:    Size  Location     Type
 19963 ;;  roundPieces     2   11[COMRAM] unsigned int 
 19964 ;;  flatPieces      2   13[COMRAM] unsigned int 
 19965 ;;  longPieces      2   15[COMRAM] unsigned int 
 19966 ;; Auto vars:     Size  Location     Type
 19967 ;;		None
 19968 ;; Return value:  Size  Location     Type
 19969 ;;                  1    wreg      void 
 19970 ;; Registers used:
 19971 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19972 ;; Tracked objects:
 19973 ;;		On entry : 0/0
 19974 ;;		On exit  : 0/0
 19975 ;;		Unchanged: 0/0
 19976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19977 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19979 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19980 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19981 ;;Total ram usage:        8 bytes
 19982 ;; Hardware stack levels used:    1
 19983 ;; Hardware stack levels required when called:    2
 19984 ;; This function calls:
 19985 ;;		_distributeFlat
 19986 ;;		_distributeLong
 19987 ;;		_distributeRound
 19988 ;; This function is called by:
 19989 ;;		_mainOperation
 19990 ;; This function uses a non-reentrant model
 19991 ;;
 19992                           
 19993                           	psect	text43
 19994  00AF66                     __ptext43:
 19995                           	opt stack 0
 19996  00AF66                     _distributePieces:
 19997                           	opt stack 27
 19998                           
 19999                           ;operationMode.c: 939: switch(roundPieces){
 20000                           
 20001                           ;incstack = 0
 20002  00AF66  D025               	goto	l615
 20003  00AF68                     
 20004                           ;operationMode.c: 941: distributeRound(1);
 20005  00AF68  0E00               	movlw	0
 20006  00AF6A  6E08               	movwf	distributeRound@count+1,c
 20007  00AF6C  0E01               	movlw	1
 20008  00AF6E  6E07               	movwf	distributeRound@count,c
 20009  00AF70  EC52  F051         	call	_distributeRound	;wreg free
 20010                           
 20011                           ;operationMode.c: 942: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20012  00AF74  0E66               	movlw	102
 20013  00AF76  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20014  00AF78  0E76               	movlw	118
 20015  00AF7A  6E12               	movwf	??_distributePieces& (0+255),c
 20016  00AF7C  0EC1               	movlw	193
 20017  00AF7E                     u15377:
 20018  00AF7E  2EE8               	decfsz	wreg,f,c
 20019  00AF80  D7FE               	bra	u15377
 20020  00AF82  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20021  00AF84  D7FC               	bra	u15377
 20022  00AF86  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20023  00AF88  D7FA               	bra	u15377
 20024  00AF8A  D011               	goto	L166
 20025  00AF8C                     
 20026                           ;operationMode.c: 945: distributeRound(2);
 20027  00AF8C  0E00               	movlw	0
 20028  00AF8E  6E08               	movwf	distributeRound@count+1,c
 20029  00AF90  0E02               	movlw	2
 20030  00AF92  6E07               	movwf	distributeRound@count,c
 20031  00AF94  EC52  F051         	call	_distributeRound	;wreg free
 20032                           
 20033                           ;operationMode.c: 946: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20034  00AF98  0E66               	movlw	102
 20035  00AF9A  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20036  00AF9C  0E76               	movlw	118
 20037  00AF9E  6E12               	movwf	??_distributePieces& (0+255),c
 20038  00AFA0  0EC1               	movlw	193
 20039  00AFA2                     u15387:
 20040  00AFA2  2EE8               	decfsz	wreg,f,c
 20041  00AFA4  D7FE               	bra	u15387
 20042  00AFA6  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20043  00AFA8  D7FC               	bra	u15387
 20044  00AFAA  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20045  00AFAC  D7FA               	bra	u15387
 20046  00AFAE                     L166:
 20047  00AFAE  F000               	nop	
 20048                           
 20049                           ;operationMode.c: 950: }
 20050                           
 20051                           ;operationMode.c: 949: break;
 20052                           
 20053                           ;operationMode.c: 948: default:
 20054                           
 20055                           ;operationMode.c: 947: break;
 20056  00AFB0  D035               	goto	l620
 20057  00AFB2                     l615:
 20058  00AFB2  C00C  F012         	movff	distributePieces@roundPieces,??_distributePieces
 20059  00AFB6  C00D  F013         	movff	distributePieces@roundPieces+1,??_distributePieces+1
 20060                           
 20061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20062                           ; Switch size 1, requested type "space"
 20063                           ; Number of cases is 1, Range of values is 0 to 0
 20064                           ; switch strategies available:
 20065                           ; Name         Instructions Cycles
 20066                           ; simple_byte            4     3 (average)
 20067                           ;	Chosen strategy is simple_byte
 20068  00AFBA  5013               	movf	??_distributePieces+1,w,c
 20069  00AFBC  0A00               	xorlw	0	; case 0
 20070  00AFBE  A4D8               	btfss	status,2,c
 20071  00AFC0  D02D               	goto	l620
 20072                           
 20073                           ; Switch size 1, requested type "space"
 20074                           ; Number of cases is 2, Range of values is 1 to 2
 20075                           ; switch strategies available:
 20076                           ; Name         Instructions Cycles
 20077                           ; simple_byte            7     4 (average)
 20078                           ;	Chosen strategy is simple_byte
 20079  00AFC2  5012               	movf	??_distributePieces,w,c
 20080  00AFC4  0A01               	xorlw	1	; case 1
 20081  00AFC6  B4D8               	btfsc	status,2,c
 20082  00AFC8  D7CF               	goto	l616
 20083  00AFCA  0A03               	xorlw	3	; case 2
 20084  00AFCC  B4D8               	btfsc	status,2,c
 20085  00AFCE  D7DE               	goto	l618
 20086                           
 20087                           ;operationMode.c: 951: switch(flatPieces){
 20088  00AFD0  D025               	goto	l620
 20089  00AFD2                     
 20090                           ;operationMode.c: 953: distributeFlat(1);
 20091  00AFD2  0E00               	movlw	0
 20092  00AFD4  6E08               	movwf	distributeFlat@count+1,c
 20093  00AFD6  0E01               	movlw	1
 20094  00AFD8  6E07               	movwf	distributeFlat@count,c
 20095  00AFDA  ECB2  F050         	call	_distributeFlat	;wreg free
 20096                           
 20097                           ;operationMode.c: 954: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20098  00AFDE  0E66               	movlw	102
 20099  00AFE0  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20100  00AFE2  0E76               	movlw	118
 20101  00AFE4  6E12               	movwf	??_distributePieces& (0+255),c
 20102  00AFE6  0EC1               	movlw	193
 20103  00AFE8                     u15397:
 20104  00AFE8  2EE8               	decfsz	wreg,f,c
 20105  00AFEA  D7FE               	bra	u15397
 20106  00AFEC  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20107  00AFEE  D7FC               	bra	u15397
 20108  00AFF0  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20109  00AFF2  D7FA               	bra	u15397
 20110  00AFF4  D011               	goto	L167
 20111  00AFF6                     
 20112                           ;operationMode.c: 957: distributeFlat(2);
 20113  00AFF6  0E00               	movlw	0
 20114  00AFF8  6E08               	movwf	distributeFlat@count+1,c
 20115  00AFFA  0E02               	movlw	2
 20116  00AFFC  6E07               	movwf	distributeFlat@count,c
 20117  00AFFE  ECB2  F050         	call	_distributeFlat	;wreg free
 20118                           
 20119                           ;operationMode.c: 958: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20120  00B002  0E66               	movlw	102
 20121  00B004  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20122  00B006  0E76               	movlw	118
 20123  00B008  6E12               	movwf	??_distributePieces& (0+255),c
 20124  00B00A  0EC1               	movlw	193
 20125  00B00C                     u15407:
 20126  00B00C  2EE8               	decfsz	wreg,f,c
 20127  00B00E  D7FE               	bra	u15407
 20128  00B010  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20129  00B012  D7FC               	bra	u15407
 20130  00B014  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20131  00B016  D7FA               	bra	u15407
 20132  00B018                     L167:
 20133  00B018  F000               	nop	
 20134                           
 20135                           ;operationMode.c: 962: }
 20136                           
 20137                           ;operationMode.c: 961: break;
 20138                           
 20139                           ;operationMode.c: 960: default:
 20140                           
 20141                           ;operationMode.c: 959: break;
 20142  00B01A  D049               	goto	l625
 20143  00B01C                     l620:
 20144  00B01C  C00E  F012         	movff	distributePieces@flatPieces,??_distributePieces
 20145  00B020  C00F  F013         	movff	distributePieces@flatPieces+1,??_distributePieces+1
 20146                           
 20147                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20148                           ; Switch size 1, requested type "space"
 20149                           ; Number of cases is 1, Range of values is 0 to 0
 20150                           ; switch strategies available:
 20151                           ; Name         Instructions Cycles
 20152                           ; simple_byte            4     3 (average)
 20153                           ;	Chosen strategy is simple_byte
 20154  00B024  5013               	movf	??_distributePieces+1,w,c
 20155  00B026  0A00               	xorlw	0	; case 0
 20156  00B028  A4D8               	btfss	status,2,c
 20157  00B02A  D041               	goto	l625
 20158                           
 20159                           ; Switch size 1, requested type "space"
 20160                           ; Number of cases is 2, Range of values is 1 to 2
 20161                           ; switch strategies available:
 20162                           ; Name         Instructions Cycles
 20163                           ; simple_byte            7     4 (average)
 20164                           ;	Chosen strategy is simple_byte
 20165  00B02C  5012               	movf	??_distributePieces,w,c
 20166  00B02E  0A01               	xorlw	1	; case 1
 20167  00B030  B4D8               	btfsc	status,2,c
 20168  00B032  D7CF               	goto	l621
 20169  00B034  0A03               	xorlw	3	; case 2
 20170  00B036  B4D8               	btfsc	status,2,c
 20171  00B038  D7DE               	goto	l623
 20172                           
 20173                           ;operationMode.c: 963: switch(longPieces){
 20174  00B03A  D039               	goto	l625
 20175  00B03C                     
 20176                           ;operationMode.c: 965: distributeLong(1);
 20177  00B03C  0E00               	movlw	0
 20178  00B03E  6E08               	movwf	distributeLong@count+1,c
 20179  00B040  0E01               	movlw	1
 20180  00B042  6E07               	movwf	distributeLong@count,c
 20181  00B044  EC02  F051         	call	_distributeLong	;wreg free
 20182                           
 20183                           ;operationMode.c: 966: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20184  00B048  0E66               	movlw	102
 20185  00B04A  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20186  00B04C  0E76               	movlw	118
 20187  00B04E  6E12               	movwf	??_distributePieces& (0+255),c
 20188  00B050  0EC1               	movlw	193
 20189  00B052                     u15417:
 20190  00B052  2EE8               	decfsz	wreg,f,c
 20191  00B054  D7FE               	bra	u15417
 20192  00B056  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20193  00B058  D7FC               	bra	u15417
 20194  00B05A  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20195  00B05C  D7FA               	bra	u15417
 20196  00B05E  F000               	nop	
 20197                           
 20198                           ;operationMode.c: 967: break;
 20199  00B060  0012               	return	
 20200  00B062                     
 20201                           ;operationMode.c: 969: distributeLong(2);
 20202  00B062  0E00               	movlw	0
 20203  00B064  6E08               	movwf	distributeLong@count+1,c
 20204  00B066  0E02               	movlw	2
 20205  00B068  6E07               	movwf	distributeLong@count,c
 20206  00B06A  EC02  F051         	call	_distributeLong	;wreg free
 20207                           
 20208                           ;operationMode.c: 970: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20209  00B06E  0E66               	movlw	102
 20210  00B070  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20211  00B072  0E76               	movlw	118
 20212  00B074  6E12               	movwf	??_distributePieces& (0+255),c
 20213  00B076  0EC1               	movlw	193
 20214  00B078                     u15427:
 20215  00B078  2EE8               	decfsz	wreg,f,c
 20216  00B07A  D7FE               	bra	u15427
 20217  00B07C  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20218  00B07E  D7FC               	bra	u15427
 20219  00B080  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20220  00B082  D7FA               	bra	u15427
 20221  00B084  F000               	nop	
 20222                           
 20223                           ;operationMode.c: 971: break;
 20224  00B086  0012               	return	
 20225  00B088                     
 20226                           ;operationMode.c: 973: distributeLong(3);
 20227  00B088  0E00               	movlw	0
 20228  00B08A  6E08               	movwf	distributeLong@count+1,c
 20229  00B08C  0E03               	movlw	3
 20230  00B08E  6E07               	movwf	distributeLong@count,c
 20231  00B090  EC02  F051         	call	_distributeLong	;wreg free
 20232                           
 20233                           ;operationMode.c: 974: _delay((unsigned long)((2000)*(40000000/4000.0)));
 20234  00B094  0E66               	movlw	102
 20235  00B096  6E13               	movwf	(??_distributePieces+1)& (0+255),c
 20236  00B098  0E76               	movlw	118
 20237  00B09A  6E12               	movwf	??_distributePieces& (0+255),c
 20238  00B09C  0EC1               	movlw	193
 20239  00B09E                     u15437:
 20240  00B09E  2EE8               	decfsz	wreg,f,c
 20241  00B0A0  D7FE               	bra	u15437
 20242  00B0A2  2E12               	decfsz	??_distributePieces& (0+255),f,c
 20243  00B0A4  D7FC               	bra	u15437
 20244  00B0A6  2E13               	decfsz	(??_distributePieces+1)& (0+255),f,c
 20245  00B0A8  D7FA               	bra	u15437
 20246  00B0AA  F000               	nop	
 20247                           
 20248                           ;operationMode.c: 978: }
 20249                           
 20250                           ;operationMode.c: 977: break;
 20251                           
 20252                           ;operationMode.c: 976: default:
 20253                           
 20254                           ;operationMode.c: 975: break;
 20255  00B0AC  0012               	return	
 20256  00B0AE                     l625:
 20257  00B0AE  C010  F012         	movff	distributePieces@longPieces,??_distributePieces
 20258  00B0B2  C011  F013         	movff	distributePieces@longPieces+1,??_distributePieces+1
 20259                           
 20260                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20261                           ; Switch size 1, requested type "space"
 20262                           ; Number of cases is 1, Range of values is 0 to 0
 20263                           ; switch strategies available:
 20264                           ; Name         Instructions Cycles
 20265                           ; simple_byte            4     3 (average)
 20266                           ;	Chosen strategy is simple_byte
 20267  00B0B6  5013               	movf	??_distributePieces+1,w,c
 20268  00B0B8  0A00               	xorlw	0	; case 0
 20269  00B0BA  A4D8               	btfss	status,2,c
 20270  00B0BC  0012               	return	
 20271                           
 20272                           ; Switch size 1, requested type "space"
 20273                           ; Number of cases is 3, Range of values is 1 to 3
 20274                           ; switch strategies available:
 20275                           ; Name         Instructions Cycles
 20276                           ; simple_byte           10     6 (average)
 20277                           ;	Chosen strategy is simple_byte
 20278  00B0BE  5012               	movf	??_distributePieces,w,c
 20279  00B0C0  0A01               	xorlw	1	; case 1
 20280  00B0C2  B4D8               	btfsc	status,2,c
 20281  00B0C4  D7BB               	goto	l626
 20282  00B0C6  0A03               	xorlw	3	; case 2
 20283  00B0C8  B4D8               	btfsc	status,2,c
 20284  00B0CA  D7CB               	goto	l628
 20285  00B0CC  0A01               	xorlw	1	; case 3
 20286  00B0CE  A4D8               	btfss	status,2,c
 20287  00B0D0  0012               	return	
 20288  00B0D2  D7DA               	goto	l629
 20289  00B0D4                     __end_of_distributePieces:
 20290                           	opt stack 0
 20291                           tblptru	equ	0xFF8
 20292                           tblptrh	equ	0xFF7
 20293                           tblptrl	equ	0xFF6
 20294                           tablat	equ	0xFF5
 20295                           prodh	equ	0xFF4
 20296                           prodl	equ	0xFF3
 20297                           postinc0	equ	0xFEE
 20298                           wreg	equ	0xFE8
 20299                           postinc1	equ	0xFE6
 20300                           postdec1	equ	0xFE5
 20301                           plusw1	equ	0xFE3
 20302                           fsr1h	equ	0xFE2
 20303                           fsr1l	equ	0xFE1
 20304                           indf2	equ	0xFDF
 20305                           postinc2	equ	0xFDE
 20306                           postdec2	equ	0xFDD
 20307                           plusw2	equ	0xFDB
 20308                           fsr2h	equ	0xFDA
 20309                           fsr2l	equ	0xFD9
 20310                           status	equ	0xFD8
 20311                           
 20312 ;; *************** function _distributeRound *****************
 20313 ;; Defined at:
 20314 ;;		line 829 in file "operationMode.c"
 20315 ;; Parameters:    Size  Location     Type
 20316 ;;  count           2    6[COMRAM] unsigned int 
 20317 ;; Auto vars:     Size  Location     Type
 20318 ;;  i               2    9[COMRAM] unsigned int 
 20319 ;; Return value:  Size  Location     Type
 20320 ;;                  1    wreg      void 
 20321 ;; Registers used:
 20322 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20323 ;; Tracked objects:
 20324 ;;		On entry : 0/0
 20325 ;;		On exit  : 0/0
 20326 ;;		Unchanged: 0/0
 20327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20331 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20332 ;;Total ram usage:        5 bytes
 20333 ;; Hardware stack levels used:    1
 20334 ;; Hardware stack levels required when called:    1
 20335 ;; This function calls:
 20336 ;;		___wmul
 20337 ;; This function is called by:
 20338 ;;		_distributePieces
 20339 ;; This function uses a non-reentrant model
 20340 ;;
 20341                           
 20342                           	psect	text44
 20343  00A2A4                     __ptext44:
 20344                           	opt stack 0
 20345  00A2A4                     _distributeRound:
 20346                           	opt stack 27
 20347                           
 20348                           ;operationMode.c: 833: unsigned int i = 0;
 20349                           
 20350                           ;incstack = 0
 20351  00A2A4  0E00               	movlw	0
 20352  00A2A6  6E0B               	movwf	distributeRound@i+1,c
 20353  00A2A8  0E00               	movlw	0
 20354  00A2AA  6E0A               	movwf	distributeRound@i,c
 20355                           
 20356                           ;operationMode.c: 835: for (i=0; i<count*523; i++){
 20357  00A2AC  0E00               	movlw	0
 20358  00A2AE  6E0B               	movwf	distributeRound@i+1,c
 20359  00A2B0  0E00               	movlw	0
 20360  00A2B2  6E0A               	movwf	distributeRound@i,c
 20361  00A2B4  D032               	goto	l597
 20362  00A2B6                     l598:
 20363                           
 20364                           ;operationMode.c: 836: LATDbits.LATD4 = 0;
 20365  00A2B6  988C               	bcf	3980,4,c	;volatile
 20366                           
 20367                           ;operationMode.c: 837: LATDbits.LATD5 = 0;
 20368  00A2B8  9A8C               	bcf	3980,5,c	;volatile
 20369                           
 20370                           ;operationMode.c: 838: LATDbits.LATD6 = 1;
 20371  00A2BA  8C8C               	bsf	3980,6,c	;volatile
 20372                           
 20373                           ;operationMode.c: 839: LATDbits.LATD7 = 0;
 20374  00A2BC  9E8C               	bcf	3980,7,c	;volatile
 20375                           
 20376                           ;operationMode.c: 840: _delay((unsigned long)((2)*(40000000/4000.0)));
 20377  00A2BE  0E1A               	movlw	26
 20378  00A2C0  6E09               	movwf	??_distributeRound& (0+255),c
 20379  00A2C2  0EF8               	movlw	248
 20380  00A2C4                     u15447:
 20381  00A2C4  2EE8               	decfsz	wreg,f,c
 20382  00A2C6  D7FE               	bra	u15447
 20383  00A2C8  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20384  00A2CA  D7FC               	bra	u15447
 20385  00A2CC  D000               	nop2	
 20386                           
 20387                           ;operationMode.c: 841: LATDbits.LATD4 = 0;
 20388  00A2CE  988C               	bcf	3980,4,c	;volatile
 20389                           
 20390                           ;operationMode.c: 842: LATDbits.LATD5 = 1;
 20391  00A2D0  8A8C               	bsf	3980,5,c	;volatile
 20392                           
 20393                           ;operationMode.c: 843: LATDbits.LATD6 = 0;
 20394  00A2D2  9C8C               	bcf	3980,6,c	;volatile
 20395                           
 20396                           ;operationMode.c: 844: LATDbits.LATD7 = 0;
 20397  00A2D4  9E8C               	bcf	3980,7,c	;volatile
 20398                           
 20399                           ;operationMode.c: 845: _delay((unsigned long)((2)*(40000000/4000.0)));
 20400  00A2D6  0E1A               	movlw	26
 20401  00A2D8  6E09               	movwf	??_distributeRound& (0+255),c
 20402  00A2DA  0EF8               	movlw	248
 20403  00A2DC                     u15457:
 20404  00A2DC  2EE8               	decfsz	wreg,f,c
 20405  00A2DE  D7FE               	bra	u15457
 20406  00A2E0  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20407  00A2E2  D7FC               	bra	u15457
 20408  00A2E4  D000               	nop2	
 20409                           
 20410                           ;operationMode.c: 846: LATDbits.LATD4 = 1;
 20411  00A2E6  888C               	bsf	3980,4,c	;volatile
 20412                           
 20413                           ;operationMode.c: 847: LATDbits.LATD5 = 0;
 20414  00A2E8  9A8C               	bcf	3980,5,c	;volatile
 20415                           
 20416                           ;operationMode.c: 848: LATDbits.LATD6 = 0;
 20417  00A2EA  9C8C               	bcf	3980,6,c	;volatile
 20418                           
 20419                           ;operationMode.c: 849: LATDbits.LATD7 = 0;
 20420  00A2EC  9E8C               	bcf	3980,7,c	;volatile
 20421                           
 20422                           ;operationMode.c: 850: _delay((unsigned long)((2)*(40000000/4000.0)));
 20423  00A2EE  0E1A               	movlw	26
 20424  00A2F0  6E09               	movwf	??_distributeRound& (0+255),c
 20425  00A2F2  0EF8               	movlw	248
 20426  00A2F4                     u15467:
 20427  00A2F4  2EE8               	decfsz	wreg,f,c
 20428  00A2F6  D7FE               	bra	u15467
 20429  00A2F8  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20430  00A2FA  D7FC               	bra	u15467
 20431  00A2FC  D000               	nop2	
 20432                           
 20433                           ;operationMode.c: 851: LATDbits.LATD4 = 0;
 20434  00A2FE  988C               	bcf	3980,4,c	;volatile
 20435                           
 20436                           ;operationMode.c: 852: LATDbits.LATD5 = 0;
 20437  00A300  9A8C               	bcf	3980,5,c	;volatile
 20438                           
 20439                           ;operationMode.c: 853: LATDbits.LATD6 = 0;
 20440  00A302  9C8C               	bcf	3980,6,c	;volatile
 20441                           
 20442                           ;operationMode.c: 854: LATDbits.LATD7 = 1;
 20443  00A304  8E8C               	bsf	3980,7,c	;volatile
 20444                           
 20445                           ;operationMode.c: 855: _delay((unsigned long)((2)*(40000000/4000.0)));
 20446  00A306  0E1A               	movlw	26
 20447  00A308  6E09               	movwf	??_distributeRound& (0+255),c
 20448  00A30A  0EF8               	movlw	248
 20449  00A30C                     u15477:
 20450  00A30C  2EE8               	decfsz	wreg,f,c
 20451  00A30E  D7FE               	bra	u15477
 20452  00A310  2E09               	decfsz	??_distributeRound& (0+255),f,c
 20453  00A312  D7FC               	bra	u15477
 20454  00A314  D000               	nop2	
 20455  00A316  4A0A               	infsnz	distributeRound@i,f,c
 20456  00A318  2A0B               	incf	distributeRound@i+1,f,c
 20457  00A31A                     l597:
 20458  00A31A  C007  F001         	movff	distributeRound@count,___wmul@multiplier
 20459  00A31E  C008  F002         	movff	distributeRound@count+1,___wmul@multiplier+1
 20460  00A322  0E02               	movlw	2
 20461  00A324  6E04               	movwf	___wmul@multiplicand+1,c
 20462  00A326  0E0B               	movlw	11
 20463  00A328  6E03               	movwf	___wmul@multiplicand,c
 20464  00A32A  EC68  F04D         	call	___wmul	;wreg free
 20465  00A32E  5001               	movf	?___wmul,w,c
 20466  00A330  5C0A               	subwf	distributeRound@i,w,c
 20467  00A332  5002               	movf	?___wmul+1,w,c
 20468  00A334  580B               	subwfb	distributeRound@i+1,w,c
 20469  00A336  A0D8               	btfss	status,0,c
 20470  00A338  D7BE               	goto	l598
 20471                           
 20472                           ;operationMode.c: 856: }
 20473                           ;operationMode.c: 858: LATDbits.LATD4 = 0;
 20474  00A33A  988C               	bcf	3980,4,c	;volatile
 20475                           
 20476                           ;operationMode.c: 859: LATDbits.LATD5 = 0;
 20477  00A33C  9A8C               	bcf	3980,5,c	;volatile
 20478                           
 20479                           ;operationMode.c: 860: LATDbits.LATD6 = 0;
 20480  00A33E  9C8C               	bcf	3980,6,c	;volatile
 20481                           
 20482                           ;operationMode.c: 861: LATDbits.LATD7 = 0;
 20483  00A340  9E8C               	bcf	3980,7,c	;volatile
 20484  00A342  0012               	return		;funcret
 20485  00A344                     __end_of_distributeRound:
 20486                           	opt stack 0
 20487                           tblptru	equ	0xFF8
 20488                           tblptrh	equ	0xFF7
 20489                           tblptrl	equ	0xFF6
 20490                           tablat	equ	0xFF5
 20491                           prodh	equ	0xFF4
 20492                           prodl	equ	0xFF3
 20493                           postinc0	equ	0xFEE
 20494                           wreg	equ	0xFE8
 20495                           postinc1	equ	0xFE6
 20496                           postdec1	equ	0xFE5
 20497                           plusw1	equ	0xFE3
 20498                           fsr1h	equ	0xFE2
 20499                           fsr1l	equ	0xFE1
 20500                           indf2	equ	0xFDF
 20501                           postinc2	equ	0xFDE
 20502                           postdec2	equ	0xFDD
 20503                           plusw2	equ	0xFDB
 20504                           fsr2h	equ	0xFDA
 20505                           fsr2l	equ	0xFD9
 20506                           status	equ	0xFD8
 20507                           
 20508 ;; *************** function _distributeLong *****************
 20509 ;; Defined at:
 20510 ;;		line 901 in file "operationMode.c"
 20511 ;; Parameters:    Size  Location     Type
 20512 ;;  count           2    6[COMRAM] unsigned int 
 20513 ;; Auto vars:     Size  Location     Type
 20514 ;;  i               2    9[COMRAM] unsigned int 
 20515 ;; Return value:  Size  Location     Type
 20516 ;;                  1    wreg      void 
 20517 ;; Registers used:
 20518 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20519 ;; Tracked objects:
 20520 ;;		On entry : 0/0
 20521 ;;		On exit  : 0/0
 20522 ;;		Unchanged: 0/0
 20523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20527 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20528 ;;Total ram usage:        5 bytes
 20529 ;; Hardware stack levels used:    1
 20530 ;; Hardware stack levels required when called:    1
 20531 ;; This function calls:
 20532 ;;		___wmul
 20533 ;; This function is called by:
 20534 ;;		_distributePieces
 20535 ;; This function uses a non-reentrant model
 20536 ;;
 20537                           
 20538                           	psect	text45
 20539  00A204                     __ptext45:
 20540                           	opt stack 0
 20541  00A204                     _distributeLong:
 20542                           	opt stack 27
 20543                           
 20544                           ;operationMode.c: 905: unsigned int i = 0;
 20545                           
 20546                           ;incstack = 0
 20547  00A204  0E00               	movlw	0
 20548  00A206  6E0B               	movwf	distributeLong@i+1,c
 20549  00A208  0E00               	movlw	0
 20550  00A20A  6E0A               	movwf	distributeLong@i,c
 20551                           
 20552                           ;operationMode.c: 907: for (i=0; i<count*523; i++){
 20553  00A20C  0E00               	movlw	0
 20554  00A20E  6E0B               	movwf	distributeLong@i+1,c
 20555  00A210  0E00               	movlw	0
 20556  00A212  6E0A               	movwf	distributeLong@i,c
 20557  00A214  D032               	goto	l609
 20558  00A216                     l610:
 20559                           
 20560                           ;operationMode.c: 908: LATCbits.LATC0 = 0;
 20561  00A216  908B               	bcf	3979,0,c	;volatile
 20562                           
 20563                           ;operationMode.c: 909: LATCbits.LATC1 = 0;
 20564  00A218  928B               	bcf	3979,1,c	;volatile
 20565                           
 20566                           ;operationMode.c: 910: LATCbits.LATC2 = 1;
 20567  00A21A  848B               	bsf	3979,2,c	;volatile
 20568                           
 20569                           ;operationMode.c: 911: LATEbits.LATE2 = 0;
 20570  00A21C  948D               	bcf	3981,2,c	;volatile
 20571                           
 20572                           ;operationMode.c: 912: _delay((unsigned long)((2)*(40000000/4000.0)));
 20573  00A21E  0E1A               	movlw	26
 20574  00A220  6E09               	movwf	??_distributeLong& (0+255),c
 20575  00A222  0EF8               	movlw	248
 20576  00A224                     u15487:
 20577  00A224  2EE8               	decfsz	wreg,f,c
 20578  00A226  D7FE               	bra	u15487
 20579  00A228  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20580  00A22A  D7FC               	bra	u15487
 20581  00A22C  D000               	nop2	
 20582                           
 20583                           ;operationMode.c: 913: LATCbits.LATC0 = 0;
 20584  00A22E  908B               	bcf	3979,0,c	;volatile
 20585                           
 20586                           ;operationMode.c: 914: LATCbits.LATC1 = 1;
 20587  00A230  828B               	bsf	3979,1,c	;volatile
 20588                           
 20589                           ;operationMode.c: 915: LATCbits.LATC2 = 0;
 20590  00A232  948B               	bcf	3979,2,c	;volatile
 20591                           
 20592                           ;operationMode.c: 916: LATEbits.LATE2 = 0;
 20593  00A234  948D               	bcf	3981,2,c	;volatile
 20594                           
 20595                           ;operationMode.c: 917: _delay((unsigned long)((2)*(40000000/4000.0)));
 20596  00A236  0E1A               	movlw	26
 20597  00A238  6E09               	movwf	??_distributeLong& (0+255),c
 20598  00A23A  0EF8               	movlw	248
 20599  00A23C                     u15497:
 20600  00A23C  2EE8               	decfsz	wreg,f,c
 20601  00A23E  D7FE               	bra	u15497
 20602  00A240  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20603  00A242  D7FC               	bra	u15497
 20604  00A244  D000               	nop2	
 20605                           
 20606                           ;operationMode.c: 918: LATCbits.LATC0 = 1;
 20607  00A246  808B               	bsf	3979,0,c	;volatile
 20608                           
 20609                           ;operationMode.c: 919: LATCbits.LATC1 = 0;
 20610  00A248  928B               	bcf	3979,1,c	;volatile
 20611                           
 20612                           ;operationMode.c: 920: LATCbits.LATC2 = 0;
 20613  00A24A  948B               	bcf	3979,2,c	;volatile
 20614                           
 20615                           ;operationMode.c: 921: LATEbits.LATE2 = 0;
 20616  00A24C  948D               	bcf	3981,2,c	;volatile
 20617                           
 20618                           ;operationMode.c: 922: _delay((unsigned long)((2)*(40000000/4000.0)));
 20619  00A24E  0E1A               	movlw	26
 20620  00A250  6E09               	movwf	??_distributeLong& (0+255),c
 20621  00A252  0EF8               	movlw	248
 20622  00A254                     u15507:
 20623  00A254  2EE8               	decfsz	wreg,f,c
 20624  00A256  D7FE               	bra	u15507
 20625  00A258  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20626  00A25A  D7FC               	bra	u15507
 20627  00A25C  D000               	nop2	
 20628                           
 20629                           ;operationMode.c: 923: LATCbits.LATC0 = 0;
 20630  00A25E  908B               	bcf	3979,0,c	;volatile
 20631                           
 20632                           ;operationMode.c: 924: LATCbits.LATC1 = 0;
 20633  00A260  928B               	bcf	3979,1,c	;volatile
 20634                           
 20635                           ;operationMode.c: 925: LATCbits.LATC2 = 0;
 20636  00A262  948B               	bcf	3979,2,c	;volatile
 20637                           
 20638                           ;operationMode.c: 926: LATEbits.LATE2 = 1;
 20639  00A264  848D               	bsf	3981,2,c	;volatile
 20640                           
 20641                           ;operationMode.c: 927: _delay((unsigned long)((2)*(40000000/4000.0)));
 20642  00A266  0E1A               	movlw	26
 20643  00A268  6E09               	movwf	??_distributeLong& (0+255),c
 20644  00A26A  0EF8               	movlw	248
 20645  00A26C                     u15517:
 20646  00A26C  2EE8               	decfsz	wreg,f,c
 20647  00A26E  D7FE               	bra	u15517
 20648  00A270  2E09               	decfsz	??_distributeLong& (0+255),f,c
 20649  00A272  D7FC               	bra	u15517
 20650  00A274  D000               	nop2	
 20651  00A276  4A0A               	infsnz	distributeLong@i,f,c
 20652  00A278  2A0B               	incf	distributeLong@i+1,f,c
 20653  00A27A                     l609:
 20654  00A27A  C007  F001         	movff	distributeLong@count,___wmul@multiplier
 20655  00A27E  C008  F002         	movff	distributeLong@count+1,___wmul@multiplier+1
 20656  00A282  0E02               	movlw	2
 20657  00A284  6E04               	movwf	___wmul@multiplicand+1,c
 20658  00A286  0E0B               	movlw	11
 20659  00A288  6E03               	movwf	___wmul@multiplicand,c
 20660  00A28A  EC68  F04D         	call	___wmul	;wreg free
 20661  00A28E  5001               	movf	?___wmul,w,c
 20662  00A290  5C0A               	subwf	distributeLong@i,w,c
 20663  00A292  5002               	movf	?___wmul+1,w,c
 20664  00A294  580B               	subwfb	distributeLong@i+1,w,c
 20665  00A296  A0D8               	btfss	status,0,c
 20666  00A298  D7BE               	goto	l610
 20667                           
 20668                           ;operationMode.c: 928: }
 20669                           ;operationMode.c: 930: LATCbits.LATC0 = 0;
 20670  00A29A  908B               	bcf	3979,0,c	;volatile
 20671                           
 20672                           ;operationMode.c: 931: LATCbits.LATC1 = 0;
 20673  00A29C  928B               	bcf	3979,1,c	;volatile
 20674                           
 20675                           ;operationMode.c: 932: LATCbits.LATC2 = 0;
 20676  00A29E  948B               	bcf	3979,2,c	;volatile
 20677                           
 20678                           ;operationMode.c: 933: LATEbits.LATE2 = 0;
 20679  00A2A0  948D               	bcf	3981,2,c	;volatile
 20680  00A2A2  0012               	return		;funcret
 20681  00A2A4                     __end_of_distributeLong:
 20682                           	opt stack 0
 20683                           tblptru	equ	0xFF8
 20684                           tblptrh	equ	0xFF7
 20685                           tblptrl	equ	0xFF6
 20686                           tablat	equ	0xFF5
 20687                           prodh	equ	0xFF4
 20688                           prodl	equ	0xFF3
 20689                           postinc0	equ	0xFEE
 20690                           wreg	equ	0xFE8
 20691                           postinc1	equ	0xFE6
 20692                           postdec1	equ	0xFE5
 20693                           plusw1	equ	0xFE3
 20694                           fsr1h	equ	0xFE2
 20695                           fsr1l	equ	0xFE1
 20696                           indf2	equ	0xFDF
 20697                           postinc2	equ	0xFDE
 20698                           postdec2	equ	0xFDD
 20699                           plusw2	equ	0xFDB
 20700                           fsr2h	equ	0xFDA
 20701                           fsr2l	equ	0xFD9
 20702                           status	equ	0xFD8
 20703                           
 20704 ;; *************** function _distributeFlat *****************
 20705 ;; Defined at:
 20706 ;;		line 865 in file "operationMode.c"
 20707 ;; Parameters:    Size  Location     Type
 20708 ;;  count           2    6[COMRAM] unsigned int 
 20709 ;; Auto vars:     Size  Location     Type
 20710 ;;  i               2    9[COMRAM] unsigned int 
 20711 ;; Return value:  Size  Location     Type
 20712 ;;                  1    wreg      void 
 20713 ;; Registers used:
 20714 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20715 ;; Tracked objects:
 20716 ;;		On entry : 0/0
 20717 ;;		On exit  : 0/0
 20718 ;;		Unchanged: 0/0
 20719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20720 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20723 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20724 ;;Total ram usage:        5 bytes
 20725 ;; Hardware stack levels used:    1
 20726 ;; Hardware stack levels required when called:    1
 20727 ;; This function calls:
 20728 ;;		___wmul
 20729 ;; This function is called by:
 20730 ;;		_distributePieces
 20731 ;; This function uses a non-reentrant model
 20732 ;;
 20733                           
 20734                           	psect	text46
 20735  00A164                     __ptext46:
 20736                           	opt stack 0
 20737  00A164                     _distributeFlat:
 20738                           	opt stack 27
 20739                           
 20740                           ;operationMode.c: 869: unsigned int i = 0;
 20741                           
 20742                           ;incstack = 0
 20743  00A164  0E00               	movlw	0
 20744  00A166  6E0B               	movwf	distributeFlat@i+1,c
 20745  00A168  0E00               	movlw	0
 20746  00A16A  6E0A               	movwf	distributeFlat@i,c
 20747                           
 20748                           ;operationMode.c: 871: for (i=0; i<count*523; i++){
 20749  00A16C  0E00               	movlw	0
 20750  00A16E  6E0B               	movwf	distributeFlat@i+1,c
 20751  00A170  0E00               	movlw	0
 20752  00A172  6E0A               	movwf	distributeFlat@i,c
 20753  00A174  D032               	goto	l603
 20754  00A176                     l604:
 20755                           
 20756                           ;operationMode.c: 872: LATDbits.LATD0 = 1;
 20757  00A176  808C               	bsf	3980,0,c	;volatile
 20758                           
 20759                           ;operationMode.c: 873: LATDbits.LATD1 = 0;
 20760  00A178  928C               	bcf	3980,1,c	;volatile
 20761                           
 20762                           ;operationMode.c: 874: LATDbits.LATD2 = 0;
 20763  00A17A  948C               	bcf	3980,2,c	;volatile
 20764                           
 20765                           ;operationMode.c: 875: LATDbits.LATD3 = 0;
 20766  00A17C  968C               	bcf	3980,3,c	;volatile
 20767                           
 20768                           ;operationMode.c: 876: _delay((unsigned long)((2)*(40000000/4000.0)));
 20769  00A17E  0E1A               	movlw	26
 20770  00A180  6E09               	movwf	??_distributeFlat& (0+255),c
 20771  00A182  0EF8               	movlw	248
 20772  00A184                     u15527:
 20773  00A184  2EE8               	decfsz	wreg,f,c
 20774  00A186  D7FE               	bra	u15527
 20775  00A188  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20776  00A18A  D7FC               	bra	u15527
 20777  00A18C  D000               	nop2	
 20778                           
 20779                           ;operationMode.c: 877: LATDbits.LATD0 = 0;
 20780  00A18E  908C               	bcf	3980,0,c	;volatile
 20781                           
 20782                           ;operationMode.c: 878: LATDbits.LATD1 = 1;
 20783  00A190  828C               	bsf	3980,1,c	;volatile
 20784                           
 20785                           ;operationMode.c: 879: LATDbits.LATD2 = 0;
 20786  00A192  948C               	bcf	3980,2,c	;volatile
 20787                           
 20788                           ;operationMode.c: 880: LATDbits.LATD3 = 0;
 20789  00A194  968C               	bcf	3980,3,c	;volatile
 20790                           
 20791                           ;operationMode.c: 881: _delay((unsigned long)((2)*(40000000/4000.0)));
 20792  00A196  0E1A               	movlw	26
 20793  00A198  6E09               	movwf	??_distributeFlat& (0+255),c
 20794  00A19A  0EF8               	movlw	248
 20795  00A19C                     u15537:
 20796  00A19C  2EE8               	decfsz	wreg,f,c
 20797  00A19E  D7FE               	bra	u15537
 20798  00A1A0  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20799  00A1A2  D7FC               	bra	u15537
 20800  00A1A4  D000               	nop2	
 20801                           
 20802                           ;operationMode.c: 882: LATDbits.LATD0 = 0;
 20803  00A1A6  908C               	bcf	3980,0,c	;volatile
 20804                           
 20805                           ;operationMode.c: 883: LATDbits.LATD1 = 0;
 20806  00A1A8  928C               	bcf	3980,1,c	;volatile
 20807                           
 20808                           ;operationMode.c: 884: LATDbits.LATD2 = 1;
 20809  00A1AA  848C               	bsf	3980,2,c	;volatile
 20810                           
 20811                           ;operationMode.c: 885: LATDbits.LATD3 = 0;
 20812  00A1AC  968C               	bcf	3980,3,c	;volatile
 20813                           
 20814                           ;operationMode.c: 886: _delay((unsigned long)((2)*(40000000/4000.0)));
 20815  00A1AE  0E1A               	movlw	26
 20816  00A1B0  6E09               	movwf	??_distributeFlat& (0+255),c
 20817  00A1B2  0EF8               	movlw	248
 20818  00A1B4                     u15547:
 20819  00A1B4  2EE8               	decfsz	wreg,f,c
 20820  00A1B6  D7FE               	bra	u15547
 20821  00A1B8  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20822  00A1BA  D7FC               	bra	u15547
 20823  00A1BC  D000               	nop2	
 20824                           
 20825                           ;operationMode.c: 887: LATDbits.LATD0 = 0;
 20826  00A1BE  908C               	bcf	3980,0,c	;volatile
 20827                           
 20828                           ;operationMode.c: 888: LATDbits.LATD1 = 0;
 20829  00A1C0  928C               	bcf	3980,1,c	;volatile
 20830                           
 20831                           ;operationMode.c: 889: LATDbits.LATD2 = 0;
 20832  00A1C2  948C               	bcf	3980,2,c	;volatile
 20833                           
 20834                           ;operationMode.c: 890: LATDbits.LATD3 = 1;
 20835  00A1C4  868C               	bsf	3980,3,c	;volatile
 20836                           
 20837                           ;operationMode.c: 891: _delay((unsigned long)((2)*(40000000/4000.0)));
 20838  00A1C6  0E1A               	movlw	26
 20839  00A1C8  6E09               	movwf	??_distributeFlat& (0+255),c
 20840  00A1CA  0EF8               	movlw	248
 20841  00A1CC                     u15557:
 20842  00A1CC  2EE8               	decfsz	wreg,f,c
 20843  00A1CE  D7FE               	bra	u15557
 20844  00A1D0  2E09               	decfsz	??_distributeFlat& (0+255),f,c
 20845  00A1D2  D7FC               	bra	u15557
 20846  00A1D4  D000               	nop2	
 20847  00A1D6  4A0A               	infsnz	distributeFlat@i,f,c
 20848  00A1D8  2A0B               	incf	distributeFlat@i+1,f,c
 20849  00A1DA                     l603:
 20850  00A1DA  C007  F001         	movff	distributeFlat@count,___wmul@multiplier
 20851  00A1DE  C008  F002         	movff	distributeFlat@count+1,___wmul@multiplier+1
 20852  00A1E2  0E02               	movlw	2
 20853  00A1E4  6E04               	movwf	___wmul@multiplicand+1,c
 20854  00A1E6  0E0B               	movlw	11
 20855  00A1E8  6E03               	movwf	___wmul@multiplicand,c
 20856  00A1EA  EC68  F04D         	call	___wmul	;wreg free
 20857  00A1EE  5001               	movf	?___wmul,w,c
 20858  00A1F0  5C0A               	subwf	distributeFlat@i,w,c
 20859  00A1F2  5002               	movf	?___wmul+1,w,c
 20860  00A1F4  580B               	subwfb	distributeFlat@i+1,w,c
 20861  00A1F6  A0D8               	btfss	status,0,c
 20862  00A1F8  D7BE               	goto	l604
 20863                           
 20864                           ;operationMode.c: 892: }
 20865                           ;operationMode.c: 894: LATDbits.LATD0 = 0;
 20866  00A1FA  908C               	bcf	3980,0,c	;volatile
 20867                           
 20868                           ;operationMode.c: 895: LATDbits.LATD1 = 0;
 20869  00A1FC  928C               	bcf	3980,1,c	;volatile
 20870                           
 20871                           ;operationMode.c: 896: LATDbits.LATD2 = 0;
 20872  00A1FE  948C               	bcf	3980,2,c	;volatile
 20873                           
 20874                           ;operationMode.c: 897: LATDbits.LATD3 = 0;
 20875  00A200  968C               	bcf	3980,3,c	;volatile
 20876  00A202  0012               	return		;funcret
 20877  00A204                     __end_of_distributeFlat:
 20878                           	opt stack 0
 20879                           tblptru	equ	0xFF8
 20880                           tblptrh	equ	0xFF7
 20881                           tblptrl	equ	0xFF6
 20882                           tablat	equ	0xFF5
 20883                           prodh	equ	0xFF4
 20884                           prodl	equ	0xFF3
 20885                           postinc0	equ	0xFEE
 20886                           wreg	equ	0xFE8
 20887                           postinc1	equ	0xFE6
 20888                           postdec1	equ	0xFE5
 20889                           plusw1	equ	0xFE3
 20890                           fsr1h	equ	0xFE2
 20891                           fsr1l	equ	0xFE1
 20892                           indf2	equ	0xFDF
 20893                           postinc2	equ	0xFDE
 20894                           postdec2	equ	0xFDD
 20895                           plusw2	equ	0xFDB
 20896                           fsr2h	equ	0xFDA
 20897                           fsr2l	equ	0xFD9
 20898                           status	equ	0xFD8
 20899                           
 20900 ;; *************** function ___wmul *****************
 20901 ;; Defined at:
 20902 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 20903 ;; Parameters:    Size  Location     Type
 20904 ;;  multiplier      2    0[COMRAM] unsigned int 
 20905 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20906 ;; Auto vars:     Size  Location     Type
 20907 ;;  product         2    4[COMRAM] unsigned int 
 20908 ;; Return value:  Size  Location     Type
 20909 ;;                  2    0[COMRAM] unsigned int 
 20910 ;; Registers used:
 20911 ;;		wreg, status,2, status,0, prodl, prodh
 20912 ;; Tracked objects:
 20913 ;;		On entry : 0/0
 20914 ;;		On exit  : 0/0
 20915 ;;		Unchanged: 0/0
 20916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20918 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20920 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20921 ;;Total ram usage:        6 bytes
 20922 ;; Hardware stack levels used:    1
 20923 ;; This function calls:
 20924 ;;		Nothing
 20925 ;; This function is called by:
 20926 ;;		_getUserInputs
 20927 ;;		_distributeRound
 20928 ;;		_distributeFlat
 20929 ;;		_distributeLong
 20930 ;;		_displayLogs
 20931 ;;		_standbyMode
 20932 ;;		_printf
 20933 ;;		_tock
 20934 ;; This function uses a non-reentrant model
 20935 ;;
 20936                           
 20937                           	psect	text47
 20938  009AD0                     __ptext47:
 20939                           	opt stack 0
 20940  009AD0                     ___wmul:
 20941                           	opt stack 27
 20942                           
 20943                           ;incstack = 0
 20944  009AD0  5001               	movf	___wmul@multiplier,w,c
 20945  009AD2  0203               	mulwf	___wmul@multiplicand,c
 20946  009AD4  CFF3 F005          	movff	prodl,___wmul@product
 20947  009AD8  CFF4 F006          	movff	prodh,___wmul@product+1
 20948  009ADC  5001               	movf	___wmul@multiplier,w,c
 20949  009ADE  0204               	mulwf	___wmul@multiplicand+1,c
 20950  009AE0  50F3               	movf	prodl,w,c
 20951  009AE2  2606               	addwf	___wmul@product+1,f,c
 20952  009AE4  5002               	movf	___wmul@multiplier+1,w,c
 20953  009AE6  0203               	mulwf	___wmul@multiplicand,c
 20954  009AE8  50F3               	movf	prodl,w,c
 20955  009AEA  2606               	addwf	___wmul@product+1,f,c
 20956  009AEC  C005  F001         	movff	___wmul@product,?___wmul
 20957  009AF0  C006  F002         	movff	___wmul@product+1,?___wmul+1
 20958  009AF4  0012               	return	
 20959  009AF6                     __end_of___wmul:
 20960                           	opt stack 0
 20961                           tblptru	equ	0xFF8
 20962                           tblptrh	equ	0xFF7
 20963                           tblptrl	equ	0xFF6
 20964                           tablat	equ	0xFF5
 20965                           prodh	equ	0xFF4
 20966                           prodl	equ	0xFF3
 20967                           postinc0	equ	0xFEE
 20968                           wreg	equ	0xFE8
 20969                           postinc1	equ	0xFE6
 20970                           postdec1	equ	0xFE5
 20971                           plusw1	equ	0xFE3
 20972                           fsr1h	equ	0xFE2
 20973                           fsr1l	equ	0xFE1
 20974                           indf2	equ	0xFDF
 20975                           postinc2	equ	0xFDE
 20976                           postdec2	equ	0xFDD
 20977                           plusw2	equ	0xFDB
 20978                           fsr2h	equ	0xFDA
 20979                           fsr2l	equ	0xFD9
 20980                           status	equ	0xFD8
 20981                           
 20982 ;; *************** function _configDrawer *****************
 20983 ;; Defined at:
 20984 ;;		line 815 in file "operationMode.c"
 20985 ;; Parameters:    Size  Location     Type
 20986 ;;  direction       2    5[COMRAM] unsigned int 
 20987 ;; Auto vars:     Size  Location     Type
 20988 ;;		None
 20989 ;; Return value:  Size  Location     Type
 20990 ;;                  1    wreg      void 
 20991 ;; Registers used:
 20992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20993 ;; Tracked objects:
 20994 ;;		On entry : 0/0
 20995 ;;		On exit  : 0/0
 20996 ;;		Unchanged: 0/0
 20997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21002 ;;Total ram usage:        2 bytes
 21003 ;; Hardware stack levels used:    1
 21004 ;; Hardware stack levels required when called:    1
 21005 ;; This function calls:
 21006 ;;		_uartTransmitBlocking
 21007 ;; This function is called by:
 21008 ;;		_mainOperation
 21009 ;; This function uses a non-reentrant model
 21010 ;;
 21011                           
 21012                           	psect	text48
 21013  009B20                     __ptext48:
 21014                           	opt stack 0
 21015  009B20                     _configDrawer:
 21016                           	opt stack 28
 21017                           
 21018                           ;operationMode.c: 819: if (direction == 1){
 21019                           
 21020                           ;incstack = 0
 21021  009B20  0406               	decf	configDrawer@direction,w,c
 21022  009B22  1007               	iorwf	configDrawer@direction+1,w,c
 21023  009B24  A4D8               	btfss	status,2,c
 21024  009B26  D009               	goto	l591
 21025                           
 21026                           ;operationMode.c: 820: uartTransmitBlocking(drawerOpen, 1);
 21027  009B28  0E71               	movlw	low _drawerOpen
 21028  009B2A  6E01               	movwf	uartTransmitBlocking@data,c
 21029  009B2C  0E00               	movlw	high _drawerOpen
 21030  009B2E  6E02               	movwf	uartTransmitBlocking@data+1,c
 21031  009B30  0E01               	movlw	1
 21032  009B32  6E03               	movwf	uartTransmitBlocking@numBytes,c
 21033  009B34  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 21034                           
 21035                           ;operationMode.c: 821: }
 21036  009B38  0012               	return	
 21037  009B3A                     l591:
 21038                           
 21039                           ;operationMode.c: 823: else if (direction == 0){
 21040  009B3A  5006               	movf	configDrawer@direction,w,c
 21041  009B3C  1007               	iorwf	configDrawer@direction+1,w,c
 21042  009B3E  A4D8               	btfss	status,2,c
 21043  009B40  0012               	return	
 21044                           
 21045                           ;operationMode.c: 824: uartTransmitBlocking(drawerClose, 1);
 21046  009B42  0E70               	movlw	low _drawerClose
 21047  009B44  6E01               	movwf	uartTransmitBlocking@data,c
 21048  009B46  0E00               	movlw	high _drawerClose
 21049  009B48  6E02               	movwf	uartTransmitBlocking@data+1,c
 21050  009B4A  0E01               	movlw	1
 21051  009B4C  6E03               	movwf	uartTransmitBlocking@numBytes,c
 21052  009B4E  EC65  F050         	call	_uartTransmitBlocking	;wreg free
 21053  009B52  0012               	return	
 21054  009B54                     __end_of_configDrawer:
 21055                           	opt stack 0
 21056                           tblptru	equ	0xFF8
 21057                           tblptrh	equ	0xFF7
 21058                           tblptrl	equ	0xFF6
 21059                           tablat	equ	0xFF5
 21060                           prodh	equ	0xFF4
 21061                           prodl	equ	0xFF3
 21062                           postinc0	equ	0xFEE
 21063                           wreg	equ	0xFE8
 21064                           postinc1	equ	0xFE6
 21065                           postdec1	equ	0xFE5
 21066                           plusw1	equ	0xFE3
 21067                           fsr1h	equ	0xFE2
 21068                           fsr1l	equ	0xFE1
 21069                           indf2	equ	0xFDF
 21070                           postinc2	equ	0xFDE
 21071                           postdec2	equ	0xFDD
 21072                           plusw2	equ	0xFDB
 21073                           fsr2h	equ	0xFDA
 21074                           fsr2l	equ	0xFD9
 21075                           status	equ	0xFD8
 21076                           
 21077 ;; *************** function _uartTransmitBlocking *****************
 21078 ;; Defined at:
 21079 ;;		line 19 in file "UART_PIC.c"
 21080 ;; Parameters:    Size  Location     Type
 21081 ;;  data            2    0[COMRAM] PTR unsigned char 
 21082 ;;		 -> drawerClose(1), drawerOpen(1), drawerDown(1), drawerUp(1), 
 21083 ;;		 -> columnRight(1), columnLeft(1), rowDown(1), rowUp(1), 
 21084 ;;  numBytes        1    2[COMRAM] unsigned char 
 21085 ;; Auto vars:     Size  Location     Type
 21086 ;;  numTransmits    1    4[COMRAM] unsigned char 
 21087 ;; Return value:  Size  Location     Type
 21088 ;;                  1    wreg      void 
 21089 ;; Registers used:
 21090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21091 ;; Tracked objects:
 21092 ;;		On entry : 0/0
 21093 ;;		On exit  : 0/0
 21094 ;;		Unchanged: 0/0
 21095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21099 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21100 ;;Total ram usage:        5 bytes
 21101 ;; Hardware stack levels used:    1
 21102 ;; This function calls:
 21103 ;;		Nothing
 21104 ;; This function is called by:
 21105 ;;		_verticalStepper
 21106 ;;		_horizontalStepper
 21107 ;;		_configDrawer
 21108 ;;		_mainOperation
 21109 ;;		_drawerStepper
 21110 ;; This function uses a non-reentrant model
 21111 ;;
 21112                           
 21113                           	psect	text49
 21114  00A0CA                     __ptext49:
 21115                           	opt stack 0
 21116  00A0CA                     _uartTransmitBlocking:
 21117                           	opt stack 29
 21118                           
 21119                           ;UART_PIC.c: 33: while(UART -> _stateTX == UART_STATE_BUSY){ continue; }
 21120                           
 21121                           ;incstack = 0
 21122  00A0CA  EE20 F008          	lfsr	2,8
 21123  00A0CE  506E               	movf	_UART,w,c
 21124  00A0D0  26D9               	addwf	fsr2l,f,c
 21125  00A0D2  506F               	movf	_UART+1,w,c
 21126  00A0D4  22DA               	addwfc	fsr2h,f,c
 21127  00A0D6  50DF               	movf	indf2,w,c
 21128  00A0D8  B4D8               	btfsc	status,2,c
 21129  00A0DA  D7F7               	goto	_uartTransmitBlocking
 21130                           
 21131                           ;UART_PIC.c: 36: UART -> _stateTX = UART_STATE_BUSY;
 21132  00A0DC  EE20 F008          	lfsr	2,8
 21133  00A0E0  506E               	movf	_UART,w,c
 21134  00A0E2  26D9               	addwf	fsr2l,f,c
 21135  00A0E4  506F               	movf	_UART+1,w,c
 21136  00A0E6  22DA               	addwfc	fsr2h,f,c
 21137  00A0E8  0E00               	movlw	0
 21138  00A0EA  6EDF               	movwf	indf2,c
 21139                           
 21140                           ;UART_PIC.c: 39: unsigned char numTransmits = 0;
 21141  00A0EC  0E00               	movlw	0
 21142  00A0EE  6E05               	movwf	uartTransmitBlocking@numTransmits,c
 21143                           
 21144                           ;UART_PIC.c: 42: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(40000000/4000.0)));;
 21145  00A0F0  8AAC               	bsf	4012,5,c	;volatile
 21146  00A0F2  0E41               	movlw	65
 21147  00A0F4  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 21148  00A0F6  0EEE               	movlw	238
 21149  00A0F8                     u15567:
 21150  00A0F8  2EE8               	decfsz	wreg,f,c
 21151  00A0FA  D7FE               	bra	u15567
 21152  00A0FC  2E04               	decfsz	??_uartTransmitBlocking& (0+255),f,c
 21153  00A0FE  D7FC               	bra	u15567
 21154  00A100  D000               	nop2	
 21155                           
 21156                           ;UART_PIC.c: 45: while(numTransmits < numBytes){
 21157  00A102  D023               	goto	l1502
 21158  00A104                     l7124:
 21159  00A104  B2AC               	btfsc	4012,1,c	;volatile
 21160  00A106  D002               	goto	u7550
 21161  00A108  0E01               	movlw	1
 21162  00A10A  D001               	goto	u7552
 21163  00A10C                     u7550:
 21164  00A10C  0E00               	movlw	0
 21165  00A10E                     u7552:
 21166  00A10E  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 21167  00A110  B89E               	btfsc	3998,4,c	;volatile
 21168  00A112  D002               	goto	u7560
 21169  00A114  0E01               	movlw	1
 21170  00A116  D001               	goto	u7562
 21171  00A118                     u7560:
 21172  00A118  0E00               	movlw	0
 21173  00A11A                     u7562:
 21174  00A11A  1004               	iorwf	??_uartTransmitBlocking,w,c
 21175  00A11C  E1F3               	bnz	l7124
 21176                           
 21177                           ;UART_PIC.c: 50: __nop();
 21178  00A11E  F000               	nop	
 21179                           
 21180                           ;UART_PIC.c: 53: UARTinterruptState = INTCONbits.GIE;
 21181  00A120  0E00               	movlw	0
 21182  00A122  BEF2               	btfsc	intcon,7,c	;volatile
 21183  00A124  0E01               	movlw	1
 21184  00A126  6E79               	movwf	_UARTinterruptState,c	;volatile
 21185                           
 21186                           ;UART_PIC.c: 54: (INTCONbits.GIE = 0);
 21187  00A128  9EF2               	bcf	intcon,7,c	;volatile
 21188                           
 21189                           ;UART_PIC.c: 55: TXREG = data[numTransmits];
 21190  00A12A  5005               	movf	uartTransmitBlocking@numTransmits,w,c
 21191  00A12C  0D01               	mullw	1
 21192  00A12E  50F3               	movf	prodl,w,c
 21193  00A130  2401               	addwf	uartTransmitBlocking@data,w,c
 21194  00A132  6ED9               	movwf	fsr2l,c
 21195  00A134  50F4               	movf	prodh,w,c
 21196  00A136  2002               	addwfc	uartTransmitBlocking@data+1,w,c
 21197  00A138  6EDA               	movwf	fsr2h,c
 21198  00A13A  50DF               	movf	indf2,w,c
 21199  00A13C  6EAD               	movwf	4013,c	;volatile
 21200                           
 21201                           ;UART_PIC.c: 56: INTCONbits.GIE = UARTinterruptState;
 21202  00A13E  B079               	btfsc	_UARTinterruptState,0,c	;volatile
 21203  00A140  D002               	bra	u7575
 21204  00A142  9EF2               	bcf	intcon,7,c	;volatile
 21205  00A144  D001               	bra	u7576
 21206  00A146                     u7575:
 21207  00A146  8EF2               	bsf	intcon,7,c	;volatile
 21208  00A148                     u7576:
 21209                           
 21210                           ;UART_PIC.c: 58: numTransmits++;
 21211  00A148  2A05               	incf	uartTransmitBlocking@numTransmits,f,c
 21212  00A14A                     l1502:
 21213  00A14A  5003               	movf	uartTransmitBlocking@numBytes,w,c
 21214  00A14C  5C05               	subwf	uartTransmitBlocking@numTransmits,w,c
 21215  00A14E  A0D8               	btfss	status,0,c
 21216  00A150  D7D9               	goto	l1503
 21217                           
 21218                           ;UART_PIC.c: 62: }
 21219                           ;UART_PIC.c: 65: UART -> _stateTX = UART_STATE_READY;
 21220  00A152  EE20 F008          	lfsr	2,8
 21221  00A156  506E               	movf	_UART,w,c
 21222  00A158  26D9               	addwf	fsr2l,f,c
 21223  00A15A  506F               	movf	_UART+1,w,c
 21224  00A15C  22DA               	addwfc	fsr2h,f,c
 21225  00A15E  0E01               	movlw	1
 21226  00A160  6EDF               	movwf	indf2,c
 21227  00A162  0012               	return		;funcret
 21228  00A164                     __end_of_uartTransmitBlocking:
 21229                           	opt stack 0
 21230                           tblptru	equ	0xFF8
 21231                           tblptrh	equ	0xFF7
 21232                           tblptrl	equ	0xFF6
 21233                           tablat	equ	0xFF5
 21234                           prodh	equ	0xFF4
 21235                           prodl	equ	0xFF3
 21236                           intcon	equ	0xFF2
 21237                           postinc0	equ	0xFEE
 21238                           wreg	equ	0xFE8
 21239                           postinc1	equ	0xFE6
 21240                           postdec1	equ	0xFE5
 21241                           plusw1	equ	0xFE3
 21242                           fsr1h	equ	0xFE2
 21243                           fsr1l	equ	0xFE1
 21244                           indf2	equ	0xFDF
 21245                           postinc2	equ	0xFDE
 21246                           postdec2	equ	0xFDD
 21247                           plusw2	equ	0xFDB
 21248                           fsr2h	equ	0xFDA
 21249                           fsr2l	equ	0xFD9
 21250                           status	equ	0xFD8
 21251                           
 21252 ;; *************** function _initLCD *****************
 21253 ;; Defined at:
 21254 ;;		line 27 in file "LCD.c"
 21255 ;; Parameters:    Size  Location     Type
 21256 ;;		None
 21257 ;; Auto vars:     Size  Location     Type
 21258 ;;		None
 21259 ;; Return value:  Size  Location     Type
 21260 ;;                  1    wreg      void 
 21261 ;; Registers used:
 21262 ;;		wreg, status,2, status,0, cstack
 21263 ;; Tracked objects:
 21264 ;;		On entry : 0/0
 21265 ;;		On exit  : 0/0
 21266 ;;		Unchanged: 0/0
 21267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21272 ;;Total ram usage:        1 bytes
 21273 ;; Hardware stack levels used:    1
 21274 ;; Hardware stack levels required when called:    2
 21275 ;; This function calls:
 21276 ;;		_lcdInst
 21277 ;; This function is called by:
 21278 ;;		_main
 21279 ;; This function uses a non-reentrant model
 21280 ;;
 21281                           
 21282                           	psect	text50
 21283  009BD4                     __ptext50:
 21284                           	opt stack 0
 21285  009BD4                     _initLCD:
 21286                           	opt stack 28
 21287                           
 21288                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 21289                           
 21290                           ;incstack = 0
 21291  009BD4  0EC3               	movlw	195
 21292  009BD6  6E04               	movwf	??_initLCD& (0+255),c
 21293  009BD8  0ECD               	movlw	205
 21294  009BDA                     u15577:
 21295  009BDA  2EE8               	decfsz	wreg,f,c
 21296  009BDC  D7FE               	bra	u15577
 21297  009BDE  2E04               	decfsz	??_initLCD& (0+255),f,c
 21298  009BE0  D7FC               	bra	u15577
 21299  009BE2  F000               	nop	
 21300                           
 21301                           ;LCD.c: 36: lcdInst(0b00110011);
 21302  009BE4  0E33               	movlw	51
 21303  009BE6  EC16  F04D         	call	_lcdInst
 21304                           
 21305                           ;LCD.c: 37: lcdInst(0b00110010);
 21306  009BEA  0E32               	movlw	50
 21307  009BEC  EC16  F04D         	call	_lcdInst
 21308                           
 21309                           ;LCD.c: 38: lcdInst(0b00101000);
 21310  009BF0  0E28               	movlw	40
 21311  009BF2  EC16  F04D         	call	_lcdInst
 21312                           
 21313                           ;LCD.c: 39: lcdInst(0b00001111);
 21314  009BF6  0E0F               	movlw	15
 21315  009BF8  EC16  F04D         	call	_lcdInst
 21316                           
 21317                           ;LCD.c: 40: lcdInst(0b00000110);
 21318  009BFC  0E06               	movlw	6
 21319  009BFE  EC16  F04D         	call	_lcdInst
 21320                           
 21321                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 21322  009C02  0E01               	movlw	1
 21323  009C04  EC16  F04D         	call	_lcdInst
 21324  009C08  0EC3               	movlw	195
 21325  009C0A  6E04               	movwf	??_initLCD& (0+255),c
 21326  009C0C  0ECD               	movlw	205
 21327  009C0E                     u15587:
 21328  009C0E  2EE8               	decfsz	wreg,f,c
 21329  009C10  D7FE               	bra	u15587
 21330  009C12  2E04               	decfsz	??_initLCD& (0+255),f,c
 21331  009C14  D7FC               	bra	u15587
 21332  009C16  F000               	nop	
 21333                           
 21334                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 21335  009C18  0E0F               	movlw	15
 21336  009C1A  EC16  F04D         	call	_lcdInst
 21337  009C1E  0012               	return		;funcret
 21338  009C20                     __end_of_initLCD:
 21339                           	opt stack 0
 21340                           tblptru	equ	0xFF8
 21341                           tblptrh	equ	0xFF7
 21342                           tblptrl	equ	0xFF6
 21343                           tablat	equ	0xFF5
 21344                           prodh	equ	0xFF4
 21345                           prodl	equ	0xFF3
 21346                           intcon	equ	0xFF2
 21347                           postinc0	equ	0xFEE
 21348                           wreg	equ	0xFE8
 21349                           postinc1	equ	0xFE6
 21350                           postdec1	equ	0xFE5
 21351                           plusw1	equ	0xFE3
 21352                           fsr1h	equ	0xFE2
 21353                           fsr1l	equ	0xFE1
 21354                           indf2	equ	0xFDF
 21355                           postinc2	equ	0xFDE
 21356                           postdec2	equ	0xFDD
 21357                           plusw2	equ	0xFDB
 21358                           fsr2h	equ	0xFDA
 21359                           fsr2l	equ	0xFD9
 21360                           status	equ	0xFD8
 21361                           
 21362 ;; *************** function _lcdInst *****************
 21363 ;; Defined at:
 21364 ;;		line 13 in file "LCD.c"
 21365 ;; Parameters:    Size  Location     Type
 21366 ;;  data            1    wreg     unsigned char 
 21367 ;; Auto vars:     Size  Location     Type
 21368 ;;  data            1    2[COMRAM] unsigned char 
 21369 ;; Return value:  Size  Location     Type
 21370 ;;                  1    wreg      void 
 21371 ;; Registers used:
 21372 ;;		wreg, status,2, status,0, cstack
 21373 ;; Tracked objects:
 21374 ;;		On entry : 0/0
 21375 ;;		On exit  : 0/0
 21376 ;;		Unchanged: 0/0
 21377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21382 ;;Total ram usage:        1 bytes
 21383 ;; Hardware stack levels used:    1
 21384 ;; Hardware stack levels required when called:    1
 21385 ;; This function calls:
 21386 ;;		_lcdNibble
 21387 ;; This function is called by:
 21388 ;;		_main
 21389 ;;		_mainOperation
 21390 ;;		_viewLogs
 21391 ;;		_displayLogs
 21392 ;;		_food_press
 21393 ;;		_diet_press
 21394 ;;		_which_drawer
 21395 ;;		_standbyMode
 21396 ;;		_initLCD
 21397 ;; This function uses a non-reentrant model
 21398 ;;
 21399                           
 21400                           	psect	text51
 21401  009A2C                     __ptext51:
 21402                           	opt stack 0
 21403  009A2C                     _lcdInst:
 21404                           	opt stack 27
 21405                           
 21406                           ;incstack = 0
 21407                           ;lcdInst@data stored from wreg
 21408  009A2C  6E03               	movwf	lcdInst@data,c
 21409                           
 21410                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 21411  009A2E  948C               	bcf	3980,2,c	;volatile
 21412                           
 21413                           ;LCD.c: 22: lcdNibble(data);
 21414  009A30  5003               	movf	lcdInst@data,w,c
 21415  009A32  EC5E  F04F         	call	_lcdNibble
 21416                           
 21417                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 21418  009A36  0EC8               	movlw	200
 21419  009A38                     u15597:
 21420  009A38  D000               	nop2	
 21421  009A3A  2EE8               	decfsz	wreg,f,c
 21422  009A3C  D7FD               	bra	u15597
 21423  009A3E  0012               	return		;funcret
 21424  009A40                     __end_of_lcdInst:
 21425                           	opt stack 0
 21426                           tblptru	equ	0xFF8
 21427                           tblptrh	equ	0xFF7
 21428                           tblptrl	equ	0xFF6
 21429                           tablat	equ	0xFF5
 21430                           prodh	equ	0xFF4
 21431                           prodl	equ	0xFF3
 21432                           intcon	equ	0xFF2
 21433                           postinc0	equ	0xFEE
 21434                           wreg	equ	0xFE8
 21435                           postinc1	equ	0xFE6
 21436                           postdec1	equ	0xFE5
 21437                           plusw1	equ	0xFE3
 21438                           fsr1h	equ	0xFE2
 21439                           fsr1l	equ	0xFE1
 21440                           indf2	equ	0xFDF
 21441                           postinc2	equ	0xFDE
 21442                           postdec2	equ	0xFDD
 21443                           plusw2	equ	0xFDB
 21444                           fsr2h	equ	0xFDA
 21445                           fsr2l	equ	0xFD9
 21446                           status	equ	0xFD8
 21447                           
 21448 ;; *************** function _lcdNibble *****************
 21449 ;; Defined at:
 21450 ;;		line 48 in file "LCD.c"
 21451 ;; Parameters:    Size  Location     Type
 21452 ;;  data            1    wreg     unsigned char 
 21453 ;; Auto vars:     Size  Location     Type
 21454 ;;  data            1    1[COMRAM] unsigned char 
 21455 ;;  temp            1    0[COMRAM] unsigned char 
 21456 ;; Return value:  Size  Location     Type
 21457 ;;                  1    wreg      void 
 21458 ;; Registers used:
 21459 ;;		wreg, status,2, status,0
 21460 ;; Tracked objects:
 21461 ;;		On entry : 0/0
 21462 ;;		On exit  : 0/0
 21463 ;;		Unchanged: 0/0
 21464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21469 ;;Total ram usage:        2 bytes
 21470 ;; Hardware stack levels used:    1
 21471 ;; This function calls:
 21472 ;;		Nothing
 21473 ;; This function is called by:
 21474 ;;		_lcdInst
 21475 ;;		_putch
 21476 ;; This function uses a non-reentrant model
 21477 ;;
 21478                           
 21479                           	psect	text52
 21480  009EBC                     __ptext52:
 21481                           	opt stack 0
 21482  009EBC                     _lcdNibble:
 21483                           	opt stack 27
 21484                           
 21485                           ;incstack = 0
 21486                           ;lcdNibble@data stored from wreg
 21487  009EBC  6E02               	movwf	lcdNibble@data,c
 21488                           
 21489                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 21490  009EBE  5002               	movf	lcdNibble@data,w,c
 21491  009EC0  0BF0               	andlw	240
 21492  009EC2  6E01               	movwf	lcdNibble@temp,c
 21493                           
 21494                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 21495  009EC4  508C               	movf	3980,w,c	;volatile
 21496  009EC6  0B0F               	andlw	15
 21497  009EC8  6E8C               	movwf	3980,c	;volatile
 21498                           
 21499                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 21500  009ECA  5001               	movf	lcdNibble@temp,w,c
 21501  009ECC  108C               	iorwf	3980,w,c	;volatile
 21502  009ECE  6E8C               	movwf	3980,c	;volatile
 21503                           
 21504                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 21505  009ED0  0E00               	movlw	0
 21506  009ED2  BEF2               	btfsc	intcon,7,c	;volatile
 21507  009ED4  0E01               	movlw	1
 21508  009ED6  6E78               	movwf	_LCDinterruptState,c
 21509  009ED8  9EF2               	bcf	intcon,7,c	;volatile
 21510  009EDA  868C               	bsf	3980,3,c	;volatile
 21511  009EDC  0E53               	movlw	83
 21512  009EDE                     u15607:
 21513  009EDE  2EE8               	decfsz	wreg,f,c
 21514  009EE0  D7FE               	bra	u15607
 21515  009EE2  F000               	nop	
 21516  009EE4  968C               	bcf	3980,3,c	;volatile
 21517  009EE6  0EC8               	movlw	200
 21518  009EE8                     u15617:
 21519  009EE8  D000               	nop2	
 21520  009EEA  2EE8               	decfsz	wreg,f,c
 21521  009EEC  D7FD               	bra	u15617
 21522  009EEE  B078               	btfsc	_LCDinterruptState,0,c
 21523  009EF0  D002               	bra	u7155
 21524  009EF2  9EF2               	bcf	intcon,7,c	;volatile
 21525  009EF4  D001               	bra	u7156
 21526  009EF6                     u7155:
 21527  009EF6  8EF2               	bsf	intcon,7,c	;volatile
 21528  009EF8                     u7156:
 21529                           
 21530                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 21531  009EF8  3802               	swapf	lcdNibble@data,w,c
 21532  009EFA  0BF0               	andlw	240
 21533  009EFC  6E02               	movwf	lcdNibble@data,c
 21534                           
 21535                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 21536  009EFE  5002               	movf	lcdNibble@data,w,c
 21537  009F00  0BF0               	andlw	240
 21538  009F02  6E01               	movwf	lcdNibble@temp,c
 21539                           
 21540                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 21541  009F04  508C               	movf	3980,w,c	;volatile
 21542  009F06  0B0F               	andlw	15
 21543  009F08  6E8C               	movwf	3980,c	;volatile
 21544                           
 21545                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 21546  009F0A  5001               	movf	lcdNibble@temp,w,c
 21547  009F0C  108C               	iorwf	3980,w,c	;volatile
 21548  009F0E  6E8C               	movwf	3980,c	;volatile
 21549                           
 21550                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 21551  009F10  0E00               	movlw	0
 21552  009F12  BEF2               	btfsc	intcon,7,c	;volatile
 21553  009F14  0E01               	movlw	1
 21554  009F16  6E78               	movwf	_LCDinterruptState,c
 21555  009F18  9EF2               	bcf	intcon,7,c	;volatile
 21556  009F1A  868C               	bsf	3980,3,c	;volatile
 21557  009F1C  0E53               	movlw	83
 21558  009F1E                     u15627:
 21559  009F1E  2EE8               	decfsz	wreg,f,c
 21560  009F20  D7FE               	bra	u15627
 21561  009F22  F000               	nop	
 21562  009F24  968C               	bcf	3980,3,c	;volatile
 21563  009F26  0EC8               	movlw	200
 21564  009F28                     u15637:
 21565  009F28  D000               	nop2	
 21566  009F2A  2EE8               	decfsz	wreg,f,c
 21567  009F2C  D7FD               	bra	u15637
 21568  009F2E  B078               	btfsc	_LCDinterruptState,0,c
 21569  009F30  D002               	bra	u7165
 21570  009F32  9EF2               	bcf	intcon,7,c	;volatile
 21571  009F34  D001               	bra	u7166
 21572  009F36                     u7165:
 21573  009F36  8EF2               	bsf	intcon,7,c	;volatile
 21574  009F38                     u7166:
 21575  009F38  0012               	return		;funcret
 21576  009F3A                     __end_of_lcdNibble:
 21577                           	opt stack 0
 21578                           tblptru	equ	0xFF8
 21579                           tblptrh	equ	0xFF7
 21580                           tblptrl	equ	0xFF6
 21581                           tablat	equ	0xFF5
 21582                           prodh	equ	0xFF4
 21583                           prodl	equ	0xFF3
 21584                           intcon	equ	0xFF2
 21585                           postinc0	equ	0xFEE
 21586                           wreg	equ	0xFE8
 21587                           postinc1	equ	0xFE6
 21588                           postdec1	equ	0xFE5
 21589                           plusw1	equ	0xFE3
 21590                           fsr1h	equ	0xFE2
 21591                           fsr1l	equ	0xFE1
 21592                           indf2	equ	0xFDF
 21593                           postinc2	equ	0xFDE
 21594                           postdec2	equ	0xFDD
 21595                           plusw2	equ	0xFDB
 21596                           fsr2h	equ	0xFDA
 21597                           fsr2l	equ	0xFD9
 21598                           status	equ	0xFD8
 21599                           
 21600 ;; *************** function _initEEPROM *****************
 21601 ;; Defined at:
 21602 ;;		line 40 in file "EEPROMstorage.c"
 21603 ;; Parameters:    Size  Location     Type
 21604 ;;		None
 21605 ;; Auto vars:     Size  Location     Type
 21606 ;;  i               2    2[COMRAM] unsigned int 
 21607 ;; Return value:  Size  Location     Type
 21608 ;;                  1    wreg      void 
 21609 ;; Registers used:
 21610 ;;		wreg, status,2, status,0, cstack
 21611 ;; Tracked objects:
 21612 ;;		On entry : 0/0
 21613 ;;		On exit  : 0/0
 21614 ;;		Unchanged: 0/0
 21615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21620 ;;Total ram usage:        2 bytes
 21621 ;; Hardware stack levels used:    1
 21622 ;; Hardware stack levels required when called:    1
 21623 ;; This function calls:
 21624 ;;		_writeEEPROM
 21625 ;; This function is called by:
 21626 ;;		_main
 21627 ;; This function uses a non-reentrant model
 21628 ;;
 21629                           
 21630                           	psect	text53
 21631  009AAA                     __ptext53:
 21632                           	opt stack 0
 21633  009AAA                     _initEEPROM:
 21634                           	opt stack 29
 21635                           
 21636                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 21637                           
 21638                           ;incstack = 0
 21639  009AAA  0E00               	movlw	0
 21640  009AAC  6E04               	movwf	initEEPROM@i+1,c
 21641  009AAE  0E00               	movlw	0
 21642  009AB0  6E03               	movwf	initEEPROM@i,c
 21643                           
 21644                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 21645  009AB2  0E00               	movlw	0
 21646  009AB4  6E04               	movwf	initEEPROM@i+1,c
 21647  009AB6  0E00               	movlw	0
 21648  009AB8  6E03               	movwf	initEEPROM@i,c
 21649  009ABA                     l10156:
 21650  009ABA  0404               	decf	initEEPROM@i+1,w,c
 21651  009ABC  B0D8               	btfsc	status,0,c
 21652  009ABE  0012               	return	
 21653                           
 21654                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 21655  009AC0  0E00               	movlw	0
 21656  009AC2  6E01               	movwf	writeEEPROM@data,c
 21657  009AC4  5003               	movf	initEEPROM@i,w,c
 21658  009AC6  EC7B  F04D         	call	_writeEEPROM
 21659  009ACA  4A03               	infsnz	initEEPROM@i,f,c
 21660  009ACC  2A04               	incf	initEEPROM@i+1,f,c
 21661  009ACE  D7F5               	goto	l10156
 21662  009AD0                     __end_of_initEEPROM:
 21663                           	opt stack 0
 21664                           tblptru	equ	0xFF8
 21665                           tblptrh	equ	0xFF7
 21666                           tblptrl	equ	0xFF6
 21667                           tablat	equ	0xFF5
 21668                           prodh	equ	0xFF4
 21669                           prodl	equ	0xFF3
 21670                           intcon	equ	0xFF2
 21671                           postinc0	equ	0xFEE
 21672                           wreg	equ	0xFE8
 21673                           postinc1	equ	0xFE6
 21674                           postdec1	equ	0xFE5
 21675                           plusw1	equ	0xFE3
 21676                           fsr1h	equ	0xFE2
 21677                           fsr1l	equ	0xFE1
 21678                           indf2	equ	0xFDF
 21679                           postinc2	equ	0xFDE
 21680                           postdec2	equ	0xFDD
 21681                           plusw2	equ	0xFDB
 21682                           fsr2h	equ	0xFDA
 21683                           fsr2l	equ	0xFD9
 21684                           status	equ	0xFD8
 21685                           
 21686 ;; *************** function _writeEEPROM *****************
 21687 ;; Defined at:
 21688 ;;		line 10 in file "EEPROMstorage.c"
 21689 ;; Parameters:    Size  Location     Type
 21690 ;;  address         1    wreg     unsigned char 
 21691 ;;  data            1    0[COMRAM] unsigned char 
 21692 ;; Auto vars:     Size  Location     Type
 21693 ;;  address         1    1[COMRAM] unsigned char 
 21694 ;; Return value:  Size  Location     Type
 21695 ;;                  1    wreg      void 
 21696 ;; Registers used:
 21697 ;;		wreg, status,2
 21698 ;; Tracked objects:
 21699 ;;		On entry : 0/0
 21700 ;;		On exit  : 0/0
 21701 ;;		Unchanged: 0/0
 21702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21703 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21704 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21707 ;;Total ram usage:        2 bytes
 21708 ;; Hardware stack levels used:    1
 21709 ;; This function calls:
 21710 ;;		Nothing
 21711 ;; This function is called by:
 21712 ;;		_standbyMode
 21713 ;;		_initEEPROM
 21714 ;;		_shiftEEPROM
 21715 ;; This function uses a non-reentrant model
 21716 ;;
 21717                           
 21718                           	psect	text54
 21719  009AF6                     __ptext54:
 21720                           	opt stack 0
 21721  009AF6                     _writeEEPROM:
 21722                           	opt stack 29
 21723                           
 21724                           ;incstack = 0
 21725                           ;writeEEPROM@address stored from wreg
 21726  009AF6  6E02               	movwf	writeEEPROM@address,c
 21727  009AF8                     
 21728                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 21729  009AF8  B2A6               	btfsc	4006,1,c	;volsfr
 21730  009AFA  D7FE               	goto	l7858
 21731                           
 21732                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 21733  009AFC  84A6               	bsf	4006,2,c	;volsfr
 21734                           
 21735                           ;EEPROMstorage.c: 14: EEADR=address;
 21736  009AFE  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 21737                           
 21738                           ;EEPROMstorage.c: 15: EEDATA=data;
 21739  009B02  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 21740                           
 21741                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 21742  009B06  9EA6               	bcf	4006,7,c	;volsfr
 21743                           
 21744                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 21745  009B08  9CA6               	bcf	4006,6,c	;volsfr
 21746                           
 21747                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 21748  009B0A  9EF2               	bcf	intcon,7,c	;volatile
 21749                           
 21750                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 21751  009B0C  0E55               	movlw	85
 21752  009B0E  6EA7               	movwf	4007,c	;volsfr
 21753                           
 21754                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 21755  009B10  0EAA               	movlw	170
 21756  009B12  6EA7               	movwf	4007,c	;volsfr
 21757                           
 21758                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 21759  009B14  82A6               	bsf	4006,1,c	;volsfr
 21760                           
 21761                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 21762  009B16  8EF2               	bsf	intcon,7,c	;volatile
 21763  009B18  B2A6               	btfsc	4006,1,c	;volsfr
 21764  009B1A  D7FE               	goto	l1345
 21765                           
 21766                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 21767  009B1C  94A6               	bcf	4006,2,c	;volsfr
 21768  009B1E  0012               	return		;funcret
 21769  009B20                     __end_of_writeEEPROM:
 21770                           	opt stack 0
 21771                           tblptru	equ	0xFF8
 21772                           tblptrh	equ	0xFF7
 21773                           tblptrl	equ	0xFF6
 21774                           tablat	equ	0xFF5
 21775                           prodh	equ	0xFF4
 21776                           prodl	equ	0xFF3
 21777                           intcon	equ	0xFF2
 21778                           postinc0	equ	0xFEE
 21779                           wreg	equ	0xFE8
 21780                           postinc1	equ	0xFE6
 21781                           postdec1	equ	0xFE5
 21782                           plusw1	equ	0xFE3
 21783                           fsr1h	equ	0xFE2
 21784                           fsr1l	equ	0xFE1
 21785                           indf2	equ	0xFDF
 21786                           postinc2	equ	0xFDE
 21787                           postdec2	equ	0xFDD
 21788                           plusw2	equ	0xFDB
 21789                           fsr2h	equ	0xFDA
 21790                           fsr2l	equ	0xFD9
 21791                           status	equ	0xFD8
 21792                           
 21793 ;; *************** function _UART_Init *****************
 21794 ;; Defined at:
 21795 ;;		line 197 in file "UART_PIC.c"
 21796 ;; Parameters:    Size  Location     Type
 21797 ;;  baud            4   14[COMRAM] long 
 21798 ;; Auto vars:     Size  Location     Type
 21799 ;;		None
 21800 ;; Return value:  Size  Location     Type
 21801 ;;                  1    wreg      void 
 21802 ;; Registers used:
 21803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21804 ;; Tracked objects:
 21805 ;;		On entry : 0/0
 21806 ;;		On exit  : 0/0
 21807 ;;		Unchanged: 0/0
 21808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21811 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21812 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21813 ;;Total ram usage:        8 bytes
 21814 ;; Hardware stack levels used:    1
 21815 ;; Hardware stack levels required when called:    1
 21816 ;; This function calls:
 21817 ;;		___aldiv
 21818 ;; This function is called by:
 21819 ;;		_main
 21820 ;; This function uses a non-reentrant model
 21821 ;;
 21822                           
 21823                           	psect	text55
 21824  009FBC                     __ptext55:
 21825                           	opt stack 0
 21826  009FBC                     _UART_Init:
 21827                           	opt stack 29
 21828                           
 21829                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 21830                           
 21831                           ;incstack = 0
 21832  009FBC  0E00               	movlw	0
 21833  009FBE  6E01               	movwf	___aldiv@dividend,c
 21834  009FC0  0E5A               	movlw	90
 21835  009FC2  6E02               	movwf	___aldiv@dividend+1,c
 21836  009FC4  0E62               	movlw	98
 21837  009FC6  6E03               	movwf	___aldiv@dividend+2,c
 21838  009FC8  0E02               	movlw	2
 21839  009FCA  6E04               	movwf	___aldiv@dividend+3,c
 21840  009FCC  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 21841  009FD0  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 21842  009FD4  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 21843  009FD8  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 21844  009FDC  0E06               	movlw	6
 21845  009FDE                     u13485:
 21846  009FDE  90D8               	bcf	status,0,c
 21847  009FE0  3613               	rlcf	??_UART_Init,f,c
 21848  009FE2  3614               	rlcf	??_UART_Init+1,f,c
 21849  009FE4  3615               	rlcf	??_UART_Init+2,f,c
 21850  009FE6  3616               	rlcf	??_UART_Init+3,f,c
 21851  009FE8  2EE8               	decfsz	wreg,f,c
 21852  009FEA  D7F9               	goto	u13485
 21853  009FEC  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 21854  009FF0  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 21855  009FF4  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 21856  009FF8  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 21857  009FFC  EC58  F052         	call	___aldiv	;wreg free
 21858  00A000  0401               	decf	?___aldiv,w,c
 21859  00A002  6EAF               	movwf	4015,c	;volatile
 21860                           
 21861                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 21862  00A004  9CAC               	bcf	4012,6,c	;volatile
 21863                           
 21864                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 21865  00A006  98AC               	bcf	4012,4,c	;volatile
 21866                           
 21867                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 21868  00A008  8AAC               	bsf	4012,5,c	;volatile
 21869                           
 21870                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 21871  00A00A  9CAB               	bcf	4011,6,c	;volatile
 21872                           
 21873                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 21874  00A00C  88AB               	bsf	4011,4,c	;volatile
 21875                           
 21876                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 21877  00A00E  EE20 F008          	lfsr	2,8
 21878  00A012  506E               	movf	_UART,w,c
 21879  00A014  26D9               	addwf	fsr2l,f,c
 21880  00A016  506F               	movf	_UART+1,w,c
 21881  00A018  22DA               	addwfc	fsr2h,f,c
 21882  00A01A  0E01               	movlw	1
 21883  00A01C  6EDF               	movwf	indf2,c
 21884                           
 21885                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 21886  00A01E  EE20 F009          	lfsr	2,9
 21887  00A022  506E               	movf	_UART,w,c
 21888  00A024  26D9               	addwf	fsr2l,f,c
 21889  00A026  506F               	movf	_UART+1,w,c
 21890  00A028  22DA               	addwfc	fsr2h,f,c
 21891  00A02A  0E01               	movlw	1
 21892  00A02C  6EDF               	movwf	indf2,c
 21893                           
 21894                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 21895  00A02E  0E40               	movlw	low _arr_dataRX
 21896  00A030  0101               	movlb	1	; () banked
 21897  00A032  6FF6               	movwf	(_uart+4)& (0+255),b	;volatile
 21898  00A034  0E02               	movlw	high _arr_dataRX
 21899  00A036  6FF7               	movwf	(_uart+5)& (0+255),b	;volatile
 21900                           
 21901                           ; BSR set to: 1
 21902                           ;UART_PIC.c: 229: TRISC6 = 0;
 21903  00A038  9C94               	bcf	3988,6,c	;volatile
 21904                           
 21905                           ; BSR set to: 1
 21906                           ;UART_PIC.c: 230: TRISC7 = 1;
 21907  00A03A  8E94               	bsf	3988,7,c	;volatile
 21908                           
 21909                           ; BSR set to: 1
 21910                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 21911  00A03C  8EAB               	bsf	4011,7,c	;volatile
 21912                           
 21913                           ; BSR set to: 1
 21914  00A03E  0012               	return		;funcret
 21915  00A040                     __end_of_UART_Init:
 21916                           	opt stack 0
 21917                           tblptru	equ	0xFF8
 21918                           tblptrh	equ	0xFF7
 21919                           tblptrl	equ	0xFF6
 21920                           tablat	equ	0xFF5
 21921                           prodh	equ	0xFF4
 21922                           prodl	equ	0xFF3
 21923                           intcon	equ	0xFF2
 21924                           postinc0	equ	0xFEE
 21925                           wreg	equ	0xFE8
 21926                           postinc1	equ	0xFE6
 21927                           postdec1	equ	0xFE5
 21928                           plusw1	equ	0xFE3
 21929                           fsr1h	equ	0xFE2
 21930                           fsr1l	equ	0xFE1
 21931                           indf2	equ	0xFDF
 21932                           postinc2	equ	0xFDE
 21933                           postdec2	equ	0xFDD
 21934                           plusw2	equ	0xFDB
 21935                           fsr2h	equ	0xFDA
 21936                           fsr2l	equ	0xFD9
 21937                           status	equ	0xFD8
 21938                           
 21939 ;; *************** function ___aldiv *****************
 21940 ;; Defined at:
 21941 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 21942 ;; Parameters:    Size  Location     Type
 21943 ;;  dividend        4    0[COMRAM] long 
 21944 ;;  divisor         4    4[COMRAM] long 
 21945 ;; Auto vars:     Size  Location     Type
 21946 ;;  quotient        4   10[COMRAM] long 
 21947 ;;  sign            1    9[COMRAM] unsigned char 
 21948 ;;  counter         1    8[COMRAM] unsigned char 
 21949 ;; Return value:  Size  Location     Type
 21950 ;;                  4    0[COMRAM] long 
 21951 ;; Registers used:
 21952 ;;		wreg, status,2, status,0
 21953 ;; Tracked objects:
 21954 ;;		On entry : 0/0
 21955 ;;		On exit  : 0/0
 21956 ;;		Unchanged: 0/0
 21957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21958 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21959 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21961 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21962 ;;Total ram usage:       14 bytes
 21963 ;; Hardware stack levels used:    1
 21964 ;; This function calls:
 21965 ;;		Nothing
 21966 ;; This function is called by:
 21967 ;;		_UART_Init
 21968 ;; This function uses a non-reentrant model
 21969 ;;
 21970                           
 21971                           	psect	text56
 21972  00A4B0                     __ptext56:
 21973                           	opt stack 0
 21974  00A4B0                     ___aldiv:
 21975                           	opt stack 29
 21976                           
 21977                           ; BSR set to: 1
 21978                           ;incstack = 0
 21979  00A4B0  0E00               	movlw	0
 21980  00A4B2  6E0A               	movwf	___aldiv@sign,c
 21981  00A4B4  AE08               	btfss	___aldiv@divisor+3,7,c
 21982  00A4B6  D00A               	goto	l1713
 21983  00A4B8  1E08               	comf	___aldiv@divisor+3,f,c
 21984  00A4BA  1E07               	comf	___aldiv@divisor+2,f,c
 21985  00A4BC  1E06               	comf	___aldiv@divisor+1,f,c
 21986  00A4BE  6C05               	negf	___aldiv@divisor,c
 21987  00A4C0  0E00               	movlw	0
 21988  00A4C2  2206               	addwfc	___aldiv@divisor+1,f,c
 21989  00A4C4  2207               	addwfc	___aldiv@divisor+2,f,c
 21990  00A4C6  2208               	addwfc	___aldiv@divisor+3,f,c
 21991  00A4C8  0E01               	movlw	1
 21992  00A4CA  6E0A               	movwf	___aldiv@sign,c
 21993  00A4CC                     l1713:
 21994  00A4CC  AE04               	btfss	___aldiv@dividend+3,7,c
 21995  00A4CE  D00A               	goto	l1714
 21996  00A4D0  1E04               	comf	___aldiv@dividend+3,f,c
 21997  00A4D2  1E03               	comf	___aldiv@dividend+2,f,c
 21998  00A4D4  1E02               	comf	___aldiv@dividend+1,f,c
 21999  00A4D6  6C01               	negf	___aldiv@dividend,c
 22000  00A4D8  0E00               	movlw	0
 22001  00A4DA  2202               	addwfc	___aldiv@dividend+1,f,c
 22002  00A4DC  2203               	addwfc	___aldiv@dividend+2,f,c
 22003  00A4DE  2204               	addwfc	___aldiv@dividend+3,f,c
 22004  00A4E0  0E01               	movlw	1
 22005  00A4E2  1A0A               	xorwf	___aldiv@sign,f,c
 22006  00A4E4                     l1714:
 22007  00A4E4  0E00               	movlw	0
 22008  00A4E6  6E0B               	movwf	___aldiv@quotient,c
 22009  00A4E8  0E00               	movlw	0
 22010  00A4EA  6E0C               	movwf	___aldiv@quotient+1,c
 22011  00A4EC  0E00               	movlw	0
 22012  00A4EE  6E0D               	movwf	___aldiv@quotient+2,c
 22013  00A4F0  0E00               	movlw	0
 22014  00A4F2  6E0E               	movwf	___aldiv@quotient+3,c
 22015  00A4F4  5005               	movf	___aldiv@divisor,w,c
 22016  00A4F6  1006               	iorwf	___aldiv@divisor+1,w,c
 22017  00A4F8  1007               	iorwf	___aldiv@divisor+2,w,c
 22018  00A4FA  1008               	iorwf	___aldiv@divisor+3,w,c
 22019  00A4FC  B4D8               	btfsc	status,2,c
 22020  00A4FE  D02A               	goto	l1721
 22021  00A500  0E01               	movlw	1
 22022  00A502  6E09               	movwf	___aldiv@counter,c
 22023  00A504  D006               	goto	l1716
 22024  00A506  90D8               	bcf	status,0,c
 22025  00A508  3605               	rlcf	___aldiv@divisor,f,c
 22026  00A50A  3606               	rlcf	___aldiv@divisor+1,f,c
 22027  00A50C  3607               	rlcf	___aldiv@divisor+2,f,c
 22028  00A50E  3608               	rlcf	___aldiv@divisor+3,f,c
 22029  00A510  2A09               	incf	___aldiv@counter,f,c
 22030  00A512                     l1716:
 22031  00A512  AE08               	btfss	___aldiv@divisor+3,7,c
 22032  00A514  D7F8               	goto	l1717
 22033  00A516                     u13450:
 22034  00A516  90D8               	bcf	status,0,c
 22035  00A518  360B               	rlcf	___aldiv@quotient,f,c
 22036  00A51A  360C               	rlcf	___aldiv@quotient+1,f,c
 22037  00A51C  360D               	rlcf	___aldiv@quotient+2,f,c
 22038  00A51E  360E               	rlcf	___aldiv@quotient+3,f,c
 22039  00A520  5005               	movf	___aldiv@divisor,w,c
 22040  00A522  5C01               	subwf	___aldiv@dividend,w,c
 22041  00A524  5006               	movf	___aldiv@divisor+1,w,c
 22042  00A526  5802               	subwfb	___aldiv@dividend+1,w,c
 22043  00A528  5007               	movf	___aldiv@divisor+2,w,c
 22044  00A52A  5803               	subwfb	___aldiv@dividend+2,w,c
 22045  00A52C  5008               	movf	___aldiv@divisor+3,w,c
 22046  00A52E  5804               	subwfb	___aldiv@dividend+3,w,c
 22047  00A530  A0D8               	btfss	status,0,c
 22048  00A532  D009               	goto	l1720
 22049  00A534  5005               	movf	___aldiv@divisor,w,c
 22050  00A536  5E01               	subwf	___aldiv@dividend,f,c
 22051  00A538  5006               	movf	___aldiv@divisor+1,w,c
 22052  00A53A  5A02               	subwfb	___aldiv@dividend+1,f,c
 22053  00A53C  5007               	movf	___aldiv@divisor+2,w,c
 22054  00A53E  5A03               	subwfb	___aldiv@dividend+2,f,c
 22055  00A540  5008               	movf	___aldiv@divisor+3,w,c
 22056  00A542  5A04               	subwfb	___aldiv@dividend+3,f,c
 22057  00A544  800B               	bsf	___aldiv@quotient,0,c
 22058  00A546                     l1720:
 22059  00A546  90D8               	bcf	status,0,c
 22060  00A548  3208               	rrcf	___aldiv@divisor+3,f,c
 22061  00A54A  3207               	rrcf	___aldiv@divisor+2,f,c
 22062  00A54C  3206               	rrcf	___aldiv@divisor+1,f,c
 22063  00A54E  3205               	rrcf	___aldiv@divisor,f,c
 22064  00A550  2E09               	decfsz	___aldiv@counter,f,c
 22065  00A552  D7E1               	goto	u13450
 22066  00A554                     l1721:
 22067  00A554  500A               	movf	___aldiv@sign,w,c
 22068  00A556  B4D8               	btfsc	status,2,c
 22069  00A558  D008               	goto	l1722
 22070  00A55A  1E0E               	comf	___aldiv@quotient+3,f,c
 22071  00A55C  1E0D               	comf	___aldiv@quotient+2,f,c
 22072  00A55E  1E0C               	comf	___aldiv@quotient+1,f,c
 22073  00A560  6C0B               	negf	___aldiv@quotient,c
 22074  00A562  0E00               	movlw	0
 22075  00A564  220C               	addwfc	___aldiv@quotient+1,f,c
 22076  00A566  220D               	addwfc	___aldiv@quotient+2,f,c
 22077  00A568  220E               	addwfc	___aldiv@quotient+3,f,c
 22078  00A56A                     l1722:
 22079  00A56A  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 22080  00A56E  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 22081  00A572  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 22082  00A576  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 22083  00A57A  0012               	return	
 22084  00A57C                     __end_of___aldiv:
 22085                           	opt stack 0
 22086                           tblptru	equ	0xFF8
 22087                           tblptrh	equ	0xFF7
 22088                           tblptrl	equ	0xFF6
 22089                           tablat	equ	0xFF5
 22090                           prodh	equ	0xFF4
 22091                           prodl	equ	0xFF3
 22092                           intcon	equ	0xFF2
 22093                           postinc0	equ	0xFEE
 22094                           wreg	equ	0xFE8
 22095                           postinc1	equ	0xFE6
 22096                           postdec1	equ	0xFE5
 22097                           plusw1	equ	0xFE3
 22098                           fsr1h	equ	0xFE2
 22099                           fsr1l	equ	0xFE1
 22100                           indf2	equ	0xFDF
 22101                           postinc2	equ	0xFDE
 22102                           postdec2	equ	0xFDD
 22103                           plusw2	equ	0xFDB
 22104                           fsr2h	equ	0xFDA
 22105                           fsr2l	equ	0xFD9
 22106                           status	equ	0xFD8
 22107                           tblptru	equ	0xFF8
 22108                           tblptrh	equ	0xFF7
 22109                           tblptrl	equ	0xFF6
 22110                           tablat	equ	0xFF5
 22111                           prodh	equ	0xFF4
 22112                           prodl	equ	0xFF3
 22113                           intcon	equ	0xFF2
 22114                           postinc0	equ	0xFEE
 22115                           wreg	equ	0xFE8
 22116                           postinc1	equ	0xFE6
 22117                           postdec1	equ	0xFE5
 22118                           plusw1	equ	0xFE3
 22119                           fsr1h	equ	0xFE2
 22120                           fsr1l	equ	0xFE1
 22121                           indf2	equ	0xFDF
 22122                           postinc2	equ	0xFDE
 22123                           postdec2	equ	0xFDD
 22124                           plusw2	equ	0xFDB
 22125                           fsr2h	equ	0xFDA
 22126                           fsr2l	equ	0xFD9
 22127                           status	equ	0xFD8
 22128                           
 22129                           	psect	rparam
 22130  0000                     tblptru	equ	0xFF8
 22131                           tblptrh	equ	0xFF7
 22132                           tblptrl	equ	0xFF6
 22133                           tablat	equ	0xFF5
 22134                           prodh	equ	0xFF4
 22135                           prodl	equ	0xFF3
 22136                           intcon	equ	0xFF2
 22137                           postinc0	equ	0xFEE
 22138                           wreg	equ	0xFE8
 22139                           postinc1	equ	0xFE6
 22140                           postdec1	equ	0xFE5
 22141                           plusw1	equ	0xFE3
 22142                           fsr1h	equ	0xFE2
 22143                           fsr1l	equ	0xFE1
 22144                           indf2	equ	0xFDF
 22145                           postinc2	equ	0xFDE
 22146                           postdec2	equ	0xFDD
 22147                           plusw2	equ	0xFDB
 22148                           fsr2h	equ	0xFDA
 22149                           fsr2l	equ	0xFD9
 22150                           status	equ	0xFD8


Data Sizes:
    Strings     920
    Constant    65
    Data        72
    BSS         240
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     121
    BANK0           128     80     122
    BANK1           256    138     254
    BANK2           256      0     142
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    standbyMode$2391	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    standbyMode$2390	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    displayLogs$2389	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    displayLogs$2388	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    mainOperation$2387	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), 
		 -> STR_59(CODE[5]), STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), 
		 -> STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), 
		 -> STR_51(CODE[4]), STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), 
		 -> STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), STR_33(CODE[5]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[7]), STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), 
		 -> STR_68(CODE[3]), STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), 
		 -> STR_64(CODE[2]), STR_63(CODE[2]), STR_62(CODE[5]), STR_61(CODE[5]), 
		 -> STR_60(CODE[5]), STR_59(CODE[5]), STR_58(CODE[5]), STR_57(CODE[4]), 
		 -> STR_56(CODE[4]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), 
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[3]), STR_49(CODE[3]), 
		 -> STR_48(CODE[3]), STR_47(CODE[2]), STR_46(CODE[2]), STR_45(CODE[2]), 
		 -> STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_152(CODE[11]), STR_151(CODE[13]), STR_150(CODE[11]), STR_149(CODE[13]), 
		 -> STR_148(CODE[11]), STR_147(CODE[15]), STR_146(CODE[15]), STR_145(CODE[5]), 
		 -> STR_144(CODE[11]), STR_143(CODE[8]), STR_142(CODE[11]), STR_141(CODE[14]), 
		 -> STR_140(CODE[17]), STR_139(CODE[8]), STR_138(CODE[15]), STR_137(CODE[16]), 
		 -> STR_136(CODE[10]), STR_135(CODE[8]), STR_134(CODE[15]), STR_133(CODE[16]), 
		 -> STR_132(CODE[10]), STR_131(CODE[16]), STR_130(CODE[16]), STR_129(CODE[17]), 
		 -> STR_128(CODE[13]), STR_127(CODE[17]), STR_126(CODE[14]), STR_125(CODE[11]), 
		 -> STR_124(CODE[11]), STR_123(CODE[15]), STR_122(CODE[15]), STR_121(CODE[10]), 
		 -> STR_120(CODE[13]), STR_119(CODE[16]), STR_118(CODE[16]), STR_117(CODE[17]), 
		 -> STR_116(CODE[17]), STR_115(CODE[8]), STR_114(CODE[15]), STR_113(CODE[15]), 
		 -> STR_112(CODE[11]), STR_111(CODE[14]), STR_110(CODE[16]), STR_109(CODE[16]), 
		 -> STR_108(CODE[11]), STR_107(CODE[14]), STR_106(CODE[16]), STR_105(CODE[16]), 
		 -> STR_104(CODE[16]), STR_103(CODE[13]), STR_102(CODE[5]), STR_101(CODE[11]), 
		 -> STR_100(CODE[15]), STR_99(CODE[17]), STR_98(CODE[18]), STR_97(CODE[15]), 
		 -> STR_96(CODE[11]), STR_95(CODE[7]), STR_94(CODE[3]), STR_93(CODE[16]), 
		 -> STR_92(CODE[8]), STR_91(CODE[16]), STR_90(CODE[15]), STR_89(CODE[6]), 
		 -> STR_88(CODE[14]), STR_87(CODE[17]), STR_86(CODE[7]), STR_85(CODE[9]), 
		 -> STR_84(CODE[17]), STR_83(CODE[11]), STR_82(CODE[17]), STR_81(CODE[14]), 
		 -> STR_80(CODE[17]), STR_79(CODE[11]), STR_78(CODE[15]), STR_77(CODE[11]), 
		 -> STR_76(CODE[8]), STR_44(CODE[11]), STR_43(CODE[16]), STR_42(CODE[4]), 
		 -> STR_41(CODE[13]), STR_40(CODE[10]), STR_39(CODE[10]), STR_38(CODE[15]), 
		 -> STR_37(CODE[9]), STR_36(CODE[9]), STR_35(CODE[10]), STR_34(CODE[10]), 
		 -> STR_2(CODE[16]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 1
		 -> drawerClose(COMRAM[1]), drawerOpen(COMRAM[1]), drawerDown(BANK0[1]), drawerUp(BANK0[1]), 
		 -> columnRight(COMRAM[1]), columnLeft(COMRAM[1]), rowDown(COMRAM[1]), rowUp(COMRAM[1]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK1[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    findDrawerIndex@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@sortedDrawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@sortedDrawerTable(BANK0[16]), 

    getUserInputs@foodTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@foodTable(BANK0[16]), 

    getUserInputs@dietTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@dietTable(BANK0[16]), 

    getUserInputs@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_75(CODE[5]), STR_74(CODE[4]), STR_73(CODE[4]), STR_72(CODE[4]), 
		 -> STR_71(CODE[4]), STR_70(CODE[3]), STR_69(CODE[3]), STR_68(CODE[3]), 
		 -> STR_67(CODE[3]), STR_66(CODE[3]), STR_65(CODE[2]), STR_64(CODE[2]), 
		 -> STR_63(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_62(CODE[5]), STR_61(CODE[5]), STR_60(CODE[5]), STR_59(CODE[5]), 
		 -> STR_58(CODE[5]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[3]), STR_49(CODE[3]), STR_48(CODE[3]), STR_47(CODE[2]), 
		 -> STR_46(CODE[2]), STR_45(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_sortDrawerList
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _moveVertically->_verticalStepper
    _moveHorizontally->_horizontalStepper
    _initArm->_horizontalStepper
    _initArm->_verticalStepper
    _verticalStepper->_uartTransmitBlocking
    _horizontalStepper->_uartTransmitBlocking
    _getUserInputs->___wmul
    _distributePieces->_distributeFlat
    _distributePieces->_distributeLong
    _distributePieces->_distributeRound
    _distributeRound->___wmul
    _distributeLong->___wmul
    _distributeFlat->___wmul
    _configDrawer->_uartTransmitBlocking
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_mainOperation

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  184326
                                             99 COMRAM    10    10      0
                          _UART_Init
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        144   142      2  106496
                                             93 COMRAM     6     4      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   14229
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   32989
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   19148
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   17124
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   15582
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                       82    82      0   62385
                                             56 COMRAM     2     2      0
                                              0 BANK0     80    80      0
                       _configDrawer
                   _distributePieces
                    _findDrawerIndex
                      _getFlatPieces
                      _getLongPieces
                     _getRoundPieces
                      _getUserInputs
                            _initArm
                            _lcdInst
                   _moveHorizontally
                     _moveVertically
                             _printf
                     _sortDrawerList
                           _trapDoor
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _trapDoor                                             6     4      2     197
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      56    52      4    5015
                                              0 COMRAM    56    52      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   12996
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _moveVertically                                       4     0      4    4867
                                             11 COMRAM     4     0      4
                    _verticalStepper
 ---------------------------------------------------------------------------------
 (2) _moveHorizontally                                     6     2      4    5487
                                             11 COMRAM     6     2      4
                  _horizontalStepper
 ---------------------------------------------------------------------------------
 (2) _initArm                                              2     0      2    8920
                                             11 COMRAM     2     0      2
                  _horizontalStepper
                    _verticalStepper
 ---------------------------------------------------------------------------------
 (3) _verticalStepper                                      6     2      4    3419
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (3) _horizontalStepper                                    6     2      4    4787
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       18    12      6    4351
                                              6 COMRAM    18    12      6
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getRoundPieces                                       8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getLongPieces                                        8     4      4     980
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getFlatPieces                                        8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _findDrawerIndex                                     10     6      4     311
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _distributePieces                                     8     2      6   11908
                                             11 COMRAM     8     2      6
                     _distributeFlat
                     _distributeLong
                    _distributeRound
 ---------------------------------------------------------------------------------
 (3) _distributeRound                                      5     3      2    3846
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _distributeLong                                       5     3      2    3922
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _distributeFlat                                       5     3      2    3846
                                              6 COMRAM     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3647
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _configDrawer                                         2     0      2    2262
                                              5 COMRAM     2     0      2
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _uartTransmitBlocking                                 5     2      3    1914
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _configDrawer
       _uartTransmitBlocking
     _distributePieces
       _distributeFlat
         ___wmul
       _distributeLong
         ___wmul
       _distributeRound
         ___wmul
     _findDrawerIndex
     _getFlatPieces
     _getLongPieces
     _getRoundPieces
     _getUserInputs
       ___wmul
       _readEEPROM
     _initArm
       _horizontalStepper
         _uartTransmitBlocking
       _verticalStepper
         _uartTransmitBlocking
     _lcdInst
       _lcdNibble
     _moveHorizontally
       _horizontalStepper
         _uartTransmitBlocking
     _moveVertically
       _verticalStepper
         _uartTransmitBlocking
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
     _trapDoor
     _uartTransmitBlocking
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      8E       9       55.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     8A      FE       7       99.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     50      7A       5       95.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27F      34        0.0%
DATA                 0      0     27F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 28 17:13:42 2018

                     _standbyMode ED50            __end_of_verifyKeypress 9CC4  
                    ?_displayLogs 0029                                l83 ADE2  
                     __CFG_CPD$ON 000000               ___wmul@multiplicand 0003  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l201 E8C0  
                             l202 E812                               l211 E9EC  
                             l203 E8B0                               l212 E93E  
                             l204 E81C                               l221 EAC4  
                             l213 E9DC                               l205 E8AC  
                             l150 AA6C                               l222 EA16  
                             l214 E948                               l311 AC36  
                             l231 EBEE                               l223 EAB4  
                             l215 E9D8                               l144 A9A6  
                             l232 EB40                               l224 EA20  
                             l313 AC48                               l241 EC86  
                             l233 EBDE                               l225 EAB0  
                             l242 EC4A                               l234 EB4A  
                             l323 AF00                               l147 A9C6  
                             l235 EBDA                               l163 E32E  
                             l324 AE0A                               l260 AB9C  
                             l500 BD7A                               l244 ECE0  
                             l180 E674                               l253 9D9A  
                             l325 AE1A                               l405 B29C  
                             l261 ABAC                               l245 EC9C  
                             l181 E5C6                               l173 E512  
                             l165 E3CE                               l254 9DD2  
                             l334 AE48                               l270 ABD4  
                             l238 EC34                               l190 E694  
                             l182 E664                               l255 9DC2  
                             l351 AE8A                               l319 AC54  
                             l247 ED42                               l239 EC04  
                             l191 E724                               l183 E5D0  
                             l352 AE94                               l328 AF5C  
                             l424 B2F6                               l416 B2C8  
                             l264 ACB8                               l512 BEB0  
                             l504 BDC4                               l248 ECF6  
                             l184 E660                               l337 AE4E  
                             l329 AE2A                               l273 ABD8  
                             l265 ABB0                               l177 E5B2  
                             l169 E470                               l610 A216  
                             l338 AE5E                               l266 ABC0  
                             l194 E7FC                               l603 A1DA  
                             l363 AEC2                               l355 AE98  
                             l347 AE7E                               l451 B356  
                             l435 B31C                               l427 B2FA  
                             l419 B2D8                               l259 AC5C  
                             l291 AC10                               l283 AC02  
                             l515 BE66                               l195 E74E  
                             l187 E738                               l604 A176  
                             l620 B01C                               l364 AECC  
                             l196 E7EC                               l188 E68A  
                             l621 AFD2                               l381 AEF4  
                             l461 9E88                               l541 B1D8  
                             l533 B196                               l197 E758  
                             l189 E728                               l462 9E7A  
                             l550 BAD0                               l534 B126  
                             l198 E7E8                               l710 D7C2  
                             l623 AFF6                               l615 AFB2  
                             l383 AEF8                               l367 AED0  
                             l455 B364                               l439 B328  
                             l295 AC14                               l463 9E66  
                             l543 B210                               l616 AF68  
                             l480 9E2A                               l536 B15E  
                             l800 E170                               l609 A27A  
                             l625 B0AE                               l377 AEF0  
                             l457 B368                               l449 B352  
                             l473 9E18                               l553 BA90  
                             l721 D84E                               l713 E24E  
                             l626 B03C                               l618 AF8C  
                             l394 B3D2                               l474 9E0A  
                             l562 BB2C                               l714 D7E0  
                             l387 B370                               l395 B266  
                             l475 9DF6                               l467 9EAE  
                             l571 BBC8                               l555 BAB0  
                             l491 BF22                               l651 D188  
                             l715 D7FA                               l628 B062  
                             l396 B278                               l388 B252  
                             l468 9E9A                               l580 BC64  
                             l564 BB4C                               l492 BDF4  
                             l708 E1C6                               l732 D930  
                             l724 D86C                               l629 B088  
                             l573 BBE8                               l637 9CF2  
                             l653 D6D2                               l733 D95E  
                             l725 D89A                               l709 D7A8  
                             l398 B28A                               l582 BC84  
                             l654 D2D2                               l742 DA20  
                             l718 D818                               l806 A772  
                             l591 9B3A                               l479 9E3E  
                             l559 BB6C                               l495 BD30  
                             l639 9D18                               l743 DA4C  
                             l735 D98E                               l727 D8CA  
                             l719 D832                               l568 BC08  
                             l760 DC0A                               l752 DB06  
                             l912 A862                               l808 A834  
                             l761 DC4A                               l753 DB46  
                             l745 DA7A                               l737 D9BE  
                             l729 D8FA                               l841 A682  
                             l809 A758                               l842 A668  
                             l834 A762                               l747 DAA8  
                             l739 D9EC                               l843 A744  
                             l931 C0DA                               l923 BFA8  
                             l780 DE98                               l772 DD92  
                             l764 DC8C                               l756 DB88  
                             l844 A670                               l916 9CA8  
                             l597 A31A                               l781 DED8  
                             l773 DDD2                               l765 DCCC  
                             l757 DBC8                               l749 DAD6  
                             l837 A76A                               l917 9C8E  
                             l598 A2B6                               l918 9CA4  
                             l942 C150                               l926 C054  
                             l775 DE14                               l767 DD0E  
                             l951 B812                               l943 C15C  
                             l792 E020                               l784 DF1A  
                             l872 A67A                               l960 B84E  
                             l936 C0E6                               l928 C04E  
                             l785 DF5A                               l777 DE56  
                             l769 DD50                               l881 A848  
                             l794 E074                               l970 B8BC  
                             l962 B876                               l787 DF9C  
                             l947 C1F6                               l796 E0C8  
                             l876 A86A                               l956 B83A  
                             l789 DFDE                               l885 A850  
                             l798 E11C                               l878 A94A  
                             l990 B9CA                               l982 B95C  
                             l974 B8E4                               l966 B89E  
                             l888 A858                               l994 B9FC  
                             l986 B9A2                               l978 B90C  
                             l998 BA38                      __CFG_CPB$OFF 000000  
      findDrawerIndex@drawerTable 0001                               wreg 000FE8  
    uartTransmitBlocking@numBytes 0003                     _mainOperation D0AC  
          mainOperation@dietTable 0090               distributeFlat@count 0007  
                    __CFG_LVP$OFF 000000               standbyMode@dietType 0130  
                    __CFG_WDT$OFF 000000                              l1010 CDAC  
                            l1020 CEE0                              l1012 CDF0  
                            l1101 C680                              l1005 CCA4  
                            l1014 CE34                              l1111 C748  
                            l1023 CF1E                              l1015 CE78  
                            l1104 C798                              l1040 A426  
                            l1032 D094                              l1008 CD3C  
                            l1121 C7FC                              l1041 A3FC  
                            l1025 CF3A                              l1201 B61C  
                            l1106 C69E                              l1042 A4A6  
                            l1131 C8D8                              l1123 C826  
                            l1035 D0A0                              l1211 B646  
                            l1108 C700                              l1060 A41E  
                            l1300 F65E                              l2013 9F68  
                            l1141 C9BE                              l1133 C906  
                            l1125 C852                              l1117 C7A8  
                            l1029 D03A                              l1213 B778  
                            l2014 9F5C                              l1046 A406  
                            l1206 B628                              l1151 CAAC  
                            l1143 C9EC                              l1135 C934  
                            l1127 C87E                              l1119 C7D2  
                            l1055 A416                              l1311 F99C  
                            l1160 AB88                              l1048 A40E  
                            l1072 B45E                              l1232 B7CE  
                            l1216 B732                              l1320 FBC8  
                            l1304 F6AA                              l2017 9F9C  
                            l1161 AA80                              l1153 CADE  
                            l1145 CA1C                              l1137 C962  
                            l1129 C8AA                              l1209 B7BA  
                            l1217 B700                              l1305 F6E4  
                            l2018 9FAA                              l1170 AAC8  
                            l1162 AA88                              l1154 CB32  
                            l1314 FAF8                              l1306 F804  
                            l1250 EEAE                              l1171 AAD0  
                            l1163 AA90                              l1147 CA4C  
                            l1139 C990                              l1075 B54A  
                            l1067 B452                              l1227 B774  
                            l1315 FA48                              l1172 AAD8  
                            l1164 AA98                              l1260 FB02  
                            l1173 AAE0                              l1165 AAA0  
                            l1149 CA7C                              l1077 B47C  
                            l1325 FB6C                              l1309 F8B2  
                            l1502 A14A                              l2070 9C5E  
                            l1158 AB0A                              l1174 AAE8  
                            l1166 AAA8                              l1086 B55C  
                            l1182 A5F2                              l1190 A5AE  
                            l1318 FA8C                              l1262 F4F2  
                            l1503 A104                              l2071 9C68  
                            l1175 AAF0                              l1167 AAB0  
                            l1159 AA78                              l1079 B4E8  
                            l1191 A5B6                              l1183 A57E  
                            l1271 F1E8                              l1255 F11A  
                            l2080 9BC0                              l1600 C278  
                            l1176 AAF8                              l1168 AAB8  
                            l1096 C674                              l1192 A5BE  
                            l1184 A654                              l1280 F35E  
                            l1264 F1A0                              l1345 9B18  
                            l2081 9BCA                              l1177 AB00  
                            l1169 AAC0                              l1097 C674  
                            l1089 B5CC                              l1193 A5C6  
                            l1185 A586                              l1273 F4E4  
                            l1281 F300      __end_of_uartTransmitBlocking A164  
                            l2066 9C3E                              l1602 C394  
                            l1610 C306                              l1194 A5CE  
                            l1186 A58E                              l1290 F7F0  
                            l1282 F352                              l1258 F128  
                            l2067 9C36                              l1611 C314  
                            l1195 A5D6                              l1187 A596  
                            l1275 F22E                              l2076 9BA8  
                            l1620 C36C                              l1612 C310  
                            l1196 A5DE                              l1188 A59E  
                            l1268 F1DA                              l2077 9BA0  
                            l1197 A5E8                              l1189 A5A6  
                            l1293 F532                              l1614 C34A  
                            l1286 F39E                              l1631 C48E  
                            l1623 C3F8                              l1607 C3CA  
                            l1367 A3F0                              l1287 F3D8  
                            l1279 F28C                              l1720 A546  
                            l1640 C4EA                              l1632 C448  
                            l1616 C35A                              l1608 C2DA  
                            l1721 A554                              l1713 A4CC  
                            l1617 C354                              l1609 C2DE  
                            l1297 F598                              l1289 F4EC  
                            l1722 A56A                              l1714 A4E4  
                            l1626 C47E                              l1298 F66A  
                            l1651 C5D0                              l1627 C412  
                            l1619 C382                              l1299 F60C  
                            l1716 A512                              l1652 C534  
                            l1636 C4A8                              l1717 A506  
                            l1653 C5E0                              l1637 C4CC  
                            l1654 C57E                              l1638 C4D4  
                            l1639 C500                              l1591 C222  
                            l1648 C52E                              l1592 C232  
                            l1649 C5E6                              l1594 C246  
                            l1595 C240                              l7030 C44C  
                            l7016 C416                              l1987 9A7E  
                            l7124 A104                              l8022 E5BC  
                            l8216 9DC2                              l7098 9A42  
                            l7618 9CA4                              l7762 D048  
                            _ADON 007E10                              l7918 A9CE  
                            l6990 C36C                              l7858 9AF8  
                            l6986 C354                              l7954 E2D8  
                            l7964 E316                              l9628 C742  
                            STR_1 FF97                              STR_2 FDA0  
                            STR_3 FFFC                              STR_9 FFE6  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                    ??_configDrawer 0008  
                            u7200 9C42                              _RCIE 007CED  
                            _RCIF 007CF5                              u7230 9BAC  
                            u9000 D03E                              u9010 D048  
                            u7155 9EF6                              u7156 9EF8  
                            u7165 9F36                              u7166 9F38  
                            u7510 C5EE                              u9120 A99C  
                            u9200 E316                              u9210 E32C  
                            u7550 A10C                              u9151 E272  
                            u7560 A118                              u7552 A10E  
                            u7480 C508                              u9161 E28C  
                            u7562 A11A                              u7490 C51C  
                            u9330 E4E0                              u9250 E39C  
                            u9090 9F6C                              u9171 E2A6  
                            u9181 E2C0                              u7575 A146  
                            u7576 A148                              u9600 EAD0  
                            u9520 E934                              u9370 E582  
                            u9290 E43E                              u9620 EB36  
                            u9380 E5BC                              u9550 E9F8  
                            u9720 9DD2                              u9730 ABA4  
                            u9650 EBFA                              u9570 EA0C  
                            u8980 CF38                              _UART 006E  
                            u9980 AC40                              _TRMT 007D61  
                            _TXIE 007CEC                              _TXIF 007CF4  
           __end_of_decode_drawer A65E                   ??_getUserInputs 000D  
             standbyMode@foodType 0140                 viewLogs@logNumber 005C  
      horizontalStepper@direction 0008                              _main ACC2  
                            _keys FC25                   food_press@F3117 00D0  
                            _uart 01F2                              fsr1h 000FE2  
                            fsr2h 000FDA                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   get_digits@sum 0001                              prodh 000FF4  
                            prodl 000FF3            mainOperation@foodTable 00A0  
                            start 0000                     __CFG_IESO$OFF 000000  
               viewLogs@keypress2 005D                  _moveHorizontally B0D4  
             standbyMode@keypress 016B                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                       _writeEEPROM 9AF6  
                 diet_press@F3132 01EA                   ?_verifyKeypress 0001  
                __end_of_LCD_LEFT FC61               standbyMode@whichKey 0169  
                 food_press@count 0035                   food_press@tally 002F  
           I2C_Master_Read@ackBit 0002                  ?_I2C_Master_Init 000E  
                ?_I2C_Master_Read 0001                  ??_getRoundPieces 0005  
                ?_I2C_Master_Wait 0001                  ?_I2C_Master_Stop 0001  
                           l10060 A3C4                             l10036 A35C  
                           l10046 A388                             l10048 A390  
                           l10058 A3BC                             l10156 9ABA  
                           l10260 EFA8                             l10270 EFD0  
                           l10370 F28C                             l10374 F292  
                           l10358 F236                             l10480 F59E  
                           l10464 F542                             l10476 F598  
                           l10638 FAF8                             l10834 D6DE  
                           l10598 F9A8                   __end_of___aldiv A57C  
              writeEEPROM@address 0002                             ?_main 0001  
                           _EEADR 000FA9                             STR_10 FFEE  
                           STR_11 FFE2                             STR_12 FFEA  
                           STR_20 FFCC                             STR_30 FFDE  
                           STR_31 FFDA                             STR_40 FF48  
                           STR_32 FFD6                             STR_16 FFC2  
                           STR_17 FFBD                             STR_33 FFB8  
                           STR_41 FECF                             STR_26 FFF9  
                           STR_42 FFF2                             STR_18 FFC7  
                           STR_34 FF52                             STR_50 FFBF  
                           STR_19 FFD1                             STR_35 FF48  
                           STR_43 FD90                             STR_51 FFE6  
                           STR_28 FFF6                             STR_36 FF6E  
                           STR_44 FF29                             STR_60 FFC7  
                           STR_52 FFEE                             STR_37 FF65  
                           STR_61 FFD1                             STR_53 FFE2  
                           STR_45 FFFC                             STR_38 FE46  
                           STR_70 FFF6                             STR_62 FFCC  
                           STR_54 FFEA                             STR_46 FFE4  
                           STR_39 FF52                             STR_71 FFB9  
                           STR_63 FFBB                             STR_55 FFC3  
                           STR_47 FFC0                             STR_80 FCDE  
                           STR_72 FFDE                             STR_64 FFE0  
                           STR_56 FFBE                             STR_48 FFE7  
                           STR_81 FE7F                             STR_73 FFDA  
                           STR_65 FFFA                             STR_57 FFC8  
                           STR_49 FFEF                             STR_90 FDFB  
                           STR_82 FCEF                             STR_74 FFD6  
                           STR_66 FFBA                             STR_58 FFC2  
                           STR_83 FEE7                             STR_91 FD30  
                           STR_75 FFB8                             STR_67 FFDF  
                           STR_59 FFBD                             STR_76 FF8F  
                           STR_92 FF87                             STR_84 FCBC  
                           STR_68 FFF9                             STR_85 FF5C  
                           STR_77 FEE7                             STR_93 FD40  
                           STR_69 FFDB                             STR_94 FDF8  
                           STR_86 FFA6                             STR_78 FDDD  
                           STR_79 FEE7                             STR_95 FDF4  
                           STR_87 FCDE                             STR_88 FE7F  
                           STR_96 FDF0                             STR_89 FFAD  
                           STR_97 FDEC                             STR_98 FC66  
                           STR_99 FCCD                   __end_of___lldiv 9FBC  
                           u10020 AE12                             u10030 AE22  
               viewLogs@returnVal 0058                             u11030 BED8  
                           u10340 B270                             u11220 BA70  
                           u10350 B282                             u11070 BF00  
                           u12030 B9F2                             u10360 B294  
                           u12211 C664                             u11430 BC30  
                           u10710 BCE6                             u11360 BB94  
                           u12160 B490                             u12080 BA2E  
                           u14001 D10A                             u11290 BAF8  
                           u14011 D11C                             u12091 B426  
                           u11620 C1FA                             u13300 B748  
                           u14021 D12E                             u10910 BE1C  
                           u10830 BDA2                             u10750 BD0E  
                           u14030 D186                             u13310 B770  
                           u11800 B8DA                             u11720 B86C  
                           u12290 C71C                             u11650 B808  
                           u13170 B692                             u11900 B952  
                           u13260 B6D8                             u10950 BE44  
                           u10870 BDEA                             u10790 BD58  
                           u14070 D6DE                             u11830 B902  
                           u11750 B894                             u11590 C106  
                           u15007 CF10                             u13511 ED5A  
                           u11680 B830                             u13345 9D54  
                           u15017 CF46                             u13521 ED6C  
                           u13450 A516                             u11770 B8B2  
                           u13370 A388                             u13355 9AA2  
                           u15107 C6B2                             u15027 D02C  
                           u13531 ED7E                             u14307 ADD4  
                           u13356 9AA4                             u13620 F138  
                           u15117 CAEA                             u15037 D054  
                           u14317 EE46                             u13541 ED90  
                           u10990 BE8E                             u13390 A3BC  
                           u13630 F140                             u15207 D43C  
                           u15127 CB1C                             u15047 D086  
                           u14407 F0A6                             u14327 EE6C  
                           u13551 EDA2                             u11960 B998  
                           u13720 F292                             u13640 F14C  
                           u15217 D51C                             u15137 D202  
                           u15057 B3E8                             u14417 F0D8  
                           u14337 EE86                             u13561 EDB4  
                           u15307 D6F6                             u15227 D554  
                           u15147 D250                             u15067 B4FC  
                           u14507 F344                             u14427 F0F2  
                           u14347 EEBE                             u13900 F9A8  
                           u13820 F59E                             u13485 9FDE  
                           u15317 D728                             u15237 D588  
                           u15157 D2EC                             u15077 B58C  
                           u14517 F36A                             u14437 F158  
                           u14357 EEF6                             u11990 B9C0  
                           u13670 F1F6                             u13590 EFD0  
                           u15407 B00C                             u15327 D74E  
                           u15247 D5AA                             u15167 D30E  
                           u15087 B5BE                             u14607 F85A  
                           u14527 F4FE                             u14447 F190  
                           u14367 EFEA                             u14287 ACFE  
                           u15417 B052                             u15337 D780  
                           u15257 D5D0                             u15177 D334  
                           u15097 C616                             u14617 F88C  
                           u14537 F5BA                             u14457 F1AC  
                           u14377 F01C                             u14297 ADB4  
                           u15507 A254                             u15427 B078  
                           u15347 9CE4                             u15267 D5F2  
                           u15187 D356                             u14707 FBD4  
                           u14627 F8D8                             u14547 F5F2  
                           u14467 F202                             u14387 F036  
                           u13940 FA2A                             u15517 A26C  
                           u15437 B09E                             u15357 9D0A  
                           u15277 D618                             u15197 D39E  
                           u14717 FC0C                             u14637 F990  
                           u14557 F618                             u14477 F2AE  
                           u14397 F08C                             u13950 FAF8  
                           u15607 9EDE                             u15527 A184  
                           u15447 A2C4                             u15367 9A60  
                           u15287 D630                             u14807 C060  
                           u14727 B5E8                             u14647 F9B4  
                           u14567 F650                             u14487 F2E6  
                           u13960 FB0A                             u13880 F8B0  
                           u15617 9EE8                             u15537 A19C  
                           u15457 A2DC                             u15377 AF7E  
                           u15297 D6C4                             u14817 C098  
                           u14737 B78C                             u14657 F9E6  
                           u14577 F676                             u14497 F30C  
                           u15627 9F1E                             u15547 A1B4  
                           u15467 A2F4                             u15387 AFA2  
                           u14907 CCEC                             u14827 C0B2  
                           u14747 BF5E                             u14667 FB38  
                           u14587 F810                             u15637 9F28  
                           u15557 A1CC                             u15477 A30C  
                           u15397 AFE8                             u14917 CD2E  
                           u14837 C166                             u14757 BF90  
                           u14677 FB5E                             u14597 F842  
                           u15567 A0F8                             u15487 A224  
                           u13991 D0F8                             u14927 CD4C  
                           u14847 C17E                             u14767 BFC2  
                           u14687 FB78                             u15577 9BDA  
                           u15497 A23C                             u14937 CD9E  
                           u14857 C19E                             u14777 BFF4  
                           u14697 FBB0                             u15587 9C0E  
                           u14947 CDE2                             u14867 C1B6  
                           u14787 C00E                             u15597 9A38  
                           u14957 CE26                             u14877 C1E8  
                           u14797 C040                             u14967 CE6A  
                           u14887 CC4C                             u14977 CE88  
                           u14897 CC96                   __end_of___lwdiv 9C72  
                           u14987 CED2                             u14997 CEF0  
                  _distributeFlat A164                   __end_of___lwmod 9BD4  
                           _RCREG 000FAE                    _distributeLong A204  
                           _SPBRG 000FAF                             _PORTB 000F81  
              sortDrawerList@temp 002F                             _TRISA 000F92  
                           _TRISB 000F93           mainOperation@flatPieces 00C6  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                    ?_mainOperation 0001  
                           _TXREG 000FAD                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                   __end_of_getFlat A74E  
                   __CFG_WRT3$OFF 000000                   diet_press@count 0033  
                 __end_of_lcdInst 9A40                   __end_of_getLong A954  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                __size_of_UART_Init 0084  
                     initEEPROM@i 0003                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                 __end_of_initLCD 9C20                    __CFG_EBTRB$OFF 000000  
            __size_of_decode_diet 0124                   __end_of_initArm BCA4  
                 __end_of_dpowers FC51                printFoodInput@food 0001  
                    displayLogs@i 0046                      displayLogs@n 0050  
                 __end_of_isdigit 9A86                             _input FC36  
                           _rowUp 0075                             _putch 9A54  
                           main@i 0066                             main@l 0068  
                           tablat 000FF5               distributeLong@count 0007  
            standbyMode@logNumber 017F                 _LCDinterruptState 0078  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8       I2C_Master_Read@receivedByte 0003  
            standbyMode@keypress1 0176                    __CFG_PBADEN$ON 000000  
                 standbyMode@diet 0180                   standbyMode@flat 016E  
                 standbyMode@food 0184        horizontalStepper@rotations 0006  
           getLongPieces@dietType 0001                   standbyMode@time 0160  
                 standbyMode@zero 0179                   _findDrawerIndex 9D7C  
          mainOperation@trueValue 00CC                   __initialization A040  
                    __end_of_main AE00                      __end_of_keys FC36  
                  _sortDrawerList E258             getLongPieces@foodType 0003  
                    standbyMode@i 0188                      standbyMode@n 017B  
                    standbyMode@x 017D           __size_of_moveVertically 0288  
                ??_printFoodInput 0003                    __CFG_OSC$HSPLL 000000  
          __end_of_distributeFlat A204            __end_of_distributeLong A2A4  
               __end_of_LCD_RIGHT FC62                  food_press@drawer 002B  
                          ??_main 0064                     __activetblptr 000003  
             sortDrawerList@F3100 00E0               sortDrawerList@F3103 00D8  
             sortDrawerList@F3094 00F0               sortDrawerList@F3097 00E8  
             food_press@backCheck 0031                 ?_I2C_Master_Start 0001  
               ?_I2C_Master_Write 0002         __size_of_distributePieces 016E  
                    ?_shiftEEPROM 0001                ??_I2C_Master_Start 0002  
         mainOperation@longPieces 00C8                            _ADCON0 000FC2  
                          _ADCON1 000FC1                ??_I2C_Master_Write 0004  
           standbyMode@flatPieces 0110                            STR_100 FDCE  
                          STR_101 FF08                            STR_110 FD50  
                          STR_102 FFB3                            STR_103 FEB5  
                          STR_111 FE63                            STR_112 FEFD  
                          STR_120 FEC2                            STR_104 FD80  
                          STR_121 FF34                            STR_113 FDBF  
                          STR_105 FD20                            STR_106 FD20  
                          STR_114 FDBF                            STR_122 FE19  
                          STR_130 FD60                            _ADRESH 000FC4  
                          STR_131 FD80                            STR_115 FF97  
                          STR_107 FE55                            STR_123 FE28  
                          STR_116 FCDE                            STR_132 FF3E  
                          STR_124 FF1E                            STR_108 FEFD  
                          STR_140 FCAB                            STR_125 FEDC  
                          STR_141 FE71                            STR_109 FD50  
                          STR_133 FD10                            STR_117 FC9A  
                          STR_150 FEF2                            STR_142 FF13  
                          STR_126 FE8D                            STR_134 FE37  
                          STR_118 FD70                            _ADRESL 000FC3  
                          STR_151 FE9B                            STR_127 FC9A  
                          STR_143 FF7F                            STR_135 FF77  
                          STR_119 FD00                            STR_152 FEF2  
                          STR_144 FF08                            STR_136 FF3E  
                          STR_128 FEA8                            STR_137 FD10  
                          STR_145 FFB3                            STR_153 FF9F  
                          STR_129 FC89                            STR_138 FE37  
                          STR_146 FE0A                            STR_154 FC78  
                          STR_139 FF77                            STR_147 FDB0  
                          STR_148 FEF2                            STR_149 FE9B  
                          _EEDATA 000FA8                            _EECON2 000FA7  
                          ?_putch 0001           mainOperation@nextDrawer 00C2  
                 _distributeRound A2A4                            _SSPADD 000FC8  
                          _TRISC6 007CA6                            _TRISC7 007CA7  
                          _SSPBUF 000FC9                  diet_press@drawer 0029  
       standbyMode@storedFoodType 0174            __end_of_sortDrawerList ED50  
                  __CFG_XINST$OFF 000000                  __end_of_getRound A83E  
                 _verticalStepper 9E4C                 __end_of_UART_Init A040  
                       ??___aldiv 0009                            ___wmul 9AD0  
                  __CFG_STVREN$ON 000000                         ??___lldiv 0009  
                       ??___lwdiv 0005                         ??___lwmod 000C  
          decode_diet@returnValue 0005              _uartTransmitBlocking A0CA  
                          clear_0 A09E                            clear_1 A0AA  
                          clear_2 A0B6                            _inputs 0250  
            __end_of_configDrawer 9B54                   ?_distributeFlat 0007  
                  _firstIteration 0076                         ??_getFlat 0003  
                 ?_distributeLong 0007                         ??_lcdInst 0003  
                          _printf C218                         ??_getLong 0003  
            __size_of_displayLogs 0570                   ??_mainOperation 0039  
             food_press@foodTable 0038                         ??_initLCD 0004  
                       ??_initArm 000E                   get_digits@count 0005  
           __end_of_getFlatPieces AF66                      __pdataCOMRAM 006E  
                       ??_isdigit 0001          getUserInputs@drawerTable 0007  
      moveHorizontally@nextDrawer 000E                      __mediumconst FC24  
                __end_of_viewLogs C218          mainOperation@drawerTable 0080  
                          tblptrh 000FF7                            tblptrl 000FF6  
                __end_of_trapDoor 9D20                            tblptru 000FF8  
                standbyMode@F3160 0210                  standbyMode@F3152 019A  
                standbyMode@F3162 0200                  standbyMode@F3154 018A  
                standbyMode@F3156 0230                  standbyMode@F3158 0220  
             decode_diet@dietType 0001        findDrawerIndex@returnValue 0007  
         __end_of_findDrawerIndex 9DDC             standbyMode@longPieces 0120  
                      __accesstop 0080           __end_of__initialization A0C4  
            which_drawer@keypress 0034                     ___rparam_used 000001  
                standbyMode@round 016C                   writeEEPROM@data 0001  
                 viewLogs@logView 005A            standbyMode@decodedDiet 0172  
                 ?_sortDrawerList 0001                      ?_standbyMode 005E  
            __end_of_happynewyear FC60                    __pcstackCOMRAM 0001  
                    __pidataBANK0 99F6                      __pidataBANK2 9B54  
                   __end_of_input FC47             ?_uartTransmitBlocking 0001  
                   __end_of_putch 9A68                __size_of_lcdNibble 007E  
                   check_food@sum 0001             configDrawer@direction 0006  
        __end_of_moveHorizontally B248         sortDrawerList@drawerTable 0001  
               food_press@dietSum 0029           __end_of_distributeRound A344  
           __end_of_getLongPieces B3DC                 food_press@isValid 0033  
                         ??_putch 0003                        __pbssBANK0 00D0  
                      __pbssBANK1 018A                        __pbssBANK2 0200  
                      _check_food D79C                 mainOperation@temp 00B0  
        getLongPieces@returnValue 0007           __end_of_verticalStepper 9EBC  
                ??_verifyKeypress 0003                      ?_writeEEPROM 0001  
                  _moveVertically BCA4                           ?___wmul 0001  
                      _diet_press C60A           displayLogs@drawerNumber 0044  
                         ?_printf 000D                        _arr_dataRX 0240  
                      _get_digits A3F2                  _distributePieces AF66  
            sortDrawerList@count1 0031              sortDrawerList@count2 002D  
            sortDrawerList@count3 0033              sortDrawerList@count4 002B  
                       ?_getRound 0001                           _SSPCON1 000FC6  
                         _SSPCON2 000FC5                        _drawerDown 00F8  
                         _SSPSTAT 000FC7                        _drawerOpen 0071  
            __size_of_shiftEEPROM 00AE                        _columnLeft 0073  
                      _foodInputs 0274                  ?_findDrawerIndex 0001  
                      _initEEPROM 9AAA                        _readEEPROM 9A40  
          standbyMode@drawerCount 0186             __end_of_getUserInputs AA6E  
            distributeRound@count 0007                        _food_press B3DC  
              horizontalStepper@i 000A                 __end_of_lcdNibble 9F3A  
                         __Hparam 0000            __end_of_moveVertically BF2C  
                         __Lparam 0000             __size_of_configDrawer 0034  
                       ?_viewLogs 0052                           ___aldiv A4B0  
          ??_uartTransmitBlocking 0004          displayLogs@operationTime 0042  
                       ?_trapDoor 0001                           ___lldiv 9F3A  
                 __size_of___wmul 0026                           ___lwdiv 9C20  
                         ___lwmod 9B92                           __pcinit A040  
                         __ramtop 1000                           _getFlat A65E  
   moveHorizontally@currentDrawer 000C                           _lcdInst 9A2C  
                         _getLong A83E                           __ptext0 ACC2  
                         __ptext1 ED50                           __ptext2 B5D6  
                         __ptext3 A57C                           __ptext4 BF2C  
                         __ptext5 9C72                           __ptext6 CB3C  
                         __ptext7 A344                           __ptext8 B7EC  
                         __ptext9 A74E            __size_of_decode_drawer 00E2  
                 __size_of_printf 03F2                           _initLCD 9BD4  
               __end_of_hexpowers FC59                           _initArm BA42  
                         _dpowers FC47                     ??_decode_diet 0003  
           which_drawer@backCheck 0030                           _isdigit 9A68  
                  displayLogs@day 0031                  ___aldiv@dividend 0001  
                       _LCD_RIGHT FC61          __size_of_I2C_Master_Init 005C  
        __size_of_I2C_Master_Read 0024          __size_of_I2C_Master_Wait 0012  
            displayLogs@logNumber 0029          __size_of_I2C_Master_Stop 0008  
                         _rowDown 0074                  ?_distributeRound 0007  
               _horizontalStepper 9DDC                        ??_getRound 0003  
                 distributeFlat@i 000A              end_of_initialization A0C4  
                 distributeLong@i 000A              displayLogs@keypress3 0041  
              ?_horizontalStepper 0006                   which_drawer@sum 002E  
           __end_of_LCD_SIZE_HORZ FC64                       ?_check_food 0001  
           __end_of_LCD_SIZE_VERT FC63                      _configDrawer 9B20  
                ?_verticalStepper 0006                 main@operationMode 006A  
       __size_of_I2C_Master_Start 0008         __size_of_I2C_Master_Write 000A  
                 ___lldiv@divisor 0005               ??_horizontalStepper 000A  
                 ___lldiv@counter 000D                   ?_moveVertically 000C  
                ??_distributeFlat 0009                  ??_distributeLong 0009  
                       _RCSTAbits 000FAB                           printf@c 0028  
                         printf@f 000D                  ___aldiv@quotient 000B  
                         postdec1 000FE5                           postdec2 000FDD  
                      ??_viewLogs 0054                        ??_trapDoor 0003  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE              __size_of_standbyMode 0ED4  
                     ?_diet_press 0029                         _UART_Init 9FBC  
                       _PORTBbits 000F81                     ?_which_drawer 0029  
             diet_press@backCheck 0031                       ?_get_digits 0001  
       __end_of_horizontalStepper 9E4C          mainOperation@roundPieces 00C4  
          sortDrawerList@sublist1 000B            sortDrawerList@sublist2 001B  
          sortDrawerList@sublist3 0023            sortDrawerList@sublist4 0013  
     distributePieces@roundPieces 000C                         _TRISAbits 000F92  
                       _TRISCbits 000F94                         _TRISDbits 000F95  
                       _TRISEbits 000F96                  viewLogs@checkLog 0056  
                    _happynewyear FC59           __size_of_getRoundPieces 0130  
               readEEPROM@address 0001               __end_of_decode_diet AB92  
               standbyMode@drawer 0182                       ?_initEEPROM 0001  
                ??_sortDrawerList 0005                     _decode_drawer A57C  
                     ?_readEEPROM 0001                       printf@width 0026  
                       _TXSTAbits 000FAC                       ?_food_press 0029  
             diet_press@dietTable 0038                   main@checkEEPROM 006C  
                   ??_displayLogs 002B              __size_of_writeEEPROM 002A  
                  __end_of___wmul 9AF6                        ?_UART_Init 000F  
                   __pidataCOMRAM 9A08                 trapDoor@direction 0001  
          standbyMode@validDrawer 0177               __size_of_check_food 0ABC  
                  ??_which_drawer 002B                    __end_of_printf C60A  
           __end_of_mainOperation D79C               start_initialization A040  
            initArm@currentDrawer 000C                    standbyMode@lng 0170  
               ?_moveHorizontally 000C           __size_of_printFoodInput 0256  
              ??_moveHorizontally 0010                    ?_decode_drawer 0001  
             __size_of_diet_press 0532                 ??_I2C_Master_Init 0012  
               ??_I2C_Master_Read 0002                 ??_I2C_Master_Wait 0001  
               ??_I2C_Master_Stop 0002             getFlatPieces@dietType 0001  
    standbyMode@drawerInformation 0150         getRoundPieces@returnValue 0007  
      distributePieces@flatPieces 000E             getFlatPieces@foodType 0003  
          __size_of_getFlatPieces 0166          __end_of_distributePieces B0D4  
             __size_of_get_digits 00BE                          ??___wmul 0005  
              mainOperation@F3180 01BA                mainOperation@F3182 01AA  
              mainOperation@F3176 01DA                mainOperation@F3178 01CA  
        I2C_Master_Init@clockFreq 000E                       __pdataBANK0 00F8  
                     __pdataBANK2 0250                  __CFG_LPT1OSC$OFF 000000  
                        ??_printf 0017  uartTransmitBlocking@numTransmits 0005  
             __size_of_initEEPROM 0026                food_press@keypress 0037  
             __size_of_readEEPROM 0014               __end_of_displayLogs D0AC  
             __size_of_food_press 01FA                       __pbssCOMRAM 0076  
                     _decode_diet AA6E        __size_of_horizontalStepper 0070  
                   __pcstackBANK0 0080                     __pcstackBANK1 0100  
                 sortDrawerList@i 0037                   sortDrawerList@j 0035  
                    _isdigit$1966 0002               decode_drawer@drawer 0001  
               __size_of_getRound 00F0  findDrawerIndex@sortedDrawerValue 0003  
          standbyMode@roundPieces 0100                  _I2C_Master_Start 99F8  
                _I2C_Master_Write 9A10                    mainOperation@i 00CE  
                ___lwdiv@dividend 0001                 __CFG_CCP2MX$PORTC 000000  
              _UARTinterruptState 0079                     __pmediumconst FC24  
                   UART_Init@baud 000F                         _lcdNibble 9EBC  
      distributePieces@longPieces 0010                          ?___aldiv 0001  
                        ?___lldiv 0001            __size_of_getLongPieces 0194  
              getUserInputs@count 0011                          ?___lwdiv 0001  
                        ?___lwmod 0008                       ??_UART_Init 0013  
               __size_of_viewLogs 02EC                 __size_of_trapDoor 005C  
                        ?_getFlat 0001                  findDrawerIndex@i 0009  
                        ?_lcdInst 0001                          ?_getLong 0001  
                        ?_initLCD 0001                          ?_initArm 000C  
                        ?_isdigit 0001               check_food@foodInput 0003  
                   _getFlatPieces AE00          moveVertically@nextDrawer 000E  
                   ??_shiftEEPROM 0003               displayLogs@dietType 003D  
                  _getRoundPieces AB92                         _hexpowers FC51  
                ___lwdiv@quotient 0005                   ??_decode_drawer 0003  
                  __size_of_putch 0014               displayLogs@foodType 003F  
                    ??_check_food 0005            getRoundPieces@dietType 0001  
                        _LCD_LEFT FC60                  displayLogs@month 002F  
                 ___aldiv@divisor 0005                  ??_moveVertically 0010  
                 ___aldiv@counter 0009                    ___wmul@product 0005  
                        _LATAbits 000F89                          _LATCbits 000F8B  
                        _LATDbits 000F8C                          _LATEbits 000F8D  
            __end_of_which_drawer B7EC            getRoundPieces@foodType 0003  
        __size_of_findDrawerIndex 0060                  __CFG_WDTPS$32768 000000  
                      ?_lcdNibble 0001                      ??_diet_press 002B  
                    shiftEEPROM@i 0006                       _displayLogs CB3C  
   __size_of_uartTransmitBlocking 009A                       _drawerClose 0070  
 sortDrawerList@sortedDrawerTable 0003           __size_of_verifyKeypress 0052  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0001  
              __end_of_check_food E258                     lcdNibble@data 0002  
                      printf@flag 0025                       _columnRight 0072  
                   lcdNibble@temp 0001                    ?_getFlatPieces 0001  
                      printf@prec 001C                      ??_get_digits 0003  
          __end_of_getRoundPieces ACC2            __size_of_getUserInputs 011A  
                  _printFoodInput B7EC                    _LCD_HORZ_LIMIT FC65  
        verticalStepper@direction 0008                     _getLongPieces B248  
                   diet_press@sum 0035                         copy_data0 A054  
                       copy_data1 A08C                 which_drawer@count 0032  
                    ??_initEEPROM 0003               __end_of_shiftEEPROM A3F2  
          getUserInputs@dietTable 0009                __end_of_diet_press CB3C  
                    ??_readEEPROM 0001                      ??_food_press 002D  
              diet_press@keypress 0037          __size_of_distributeRound 00A0  
                      _EECON1bits 000FA6                          __Hrparam 0000  
                   ??_standbyMode 0060                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                __end_of_get_digits A4B0  
              diet_press@previous 002D          __size_of_verticalStepper 0070  
  mainOperation@sortedDrawerTable 00B2            getUserInputs@foodTable 000B  
                __size_of___aldiv 00CC                  __size_of___lldiv 0082  
           displayLogs@flatPieces 0035                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                  __size_of_getFlat 00F0  
                __size_of_lcdInst 0014                  __size_of_getLong 0116  
          __end_of_printFoodInput BA42            getUserInputs@logNumber 000F  
              __end_of_initEEPROM 9AD0                   _I2C_Master_Init 9D20  
                 _I2C_Master_Read 9A86                  __size_of_initLCD 004C  
                 ?_getRoundPieces 0001                   _I2C_Master_Wait 9A1A  
              __end_of_readEEPROM 9A54                  __size_of_initArm 0262  
                 _I2C_Master_Stop 9A00            __end_of_LCD_HORZ_LIMIT FC66  
                __size_of_isdigit 001E                __end_of_food_press B5D6  
                 ___lwdiv@divisor 0003                   ___lwdiv@counter 0007  
                  ?_getLongPieces 0001                 getUserInputs@data 0015  
                        __ptext10 A83E                          __ptext11 A65E  
                        __ptext20 9A86                          __ptext12 B3DC  
                        __ptext21 9A1A                          __ptext13 A3F2  
                        __ptext30 9B92                          __ptext22 9D20  
                        __ptext14 D79C                          __ptext31 9C20  
                        __ptext23 9F3A                          __ptext15 C60A  
                        __ptext40 B248                          __ptext32 BCA4  
                        __ptext24 D0AC                          __ptext16 AA6E  
                        __ptext41 AE00                          __ptext33 B0D4  
                        __ptext25 9CC4                          __ptext17 9A10  
                        __ptext50 9BD4                          __ptext42 9D7C  
                        __ptext34 BA42                          __ptext26 E258  
                        __ptext18 9A00                          __ptext51 9A2C  
                        __ptext43 AF66                          __ptext35 9E4C  
                        __ptext27 C218                          __ptext19 99F8  
                        __ptext52 9EBC                          __ptext44 A2A4  
                        __ptext36 9DDC                          __ptext28 9A54  
                        __ptext53 9AAA                          __ptext45 A204  
                        __ptext37 A954                          __ptext29 9A68  
                        __ptext54 9AF6                          __ptext46 A164  
                        __ptext38 9A40                          __ptext55 9FBC  
                        __ptext47 9AD0                          __ptext39 AB92  
                        __ptext56 A4B0                          __ptext48 9B20  
                        __ptext49 A0CA                          _getRound A74E  
                  _LCD_VERT_LIMIT FC64                          _drawerUp 00F9  
        verticalStepper@rotations 0006                     __size_of_main 013E  
                 displayLogs@year 002D                     _getUserInputs A954  
       __size_of_moveHorizontally 0174                displayLogs@minutes 0039  
              displayLogs@seconds 003B                     ??_writeEEPROM 0002  
               ?_distributePieces 000C          displayLogs@markedDrawer1 0048  
        displayLogs@markedDrawer2 004A          displayLogs@markedDrawer3 004C  
        displayLogs@markedDrawer4 004E                       ??_lcdNibble 0001  
                        _viewLogs BF2C                          _trapDoor 9CC4  
                 verifyKeypress@i 0008                getLong@returnValue 0005  
              ??_distributePieces 0012                         printf@idx 001B  
                       printf@len 0021                         printf@val 0023  
                       trapDoor@i 0005               __end_of_standbyMode FC24  
                 ??_getFlatPieces 0005       I2C_Master_Write@byteToWrite 0002  
        decode_drawer@returnValue 0005                 ??_findDrawerIndex 0005  
           displayLogs@longPieces 0037                   ?_printFoodInput 0001  
                which_drawer@rand 002C                         putch@data 0003  
         __size_of_distributeFlat 00A0          __end_of_I2C_Master_Start 9A00  
         __size_of_distributeLong 00A0          __end_of_I2C_Master_Write 9A1A  
                      _INTCONbits 000FF2                      ?_decode_diet 0001  
                distributeRound@i 000A            __end_of_LCD_VERT_LIMIT FC65  
                     _shiftEEPROM A344                          isdigit@c 0003  
           __size_of_which_drawer 0216                       getFlat@code 0001  
       standbyMode@firstIteration 0167                     _LCD_SIZE_HORZ FC63  
                ___lwmod@dividend 0008                     _LCD_SIZE_VERT FC62  
                ___lldiv@dividend 0001           verifyKeypress@logNumber 0005  
                  ?_getUserInputs 0007            __size_of_mainOperation 06F0  
              getFlat@returnValue 0005       moveVertically@currentDrawer 000C  
          displayLogs@roundPieces 0033                          printf@ap 001F  
                        printf@cp 001D                 ??_distributeRound 0009  
         __size_of_sortDrawerList 0AF8                       diet_press@i 002F  
         __end_of_I2C_Master_Init 9D7C           __end_of_I2C_Master_Read 9AAA  
         __end_of_I2C_Master_Wait 9A2C           __end_of_I2C_Master_Stop 9A08  
                     lcdInst@data 0003                   shiftEEPROM@temp 0004  
                  _verifyKeypress 9C72               getRound@returnValue 0005  
                     getLong@code 0001               __end_of_writeEEPROM 9B20  
        uartTransmitBlocking@data 0001                 ??_verticalStepper 000A  
         verifyKeypress@returnVal 0006                  ___lldiv@quotient 0009  
                    _which_drawer B5D6                   ___lwmod@divisor 000A  
                 ??_getLongPieces 0005                   ___lwmod@counter 000C  
                    ___aldiv@sign 000A            verifyKeypress@keypress 0001  
                verticalStepper@i 000A                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5          getFlatPieces@returnValue 0007  
                  getUserInputs@i 0017                    getUserInputs@n 0013  
                    getRound@code 0001                     ?_configDrawer 0006  
           check_food@returnValue 0007        mainOperation@currentDrawer 00CA  
