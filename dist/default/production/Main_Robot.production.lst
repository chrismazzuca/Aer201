

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar  6 19:32:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  00C04C                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _UART
    98  00C04C  D6                 	db	low _uart
    99  00C04D  00                 	db	high _uart
   100                           
   101                           ;initializer for _columnRight
   102  00C04E  34                 	db	52
   103                           
   104                           ;initializer for _columnLeft
   105  00C04F  33                 	db	51
   106                           
   107                           ;initializer for _rowDown
   108  00C050  32                 	db	50
   109                           
   110                           ;initializer for _rowUp
   111  00C051  31                 	db	49
   112                           
   113                           	psect	idataBANK0
   114  00C188                     __pidataBANK0:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _inputs
   118  00C188  FD                 	db	low STR_3
   119  00C189  FF                 	db	high STR_3
   120  00C18A  E9                 	db	low (STR_11+2)
   121  00C18B  FF                 	db	high (STR_11+2)
   122  00C18C  C0                 	db	low (STR_17+3)
   123  00C18D  FF                 	db	high (STR_17+3)
   124  00C18E  EC                 	db	low (STR_9+1)
   125  00C18F  FF                 	db	high (STR_9+1)
   126  00C190  F4                 	db	low (STR_10+1)
   127  00C191  FF                 	db	high (STR_10+1)
   128  00C192  BF                 	db	low (STR_17+2)
   129  00C193  FF                 	db	high (STR_17+2)
   130  00C194  EB                 	db	low STR_9
   131  00C195  FF                 	db	high STR_9
   132  00C196  F3                 	db	low STR_10
   133  00C197  FF                 	db	high STR_10
   134  00C198  E7                 	db	low STR_11
   135  00C199  FF                 	db	high STR_11
   136  00C19A  EF                 	db	low STR_12
   137  00C19B  FF                 	db	high STR_12
   138  00C19C  C3                 	db	low (STR_16+1)
   139  00C19D  FF                 	db	high (STR_16+1)
   140  00C19E  BE                 	db	low (STR_17+1)
   141  00C19F  FF                 	db	high (STR_17+1)
   142  00C1A0  C8                 	db	low (STR_18+1)
   143  00C1A1  FF                 	db	high (STR_18+1)
   144  00C1A2  C2                 	db	low STR_16
   145  00C1A3  FF                 	db	high STR_16
   146  00C1A4  BD                 	db	low STR_17
   147  00C1A5  FF                 	db	high STR_17
   148  00C1A6  C7                 	db	low STR_18
   149  00C1A7  FF                 	db	high STR_18
   150  00C1A8  D1                 	db	low STR_19
   151  00C1A9  FF                 	db	high STR_19
   152  00C1AA  CC                 	db	low STR_20
   153  00C1AB  FF                 	db	high STR_20
   154                           
   155                           ;initializer for _foodInputs
   156  00C1AC  BB                 	db	low (STR_33+3)
   157  00C1AD  FF                 	db	high (STR_33+3)
   158  00C1AE  E5                 	db	low (STR_30+2)
   159  00C1AF  FF                 	db	high (STR_30+2)
   160  00C1B0  FB                 	db	low (STR_26+1)
   161  00C1B1  FF                 	db	high (STR_26+1)
   162  00C1B2  BA                 	db	low (STR_33+2)
   163  00C1B3  FF                 	db	high (STR_33+2)
   164  00C1B4  E4                 	db	low (STR_30+1)
   165  00C1B5  FF                 	db	high (STR_30+1)
   166  00C1B6  FA                 	db	low STR_26
   167  00C1B7  FF                 	db	high STR_26
   168  00C1B8  E0                 	db	low (STR_31+1)
   169  00C1B9  FF                 	db	high (STR_31+1)
   170  00C1BA  F7                 	db	low STR_28
   171  00C1BB  FF                 	db	high STR_28
   172  00C1BC  B9                 	db	low (STR_33+1)
   173  00C1BD  FF                 	db	high (STR_33+1)
   174  00C1BE  E3                 	db	low STR_30
   175  00C1BF  FF                 	db	high STR_30
   176  00C1C0  DF                 	db	low STR_31
   177  00C1C1  FF                 	db	high STR_31
   178  00C1C2  DB                 	db	low STR_32
   179  00C1C3  FF                 	db	high STR_32
   180  00C1C4  B8                 	db	low STR_33
   181  00C1C5  FF                 	db	high STR_33
   182                           
   183                           	psect	mediumconst
   184  00FCD6                     __pmediumconst:
   185                           	opt stack 0
   186  00FCD6  00                 	db	0
   187  00FCD7                     _keys:
   188                           	opt stack 0
   189  00FCD7  31                 	db	49
   190  00FCD8  32                 	db	50
   191  00FCD9  33                 	db	51
   192  00FCDA  41                 	db	65
   193  00FCDB  34                 	db	52
   194  00FCDC  35                 	db	53
   195  00FCDD  36                 	db	54
   196  00FCDE  42                 	db	66
   197  00FCDF  37                 	db	55
   198  00FCE0  38                 	db	56
   199  00FCE1  39                 	db	57
   200  00FCE2  43                 	db	67
   201  00FCE3  2A                 	db	42
   202  00FCE4  30                 	db	48
   203  00FCE5  23                 	db	35
   204  00FCE6  44                 	db	68
   205  00FCE7  00                 	db	0
   206  00FCE8                     __end_of_keys:
   207                           	opt stack 0
   208  00FCE8                     _input:
   209                           	opt stack 0
   210  00FCE8  31                 	db	49
   211  00FCE9  32                 	db	50
   212  00FCEA  33                 	db	51
   213  00FCEB  52                 	db	82
   214  00FCEC  34                 	db	52
   215  00FCED  35                 	db	53
   216  00FCEE  36                 	db	54
   217  00FCEF  46                 	db	70
   218  00FCF0  37                 	db	55
   219  00FCF1  38                 	db	56
   220  00FCF2  39                 	db	57
   221  00FCF3  4C                 	db	76
   222  00FCF4  2A                 	db	42
   223  00FCF5  30                 	db	48
   224  00FCF6  23                 	db	35
   225  00FCF7  44                 	db	68
   226  00FCF8  00                 	db	0
   227  00FCF9                     __end_of_input:
   228                           	opt stack 0
   229  00FCF9                     _dpowers:
   230                           	opt stack 0
   231  00FCF9  0001               	dw	1
   232  00FCFB  000A               	dw	10
   233  00FCFD  0064               	dw	100
   234  00FCFF  03E8               	dw	1000
   235  00FD01  2710               	dw	10000
   236  00FD03                     __end_of_dpowers:
   237                           	opt stack 0
   238  00FD03                     _hexpowers:
   239                           	opt stack 0
   240  00FD03  0001               	dw	1
   241  00FD05  0010               	dw	16
   242  00FD07  0100               	dw	256
   243  00FD09  1000               	dw	4096
   244  00FD0B                     __end_of_hexpowers:
   245                           	opt stack 0
   246  00FD0B                     _happynewyear:
   247                           	opt stack 0
   248  00FD0B  00                 	db	0
   249  00FD0C  28                 	db	40
   250  00FD0D  00                 	db	0
   251  00FD0E  06                 	db	6
   252  00FD0F  24                 	db	36
   253  00FD10  02                 	db	2
   254  00FD11  18                 	db	24
   255  00FD12                     __end_of_happynewyear:
   256                           	opt stack 0
   257  00FD12                     _LCD_LEFT:
   258                           	opt stack 0
   259  00FD12  00                 	db	0
   260  00FD13                     __end_of_LCD_LEFT:
   261                           	opt stack 0
   262  00FD13                     _LCD_RIGHT:
   263                           	opt stack 0
   264  00FD13  01                 	db	1
   265  00FD14                     __end_of_LCD_RIGHT:
   266                           	opt stack 0
   267  00FD14                     _LCD_SIZE_VERT:
   268                           	opt stack 0
   269  00FD14  02                 	db	2
   270  00FD15                     __end_of_LCD_SIZE_VERT:
   271                           	opt stack 0
   272  00FD15                     _LCD_SIZE_HORZ:
   273                           	opt stack 0
   274  00FD15  10                 	db	16
   275  00FD16                     __end_of_LCD_SIZE_HORZ:
   276                           	opt stack 0
   277  00FD16                     _LCD_VERT_LIMIT:
   278                           	opt stack 0
   279  00FD16  02                 	db	2
   280  00FD17                     __end_of_LCD_VERT_LIMIT:
   281                           	opt stack 0
   282  00FD17                     _LCD_HORZ_LIMIT:
   283                           	opt stack 0
   284  00FD17  28                 	db	40
   285  00FD18                     __end_of_LCD_HORZ_LIMIT:
   286                           	opt stack 0
   287  0000                     _SPBRG	set	4015
   288  0000                     _RCREG	set	4014
   289  0000                     _RCSTAbits	set	4011
   290  0000                     _TXREG	set	4013
   291  0000                     _TXSTAbits	set	4012
   292  0000                     _ADRESL	set	4035
   293  0000                     _ADRESH	set	4036
   294  0000                     _ADCON0bits	set	4034
   295  0000                     _SSPBUF	set	4041
   296  0000                     _SSPCON2bits	set	4037
   297  0000                     _SSPADD	set	4040
   298  0000                     _SSPCON2	set	4037
   299  0000                     _SSPCON1	set	4038
   300  0000                     _SSPSTAT	set	4039
   301  0000                     _SSPCON1bits	set	4038
   302  0000                     _EECON2	set	4007
   303  0000                     _EEDATA	set	4008
   304  0000                     _EEADR	set	4009
   305  0000                     _EECON1bits	set	4006
   306  0000                     _PORTB	set	3969
   307  0000                     _PORTBbits	set	3969
   308  0000                     _INTCONbits	set	4082
   309  0000                     _LATDbits	set	3980
   310  0000                     _LATCbits	set	3979
   311  0000                     _TRISCbits	set	3988
   312  0000                     _ADCON1	set	4033
   313  0000                     _ADCON0	set	4034
   314  0000                     _TRISE	set	3990
   315  0000                     _TRISD	set	3989
   316  0000                     _TRISC	set	3988
   317  0000                     _TRISB	set	3987
   318  0000                     _TRISA	set	3986
   319  0000                     _LATE	set	3981
   320  0000                     _LATD	set	3980
   321  0000                     _LATC	set	3979
   322  0000                     _LATB	set	3978
   323  0000                     _LATA	set	3977
   324  0000                     _TRISC7	set	31911
   325  0000                     _TRISC6	set	31910
   326  0000                     _RCIE	set	31981
   327  0000                     _RCIF	set	31989
   328  0000                     _TXIE	set	31980
   329  0000                     _TRMT	set	32097
   330  0000                     _TXIF	set	31988
   331  0000                     _ADON	set	32272
   332  00FD18                     STR_56:
   333  00FD18  52                 	db	82	;'R'
   334  00FD19  65                 	db	101	;'e'
   335  00FD1A  6D                 	db	109	;'m'
   336  00FD1B  61                 	db	97	;'a'
   337  00FD1C  69                 	db	105	;'i'
   338  00FD1D  6E                 	db	110	;'n'
   339  00FD1E  69                 	db	105	;'i'
   340  00FD1F  6E                 	db	110	;'n'
   341  00FD20  67                 	db	103	;'g'
   342  00FD21  20                 	db	32
   343  00FD22  70                 	db	112	;'p'
   344  00FD23  69                 	db	105	;'i'
   345  00FD24  65                 	db	101	;'e'
   346  00FD25  63                 	db	99	;'c'
   347  00FD26  65                 	db	101	;'e'
   348  00FD27  73                 	db	115	;'s'
   349  00FD28  3A                 	db	58	;':'
   350  00FD29  00                 	db	0
   351  00FD2A                     STR_104:
   352  00FD2A  30                 	db	48	;'0'
   353  00FD2B  31                 	db	49	;'1'
   354  00FD2C  32                 	db	50	;'2'
   355  00FD2D  33                 	db	51	;'3'
   356  00FD2E  34                 	db	52	;'4'
   357  00FD2F  35                 	db	53	;'5'
   358  00FD30  36                 	db	54	;'6'
   359  00FD31  37                 	db	55	;'7'
   360  00FD32  38                 	db	56	;'8'
   361  00FD33  39                 	db	57	;'9'
   362  00FD34  61                 	db	97	;'a'
   363  00FD35  62                 	db	98	;'b'
   364  00FD36  63                 	db	99	;'c'
   365  00FD37  64                 	db	100	;'d'
   366  00FD38  65                 	db	101	;'e'
   367  00FD39  66                 	db	102	;'f'
   368  00FD3A  00                 	db	0
   369  00FD3B                     STR_87:
   370  00FD3B  64                 	db	100	;'d'
   371  00FD3C  72                 	db	114	;'r'
   372  00FD3D  61                 	db	97	;'a'
   373  00FD3E  77                 	db	119	;'w'
   374  00FD3F  65                 	db	101	;'e'
   375  00FD40  72                 	db	114	;'r'
   376  00FD41  73                 	db	115	;'s'
   377  00FD42  20                 	db	32
   378  00FD43  72                 	db	114	;'r'
   379  00FD44  65                 	db	101	;'e'
   380  00FD45  61                 	db	97	;'a'
   381  00FD46  63                 	db	99	;'c'
   382  00FD47  68                 	db	104	;'h'
   383  00FD48  65                 	db	101	;'e'
   384  00FD49  64                 	db	100	;'d'
   385  00FD4A  21                 	db	33
   386  00FD4B  00                 	db	0
   387  00FD4C                     STR_75:
   388  00FD4C  62                 	db	98	;'b'
   389  00FD4D  65                 	db	101	;'e'
   390  00FD4E  67                 	db	103	;'g'
   391  00FD4F  69                 	db	105	;'i'
   392  00FD50  6E                 	db	110	;'n'
   393  00FD51  20                 	db	32
   394  00FD52  6F                 	db	111	;'o'
   395  00FD53  70                 	db	112	;'p'
   396  00FD54  65                 	db	101	;'e'
   397  00FD55  72                 	db	114	;'r'
   398  00FD56  61                 	db	97	;'a'
   399  00FD57  74                 	db	116	;'t'
   400  00FD58  69                 	db	105	;'i'
   401  00FD59  6F                 	db	111	;'o'
   402  00FD5A  6E                 	db	110	;'n'
   403  00FD5B  2E                 	db	46
   404  00FD5C  00                 	db	0
   405  00FD5D                     STR_42:
   406  00FD5D  50                 	db	80	;'P'
   407  00FD5E  6C                 	db	108	;'l'
   408  00FD5F  65                 	db	101	;'e'
   409  00FD60  61                 	db	97	;'a'
   410  00FD61  73                 	db	115	;'s'
   411  00FD62  65                 	db	101	;'e'
   412  00FD63  20                 	db	32
   413  00FD64  69                 	db	105	;'i'
   414  00FD65  6E                 	db	110	;'n'
   415  00FD66  70                 	db	112	;'p'
   416  00FD67  75                 	db	117	;'u'
   417  00FD68  74                 	db	116	;'t'
   418  00FD69  20                 	db	32
   419  00FD6A  6C                 	db	108	;'l'
   420  00FD6B  6F                 	db	111	;'o'
   421  00FD6C  67                 	db	103	;'g'
   422  00FD6D  00                 	db	0
   423  00FD6E                     STR_57:
   424  00FD6E  52                 	db	82	;'R'
   425  00FD6F  3A                 	db	58	;':'
   426  00FD70  25                 	db	37
   427  00FD71  69                 	db	105	;'i'
   428  00FD72  20                 	db	32
   429  00FD73  20                 	db	32
   430  00FD74  46                 	db	70	;'F'
   431  00FD75  3A                 	db	58	;':'
   432  00FD76  25                 	db	37
   433  00FD77  69                 	db	105	;'i'
   434  00FD78  20                 	db	32
   435  00FD79  20                 	db	32
   436  00FD7A  4C                 	db	76	;'L'
   437  00FD7B  3A                 	db	58	;':'
   438  00FD7C  25                 	db	37
   439  00FD7D  69                 	db	105	;'i'
   440  00FD7E  00                 	db	0
   441  00FD7F                     STR_38:
   442  00FD7F  50                 	db	80	;'P'
   443  00FD80  72                 	db	114	;'r'
   444  00FD81  65                 	db	101	;'e'
   445  00FD82  73                 	db	115	;'s'
   446  00FD83  73                 	db	115	;'s'
   447  00FD84  20                 	db	32
   448  00FD85  61                 	db	97	;'a'
   449  00FD86  6E                 	db	110	;'n'
   450  00FD87  79                 	db	121	;'y'
   451  00FD88  20                 	db	32
   452  00FD89  6B                 	db	107	;'k'
   453  00FD8A  65                 	db	101	;'e'
   454  00FD8B  79                 	db	121	;'y'
   455  00FD8C  20                 	db	32
   456  00FD8D  74                 	db	116	;'t'
   457  00FD8E  6F                 	db	111	;'o'
   458  00FD8F  00                 	db	0
   459  00FD90                     STR_40:
   460  00FD90  25                 	db	37
   461  00FD91  69                 	db	105	;'i'
   462  00FD92  20                 	db	32
   463  00FD93  70                 	db	112	;'p'
   464  00FD94  72                 	db	114	;'r'
   465  00FD95  65                 	db	101	;'e'
   466  00FD96  76                 	db	118	;'v'
   467  00FD97  69                 	db	105	;'i'
   468  00FD98  6F                 	db	111	;'o'
   469  00FD99  75                 	db	117	;'u'
   470  00FD9A  73                 	db	115	;'s'
   471  00FD9B  20                 	db	32
   472  00FD9C  6C                 	db	108	;'l'
   473  00FD9D  6F                 	db	111	;'o'
   474  00FD9E  67                 	db	103	;'g'
   475  00FD9F  73                 	db	115	;'s'
   476  00FDA0  00                 	db	0
   477  00FDA1                     STR_77:
   478  00FDA1  63                 	db	99	;'c'
   479  00FDA2  61                 	db	97	;'a'
   480  00FDA3  62                 	db	98	;'b'
   481  00FDA4  69                 	db	105	;'i'
   482  00FDA5  6E                 	db	110	;'n'
   483  00FDA6  65                 	db	101	;'e'
   484  00FDA7  74                 	db	116	;'t'
   485  00FDA8  20                 	db	32
   486  00FDA9  73                 	db	115	;'s'
   487  00FDAA  6F                 	db	111	;'o'
   488  00FDAB  72                 	db	114	;'r'
   489  00FDAC  74                 	db	116	;'t'
   490  00FDAD  65                 	db	101	;'e'
   491  00FDAE  72                 	db	114	;'r'
   492  00FDAF  21                 	db	33
   493  00FDB0  00                 	db	0
   494  00FDB1                     STR_91:
   495  00FDB1  6E                 	db	110	;'n'
   496  00FDB2  75                 	db	117	;'u'
   497  00FDB3  6D                 	db	109	;'m'
   498  00FDB4  62                 	db	98	;'b'
   499  00FDB5  65                 	db	101	;'e'
   500  00FDB6  72                 	db	114	;'r'
   501  00FDB7  20                 	db	32
   502  00FDB8  70                 	db	112	;'p'
   503  00FDB9  72                 	db	114	;'r'
   504  00FDBA  65                 	db	101	;'e'
   505  00FDBB  73                 	db	115	;'s'
   506  00FDBC  73                 	db	115	;'s'
   507  00FDBD  65                 	db	101	;'e'
   508  00FDBE  64                 	db	100	;'d'
   509  00FDBF  2E                 	db	46
   510  00FDC0  00                 	db	0
   511  00FDC1                     STR_63:
   512  00FDC1  44                 	db	68	;'D'
   513  00FDC2  72                 	db	114	;'r'
   514  00FDC3  61                 	db	97	;'a'
   515  00FDC4  77                 	db	119	;'w'
   516  00FDC5  65                 	db	101	;'e'
   517  00FDC6  72                 	db	114	;'r'
   518  00FDC7  20                 	db	32
   519  00FDC8  25                 	db	37
   520  00FDC9  69                 	db	105	;'i'
   521  00FDCA  20                 	db	32
   522  00FDCB  66                 	db	102	;'f'
   523  00FDCC  6F                 	db	111	;'o'
   524  00FDCD  6F                 	db	111	;'o'
   525  00FDCE  64                 	db	100	;'d'
   526  00FDCF  3A                 	db	58	;':'
   527  00FDD0  00                 	db	0
   528  00FDD1                     STR_49:
   529  00FDD1  4F                 	db	79	;'O'
   530  00FDD2  70                 	db	112	;'p'
   531  00FDD3  65                 	db	101	;'e'
   532  00FDD4  72                 	db	114	;'r'
   533  00FDD5  61                 	db	97	;'a'
   534  00FDD6  74                 	db	116	;'t'
   535  00FDD7  69                 	db	105	;'i'
   536  00FDD8  6F                 	db	111	;'o'
   537  00FDD9  6E                 	db	110	;'n'
   538  00FDDA  20                 	db	32
   539  00FDDB  74                 	db	116	;'t'
   540  00FDDC  69                 	db	105	;'i'
   541  00FDDD  6D                 	db	109	;'m'
   542  00FDDE  65                 	db	101	;'e'
   543  00FDDF  3A                 	db	58	;':'
   544  00FDE0  00                 	db	0
   545  00FDE1                     STR_51:
   546  00FDE1  4D                 	db	77	;'M'
   547  00FDE2  61                 	db	97	;'a'
   548  00FDE3  72                 	db	114	;'r'
   549  00FDE4  6B                 	db	107	;'k'
   550  00FDE5  65                 	db	101	;'e'
   551  00FDE6  64                 	db	100	;'d'
   552  00FDE7  20                 	db	32
   553  00FDE8  64                 	db	100	;'d'
   554  00FDE9  72                 	db	114	;'r'
   555  00FDEA  61                 	db	97	;'a'
   556  00FDEB  77                 	db	119	;'w'
   557  00FDEC  65                 	db	101	;'e'
   558  00FDED  72                 	db	114	;'r'
   559  00FDEE  73                 	db	115	;'s'
   560  00FDEF  3A                 	db	58	;':'
   561  00FDF0  00                 	db	0
   562  00FDF1                     STR_67:
   563  00FDF1  44                 	db	68	;'D'
   564  00FDF2  72                 	db	114	;'r'
   565  00FDF3  61                 	db	97	;'a'
   566  00FDF4  77                 	db	119	;'w'
   567  00FDF5  65                 	db	101	;'e'
   568  00FDF6  72                 	db	114	;'r'
   569  00FDF7  20                 	db	32
   570  00FDF8  25                 	db	37
   571  00FDF9  69                 	db	105	;'i'
   572  00FDFA  20                 	db	32
   573  00FDFB  64                 	db	100	;'d'
   574  00FDFC  69                 	db	105	;'i'
   575  00FDFD  65                 	db	101	;'e'
   576  00FDFE  74                 	db	116	;'t'
   577  00FDFF  3A                 	db	58	;':'
   578  00FE00  00                 	db	0
   579  00FE01                     STR_88:
   580  00FE01  41                 	db	65	;'A'
   581  00FE02  6E                 	db	110	;'n'
   582  00FE03  6F                 	db	111	;'o'
   583  00FE04  74                 	db	116	;'t'
   584  00FE05  68                 	db	104	;'h'
   585  00FE06  65                 	db	101	;'e'
   586  00FE07  72                 	db	114	;'r'
   587  00FE08  20                 	db	32
   588  00FE09  64                 	db	100	;'d'
   589  00FE0A  72                 	db	114	;'r'
   590  00FE0B  61                 	db	97	;'a'
   591  00FE0C  77                 	db	119	;'w'
   592  00FE0D  65                 	db	101	;'e'
   593  00FE0E  72                 	db	114	;'r'
   594  00FE0F  3F                 	db	63	;'?'
   595  00FE10  00                 	db	0
   596  00FE11                     STR_76:
   597  00FE11  57                 	db	87	;'W'
   598  00FE12  65                 	db	101	;'e'
   599  00FE13  6C                 	db	108	;'l'
   600  00FE14  63                 	db	99	;'c'
   601  00FE15  6F                 	db	111	;'o'
   602  00FE16  6D                 	db	109	;'m'
   603  00FE17  65                 	db	101	;'e'
   604  00FE18  20                 	db	32
   605  00FE19  74                 	db	116	;'t'
   606  00FE1A  6F                 	db	111	;'o'
   607  00FE1B  20                 	db	32
   608  00FE1C  79                 	db	121	;'y'
   609  00FE1D  6F                 	db	111	;'o'
   610  00FE1E  75                 	db	117	;'u'
   611  00FE1F  72                 	db	114	;'r'
   612  00FE20  00                 	db	0
   613  00FE21                     STR_62:
   614  00FE21  23                 	db	35
   615  00FE22  20                 	db	32
   616  00FE23  3D                 	db	61	;'='
   617  00FE24  20                 	db	32
   618  00FE25  4E                 	db	78	;'N'
   619  00FE26  6F                 	db	111	;'o'
   620  00FE27  2C                 	db	44
   621  00FE28  20                 	db	32
   622  00FE29  44                 	db	68	;'D'
   623  00FE2A  20                 	db	32
   624  00FE2B  3D                 	db	61	;'='
   625  00FE2C  20                 	db	32
   626  00FE2D  59                 	db	89	;'Y'
   627  00FE2E  65                 	db	101	;'e'
   628  00FE2F  73                 	db	115	;'s'
   629  00FE30  00                 	db	0
   630  00FE31                     STR_2:
   631  00FE31  43                 	db	67	;'C'
   632  00FE32  6C                 	db	108	;'l'
   633  00FE33  65                 	db	101	;'e'
   634  00FE34  61                 	db	97	;'a'
   635  00FE35  72                 	db	114	;'r'
   636  00FE36  69                 	db	105	;'i'
   637  00FE37  6E                 	db	110	;'n'
   638  00FE38  67                 	db	103	;'g'
   639  00FE39  20                 	db	32
   640  00FE3A  45                 	db	69	;'E'
   641  00FE3B  45                 	db	69	;'E'
   642  00FE3C  50                 	db	80	;'P'
   643  00FE3D  52                 	db	82	;'R'
   644  00FE3E  4F                 	db	79	;'O'
   645  00FE3F  4D                 	db	77	;'M'
   646  00FE40  00                 	db	0
   647  00FE41                     STR_71:
   648  00FE41  44                 	db	68	;'D'
   649  00FE42  72                 	db	114	;'r'
   650  00FE43  61                 	db	97	;'a'
   651  00FE44  77                 	db	119	;'w'
   652  00FE45  65                 	db	101	;'e'
   653  00FE46  72                 	db	114	;'r'
   654  00FE47  20                 	db	32
   655  00FE48  6E                 	db	110	;'n'
   656  00FE49  75                 	db	117	;'u'
   657  00FE4A  6D                 	db	109	;'m'
   658  00FE4B  62                 	db	98	;'b'
   659  00FE4C  65                 	db	101	;'e'
   660  00FE4D  72                 	db	114	;'r'
   661  00FE4E  3A                 	db	58	;':'
   662  00FE4F  00                 	db	0
   663  00FE50                     STR_58:
   664  00FE50  49                 	db	73	;'I'
   665  00FE51  6E                 	db	110	;'n'
   666  00FE52  70                 	db	112	;'p'
   667  00FE53  75                 	db	117	;'u'
   668  00FE54  74                 	db	116	;'t'
   669  00FE55  20                 	db	32
   670  00FE56  53                 	db	83	;'S'
   671  00FE57  75                 	db	117	;'u'
   672  00FE58  6D                 	db	109	;'m'
   673  00FE59  6D                 	db	109	;'m'
   674  00FE5A  61                 	db	97	;'a'
   675  00FE5B  72                 	db	114	;'r'
   676  00FE5C  79                 	db	121	;'y'
   677  00FE5D  3A                 	db	58	;':'
   678  00FE5E  00                 	db	0
   679  00FE5F                     STR_36:
   680  00FE5F  31                 	db	49	;'1'
   681  00FE60  20                 	db	32
   682  00FE61  70                 	db	112	;'p'
   683  00FE62  72                 	db	114	;'r'
   684  00FE63  65                 	db	101	;'e'
   685  00FE64  76                 	db	118	;'v'
   686  00FE65  69                 	db	105	;'i'
   687  00FE66  6F                 	db	111	;'o'
   688  00FE67  75                 	db	117	;'u'
   689  00FE68  73                 	db	115	;'s'
   690  00FE69  20                 	db	32
   691  00FE6A  6C                 	db	108	;'l'
   692  00FE6B  6F                 	db	111	;'o'
   693  00FE6C  67                 	db	103	;'g'
   694  00FE6D  00                 	db	0
   695  00FE6E                     STR_55:
   696  00FE6E  25                 	db	37
   697  00FE6F  69                 	db	105	;'i'
   698  00FE70  2C                 	db	44
   699  00FE71  20                 	db	32
   700  00FE72  25                 	db	37
   701  00FE73  69                 	db	105	;'i'
   702  00FE74  2C                 	db	44
   703  00FE75  20                 	db	32
   704  00FE76  25                 	db	37
   705  00FE77  69                 	db	105	;'i'
   706  00FE78  2C                 	db	44
   707  00FE79  20                 	db	32
   708  00FE7A  25                 	db	37
   709  00FE7B  69                 	db	105	;'i'
   710  00FE7C  00                 	db	0
   711  00FE7D                     STR_48:
   712  00FE7D  25                 	db	37
   713  00FE7E  30                 	db	48	;'0'
   714  00FE7F  32                 	db	50	;'2'
   715  00FE80  69                 	db	105	;'i'
   716  00FE81  2F                 	db	47
   717  00FE82  25                 	db	37
   718  00FE83  30                 	db	48	;'0'
   719  00FE84  32                 	db	50	;'2'
   720  00FE85  69                 	db	105	;'i'
   721  00FE86  2F                 	db	47
   722  00FE87  25                 	db	37
   723  00FE88  30                 	db	48	;'0'
   724  00FE89  32                 	db	50	;'2'
   725  00FE8A  69                 	db	105	;'i'
   726  00FE8B  00                 	db	0
   727  00FE8C                     STR_80:
   728  00FE8C  25                 	db	37
   729  00FE8D  30                 	db	48	;'0'
   730  00FE8E  32                 	db	50	;'2'
   731  00FE8F  78                 	db	120	;'x'
   732  00FE90  2F                 	db	47
   733  00FE91  25                 	db	37
   734  00FE92  30                 	db	48	;'0'
   735  00FE93  32                 	db	50	;'2'
   736  00FE94  78                 	db	120	;'x'
   737  00FE95  2F                 	db	47
   738  00FE96  25                 	db	37
   739  00FE97  30                 	db	48	;'0'
   740  00FE98  32                 	db	50	;'2'
   741  00FE99  78                 	db	120	;'x'
   742  00FE9A  00                 	db	0
   743  00FE9B                     STR_81:
   744  00FE9B  25                 	db	37
   745  00FE9C  30                 	db	48	;'0'
   746  00FE9D  32                 	db	50	;'2'
   747  00FE9E  78                 	db	120	;'x'
   748  00FE9F  3A                 	db	58	;':'
   749  00FEA0  25                 	db	37
   750  00FEA1  30                 	db	48	;'0'
   751  00FEA2  32                 	db	50	;'2'
   752  00FEA3  78                 	db	120	;'x'
   753  00FEA4  3A                 	db	58	;':'
   754  00FEA5  25                 	db	37
   755  00FEA6  30                 	db	48	;'0'
   756  00FEA7  32                 	db	50	;'2'
   757  00FEA8  78                 	db	120	;'x'
   758  00FEA9  00                 	db	0
   759  00FEAA                     STR_92:
   760  00FEAA  44                 	db	68	;'D'
   761  00FEAB  72                 	db	114	;'r'
   762  00FEAC  61                 	db	97	;'a'
   763  00FEAD  77                 	db	119	;'w'
   764  00FEAE  65                 	db	101	;'e'
   765  00FEAF  72                 	db	114	;'r'
   766  00FEB0  20                 	db	32
   767  00FEB1  61                 	db	97	;'a'
   768  00FEB2  6C                 	db	108	;'l'
   769  00FEB3  72                 	db	114	;'r'
   770  00FEB4  65                 	db	101	;'e'
   771  00FEB5  61                 	db	97	;'a'
   772  00FEB6  64                 	db	100	;'d'
   773  00FEB7  79                 	db	121	;'y'
   774  00FEB8  00                 	db	0
   775  00FEB9                     STR_65:
   776  00FEB9  49                 	db	73	;'I'
   777  00FEBA  6E                 	db	110	;'n'
   778  00FEBB  76                 	db	118	;'v'
   779  00FEBC  61                 	db	97	;'a'
   780  00FEBD  6C                 	db	108	;'l'
   781  00FEBE  69                 	db	105	;'i'
   782  00FEBF  64                 	db	100	;'d'
   783  00FEC0  20                 	db	32
   784  00FEC1  66                 	db	102	;'f'
   785  00FEC2  6F                 	db	111	;'o'
   786  00FEC3  6F                 	db	111	;'o'
   787  00FEC4  64                 	db	100	;'d'
   788  00FEC5  21                 	db	33
   789  00FEC6  00                 	db	0
   790  00FEC7                     STR_69:
   791  00FEC7  49                 	db	73	;'I'
   792  00FEC8  6E                 	db	110	;'n'
   793  00FEC9  76                 	db	118	;'v'
   794  00FECA  61                 	db	97	;'a'
   795  00FECB  6C                 	db	108	;'l'
   796  00FECC  69                 	db	105	;'i'
   797  00FECD  64                 	db	100	;'d'
   798  00FECE  20                 	db	32
   799  00FECF  64                 	db	100	;'d'
   800  00FED0  69                 	db	105	;'i'
   801  00FED1  65                 	db	101	;'e'
   802  00FED2  74                 	db	116	;'t'
   803  00FED3  21                 	db	33
   804  00FED4  00                 	db	0
   805  00FED5                     STR_39:
   806  00FED5  6D                 	db	109	;'m'
   807  00FED6  6F                 	db	111	;'o'
   808  00FED7  76                 	db	118	;'v'
   809  00FED8  65                 	db	101	;'e'
   810  00FED9  20                 	db	32
   811  00FEDA  66                 	db	102	;'f'
   812  00FEDB  6F                 	db	111	;'o'
   813  00FEDC  72                 	db	114	;'r'
   814  00FEDD  77                 	db	119	;'w'
   815  00FEDE  61                 	db	97	;'a'
   816  00FEDF  72                 	db	114	;'r'
   817  00FEE0  64                 	db	100	;'d'
   818  00FEE1  2E                 	db	46
   819  00FEE2  00                 	db	0
   820  00FEE3                     STR_84:
   821  00FEE3  6F                 	db	111	;'o'
   822  00FEE4  72                 	db	114	;'r'
   823  00FEE5  20                 	db	32
   824  00FEE6  70                 	db	112	;'p'
   825  00FEE7  72                 	db	114	;'r'
   826  00FEE8  65                 	db	101	;'e'
   827  00FEE9  73                 	db	115	;'s'
   828  00FEEA  73                 	db	115	;'s'
   829  00FEEB  20                 	db	32
   830  00FEEC  44                 	db	68	;'D'
   831  00FEED  20                 	db	32
   832  00FEEE  74                 	db	116	;'t'
   833  00FEEF  6F                 	db	111	;'o'
   834  00FEF0  00                 	db	0
   835  00FEF1                     STR_99:
   836  00FEF1  49                 	db	73	;'I'
   837  00FEF2  6E                 	db	110	;'n'
   838  00FEF3  76                 	db	118	;'v'
   839  00FEF4  61                 	db	97	;'a'
   840  00FEF5  6C                 	db	108	;'l'
   841  00FEF6  69                 	db	105	;'i'
   842  00FEF7  64                 	db	100	;'d'
   843  00FEF8  20                 	db	32
   844  00FEF9  6B                 	db	107	;'k'
   845  00FEFA  65                 	db	101	;'e'
   846  00FEFB  79                 	db	121	;'y'
   847  00FEFC  21                 	db	33
   848  00FEFD  00                 	db	0
   849  00FEFE                     STR_86:
   850  00FEFE  4D                 	db	77	;'M'
   851  00FEFF  61                 	db	97	;'a'
   852  00FF00  78                 	db	120	;'x'
   853  00FF01  69                 	db	105	;'i'
   854  00FF02  6D                 	db	109	;'m'
   855  00FF03  75                 	db	117	;'u'
   856  00FF04  6D                 	db	109	;'m'
   857  00FF05  20                 	db	32
   858  00FF06  6F                 	db	111	;'o'
   859  00FF07  66                 	db	102	;'f'
   860  00FF08  20                 	db	32
   861  00FF09  38                 	db	56	;'8'
   862  00FF0A  00                 	db	0
   863  00FF0B                     STR_61:
   864  00FF0B  41                 	db	65	;'A'
   865  00FF0C  6E                 	db	110	;'n'
   866  00FF0D  6F                 	db	111	;'o'
   867  00FF0E  74                 	db	116	;'t'
   868  00FF0F  68                 	db	104	;'h'
   869  00FF10  65                 	db	101	;'e'
   870  00FF11  72                 	db	114	;'r'
   871  00FF12  20                 	db	32
   872  00FF13  6C                 	db	108	;'l'
   873  00FF14  6F                 	db	111	;'o'
   874  00FF15  67                 	db	103	;'g'
   875  00FF16  3F                 	db	63	;'?'
   876  00FF17  00                 	db	0
   877  00FF18                     STR_78:
   878  00FF18  43                 	db	67	;'C'
   879  00FF19  75                 	db	117	;'u'
   880  00FF1A  72                 	db	114	;'r'
   881  00FF1B  72                 	db	114	;'r'
   882  00FF1C  65                 	db	101	;'e'
   883  00FF1D  6E                 	db	110	;'n'
   884  00FF1E  74                 	db	116	;'t'
   885  00FF1F  20                 	db	32
   886  00FF20  64                 	db	100	;'d'
   887  00FF21  61                 	db	97	;'a'
   888  00FF22  74                 	db	116	;'t'
   889  00FF23  65                 	db	101	;'e'
   890  00FF24  00                 	db	0
   891  00FF25                     STR_83:
   892  00FF25  76                 	db	118	;'v'
   893  00FF26  69                 	db	105	;'i'
   894  00FF27  65                 	db	101	;'e'
   895  00FF28  77                 	db	119	;'w'
   896  00FF29  20                 	db	32
   897  00FF2A  6C                 	db	108	;'l'
   898  00FF2B  6F                 	db	111	;'o'
   899  00FF2C  67                 	db	103	;'g'
   900  00FF2D  73                 	db	115	;'s'
   901  00FF2E  2C                 	db	44
   902  00FF2F  00                 	db	0
   903  00FF30                     STR_35:
   904  00FF30  61                 	db	97	;'a'
   905  00FF31  76                 	db	118	;'v'
   906  00FF32  61                 	db	97	;'a'
   907  00FF33  69                 	db	105	;'i'
   908  00FF34  6C                 	db	108	;'l'
   909  00FF35  61                 	db	97	;'a'
   910  00FF36  62                 	db	98	;'b'
   911  00FF37  6C                 	db	108	;'l'
   912  00FF38  65                 	db	101	;'e'
   913  00FF39  2E                 	db	46
   914  00FF3A  00                 	db	0
   915  00FF3B                     STR_98:
   916  00FF3B  52                 	db	82	;'R'
   917  00FF3C  65                 	db	101	;'e'
   918  00FF3D  62                 	db	98	;'b'
   919  00FF3E  6F                 	db	111	;'o'
   920  00FF3F  6F                 	db	111	;'o'
   921  00FF40  74                 	db	116	;'t'
   922  00FF41  69                 	db	105	;'i'
   923  00FF42  6E                 	db	110	;'n'
   924  00FF43  67                 	db	103	;'g'
   925  00FF44  2E                 	db	46
   926  00FF45  00                 	db	0
   927  00FF46                     STR_66:
   928  00FF46  54                 	db	84	;'T'
   929  00FF47  72                 	db	114	;'r'
   930  00FF48  79                 	db	121	;'y'
   931  00FF49  20                 	db	32
   932  00FF4A  61                 	db	97	;'a'
   933  00FF4B  67                 	db	103	;'g'
   934  00FF4C  61                 	db	97	;'a'
   935  00FF4D  69                 	db	105	;'i'
   936  00FF4E  6E                 	db	110	;'n'
   937  00FF4F  2E                 	db	46
   938  00FF50  00                 	db	0
   939  00FF51                     STR_59:
   940  00FF51  44                 	db	68	;'D'
   941  00FF52  72                 	db	114	;'r'
   942  00FF53  61                 	db	97	;'a'
   943  00FF54  77                 	db	119	;'w'
   944  00FF55  65                 	db	101	;'e'
   945  00FF56  72                 	db	114	;'r'
   946  00FF57  20                 	db	32
   947  00FF58  25                 	db	37
   948  00FF59  69                 	db	105	;'i'
   949  00FF5A  3A                 	db	58	;':'
   950  00FF5B  00                 	db	0
   951  00FF5C                     STR_82:
   952  00FF5C  50                 	db	80	;'P'
   953  00FF5D  72                 	db	114	;'r'
   954  00FF5E  65                 	db	101	;'e'
   955  00FF5F  73                 	db	115	;'s'
   956  00FF60  73                 	db	115	;'s'
   957  00FF61  20                 	db	32
   958  00FF62  23                 	db	35
   959  00FF63  20                 	db	32
   960  00FF64  74                 	db	116	;'t'
   961  00FF65  6F                 	db	111	;'o'
   962  00FF66  00                 	db	0
   963  00FF67                     STR_79:
   964  00FF67  61                 	db	97	;'a'
   965  00FF68  6E                 	db	110	;'n'
   966  00FF69  64                 	db	100	;'d'
   967  00FF6A  20                 	db	32
   968  00FF6B  74                 	db	116	;'t'
   969  00FF6C  69                 	db	105	;'i'
   970  00FF6D  6D                 	db	109	;'m'
   971  00FF6E  65                 	db	101	;'e'
   972  00FF6F  3A                 	db	58	;':'
   973  00FF70  00                 	db	0
   974  00FF71                     STR_90:
   975  00FF71  4E                 	db	78	;'N'
   976  00FF72  6F                 	db	111	;'o'
   977  00FF73  20                 	db	32
   978  00FF74  64                 	db	100	;'d'
   979  00FF75  72                 	db	114	;'r'
   980  00FF76  61                 	db	97	;'a'
   981  00FF77  77                 	db	119	;'w'
   982  00FF78  65                 	db	101	;'e'
   983  00FF79  72                 	db	114	;'r'
   984  00FF7A  00                 	db	0
   985  00FF7B                     STR_43:
   986  00FF7B  6E                 	db	110	;'n'
   987  00FF7C  75                 	db	117	;'u'
   988  00FF7D  6D                 	db	109	;'m'
   989  00FF7E  62                 	db	98	;'b'
   990  00FF7F  65                 	db	101	;'e'
   991  00FF80  72                 	db	114	;'r'
   992  00FF81  3A                 	db	58	;':'
   993  00FF82  20                 	db	32
   994  00FF83  00                 	db	0
   995  00FF84                     STR_93:
   996  00FF84  69                 	db	105	;'i'
   997  00FF85  6E                 	db	110	;'n'
   998  00FF86  20                 	db	32
   999  00FF87  75                 	db	117	;'u'
  1000  00FF88  73                 	db	115	;'s'
  1001  00FF89  65                 	db	101	;'e'
  1002  00FF8A  21                 	db	33
  1003  00FF8B  00                 	db	0
  1004  00FF8C                     STR_50:
  1005  00FF8C  25                 	db	37
  1006  00FF8D  69                 	db	105	;'i'
  1007  00FF8E  3A                 	db	58	;':'
  1008  00FF8F  25                 	db	37
  1009  00FF90  30                 	db	48	;'0'
  1010  00FF91  32                 	db	50	;'2'
  1011  00FF92  69                 	db	105	;'i'
  1012  00FF93  00                 	db	0
  1013  00FF94                     STR_34:
  1014  00FF94  4E                 	db	78	;'N'
  1015  00FF95  6F                 	db	111	;'o'
  1016  00FF96  20                 	db	32
  1017  00FF97  6C                 	db	108	;'l'
  1018  00FF98  6F                 	db	111	;'o'
  1019  00FF99  67                 	db	103	;'g'
  1020  00FF9A  73                 	db	115	;'s'
  1021  00FF9B  00                 	db	0
  1022  00FF9C                     STR_1:
  1023  00FF9C  53                 	db	83	;'S'
  1024  00FF9D  74                 	db	116	;'t'
  1025  00FF9E  61                 	db	97	;'a'
  1026  00FF9F  6E                 	db	110	;'n'
  1027  00FFA0  64                 	db	100	;'d'
  1028  00FFA1  62                 	db	98	;'b'
  1029  00FFA2  79                 	db	121	;'y'
  1030  00FFA3  00                 	db	0
  1031  00FFA4                     STR_103:
  1032  00FFA4  28                 	db	40
  1033  00FFA5  6E                 	db	110	;'n'
  1034  00FFA6  75                 	db	117	;'u'
  1035  00FFA7  6C                 	db	108	;'l'
  1036  00FFA8  6C                 	db	108	;'l'
  1037  00FFA9  29                 	db	41
  1038  00FFAA  00                 	db	0
  1039  00FFAB                     STR_44:
  1040  00FFAB  47                 	db	71	;'G'
  1041  00FFAC  72                 	db	114	;'r'
  1042  00FFAD  65                 	db	101	;'e'
  1043  00FFAE  61                 	db	97	;'a'
  1044  00FFAF  74                 	db	116	;'t'
  1045  00FFB0  21                 	db	33
  1046  00FFB1  00                 	db	0
  1047  00FFB2                     STR_47:
  1048  00FFB2  44                 	db	68	;'D'
  1049  00FFB3  61                 	db	97	;'a'
  1050  00FFB4  74                 	db	116	;'t'
  1051  00FFB5  65                 	db	101	;'e'
  1052  00FFB6  3A                 	db	58	;':'
  1053  00FFB7  00                 	db	0
  1054  00FFB8                     STR_33:
  1055  00FFB8  31                 	db	49	;'1'
  1056  00FFB9  31                 	db	49	;'1'
  1057  00FFBA  31                 	db	49	;'1'
  1058  00FFBB  31                 	db	49	;'1'
  1059  00FFBC  00                 	db	0
  1060  00FFBD                     STR_17:
  1061  00FFBD  52                 	db	82	;'R'
  1062  00FFBE  46                 	db	70	;'F'
  1063  00FFBF  46                 	db	70	;'F'
  1064  00FFC0  4C                 	db	76	;'L'
  1065  00FFC1  00                 	db	0
  1066  00FFC2                     STR_16:
  1067  00FFC2  52                 	db	82	;'R'
  1068  00FFC3  52                 	db	82	;'R'
  1069  00FFC4  46                 	db	70	;'F'
  1070  00FFC5  4C                 	db	76	;'L'
  1071  00FFC6  00                 	db	0
  1072  00FFC7                     STR_18:
  1073  00FFC7  52                 	db	82	;'R'
  1074  00FFC8  46                 	db	70	;'F'
  1075  00FFC9  4C                 	db	76	;'L'
  1076  00FFCA  4C                 	db	76	;'L'
  1077  00FFCB  00                 	db	0
  1078  00FFCC                     STR_20:
  1079  00FFCC  46                 	db	70	;'F'
  1080  00FFCD  4C                 	db	76	;'L'
  1081  00FFCE  4C                 	db	76	;'L'
  1082  00FFCF  4C                 	db	76	;'L'
  1083  00FFD0  00                 	db	0
  1084  00FFD1                     STR_19:
  1085  00FFD1  52                 	db	82	;'R'
  1086  00FFD2  4C                 	db	76	;'L'
  1087  00FFD3  4C                 	db	76	;'L'
  1088  00FFD4  4C                 	db	76	;'L'
  1089  00FFD5  00                 	db	0
  1090  00FFD6                     STR_60:
  1091  00FFD6  25                 	db	37
  1092  00FFD7  73                 	db	115	;'s'
  1093  00FFD8  25                 	db	37
  1094  00FFD9  73                 	db	115	;'s'
  1095  00FFDA  00                 	db	0
  1096  00FFDB                     STR_32:
  1097  00FFDB  32                 	db	50	;'2'
  1098  00FFDC  31                 	db	49	;'1'
  1099  00FFDD  31                 	db	49	;'1'
  1100  00FFDE  00                 	db	0
  1101  00FFDF                     STR_31:
  1102  00FFDF  31                 	db	49	;'1'
  1103  00FFE0  32                 	db	50	;'2'
  1104  00FFE1  31                 	db	49	;'1'
  1105  00FFE2  00                 	db	0
  1106  00FFE3                     STR_30:
  1107  00FFE3  31                 	db	49	;'1'
  1108  00FFE4  31                 	db	49	;'1'
  1109  00FFE5  32                 	db	50	;'2'
  1110  00FFE6  00                 	db	0
  1111  00FFE7                     STR_11:
  1112  00FFE7  52                 	db	82	;'R'
  1113  00FFE8  46                 	db	70	;'F'
  1114  00FFE9  46                 	db	70	;'F'
  1115  00FFEA  00                 	db	0
  1116  00FFEB                     STR_9:
  1117  00FFEB  52                 	db	82	;'R'
  1118  00FFEC  52                 	db	82	;'R'
  1119  00FFED  46                 	db	70	;'F'
  1120  00FFEE  00                 	db	0
  1121  00FFEF                     STR_12:
  1122  00FFEF  52                 	db	82	;'R'
  1123  00FFF0  4C                 	db	76	;'L'
  1124  00FFF1  4C                 	db	76	;'L'
  1125  00FFF2  00                 	db	0
  1126  00FFF3                     STR_10:
  1127  00FFF3  52                 	db	82	;'R'
  1128  00FFF4  52                 	db	82	;'R'
  1129  00FFF5  4C                 	db	76	;'L'
  1130  00FFF6  00                 	db	0
  1131  00FFF7                     STR_28:
  1132  00FFF7  32                 	db	50	;'2'
  1133  00FFF8  32                 	db	50	;'2'
  1134  00FFF9  00                 	db	0
  1135  00FFFA                     STR_26:
  1136  00FFFA  31                 	db	49	;'1'
  1137  00FFFB  33                 	db	51	;'3'
  1138  00FFFC  00                 	db	0
  1139  00FFFD                     STR_3:
  1140  00FFFD  52                 	db	82	;'R'
  1141  00FFFE  00                 	db	0
  1142  0000                     
  1143                           ; #config settings
  1144  00FFFF  00                 	db	0	; dummy byte at the end
  1145  0000                     
  1146                           	psect	cinit
  1147  00C354                     __pcinit:
  1148                           	opt stack 0
  1149  00C354                     start_initialization:
  1150                           	opt stack 0
  1151  00C354                     __initialization:
  1152                           	opt stack 0
  1153                           
  1154                           ; Initialize objects allocated to BANK0 (62 bytes)
  1155                           ; load TBLPTR registers with __pidataBANK0
  1156  00C354  0E88               	movlw	low __pidataBANK0
  1157  00C356  6EF6               	movwf	tblptrl,c
  1158  00C358  0EC1               	movlw	high __pidataBANK0
  1159  00C35A  6EF7               	movwf	tblptrh,c
  1160  00C35C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1161  00C35E  6EF8               	movwf	tblptru,c
  1162  00C360  EE00  F080         	lfsr	0,__pdataBANK0
  1163  00C364  EE10 F03E          	lfsr	1,62
  1164  00C368                     copy_data0:
  1165  00C368  0009               	tblrd		*+
  1166  00C36A  CFF5 FFEE          	movff	tablat,postinc0
  1167  00C36E  50E5               	movf	postdec1,w,c
  1168  00C370  50E1               	movf	fsr1l,w,c
  1169  00C372  E1FA               	bnz	copy_data0
  1170                           
  1171                           ; Initialize objects allocated to COMRAM (6 bytes)
  1172                           ; load TBLPTR registers with __pidataCOMRAM
  1173  00C374  0E4C               	movlw	low __pidataCOMRAM
  1174  00C376  6EF6               	movwf	tblptrl,c
  1175  00C378  0EC0               	movlw	high __pidataCOMRAM
  1176  00C37A  6EF7               	movwf	tblptrh,c
  1177  00C37C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1178  00C37E  6EF8               	movwf	tblptru,c
  1179  00C380  EE00  F075         	lfsr	0,__pdataCOMRAM
  1180  00C384  EE10 F006          	lfsr	1,6
  1181  00C388                     copy_data1:
  1182  00C388  0009               	tblrd		*+
  1183  00C38A  CFF5 FFEE          	movff	tablat,postinc0
  1184  00C38E  50E5               	movf	postdec1,w,c
  1185  00C390  50E1               	movf	fsr1l,w,c
  1186  00C392  E1FA               	bnz	copy_data1
  1187                           
  1188                           ; Clear objects allocated to BANK1 (96 bytes)
  1189  00C394  EE01  F08A         	lfsr	0,__pbssBANK1
  1190  00C398  0E60               	movlw	96
  1191  00C39A                     clear_0:
  1192  00C39A  6AEE               	clrf	postinc0,c
  1193  00C39C  06E8               	decf	wreg,f,c
  1194  00C39E  E1FD               	bnz	clear_0
  1195                           
  1196                           ; Clear objects allocated to BANK0 (36 bytes)
  1197  00C3A0  EE00  F0BE         	lfsr	0,__pbssBANK0
  1198  00C3A4  0E24               	movlw	36
  1199  00C3A6                     clear_1:
  1200  00C3A6  6AEE               	clrf	postinc0,c
  1201  00C3A8  06E8               	decf	wreg,f,c
  1202  00C3AA  E1FD               	bnz	clear_1
  1203                           
  1204                           ; Clear objects allocated to COMRAM (13 bytes)
  1205  00C3AC  EE00  F068         	lfsr	0,__pbssCOMRAM
  1206  00C3B0  0E0D               	movlw	13
  1207  00C3B2                     clear_2:
  1208  00C3B2  6AEE               	clrf	postinc0,c
  1209  00C3B4  06E8               	decf	wreg,f,c
  1210  00C3B6  E1FD               	bnz	clear_2
  1211  00C3B8                     end_of_initialization:
  1212                           	opt stack 0
  1213  00C3B8                     __end_of__initialization:
  1214                           	opt stack 0
  1215  00C3B8  0100               	movlb	0
  1216  00C3BA  EFBD  F063         	goto	_main	;jump to C main() function
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postdec1	equ	0xFE5
  1224                           fsr1l	equ	0xFE1
  1225                           
  1226                           	psect	bssCOMRAM
  1227  000068                     __pbssCOMRAM:
  1228                           	opt stack 0
  1229  000068                     food_press@F3134:
  1230                           	opt stack 0
  1231  000068                     	ds	8
  1232  000070                     _firstIteration:
  1233                           	opt stack 0
  1234  000070                     	ds	2
  1235  000072                     standbyMode@LCDinterruptState:
  1236                           	opt stack 0
  1237  000072                     	ds	1
  1238  000073                     _UARTinterruptState:
  1239                           	opt stack 0
  1240  000073                     	ds	1
  1241  000074                     	ds	1
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           
  1251                           	psect	dataCOMRAM
  1252  000075                     __pdataCOMRAM:
  1253                           	opt stack 0
  1254  000075                     _UART:
  1255                           	opt stack 0
  1256  000075                     	ds	2
  1257  000077                     _columnRight:
  1258                           	opt stack 0
  1259  000077                     	ds	1
  1260  000078                     _columnLeft:
  1261                           	opt stack 0
  1262  000078                     	ds	1
  1263  000079                     _rowDown:
  1264                           	opt stack 0
  1265  000079                     	ds	1
  1266  00007A                     _rowUp:
  1267                           	opt stack 0
  1268  00007A                     	ds	1
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postdec1	equ	0xFE5
  1276                           fsr1l	equ	0xFE1
  1277                           
  1278                           	psect	bssBANK0
  1279  0000BE                     __pbssBANK0:
  1280                           	opt stack 0
  1281  0000BE                     diet_press@F3149:
  1282                           	opt stack 0
  1283  0000BE                     	ds	8
  1284  0000C6                     _arr_dataRX:
  1285                           	opt stack 0
  1286  0000C6                     	ds	16
  1287  0000D6                     _uart:
  1288                           	opt stack 0
  1289  0000D6                     	ds	12
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           postinc0	equ	0xFEE
  1295                           wreg	equ	0xFE8
  1296                           postdec1	equ	0xFE5
  1297                           fsr1l	equ	0xFE1
  1298                           
  1299                           	psect	dataBANK0
  1300  000080                     __pdataBANK0:
  1301                           	opt stack 0
  1302  000080                     _inputs:
  1303                           	opt stack 0
  1304  000080                     	ds	36
  1305  0000A4                     _foodInputs:
  1306                           	opt stack 0
  1307  0000A4                     	ds	26
  1308                           tblptru	equ	0xFF8
  1309                           tblptrh	equ	0xFF7
  1310                           tblptrl	equ	0xFF6
  1311                           tablat	equ	0xFF5
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postdec1	equ	0xFE5
  1315                           fsr1l	equ	0xFE1
  1316                           
  1317                           	psect	bssBANK1
  1318  00018A                     __pbssBANK1:
  1319                           	opt stack 0
  1320  00018A                     standbyMode@F3179:
  1321                           	opt stack 0
  1322  00018A                     	ds	16
  1323  00019A                     standbyMode@F3177:
  1324                           	opt stack 0
  1325  00019A                     	ds	16
  1326  0001AA                     standbyMode@F3175:
  1327                           	opt stack 0
  1328  0001AA                     	ds	16
  1329  0001BA                     standbyMode@F3173:
  1330                           	opt stack 0
  1331  0001BA                     	ds	16
  1332  0001CA                     standbyMode@F3171:
  1333                           	opt stack 0
  1334  0001CA                     	ds	16
  1335  0001DA                     standbyMode@F3169:
  1336                           	opt stack 0
  1337  0001DA                     	ds	16
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           postinc0	equ	0xFEE
  1343                           wreg	equ	0xFE8
  1344                           postdec1	equ	0xFE5
  1345                           fsr1l	equ	0xFE1
  1346                           
  1347                           	psect	cstackBANK1
  1348  000100                     __pcstackBANK1:
  1349                           	opt stack 0
  1350  000100                     standbyMode@roundPieces:
  1351                           	opt stack 0
  1352                           
  1353                           ; 16 bytes @ 0x0
  1354  000100                     	ds	16
  1355  000110                     standbyMode@flatPieces:
  1356                           	opt stack 0
  1357                           
  1358                           ; 16 bytes @ 0x10
  1359  000110                     	ds	16
  1360  000120                     standbyMode@longPieces:
  1361                           	opt stack 0
  1362                           
  1363                           ; 16 bytes @ 0x20
  1364  000120                     	ds	16
  1365  000130                     standbyMode@dietType:
  1366                           	opt stack 0
  1367                           
  1368                           ; 16 bytes @ 0x30
  1369  000130                     	ds	16
  1370  000140                     standbyMode@foodType:
  1371                           	opt stack 0
  1372                           
  1373                           ; 16 bytes @ 0x40
  1374  000140                     	ds	16
  1375  000150                     standbyMode@drawerInformation:
  1376                           	opt stack 0
  1377                           
  1378                           ; 16 bytes @ 0x50
  1379  000150                     	ds	16
  1380  000160                     standbyMode@time:
  1381                           	opt stack 0
  1382                           
  1383                           ; 7 bytes @ 0x60
  1384  000160                     	ds	7
  1385  000167                     standbyMode@firstIteration:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x67
  1389  000167                     	ds	2
  1390  000169                     standbyMode@whichKey:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x69
  1394  000169                     	ds	2
  1395  00016B                     standbyMode@keypress:
  1396                           	opt stack 0
  1397                           
  1398                           ; 1 bytes @ 0x6B
  1399  00016B                     	ds	1
  1400  00016C                     standbyMode@round:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x6C
  1404  00016C                     	ds	2
  1405  00016E                     standbyMode@flat:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x6E
  1409  00016E                     	ds	2
  1410  000170                     standbyMode@lng:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x70
  1414  000170                     	ds	2
  1415  000172                     standbyMode@decodedDiet:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x72
  1419  000172                     	ds	2
  1420  000174                     standbyMode@storedFoodType:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x74
  1424  000174                     	ds	2
  1425  000176                     standbyMode@keypress1:
  1426                           	opt stack 0
  1427                           
  1428                           ; 1 bytes @ 0x76
  1429  000176                     	ds	1
  1430  000177                     standbyMode@validDrawer:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x77
  1434  000177                     	ds	2
  1435  000179                     standbyMode@zero:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x79
  1439  000179                     	ds	2
  1440  00017B                     standbyMode@n:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x7B
  1444  00017B                     	ds	2
  1445  00017D                     standbyMode@x:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x7D
  1449  00017D                     	ds	2
  1450  00017F                     standbyMode@logNumber:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x7F
  1454  00017F                     	ds	1
  1455  000180                     standbyMode@diet:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x80
  1459  000180                     	ds	2
  1460  000182                     standbyMode@drawer:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x82
  1464  000182                     	ds	2
  1465  000184                     standbyMode@food:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x84
  1469  000184                     	ds	2
  1470  000186                     standbyMode@drawerCount:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x86
  1474  000186                     	ds	2
  1475  000188                     standbyMode@i:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x88
  1479  000188                     	ds	2
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1l	equ	0xFE1
  1488                           
  1489                           	psect	cstackCOMRAM
  1490  000001                     __pcstackCOMRAM:
  1491                           	opt stack 0
  1492  000001                     ??_isdigit:
  1493  000001                     ??_I2C_Master_Wait:
  1494  000001                     ?_check_food:
  1495                           	opt stack 0
  1496  000001                     ?_getRound:
  1497                           	opt stack 0
  1498  000001                     ?_getFlat:
  1499                           	opt stack 0
  1500  000001                     ?_getLong:
  1501                           	opt stack 0
  1502  000001                     ?_verifyKeypress:
  1503                           	opt stack 0
  1504  000001                     ?_printFoodInput:
  1505                           	opt stack 0
  1506  000001                     ?_get_digits:
  1507                           	opt stack 0
  1508  000001                     ?_decode_diet:
  1509                           	opt stack 0
  1510  000001                     ?_decode_drawer:
  1511                           	opt stack 0
  1512  000001                     ?___wmul:
  1513                           	opt stack 0
  1514  000001                     ?___lwdiv:
  1515                           	opt stack 0
  1516  000001                     ?___aldiv:
  1517                           	opt stack 0
  1518  000001                     ?___lldiv:
  1519                           	opt stack 0
  1520  000001                     lcdNibble@temp:
  1521                           	opt stack 0
  1522  000001                     writeEEPROM@data:
  1523                           	opt stack 0
  1524  000001                     readEEPROM@address:
  1525                           	opt stack 0
  1526  000001                     check_food@sum:
  1527                           	opt stack 0
  1528  000001                     getRound@code:
  1529                           	opt stack 0
  1530  000001                     getFlat@code:
  1531                           	opt stack 0
  1532  000001                     getLong@code:
  1533                           	opt stack 0
  1534  000001                     verifyKeypress@keypress:
  1535                           	opt stack 0
  1536  000001                     printFoodInput@food:
  1537                           	opt stack 0
  1538  000001                     get_digits@sum:
  1539                           	opt stack 0
  1540  000001                     decode_diet@dietType:
  1541                           	opt stack 0
  1542  000001                     decode_drawer@drawer:
  1543                           	opt stack 0
  1544  000001                     ___wmul@multiplier:
  1545                           	opt stack 0
  1546  000001                     ___lwdiv@dividend:
  1547                           	opt stack 0
  1548  000001                     ___aldiv@dividend:
  1549                           	opt stack 0
  1550  000001                     ___lldiv@dividend:
  1551                           	opt stack 0
  1552                           
  1553                           ; 4 bytes @ 0x0
  1554  000001                     	ds	1
  1555  000002                     lcdNibble@data:
  1556                           	opt stack 0
  1557  000002                     writeEEPROM@address:
  1558                           	opt stack 0
  1559  000002                     I2C_Master_Read@ackBit:
  1560                           	opt stack 0
  1561  000002                     _isdigit$1475:
  1562                           	opt stack 0
  1563  000002                     I2C_Master_Write@byteToWrite:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x1
  1567  000002                     	ds	1
  1568  000003                     ??_shiftEEPROM:
  1569  000003                     ??_getRound:
  1570  000003                     ??_getFlat:
  1571  000003                     ??_getLong:
  1572  000003                     ??_verifyKeypress:
  1573  000003                     ??_get_digits:
  1574  000003                     ??_decode_diet:
  1575  000003                     ??_decode_drawer:
  1576  000003                     lcdInst@data:
  1577                           	opt stack 0
  1578  000003                     putch@data:
  1579                           	opt stack 0
  1580  000003                     I2C_Master_Read@receivedByte:
  1581                           	opt stack 0
  1582  000003                     isdigit@c:
  1583                           	opt stack 0
  1584  000003                     check_food@foodInput:
  1585                           	opt stack 0
  1586  000003                     initEEPROM@i:
  1587                           	opt stack 0
  1588  000003                     ___wmul@multiplicand:
  1589                           	opt stack 0
  1590  000003                     ___lwdiv@divisor:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x2
  1594  000003                     	ds	1
  1595  000004                     ??_initLCD:
  1596  000004                     shiftEEPROM@temp:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x3
  1600  000004                     	ds	1
  1601  000005                     ??_check_food:
  1602  000005                     verifyKeypress@logNumber:
  1603                           	opt stack 0
  1604  000005                     getRound@returnValue:
  1605                           	opt stack 0
  1606  000005                     getFlat@returnValue:
  1607                           	opt stack 0
  1608  000005                     getLong@returnValue:
  1609                           	opt stack 0
  1610  000005                     get_digits@count:
  1611                           	opt stack 0
  1612  000005                     decode_diet@returnValue:
  1613                           	opt stack 0
  1614  000005                     decode_drawer@returnValue:
  1615                           	opt stack 0
  1616  000005                     ___wmul@product:
  1617                           	opt stack 0
  1618  000005                     ___lwdiv@quotient:
  1619                           	opt stack 0
  1620  000005                     ___aldiv@divisor:
  1621                           	opt stack 0
  1622  000005                     ___lldiv@divisor:
  1623                           	opt stack 0
  1624                           
  1625                           ; 4 bytes @ 0x4
  1626  000005                     	ds	1
  1627  000006                     verifyKeypress@returnVal:
  1628                           	opt stack 0
  1629  000006                     shiftEEPROM@i:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x5
  1633  000006                     	ds	1
  1634  000007                     ___lwdiv@counter:
  1635                           	opt stack 0
  1636  000007                     check_food@returnValue:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x6
  1640  000007                     	ds	1
  1641  000008                     ?___lwmod:
  1642                           	opt stack 0
  1643  000008                     verifyKeypress@i:
  1644                           	opt stack 0
  1645  000008                     ___lwmod@dividend:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x7
  1649  000008                     	ds	1
  1650  000009                     ___aldiv@counter:
  1651                           	opt stack 0
  1652  000009                     ___lldiv@quotient:
  1653                           	opt stack 0
  1654                           
  1655                           ; 4 bytes @ 0x8
  1656  000009                     	ds	1
  1657  00000A                     ___aldiv@sign:
  1658                           	opt stack 0
  1659  00000A                     ___lwmod@divisor:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0x9
  1663  00000A                     	ds	1
  1664  00000B                     ___aldiv@quotient:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0xA
  1668  00000B                     	ds	1
  1669  00000C                     ___lwmod@counter:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0xB
  1673  00000C                     	ds	1
  1674  00000D                     ?_printf:
  1675                           	opt stack 0
  1676  00000D                     ___lldiv@counter:
  1677                           	opt stack 0
  1678  00000D                     printf@f:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0xC
  1682  00000D                     	ds	1
  1683  00000E                     I2C_Master_Init@clockFreq:
  1684                           	opt stack 0
  1685                           
  1686                           ; 4 bytes @ 0xD
  1687  00000E                     	ds	1
  1688  00000F                     UART_Init@baud:
  1689                           	opt stack 0
  1690                           
  1691                           ; 4 bytes @ 0xE
  1692  00000F                     	ds	3
  1693  000012                     ??_I2C_Master_Init:
  1694                           
  1695                           ; 1 bytes @ 0x11
  1696  000012                     	ds	1
  1697  000013                     ??_UART_Init:
  1698                           
  1699                           ; 1 bytes @ 0x12
  1700  000013                     	ds	4
  1701  000017                     ??_printf:
  1702  000017                     
  1703                           ; 1 bytes @ 0x16
  1704  000017                     	ds	4
  1705  00001B                     printf@idx:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0x1A
  1709  00001B                     	ds	1
  1710  00001C                     printf@prec:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x1B
  1714  00001C                     	ds	1
  1715  00001D                     printf@cp:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x1C
  1719  00001D                     	ds	2
  1720  00001F                     printf@ap:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x1E
  1724  00001F                     	ds	2
  1725  000021                     printf@len:
  1726                           	opt stack 0
  1727                           
  1728                           ; 2 bytes @ 0x20
  1729  000021                     	ds	2
  1730  000023                     printf@val:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x22
  1734  000023                     	ds	2
  1735  000025                     printf@flag:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x24
  1739  000025                     	ds	1
  1740  000026                     printf@width:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x25
  1744  000026                     	ds	2
  1745  000028                     printf@c:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x27
  1749  000028                     	ds	1
  1750  000029                     ?_displayLogs:
  1751                           	opt stack 0
  1752  000029                     ?_food_press:
  1753                           	opt stack 0
  1754  000029                     ?_diet_press:
  1755                           	opt stack 0
  1756  000029                     ?_which_drawer:
  1757                           	opt stack 0
  1758  000029                     displayLogs@logNumber:
  1759                           	opt stack 0
  1760  000029                     food_press@dietSum:
  1761                           	opt stack 0
  1762  000029                     diet_press@drawer:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x28
  1766  000029                     	ds	2
  1767  00002B                     ??_displayLogs:
  1768  00002B                     ??_diet_press:
  1769  00002B                     ??_which_drawer:
  1770  00002B                     food_press@drawer:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x2A
  1774  00002B                     	ds	1
  1775  00002C                     which_drawer@rand:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x2B
  1779  00002C                     	ds	1
  1780  00002D                     ??_food_press:
  1781  00002D                     displayLogs@year:
  1782                           	opt stack 0
  1783  00002D                     diet_press@previous:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x2C
  1787  00002D                     	ds	1
  1788  00002E                     which_drawer@sum:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x2D
  1792  00002E                     	ds	1
  1793  00002F                     displayLogs@month:
  1794                           	opt stack 0
  1795  00002F                     food_press@tally:
  1796                           	opt stack 0
  1797  00002F                     diet_press@i:
  1798                           	opt stack 0
  1799                           
  1800                           ; 2 bytes @ 0x2E
  1801  00002F                     	ds	1
  1802  000030                     which_drawer@backCheck:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0x2F
  1806  000030                     	ds	1
  1807  000031                     displayLogs@day:
  1808                           	opt stack 0
  1809  000031                     food_press@backCheck:
  1810                           	opt stack 0
  1811  000031                     diet_press@backCheck:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x30
  1815  000031                     	ds	1
  1816  000032                     which_drawer@count:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x31
  1820  000032                     	ds	1
  1821  000033                     displayLogs@roundPieces:
  1822                           	opt stack 0
  1823  000033                     food_press@isValid:
  1824                           	opt stack 0
  1825  000033                     diet_press@count:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x32
  1829  000033                     	ds	1
  1830  000034                     which_drawer@keypress:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x33
  1834  000034                     	ds	1
  1835  000035                     displayLogs@flatPieces:
  1836                           	opt stack 0
  1837  000035                     food_press@count:
  1838                           	opt stack 0
  1839  000035                     diet_press@sum:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x34
  1843  000035                     	ds	2
  1844  000037                     food_press@keypress:
  1845                           	opt stack 0
  1846  000037                     diet_press@keypress:
  1847                           	opt stack 0
  1848  000037                     displayLogs@longPieces:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x36
  1852  000037                     	ds	1
  1853  000038                     food_press@foodTable:
  1854                           	opt stack 0
  1855  000038                     diet_press@dietTable:
  1856                           	opt stack 0
  1857                           
  1858                           ; 8 bytes @ 0x37
  1859  000038                     	ds	1
  1860  000039                     displayLogs@minutes:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x38
  1864  000039                     	ds	2
  1865  00003B                     displayLogs@seconds:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x3A
  1869  00003B                     	ds	2
  1870  00003D                     displayLogs@dietType:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x3C
  1874  00003D                     	ds	2
  1875  00003F                     displayLogs@foodType:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x3E
  1879  00003F                     	ds	2
  1880  000041                     displayLogs@keypress3:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x40
  1884  000041                     	ds	1
  1885  000042                     displayLogs@operationTime:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x41
  1889  000042                     	ds	2
  1890  000044                     displayLogs@drawerNumber:
  1891                           	opt stack 0
  1892                           
  1893                           ; 2 bytes @ 0x43
  1894  000044                     	ds	2
  1895  000046                     displayLogs@i:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x45
  1899  000046                     	ds	2
  1900  000048                     displayLogs@markedDrawer1:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x47
  1904  000048                     	ds	2
  1905  00004A                     displayLogs@markedDrawer2:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x49
  1909  00004A                     	ds	2
  1910  00004C                     displayLogs@markedDrawer3:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x4B
  1914  00004C                     	ds	2
  1915  00004E                     displayLogs@markedDrawer4:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0x4D
  1919  00004E                     	ds	2
  1920  000050                     displayLogs@n:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x4F
  1924  000050                     	ds	2
  1925  000052                     ?_viewLogs:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x51
  1929  000052                     	ds	2
  1930  000054                     ??_viewLogs:
  1931                           
  1932                           ; 1 bytes @ 0x53
  1933  000054                     	ds	2
  1934  000056                     viewLogs@checkLog:
  1935                           	opt stack 0
  1936                           
  1937                           ; 2 bytes @ 0x55
  1938  000056                     	ds	2
  1939  000058                     viewLogs@returnVal:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0x57
  1943  000058                     	ds	2
  1944  00005A                     viewLogs@logView:
  1945                           	opt stack 0
  1946                           
  1947                           ; 2 bytes @ 0x59
  1948  00005A                     	ds	2
  1949  00005C                     viewLogs@logNumber:
  1950                           	opt stack 0
  1951                           
  1952                           ; 1 bytes @ 0x5B
  1953  00005C                     	ds	1
  1954  00005D                     viewLogs@keypress2:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0x5C
  1958  00005D                     	ds	1
  1959  00005E                     ?_standbyMode:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x5D
  1963  00005E                     	ds	2
  1964  000060                     ??_standbyMode:
  1965                           
  1966                           ; 1 bytes @ 0x5F
  1967  000060                     	ds	2
  1968  000062                     ??_main:
  1969                           
  1970                           ; 1 bytes @ 0x61
  1971  000062                     	ds	2
  1972  000064                     main@operationMode:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x63
  1976  000064                     	ds	2
  1977  000066                     main@checkEEPROM:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x65
  1981  000066                     	ds	2
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           postinc0	equ	0xFEE
  1987                           wreg	equ	0xFE8
  1988                           postdec1	equ	0xFE5
  1989                           fsr1l	equ	0xFE1
  1990                           
  1991 ;;
  1992 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1993 ;;
  1994 ;; *************** function _main *****************
  1995 ;; Defined at:
  1996 ;;		line 17 in file "main.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  checkEEPROM     2  101[COMRAM] unsigned int 
  2001 ;;  operationMod    2   99[COMRAM] unsigned int 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:        6 bytes
  2016 ;; Hardware stack levels required when called:    6
  2017 ;; This function calls:
  2018 ;;		_initEEPROM
  2019 ;;		_initLCD
  2020 ;;		_lcdInst
  2021 ;;		_mainOperation
  2022 ;;		_printf
  2023 ;;		_readEEPROM
  2024 ;;		_standbyMode
  2025 ;; This function is called by:
  2026 ;;		Startup code after reset
  2027 ;; This function uses a non-reentrant model
  2028 ;;
  2029                           
  2030                           	psect	text0
  2031  00C77A                     __ptext0:
  2032                           	opt stack 0
  2033  00C77A                     _main:
  2034                           	opt stack 25
  2035                           
  2036                           ;main.c: 23: LATA = 0x00;
  2037                           
  2038                           ;incstack = 0
  2039  00C77A  0E00               	movlw	0
  2040  00C77C  6E89               	movwf	3977,c	;volatile
  2041                           
  2042                           ;main.c: 24: LATB = 0x00;
  2043  00C77E  0E00               	movlw	0
  2044  00C780  6E8A               	movwf	3978,c	;volatile
  2045                           
  2046                           ;main.c: 25: LATC = 0x00;
  2047  00C782  0E00               	movlw	0
  2048  00C784  6E8B               	movwf	3979,c	;volatile
  2049                           
  2050                           ;main.c: 26: LATD = 0x00;
  2051  00C786  0E00               	movlw	0
  2052  00C788  6E8C               	movwf	3980,c	;volatile
  2053                           
  2054                           ;main.c: 27: LATE = 0x00;
  2055  00C78A  0E00               	movlw	0
  2056  00C78C  6E8D               	movwf	3981,c	;volatile
  2057                           
  2058                           ;main.c: 31: TRISA = 0xFF;
  2059  00C78E  6892               	setf	3986,c	;volatile
  2060                           
  2061                           ;main.c: 32: TRISB = 0xFF;
  2062  00C790  6893               	setf	3987,c	;volatile
  2063                           
  2064                           ;main.c: 33: TRISC = 0x00;
  2065  00C792  0E00               	movlw	0
  2066  00C794  6E94               	movwf	3988,c	;volatile
  2067                           
  2068                           ;main.c: 34: TRISD = 0x00;
  2069  00C796  0E00               	movlw	0
  2070  00C798  6E95               	movwf	3989,c	;volatile
  2071                           
  2072                           ;main.c: 35: TRISE = 0x00;
  2073  00C79A  0E00               	movlw	0
  2074  00C79C  6E96               	movwf	3990,c	;volatile
  2075                           
  2076                           ;main.c: 38: ADCON0 = 0x00;
  2077  00C79E  0E00               	movlw	0
  2078  00C7A0  6EC2               	movwf	4034,c	;volatile
  2079                           
  2080                           ;main.c: 39: ADCON1 = 0b00001111;
  2081  00C7A2  0E0F               	movlw	15
  2082  00C7A4  6EC1               	movwf	4033,c	;volatile
  2083                           
  2084                           ;main.c: 42: initLCD();
  2085  00C7A6  EC04  F061         	call	_initLCD	;wreg free
  2086                           
  2087                           ;main.c: 43: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2088  00C7AA  0E01               	movlw	1
  2089  00C7AC  EC3F  F060         	call	_lcdInst
  2090  00C7B0  0EC3               	movlw	195
  2091  00C7B2  6E62               	movwf	??_main& (0+255),c
  2092  00C7B4  0ECD               	movlw	205
  2093  00C7B6                     u9177:
  2094  00C7B6  2EE8               	decfsz	wreg,f,c
  2095  00C7B8  D7FE               	bra	u9177
  2096  00C7BA  2E62               	decfsz	??_main& (0+255),f,c
  2097  00C7BC  D7FC               	bra	u9177
  2098  00C7BE  F000               	nop	
  2099                           
  2100                           ;main.c: 44: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2101  00C7C0  0E0C               	movlw	12
  2102  00C7C2  EC3F  F060         	call	_lcdInst
  2103                           
  2104                           ;main.c: 45: printf("Standby");
  2105  00C7C6  0E9C               	movlw	low STR_1
  2106  00C7C8  6E0D               	movwf	printf@f,c
  2107  00C7CA  0EFF               	movlw	high STR_1
  2108  00C7CC  6E0E               	movwf	printf@f+1,c
  2109  00C7CE  EC51  F06B         	call	_printf	;wreg free
  2110                           
  2111                           ;main.c: 47: unsigned int operationMode = 0;
  2112  00C7D2  0E00               	movlw	0
  2113  00C7D4  6E65               	movwf	main@operationMode+1,c
  2114  00C7D6  0E00               	movlw	0
  2115  00C7D8  6E64               	movwf	main@operationMode,c
  2116                           
  2117                           ;main.c: 59: unsigned int checkEEPROM = 0;
  2118  00C7DA  0E00               	movlw	0
  2119  00C7DC  6E67               	movwf	main@checkEEPROM+1,c
  2120  00C7DE  0E00               	movlw	0
  2121  00C7E0  6E66               	movwf	main@checkEEPROM,c
  2122                           
  2123                           ;main.c: 61: checkEEPROM = readEEPROM(251);
  2124  00C7E2  0EFB               	movlw	251
  2125  00C7E4  EC53  F060         	call	_readEEPROM
  2126  00C7E8  6E62               	movwf	??_main& (0+255),c
  2127  00C7EA  5062               	movf	??_main,w,c
  2128  00C7EC  6E66               	movwf	main@checkEEPROM,c
  2129  00C7EE  6A67               	clrf	main@checkEEPROM+1,c
  2130                           
  2131                           ;main.c: 63: if (checkEEPROM == 255){
  2132  00C7F0  2866               	incf	main@checkEEPROM,w,c
  2133  00C7F2  1067               	iorwf	main@checkEEPROM+1,w,c
  2134  00C7F4  A4D8               	btfss	status,2,c
  2135  00C7F6  D01F               	goto	l61
  2136                           
  2137                           ;main.c: 64: initEEPROM();
  2138  00C7F8  EC89  F060         	call	_initEEPROM	;wreg free
  2139                           
  2140                           ;main.c: 65: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2141  00C7FC  0E01               	movlw	1
  2142  00C7FE  EC3F  F060         	call	_lcdInst
  2143  00C802  0EC3               	movlw	195
  2144  00C804  6E62               	movwf	??_main& (0+255),c
  2145  00C806  0ECD               	movlw	205
  2146  00C808                     u9187:
  2147  00C808  2EE8               	decfsz	wreg,f,c
  2148  00C80A  D7FE               	bra	u9187
  2149  00C80C  2E62               	decfsz	??_main& (0+255),f,c
  2150  00C80E  D7FC               	bra	u9187
  2151  00C810  F000               	nop	
  2152                           
  2153                           ;main.c: 66: printf("Clearing EEPROM");
  2154  00C812  0E31               	movlw	low STR_2
  2155  00C814  6E0D               	movwf	printf@f,c
  2156  00C816  0EFE               	movlw	high STR_2
  2157  00C818  6E0E               	movwf	printf@f+1,c
  2158  00C81A  EC51  F06B         	call	_printf	;wreg free
  2159                           
  2160                           ;main.c: 67: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2161  00C81E  0E66               	movlw	102
  2162  00C820  6E63               	movwf	(??_main+1)& (0+255),c
  2163  00C822  0E76               	movlw	118
  2164  00C824  6E62               	movwf	??_main& (0+255),c
  2165  00C826  0EC1               	movlw	193
  2166  00C828                     u9197:
  2167  00C828  2EE8               	decfsz	wreg,f,c
  2168  00C82A  D7FE               	bra	u9197
  2169  00C82C  2E62               	decfsz	??_main& (0+255),f,c
  2170  00C82E  D7FC               	bra	u9197
  2171  00C830  2E63               	decfsz	(??_main+1)& (0+255),f,c
  2172  00C832  D7FA               	bra	u9197
  2173  00C834  F000               	nop	
  2174  00C836                     l61:
  2175                           
  2176                           ;main.c: 68: }
  2177                           ;main.c: 71: operationMode = standbyMode();
  2178  00C836  ECF9  F077         	call	_standbyMode	;wreg free
  2179  00C83A  C05E  F064         	movff	?_standbyMode,main@operationMode
  2180  00C83E  C05F  F065         	movff	?_standbyMode+1,main@operationMode+1
  2181                           
  2182                           ;main.c: 73: if (operationMode == 1){
  2183  00C842  0464               	decf	main@operationMode,w,c
  2184  00C844  1065               	iorwf	main@operationMode+1,w,c
  2185  00C846  B4D8               	btfsc	status,2,c
  2186                           
  2187                           ;main.c: 74: mainOperation();
  2188  00C848  EC5D  F060         	call	_mainOperation	;wreg free
  2189                           
  2190                           ;main.c: 75: }
  2191                           ;main.c: 77: firstIteration += 1;
  2192  00C84C  4A70               	infsnz	_firstIteration,f,c
  2193  00C84E  2A71               	incf	_firstIteration+1,f,c
  2194                           
  2195                           ;main.c: 78: return;
  2196  00C850  EF00  F000         	goto	start
  2197  00C854                     __end_of_main:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           postinc0	equ	0xFEE
  2204                           wreg	equ	0xFE8
  2205                           postdec1	equ	0xFE5
  2206                           fsr1l	equ	0xFE1
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _standbyMode *****************
  2210 ;; Defined at:
  2211 ;;		line 1676 in file "standbyMode.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2216 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2217 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2218 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2219 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2220 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2221 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2222 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2223 ;;  time            7   96[BANK1 ] unsigned char [7]
  2224 ;;  i               2  136[BANK1 ] unsigned int 
  2225 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2226 ;;  food            2  132[BANK1 ] unsigned int 
  2227 ;;  drawer          2  130[BANK1 ] unsigned int 
  2228 ;;  diet            2  128[BANK1 ] unsigned int 
  2229 ;;  x               2  125[BANK1 ] unsigned int 
  2230 ;;  n               2  123[BANK1 ] unsigned int 
  2231 ;;  zero            2  121[BANK1 ] unsigned int 
  2232 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2233 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2234 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2235 ;;  lng             2  112[BANK1 ] unsigned int 
  2236 ;;  flat            2  110[BANK1 ] unsigned int 
  2237 ;;  round           2  108[BANK1 ] unsigned int 
  2238 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2239 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2240 ;;  keypress        1  107[BANK1 ] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  2   93[COMRAM] unsigned int 
  2243 ;; Registers used:
  2244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2250 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Totals:         4       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;Total ram usage:      142 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    5
  2257 ;; This function calls:
  2258 ;;		_I2C_Master_Init
  2259 ;;		_I2C_Master_Read
  2260 ;;		_I2C_Master_Start
  2261 ;;		_I2C_Master_Stop
  2262 ;;		_I2C_Master_Write
  2263 ;;		___wmul
  2264 ;;		_decode_diet
  2265 ;;		_diet_press
  2266 ;;		_food_press
  2267 ;;		_getFlat
  2268 ;;		_getLong
  2269 ;;		_getRound
  2270 ;;		_lcdInst
  2271 ;;		_printFoodInput
  2272 ;;		_printf
  2273 ;;		_readEEPROM
  2274 ;;		_shiftEEPROM
  2275 ;;		_viewLogs
  2276 ;;		_which_drawer
  2277 ;;		_writeEEPROM
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text1
  2284  00EFF2                     __ptext1:
  2285                           	opt stack 0
  2286  00EFF2                     _standbyMode:
  2287                           	opt stack 25
  2288                           
  2289                           ;standbyMode.c: 1677: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2290                           
  2291                           ;incstack = 0
  2292  00EFF2  EE21  F0DA         	lfsr	2,standbyMode@F3169
  2293  00EFF6  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2294  00EFFA  0E0F               	movlw	15
  2295  00EFFC                     u8411:
  2296  00EFFC  CFDB FFE3          	movff	plusw2,plusw1
  2297  00F000  06E8               	decf	wreg,f,c
  2298  00F002  E2FC               	bc	u8411
  2299                           
  2300                           ;standbyMode.c: 1678: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2301  00F004  EE21  F0CA         	lfsr	2,standbyMode@F3171
  2302  00F008  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2303  00F00C  0E0F               	movlw	15
  2304  00F00E                     u8421:
  2305  00F00E  CFDB FFE3          	movff	plusw2,plusw1
  2306  00F012  06E8               	decf	wreg,f,c
  2307  00F014  E2FC               	bc	u8421
  2308                           
  2309                           ;standbyMode.c: 1679: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2310  00F016  EE21  F0BA         	lfsr	2,standbyMode@F3173
  2311  00F01A  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2312  00F01E  0E0F               	movlw	15
  2313  00F020                     u8431:
  2314  00F020  CFDB FFE3          	movff	plusw2,plusw1
  2315  00F024  06E8               	decf	wreg,f,c
  2316  00F026  E2FC               	bc	u8431
  2317                           
  2318                           ;standbyMode.c: 1680: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2319  00F028  EE21  F0AA         	lfsr	2,standbyMode@F3175
  2320  00F02C  EE11  F020         	lfsr	1,standbyMode@longPieces
  2321  00F030  0E0F               	movlw	15
  2322  00F032                     u8441:
  2323  00F032  CFDB FFE3          	movff	plusw2,plusw1
  2324  00F036  06E8               	decf	wreg,f,c
  2325  00F038  E2FC               	bc	u8441
  2326                           
  2327                           ;standbyMode.c: 1681: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2328  00F03A  EE21  F09A         	lfsr	2,standbyMode@F3177
  2329  00F03E  EE11  F030         	lfsr	1,standbyMode@dietType
  2330  00F042  0E0F               	movlw	15
  2331  00F044                     u8451:
  2332  00F044  CFDB FFE3          	movff	plusw2,plusw1
  2333  00F048  06E8               	decf	wreg,f,c
  2334  00F04A  E2FC               	bc	u8451
  2335                           
  2336                           ;standbyMode.c: 1682: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  2337  00F04C  EE21  F08A         	lfsr	2,standbyMode@F3179
  2338  00F050  EE11  F040         	lfsr	1,standbyMode@foodType
  2339  00F054  0E0F               	movlw	15
  2340  00F056                     u8461:
  2341  00F056  CFDB FFE3          	movff	plusw2,plusw1
  2342  00F05A  06E8               	decf	wreg,f,c
  2343  00F05C  E2FC               	bc	u8461
  2344                           
  2345                           ;standbyMode.c: 1683: unsigned int drawerCount = 0;
  2346  00F05E  0E00               	movlw	0
  2347  00F060  0101               	movlb	1	; () banked
  2348  00F062  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2349  00F064  0E00               	movlw	0
  2350  00F066  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  2351                           
  2352                           ; BSR set to: 1
  2353                           ;standbyMode.c: 1684: unsigned int i = 0;
  2354  00F068  0E00               	movlw	0
  2355  00F06A  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  2356  00F06C  0E00               	movlw	0
  2357  00F06E  6F88               	movwf	standbyMode@i& (0+255),b
  2358                           
  2359                           ; BSR set to: 1
  2360                           ;standbyMode.c: 1685: unsigned int validDrawer = 0;
  2361  00F070  0E00               	movlw	0
  2362  00F072  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2363  00F074  0E00               	movlw	0
  2364  00F076  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  2365                           
  2366                           ; BSR set to: 1
  2367                           ;standbyMode.c: 1686: unsigned int zero = 0;
  2368  00F078  0E00               	movlw	0
  2369  00F07A  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  2370  00F07C  0E00               	movlw	0
  2371  00F07E  6F79               	movwf	standbyMode@zero& (0+255),b
  2372                           
  2373                           ; BSR set to: 1
  2374                           ;standbyMode.c: 1687: unsigned int firstIteration = 0;
  2375  00F080  0E00               	movlw	0
  2376  00F082  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2377  00F084  0E00               	movlw	0
  2378  00F086  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  2379                           
  2380                           ; BSR set to: 1
  2381                           ;standbyMode.c: 1688: unsigned int drawer = 0;
  2382  00F088  0E00               	movlw	0
  2383  00F08A  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  2384  00F08C  0E00               	movlw	0
  2385  00F08E  6F82               	movwf	standbyMode@drawer& (0+255),b
  2386                           
  2387                           ; BSR set to: 1
  2388                           ;standbyMode.c: 1689: unsigned int diet = 0;
  2389  00F090  0E00               	movlw	0
  2390  00F092  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  2391  00F094  0E00               	movlw	0
  2392  00F096  6F80               	movwf	standbyMode@diet& (0+255),b
  2393                           
  2394                           ; BSR set to: 1
  2395                           ;standbyMode.c: 1690: unsigned int food = 0;
  2396  00F098  0E00               	movlw	0
  2397  00F09A  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  2398  00F09C  0E00               	movlw	0
  2399  00F09E  6F84               	movwf	standbyMode@food& (0+255),b
  2400                           
  2401                           ; BSR set to: 1
  2402                           ;standbyMode.c: 1691: unsigned char logNumber = 0;
  2403  00F0A0  0E00               	movlw	0
  2404  00F0A2  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  2405                           
  2406                           ; BSR set to: 1
  2407                           ;standbyMode.c: 1692: unsigned int n = 0;
  2408  00F0A4  0E00               	movlw	0
  2409  00F0A6  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  2410  00F0A8  0E00               	movlw	0
  2411  00F0AA  6F7B               	movwf	standbyMode@n& (0+255),b
  2412                           
  2413                           ; BSR set to: 1
  2414                           ;standbyMode.c: 1693: unsigned int round = 0;
  2415  00F0AC  0E00               	movlw	0
  2416  00F0AE  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  2417  00F0B0  0E00               	movlw	0
  2418  00F0B2  6F6C               	movwf	standbyMode@round& (0+255),b
  2419                           
  2420                           ; BSR set to: 1
  2421                           ;standbyMode.c: 1694: unsigned int flat = 0;
  2422  00F0B4  0E00               	movlw	0
  2423  00F0B6  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  2424  00F0B8  0E00               	movlw	0
  2425  00F0BA  6F6E               	movwf	standbyMode@flat& (0+255),b
  2426                           
  2427                           ; BSR set to: 1
  2428                           ;standbyMode.c: 1695: unsigned int lng = 0;
  2429  00F0BC  0E00               	movlw	0
  2430  00F0BE  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  2431  00F0C0  0E00               	movlw	0
  2432  00F0C2  6F70               	movwf	standbyMode@lng& (0+255),b
  2433                           
  2434                           ; BSR set to: 1
  2435                           ;standbyMode.c: 1696: unsigned int decodedDiet = 0;
  2436  00F0C4  0E00               	movlw	0
  2437  00F0C6  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2438  00F0C8  0E00               	movlw	0
  2439  00F0CA  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  2440                           
  2441                           ; BSR set to: 1
  2442                           ;standbyMode.c: 1697: unsigned int storedFoodType = 0;
  2443  00F0CC  0E00               	movlw	0
  2444  00F0CE  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  2445  00F0D0  0E00               	movlw	0
  2446  00F0D2  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  2447                           
  2448                           ; BSR set to: 1
  2449                           ;standbyMode.c: 1699: unsigned char time[7];
  2450                           ;standbyMode.c: 1700: unsigned int x = 0;
  2451  00F0D4  0E00               	movlw	0
  2452  00F0D6  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2453  00F0D8  0E00               	movlw	0
  2454  00F0DA  6F7D               	movwf	standbyMode@x& (0+255),b
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;standbyMode.c: 1703: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2458  00F0DC  0E01               	movlw	1
  2459  00F0DE  EC3F  F060         	call	_lcdInst
  2460  00F0E2  0EC3               	movlw	195
  2461  00F0E4  6E60               	movwf	??_standbyMode& (0+255),c
  2462  00F0E6  0ECD               	movlw	205
  2463  00F0E8                     u9207:
  2464  00F0E8  2EE8               	decfsz	wreg,f,c
  2465  00F0EA  D7FE               	bra	u9207
  2466  00F0EC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2467  00F0EE  D7FC               	bra	u9207
  2468  00F0F0  F000               	nop	
  2469                           
  2470                           ;standbyMode.c: 1704: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2471  00F0F2  0E0C               	movlw	12
  2472  00F0F4  EC3F  F060         	call	_lcdInst
  2473                           
  2474                           ;standbyMode.c: 1705: printf("Standby");
  2475  00F0F8  0E9C               	movlw	low STR_1
  2476  00F0FA  6E0D               	movwf	printf@f,c
  2477  00F0FC  0EFF               	movlw	high STR_1
  2478  00F0FE  6E0E               	movwf	printf@f+1,c
  2479  00F100  EC51  F06B         	call	_printf	;wreg free
  2480                           
  2481                           ;standbyMode.c: 1706: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2482  00F104  0E66               	movlw	102
  2483  00F106  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2484  00F108  0E76               	movlw	118
  2485  00F10A  6E60               	movwf	??_standbyMode& (0+255),c
  2486  00F10C  0EC1               	movlw	193
  2487  00F10E                     u9217:
  2488  00F10E  2EE8               	decfsz	wreg,f,c
  2489  00F110  D7FE               	bra	u9217
  2490  00F112  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2491  00F114  D7FC               	bra	u9217
  2492  00F116  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2493  00F118  D7FA               	bra	u9217
  2494  00F11A  F000               	nop	
  2495                           
  2496                           ;standbyMode.c: 1707: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2497  00F11C  0E01               	movlw	1
  2498  00F11E  EC3F  F060         	call	_lcdInst
  2499  00F122  0EC3               	movlw	195
  2500  00F124  6E60               	movwf	??_standbyMode& (0+255),c
  2501  00F126  0ECD               	movlw	205
  2502  00F128                     u9227:
  2503  00F128  2EE8               	decfsz	wreg,f,c
  2504  00F12A  D7FE               	bra	u9227
  2505  00F12C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2506  00F12E  D7FC               	bra	u9227
  2507  00F130  F000               	nop	
  2508                           
  2509                           ;standbyMode.c: 1708: printf("Press any key to");
  2510  00F132  0E7F               	movlw	low STR_38
  2511  00F134  6E0D               	movwf	printf@f,c
  2512  00F136  0EFD               	movlw	high STR_38
  2513  00F138  6E0E               	movwf	printf@f+1,c
  2514  00F13A  EC51  F06B         	call	_printf	;wreg free
  2515                           
  2516                           ;standbyMode.c: 1709: lcdInst(0xC0);;
  2517  00F13E  0EC0               	movlw	192
  2518  00F140  EC3F  F060         	call	_lcdInst
  2519                           
  2520                           ;standbyMode.c: 1710: printf("begin operation.");
  2521  00F144  0E4C               	movlw	low STR_75
  2522  00F146  6E0D               	movwf	printf@f,c
  2523  00F148  0EFD               	movlw	high STR_75
  2524  00F14A  6E0E               	movwf	printf@f+1,c
  2525  00F14C  EC51  F06B         	call	_printf	;wreg free
  2526  00F150                     
  2527                           ;standbyMode.c: 1713: continue;
  2528  00F150  A281               	btfss	3969,1,c	;volatile
  2529  00F152  D7FE               	goto	l757
  2530                           
  2531                           ;standbyMode.c: 1714: }
  2532                           ;standbyMode.c: 1717: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2533  00F154  0E01               	movlw	1
  2534  00F156  EC3F  F060         	call	_lcdInst
  2535  00F15A  0EC3               	movlw	195
  2536  00F15C  6E60               	movwf	??_standbyMode& (0+255),c
  2537  00F15E  0ECD               	movlw	205
  2538  00F160                     u9237:
  2539  00F160  2EE8               	decfsz	wreg,f,c
  2540  00F162  D7FE               	bra	u9237
  2541  00F164  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2542  00F166  D7FC               	bra	u9237
  2543  00F168  F000               	nop	
  2544                           
  2545                           ;standbyMode.c: 1718: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2546  00F16A  0E0C               	movlw	12
  2547  00F16C  EC3F  F060         	call	_lcdInst
  2548                           
  2549                           ;standbyMode.c: 1719: printf("Welcome to your");
  2550  00F170  0E11               	movlw	low STR_76
  2551  00F172  6E0D               	movwf	printf@f,c
  2552  00F174  0EFE               	movlw	high STR_76
  2553  00F176  6E0E               	movwf	printf@f+1,c
  2554  00F178  EC51  F06B         	call	_printf	;wreg free
  2555                           
  2556                           ;standbyMode.c: 1720: lcdInst(0xC0);;
  2557  00F17C  0EC0               	movlw	192
  2558  00F17E  EC3F  F060         	call	_lcdInst
  2559                           
  2560                           ;standbyMode.c: 1721: printf("cabinet sorter!");
  2561  00F182  0EA1               	movlw	low STR_77
  2562  00F184  6E0D               	movwf	printf@f,c
  2563  00F186  0EFD               	movlw	high STR_77
  2564  00F188  6E0E               	movwf	printf@f+1,c
  2565  00F18A  EC51  F06B         	call	_printf	;wreg free
  2566                           
  2567                           ;standbyMode.c: 1722: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2568  00F18E  0E33               	movlw	51
  2569  00F190  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2570  00F192  0EBB               	movlw	187
  2571  00F194  6E60               	movwf	??_standbyMode& (0+255),c
  2572  00F196  0EE0               	movlw	224
  2573  00F198                     u9247:
  2574  00F198  2EE8               	decfsz	wreg,f,c
  2575  00F19A  D7FE               	bra	u9247
  2576  00F19C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2577  00F19E  D7FC               	bra	u9247
  2578  00F1A0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2579  00F1A2  D7FA               	bra	u9247
  2580                           
  2581                           ;standbyMode.c: 1725: writeEEPROM(250, 3);
  2582  00F1A4  0E03               	movlw	3
  2583  00F1A6  6E01               	movwf	writeEEPROM@data,c
  2584  00F1A8  0EFA               	movlw	250
  2585  00F1AA  ECAF  F060         	call	_writeEEPROM
  2586                           
  2587                           ;standbyMode.c: 1726: writeEEPROM(0, 18);
  2588  00F1AE  0E12               	movlw	18
  2589  00F1B0  6E01               	movwf	writeEEPROM@data,c
  2590  00F1B2  0E00               	movlw	0
  2591  00F1B4  ECAF  F060         	call	_writeEEPROM
  2592                           
  2593                           ;standbyMode.c: 1727: writeEEPROM(1, 2);
  2594  00F1B8  0E02               	movlw	2
  2595  00F1BA  6E01               	movwf	writeEEPROM@data,c
  2596  00F1BC  0E01               	movlw	1
  2597  00F1BE  ECAF  F060         	call	_writeEEPROM
  2598                           
  2599                           ;standbyMode.c: 1728: writeEEPROM(2, 28);
  2600  00F1C2  0E1C               	movlw	28
  2601  00F1C4  6E01               	movwf	writeEEPROM@data,c
  2602  00F1C6  0E02               	movlw	2
  2603  00F1C8  ECAF  F060         	call	_writeEEPROM
  2604                           
  2605                           ;standbyMode.c: 1729: writeEEPROM(3, 91);
  2606  00F1CC  0E5B               	movlw	91
  2607  00F1CE  6E01               	movwf	writeEEPROM@data,c
  2608  00F1D0  0E03               	movlw	3
  2609  00F1D2  ECAF  F060         	call	_writeEEPROM
  2610                           
  2611                           ;standbyMode.c: 1730: writeEEPROM(4, 3);
  2612  00F1D6  0E03               	movlw	3
  2613  00F1D8  6E01               	movwf	writeEEPROM@data,c
  2614  00F1DA  0E04               	movlw	4
  2615  00F1DC  ECAF  F060         	call	_writeEEPROM
  2616                           
  2617                           ;standbyMode.c: 1731: writeEEPROM(5, 15);
  2618  00F1E0  0E0F               	movlw	15
  2619  00F1E2  6E01               	movwf	writeEEPROM@data,c
  2620  00F1E4  0E05               	movlw	5
  2621  00F1E6  ECAF  F060         	call	_writeEEPROM
  2622                           
  2623                           ;standbyMode.c: 1732: writeEEPROM(6, 8);
  2624  00F1EA  0E08               	movlw	8
  2625  00F1EC  6E01               	movwf	writeEEPROM@data,c
  2626  00F1EE  0E06               	movlw	6
  2627  00F1F0  ECAF  F060         	call	_writeEEPROM
  2628                           
  2629                           ;standbyMode.c: 1733: writeEEPROM(7, 12);
  2630  00F1F4  0E0C               	movlw	12
  2631  00F1F6  6E01               	movwf	writeEEPROM@data,c
  2632  00F1F8  0E07               	movlw	7
  2633  00F1FA  ECAF  F060         	call	_writeEEPROM
  2634                           
  2635                           ;standbyMode.c: 1734: writeEEPROM(8, 1);
  2636  00F1FE  0E01               	movlw	1
  2637  00F200  6E01               	movwf	writeEEPROM@data,c
  2638  00F202  0E08               	movlw	8
  2639  00F204  ECAF  F060         	call	_writeEEPROM
  2640                           
  2641                           ;standbyMode.c: 1735: writeEEPROM(9, 13);
  2642  00F208  0E0D               	movlw	13
  2643  00F20A  6E01               	movwf	writeEEPROM@data,c
  2644  00F20C  0E09               	movlw	9
  2645  00F20E  ECAF  F060         	call	_writeEEPROM
  2646                           
  2647                           ;standbyMode.c: 1736: writeEEPROM(10, 0);
  2648  00F212  0E00               	movlw	0
  2649  00F214  6E01               	movwf	writeEEPROM@data,c
  2650  00F216  0E0A               	movlw	10
  2651  00F218  ECAF  F060         	call	_writeEEPROM
  2652                           
  2653                           ;standbyMode.c: 1746: I2C_Master_Init(100000);
  2654  00F21C  0EA0               	movlw	160
  2655  00F21E  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  2656  00F220  0E86               	movlw	134
  2657  00F222  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  2658  00F224  0E01               	movlw	1
  2659  00F226  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  2660  00F228  0E00               	movlw	0
  2661  00F22A  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  2662  00F22C  EC7C  F061         	call	_I2C_Master_Init	;wreg free
  2663                           
  2664                           ;standbyMode.c: 1747: I2C_Master_Start();
  2665  00F230  EC29  F060         	call	_I2C_Master_Start	;wreg free
  2666                           
  2667                           ;standbyMode.c: 1748: I2C_Master_Write(0b11010001);
  2668  00F234  0E00               	movlw	0
  2669  00F236  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  2670  00F238  0ED1               	movlw	209
  2671  00F23A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  2672  00F23C  EC31  F060         	call	_I2C_Master_Write	;wreg free
  2673                           
  2674                           ;standbyMode.c: 1749: for(x = 0; x < 6; x++){
  2675  00F240  0E00               	movlw	0
  2676  00F242  0101               	movlb	1	; () banked
  2677  00F244  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2678  00F246  0E00               	movlw	0
  2679  00F248  6F7D               	movwf	standbyMode@x& (0+255),b
  2680  00F24A                     l7096:
  2681                           
  2682                           ; BSR set to: 1
  2683  00F24A  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  2684  00F24C  E112               	bnz	l7106
  2685  00F24E  0E06               	movlw	6
  2686  00F250  5D7D               	subwf	standbyMode@x& (0+255),w,b
  2687  00F252  B0D8               	btfsc	status,0,c
  2688  00F254  D00E               	goto	u8490
  2689                           
  2690                           ; BSR set to: 1
  2691                           ;standbyMode.c: 1750: time[x] = I2C_Master_Read(0);
  2692                           
  2693                           ; BSR set to: 1
  2694                           
  2695                           ; BSR set to: 1
  2696  00F256  0E60               	movlw	low standbyMode@time
  2697  00F258  257D               	addwf	standbyMode@x& (0+255),w,b
  2698  00F25A  6ED9               	movwf	fsr2l,c
  2699  00F25C  0E01               	movlw	high standbyMode@time
  2700  00F25E  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  2701  00F260  6EDA               	movwf	fsr2h,c
  2702  00F262  0E00               	movlw	0
  2703  00F264  EC77  F060         	call	_I2C_Master_Read
  2704  00F268  6EDF               	movwf	indf2,c
  2705  00F26A  0101               	movlb	1	; () banked
  2706  00F26C  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  2707  00F26E  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  2708  00F270  D7EC               	goto	l7096
  2709  00F272                     u8490:
  2710  00F272                     l7106:
  2711                           
  2712                           ; BSR set to: 1
  2713                           ;standbyMode.c: 1751: }
  2714                           ;standbyMode.c: 1752: time[6] = I2C_Master_Read(1);
  2715  00F272  0E01               	movlw	1
  2716  00F274  EC77  F060         	call	_I2C_Master_Read
  2717  00F278  0101               	movlb	1	; () banked
  2718  00F27A  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  2719                           
  2720                           ;standbyMode.c: 1753: I2C_Master_Stop();
  2721  00F27C  EC2D  F060         	call	_I2C_Master_Stop	;wreg free
  2722                           
  2723                           ;standbyMode.c: 1755: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2724  00F280  0E01               	movlw	1
  2725  00F282  EC3F  F060         	call	_lcdInst
  2726  00F286  0EC3               	movlw	195
  2727  00F288  6E60               	movwf	??_standbyMode& (0+255),c
  2728  00F28A  0ECD               	movlw	205
  2729  00F28C                     u9257:
  2730  00F28C  2EE8               	decfsz	wreg,f,c
  2731  00F28E  D7FE               	bra	u9257
  2732  00F290  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2733  00F292  D7FC               	bra	u9257
  2734  00F294  F000               	nop	
  2735                           
  2736                           ;standbyMode.c: 1756: printf("Current date");
  2737  00F296  0E18               	movlw	low STR_78
  2738  00F298  6E0D               	movwf	printf@f,c
  2739  00F29A  0EFF               	movlw	high STR_78
  2740  00F29C  6E0E               	movwf	printf@f+1,c
  2741  00F29E  EC51  F06B         	call	_printf	;wreg free
  2742                           
  2743                           ;standbyMode.c: 1757: lcdInst(0xC0);;
  2744  00F2A2  0EC0               	movlw	192
  2745  00F2A4  EC3F  F060         	call	_lcdInst
  2746                           
  2747                           ;standbyMode.c: 1758: printf("and time:");
  2748  00F2A8  0E67               	movlw	low STR_79
  2749  00F2AA  6E0D               	movwf	printf@f,c
  2750  00F2AC  0EFF               	movlw	high STR_79
  2751  00F2AE  6E0E               	movwf	printf@f+1,c
  2752  00F2B0  EC51  F06B         	call	_printf	;wreg free
  2753                           
  2754                           ;standbyMode.c: 1759: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2755  00F2B4  0E66               	movlw	102
  2756  00F2B6  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2757  00F2B8  0E76               	movlw	118
  2758  00F2BA  6E60               	movwf	??_standbyMode& (0+255),c
  2759  00F2BC  0EC1               	movlw	193
  2760  00F2BE                     u9267:
  2761  00F2BE  2EE8               	decfsz	wreg,f,c
  2762  00F2C0  D7FE               	bra	u9267
  2763  00F2C2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2764  00F2C4  D7FC               	bra	u9267
  2765  00F2C6  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2766  00F2C8  D7FA               	bra	u9267
  2767  00F2CA  F000               	nop	
  2768                           
  2769                           ;standbyMode.c: 1761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2770  00F2CC  0E01               	movlw	1
  2771  00F2CE  EC3F  F060         	call	_lcdInst
  2772  00F2D2  0EC3               	movlw	195
  2773  00F2D4  6E60               	movwf	??_standbyMode& (0+255),c
  2774  00F2D6  0ECD               	movlw	205
  2775  00F2D8                     u9277:
  2776  00F2D8  2EE8               	decfsz	wreg,f,c
  2777  00F2DA  D7FE               	bra	u9277
  2778  00F2DC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2779  00F2DE  D7FC               	bra	u9277
  2780  00F2E0  F000               	nop	
  2781                           
  2782                           ;standbyMode.c: 1762: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  2783  00F2E2  0E8C               	movlw	low STR_80
  2784  00F2E4  6E0D               	movwf	printf@f,c
  2785  00F2E6  0EFE               	movlw	high STR_80
  2786  00F2E8  6E0E               	movwf	printf@f+1,c
  2787  00F2EA  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  2788  00F2EE  6A10               	clrf	?_printf+3,c
  2789  00F2F0  C165  F011         	movff	standbyMode@time+5,?_printf+4
  2790  00F2F4  6A12               	clrf	?_printf+5,c
  2791  00F2F6  C164  F013         	movff	standbyMode@time+4,?_printf+6
  2792  00F2FA  6A14               	clrf	?_printf+7,c
  2793  00F2FC  EC51  F06B         	call	_printf	;wreg free
  2794                           
  2795                           ;standbyMode.c: 1763: lcdInst(0xC0);;
  2796  00F300  0EC0               	movlw	192
  2797  00F302  EC3F  F060         	call	_lcdInst
  2798                           
  2799                           ;standbyMode.c: 1764: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  2800  00F306  0E9B               	movlw	low STR_81
  2801  00F308  6E0D               	movwf	printf@f,c
  2802  00F30A  0EFE               	movlw	high STR_81
  2803  00F30C  6E0E               	movwf	printf@f+1,c
  2804  00F30E  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  2805  00F312  6A10               	clrf	?_printf+3,c
  2806  00F314  C161  F011         	movff	standbyMode@time+1,?_printf+4
  2807  00F318  6A12               	clrf	?_printf+5,c
  2808  00F31A  C160  F013         	movff	standbyMode@time,?_printf+6
  2809  00F31E  6A14               	clrf	?_printf+7,c
  2810  00F320  EC51  F06B         	call	_printf	;wreg free
  2811                           
  2812                           ;standbyMode.c: 1765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2813  00F324  0E66               	movlw	102
  2814  00F326  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2815  00F328  0E76               	movlw	118
  2816  00F32A  6E60               	movwf	??_standbyMode& (0+255),c
  2817  00F32C  0EC1               	movlw	193
  2818  00F32E                     u9287:
  2819  00F32E  2EE8               	decfsz	wreg,f,c
  2820  00F330  D7FE               	bra	u9287
  2821  00F332  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2822  00F334  D7FC               	bra	u9287
  2823  00F336  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2824  00F338  D7FA               	bra	u9287
  2825  00F33A  F000               	nop	
  2826                           
  2827                           ;standbyMode.c: 1768: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2828  00F33C  0E01               	movlw	1
  2829  00F33E  EC3F  F060         	call	_lcdInst
  2830  00F342  0EC3               	movlw	195
  2831  00F344  6E60               	movwf	??_standbyMode& (0+255),c
  2832  00F346  0ECD               	movlw	205
  2833  00F348                     u9297:
  2834  00F348  2EE8               	decfsz	wreg,f,c
  2835  00F34A  D7FE               	bra	u9297
  2836  00F34C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2837  00F34E  D7FC               	bra	u9297
  2838  00F350  F000               	nop	
  2839                           
  2840                           ;standbyMode.c: 1769: printf("Press # to");
  2841  00F352  0E5C               	movlw	low STR_82
  2842  00F354  6E0D               	movwf	printf@f,c
  2843  00F356  0EFF               	movlw	high STR_82
  2844  00F358  6E0E               	movwf	printf@f+1,c
  2845  00F35A  EC51  F06B         	call	_printf	;wreg free
  2846                           
  2847                           ;standbyMode.c: 1770: lcdInst(0xC0);;
  2848  00F35E  0EC0               	movlw	192
  2849  00F360  EC3F  F060         	call	_lcdInst
  2850                           
  2851                           ;standbyMode.c: 1771: printf("view logs,");
  2852  00F364  0E25               	movlw	low STR_83
  2853  00F366  6E0D               	movwf	printf@f,c
  2854  00F368  0EFF               	movlw	high STR_83
  2855  00F36A  6E0E               	movwf	printf@f+1,c
  2856  00F36C  EC51  F06B         	call	_printf	;wreg free
  2857                           
  2858                           ;standbyMode.c: 1772: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2859  00F370  0E66               	movlw	102
  2860  00F372  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2861  00F374  0E76               	movlw	118
  2862  00F376  6E60               	movwf	??_standbyMode& (0+255),c
  2863  00F378  0EC1               	movlw	193
  2864  00F37A                     u9307:
  2865  00F37A  2EE8               	decfsz	wreg,f,c
  2866  00F37C  D7FE               	bra	u9307
  2867  00F37E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2868  00F380  D7FC               	bra	u9307
  2869  00F382  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2870  00F384  D7FA               	bra	u9307
  2871  00F386  F000               	nop	
  2872                           
  2873                           ;standbyMode.c: 1773: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2874  00F388  0E01               	movlw	1
  2875  00F38A  EC3F  F060         	call	_lcdInst
  2876  00F38E  0EC3               	movlw	195
  2877  00F390  6E60               	movwf	??_standbyMode& (0+255),c
  2878  00F392  0ECD               	movlw	205
  2879  00F394                     u9317:
  2880  00F394  2EE8               	decfsz	wreg,f,c
  2881  00F396  D7FE               	bra	u9317
  2882  00F398  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2883  00F39A  D7FC               	bra	u9317
  2884  00F39C  F000               	nop	
  2885                           
  2886                           ;standbyMode.c: 1774: printf("or press D to");
  2887  00F39E  0EE3               	movlw	low STR_84
  2888  00F3A0  6E0D               	movwf	printf@f,c
  2889  00F3A2  0EFE               	movlw	high STR_84
  2890  00F3A4  6E0E               	movwf	printf@f+1,c
  2891  00F3A6  EC51  F06B         	call	_printf	;wreg free
  2892                           
  2893                           ;standbyMode.c: 1775: lcdInst(0xC0);;
  2894  00F3AA  0EC0               	movlw	192
  2895  00F3AC  EC3F  F060         	call	_lcdInst
  2896                           
  2897                           ;standbyMode.c: 1776: printf("begin operation.");
  2898  00F3B0  0E4C               	movlw	low STR_75
  2899  00F3B2  6E0D               	movwf	printf@f,c
  2900  00F3B4  0EFD               	movlw	high STR_75
  2901  00F3B6  6E0E               	movwf	printf@f+1,c
  2902  00F3B8  EC51  F06B         	call	_printf	;wreg free
  2903  00F3BC  A281               	btfss	3969,1,c	;volatile
  2904  00F3BE  D7FE               	goto	l762
  2905                           
  2906                           ;standbyMode.c: 1779: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2907  00F3C0  3881               	swapf	3969,w,c	;volatile
  2908  00F3C2  0B0F               	andlw	15
  2909  00F3C4  0B0F               	andlw	15
  2910  00F3C6  0101               	movlb	1	; () banked
  2911  00F3C8  6F6B               	movwf	standbyMode@keypress& (0+255),b
  2912  00F3CA                     
  2913                           ; BSR set to: 1
  2914  00F3CA  B281               	btfsc	3969,1,c	;volatile
  2915  00F3CC  D7FE               	goto	l765
  2916                           
  2917                           ;standbyMode.c: 1782: if (keypress == 15){
  2918  00F3CE  0E0F               	movlw	15
  2919  00F3D0  0101               	movlb	1	; () banked
  2920  00F3D2  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  2921  00F3D4  A4D8               	btfss	status,2,c
  2922  00F3D6  D3EE               	goto	l767
  2923  00F3D8                     u8520:
  2924                           
  2925                           ; BSR set to: 1
  2926                           ;standbyMode.c: 1826: if (firstIteration == 1){
  2927                           
  2928                           ; BSR set to: 1
  2929                           
  2930                           ;standbyMode.c: 1825: while (1){
  2931  00F3D8  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  2932  00F3DA  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  2933  00F3DC  A4D8               	btfss	status,2,c
  2934  00F3DE  D1D9               	goto	l769
  2935  00F3E0                     u8530:
  2936                           
  2937                           ; BSR set to: 1
  2938                           ;standbyMode.c: 1829: if(drawerCount >= 8){
  2939                           
  2940                           ; BSR set to: 1
  2941                           
  2942                           ;standbyMode.c: 1827: while (1){
  2943  00F3E0  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  2944  00F3E2  E104               	bnz	u8540
  2945  00F3E4  0E08               	movlw	8
  2946  00F3E6  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  2947  00F3E8  A0D8               	btfss	status,0,c
  2948  00F3EA  D02A               	goto	l771
  2949  00F3EC                     u8540:
  2950                           
  2951                           ; BSR set to: 1
  2952                           ;standbyMode.c: 1830: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2953  00F3EC  0E01               	movlw	1
  2954  00F3EE  EC3F  F060         	call	_lcdInst
  2955  00F3F2  0EC3               	movlw	195
  2956  00F3F4  6E60               	movwf	??_standbyMode& (0+255),c
  2957  00F3F6  0ECD               	movlw	205
  2958  00F3F8                     u9327:
  2959  00F3F8  2EE8               	decfsz	wreg,f,c
  2960  00F3FA  D7FE               	bra	u9327
  2961  00F3FC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2962  00F3FE  D7FC               	bra	u9327
  2963  00F400  F000               	nop	
  2964                           
  2965                           ;standbyMode.c: 1831: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2966  00F402  0E0C               	movlw	12
  2967  00F404  EC3F  F060         	call	_lcdInst
  2968                           
  2969                           ;standbyMode.c: 1832: printf("Maximum of 8");
  2970  00F408  0EFE               	movlw	low STR_86
  2971  00F40A  6E0D               	movwf	printf@f,c
  2972  00F40C  0EFE               	movlw	high STR_86
  2973  00F40E  6E0E               	movwf	printf@f+1,c
  2974  00F410  EC51  F06B         	call	_printf	;wreg free
  2975                           
  2976                           ;standbyMode.c: 1833: lcdInst(0xC0);;
  2977  00F414  0EC0               	movlw	192
  2978  00F416  EC3F  F060         	call	_lcdInst
  2979                           
  2980                           ;standbyMode.c: 1834: printf("drawers reached!");
  2981  00F41A  0E3B               	movlw	low STR_87
  2982  00F41C  6E0D               	movwf	printf@f,c
  2983  00F41E  0EFD               	movlw	high STR_87
  2984  00F420  6E0E               	movwf	printf@f+1,c
  2985  00F422  EC51  F06B         	call	_printf	;wreg free
  2986                           
  2987                           ;standbyMode.c: 1835: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2988  00F426  0E66               	movlw	102
  2989  00F428  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2990  00F42A  0E76               	movlw	118
  2991  00F42C  6E60               	movwf	??_standbyMode& (0+255),c
  2992  00F42E  0EC1               	movlw	193
  2993  00F430                     u9337:
  2994  00F430  2EE8               	decfsz	wreg,f,c
  2995  00F432  D7FE               	bra	u9337
  2996  00F434  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2997  00F436  D7FC               	bra	u9337
  2998  00F438  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2999  00F43A  D7FA               	bra	u9337
  3000  00F43C  F000               	nop	
  3001                           
  3002                           ;standbyMode.c: 1836: break;
  3003  00F43E  D328               	goto	l797
  3004  00F440                     l771:
  3005                           
  3006                           ;standbyMode.c: 1837: }
  3007                           ;standbyMode.c: 1839: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3008  00F440  0E01               	movlw	1
  3009  00F442  EC3F  F060         	call	_lcdInst
  3010  00F446  0EC3               	movlw	195
  3011  00F448  6E60               	movwf	??_standbyMode& (0+255),c
  3012  00F44A  0ECD               	movlw	205
  3013  00F44C                     u9347:
  3014  00F44C  2EE8               	decfsz	wreg,f,c
  3015  00F44E  D7FE               	bra	u9347
  3016  00F450  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3017  00F452  D7FC               	bra	u9347
  3018  00F454  F000               	nop	
  3019                           
  3020                           ;standbyMode.c: 1840: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3021  00F456  0E0C               	movlw	12
  3022  00F458  EC3F  F060         	call	_lcdInst
  3023                           
  3024                           ;standbyMode.c: 1841: printf("Another drawer?");
  3025  00F45C  0E01               	movlw	low STR_88
  3026  00F45E  6E0D               	movwf	printf@f,c
  3027  00F460  0EFE               	movlw	high STR_88
  3028  00F462  6E0E               	movwf	printf@f+1,c
  3029  00F464  EC51  F06B         	call	_printf	;wreg free
  3030                           
  3031                           ;standbyMode.c: 1842: lcdInst(0xC0);;
  3032  00F468  0EC0               	movlw	192
  3033  00F46A  EC3F  F060         	call	_lcdInst
  3034                           
  3035                           ;standbyMode.c: 1843: printf("# = No, D = Yes");
  3036  00F46E  0E21               	movlw	low STR_62
  3037  00F470  6E0D               	movwf	printf@f,c
  3038  00F472  0EFE               	movlw	high STR_62
  3039  00F474  6E0E               	movwf	printf@f+1,c
  3040  00F476  EC51  F06B         	call	_printf	;wreg free
  3041  00F47A  A281               	btfss	3969,1,c	;volatile
  3042  00F47C  D7FE               	goto	l775
  3043                           
  3044                           ;standbyMode.c: 1846: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3045  00F47E  3881               	swapf	3969,w,c	;volatile
  3046  00F480  0B0F               	andlw	15
  3047  00F482  0B0F               	andlw	15
  3048  00F484  0101               	movlb	1	; () banked
  3049  00F486  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3050  00F488                     
  3051                           ; BSR set to: 1
  3052  00F488  B281               	btfsc	3969,1,c	;volatile
  3053  00F48A  D7FE               	goto	l778
  3054                           
  3055                           ;standbyMode.c: 1849: if (keypress1 == 15){
  3056  00F48C  0E0F               	movlw	15
  3057  00F48E  0101               	movlb	1	; () banked
  3058  00F490  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3059  00F492  A4D8               	btfss	status,2,c
  3060  00F494  D177               	goto	l780
  3061  00F496                     u8570:
  3062                           
  3063                           ; BSR set to: 1
  3064                           
  3065                           ; BSR set to: 1
  3066                           
  3067                           ;standbyMode.c: 1850: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3068  00F496  0E01               	movlw	1
  3069  00F498  EC3F  F060         	call	_lcdInst
  3070  00F49C  0EC3               	movlw	195
  3071  00F49E  6E60               	movwf	??_standbyMode& (0+255),c
  3072  00F4A0  0ECD               	movlw	205
  3073  00F4A2                     u9357:
  3074  00F4A2  2EE8               	decfsz	wreg,f,c
  3075  00F4A4  D7FE               	bra	u9357
  3076  00F4A6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3077  00F4A8  D7FC               	bra	u9357
  3078  00F4AA  F000               	nop	
  3079                           
  3080                           ;standbyMode.c: 1851: drawer = which_drawer();
  3081  00F4AC  ECA5  F067         	call	_which_drawer	;wreg free
  3082  00F4B0  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3083  00F4B4  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3084                           
  3085                           ;standbyMode.c: 1853: if (drawer == 100){
  3086  00F4B8  0E64               	movlw	100
  3087  00F4BA  0101               	movlb	1	; () banked
  3088  00F4BC  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3089  00F4BE  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3090  00F4C0  A4D8               	btfss	status,2,c
  3091  00F4C2  D005               	goto	l782
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;standbyMode.c: 1854: drawer = 0;
  3095  00F4C4  0E00               	movlw	0
  3096  00F4C6  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3097  00F4C8  0E00               	movlw	0
  3098  00F4CA  6F82               	movwf	standbyMode@drawer& (0+255),b
  3099                           
  3100                           ;standbyMode.c: 1855: goto DRAWER_BACK;
  3101  00F4CC  D7B9               	goto	l771
  3102  00F4CE                     l782:
  3103                           
  3104                           ; BSR set to: 1
  3105                           ;standbyMode.c: 1856: }
  3106                           ;standbyMode.c: 1858: for (i=0; i<8; i++){
  3107                           
  3108                           ; BSR set to: 1
  3109  00F4CE  0E00               	movlw	0
  3110  00F4D0  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3111  00F4D2  0E00               	movlw	0
  3112  00F4D4  6F88               	movwf	standbyMode@i& (0+255),b
  3113  00F4D6                     l7194:
  3114                           
  3115                           ; BSR set to: 1
  3116  00F4D6  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3117  00F4D8  E12C               	bnz	l7210
  3118  00F4DA  0E08               	movlw	8
  3119  00F4DC  5D88               	subwf	standbyMode@i& (0+255),w,b
  3120  00F4DE  B0D8               	btfsc	status,0,c
  3121  00F4E0  D028               	goto	u8620
  3122                           
  3123                           ; BSR set to: 1
  3124                           ;standbyMode.c: 1859: if (drawerInformation[i] == drawer){
  3125                           
  3126                           ; BSR set to: 1
  3127                           
  3128                           ; BSR set to: 1
  3129  00F4E2  90D8               	bcf	status,0,c
  3130  00F4E4  3588               	rlcf	standbyMode@i& (0+255),w,b
  3131  00F4E6  6ED9               	movwf	fsr2l,c
  3132  00F4E8  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3133  00F4EA  6EDA               	movwf	fsr2h,c
  3134  00F4EC  0E50               	movlw	low standbyMode@drawerInformation
  3135  00F4EE  26D9               	addwf	fsr2l,f,c
  3136  00F4F0  0E01               	movlw	high standbyMode@drawerInformation
  3137  00F4F2  22DA               	addwfc	fsr2h,f,c
  3138  00F4F4  5182               	movf	standbyMode@drawer& (0+255),w,b
  3139  00F4F6  18DE               	xorwf	postinc2,w,c
  3140  00F4F8  E119               	bnz	l7206
  3141  00F4FA  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3142  00F4FC  18DE               	xorwf	postinc2,w,c
  3143  00F4FE  A4D8               	btfss	status,2,c
  3144  00F500  D015               	goto	l786
  3145                           
  3146                           ; BSR set to: 1
  3147                           ;standbyMode.c: 1860: validDrawer = 1;
  3148  00F502  0E00               	movlw	0
  3149  00F504  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3150  00F506  0E01               	movlw	1
  3151  00F508  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3152                           
  3153                           ; BSR set to: 1
  3154                           ;standbyMode.c: 1861: if (drawerInformation[i] == 0){
  3155  00F50A  90D8               	bcf	status,0,c
  3156  00F50C  3588               	rlcf	standbyMode@i& (0+255),w,b
  3157  00F50E  6ED9               	movwf	fsr2l,c
  3158  00F510  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3159  00F512  6EDA               	movwf	fsr2h,c
  3160  00F514  0E50               	movlw	low standbyMode@drawerInformation
  3161  00F516  26D9               	addwf	fsr2l,f,c
  3162  00F518  0E01               	movlw	high standbyMode@drawerInformation
  3163  00F51A  22DA               	addwfc	fsr2h,f,c
  3164  00F51C  50DE               	movf	postinc2,w,c
  3165  00F51E  10DE               	iorwf	postinc2,w,c
  3166  00F520  A4D8               	btfss	status,2,c
  3167  00F522  D004               	goto	l786
  3168                           
  3169                           ; BSR set to: 1
  3170                           ;standbyMode.c: 1862: zero = 1;
  3171  00F524  0E00               	movlw	0
  3172  00F526  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3173  00F528  0E01               	movlw	1
  3174  00F52A  6F79               	movwf	standbyMode@zero& (0+255),b
  3175  00F52C                     l786:
  3176  00F52C                     l7206:
  3177                           
  3178                           ; BSR set to: 1
  3179  00F52C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3180  00F52E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3181  00F530  D7D2               	goto	l7194
  3182  00F532                     u8620:
  3183  00F532                     l7210:
  3184                           
  3185                           ; BSR set to: 1
  3186                           ;standbyMode.c: 1863: }
  3187                           ;standbyMode.c: 1864: }
  3188                           ;standbyMode.c: 1865: }
  3189                           ;standbyMode.c: 1866: if (validDrawer == 1){
  3190  00F532  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3191  00F534  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3192  00F536  A4D8               	btfss	status,2,c
  3193  00F538  D062               	goto	l787
  3194                           
  3195                           ; BSR set to: 1
  3196                           ;standbyMode.c: 1867: if (zero == 1){
  3197  00F53A  0579               	decf	standbyMode@zero& (0+255),w,b
  3198  00F53C  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3199  00F53E  A4D8               	btfss	status,2,c
  3200  00F540  D02F               	goto	l788
  3201                           
  3202                           ; BSR set to: 1
  3203                           ;standbyMode.c: 1868: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3204  00F542  0E01               	movlw	1
  3205  00F544  EC3F  F060         	call	_lcdInst
  3206  00F548  0EC3               	movlw	195
  3207  00F54A  6E60               	movwf	??_standbyMode& (0+255),c
  3208  00F54C  0ECD               	movlw	205
  3209  00F54E                     u9367:
  3210  00F54E  2EE8               	decfsz	wreg,f,c
  3211  00F550  D7FE               	bra	u9367
  3212  00F552  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3213  00F554  D7FC               	bra	u9367
  3214  00F556  F000               	nop	
  3215                           
  3216                           ;standbyMode.c: 1869: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3217  00F558  0E0C               	movlw	12
  3218  00F55A  EC3F  F060         	call	_lcdInst
  3219                           
  3220                           ;standbyMode.c: 1870: printf("No drawer");
  3221  00F55E  0E71               	movlw	low STR_90
  3222  00F560  6E0D               	movwf	printf@f,c
  3223  00F562  0EFF               	movlw	high STR_90
  3224  00F564  6E0E               	movwf	printf@f+1,c
  3225  00F566  EC51  F06B         	call	_printf	;wreg free
  3226                           
  3227                           ;standbyMode.c: 1871: lcdInst(0xC0);;
  3228  00F56A  0EC0               	movlw	192
  3229  00F56C  EC3F  F060         	call	_lcdInst
  3230                           
  3231                           ;standbyMode.c: 1872: printf("number pressed.");
  3232  00F570  0EB1               	movlw	low STR_91
  3233  00F572  6E0D               	movwf	printf@f,c
  3234  00F574  0EFD               	movlw	high STR_91
  3235  00F576  6E0E               	movwf	printf@f+1,c
  3236  00F578  EC51  F06B         	call	_printf	;wreg free
  3237                           
  3238                           ;standbyMode.c: 1873: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3239  00F57C  0E66               	movlw	102
  3240  00F57E  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3241  00F580  0E76               	movlw	118
  3242  00F582  6E60               	movwf	??_standbyMode& (0+255),c
  3243  00F584  0EC1               	movlw	193
  3244  00F586                     u9377:
  3245  00F586  2EE8               	decfsz	wreg,f,c
  3246  00F588  D7FE               	bra	u9377
  3247  00F58A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3248  00F58C  D7FC               	bra	u9377
  3249  00F58E  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3250  00F590  D7FA               	bra	u9377
  3251  00F592  F000               	nop	
  3252                           
  3253                           ;standbyMode.c: 1874: zero = 0;
  3254  00F594  0E00               	movlw	0
  3255  00F596  0101               	movlb	1	; () banked
  3256  00F598  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3257  00F59A  0E00               	movlw	0
  3258  00F59C  6F79               	movwf	standbyMode@zero& (0+255),b
  3259                           
  3260                           ;standbyMode.c: 1875: }
  3261  00F59E  D029               	goto	l789
  3262  00F5A0                     l788:
  3263                           
  3264                           ; BSR set to: 1
  3265                           ;standbyMode.c: 1876: else{
  3266                           ;standbyMode.c: 1877: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3267                           
  3268                           ; BSR set to: 1
  3269  00F5A0  0E01               	movlw	1
  3270  00F5A2  EC3F  F060         	call	_lcdInst
  3271  00F5A6  0EC3               	movlw	195
  3272  00F5A8  6E60               	movwf	??_standbyMode& (0+255),c
  3273  00F5AA  0ECD               	movlw	205
  3274  00F5AC                     u9387:
  3275  00F5AC  2EE8               	decfsz	wreg,f,c
  3276  00F5AE  D7FE               	bra	u9387
  3277  00F5B0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3278  00F5B2  D7FC               	bra	u9387
  3279  00F5B4  F000               	nop	
  3280                           
  3281                           ;standbyMode.c: 1878: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3282  00F5B6  0E0C               	movlw	12
  3283  00F5B8  EC3F  F060         	call	_lcdInst
  3284                           
  3285                           ;standbyMode.c: 1879: printf("Drawer already");
  3286  00F5BC  0EAA               	movlw	low STR_92
  3287  00F5BE  6E0D               	movwf	printf@f,c
  3288  00F5C0  0EFE               	movlw	high STR_92
  3289  00F5C2  6E0E               	movwf	printf@f+1,c
  3290  00F5C4  EC51  F06B         	call	_printf	;wreg free
  3291                           
  3292                           ;standbyMode.c: 1880: lcdInst(0xC0);;
  3293  00F5C8  0EC0               	movlw	192
  3294  00F5CA  EC3F  F060         	call	_lcdInst
  3295                           
  3296                           ;standbyMode.c: 1881: printf("in use!");
  3297  00F5CE  0E84               	movlw	low STR_93
  3298  00F5D0  6E0D               	movwf	printf@f,c
  3299  00F5D2  0EFF               	movlw	high STR_93
  3300  00F5D4  6E0E               	movwf	printf@f+1,c
  3301  00F5D6  EC51  F06B         	call	_printf	;wreg free
  3302                           
  3303                           ;standbyMode.c: 1882: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3304  00F5DA  0E66               	movlw	102
  3305  00F5DC  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3306  00F5DE  0E76               	movlw	118
  3307  00F5E0  6E60               	movwf	??_standbyMode& (0+255),c
  3308  00F5E2  0EC1               	movlw	193
  3309  00F5E4                     u9397:
  3310  00F5E4  2EE8               	decfsz	wreg,f,c
  3311  00F5E6  D7FE               	bra	u9397
  3312  00F5E8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3313  00F5EA  D7FC               	bra	u9397
  3314  00F5EC  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3315  00F5EE  D7FA               	bra	u9397
  3316  00F5F0  F000               	nop	
  3317  00F5F2                     l789:
  3318                           
  3319                           ;standbyMode.c: 1883: }
  3320                           ;standbyMode.c: 1884: validDrawer = 0;
  3321  00F5F2  0E00               	movlw	0
  3322  00F5F4  0101               	movlb	1	; () banked
  3323  00F5F6  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3324  00F5F8  0E00               	movlw	0
  3325  00F5FA  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3326                           
  3327                           ;standbyMode.c: 1885: continue;
  3328  00F5FC  D6F1               	goto	u8530
  3329  00F5FE                     l787:
  3330                           
  3331                           ; BSR set to: 1
  3332                           
  3333                           ; BSR set to: 1
  3334                           
  3335                           ;standbyMode.c: 1887: else{
  3336                           ;standbyMode.c: 1888: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3337                           
  3338                           ; BSR set to: 1
  3339  00F5FE  0E01               	movlw	1
  3340  00F600  EC3F  F060         	call	_lcdInst
  3341  00F604  0EC3               	movlw	195
  3342  00F606  6E60               	movwf	??_standbyMode& (0+255),c
  3343  00F608  0ECD               	movlw	205
  3344  00F60A                     u9407:
  3345  00F60A  2EE8               	decfsz	wreg,f,c
  3346  00F60C  D7FE               	bra	u9407
  3347  00F60E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3348  00F610  D7FC               	bra	u9407
  3349  00F612  F000               	nop	
  3350                           
  3351                           ;standbyMode.c: 1889: diet = diet_press(drawer);
  3352  00F614  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3353  00F618  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3354  00F61C  EC4A  F06D         	call	_diet_press	;wreg free
  3355  00F620  C029  F180         	movff	?_diet_press,standbyMode@diet
  3356  00F624  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3357                           
  3358                           ;standbyMode.c: 1890: if (diet == 100){
  3359  00F628  0E64               	movlw	100
  3360  00F62A  0101               	movlb	1	; () banked
  3361  00F62C  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3362  00F62E  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3363  00F630  A4D8               	btfss	status,2,c
  3364  00F632  D005               	goto	l793
  3365                           
  3366                           ; BSR set to: 1
  3367                           ;standbyMode.c: 1891: diet = 0;
  3368  00F634  0E00               	movlw	0
  3369  00F636  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3370  00F638  0E00               	movlw	0
  3371  00F63A  6F80               	movwf	standbyMode@diet& (0+255),b
  3372                           
  3373                           ;standbyMode.c: 1892: goto DIET_BACK1;
  3374  00F63C  D72C               	goto	u8570
  3375  00F63E                     l793:
  3376                           
  3377                           ; BSR set to: 1
  3378                           ;standbyMode.c: 1893: }
  3379                           ;standbyMode.c: 1895: food = food_press(diet, drawer);
  3380                           
  3381                           ; BSR set to: 1
  3382  00F63E  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3383  00F642  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3384  00F646  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3385  00F64A  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3386  00F64E  ECA8  F066         	call	_food_press	;wreg free
  3387  00F652  C029  F184         	movff	?_food_press,standbyMode@food
  3388  00F656  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3389                           
  3390                           ;standbyMode.c: 1896: if (food == 100){
  3391  00F65A  0E64               	movlw	100
  3392  00F65C  0101               	movlb	1	; () banked
  3393  00F65E  1984               	xorwf	standbyMode@food& (0+255),w,b
  3394  00F660  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3395  00F662  A4D8               	btfss	status,2,c
  3396  00F664  D009               	goto	l794
  3397                           
  3398                           ; BSR set to: 1
  3399                           ;standbyMode.c: 1897: diet = 0;
  3400  00F666  0E00               	movlw	0
  3401  00F668  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3402  00F66A  0E00               	movlw	0
  3403  00F66C  6F80               	movwf	standbyMode@diet& (0+255),b
  3404                           
  3405                           ;standbyMode.c: 1898: food = 0;
  3406  00F66E  0E00               	movlw	0
  3407  00F670  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3408  00F672  0E00               	movlw	0
  3409  00F674  6F84               	movwf	standbyMode@food& (0+255),b
  3410                           
  3411                           ;standbyMode.c: 1899: goto FOOD_BACK1;
  3412  00F676  D7C3               	goto	l787
  3413  00F678                     l794:
  3414                           
  3415                           ; BSR set to: 1
  3416                           ;standbyMode.c: 1900: }
  3417                           ;standbyMode.c: 1902: drawerInformation[drawerCount] = drawer;
  3418                           
  3419                           ; BSR set to: 1
  3420  00F678  90D8               	bcf	status,0,c
  3421  00F67A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3422  00F67C  6ED9               	movwf	fsr2l,c
  3423  00F67E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3424  00F680  6EDA               	movwf	fsr2h,c
  3425  00F682  0E50               	movlw	low standbyMode@drawerInformation
  3426  00F684  26D9               	addwf	fsr2l,f,c
  3427  00F686  0E01               	movlw	high standbyMode@drawerInformation
  3428  00F688  22DA               	addwfc	fsr2h,f,c
  3429  00F68A  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3430  00F68E  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3431                           
  3432                           ; BSR set to: 1
  3433                           ;standbyMode.c: 1903: decodedDiet = decode_diet(diet);
  3434  00F692  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3435  00F696  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3436  00F69A  EC16  F066         	call	_decode_diet	;wreg free
  3437  00F69E  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3438  00F6A2  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3439                           
  3440                           ;standbyMode.c: 1904: dietType[drawerCount] = decodedDiet;
  3441  00F6A6  90D8               	bcf	status,0,c
  3442  00F6A8  0101               	movlb	1	; () banked
  3443  00F6AA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3444  00F6AC  6ED9               	movwf	fsr2l,c
  3445  00F6AE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3446  00F6B0  6EDA               	movwf	fsr2h,c
  3447  00F6B2  0E30               	movlw	low standbyMode@dietType
  3448  00F6B4  26D9               	addwf	fsr2l,f,c
  3449  00F6B6  0E01               	movlw	high standbyMode@dietType
  3450  00F6B8  22DA               	addwfc	fsr2h,f,c
  3451  00F6BA  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3452  00F6BE  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3453                           
  3454                           ;standbyMode.c: 1905: storedFoodType = printFoodInput(food);
  3455  00F6C2  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3456  00F6C6  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3457  00F6CA  ECB0  F068         	call	_printFoodInput	;wreg free
  3458  00F6CE  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3459  00F6D2  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3460                           
  3461                           ;standbyMode.c: 1906: foodType[drawerCount] = storedFoodType;
  3462  00F6D6  90D8               	bcf	status,0,c
  3463  00F6D8  0101               	movlb	1	; () banked
  3464  00F6DA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3465  00F6DC  6ED9               	movwf	fsr2l,c
  3466  00F6DE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3467  00F6E0  6EDA               	movwf	fsr2h,c
  3468  00F6E2  0E40               	movlw	low standbyMode@foodType
  3469  00F6E4  26D9               	addwf	fsr2l,f,c
  3470  00F6E6  0E01               	movlw	high standbyMode@foodType
  3471  00F6E8  22DA               	addwfc	fsr2h,f,c
  3472  00F6EA  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  3473  00F6EE  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  3474                           
  3475                           ; BSR set to: 1
  3476                           ;standbyMode.c: 1909: round = getRound(food);
  3477  00F6F2  C184  F001         	movff	standbyMode@food,getRound@code
  3478  00F6F6  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  3479  00F6FA  EC13  F065         	call	_getRound	;wreg free
  3480  00F6FE  C001  F16C         	movff	?_getRound,standbyMode@round
  3481  00F702  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  3482                           
  3483                           ;standbyMode.c: 1910: flat = getFlat(food);
  3484  00F706  C184  F001         	movff	standbyMode@food,getFlat@code
  3485  00F70A  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  3486  00F70E  EC9B  F064         	call	_getFlat	;wreg free
  3487  00F712  C001  F16E         	movff	?_getFlat,standbyMode@flat
  3488  00F716  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  3489                           
  3490                           ;standbyMode.c: 1911: lng = getLong(food);
  3491  00F71A  C184  F001         	movff	standbyMode@food,getLong@code
  3492  00F71E  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  3493  00F722  EC8B  F065         	call	_getLong	;wreg free
  3494  00F726  C001  F170         	movff	?_getLong,standbyMode@lng
  3495  00F72A  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  3496                           
  3497                           ;standbyMode.c: 1912: roundPieces[drawerCount] = round;
  3498  00F72E  90D8               	bcf	status,0,c
  3499  00F730  0101               	movlb	1	; () banked
  3500  00F732  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3501  00F734  6ED9               	movwf	fsr2l,c
  3502  00F736  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3503  00F738  6EDA               	movwf	fsr2h,c
  3504  00F73A  0E00               	movlw	low standbyMode@roundPieces
  3505  00F73C  26D9               	addwf	fsr2l,f,c
  3506  00F73E  0E01               	movlw	high standbyMode@roundPieces
  3507  00F740  22DA               	addwfc	fsr2h,f,c
  3508  00F742  C16C  FFDE         	movff	standbyMode@round,postinc2
  3509  00F746  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  3510                           
  3511                           ;standbyMode.c: 1913: flatPieces[drawerCount] = flat;
  3512  00F74A  90D8               	bcf	status,0,c
  3513  00F74C  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3514  00F74E  6ED9               	movwf	fsr2l,c
  3515  00F750  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3516  00F752  6EDA               	movwf	fsr2h,c
  3517  00F754  0E10               	movlw	low standbyMode@flatPieces
  3518  00F756  26D9               	addwf	fsr2l,f,c
  3519  00F758  0E01               	movlw	high standbyMode@flatPieces
  3520  00F75A  22DA               	addwfc	fsr2h,f,c
  3521  00F75C  C16E  FFDE         	movff	standbyMode@flat,postinc2
  3522  00F760  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  3523                           
  3524                           ;standbyMode.c: 1914: longPieces[drawerCount] = lng;
  3525  00F764  90D8               	bcf	status,0,c
  3526  00F766  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3527  00F768  6ED9               	movwf	fsr2l,c
  3528  00F76A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3529  00F76C  6EDA               	movwf	fsr2h,c
  3530  00F76E  0E20               	movlw	low standbyMode@longPieces
  3531  00F770  26D9               	addwf	fsr2l,f,c
  3532  00F772  0E01               	movlw	high standbyMode@longPieces
  3533  00F774  22DA               	addwfc	fsr2h,f,c
  3534  00F776  C170  FFDE         	movff	standbyMode@lng,postinc2
  3535  00F77A  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;standbyMode.c: 1915: drawerCount += 1;
  3539  00F77E  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3540  00F780  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3541                           
  3542                           ; BSR set to: 1
  3543                           ;standbyMode.c: 1916: }
  3544                           ;standbyMode.c: 1917: }
  3545  00F782  D004               	goto	l796
  3546  00F784                     l780:
  3547                           
  3548                           ; BSR set to: 1
  3549                           ;standbyMode.c: 1918: else if (keypress1 == 14){
  3550                           
  3551                           ; BSR set to: 1
  3552  00F784  0E0E               	movlw	14
  3553  00F786  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3554  00F788  B4D8               	btfsc	status,2,c
  3555  00F78A  D182               	goto	l797
  3556  00F78C                     l796:
  3557                           
  3558                           ; BSR set to: 1
  3559                           ;standbyMode.c: 1920: }
  3560                           ;standbyMode.c: 1921: keypress1 = 0;
  3561                           
  3562                           ; BSR set to: 1
  3563                           
  3564                           ; BSR set to: 1
  3565  00F78C  0E00               	movlw	0
  3566  00F78E  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3567                           
  3568                           ; BSR set to: 1
  3569  00F790  D627               	goto	u8530
  3570  00F792                     l769:
  3571                           
  3572                           ; BSR set to: 1
  3573                           
  3574                           ; BSR set to: 1
  3575                           
  3576                           ;standbyMode.c: 1925: else{
  3577                           ;standbyMode.c: 1926: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3578                           
  3579                           ; BSR set to: 1
  3580  00F792  0E01               	movlw	1
  3581  00F794  EC3F  F060         	call	_lcdInst
  3582  00F798  0EC3               	movlw	195
  3583  00F79A  6E60               	movwf	??_standbyMode& (0+255),c
  3584  00F79C  0ECD               	movlw	205
  3585  00F79E                     u9417:
  3586  00F79E  2EE8               	decfsz	wreg,f,c
  3587  00F7A0  D7FE               	bra	u9417
  3588  00F7A2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3589  00F7A4  D7FC               	bra	u9417
  3590  00F7A6  F000               	nop	
  3591                           
  3592                           ;standbyMode.c: 1927: drawer = which_drawer();
  3593  00F7A8  ECA5  F067         	call	_which_drawer	;wreg free
  3594  00F7AC  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3595  00F7B0  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3596                           
  3597                           ;standbyMode.c: 1929: if (drawer == 100){
  3598  00F7B4  0E64               	movlw	100
  3599  00F7B6  0101               	movlb	1	; () banked
  3600  00F7B8  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3601  00F7BA  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3602  00F7BC  A4D8               	btfss	status,2,c
  3603  00F7BE  D009               	goto	l800
  3604                           
  3605                           ; BSR set to: 1
  3606                           ;standbyMode.c: 1930: drawer = 0;
  3607  00F7C0  0E00               	movlw	0
  3608  00F7C2  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3609  00F7C4  0E00               	movlw	0
  3610  00F7C6  6F82               	movwf	standbyMode@drawer& (0+255),b
  3611                           
  3612                           ;standbyMode.c: 1931: firstIteration = 1;
  3613  00F7C8  0E00               	movlw	0
  3614  00F7CA  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3615  00F7CC  0E01               	movlw	1
  3616  00F7CE  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3617                           
  3618                           ;standbyMode.c: 1932: goto DRAWER_BACK;
  3619  00F7D0  D637               	goto	l771
  3620  00F7D2                     l800:
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;standbyMode.c: 1933: }
  3624                           ;standbyMode.c: 1935: firstIteration = 1;
  3625                           
  3626                           ; BSR set to: 1
  3627  00F7D2  0E00               	movlw	0
  3628  00F7D4  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  3629  00F7D6  0E01               	movlw	1
  3630  00F7D8  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  3631                           
  3632                           ;standbyMode.c: 1936: for (i=0; i<8; i++){
  3633  00F7DA  0E00               	movlw	0
  3634  00F7DC  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3635  00F7DE  0E00               	movlw	0
  3636  00F7E0  6F88               	movwf	standbyMode@i& (0+255),b
  3637  00F7E2                     l7300:
  3638                           
  3639                           ; BSR set to: 1
  3640  00F7E2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3641  00F7E4  E12C               	bnz	l7316
  3642  00F7E6  0E08               	movlw	8
  3643  00F7E8  5D88               	subwf	standbyMode@i& (0+255),w,b
  3644  00F7EA  B0D8               	btfsc	status,0,c
  3645  00F7EC  D028               	goto	u8720
  3646                           
  3647                           ; BSR set to: 1
  3648                           ;standbyMode.c: 1937: if (drawerInformation[i] == drawer){
  3649                           
  3650                           ; BSR set to: 1
  3651                           
  3652                           ; BSR set to: 1
  3653  00F7EE  90D8               	bcf	status,0,c
  3654  00F7F0  3588               	rlcf	standbyMode@i& (0+255),w,b
  3655  00F7F2  6ED9               	movwf	fsr2l,c
  3656  00F7F4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3657  00F7F6  6EDA               	movwf	fsr2h,c
  3658  00F7F8  0E50               	movlw	low standbyMode@drawerInformation
  3659  00F7FA  26D9               	addwf	fsr2l,f,c
  3660  00F7FC  0E01               	movlw	high standbyMode@drawerInformation
  3661  00F7FE  22DA               	addwfc	fsr2h,f,c
  3662  00F800  5182               	movf	standbyMode@drawer& (0+255),w,b
  3663  00F802  18DE               	xorwf	postinc2,w,c
  3664  00F804  E119               	bnz	l7312
  3665  00F806  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3666  00F808  18DE               	xorwf	postinc2,w,c
  3667  00F80A  A4D8               	btfss	status,2,c
  3668  00F80C  D015               	goto	l804
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;standbyMode.c: 1938: validDrawer = 1;
  3672  00F80E  0E00               	movlw	0
  3673  00F810  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3674  00F812  0E01               	movlw	1
  3675  00F814  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3676                           
  3677                           ; BSR set to: 1
  3678                           ;standbyMode.c: 1939: if (drawerInformation[i] == 0){
  3679  00F816  90D8               	bcf	status,0,c
  3680  00F818  3588               	rlcf	standbyMode@i& (0+255),w,b
  3681  00F81A  6ED9               	movwf	fsr2l,c
  3682  00F81C  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3683  00F81E  6EDA               	movwf	fsr2h,c
  3684  00F820  0E50               	movlw	low standbyMode@drawerInformation
  3685  00F822  26D9               	addwf	fsr2l,f,c
  3686  00F824  0E01               	movlw	high standbyMode@drawerInformation
  3687  00F826  22DA               	addwfc	fsr2h,f,c
  3688  00F828  50DE               	movf	postinc2,w,c
  3689  00F82A  10DE               	iorwf	postinc2,w,c
  3690  00F82C  A4D8               	btfss	status,2,c
  3691  00F82E  D004               	goto	l804
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;standbyMode.c: 1940: zero = 1;
  3695  00F830  0E00               	movlw	0
  3696  00F832  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3697  00F834  0E01               	movlw	1
  3698  00F836  6F79               	movwf	standbyMode@zero& (0+255),b
  3699  00F838                     l804:
  3700  00F838                     l7312:
  3701                           
  3702                           ; BSR set to: 1
  3703  00F838  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3704  00F83A  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3705  00F83C  D7D2               	goto	l7300
  3706  00F83E                     u8720:
  3707  00F83E                     l7316:
  3708                           
  3709                           ; BSR set to: 1
  3710                           ;standbyMode.c: 1941: }
  3711                           ;standbyMode.c: 1942: }
  3712                           ;standbyMode.c: 1943: }
  3713                           ;standbyMode.c: 1944: if (validDrawer == 1){
  3714  00F83E  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3715  00F840  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3716  00F842  A4D8               	btfss	status,2,c
  3717  00F844  D062               	goto	l805
  3718                           
  3719                           ; BSR set to: 1
  3720                           ;standbyMode.c: 1945: if (zero == 1){
  3721  00F846  0579               	decf	standbyMode@zero& (0+255),w,b
  3722  00F848  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3723  00F84A  A4D8               	btfss	status,2,c
  3724  00F84C  D02F               	goto	l806
  3725                           
  3726                           ; BSR set to: 1
  3727                           ;standbyMode.c: 1946: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3728  00F84E  0E01               	movlw	1
  3729  00F850  EC3F  F060         	call	_lcdInst
  3730  00F854  0EC3               	movlw	195
  3731  00F856  6E60               	movwf	??_standbyMode& (0+255),c
  3732  00F858  0ECD               	movlw	205
  3733  00F85A                     u9427:
  3734  00F85A  2EE8               	decfsz	wreg,f,c
  3735  00F85C  D7FE               	bra	u9427
  3736  00F85E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3737  00F860  D7FC               	bra	u9427
  3738  00F862  F000               	nop	
  3739                           
  3740                           ;standbyMode.c: 1947: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3741  00F864  0E0C               	movlw	12
  3742  00F866  EC3F  F060         	call	_lcdInst
  3743                           
  3744                           ;standbyMode.c: 1948: printf("No drawer");
  3745  00F86A  0E71               	movlw	low STR_90
  3746  00F86C  6E0D               	movwf	printf@f,c
  3747  00F86E  0EFF               	movlw	high STR_90
  3748  00F870  6E0E               	movwf	printf@f+1,c
  3749  00F872  EC51  F06B         	call	_printf	;wreg free
  3750                           
  3751                           ;standbyMode.c: 1949: lcdInst(0xC0);;
  3752  00F876  0EC0               	movlw	192
  3753  00F878  EC3F  F060         	call	_lcdInst
  3754                           
  3755                           ;standbyMode.c: 1950: printf("number pressed.");
  3756  00F87C  0EB1               	movlw	low STR_91
  3757  00F87E  6E0D               	movwf	printf@f,c
  3758  00F880  0EFD               	movlw	high STR_91
  3759  00F882  6E0E               	movwf	printf@f+1,c
  3760  00F884  EC51  F06B         	call	_printf	;wreg free
  3761                           
  3762                           ;standbyMode.c: 1951: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3763  00F888  0E66               	movlw	102
  3764  00F88A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3765  00F88C  0E76               	movlw	118
  3766  00F88E  6E60               	movwf	??_standbyMode& (0+255),c
  3767  00F890  0EC1               	movlw	193
  3768  00F892                     u9437:
  3769  00F892  2EE8               	decfsz	wreg,f,c
  3770  00F894  D7FE               	bra	u9437
  3771  00F896  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3772  00F898  D7FC               	bra	u9437
  3773  00F89A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3774  00F89C  D7FA               	bra	u9437
  3775  00F89E  F000               	nop	
  3776                           
  3777                           ;standbyMode.c: 1952: zero = 0;
  3778  00F8A0  0E00               	movlw	0
  3779  00F8A2  0101               	movlb	1	; () banked
  3780  00F8A4  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3781  00F8A6  0E00               	movlw	0
  3782  00F8A8  6F79               	movwf	standbyMode@zero& (0+255),b
  3783                           
  3784                           ;standbyMode.c: 1953: }
  3785  00F8AA  D029               	goto	l807
  3786  00F8AC                     l806:
  3787                           
  3788                           ; BSR set to: 1
  3789                           ;standbyMode.c: 1954: else{
  3790                           ;standbyMode.c: 1955: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3791                           
  3792                           ; BSR set to: 1
  3793  00F8AC  0E01               	movlw	1
  3794  00F8AE  EC3F  F060         	call	_lcdInst
  3795  00F8B2  0EC3               	movlw	195
  3796  00F8B4  6E60               	movwf	??_standbyMode& (0+255),c
  3797  00F8B6  0ECD               	movlw	205
  3798  00F8B8                     u9447:
  3799  00F8B8  2EE8               	decfsz	wreg,f,c
  3800  00F8BA  D7FE               	bra	u9447
  3801  00F8BC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3802  00F8BE  D7FC               	bra	u9447
  3803  00F8C0  F000               	nop	
  3804                           
  3805                           ;standbyMode.c: 1956: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3806  00F8C2  0E0C               	movlw	12
  3807  00F8C4  EC3F  F060         	call	_lcdInst
  3808                           
  3809                           ;standbyMode.c: 1957: printf("Drawer already");
  3810  00F8C8  0EAA               	movlw	low STR_92
  3811  00F8CA  6E0D               	movwf	printf@f,c
  3812  00F8CC  0EFE               	movlw	high STR_92
  3813  00F8CE  6E0E               	movwf	printf@f+1,c
  3814  00F8D0  EC51  F06B         	call	_printf	;wreg free
  3815                           
  3816                           ;standbyMode.c: 1958: lcdInst(0xC0);;
  3817  00F8D4  0EC0               	movlw	192
  3818  00F8D6  EC3F  F060         	call	_lcdInst
  3819                           
  3820                           ;standbyMode.c: 1959: printf("in use!");
  3821  00F8DA  0E84               	movlw	low STR_93
  3822  00F8DC  6E0D               	movwf	printf@f,c
  3823  00F8DE  0EFF               	movlw	high STR_93
  3824  00F8E0  6E0E               	movwf	printf@f+1,c
  3825  00F8E2  EC51  F06B         	call	_printf	;wreg free
  3826                           
  3827                           ;standbyMode.c: 1960: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3828  00F8E6  0E66               	movlw	102
  3829  00F8E8  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3830  00F8EA  0E76               	movlw	118
  3831  00F8EC  6E60               	movwf	??_standbyMode& (0+255),c
  3832  00F8EE  0EC1               	movlw	193
  3833  00F8F0                     u9457:
  3834  00F8F0  2EE8               	decfsz	wreg,f,c
  3835  00F8F2  D7FE               	bra	u9457
  3836  00F8F4  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3837  00F8F6  D7FC               	bra	u9457
  3838  00F8F8  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3839  00F8FA  D7FA               	bra	u9457
  3840  00F8FC  F000               	nop	
  3841  00F8FE                     l807:
  3842                           
  3843                           ;standbyMode.c: 1961: }
  3844                           ;standbyMode.c: 1962: validDrawer = 0;
  3845  00F8FE  0E00               	movlw	0
  3846  00F900  0101               	movlb	1	; () banked
  3847  00F902  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3848  00F904  0E00               	movlw	0
  3849  00F906  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3850                           
  3851                           ; BSR set to: 1
  3852                           ;standbyMode.c: 1964: }
  3853                           
  3854                           ;standbyMode.c: 1963: continue;
  3855  00F908  D567               	goto	u8520
  3856  00F90A                     l805:
  3857                           
  3858                           ; BSR set to: 1
  3859                           
  3860                           ; BSR set to: 1
  3861                           
  3862                           ;standbyMode.c: 1965: else{
  3863                           ;standbyMode.c: 1966: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3864                           
  3865                           ; BSR set to: 1
  3866  00F90A  0E01               	movlw	1
  3867  00F90C  EC3F  F060         	call	_lcdInst
  3868  00F910  0EC3               	movlw	195
  3869  00F912  6E60               	movwf	??_standbyMode& (0+255),c
  3870  00F914  0ECD               	movlw	205
  3871  00F916                     u9467:
  3872  00F916  2EE8               	decfsz	wreg,f,c
  3873  00F918  D7FE               	bra	u9467
  3874  00F91A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3875  00F91C  D7FC               	bra	u9467
  3876  00F91E  F000               	nop	
  3877                           
  3878                           ;standbyMode.c: 1967: diet = diet_press(drawer);
  3879  00F920  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3880  00F924  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3881  00F928  EC4A  F06D         	call	_diet_press	;wreg free
  3882  00F92C  C029  F180         	movff	?_diet_press,standbyMode@diet
  3883  00F930  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3884                           
  3885                           ;standbyMode.c: 1968: if (diet == 100){
  3886  00F934  0E64               	movlw	100
  3887  00F936  0101               	movlb	1	; () banked
  3888  00F938  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3889  00F93A  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3890  00F93C  A4D8               	btfss	status,2,c
  3891  00F93E  D005               	goto	l811
  3892                           
  3893                           ; BSR set to: 1
  3894                           ;standbyMode.c: 1969: diet = 0;
  3895  00F940  0E00               	movlw	0
  3896  00F942  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3897  00F944  0E00               	movlw	0
  3898  00F946  6F80               	movwf	standbyMode@diet& (0+255),b
  3899                           
  3900                           ;standbyMode.c: 1970: goto DIET_BACK2;
  3901  00F948  D724               	goto	l769
  3902  00F94A                     l811:
  3903                           
  3904                           ; BSR set to: 1
  3905                           ;standbyMode.c: 1971: }
  3906                           ;standbyMode.c: 1973: food = food_press(diet, drawer);
  3907                           
  3908                           ; BSR set to: 1
  3909  00F94A  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3910  00F94E  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3911  00F952  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3912  00F956  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3913  00F95A  ECA8  F066         	call	_food_press	;wreg free
  3914  00F95E  C029  F184         	movff	?_food_press,standbyMode@food
  3915  00F962  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3916                           
  3917                           ;standbyMode.c: 1974: if (food == 100){
  3918  00F966  0E64               	movlw	100
  3919  00F968  0101               	movlb	1	; () banked
  3920  00F96A  1984               	xorwf	standbyMode@food& (0+255),w,b
  3921  00F96C  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3922  00F96E  A4D8               	btfss	status,2,c
  3923  00F970  D009               	goto	l812
  3924                           
  3925                           ; BSR set to: 1
  3926                           ;standbyMode.c: 1975: diet = 0;
  3927  00F972  0E00               	movlw	0
  3928  00F974  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3929  00F976  0E00               	movlw	0
  3930  00F978  6F80               	movwf	standbyMode@diet& (0+255),b
  3931                           
  3932                           ;standbyMode.c: 1976: food = 0;
  3933  00F97A  0E00               	movlw	0
  3934  00F97C  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3935  00F97E  0E00               	movlw	0
  3936  00F980  6F84               	movwf	standbyMode@food& (0+255),b
  3937                           
  3938                           ;standbyMode.c: 1977: goto FOOD_BACK2;
  3939  00F982  D7C3               	goto	l805
  3940  00F984                     l812:
  3941                           
  3942                           ; BSR set to: 1
  3943                           ;standbyMode.c: 1978: }
  3944                           ;standbyMode.c: 1980: drawerInformation[drawerCount] = drawer;
  3945                           
  3946                           ; BSR set to: 1
  3947  00F984  90D8               	bcf	status,0,c
  3948  00F986  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3949  00F988  6ED9               	movwf	fsr2l,c
  3950  00F98A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3951  00F98C  6EDA               	movwf	fsr2h,c
  3952  00F98E  0E50               	movlw	low standbyMode@drawerInformation
  3953  00F990  26D9               	addwf	fsr2l,f,c
  3954  00F992  0E01               	movlw	high standbyMode@drawerInformation
  3955  00F994  22DA               	addwfc	fsr2h,f,c
  3956  00F996  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3957  00F99A  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3958                           
  3959                           ; BSR set to: 1
  3960                           ;standbyMode.c: 1981: decodedDiet = decode_diet(diet);
  3961  00F99E  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3962  00F9A2  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3963  00F9A6  EC16  F066         	call	_decode_diet	;wreg free
  3964  00F9AA  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3965  00F9AE  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3966                           
  3967                           ;standbyMode.c: 1982: dietType[drawerCount] = decodedDiet;
  3968  00F9B2  90D8               	bcf	status,0,c
  3969  00F9B4  0101               	movlb	1	; () banked
  3970  00F9B6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3971  00F9B8  6ED9               	movwf	fsr2l,c
  3972  00F9BA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3973  00F9BC  6EDA               	movwf	fsr2h,c
  3974  00F9BE  0E30               	movlw	low standbyMode@dietType
  3975  00F9C0  26D9               	addwf	fsr2l,f,c
  3976  00F9C2  0E01               	movlw	high standbyMode@dietType
  3977  00F9C4  22DA               	addwfc	fsr2h,f,c
  3978  00F9C6  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3979  00F9CA  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3980                           
  3981                           ;standbyMode.c: 1983: storedFoodType = printFoodInput(food);
  3982  00F9CE  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3983  00F9D2  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3984  00F9D6  ECB0  F068         	call	_printFoodInput	;wreg free
  3985  00F9DA  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3986  00F9DE  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3987                           
  3988                           ;standbyMode.c: 1984: foodType[drawerCount] = storedFoodType;
  3989  00F9E2  90D8               	bcf	status,0,c
  3990  00F9E4  0101               	movlb	1	; () banked
  3991  00F9E6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3992  00F9E8  6ED9               	movwf	fsr2l,c
  3993  00F9EA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3994  00F9EC  6EDA               	movwf	fsr2h,c
  3995  00F9EE  0E40               	movlw	low standbyMode@foodType
  3996  00F9F0  26D9               	addwf	fsr2l,f,c
  3997  00F9F2  0E01               	movlw	high standbyMode@foodType
  3998  00F9F4  22DA               	addwfc	fsr2h,f,c
  3999  00F9F6  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4000  00F9FA  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;standbyMode.c: 1987: round = getRound(food);
  4004  00F9FE  C184  F001         	movff	standbyMode@food,getRound@code
  4005  00FA02  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4006  00FA06  EC13  F065         	call	_getRound	;wreg free
  4007  00FA0A  C001  F16C         	movff	?_getRound,standbyMode@round
  4008  00FA0E  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4009                           
  4010                           ;standbyMode.c: 1988: flat = getFlat(food);
  4011  00FA12  C184  F001         	movff	standbyMode@food,getFlat@code
  4012  00FA16  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4013  00FA1A  EC9B  F064         	call	_getFlat	;wreg free
  4014  00FA1E  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4015  00FA22  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4016                           
  4017                           ;standbyMode.c: 1989: lng = getLong(food);
  4018  00FA26  C184  F001         	movff	standbyMode@food,getLong@code
  4019  00FA2A  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4020  00FA2E  EC8B  F065         	call	_getLong	;wreg free
  4021  00FA32  C001  F170         	movff	?_getLong,standbyMode@lng
  4022  00FA36  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4023                           
  4024                           ;standbyMode.c: 1990: roundPieces[drawerCount] = round;
  4025  00FA3A  90D8               	bcf	status,0,c
  4026  00FA3C  0101               	movlb	1	; () banked
  4027  00FA3E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4028  00FA40  6ED9               	movwf	fsr2l,c
  4029  00FA42  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4030  00FA44  6EDA               	movwf	fsr2h,c
  4031  00FA46  0E00               	movlw	low standbyMode@roundPieces
  4032  00FA48  26D9               	addwf	fsr2l,f,c
  4033  00FA4A  0E01               	movlw	high standbyMode@roundPieces
  4034  00FA4C  22DA               	addwfc	fsr2h,f,c
  4035  00FA4E  C16C  FFDE         	movff	standbyMode@round,postinc2
  4036  00FA52  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4037                           
  4038                           ;standbyMode.c: 1991: flatPieces[drawerCount] = flat;
  4039  00FA56  90D8               	bcf	status,0,c
  4040  00FA58  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4041  00FA5A  6ED9               	movwf	fsr2l,c
  4042  00FA5C  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4043  00FA5E  6EDA               	movwf	fsr2h,c
  4044  00FA60  0E10               	movlw	low standbyMode@flatPieces
  4045  00FA62  26D9               	addwf	fsr2l,f,c
  4046  00FA64  0E01               	movlw	high standbyMode@flatPieces
  4047  00FA66  22DA               	addwfc	fsr2h,f,c
  4048  00FA68  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4049  00FA6C  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4050                           
  4051                           ;standbyMode.c: 1992: longPieces[drawerCount] = lng;
  4052  00FA70  90D8               	bcf	status,0,c
  4053  00FA72  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4054  00FA74  6ED9               	movwf	fsr2l,c
  4055  00FA76  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4056  00FA78  6EDA               	movwf	fsr2h,c
  4057  00FA7A  0E20               	movlw	low standbyMode@longPieces
  4058  00FA7C  26D9               	addwf	fsr2l,f,c
  4059  00FA7E  0E01               	movlw	high standbyMode@longPieces
  4060  00FA80  22DA               	addwfc	fsr2h,f,c
  4061  00FA82  C170  FFDE         	movff	standbyMode@lng,postinc2
  4062  00FA86  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4063                           
  4064                           ; BSR set to: 1
  4065                           ;standbyMode.c: 1993: drawerCount += 1;
  4066  00FA8A  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4067  00FA8C  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4068                           
  4069                           ; BSR set to: 1
  4070                           
  4071                           ; BSR set to: 1
  4072                           
  4073                           ; BSR set to: 1
  4074  00FA8E  D4A4               	goto	u8520
  4075  00FA90                     l797:
  4076                           
  4077                           ;standbyMode.c: 1994: }
  4078                           ;standbyMode.c: 1995: }
  4079                           ;standbyMode.c: 1996: }
  4080                           ;standbyMode.c: 1998: if (drawerCount == 0){
  4081                           
  4082                           ; BSR set to: 1
  4083  00FA90  0101               	movlb	1	; () banked
  4084  00FA92  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4085  00FA94  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4086  00FA96  A4D8               	btfss	status,2,c
  4087  00FA98  D005               	goto	l813
  4088                           
  4089                           ; BSR set to: 1
  4090                           ;standbyMode.c: 1999: return 0;
  4091  00FA9A  0E00               	movlw	0
  4092  00FA9C  6E5F               	movwf	?_standbyMode+1,c
  4093  00FA9E  0E00               	movlw	0
  4094  00FAA0  6E5E               	movwf	?_standbyMode,c
  4095                           
  4096                           ; BSR set to: 1
  4097                           ;standbyMode.c: 2000: }
  4098                           
  4099                           ; BSR set to: 1
  4100  00FAA2  0012               	return	
  4101  00FAA4                     l813:
  4102                           
  4103                           ; BSR set to: 1
  4104                           ;standbyMode.c: 2001: else{
  4105                           ;standbyMode.c: 2002: logNumber = readEEPROM(250);
  4106                           
  4107                           ; BSR set to: 1
  4108  00FAA4  0EFA               	movlw	250
  4109  00FAA6  EC53  F060         	call	_readEEPROM
  4110  00FAAA  0101               	movlb	1	; () banked
  4111  00FAAC  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  4112                           
  4113                           ; BSR set to: 1
  4114                           ;standbyMode.c: 2003: if (logNumber == 4){
  4115  00FAAE  0E04               	movlw	4
  4116  00FAB0  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4117  00FAB2  B4D8               	btfsc	status,2,c
  4118                           
  4119                           ; BSR set to: 1
  4120                           ;standbyMode.c: 2004: shiftEEPROM();
  4121  00FAB4  ECA1  F062         	call	_shiftEEPROM	;wreg free
  4122                           
  4123                           ;standbyMode.c: 2005: }
  4124                           ;standbyMode.c: 2006: for (i=0; i<8; i++){
  4125  00FAB8  0E00               	movlw	0
  4126  00FABA  0101               	movlb	1	; () banked
  4127  00FABC  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4128  00FABE  0E00               	movlw	0
  4129  00FAC0  6F88               	movwf	standbyMode@i& (0+255),b
  4130                           
  4131                           ; BSR set to: 1
  4132  00FAC2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4133  00FAC4  E172               	bnz	l818
  4134  00FAC6  0E08               	movlw	8
  4135  00FAC8  5D88               	subwf	standbyMode@i& (0+255),w,b
  4136  00FACA  B0D8               	btfsc	status,0,c
  4137  00FACC  D06E               	goto	u8820
  4138                           
  4139                           ; BSR set to: 1
  4140                           ;standbyMode.c: 2007: if (logNumber == 0 || logNumber == 4){
  4141                           
  4142                           ; BSR set to: 1
  4143                           
  4144                           ; BSR set to: 1
  4145  00FACE  517F               	movf	standbyMode@logNumber& (0+255),w,b
  4146  00FAD0  B4D8               	btfsc	status,2,c
  4147  00FAD2  D004               	goto	u8810
  4148                           
  4149                           ; BSR set to: 1
  4150  00FAD4  0E04               	movlw	4
  4151  00FAD6  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4152  00FAD8  A4D8               	btfss	status,2,c
  4153  00FADA  D00F               	goto	l819
  4154  00FADC                     u8810:
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;standbyMode.c: 2008: n = 3*i;
  4158                           
  4159                           ; BSR set to: 1
  4160  00FADC  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4161  00FAE0  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4162  00FAE4  0E00               	movlw	0
  4163  00FAE6  6E04               	movwf	___wmul@multiplicand+1,c
  4164  00FAE8  0E03               	movlw	3
  4165  00FAEA  6E03               	movwf	___wmul@multiplicand,c
  4166  00FAEC  EC9C  F060         	call	___wmul	;wreg free
  4167  00FAF0  C001  F17B         	movff	?___wmul,standbyMode@n
  4168  00FAF4  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  4169                           
  4170                           ;standbyMode.c: 2009: }
  4171  00FAF8  D022               	goto	l822
  4172  00FAFA                     l819:
  4173                           
  4174                           ;standbyMode.c: 2010: else{
  4175                           ;standbyMode.c: 2011: n = (logNumber-1)*35 + 3*i;
  4176  00FAFA  0EFF               	movlw	255
  4177  00FAFC  0101               	movlb	1	; () banked
  4178  00FAFE  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  4179  00FB00  6E01               	movwf	___wmul@multiplier,c
  4180  00FB02  6A02               	clrf	___wmul@multiplier+1,c
  4181  00FB04  0EFF               	movlw	255
  4182  00FB06  2202               	addwfc	___wmul@multiplier+1,f,c
  4183  00FB08  0E00               	movlw	0
  4184  00FB0A  6E04               	movwf	___wmul@multiplicand+1,c
  4185  00FB0C  0E23               	movlw	35
  4186  00FB0E  6E03               	movwf	___wmul@multiplicand,c
  4187  00FB10  EC9C  F060         	call	___wmul	;wreg free
  4188  00FB14  C001  F060         	movff	?___wmul,??_standbyMode
  4189  00FB18  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  4190  00FB1C  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4191  00FB20  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4192  00FB24  0E00               	movlw	0
  4193  00FB26  6E04               	movwf	___wmul@multiplicand+1,c
  4194  00FB28  0E03               	movlw	3
  4195  00FB2A  6E03               	movwf	___wmul@multiplicand,c
  4196  00FB2C  EC9C  F060         	call	___wmul	;wreg free
  4197  00FB30  5001               	movf	?___wmul,w,c
  4198  00FB32  2460               	addwf	??_standbyMode,w,c
  4199  00FB34  0101               	movlb	1	; () banked
  4200  00FB36  6F7B               	movwf	standbyMode@n& (0+255),b
  4201  00FB38  5002               	movf	?___wmul+1,w,c
  4202  00FB3A  2061               	addwfc	??_standbyMode+1,w,c
  4203  00FB3C  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  4204  00FB3E                     l822:
  4205                           
  4206                           ;standbyMode.c: 2012: }
  4207                           ;standbyMode.c: 2013: writeEEPROM(11+n, drawerInformation[i]);
  4208                           
  4209                           ; BSR set to: 1
  4210  00FB3E  90D8               	bcf	status,0,c
  4211  00FB40  0101               	movlb	1	; () banked
  4212  00FB42  3588               	rlcf	standbyMode@i& (0+255),w,b
  4213  00FB44  6ED9               	movwf	fsr2l,c
  4214  00FB46  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4215  00FB48  6EDA               	movwf	fsr2h,c
  4216  00FB4A  0E50               	movlw	low standbyMode@drawerInformation
  4217  00FB4C  26D9               	addwf	fsr2l,f,c
  4218  00FB4E  0E01               	movlw	high standbyMode@drawerInformation
  4219  00FB50  22DA               	addwfc	fsr2h,f,c
  4220  00FB52  50DF               	movf	indf2,w,c
  4221  00FB54  6E01               	movwf	writeEEPROM@data,c
  4222  00FB56  517B               	movf	standbyMode@n& (0+255),w,b
  4223  00FB58  0F0B               	addlw	11
  4224  00FB5A  ECAF  F060         	call	_writeEEPROM
  4225                           
  4226                           ;standbyMode.c: 2014: writeEEPROM(12+n, dietType[i]);
  4227  00FB5E  90D8               	bcf	status,0,c
  4228  00FB60  0101               	movlb	1	; () banked
  4229  00FB62  3588               	rlcf	standbyMode@i& (0+255),w,b
  4230  00FB64  6ED9               	movwf	fsr2l,c
  4231  00FB66  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4232  00FB68  6EDA               	movwf	fsr2h,c
  4233  00FB6A  0E30               	movlw	low standbyMode@dietType
  4234  00FB6C  26D9               	addwf	fsr2l,f,c
  4235  00FB6E  0E01               	movlw	high standbyMode@dietType
  4236  00FB70  22DA               	addwfc	fsr2h,f,c
  4237  00FB72  50DF               	movf	indf2,w,c
  4238  00FB74  6E01               	movwf	writeEEPROM@data,c
  4239  00FB76  517B               	movf	standbyMode@n& (0+255),w,b
  4240  00FB78  0F0C               	addlw	12
  4241  00FB7A  ECAF  F060         	call	_writeEEPROM
  4242                           
  4243                           ;standbyMode.c: 2015: writeEEPROM(13+n, foodType[i]);
  4244  00FB7E  90D8               	bcf	status,0,c
  4245  00FB80  0101               	movlb	1	; () banked
  4246  00FB82  3588               	rlcf	standbyMode@i& (0+255),w,b
  4247  00FB84  6ED9               	movwf	fsr2l,c
  4248  00FB86  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4249  00FB88  6EDA               	movwf	fsr2h,c
  4250  00FB8A  0E40               	movlw	low standbyMode@foodType
  4251  00FB8C  26D9               	addwf	fsr2l,f,c
  4252  00FB8E  0E01               	movlw	high standbyMode@foodType
  4253  00FB90  22DA               	addwfc	fsr2h,f,c
  4254  00FB92  50DF               	movf	indf2,w,c
  4255  00FB94  6E01               	movwf	writeEEPROM@data,c
  4256  00FB96  517B               	movf	standbyMode@n& (0+255),w,b
  4257  00FB98  0F0D               	addlw	13
  4258  00FB9A  ECAF  F060         	call	_writeEEPROM
  4259  00FB9E  0101               	movlb	1	; () banked
  4260  00FBA0  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4261  00FBA2  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4262                           
  4263                           ; BSR set to: 1
  4264  00FBA4  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4265  00FBA6  E101               	bnz	l7424
  4266  00FBA8  D78E               	goto	L1
  4267  00FBAA                     u8820:
  4268  00FBAA                     l818:
  4269  00FBAA                     l7424:
  4270                           
  4271                           ; BSR set to: 1
  4272                           ;standbyMode.c: 2016: }
  4273                           ;standbyMode.c: 2017: return 1;
  4274  00FBAA  0E00               	movlw	0
  4275  00FBAC  6E5F               	movwf	?_standbyMode+1,c
  4276  00FBAE  0E01               	movlw	1
  4277  00FBB0  6E5E               	movwf	?_standbyMode,c
  4278                           
  4279                           ; BSR set to: 1
  4280                           ;standbyMode.c: 2018: }
  4281                           ;standbyMode.c: 2019: }
  4282                           
  4283                           ; BSR set to: 1
  4284  00FBB2  0012               	return	
  4285  00FBB4                     l767:
  4286                           
  4287                           ; BSR set to: 1
  4288                           ;standbyMode.c: 2020: else if (keypress == 14){
  4289                           
  4290                           ; BSR set to: 1
  4291  00FBB4  0E0E               	movlw	14
  4292  00FBB6  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  4293  00FBB8  A4D8               	btfss	status,2,c
  4294  00FBBA  D05F               	goto	l824
  4295  00FBBC                     u8830:
  4296                           
  4297                           ;standbyMode.c: 2022: unsigned int whichKey = viewLogs();
  4298                           
  4299                           ; BSR set to: 1
  4300                           
  4301                           ;standbyMode.c: 2021: while (1){
  4302  00FBBC  ECDB  F069         	call	_viewLogs	;wreg free
  4303  00FBC0  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  4304  00FBC4  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4305                           
  4306                           ;standbyMode.c: 2023: if (whichKey == 15){
  4307  00FBC8  0E0F               	movlw	15
  4308  00FBCA  0101               	movlb	1	; () banked
  4309  00FBCC  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4310  00FBCE  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4311  00FBD0  B4D8               	btfsc	status,2,c
  4312  00FBD2  D7F4               	goto	u8830
  4313                           
  4314                           ; BSR set to: 1
  4315                           ;standbyMode.c: 2026: else if (whichKey == 14){
  4316                           
  4317                           ; BSR set to: 1
  4318                           
  4319                           ; BSR set to: 1
  4320                           ;standbyMode.c: 2025: }
  4321                           
  4322                           ; BSR set to: 1
  4323                           ;standbyMode.c: 2024: continue;
  4324  00FBD4  0E0E               	movlw	14
  4325  00FBD6  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4326  00FBD8  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4327  00FBDA  A4D8               	btfss	status,2,c
  4328  00FBDC  D020               	goto	l829
  4329                           
  4330                           ; BSR set to: 1
  4331                           ;standbyMode.c: 2027: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4332  00FBDE  0E01               	movlw	1
  4333  00FBE0  EC3F  F060         	call	_lcdInst
  4334  00FBE4  0EC3               	movlw	195
  4335  00FBE6  6E60               	movwf	??_standbyMode& (0+255),c
  4336  00FBE8  0ECD               	movlw	205
  4337  00FBEA                     u9477:
  4338  00FBEA  2EE8               	decfsz	wreg,f,c
  4339  00FBEC  D7FE               	bra	u9477
  4340  00FBEE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4341  00FBF0  D7FC               	bra	u9477
  4342  00FBF2  F000               	nop	
  4343                           
  4344                           ;standbyMode.c: 2028: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4345  00FBF4  0E0C               	movlw	12
  4346  00FBF6  EC3F  F060         	call	_lcdInst
  4347                           
  4348                           ;standbyMode.c: 2029: printf("Rebooting.");
  4349  00FBFA  0E3B               	movlw	low STR_98
  4350  00FBFC  6E0D               	movwf	printf@f,c
  4351  00FBFE  0EFF               	movlw	high STR_98
  4352  00FC00  6E0E               	movwf	printf@f+1,c
  4353  00FC02  EC51  F06B         	call	_printf	;wreg free
  4354                           
  4355                           ;standbyMode.c: 2030: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4356  00FC06  0E66               	movlw	102
  4357  00FC08  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4358  00FC0A  0E76               	movlw	118
  4359  00FC0C  6E60               	movwf	??_standbyMode& (0+255),c
  4360  00FC0E  0EC1               	movlw	193
  4361  00FC10                     u9487:
  4362  00FC10  2EE8               	decfsz	wreg,f,c
  4363  00FC12  D7FE               	bra	u9487
  4364  00FC14  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4365  00FC16  D7FC               	bra	u9487
  4366  00FC18  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4367  00FC1A  D7FA               	bra	u9487
  4368  00FC1C  D028               	goto	L2
  4369  00FC1E                     l829:
  4370                           
  4371                           ;standbyMode.c: 2033: else{
  4372                           ;standbyMode.c: 2034: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4373  00FC1E  0E01               	movlw	1
  4374  00FC20  EC3F  F060         	call	_lcdInst
  4375  00FC24  0EC3               	movlw	195
  4376  00FC26  6E60               	movwf	??_standbyMode& (0+255),c
  4377  00FC28  0ECD               	movlw	205
  4378  00FC2A                     u9497:
  4379  00FC2A  2EE8               	decfsz	wreg,f,c
  4380  00FC2C  D7FE               	bra	u9497
  4381  00FC2E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4382  00FC30  D7FC               	bra	u9497
  4383  00FC32  F000               	nop	
  4384                           
  4385                           ;standbyMode.c: 2035: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4386  00FC34  0E0C               	movlw	12
  4387  00FC36  EC3F  F060         	call	_lcdInst
  4388                           
  4389                           ;standbyMode.c: 2036: printf("Invalid key!");
  4390  00FC3A  0EF1               	movlw	low STR_99
  4391  00FC3C  6E0D               	movwf	printf@f,c
  4392  00FC3E  0EFE               	movlw	high STR_99
  4393  00FC40  6E0E               	movwf	printf@f+1,c
  4394  00FC42  EC51  F06B         	call	_printf	;wreg free
  4395                           
  4396                           ;standbyMode.c: 2037: lcdInst(0xC0);;
  4397  00FC46  0EC0               	movlw	192
  4398  00FC48  EC3F  F060         	call	_lcdInst
  4399                           
  4400                           ;standbyMode.c: 2038: printf("Rebooting.");
  4401  00FC4C  0E3B               	movlw	low STR_98
  4402  00FC4E  6E0D               	movwf	printf@f,c
  4403  00FC50  0EFF               	movlw	high STR_98
  4404  00FC52  6E0E               	movwf	printf@f+1,c
  4405  00FC54  EC51  F06B         	call	_printf	;wreg free
  4406                           
  4407                           ;standbyMode.c: 2039: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4408  00FC58  0E66               	movlw	102
  4409  00FC5A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4410  00FC5C  0E76               	movlw	118
  4411  00FC5E  6E60               	movwf	??_standbyMode& (0+255),c
  4412  00FC60  0EC1               	movlw	193
  4413  00FC62                     u9507:
  4414  00FC62  2EE8               	decfsz	wreg,f,c
  4415  00FC64  D7FE               	bra	u9507
  4416  00FC66  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4417  00FC68  D7FC               	bra	u9507
  4418  00FC6A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4419  00FC6C  D7FA               	bra	u9507
  4420  00FC6E                     L2:
  4421  00FC6E  F000               	nop	
  4422                           
  4423                           ;standbyMode.c: 2041: }
  4424                           ;standbyMode.c: 2042: }
  4425                           ;standbyMode.c: 2043: return 0;
  4426                           
  4427                           ;standbyMode.c: 2040: break;
  4428  00FC70  0E00               	movlw	0
  4429  00FC72  6E5F               	movwf	?_standbyMode+1,c
  4430  00FC74  0E00               	movlw	0
  4431  00FC76  6E5E               	movwf	?_standbyMode,c
  4432                           
  4433                           ;standbyMode.c: 2044: }
  4434  00FC78  0012               	return	
  4435  00FC7A                     l824:
  4436                           
  4437                           ;standbyMode.c: 2046: else {
  4438                           ;standbyMode.c: 2047: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4439  00FC7A  0E01               	movlw	1
  4440  00FC7C  EC3F  F060         	call	_lcdInst
  4441  00FC80  0EC3               	movlw	195
  4442  00FC82  6E60               	movwf	??_standbyMode& (0+255),c
  4443  00FC84  0ECD               	movlw	205
  4444  00FC86                     u9517:
  4445  00FC86  2EE8               	decfsz	wreg,f,c
  4446  00FC88  D7FE               	bra	u9517
  4447  00FC8A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4448  00FC8C  D7FC               	bra	u9517
  4449  00FC8E  F000               	nop	
  4450                           
  4451                           ;standbyMode.c: 2048: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4452  00FC90  0E0C               	movlw	12
  4453  00FC92  EC3F  F060         	call	_lcdInst
  4454                           
  4455                           ;standbyMode.c: 2049: printf("Invalid key!");
  4456  00FC96  0EF1               	movlw	low STR_99
  4457  00FC98  6E0D               	movwf	printf@f,c
  4458  00FC9A  0EFE               	movlw	high STR_99
  4459  00FC9C  6E0E               	movwf	printf@f+1,c
  4460  00FC9E  EC51  F06B         	call	_printf	;wreg free
  4461                           
  4462                           ;standbyMode.c: 2050: lcdInst(0xC0);;
  4463  00FCA2  0EC0               	movlw	192
  4464  00FCA4  EC3F  F060         	call	_lcdInst
  4465                           
  4466                           ;standbyMode.c: 2051: printf("Rebooting.");
  4467  00FCA8  0E3B               	movlw	low STR_98
  4468  00FCAA  6E0D               	movwf	printf@f,c
  4469  00FCAC  0EFF               	movlw	high STR_98
  4470  00FCAE  6E0E               	movwf	printf@f+1,c
  4471  00FCB0  EC51  F06B         	call	_printf	;wreg free
  4472                           
  4473                           ;standbyMode.c: 2052: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4474  00FCB4  0E66               	movlw	102
  4475  00FCB6  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4476  00FCB8  0E76               	movlw	118
  4477  00FCBA  6E60               	movwf	??_standbyMode& (0+255),c
  4478  00FCBC  0EC1               	movlw	193
  4479  00FCBE                     u9527:
  4480  00FCBE  2EE8               	decfsz	wreg,f,c
  4481  00FCC0  D7FE               	bra	u9527
  4482  00FCC2  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4483  00FCC4  D7FC               	bra	u9527
  4484  00FCC6  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4485  00FCC8  D7FA               	bra	u9527
  4486  00FCCA  F000               	nop	
  4487                           
  4488                           ;standbyMode.c: 2053: return 0;
  4489  00FCCC  0E00               	movlw	0
  4490  00FCCE  6E5F               	movwf	?_standbyMode+1,c
  4491  00FCD0  0E00               	movlw	0
  4492  00FCD2  6E5E               	movwf	?_standbyMode,c
  4493  00FCD4  0012               	return	
  4494  00FCD6                     __end_of_standbyMode:
  4495                           	opt stack 0
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           postinc0	equ	0xFEE
  4501                           wreg	equ	0xFE8
  4502                           postdec1	equ	0xFE5
  4503                           plusw1	equ	0xFE3
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           plusw2	equ	0xFDB
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function _which_drawer *****************
  4514 ;; Defined at:
  4515 ;;		line 1610 in file "standbyMode.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  rand            2   43[COMRAM] unsigned int 
  4520 ;;  keypress        1   51[COMRAM] unsigned char 
  4521 ;;  count           2   49[COMRAM] unsigned int 
  4522 ;;  backCheck       2   47[COMRAM] unsigned int 
  4523 ;;  sum             2   45[COMRAM] unsigned int 
  4524 ;; Return value:  Size  Location     Type
  4525 ;;                  2   40[COMRAM] unsigned int 
  4526 ;; Registers used:
  4527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4528 ;; Tracked objects:
  4529 ;;		On entry : 0/0
  4530 ;;		On exit  : 0/0
  4531 ;;		Unchanged: 0/0
  4532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4533 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4536 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;Total ram usage:       12 bytes
  4538 ;; Hardware stack levels used:    1
  4539 ;; Hardware stack levels required when called:    3
  4540 ;; This function calls:
  4541 ;;		_decode_drawer
  4542 ;;		_lcdInst
  4543 ;;		_printf
  4544 ;;		_putch
  4545 ;; This function is called by:
  4546 ;;		_standbyMode
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text2
  4551  00CF4A                     __ptext2:
  4552                           	opt stack 0
  4553  00CF4A                     _which_drawer:
  4554                           	opt stack 26
  4555                           
  4556                           ;standbyMode.c: 1611: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4557                           
  4558                           ;incstack = 0
  4559  00CF4A  0E0C               	movlw	12
  4560  00CF4C  EC3F  F060         	call	_lcdInst
  4561                           
  4562                           ;standbyMode.c: 1612: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4563  00CF50  0E01               	movlw	1
  4564  00CF52  EC3F  F060         	call	_lcdInst
  4565  00CF56  0EC3               	movlw	195
  4566  00CF58  6E2B               	movwf	??_which_drawer& (0+255),c
  4567  00CF5A  0ECD               	movlw	205
  4568  00CF5C                     u9537:
  4569  00CF5C  2EE8               	decfsz	wreg,f,c
  4570  00CF5E  D7FE               	bra	u9537
  4571  00CF60  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4572  00CF62  D7FC               	bra	u9537
  4573  00CF64  F000               	nop	
  4574                           
  4575                           ;standbyMode.c: 1613: printf("Drawer number:");
  4576  00CF66  0E41               	movlw	low STR_71
  4577  00CF68  6E0D               	movwf	printf@f,c
  4578  00CF6A  0EFE               	movlw	high STR_71
  4579  00CF6C  6E0E               	movwf	printf@f+1,c
  4580  00CF6E  EC51  F06B         	call	_printf	;wreg free
  4581                           
  4582                           ;standbyMode.c: 1614: lcdInst(0xC0);;
  4583  00CF72  0EC0               	movlw	192
  4584  00CF74  EC3F  F060         	call	_lcdInst
  4585                           
  4586                           ;standbyMode.c: 1616: unsigned int count = 0;
  4587  00CF78  0E00               	movlw	0
  4588  00CF7A  6E33               	movwf	which_drawer@count+1,c
  4589  00CF7C  0E00               	movlw	0
  4590  00CF7E  6E32               	movwf	which_drawer@count,c
  4591                           
  4592                           ;standbyMode.c: 1617: unsigned int sum = 0;
  4593  00CF80  0E00               	movlw	0
  4594  00CF82  6E2F               	movwf	which_drawer@sum+1,c
  4595  00CF84  0E00               	movlw	0
  4596  00CF86  6E2E               	movwf	which_drawer@sum,c
  4597                           
  4598                           ;standbyMode.c: 1618: unsigned int backCheck = 0;
  4599  00CF88  0E00               	movlw	0
  4600  00CF8A  6E31               	movwf	which_drawer@backCheck+1,c
  4601  00CF8C  0E00               	movlw	0
  4602  00CF8E  6E30               	movwf	which_drawer@backCheck,c
  4603  00CF90                     
  4604                           ;standbyMode.c: 1621: while(PORTBbits.RB1 == 0){ continue; }
  4605  00CF90  A281               	btfss	3969,1,c	;volatile
  4606  00CF92  D7FE               	goto	l708
  4607                           
  4608                           ;standbyMode.c: 1622: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4609  00CF94  3881               	swapf	3969,w,c	;volatile
  4610  00CF96  0B0F               	andlw	15
  4611  00CF98  0B0F               	andlw	15
  4612  00CF9A  6E34               	movwf	which_drawer@keypress,c
  4613  00CF9C  B281               	btfsc	3969,1,c	;volatile
  4614  00CF9E  D7FE               	goto	l713
  4615                           
  4616                           ;standbyMode.c: 1625: if(keypress == 15){
  4617  00CFA0  0E0F               	movlw	15
  4618  00CFA2  1834               	xorwf	which_drawer@keypress,w,c
  4619  00CFA4  B4D8               	btfsc	status,2,c
  4620  00CFA6  D0C3               	goto	l716
  4621                           
  4622                           ;standbyMode.c: 1628: else if (keypress == 14){
  4623                           
  4624                           ;standbyMode.c: 1627: }
  4625                           
  4626                           ;standbyMode.c: 1626: break;
  4627  00CFA8  0E0E               	movlw	14
  4628  00CFAA  1834               	xorwf	which_drawer@keypress,w,c
  4629  00CFAC  A4D8               	btfss	status,2,c
  4630  00CFAE  D005               	goto	l718
  4631                           
  4632                           ;standbyMode.c: 1629: backCheck = 100;
  4633  00CFB0  0E00               	movlw	0
  4634  00CFB2  6E31               	movwf	which_drawer@backCheck+1,c
  4635  00CFB4  0E64               	movlw	100
  4636  00CFB6  6E30               	movwf	which_drawer@backCheck,c
  4637                           
  4638                           ;standbyMode.c: 1630: break;
  4639  00CFB8  D0BA               	goto	l716
  4640  00CFBA                     l718:
  4641                           
  4642                           ;standbyMode.c: 1632: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  4643  00CFBA  5034               	movf	which_drawer@keypress,w,c
  4644  00CFBC  B4D8               	btfsc	status,2,c
  4645  00CFBE  D023               	goto	u8140
  4646  00CFC0  0434               	decf	which_drawer@keypress,w,c
  4647  00CFC2  B4D8               	btfsc	status,2,c
  4648  00CFC4  D020               	goto	u8140
  4649  00CFC6  0E02               	movlw	2
  4650  00CFC8  1834               	xorwf	which_drawer@keypress,w,c
  4651  00CFCA  B4D8               	btfsc	status,2,c
  4652  00CFCC  D01C               	goto	u8140
  4653  00CFCE  0E04               	movlw	4
  4654  00CFD0  1834               	xorwf	which_drawer@keypress,w,c
  4655  00CFD2  B4D8               	btfsc	status,2,c
  4656  00CFD4  D018               	goto	u8140
  4657  00CFD6  0E05               	movlw	5
  4658  00CFD8  1834               	xorwf	which_drawer@keypress,w,c
  4659  00CFDA  B4D8               	btfsc	status,2,c
  4660  00CFDC  D014               	goto	u8140
  4661  00CFDE  0E06               	movlw	6
  4662  00CFE0  1834               	xorwf	which_drawer@keypress,w,c
  4663  00CFE2  B4D8               	btfsc	status,2,c
  4664  00CFE4  D010               	goto	u8140
  4665  00CFE6  0E08               	movlw	8
  4666  00CFE8  1834               	xorwf	which_drawer@keypress,w,c
  4667  00CFEA  B4D8               	btfsc	status,2,c
  4668  00CFEC  D00C               	goto	u8140
  4669  00CFEE  0E09               	movlw	9
  4670  00CFF0  1834               	xorwf	which_drawer@keypress,w,c
  4671  00CFF2  B4D8               	btfsc	status,2,c
  4672  00CFF4  D008               	goto	u8140
  4673  00CFF6  0E0A               	movlw	10
  4674  00CFF8  1834               	xorwf	which_drawer@keypress,w,c
  4675  00CFFA  B4D8               	btfsc	status,2,c
  4676  00CFFC  D004               	goto	u8140
  4677  00CFFE  0E0D               	movlw	13
  4678  00D000  1834               	xorwf	which_drawer@keypress,w,c
  4679  00D002  A4D8               	btfss	status,2,c
  4680  00D004  D073               	goto	l720
  4681  00D006                     u8140:
  4682                           
  4683                           ;standbyMode.c: 1633: if (count == 0){
  4684  00D006  5032               	movf	which_drawer@count,w,c
  4685  00D008  1033               	iorwf	which_drawer@count+1,w,c
  4686  00D00A  A4D8               	btfss	status,2,c
  4687  00D00C  D04C               	goto	l723
  4688                           
  4689                           ;standbyMode.c: 1634: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  4690  00D00E  0434               	decf	which_drawer@keypress,w,c
  4691  00D010  B4D8               	btfsc	status,2,c
  4692  00D012  D01C               	goto	u8230
  4693  00D014  0E02               	movlw	2
  4694  00D016  1834               	xorwf	which_drawer@keypress,w,c
  4695  00D018  B4D8               	btfsc	status,2,c
  4696  00D01A  D018               	goto	u8230
  4697  00D01C  0E04               	movlw	4
  4698  00D01E  1834               	xorwf	which_drawer@keypress,w,c
  4699  00D020  B4D8               	btfsc	status,2,c
  4700  00D022  D014               	goto	u8230
  4701  00D024  0E05               	movlw	5
  4702  00D026  1834               	xorwf	which_drawer@keypress,w,c
  4703  00D028  B4D8               	btfsc	status,2,c
  4704  00D02A  D010               	goto	u8230
  4705  00D02C  0E06               	movlw	6
  4706  00D02E  1834               	xorwf	which_drawer@keypress,w,c
  4707  00D030  B4D8               	btfsc	status,2,c
  4708  00D032  D00C               	goto	u8230
  4709  00D034  0E08               	movlw	8
  4710  00D036  1834               	xorwf	which_drawer@keypress,w,c
  4711  00D038  B4D8               	btfsc	status,2,c
  4712  00D03A  D008               	goto	u8230
  4713  00D03C  0E09               	movlw	9
  4714  00D03E  1834               	xorwf	which_drawer@keypress,w,c
  4715  00D040  B4D8               	btfsc	status,2,c
  4716  00D042  D004               	goto	u8230
  4717  00D044  0E0A               	movlw	10
  4718  00D046  1834               	xorwf	which_drawer@keypress,w,c
  4719  00D048  A4D8               	btfss	status,2,c
  4720  00D04A  D014               	goto	l724
  4721  00D04C                     u8230:
  4722                           
  4723                           ;standbyMode.c: 1635: count += 2;
  4724  00D04C  0E02               	movlw	2
  4725  00D04E  2632               	addwf	which_drawer@count,f,c
  4726  00D050  0E00               	movlw	0
  4727  00D052  2233               	addwfc	which_drawer@count+1,f,c
  4728                           
  4729                           ;standbyMode.c: 1636: putch(input[keypress]);
  4730  00D054  5034               	movf	which_drawer@keypress,w,c
  4731  00D056  0D01               	mullw	1
  4732  00D058  0EE8               	movlw	low _input
  4733  00D05A  24F3               	addwf	prodl,w,c
  4734  00D05C  6EF6               	movwf	tblptrl,c
  4735  00D05E  0EFC               	movlw	high _input
  4736  00D060  20F4               	addwfc	prodh,w,c
  4737  00D062  6EF7               	movwf	tblptrh,c
  4738  00D064                     	if	1	;There are 3 active tblptr bytes
  4739  00D064  6AF8               	clrf	tblptru,c
  4740  00D066  0E00               	movlw	low (__mediumconst shr (0+16))
  4741  00D068  22F8               	addwfc	tblptru,f,c
  4742  00D06A                     	endif
  4743  00D06A  0008               	tblrd		*
  4744  00D06C  50F5               	movf	tablat,w,c
  4745  00D06E  EC49  F060         	call	_putch
  4746  00D072  D03A               	goto	l734
  4747  00D074                     l724:
  4748                           
  4749                           ;standbyMode.c: 1639: else if (keypress == 0){
  4750  00D074  5034               	movf	which_drawer@keypress,w,c
  4751  00D076  A4D8               	btfss	status,2,c
  4752  00D078  D78B               	goto	l708
  4753                           
  4754                           ;standbyMode.c: 1640: putch(input[keypress]);
  4755  00D07A  5034               	movf	which_drawer@keypress,w,c
  4756  00D07C  0D01               	mullw	1
  4757  00D07E  0EE8               	movlw	low _input
  4758  00D080  24F3               	addwf	prodl,w,c
  4759  00D082  6EF6               	movwf	tblptrl,c
  4760  00D084  0EFC               	movlw	high _input
  4761  00D086  20F4               	addwfc	prodh,w,c
  4762  00D088  6EF7               	movwf	tblptrh,c
  4763  00D08A                     	if	1	;There are 3 active tblptr bytes
  4764  00D08A  6AF8               	clrf	tblptru,c
  4765  00D08C  0E00               	movlw	low (__mediumconst shr (0+16))
  4766  00D08E  22F8               	addwfc	tblptru,f,c
  4767  00D090                     	endif
  4768  00D090  0008               	tblrd		*
  4769  00D092  50F5               	movf	tablat,w,c
  4770  00D094  EC49  F060         	call	_putch
  4771                           
  4772                           ;standbyMode.c: 1641: count += 1;
  4773  00D098  4A32               	infsnz	which_drawer@count,f,c
  4774  00D09A  2A33               	incf	which_drawer@count+1,f,c
  4775  00D09C  D023               	goto	u8280
  4776  00D09E                     L3:
  4777  00D09E  262E               	addwf	which_drawer@sum,f,c
  4778  00D0A0  0E00               	movlw	0
  4779  00D0A2  222F               	addwfc	which_drawer@sum+1,f,c
  4780                           
  4781                           ;standbyMode.c: 1643: }
  4782                           ;standbyMode.c: 1644: }
  4783  00D0A4  D775               	goto	l708
  4784  00D0A6                     l723:
  4785                           
  4786                           ;standbyMode.c: 1645: else if (count == 1){
  4787  00D0A6  0432               	decf	which_drawer@count,w,c
  4788  00D0A8  1033               	iorwf	which_drawer@count+1,w,c
  4789  00D0AA  A4D8               	btfss	status,2,c
  4790  00D0AC  D771               	goto	l708
  4791                           
  4792                           ;standbyMode.c: 1646: if (keypress < 8 || keypress == 13){
  4793  00D0AE  0E07               	movlw	7
  4794  00D0B0  6434               	cpfsgt	which_drawer@keypress,c
  4795  00D0B2  D004               	goto	u8270
  4796  00D0B4  0E0D               	movlw	13
  4797  00D0B6  1834               	xorwf	which_drawer@keypress,w,c
  4798  00D0B8  A4D8               	btfss	status,2,c
  4799  00D0BA  D76A               	goto	l708
  4800  00D0BC                     u8270:
  4801                           
  4802                           ;standbyMode.c: 1647: putch(input[keypress]);
  4803  00D0BC  5034               	movf	which_drawer@keypress,w,c
  4804  00D0BE  0D01               	mullw	1
  4805  00D0C0  0EE8               	movlw	low _input
  4806  00D0C2  24F3               	addwf	prodl,w,c
  4807  00D0C4  6EF6               	movwf	tblptrl,c
  4808  00D0C6  0EFC               	movlw	high _input
  4809  00D0C8  20F4               	addwfc	prodh,w,c
  4810  00D0CA  6EF7               	movwf	tblptrh,c
  4811  00D0CC                     	if	1	;There are 3 active tblptr bytes
  4812  00D0CC  6AF8               	clrf	tblptru,c
  4813  00D0CE  0E00               	movlw	low (__mediumconst shr (0+16))
  4814  00D0D0  22F8               	addwfc	tblptru,f,c
  4815  00D0D2                     	endif
  4816  00D0D2  0008               	tblrd		*
  4817  00D0D4  50F5               	movf	tablat,w,c
  4818  00D0D6  EC49  F060         	call	_putch
  4819                           
  4820                           ;standbyMode.c: 1648: count += 1;
  4821  00D0DA  4A32               	infsnz	which_drawer@count,f,c
  4822  00D0DC  2A33               	incf	which_drawer@count+1,f,c
  4823                           
  4824                           ;standbyMode.c: 1649: if(keypress == 0){
  4825  00D0DE  5034               	movf	which_drawer@keypress,w,c
  4826  00D0E0  A4D8               	btfss	status,2,c
  4827  00D0E2  D002               	goto	l734
  4828  00D0E4                     u8280:
  4829                           
  4830                           ;standbyMode.c: 1650: sum += 20;
  4831  00D0E4  0E14               	movlw	20
  4832  00D0E6  D7DB               	goto	L3
  4833  00D0E8                     l734:
  4834                           
  4835                           ;standbyMode.c: 1652: else {
  4836                           ;standbyMode.c: 1653: sum += keypress;
  4837  00D0E8  5034               	movf	which_drawer@keypress,w,c
  4838  00D0EA  D7D9               	goto	L3
  4839  00D0EC                     l720:
  4840                           
  4841                           ;standbyMode.c: 1658: else if (keypress == 12){
  4842  00D0EC  0E0C               	movlw	12
  4843  00D0EE  1834               	xorwf	which_drawer@keypress,w,c
  4844  00D0F0  A4D8               	btfss	status,2,c
  4845  00D0F2  D74E               	goto	l708
  4846                           
  4847                           ;standbyMode.c: 1659: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4848  00D0F4  0E01               	movlw	1
  4849  00D0F6  EC3F  F060         	call	_lcdInst
  4850  00D0FA  0EC3               	movlw	195
  4851  00D0FC  6E2B               	movwf	??_which_drawer& (0+255),c
  4852  00D0FE  0ECD               	movlw	205
  4853  00D100                     u9547:
  4854  00D100  2EE8               	decfsz	wreg,f,c
  4855  00D102  D7FE               	bra	u9547
  4856  00D104  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  4857  00D106  D7FC               	bra	u9547
  4858  00D108  F000               	nop	
  4859                           
  4860                           ;standbyMode.c: 1660: printf("Drawer number:");
  4861  00D10A  0E41               	movlw	low STR_71
  4862  00D10C  6E0D               	movwf	printf@f,c
  4863  00D10E  0EFE               	movlw	high STR_71
  4864  00D110  6E0E               	movwf	printf@f+1,c
  4865  00D112  EC51  F06B         	call	_printf	;wreg free
  4866                           
  4867                           ;standbyMode.c: 1661: lcdInst(0xC0);;
  4868  00D116  0EC0               	movlw	192
  4869  00D118  EC3F  F060         	call	_lcdInst
  4870                           
  4871                           ;standbyMode.c: 1662: count = 0;
  4872  00D11C  0E00               	movlw	0
  4873  00D11E  6E33               	movwf	which_drawer@count+1,c
  4874  00D120  0E00               	movlw	0
  4875  00D122  6E32               	movwf	which_drawer@count,c
  4876                           
  4877                           ;standbyMode.c: 1663: sum = 0;
  4878  00D124  0E00               	movlw	0
  4879  00D126  6E2F               	movwf	which_drawer@sum+1,c
  4880  00D128  0E00               	movlw	0
  4881  00D12A  6E2E               	movwf	which_drawer@sum,c
  4882  00D12C  D731               	goto	l708
  4883  00D12E                     l716:
  4884                           
  4885                           ;standbyMode.c: 1664: }
  4886                           ;standbyMode.c: 1665: }
  4887                           ;standbyMode.c: 1667: if (backCheck == 100){
  4888  00D12E  0E64               	movlw	100
  4889  00D130  1830               	xorwf	which_drawer@backCheck,w,c
  4890  00D132  1031               	iorwf	which_drawer@backCheck+1,w,c
  4891  00D134  A4D8               	btfss	status,2,c
  4892  00D136  D005               	goto	l739
  4893                           
  4894                           ;standbyMode.c: 1668: return backCheck;
  4895  00D138  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  4896  00D13C  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  4897                           
  4898                           ;standbyMode.c: 1669: }
  4899  00D140  0012               	return	
  4900  00D142                     l739:
  4901                           
  4902                           ;standbyMode.c: 1670: else{
  4903                           ;standbyMode.c: 1671: unsigned int rand = decode_drawer(sum);
  4904  00D142  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  4905  00D146  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  4906  00D14A  EC2A  F064         	call	_decode_drawer	;wreg free
  4907  00D14E  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  4908  00D152  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  4909                           
  4910                           ;standbyMode.c: 1672: return rand;
  4911  00D156  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  4912  00D15A  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  4913  00D15E  0012               	return	
  4914  00D160                     __end_of_which_drawer:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           postdec1	equ	0xFE5
  4925                           plusw1	equ	0xFE3
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           plusw2	equ	0xFDB
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _decode_drawer *****************
  4936 ;; Defined at:
  4937 ;;		line 1532 in file "standbyMode.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  drawer          2    0[COMRAM] unsigned int 
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;  returnValue     2    4[COMRAM] unsigned int 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  2    0[COMRAM] unsigned int 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        6 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_which_drawer
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text3
  4965  00C854                     __ptext3:
  4966                           	opt stack 0
  4967  00C854                     _decode_drawer:
  4968                           	opt stack 28
  4969                           
  4970                           ;standbyMode.c: 1533: unsigned int returnValue;
  4971                           ;standbyMode.c: 1535: switch(drawer){
  4972                           
  4973                           ;incstack = 0
  4974  00C854  D03A               	goto	l689
  4975  00C856                     
  4976                           ;standbyMode.c: 1538: returnValue = 1;
  4977  00C856  0E00               	movlw	0
  4978  00C858  6E06               	movwf	decode_drawer@returnValue+1,c
  4979  00C85A  0E01               	movlw	1
  4980  00C85C  D02F               	goto	L15
  4981  00C85E                     
  4982                           ;standbyMode.c: 1543: returnValue = 2;
  4983  00C85E  0E00               	movlw	0
  4984  00C860  6E06               	movwf	decode_drawer@returnValue+1,c
  4985  00C862  0E02               	movlw	2
  4986  00C864  D02B               	goto	L15
  4987  00C866                     
  4988                           ;standbyMode.c: 1548: returnValue = 3;
  4989  00C866  0E00               	movlw	0
  4990  00C868  6E06               	movwf	decode_drawer@returnValue+1,c
  4991  00C86A  0E03               	movlw	3
  4992  00C86C  D027               	goto	L15
  4993  00C86E                     
  4994                           ;standbyMode.c: 1553: returnValue = 7;
  4995  00C86E  0E00               	movlw	0
  4996  00C870  6E06               	movwf	decode_drawer@returnValue+1,c
  4997  00C872  0E07               	movlw	7
  4998  00C874  D023               	goto	L15
  4999  00C876                     
  5000                           ;standbyMode.c: 1558: returnValue = 8;
  5001  00C876  0E00               	movlw	0
  5002  00C878  6E06               	movwf	decode_drawer@returnValue+1,c
  5003  00C87A  0E08               	movlw	8
  5004  00C87C  D01F               	goto	L15
  5005  00C87E                     
  5006                           ;standbyMode.c: 1563: returnValue = 9;
  5007  00C87E  0E00               	movlw	0
  5008  00C880  6E06               	movwf	decode_drawer@returnValue+1,c
  5009  00C882  0E09               	movlw	9
  5010  00C884  D01B               	goto	L15
  5011  00C886                     
  5012                           ;standbyMode.c: 1568: returnValue = 10;
  5013  00C886  0E00               	movlw	0
  5014  00C888  6E06               	movwf	decode_drawer@returnValue+1,c
  5015  00C88A  0E0A               	movlw	10
  5016  00C88C  D017               	goto	L15
  5017  00C88E                     
  5018                           ;standbyMode.c: 1573: returnValue = 11;
  5019  00C88E  0E00               	movlw	0
  5020  00C890  6E06               	movwf	decode_drawer@returnValue+1,c
  5021  00C892  0E0B               	movlw	11
  5022  00C894  D013               	goto	L15
  5023  00C896                     
  5024                           ;standbyMode.c: 1578: returnValue = 12;
  5025  00C896  0E00               	movlw	0
  5026  00C898  6E06               	movwf	decode_drawer@returnValue+1,c
  5027  00C89A  0E0C               	movlw	12
  5028  00C89C  D00F               	goto	L15
  5029  00C89E                     
  5030                           ;standbyMode.c: 1583: returnValue = 13;
  5031  00C89E  0E00               	movlw	0
  5032  00C8A0  6E06               	movwf	decode_drawer@returnValue+1,c
  5033  00C8A2  0E0D               	movlw	13
  5034  00C8A4  D00B               	goto	L15
  5035  00C8A6                     
  5036                           ;standbyMode.c: 1588: returnValue = 14;
  5037  00C8A6  0E00               	movlw	0
  5038  00C8A8  6E06               	movwf	decode_drawer@returnValue+1,c
  5039  00C8AA  0E0E               	movlw	14
  5040  00C8AC  D007               	goto	L15
  5041  00C8AE                     
  5042                           ;standbyMode.c: 1593: returnValue = 15;
  5043  00C8AE  0E00               	movlw	0
  5044  00C8B0  6E06               	movwf	decode_drawer@returnValue+1,c
  5045  00C8B2  0E0F               	movlw	15
  5046  00C8B4  D003               	goto	L15
  5047  00C8B6                     
  5048                           ;standbyMode.c: 1598: returnValue = 16;
  5049  00C8B6  0E00               	movlw	0
  5050  00C8B8  6E06               	movwf	decode_drawer@returnValue+1,c
  5051  00C8BA  0E10               	movlw	16
  5052  00C8BC                     L15:
  5053  00C8BC  6E05               	movwf	decode_drawer@returnValue,c
  5054                           
  5055                           ;standbyMode.c: 1599: break;
  5056  00C8BE  D036               	goto	l691
  5057  00C8C0                     l704:
  5058                           
  5059                           ;standbyMode.c: 1602: returnValue = drawer;
  5060  00C8C0  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  5061  00C8C4  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  5062                           
  5063                           ;standbyMode.c: 1604: }
  5064                           
  5065                           ;standbyMode.c: 1603: break;
  5066  00C8C8  D031               	goto	l691
  5067  00C8CA                     l689:
  5068  00C8CA  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  5069  00C8CE  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  5070                           
  5071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5072                           ; Switch size 1, requested type "space"
  5073                           ; Number of cases is 1, Range of values is 0 to 0
  5074                           ; switch strategies available:
  5075                           ; Name         Instructions Cycles
  5076                           ; simple_byte            4     3 (average)
  5077                           ;	Chosen strategy is simple_byte
  5078  00C8D2  5004               	movf	??_decode_drawer+1,w,c
  5079  00C8D4  0A00               	xorlw	0	; case 0
  5080  00C8D6  A4D8               	btfss	status,2,c
  5081  00C8D8  D7F3               	goto	l704
  5082                           
  5083                           ; Switch size 1, requested type "space"
  5084                           ; Number of cases is 13, Range of values is 1 to 40
  5085                           ; switch strategies available:
  5086                           ; Name         Instructions Cycles
  5087                           ; simple_byte           40    21 (average)
  5088                           ;	Chosen strategy is simple_byte
  5089  00C8DA  5003               	movf	??_decode_drawer,w,c
  5090  00C8DC  0A01               	xorlw	1	; case 1
  5091  00C8DE  B4D8               	btfsc	status,2,c
  5092  00C8E0  D7BE               	goto	l692
  5093  00C8E2  0A03               	xorlw	3	; case 2
  5094  00C8E4  B4D8               	btfsc	status,2,c
  5095  00C8E6  D7BF               	goto	l693
  5096  00C8E8  0A0A               	xorlw	10	; case 8
  5097  00C8EA  B4D8               	btfsc	status,2,c
  5098  00C8EC  D7C0               	goto	l694
  5099  00C8EE  0A01               	xorlw	1	; case 9
  5100  00C8F0  B4D8               	btfsc	status,2,c
  5101  00C8F2  D7C1               	goto	l695
  5102  00C8F4  0A03               	xorlw	3	; case 10
  5103  00C8F6  B4D8               	btfsc	status,2,c
  5104  00C8F8  D7C2               	goto	l696
  5105  00C8FA  0A1E               	xorlw	30	; case 20
  5106  00C8FC  B4D8               	btfsc	status,2,c
  5107  00C8FE  D7AB               	goto	l690
  5108  00C900  0A01               	xorlw	1	; case 21
  5109  00C902  B4D8               	btfsc	status,2,c
  5110  00C904  D7C8               	goto	l699
  5111  00C906  0A03               	xorlw	3	; case 22
  5112  00C908  B4D8               	btfsc	status,2,c
  5113  00C90A  D7C9               	goto	l700
  5114  00C90C  0A0E               	xorlw	14	; case 24
  5115  00C90E  B4D8               	btfsc	status,2,c
  5116  00C910  D7CA               	goto	l701
  5117  00C912  0A01               	xorlw	1	; case 25
  5118  00C914  B4D8               	btfsc	status,2,c
  5119  00C916  D7CB               	goto	l702
  5120  00C918  0A03               	xorlw	3	; case 26
  5121  00C91A  B4D8               	btfsc	status,2,c
  5122  00C91C  D7CC               	goto	l703
  5123  00C91E  0A3B               	xorlw	59	; case 33
  5124  00C920  B4D8               	btfsc	status,2,c
  5125  00C922  D7B1               	goto	l697
  5126  00C924  0A09               	xorlw	9	; case 40
  5127  00C926  B4D8               	btfsc	status,2,c
  5128  00C928  D7B2               	goto	l698
  5129  00C92A  D7CA               	goto	l704
  5130  00C92C                     l691:
  5131                           
  5132                           ;standbyMode.c: 1605: return returnValue;
  5133  00C92C  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  5134  00C930  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  5135  00C934  0012               	return		;funcret
  5136  00C936                     __end_of_decode_drawer:
  5137                           	opt stack 0
  5138                           tblptru	equ	0xFF8
  5139                           tblptrh	equ	0xFF7
  5140                           tblptrl	equ	0xFF6
  5141                           tablat	equ	0xFF5
  5142                           prodh	equ	0xFF4
  5143                           prodl	equ	0xFF3
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           postdec1	equ	0xFE5
  5147                           plusw1	equ	0xFE3
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           postdec2	equ	0xFDD
  5152                           plusw2	equ	0xFDB
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _viewLogs *****************
  5158 ;; Defined at:
  5159 ;;		line 824 in file "standbyMode.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  keypress2       1   92[COMRAM] unsigned char 
  5164 ;;  logView         2   89[COMRAM] unsigned int 
  5165 ;;  returnVal       2   87[COMRAM] unsigned int 
  5166 ;;  checkLog        2   85[COMRAM] unsigned int 
  5167 ;;  logNumber       1   91[COMRAM] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2   81[COMRAM] unsigned int 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:       12 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    4
  5184 ;; This function calls:
  5185 ;;		_displayLogs
  5186 ;;		_lcdInst
  5187 ;;		_printf
  5188 ;;		_putch
  5189 ;;		_readEEPROM
  5190 ;;		_verifyKeypress
  5191 ;; This function is called by:
  5192 ;;		_standbyMode
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text4
  5197  00D3B6                     __ptext4:
  5198                           	opt stack 0
  5199  00D3B6                     _viewLogs:
  5200                           	opt stack 25
  5201                           
  5202                           ;standbyMode.c: 826: unsigned char logNumber = readEEPROM(250);
  5203                           
  5204                           ;incstack = 0
  5205  00D3B6  0EFA               	movlw	250
  5206  00D3B8  EC53  F060         	call	_readEEPROM
  5207  00D3BC  6E5C               	movwf	viewLogs@logNumber,c
  5208                           
  5209                           ;standbyMode.c: 827: unsigned int logView = 0;
  5210  00D3BE  0E00               	movlw	0
  5211  00D3C0  6E5B               	movwf	viewLogs@logView+1,c
  5212  00D3C2  0E00               	movlw	0
  5213  00D3C4  6E5A               	movwf	viewLogs@logView,c
  5214                           
  5215                           ;standbyMode.c: 828: unsigned int checkLog = 0;
  5216  00D3C6  0E00               	movlw	0
  5217  00D3C8  6E57               	movwf	viewLogs@checkLog+1,c
  5218  00D3CA  0E00               	movlw	0
  5219  00D3CC  6E56               	movwf	viewLogs@checkLog,c
  5220                           
  5221                           ;standbyMode.c: 829: unsigned int returnVal = 0;
  5222  00D3CE  0E00               	movlw	0
  5223  00D3D0  6E59               	movwf	viewLogs@returnVal+1,c
  5224  00D3D2  0E00               	movlw	0
  5225  00D3D4  6E58               	movwf	viewLogs@returnVal,c
  5226                           
  5227                           ;standbyMode.c: 831: if (logNumber == 0){
  5228  00D3D6  505C               	movf	viewLogs@logNumber,w,c
  5229  00D3D8  A4D8               	btfss	status,2,c
  5230  00D3DA  D02B               	goto	l430
  5231                           
  5232                           ;standbyMode.c: 832: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5233  00D3DC  0E01               	movlw	1
  5234  00D3DE  EC3F  F060         	call	_lcdInst
  5235  00D3E2  0EC3               	movlw	195
  5236  00D3E4  6E54               	movwf	??_viewLogs& (0+255),c
  5237  00D3E6  0ECD               	movlw	205
  5238  00D3E8                     u9557:
  5239  00D3E8  2EE8               	decfsz	wreg,f,c
  5240  00D3EA  D7FE               	bra	u9557
  5241  00D3EC  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5242  00D3EE  D7FC               	bra	u9557
  5243  00D3F0  F000               	nop	
  5244                           
  5245                           ;standbyMode.c: 833: printf("No logs");
  5246  00D3F2  0E94               	movlw	low STR_34
  5247  00D3F4  6E0D               	movwf	printf@f,c
  5248  00D3F6  0EFF               	movlw	high STR_34
  5249  00D3F8  6E0E               	movwf	printf@f+1,c
  5250  00D3FA  EC51  F06B         	call	_printf	;wreg free
  5251                           
  5252                           ;standbyMode.c: 834: lcdInst(0xC0);;
  5253  00D3FE  0EC0               	movlw	192
  5254  00D400  EC3F  F060         	call	_lcdInst
  5255                           
  5256                           ;standbyMode.c: 835: printf("available.");
  5257  00D404  0E30               	movlw	low STR_35
  5258  00D406  6E0D               	movwf	printf@f,c
  5259  00D408  0EFF               	movlw	high STR_35
  5260  00D40A  6E0E               	movwf	printf@f+1,c
  5261  00D40C  EC51  F06B         	call	_printf	;wreg free
  5262                           
  5263                           ;standbyMode.c: 836: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5264  00D410  0E66               	movlw	102
  5265  00D412  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5266  00D414  0E76               	movlw	118
  5267  00D416  6E54               	movwf	??_viewLogs& (0+255),c
  5268  00D418  0EC1               	movlw	193
  5269  00D41A                     u9567:
  5270  00D41A  2EE8               	decfsz	wreg,f,c
  5271  00D41C  D7FE               	bra	u9567
  5272  00D41E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5273  00D420  D7FC               	bra	u9567
  5274  00D422  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5275  00D424  D7FA               	bra	u9567
  5276  00D426  F000               	nop	
  5277                           
  5278                           ;standbyMode.c: 837: return 14;
  5279  00D428  0E00               	movlw	0
  5280  00D42A  6E53               	movwf	?_viewLogs+1,c
  5281  00D42C  0E0E               	movlw	14
  5282  00D42E  6E52               	movwf	?_viewLogs,c
  5283                           
  5284                           ;standbyMode.c: 838: }
  5285  00D430  0012               	return	
  5286  00D432                     l430:
  5287                           
  5288                           ;standbyMode.c: 839: else {
  5289                           ;standbyMode.c: 840: if (logNumber == 1){
  5290  00D432  045C               	decf	viewLogs@logNumber,w,c
  5291  00D434  A4D8               	btfss	status,2,c
  5292  00D436  D053               	goto	l433
  5293                           
  5294                           ;standbyMode.c: 841: logView = 1;
  5295  00D438  0E00               	movlw	0
  5296  00D43A  6E5B               	movwf	viewLogs@logView+1,c
  5297  00D43C  0E01               	movlw	1
  5298  00D43E  6E5A               	movwf	viewLogs@logView,c
  5299                           
  5300                           ;standbyMode.c: 843: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5301  00D440  0E01               	movlw	1
  5302  00D442  EC3F  F060         	call	_lcdInst
  5303  00D446  0EC3               	movlw	195
  5304  00D448  6E54               	movwf	??_viewLogs& (0+255),c
  5305  00D44A  0ECD               	movlw	205
  5306  00D44C                     u9577:
  5307  00D44C  2EE8               	decfsz	wreg,f,c
  5308  00D44E  D7FE               	bra	u9577
  5309  00D450  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5310  00D452  D7FC               	bra	u9577
  5311  00D454  F000               	nop	
  5312                           
  5313                           ;standbyMode.c: 844: printf("1 previous log");
  5314  00D456  0E5F               	movlw	low STR_36
  5315  00D458  6E0D               	movwf	printf@f,c
  5316  00D45A  0EFE               	movlw	high STR_36
  5317  00D45C  6E0E               	movwf	printf@f+1,c
  5318  00D45E  EC51  F06B         	call	_printf	;wreg free
  5319                           
  5320                           ;standbyMode.c: 845: lcdInst(0xC0);;
  5321  00D462  0EC0               	movlw	192
  5322  00D464  EC3F  F060         	call	_lcdInst
  5323                           
  5324                           ;standbyMode.c: 846: printf("available.");
  5325  00D468  0E30               	movlw	low STR_35
  5326  00D46A  6E0D               	movwf	printf@f,c
  5327  00D46C  0EFF               	movlw	high STR_35
  5328  00D46E  6E0E               	movwf	printf@f+1,c
  5329  00D470  EC51  F06B         	call	_printf	;wreg free
  5330                           
  5331                           ;standbyMode.c: 847: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5332  00D474  0E66               	movlw	102
  5333  00D476  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5334  00D478  0E76               	movlw	118
  5335  00D47A  6E54               	movwf	??_viewLogs& (0+255),c
  5336  00D47C  0EC1               	movlw	193
  5337  00D47E                     u9587:
  5338  00D47E  2EE8               	decfsz	wreg,f,c
  5339  00D480  D7FE               	bra	u9587
  5340  00D482  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5341  00D484  D7FC               	bra	u9587
  5342  00D486  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5343  00D488  D7FA               	bra	u9587
  5344  00D48A  F000               	nop	
  5345                           
  5346                           ;standbyMode.c: 849: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5347  00D48C  0E01               	movlw	1
  5348  00D48E  EC3F  F060         	call	_lcdInst
  5349  00D492  0EC3               	movlw	195
  5350  00D494  6E54               	movwf	??_viewLogs& (0+255),c
  5351  00D496  0ECD               	movlw	205
  5352  00D498                     u9597:
  5353  00D498  2EE8               	decfsz	wreg,f,c
  5354  00D49A  D7FE               	bra	u9597
  5355  00D49C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5356  00D49E  D7FC               	bra	u9597
  5357  00D4A0  F000               	nop	
  5358                           
  5359                           ;standbyMode.c: 850: printf("Press any key to");
  5360  00D4A2  0E7F               	movlw	low STR_38
  5361  00D4A4  6E0D               	movwf	printf@f,c
  5362  00D4A6  0EFD               	movlw	high STR_38
  5363  00D4A8  6E0E               	movwf	printf@f+1,c
  5364  00D4AA  EC51  F06B         	call	_printf	;wreg free
  5365                           
  5366                           ;standbyMode.c: 851: lcdInst(0xC0);;
  5367  00D4AE  0EC0               	movlw	192
  5368  00D4B0  EC3F  F060         	call	_lcdInst
  5369                           
  5370                           ;standbyMode.c: 852: printf("move forward.");
  5371  00D4B4  0ED5               	movlw	low STR_39
  5372  00D4B6  6E0D               	movwf	printf@f,c
  5373  00D4B8  0EFE               	movlw	high STR_39
  5374  00D4BA  6E0E               	movwf	printf@f+1,c
  5375  00D4BC  EC51  F06B         	call	_printf	;wreg free
  5376                           
  5377                           ;standbyMode.c: 853: _delay((unsigned long)((500)*(40000000/4000.0)));
  5378  00D4C0  0E1A               	movlw	26
  5379  00D4C2  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5380  00D4C4  0E5E               	movlw	94
  5381  00D4C6  6E54               	movwf	??_viewLogs& (0+255),c
  5382  00D4C8  0E6E               	movlw	110
  5383  00D4CA                     u9607:
  5384  00D4CA  2EE8               	decfsz	wreg,f,c
  5385  00D4CC  D7FE               	bra	u9607
  5386  00D4CE  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5387  00D4D0  D7FC               	bra	u9607
  5388  00D4D2  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5389  00D4D4  D7FA               	bra	u9607
  5390  00D4D6  D000               	nop2	
  5391  00D4D8                     
  5392                           ;standbyMode.c: 856: continue;
  5393  00D4D8  B281               	btfsc	3969,1,c	;volatile
  5394  00D4DA  D0D4               	goto	u6590
  5395  00D4DC  D7FD               	goto	l435
  5396  00D4DE                     l433:
  5397                           
  5398                           ;standbyMode.c: 859: else {
  5399                           ;standbyMode.c: 860: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5400  00D4DE  0E01               	movlw	1
  5401  00D4E0  EC3F  F060         	call	_lcdInst
  5402  00D4E4  0EC3               	movlw	195
  5403  00D4E6  6E54               	movwf	??_viewLogs& (0+255),c
  5404  00D4E8  0ECD               	movlw	205
  5405  00D4EA                     u9617:
  5406  00D4EA  2EE8               	decfsz	wreg,f,c
  5407  00D4EC  D7FE               	bra	u9617
  5408  00D4EE  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5409  00D4F0  D7FC               	bra	u9617
  5410  00D4F2  F000               	nop	
  5411                           
  5412                           ;standbyMode.c: 861: printf("%i previous logs", logNumber);
  5413  00D4F4  0E90               	movlw	low STR_40
  5414  00D4F6  6E0D               	movwf	printf@f,c
  5415  00D4F8  0EFD               	movlw	high STR_40
  5416  00D4FA  6E0E               	movwf	printf@f+1,c
  5417  00D4FC  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  5418  00D500  6A10               	clrf	?_printf+3,c
  5419  00D502  EC51  F06B         	call	_printf	;wreg free
  5420                           
  5421                           ;standbyMode.c: 862: lcdInst(0xC0);;
  5422  00D506  0EC0               	movlw	192
  5423  00D508  EC3F  F060         	call	_lcdInst
  5424                           
  5425                           ;standbyMode.c: 863: printf("available.");
  5426  00D50C  0E30               	movlw	low STR_35
  5427  00D50E  6E0D               	movwf	printf@f,c
  5428  00D510  0EFF               	movlw	high STR_35
  5429  00D512  6E0E               	movwf	printf@f+1,c
  5430  00D514  EC51  F06B         	call	_printf	;wreg free
  5431                           
  5432                           ;standbyMode.c: 864: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5433  00D518  0E66               	movlw	102
  5434  00D51A  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5435  00D51C  0E76               	movlw	118
  5436  00D51E  6E54               	movwf	??_viewLogs& (0+255),c
  5437  00D520  0EC1               	movlw	193
  5438  00D522                     u9627:
  5439  00D522  2EE8               	decfsz	wreg,f,c
  5440  00D524  D7FE               	bra	u9627
  5441  00D526  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5442  00D528  D7FC               	bra	u9627
  5443  00D52A  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5444  00D52C  D7FA               	bra	u9627
  5445  00D52E  F000               	nop	
  5446                           
  5447                           ;standbyMode.c: 865: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5448  00D530  0E01               	movlw	1
  5449  00D532  EC3F  F060         	call	_lcdInst
  5450  00D536  0EC3               	movlw	195
  5451  00D538  6E54               	movwf	??_viewLogs& (0+255),c
  5452  00D53A  0ECD               	movlw	205
  5453  00D53C                     u9637:
  5454  00D53C  2EE8               	decfsz	wreg,f,c
  5455  00D53E  D7FE               	bra	u9637
  5456  00D540  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5457  00D542  D7FC               	bra	u9637
  5458  00D544  F000               	nop	
  5459                           
  5460                           ;standbyMode.c: 866: printf("Please input log");
  5461  00D546  0E5D               	movlw	low STR_42
  5462  00D548  6E0D               	movwf	printf@f,c
  5463  00D54A  0EFD               	movlw	high STR_42
  5464  00D54C  6E0E               	movwf	printf@f+1,c
  5465  00D54E  EC51  F06B         	call	_printf	;wreg free
  5466                           
  5467                           ;standbyMode.c: 867: lcdInst(0xC0);;
  5468  00D552  0EC0               	movlw	192
  5469  00D554  EC3F  F060         	call	_lcdInst
  5470                           
  5471                           ;standbyMode.c: 868: printf("number: ");
  5472  00D558  0E7B               	movlw	low STR_43
  5473  00D55A  6E0D               	movwf	printf@f,c
  5474  00D55C  0EFF               	movlw	high STR_43
  5475  00D55E  6E0E               	movwf	printf@f+1,c
  5476  00D560  EC51  F06B         	call	_printf	;wreg free
  5477  00D564                     
  5478                           ;standbyMode.c: 871: while(PORTBbits.RB1 == 0){ continue; }
  5479  00D564  A281               	btfss	3969,1,c	;volatile
  5480  00D566  D7FE               	goto	l438
  5481                           
  5482                           ;standbyMode.c: 872: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  5483  00D568  3881               	swapf	3969,w,c	;volatile
  5484  00D56A  0B0F               	andlw	15
  5485  00D56C  0B0F               	andlw	15
  5486  00D56E  6E5D               	movwf	viewLogs@keypress2,c
  5487  00D570  B281               	btfsc	3969,1,c	;volatile
  5488  00D572  D7FE               	goto	l443
  5489                           
  5490                           ;standbyMode.c: 875: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  5491  00D574  505D               	movf	viewLogs@keypress2,w,c
  5492  00D576  B4D8               	btfsc	status,2,c
  5493  00D578  D00B               	goto	u6560
  5494  00D57A  045D               	decf	viewLogs@keypress2,w,c
  5495  00D57C  B4D8               	btfsc	status,2,c
  5496  00D57E  D008               	goto	u6560
  5497  00D580  0E02               	movlw	2
  5498  00D582  185D               	xorwf	viewLogs@keypress2,w,c
  5499  00D584  B4D8               	btfsc	status,2,c
  5500  00D586  D004               	goto	u6560
  5501  00D588  0E04               	movlw	4
  5502  00D58A  185D               	xorwf	viewLogs@keypress2,w,c
  5503  00D58C  A4D8               	btfss	status,2,c
  5504  00D58E  D7EA               	goto	l438
  5505  00D590                     u6560:
  5506                           
  5507                           ;standbyMode.c: 876: checkLog = verifyKeypress(logNumber, keypress2);
  5508  00D590  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  5509  00D594  6A02               	clrf	verifyKeypress@keypress+1,c
  5510  00D596  505C               	movf	viewLogs@logNumber,w,c
  5511  00D598  EC53  F061         	call	_verifyKeypress
  5512  00D59C  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  5513  00D5A0  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  5514                           
  5515                           ;standbyMode.c: 877: if (checkLog == 1){
  5516  00D5A4  0456               	decf	viewLogs@checkLog,w,c
  5517  00D5A6  1057               	iorwf	viewLogs@checkLog+1,w,c
  5518  00D5A8  A4D8               	btfss	status,2,c
  5519  00D5AA  D7DC               	goto	l438
  5520                           
  5521                           ;standbyMode.c: 878: putch(keys[keypress2]);
  5522  00D5AC  505D               	movf	viewLogs@keypress2,w,c
  5523  00D5AE  0D01               	mullw	1
  5524  00D5B0  0ED7               	movlw	low _keys
  5525  00D5B2  24F3               	addwf	prodl,w,c
  5526  00D5B4  6EF6               	movwf	tblptrl,c
  5527  00D5B6  0EFC               	movlw	high _keys
  5528  00D5B8  20F4               	addwfc	prodh,w,c
  5529  00D5BA  6EF7               	movwf	tblptrh,c
  5530  00D5BC                     	if	1	;There are 3 active tblptr bytes
  5531  00D5BC  6AF8               	clrf	tblptru,c
  5532  00D5BE  0E00               	movlw	low (__mediumconst shr (0+16))
  5533  00D5C0  22F8               	addwfc	tblptru,f,c
  5534  00D5C2                     	endif
  5535  00D5C2  0008               	tblrd		*
  5536  00D5C4  50F5               	movf	tablat,w,c
  5537  00D5C6  EC49  F060         	call	_putch
  5538                           
  5539                           ;standbyMode.c: 879: if (keypress2 == 4){
  5540  00D5CA  0E04               	movlw	4
  5541  00D5CC  185D               	xorwf	viewLogs@keypress2,w,c
  5542  00D5CE  A4D8               	btfss	status,2,c
  5543  00D5D0  D004               	goto	l449
  5544                           
  5545                           ;standbyMode.c: 880: logView = keypress2;
  5546  00D5D2  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  5547  00D5D6  6A5B               	clrf	viewLogs@logView+1,c
  5548                           
  5549                           ;standbyMode.c: 881: }
  5550  00D5D8  D006               	goto	l450
  5551  00D5DA                     l449:
  5552                           
  5553                           ;standbyMode.c: 882: else{
  5554                           ;standbyMode.c: 883: logView = keypress2 + 1;
  5555  00D5DA  0E01               	movlw	1
  5556  00D5DC  245D               	addwf	viewLogs@keypress2,w,c
  5557  00D5DE  6E5A               	movwf	viewLogs@logView,c
  5558  00D5E0  6A5B               	clrf	viewLogs@logView+1,c
  5559  00D5E2  0E00               	movlw	0
  5560  00D5E4  225B               	addwfc	viewLogs@logView+1,f,c
  5561  00D5E6                     l450:
  5562                           
  5563                           ;standbyMode.c: 884: }
  5564                           ;standbyMode.c: 885: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5565  00D5E6  0E33               	movlw	51
  5566  00D5E8  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5567  00D5EA  0EBB               	movlw	187
  5568  00D5EC  6E54               	movwf	??_viewLogs& (0+255),c
  5569  00D5EE  0EE0               	movlw	224
  5570  00D5F0                     u9647:
  5571  00D5F0  2EE8               	decfsz	wreg,f,c
  5572  00D5F2  D7FE               	bra	u9647
  5573  00D5F4  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5574  00D5F6  D7FC               	bra	u9647
  5575  00D5F8  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5576  00D5FA  D7FA               	bra	u9647
  5577                           
  5578                           ;standbyMode.c: 887: }
  5579                           ;standbyMode.c: 888: }
  5580                           ;standbyMode.c: 889: }
  5581                           ;standbyMode.c: 891: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5582                           
  5583                           ;standbyMode.c: 886: break;
  5584  00D5FC  0E01               	movlw	1
  5585  00D5FE  EC3F  F060         	call	_lcdInst
  5586  00D602  0EC3               	movlw	195
  5587  00D604  6E54               	movwf	??_viewLogs& (0+255),c
  5588  00D606  0ECD               	movlw	205
  5589  00D608                     u9657:
  5590  00D608  2EE8               	decfsz	wreg,f,c
  5591  00D60A  D7FE               	bra	u9657
  5592  00D60C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5593  00D60E  D7FC               	bra	u9657
  5594  00D610  F000               	nop	
  5595                           
  5596                           ;standbyMode.c: 892: printf("Great!");
  5597  00D612  0EAB               	movlw	low STR_44
  5598  00D614  6E0D               	movwf	printf@f,c
  5599  00D616  0EFF               	movlw	high STR_44
  5600  00D618  6E0E               	movwf	printf@f+1,c
  5601  00D61A  EC51  F06B         	call	_printf	;wreg free
  5602                           
  5603                           ;standbyMode.c: 893: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5604  00D61E  0E33               	movlw	51
  5605  00D620  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5606  00D622  0EBB               	movlw	187
  5607  00D624  6E54               	movwf	??_viewLogs& (0+255),c
  5608  00D626  0EE0               	movlw	224
  5609  00D628                     u9667:
  5610  00D628  2EE8               	decfsz	wreg,f,c
  5611  00D62A  D7FE               	bra	u9667
  5612  00D62C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5613  00D62E  D7FC               	bra	u9667
  5614  00D630  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5615  00D632  D7FA               	bra	u9667
  5616                           
  5617                           ;standbyMode.c: 894: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5618  00D634  0E01               	movlw	1
  5619  00D636  EC3F  F060         	call	_lcdInst
  5620  00D63A  0EC3               	movlw	195
  5621  00D63C  6E54               	movwf	??_viewLogs& (0+255),c
  5622  00D63E  0ECD               	movlw	205
  5623  00D640                     u9677:
  5624  00D640  2EE8               	decfsz	wreg,f,c
  5625  00D642  D7FE               	bra	u9677
  5626  00D644  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5627  00D646  D7FC               	bra	u9677
  5628  00D648  F000               	nop	
  5629                           
  5630                           ;standbyMode.c: 895: printf("Press any key to");
  5631  00D64A  0E7F               	movlw	low STR_38
  5632  00D64C  6E0D               	movwf	printf@f,c
  5633  00D64E  0EFD               	movlw	high STR_38
  5634  00D650  6E0E               	movwf	printf@f+1,c
  5635  00D652  EC51  F06B         	call	_printf	;wreg free
  5636                           
  5637                           ;standbyMode.c: 896: lcdInst(0xC0);;
  5638  00D656  0EC0               	movlw	192
  5639  00D658  EC3F  F060         	call	_lcdInst
  5640                           
  5641                           ;standbyMode.c: 897: printf("move forward.");
  5642  00D65C  0ED5               	movlw	low STR_39
  5643  00D65E  6E0D               	movwf	printf@f,c
  5644  00D660  0EFE               	movlw	high STR_39
  5645  00D662  6E0E               	movwf	printf@f+1,c
  5646  00D664  EC51  F06B         	call	_printf	;wreg free
  5647                           
  5648                           ;standbyMode.c: 898: _delay((unsigned long)((500)*(40000000/4000.0)));
  5649  00D668  0E1A               	movlw	26
  5650  00D66A  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5651  00D66C  0E5E               	movlw	94
  5652  00D66E  6E54               	movwf	??_viewLogs& (0+255),c
  5653  00D670  0E6E               	movlw	110
  5654  00D672                     u9687:
  5655  00D672  2EE8               	decfsz	wreg,f,c
  5656  00D674  D7FE               	bra	u9687
  5657  00D676  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5658  00D678  D7FC               	bra	u9687
  5659  00D67A  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5660  00D67C  D7FA               	bra	u9687
  5661  00D67E  D000               	nop2	
  5662  00D680                     
  5663                           ;standbyMode.c: 901: continue;
  5664  00D680  A281               	btfss	3969,1,c	;volatile
  5665  00D682  D7FE               	goto	l454
  5666  00D684                     u6590:
  5667                           
  5668                           ;standbyMode.c: 902: }
  5669                           ;standbyMode.c: 903: }
  5670                           ;standbyMode.c: 904: returnVal = displayLogs(logView);
  5671  00D684  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  5672  00D688  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  5673  00D68C  ECE3  F06F         	call	_displayLogs	;wreg free
  5674  00D690  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  5675  00D694  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  5676                           
  5677                           ;standbyMode.c: 905: return returnVal;
  5678  00D698  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  5679  00D69C  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  5680  00D6A0  0012               	return	
  5681  00D6A2                     __end_of_viewLogs:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           plusw1	equ	0xFE3
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           plusw2	equ	0xFDB
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _verifyKeypress *****************
  5703 ;; Defined at:
  5704 ;;		line 810 in file "standbyMode.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  logNumber       1    wreg     unsigned char 
  5707 ;;  keypress        2    0[COMRAM] unsigned int 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;  logNumber       1    4[COMRAM] unsigned char 
  5710 ;;  i               2    7[COMRAM] unsigned int 
  5711 ;;  returnVal       2    5[COMRAM] unsigned int 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  2    0[COMRAM] unsigned int 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;Total ram usage:        9 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; This function calls:
  5728 ;;		Nothing
  5729 ;; This function is called by:
  5730 ;;		_viewLogs
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text5
  5735  00C2A6                     __ptext5:
  5736                           	opt stack 0
  5737  00C2A6                     _verifyKeypress:
  5738                           	opt stack 28
  5739                           
  5740                           ;incstack = 0
  5741                           ;verifyKeypress@logNumber stored from wreg
  5742  00C2A6  6E05               	movwf	verifyKeypress@logNumber,c
  5743                           
  5744                           ;standbyMode.c: 811: unsigned int i = 0;
  5745  00C2A8  0E00               	movlw	0
  5746  00C2AA  6E09               	movwf	verifyKeypress@i+1,c
  5747  00C2AC  0E00               	movlw	0
  5748  00C2AE  6E08               	movwf	verifyKeypress@i,c
  5749                           
  5750                           ;standbyMode.c: 812: unsigned int returnVal = 0;
  5751  00C2B0  0E00               	movlw	0
  5752  00C2B2  6E07               	movwf	verifyKeypress@returnVal+1,c
  5753  00C2B4  0E00               	movlw	0
  5754  00C2B6  6E06               	movwf	verifyKeypress@returnVal,c
  5755                           
  5756                           ;standbyMode.c: 814: for (i=0; i<logNumber; i++){
  5757  00C2B8  0E00               	movlw	0
  5758  00C2BA  6E09               	movwf	verifyKeypress@i+1,c
  5759  00C2BC  0E00               	movlw	0
  5760  00C2BE  6E08               	movwf	verifyKeypress@i,c
  5761  00C2C0  D00D               	goto	l423
  5762  00C2C2                     
  5763                           ;standbyMode.c: 815: if (keypress == i){
  5764  00C2C2  5008               	movf	verifyKeypress@i,w,c
  5765  00C2C4  1801               	xorwf	verifyKeypress@keypress,w,c
  5766  00C2C6  E108               	bnz	l5506
  5767  00C2C8  5009               	movf	verifyKeypress@i+1,w,c
  5768  00C2CA  1802               	xorwf	verifyKeypress@keypress+1,w,c
  5769  00C2CC  A4D8               	btfss	status,2,c
  5770  00C2CE  D004               	goto	l425
  5771                           
  5772                           ;standbyMode.c: 816: returnVal = 1;
  5773  00C2D0  0E00               	movlw	0
  5774  00C2D2  6E07               	movwf	verifyKeypress@returnVal+1,c
  5775  00C2D4  0E01               	movlw	1
  5776  00C2D6  6E06               	movwf	verifyKeypress@returnVal,c
  5777  00C2D8                     l425:
  5778  00C2D8                     l5506:
  5779  00C2D8  4A08               	infsnz	verifyKeypress@i,f,c
  5780  00C2DA  2A09               	incf	verifyKeypress@i+1,f,c
  5781  00C2DC                     l423:
  5782  00C2DC  5005               	movf	verifyKeypress@logNumber,w,c
  5783  00C2DE  6E03               	movwf	??_verifyKeypress& (0+255),c
  5784  00C2E0  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  5785  00C2E2  5003               	movf	??_verifyKeypress,w,c
  5786  00C2E4  5C08               	subwf	verifyKeypress@i,w,c
  5787  00C2E6  5004               	movf	??_verifyKeypress+1,w,c
  5788  00C2E8  5809               	subwfb	verifyKeypress@i+1,w,c
  5789  00C2EA  A0D8               	btfss	status,0,c
  5790  00C2EC  D7EA               	goto	l424
  5791                           
  5792                           ;standbyMode.c: 817: }
  5793                           ;standbyMode.c: 818: }
  5794                           ;standbyMode.c: 819: return returnVal;
  5795  00C2EE  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  5796  00C2F2  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  5797  00C2F6  0012               	return		;funcret
  5798  00C2F8                     __end_of_verifyKeypress:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodh	equ	0xFF4
  5805                           prodl	equ	0xFF3
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           plusw1	equ	0xFE3
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           plusw2	equ	0xFDB
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _displayLogs *****************
  5820 ;; Defined at:
  5821 ;;		line 985 in file "standbyMode.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  logNumber       2   40[COMRAM] unsigned int 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  n               2   79[COMRAM] unsigned int 
  5826 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  5827 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  5828 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  5829 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  5830 ;;  i               2   69[COMRAM] unsigned int 
  5831 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  5832 ;;  operationTim    2   65[COMRAM] unsigned int 
  5833 ;;  foodType        2   62[COMRAM] unsigned int 
  5834 ;;  dietType        2   60[COMRAM] unsigned int 
  5835 ;;  seconds         2   58[COMRAM] unsigned int 
  5836 ;;  minutes         2   56[COMRAM] unsigned int 
  5837 ;;  longPieces      2   54[COMRAM] unsigned int 
  5838 ;;  flatPieces      2   52[COMRAM] unsigned int 
  5839 ;;  roundPieces     2   50[COMRAM] unsigned int 
  5840 ;;  day             2   48[COMRAM] unsigned int 
  5841 ;;  month           2   46[COMRAM] unsigned int 
  5842 ;;  year            2   44[COMRAM] unsigned int 
  5843 ;;  keypress3       1   64[COMRAM] unsigned char 
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  2   40[COMRAM] unsigned int 
  5846 ;; Registers used:
  5847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;Total ram usage:       41 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    3
  5860 ;; This function calls:
  5861 ;;		___lwdiv
  5862 ;;		___lwmod
  5863 ;;		___wmul
  5864 ;;		_lcdInst
  5865 ;;		_printf
  5866 ;;		_readEEPROM
  5867 ;; This function is called by:
  5868 ;;		_viewLogs
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text6
  5873  00DFC6                     __ptext6:
  5874                           	opt stack 0
  5875  00DFC6                     _displayLogs:
  5876                           	opt stack 25
  5877                           
  5878                           ;standbyMode.c: 986: unsigned int n = (logNumber-1)*35;
  5879                           
  5880                           ;incstack = 0
  5881  00DFC6  0EFF               	movlw	255
  5882  00DFC8  2429               	addwf	displayLogs@logNumber,w,c
  5883  00DFCA  6E01               	movwf	___wmul@multiplier,c
  5884  00DFCC  0EFF               	movlw	255
  5885  00DFCE  202A               	addwfc	displayLogs@logNumber+1,w,c
  5886  00DFD0  6E02               	movwf	___wmul@multiplier+1,c
  5887  00DFD2  0E00               	movlw	0
  5888  00DFD4  6E04               	movwf	___wmul@multiplicand+1,c
  5889  00DFD6  0E23               	movlw	35
  5890  00DFD8  6E03               	movwf	___wmul@multiplicand,c
  5891  00DFDA  EC9C  F060         	call	___wmul	;wreg free
  5892  00DFDE  C001  F050         	movff	?___wmul,displayLogs@n
  5893  00DFE2  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  5894                           
  5895                           ;standbyMode.c: 987: unsigned int year = readEEPROM(n);
  5896  00DFE6  5050               	movf	displayLogs@n,w,c
  5897  00DFE8  EC53  F060         	call	_readEEPROM
  5898  00DFEC  6E2B               	movwf	??_displayLogs& (0+255),c
  5899  00DFEE  502B               	movf	??_displayLogs,w,c
  5900  00DFF0  6E2D               	movwf	displayLogs@year,c
  5901  00DFF2  6A2E               	clrf	displayLogs@year+1,c
  5902                           
  5903                           ;standbyMode.c: 988: unsigned int month = readEEPROM(1+n);
  5904  00DFF4  2850               	incf	displayLogs@n,w,c
  5905  00DFF6  EC53  F060         	call	_readEEPROM
  5906  00DFFA  6E2B               	movwf	??_displayLogs& (0+255),c
  5907  00DFFC  502B               	movf	??_displayLogs,w,c
  5908  00DFFE  6E2F               	movwf	displayLogs@month,c
  5909  00E000  6A30               	clrf	displayLogs@month+1,c
  5910                           
  5911                           ;standbyMode.c: 989: unsigned int day = readEEPROM(2+n);
  5912  00E002  5050               	movf	displayLogs@n,w,c
  5913  00E004  0F02               	addlw	2
  5914  00E006  EC53  F060         	call	_readEEPROM
  5915  00E00A  6E2B               	movwf	??_displayLogs& (0+255),c
  5916  00E00C  502B               	movf	??_displayLogs,w,c
  5917  00E00E  6E31               	movwf	displayLogs@day,c
  5918  00E010  6A32               	clrf	displayLogs@day+1,c
  5919                           
  5920                           ;standbyMode.c: 990: unsigned int operationTime = readEEPROM(3+n);
  5921  00E012  5050               	movf	displayLogs@n,w,c
  5922  00E014  0F03               	addlw	3
  5923  00E016  EC53  F060         	call	_readEEPROM
  5924  00E01A  6E2B               	movwf	??_displayLogs& (0+255),c
  5925  00E01C  502B               	movf	??_displayLogs,w,c
  5926  00E01E  6E42               	movwf	displayLogs@operationTime,c
  5927  00E020  6A43               	clrf	displayLogs@operationTime+1,c
  5928                           
  5929                           ;standbyMode.c: 991: unsigned int roundPieces = readEEPROM(4+n);
  5930  00E022  5050               	movf	displayLogs@n,w,c
  5931  00E024  0F04               	addlw	4
  5932  00E026  EC53  F060         	call	_readEEPROM
  5933  00E02A  6E2B               	movwf	??_displayLogs& (0+255),c
  5934  00E02C  502B               	movf	??_displayLogs,w,c
  5935  00E02E  6E33               	movwf	displayLogs@roundPieces,c
  5936  00E030  6A34               	clrf	displayLogs@roundPieces+1,c
  5937                           
  5938                           ;standbyMode.c: 992: unsigned int flatPieces = readEEPROM(5+n);
  5939  00E032  5050               	movf	displayLogs@n,w,c
  5940  00E034  0F05               	addlw	5
  5941  00E036  EC53  F060         	call	_readEEPROM
  5942  00E03A  6E2B               	movwf	??_displayLogs& (0+255),c
  5943  00E03C  502B               	movf	??_displayLogs,w,c
  5944  00E03E  6E35               	movwf	displayLogs@flatPieces,c
  5945  00E040  6A36               	clrf	displayLogs@flatPieces+1,c
  5946                           
  5947                           ;standbyMode.c: 993: unsigned int longPieces = readEEPROM(6+n);
  5948  00E042  5050               	movf	displayLogs@n,w,c
  5949  00E044  0F06               	addlw	6
  5950  00E046  EC53  F060         	call	_readEEPROM
  5951  00E04A  6E2B               	movwf	??_displayLogs& (0+255),c
  5952  00E04C  502B               	movf	??_displayLogs,w,c
  5953  00E04E  6E37               	movwf	displayLogs@longPieces,c
  5954  00E050  6A38               	clrf	displayLogs@longPieces+1,c
  5955                           
  5956                           ;standbyMode.c: 994: unsigned int markedDrawer1 = readEEPROM(7+n);
  5957  00E052  5050               	movf	displayLogs@n,w,c
  5958  00E054  0F07               	addlw	7
  5959  00E056  EC53  F060         	call	_readEEPROM
  5960  00E05A  6E2B               	movwf	??_displayLogs& (0+255),c
  5961  00E05C  502B               	movf	??_displayLogs,w,c
  5962  00E05E  6E48               	movwf	displayLogs@markedDrawer1,c
  5963  00E060  6A49               	clrf	displayLogs@markedDrawer1+1,c
  5964                           
  5965                           ;standbyMode.c: 995: unsigned int markedDrawer2 = readEEPROM(8+n);
  5966  00E062  5050               	movf	displayLogs@n,w,c
  5967  00E064  0F08               	addlw	8
  5968  00E066  EC53  F060         	call	_readEEPROM
  5969  00E06A  6E2B               	movwf	??_displayLogs& (0+255),c
  5970  00E06C  502B               	movf	??_displayLogs,w,c
  5971  00E06E  6E4A               	movwf	displayLogs@markedDrawer2,c
  5972  00E070  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  5973                           
  5974                           ;standbyMode.c: 996: unsigned int markedDrawer3 = readEEPROM(9+n);
  5975  00E072  5050               	movf	displayLogs@n,w,c
  5976  00E074  0F09               	addlw	9
  5977  00E076  EC53  F060         	call	_readEEPROM
  5978  00E07A  6E2B               	movwf	??_displayLogs& (0+255),c
  5979  00E07C  502B               	movf	??_displayLogs,w,c
  5980  00E07E  6E4C               	movwf	displayLogs@markedDrawer3,c
  5981  00E080  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  5982                           
  5983                           ;standbyMode.c: 997: unsigned int markedDrawer4 = readEEPROM(10+n);
  5984  00E082  5050               	movf	displayLogs@n,w,c
  5985  00E084  0F0A               	addlw	10
  5986  00E086  EC53  F060         	call	_readEEPROM
  5987  00E08A  6E2B               	movwf	??_displayLogs& (0+255),c
  5988  00E08C  502B               	movf	??_displayLogs,w,c
  5989  00E08E  6E4E               	movwf	displayLogs@markedDrawer4,c
  5990  00E090  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  5991                           
  5992                           ;standbyMode.c: 998: unsigned int drawerNumber = readEEPROM(11+n);
  5993  00E092  5050               	movf	displayLogs@n,w,c
  5994  00E094  0F0B               	addlw	11
  5995  00E096  EC53  F060         	call	_readEEPROM
  5996  00E09A  6E2B               	movwf	??_displayLogs& (0+255),c
  5997  00E09C  502B               	movf	??_displayLogs,w,c
  5998  00E09E  6E44               	movwf	displayLogs@drawerNumber,c
  5999  00E0A0  6A45               	clrf	displayLogs@drawerNumber+1,c
  6000                           
  6001                           ;standbyMode.c: 999: unsigned int dietType = readEEPROM(12+n);
  6002  00E0A2  5050               	movf	displayLogs@n,w,c
  6003  00E0A4  0F0C               	addlw	12
  6004  00E0A6  EC53  F060         	call	_readEEPROM
  6005  00E0AA  6E2B               	movwf	??_displayLogs& (0+255),c
  6006  00E0AC  502B               	movf	??_displayLogs,w,c
  6007  00E0AE  6E3D               	movwf	displayLogs@dietType,c
  6008  00E0B0  6A3E               	clrf	displayLogs@dietType+1,c
  6009                           
  6010                           ;standbyMode.c: 1000: unsigned int foodType = readEEPROM(13+n);
  6011  00E0B2  5050               	movf	displayLogs@n,w,c
  6012  00E0B4  0F0D               	addlw	13
  6013  00E0B6  EC53  F060         	call	_readEEPROM
  6014  00E0BA  6E2B               	movwf	??_displayLogs& (0+255),c
  6015  00E0BC  502B               	movf	??_displayLogs,w,c
  6016  00E0BE  6E3F               	movwf	displayLogs@foodType,c
  6017  00E0C0  6A40               	clrf	displayLogs@foodType+1,c
  6018                           
  6019                           ;standbyMode.c: 1001: unsigned int i = 0;
  6020  00E0C2  0E00               	movlw	0
  6021  00E0C4  6E47               	movwf	displayLogs@i+1,c
  6022  00E0C6  0E00               	movlw	0
  6023  00E0C8  6E46               	movwf	displayLogs@i,c
  6024                           
  6025                           ;standbyMode.c: 1003: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6026  00E0CA  0E01               	movlw	1
  6027  00E0CC  EC3F  F060         	call	_lcdInst
  6028  00E0D0  0EC3               	movlw	195
  6029  00E0D2  6E2B               	movwf	??_displayLogs& (0+255),c
  6030  00E0D4  0ECD               	movlw	205
  6031  00E0D6                     u9697:
  6032  00E0D6  2EE8               	decfsz	wreg,f,c
  6033  00E0D8  D7FE               	bra	u9697
  6034  00E0DA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6035  00E0DC  D7FC               	bra	u9697
  6036  00E0DE  F000               	nop	
  6037                           
  6038                           ;standbyMode.c: 1004: printf("Date:");
  6039  00E0E0  0EB2               	movlw	low STR_47
  6040  00E0E2  6E0D               	movwf	printf@f,c
  6041  00E0E4  0EFF               	movlw	high STR_47
  6042  00E0E6  6E0E               	movwf	printf@f+1,c
  6043  00E0E8  EC51  F06B         	call	_printf	;wreg free
  6044                           
  6045                           ;standbyMode.c: 1005: lcdInst(0xC0);;
  6046  00E0EC  0EC0               	movlw	192
  6047  00E0EE  EC3F  F060         	call	_lcdInst
  6048                           
  6049                           ;standbyMode.c: 1006: printf("%02i/%02i/%02i", year, month, day);
  6050  00E0F2  0E7D               	movlw	low STR_48
  6051  00E0F4  6E0D               	movwf	printf@f,c
  6052  00E0F6  0EFE               	movlw	high STR_48
  6053  00E0F8  6E0E               	movwf	printf@f+1,c
  6054  00E0FA  C02D  F00F         	movff	displayLogs@year,?_printf+2
  6055  00E0FE  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  6056  00E102  C02F  F011         	movff	displayLogs@month,?_printf+4
  6057  00E106  C030  F012         	movff	displayLogs@month+1,?_printf+5
  6058  00E10A  C031  F013         	movff	displayLogs@day,?_printf+6
  6059  00E10E  C032  F014         	movff	displayLogs@day+1,?_printf+7
  6060  00E112  EC51  F06B         	call	_printf	;wreg free
  6061                           
  6062                           ;standbyMode.c: 1007: _delay((unsigned long)((500)*(40000000/4000.0)));
  6063  00E116  0E1A               	movlw	26
  6064  00E118  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6065  00E11A  0E5E               	movlw	94
  6066  00E11C  6E2B               	movwf	??_displayLogs& (0+255),c
  6067  00E11E  0E6E               	movlw	110
  6068  00E120                     u9707:
  6069  00E120  2EE8               	decfsz	wreg,f,c
  6070  00E122  D7FE               	bra	u9707
  6071  00E124  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6072  00E126  D7FC               	bra	u9707
  6073  00E128  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6074  00E12A  D7FA               	bra	u9707
  6075  00E12C  D000               	nop2	
  6076  00E12E                     
  6077                           ;standbyMode.c: 1009: continue;
  6078  00E12E  A281               	btfss	3969,1,c	;volatile
  6079  00E130  D7FE               	goto	l512
  6080                           
  6081                           ;standbyMode.c: 1010: }
  6082                           ;standbyMode.c: 1012: unsigned int minutes = operationTime/60;
  6083  00E132  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  6084  00E136  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  6085  00E13A  0E00               	movlw	0
  6086  00E13C  6E04               	movwf	___lwdiv@divisor+1,c
  6087  00E13E  0E3C               	movlw	60
  6088  00E140  6E03               	movwf	___lwdiv@divisor,c
  6089  00E142  EC2A  F061         	call	___lwdiv	;wreg free
  6090  00E146  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  6091  00E14A  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  6092                           
  6093                           ;standbyMode.c: 1013: unsigned int seconds = operationTime%60;
  6094  00E14E  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  6095  00E152  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  6096  00E156  0E00               	movlw	0
  6097  00E158  6E0B               	movwf	___lwmod@divisor+1,c
  6098  00E15A  0E3C               	movlw	60
  6099  00E15C  6E0A               	movwf	___lwmod@divisor,c
  6100  00E15E  ECE3  F060         	call	___lwmod	;wreg free
  6101  00E162  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  6102  00E166  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  6103                           
  6104                           ;standbyMode.c: 1014: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6105  00E16A  0E01               	movlw	1
  6106  00E16C  EC3F  F060         	call	_lcdInst
  6107  00E170  0EC3               	movlw	195
  6108  00E172  6E2B               	movwf	??_displayLogs& (0+255),c
  6109  00E174  0ECD               	movlw	205
  6110  00E176                     u9717:
  6111  00E176  2EE8               	decfsz	wreg,f,c
  6112  00E178  D7FE               	bra	u9717
  6113  00E17A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6114  00E17C  D7FC               	bra	u9717
  6115  00E17E  F000               	nop	
  6116                           
  6117                           ;standbyMode.c: 1015: printf("Operation time:");
  6118  00E180  0ED1               	movlw	low STR_49
  6119  00E182  6E0D               	movwf	printf@f,c
  6120  00E184  0EFD               	movlw	high STR_49
  6121  00E186  6E0E               	movwf	printf@f+1,c
  6122  00E188  EC51  F06B         	call	_printf	;wreg free
  6123                           
  6124                           ;standbyMode.c: 1016: lcdInst(0xC0);;
  6125  00E18C  0EC0               	movlw	192
  6126  00E18E  EC3F  F060         	call	_lcdInst
  6127                           
  6128                           ;standbyMode.c: 1017: printf("%i:%02i", minutes, seconds);
  6129  00E192  0E8C               	movlw	low STR_50
  6130  00E194  6E0D               	movwf	printf@f,c
  6131  00E196  0EFF               	movlw	high STR_50
  6132  00E198  6E0E               	movwf	printf@f+1,c
  6133  00E19A  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  6134  00E19E  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  6135  00E1A2  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  6136  00E1A6  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  6137  00E1AA  EC51  F06B         	call	_printf	;wreg free
  6138                           
  6139                           ;standbyMode.c: 1018: _delay((unsigned long)((500)*(40000000/4000.0)));
  6140  00E1AE  0E1A               	movlw	26
  6141  00E1B0  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6142  00E1B2  0E5E               	movlw	94
  6143  00E1B4  6E2B               	movwf	??_displayLogs& (0+255),c
  6144  00E1B6  0E6E               	movlw	110
  6145  00E1B8                     u9727:
  6146  00E1B8  2EE8               	decfsz	wreg,f,c
  6147  00E1BA  D7FE               	bra	u9727
  6148  00E1BC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6149  00E1BE  D7FC               	bra	u9727
  6150  00E1C0  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6151  00E1C2  D7FA               	bra	u9727
  6152  00E1C4  D000               	nop2	
  6153  00E1C6                     
  6154                           ;standbyMode.c: 1021: continue;
  6155  00E1C6  A281               	btfss	3969,1,c	;volatile
  6156  00E1C8  D7FE               	goto	l515
  6157                           
  6158                           ;standbyMode.c: 1022: }
  6159                           ;standbyMode.c: 1024: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6160  00E1CA  0E01               	movlw	1
  6161  00E1CC  EC3F  F060         	call	_lcdInst
  6162  00E1D0  0EC3               	movlw	195
  6163  00E1D2  6E2B               	movwf	??_displayLogs& (0+255),c
  6164  00E1D4  0ECD               	movlw	205
  6165  00E1D6                     u9737:
  6166  00E1D6  2EE8               	decfsz	wreg,f,c
  6167  00E1D8  D7FE               	bra	u9737
  6168  00E1DA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6169  00E1DC  D7FC               	bra	u9737
  6170  00E1DE  F000               	nop	
  6171                           
  6172                           ;standbyMode.c: 1025: printf("Marked drawers:");
  6173  00E1E0  0EE1               	movlw	low STR_51
  6174  00E1E2  6E0D               	movwf	printf@f,c
  6175  00E1E4  0EFD               	movlw	high STR_51
  6176  00E1E6  6E0E               	movwf	printf@f+1,c
  6177  00E1E8  EC51  F06B         	call	_printf	;wreg free
  6178                           
  6179                           ;standbyMode.c: 1026: lcdInst(0xC0);;
  6180  00E1EC  0EC0               	movlw	192
  6181  00E1EE  EC3F  F060         	call	_lcdInst
  6182                           
  6183                           ;standbyMode.c: 1028: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0
      +                          ){
  6184  00E1F2  504E               	movf	displayLogs@markedDrawer4,w,c
  6185  00E1F4  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6186  00E1F6  A4D8               	btfss	status,2,c
  6187  00E1F8  D01E               	goto	l517
  6188  00E1FA  504C               	movf	displayLogs@markedDrawer3,w,c
  6189  00E1FC  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6190  00E1FE  A4D8               	btfss	status,2,c
  6191  00E200  D01A               	goto	l517
  6192  00E202  504A               	movf	displayLogs@markedDrawer2,w,c
  6193  00E204  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  6194  00E206  A4D8               	btfss	status,2,c
  6195  00E208  D016               	goto	l517
  6196                           
  6197                           ;standbyMode.c: 1029: printf("%i", markedDrawer1);
  6198  00E20A  0E7A               	movlw	low (STR_55+12)
  6199  00E20C  6E0D               	movwf	printf@f,c
  6200  00E20E  0EFE               	movlw	high (STR_55+12)
  6201  00E210  6E0E               	movwf	printf@f+1,c
  6202  00E212  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6203  00E216  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6204  00E21A  EC51  F06B         	call	_printf	;wreg free
  6205                           
  6206                           ;standbyMode.c: 1030: _delay((unsigned long)((500)*(40000000/4000.0)));
  6207  00E21E  0E1A               	movlw	26
  6208  00E220  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6209  00E222  0E5E               	movlw	94
  6210  00E224  6E2B               	movwf	??_displayLogs& (0+255),c
  6211  00E226  0E6E               	movlw	110
  6212  00E228                     u9747:
  6213  00E228  2EE8               	decfsz	wreg,f,c
  6214  00E22A  D7FE               	bra	u9747
  6215  00E22C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6216  00E22E  D7FC               	bra	u9747
  6217  00E230  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6218  00E232  D7FA               	bra	u9747
  6219  00E234  D065               	goto	L18
  6220  00E236                     l517:
  6221                           
  6222                           ;standbyMode.c: 1033: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6223  00E236  504E               	movf	displayLogs@markedDrawer4,w,c
  6224  00E238  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6225  00E23A  A4D8               	btfss	status,2,c
  6226  00E23C  D01E               	goto	l519
  6227  00E23E  504C               	movf	displayLogs@markedDrawer3,w,c
  6228  00E240  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6229  00E242  A4D8               	btfss	status,2,c
  6230  00E244  D01A               	goto	l519
  6231                           
  6232                           ;standbyMode.c: 1034: printf("%i, %i", markedDrawer1, markedDrawer2);
  6233  00E246  0E76               	movlw	low (STR_55+8)
  6234  00E248  6E0D               	movwf	printf@f,c
  6235  00E24A  0EFE               	movlw	high (STR_55+8)
  6236  00E24C  6E0E               	movwf	printf@f+1,c
  6237  00E24E  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6238  00E252  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6239  00E256  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6240  00E25A  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6241  00E25E  EC51  F06B         	call	_printf	;wreg free
  6242                           
  6243                           ;standbyMode.c: 1035: _delay((unsigned long)((500)*(40000000/4000.0)));
  6244  00E262  0E1A               	movlw	26
  6245  00E264  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6246  00E266  0E5E               	movlw	94
  6247  00E268  6E2B               	movwf	??_displayLogs& (0+255),c
  6248  00E26A  0E6E               	movlw	110
  6249  00E26C                     u9757:
  6250  00E26C  2EE8               	decfsz	wreg,f,c
  6251  00E26E  D7FE               	bra	u9757
  6252  00E270  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6253  00E272  D7FC               	bra	u9757
  6254  00E274  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6255  00E276  D7FA               	bra	u9757
  6256  00E278  D043               	goto	L18
  6257  00E27A                     l519:
  6258                           
  6259                           ;standbyMode.c: 1038: else if (markedDrawer4 == 0){
  6260  00E27A  504E               	movf	displayLogs@markedDrawer4,w,c
  6261  00E27C  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6262  00E27E  A4D8               	btfss	status,2,c
  6263  00E280  D01E               	goto	l521
  6264                           
  6265                           ;standbyMode.c: 1039: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6266  00E282  0E72               	movlw	low (STR_55+4)
  6267  00E284  6E0D               	movwf	printf@f,c
  6268  00E286  0EFE               	movlw	high (STR_55+4)
  6269  00E288  6E0E               	movwf	printf@f+1,c
  6270  00E28A  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6271  00E28E  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6272  00E292  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6273  00E296  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6274  00E29A  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6275  00E29E  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6276  00E2A2  EC51  F06B         	call	_printf	;wreg free
  6277                           
  6278                           ;standbyMode.c: 1040: _delay((unsigned long)((500)*(40000000/4000.0)));
  6279  00E2A6  0E1A               	movlw	26
  6280  00E2A8  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6281  00E2AA  0E5E               	movlw	94
  6282  00E2AC  6E2B               	movwf	??_displayLogs& (0+255),c
  6283  00E2AE  0E6E               	movlw	110
  6284  00E2B0                     u9767:
  6285  00E2B0  2EE8               	decfsz	wreg,f,c
  6286  00E2B2  D7FE               	bra	u9767
  6287  00E2B4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6288  00E2B6  D7FC               	bra	u9767
  6289  00E2B8  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6290  00E2BA  D7FA               	bra	u9767
  6291  00E2BC  D021               	goto	L18
  6292  00E2BE                     l521:
  6293                           
  6294                           ;standbyMode.c: 1043: else {
  6295                           ;standbyMode.c: 1044: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawe
      +                          r3, markedDrawer4);
  6296  00E2BE  0E6E               	movlw	low STR_55
  6297  00E2C0  6E0D               	movwf	printf@f,c
  6298  00E2C2  0EFE               	movlw	high STR_55
  6299  00E2C4  6E0E               	movwf	printf@f+1,c
  6300  00E2C6  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6301  00E2CA  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6302  00E2CE  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6303  00E2D2  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6304  00E2D6  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6305  00E2DA  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6306  00E2DE  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6307  00E2E2  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6308  00E2E6  EC51  F06B         	call	_printf	;wreg free
  6309                           
  6310                           ;standbyMode.c: 1045: _delay((unsigned long)((500)*(40000000/4000.0)));
  6311  00E2EA  0E1A               	movlw	26
  6312  00E2EC  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6313  00E2EE  0E5E               	movlw	94
  6314  00E2F0  6E2B               	movwf	??_displayLogs& (0+255),c
  6315  00E2F2  0E6E               	movlw	110
  6316  00E2F4                     u9777:
  6317  00E2F4  2EE8               	decfsz	wreg,f,c
  6318  00E2F6  D7FE               	bra	u9777
  6319  00E2F8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6320  00E2FA  D7FC               	bra	u9777
  6321  00E2FC  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6322  00E2FE  D7FA               	bra	u9777
  6323  00E300                     L18:
  6324  00E300  D000               	nop2	
  6325  00E302                     
  6326                           ;standbyMode.c: 1049: continue;
  6327                           
  6328                           ;standbyMode.c: 1046: }
  6329                           ;standbyMode.c: 1048: while(PORTBbits.RB1 == 0){
  6330  00E302  A281               	btfss	3969,1,c	;volatile
  6331  00E304  D7FE               	goto	l522
  6332                           
  6333                           ;standbyMode.c: 1050: }
  6334                           ;standbyMode.c: 1052: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6335  00E306  0E01               	movlw	1
  6336  00E308  EC3F  F060         	call	_lcdInst
  6337  00E30C  0EC3               	movlw	195
  6338  00E30E  6E2B               	movwf	??_displayLogs& (0+255),c
  6339  00E310  0ECD               	movlw	205
  6340  00E312                     u9787:
  6341  00E312  2EE8               	decfsz	wreg,f,c
  6342  00E314  D7FE               	bra	u9787
  6343  00E316  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6344  00E318  D7FC               	bra	u9787
  6345  00E31A  F000               	nop	
  6346                           
  6347                           ;standbyMode.c: 1053: printf("Remaining pieces:");
  6348  00E31C  0E18               	movlw	low STR_56
  6349  00E31E  6E0D               	movwf	printf@f,c
  6350  00E320  0EFD               	movlw	high STR_56
  6351  00E322  6E0E               	movwf	printf@f+1,c
  6352  00E324  EC51  F06B         	call	_printf	;wreg free
  6353                           
  6354                           ;standbyMode.c: 1054: lcdInst(0xC0);;
  6355  00E328  0EC0               	movlw	192
  6356  00E32A  EC3F  F060         	call	_lcdInst
  6357                           
  6358                           ;standbyMode.c: 1055: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  6359  00E32E  0E6E               	movlw	low STR_57
  6360  00E330  6E0D               	movwf	printf@f,c
  6361  00E332  0EFD               	movlw	high STR_57
  6362  00E334  6E0E               	movwf	printf@f+1,c
  6363  00E336  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  6364  00E33A  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  6365  00E33E  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  6366  00E342  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  6367  00E346  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  6368  00E34A  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  6369  00E34E  EC51  F06B         	call	_printf	;wreg free
  6370                           
  6371                           ;standbyMode.c: 1056: _delay((unsigned long)((500)*(40000000/4000.0)));
  6372  00E352  0E1A               	movlw	26
  6373  00E354  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6374  00E356  0E5E               	movlw	94
  6375  00E358  6E2B               	movwf	??_displayLogs& (0+255),c
  6376  00E35A  0E6E               	movlw	110
  6377  00E35C                     u9797:
  6378  00E35C  2EE8               	decfsz	wreg,f,c
  6379  00E35E  D7FE               	bra	u9797
  6380  00E360  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6381  00E362  D7FC               	bra	u9797
  6382  00E364  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6383  00E366  D7FA               	bra	u9797
  6384  00E368  D000               	nop2	
  6385  00E36A                     
  6386                           ;standbyMode.c: 1059: continue;
  6387  00E36A  A281               	btfss	3969,1,c	;volatile
  6388  00E36C  D7FE               	goto	l527
  6389                           
  6390                           ;standbyMode.c: 1060: }
  6391                           ;standbyMode.c: 1062: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6392  00E36E  0E01               	movlw	1
  6393  00E370  EC3F  F060         	call	_lcdInst
  6394  00E374  0EC3               	movlw	195
  6395  00E376  6E2B               	movwf	??_displayLogs& (0+255),c
  6396  00E378  0ECD               	movlw	205
  6397  00E37A                     u9807:
  6398  00E37A  2EE8               	decfsz	wreg,f,c
  6399  00E37C  D7FE               	bra	u9807
  6400  00E37E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6401  00E380  D7FC               	bra	u9807
  6402  00E382  F000               	nop	
  6403                           
  6404                           ;standbyMode.c: 1063: printf("Input Summary:");
  6405  00E384  0E50               	movlw	low STR_58
  6406  00E386  6E0D               	movwf	printf@f,c
  6407  00E388  0EFE               	movlw	high STR_58
  6408  00E38A  6E0E               	movwf	printf@f+1,c
  6409  00E38C  EC51  F06B         	call	_printf	;wreg free
  6410                           
  6411                           ;standbyMode.c: 1064: _delay((unsigned long)((500)*(40000000/4000.0)));
  6412  00E390  0E1A               	movlw	26
  6413  00E392  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6414  00E394  0E5E               	movlw	94
  6415  00E396  6E2B               	movwf	??_displayLogs& (0+255),c
  6416  00E398  0E6E               	movlw	110
  6417  00E39A                     u9817:
  6418  00E39A  2EE8               	decfsz	wreg,f,c
  6419  00E39C  D7FE               	bra	u9817
  6420  00E39E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6421  00E3A0  D7FC               	bra	u9817
  6422  00E3A2  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6423  00E3A4  D7FA               	bra	u9817
  6424  00E3A6  D000               	nop2	
  6425  00E3A8                     
  6426                           ;standbyMode.c: 1067: continue;
  6427  00E3A8  A281               	btfss	3969,1,c	;volatile
  6428  00E3AA  D7FE               	goto	l530
  6429                           
  6430                           ;standbyMode.c: 1068: }
  6431                           ;standbyMode.c: 1070: for (i=0; i<8; i++){
  6432  00E3AC  0E00               	movlw	0
  6433  00E3AE  6E47               	movwf	displayLogs@i+1,c
  6434  00E3B0  0E00               	movlw	0
  6435  00E3B2  6E46               	movwf	displayLogs@i,c
  6436  00E3B4  5047               	movf	displayLogs@i+1,w,c
  6437  00E3B6  E105               	bnz	u6280
  6438  00E3B8  0E08               	movlw	8
  6439  00E3BA  5C46               	subwf	displayLogs@i,w,c
  6440  00E3BC  B0D8               	btfsc	status,0,c
  6441  00E3BE  D089               	goto	u6310
  6442  00E3C0  D001               	goto	l532
  6443  00E3C2                     u6280:
  6444  00E3C2  D087               	goto	u6310
  6445  00E3C4                     l532:
  6446                           
  6447                           ;standbyMode.c: 1071: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6448  00E3C4  0E01               	movlw	1
  6449  00E3C6  EC3F  F060         	call	_lcdInst
  6450  00E3CA  0EC3               	movlw	195
  6451  00E3CC  6E2B               	movwf	??_displayLogs& (0+255),c
  6452  00E3CE  0ECD               	movlw	205
  6453  00E3D0                     u9827:
  6454  00E3D0  2EE8               	decfsz	wreg,f,c
  6455  00E3D2  D7FE               	bra	u9827
  6456  00E3D4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6457  00E3D6  D7FC               	bra	u9827
  6458  00E3D8  F000               	nop	
  6459                           
  6460                           ;standbyMode.c: 1072: n = (logNumber-1)*35 + 3*i;
  6461  00E3DA  0EFF               	movlw	255
  6462  00E3DC  2429               	addwf	displayLogs@logNumber,w,c
  6463  00E3DE  6E01               	movwf	___wmul@multiplier,c
  6464  00E3E0  0EFF               	movlw	255
  6465  00E3E2  202A               	addwfc	displayLogs@logNumber+1,w,c
  6466  00E3E4  6E02               	movwf	___wmul@multiplier+1,c
  6467  00E3E6  0E00               	movlw	0
  6468  00E3E8  6E04               	movwf	___wmul@multiplicand+1,c
  6469  00E3EA  0E23               	movlw	35
  6470  00E3EC  6E03               	movwf	___wmul@multiplicand,c
  6471  00E3EE  EC9C  F060         	call	___wmul	;wreg free
  6472  00E3F2  C001  F02B         	movff	?___wmul,??_displayLogs
  6473  00E3F6  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  6474  00E3FA  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  6475  00E3FE  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  6476  00E402  0E00               	movlw	0
  6477  00E404  6E04               	movwf	___wmul@multiplicand+1,c
  6478  00E406  0E03               	movlw	3
  6479  00E408  6E03               	movwf	___wmul@multiplicand,c
  6480  00E40A  EC9C  F060         	call	___wmul	;wreg free
  6481  00E40E  5001               	movf	?___wmul,w,c
  6482  00E410  242B               	addwf	??_displayLogs,w,c
  6483  00E412  6E50               	movwf	displayLogs@n,c
  6484  00E414  5002               	movf	?___wmul+1,w,c
  6485  00E416  202C               	addwfc	??_displayLogs+1,w,c
  6486  00E418  6E51               	movwf	displayLogs@n+1,c
  6487                           
  6488                           ;standbyMode.c: 1073: drawerNumber = readEEPROM(11+n);
  6489  00E41A  5050               	movf	displayLogs@n,w,c
  6490  00E41C  0F0B               	addlw	11
  6491  00E41E  EC53  F060         	call	_readEEPROM
  6492  00E422  6E2B               	movwf	??_displayLogs& (0+255),c
  6493  00E424  502B               	movf	??_displayLogs,w,c
  6494  00E426  6E44               	movwf	displayLogs@drawerNumber,c
  6495  00E428  6A45               	clrf	displayLogs@drawerNumber+1,c
  6496                           
  6497                           ;standbyMode.c: 1074: dietType = readEEPROM(12+n);
  6498  00E42A  5050               	movf	displayLogs@n,w,c
  6499  00E42C  0F0C               	addlw	12
  6500  00E42E  EC53  F060         	call	_readEEPROM
  6501  00E432  6E2B               	movwf	??_displayLogs& (0+255),c
  6502  00E434  502B               	movf	??_displayLogs,w,c
  6503  00E436  6E3D               	movwf	displayLogs@dietType,c
  6504  00E438  6A3E               	clrf	displayLogs@dietType+1,c
  6505                           
  6506                           ;standbyMode.c: 1075: foodType = readEEPROM(13+n);
  6507  00E43A  5050               	movf	displayLogs@n,w,c
  6508  00E43C  0F0D               	addlw	13
  6509  00E43E  EC53  F060         	call	_readEEPROM
  6510  00E442  6E2B               	movwf	??_displayLogs& (0+255),c
  6511  00E444  502B               	movf	??_displayLogs,w,c
  6512  00E446  6E3F               	movwf	displayLogs@foodType,c
  6513  00E448  6A40               	clrf	displayLogs@foodType+1,c
  6514                           
  6515                           ;standbyMode.c: 1076: if (drawerNumber != 0){
  6516  00E44A  5044               	movf	displayLogs@drawerNumber,w,c
  6517  00E44C  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  6518  00E44E  B4D8               	btfsc	status,2,c
  6519  00E450  D03B               	goto	u6300
  6520                           
  6521                           ;standbyMode.c: 1077: printf("Drawer %i:", drawerNumber);
  6522  00E452  0E51               	movlw	low STR_59
  6523  00E454  6E0D               	movwf	printf@f,c
  6524  00E456  0EFF               	movlw	high STR_59
  6525  00E458  6E0E               	movwf	printf@f+1,c
  6526  00E45A  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  6527  00E45E  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  6528  00E462  EC51  F06B         	call	_printf	;wreg free
  6529                           
  6530                           ;standbyMode.c: 1078: lcdInst(0xC0);;
  6531  00E466  0EC0               	movlw	192
  6532  00E468  EC3F  F060         	call	_lcdInst
  6533                           
  6534                           ;standbyMode.c: 1079: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  6535  00E46C  0ED6               	movlw	low STR_60
  6536  00E46E  6E0D               	movwf	printf@f,c
  6537  00E470  0EFF               	movlw	high STR_60
  6538  00E472  6E0E               	movwf	printf@f+1,c
  6539  00E474  90D8               	bcf	status,0,c
  6540  00E476  343D               	rlcf	displayLogs@dietType,w,c
  6541  00E478  6ED9               	movwf	fsr2l,c
  6542  00E47A  343E               	rlcf	displayLogs@dietType+1,w,c
  6543  00E47C  6EDA               	movwf	fsr2h,c
  6544  00E47E  0E80               	movlw	low _inputs
  6545  00E480  26D9               	addwf	fsr2l,f,c
  6546  00E482  0E00               	movlw	high _inputs
  6547  00E484  22DA               	addwfc	fsr2h,f,c
  6548  00E486  CFDE F00F          	movff	postinc2,?_printf+2
  6549  00E48A  CFDD F010          	movff	postdec2,?_printf+3
  6550  00E48E  90D8               	bcf	status,0,c
  6551  00E490  343F               	rlcf	displayLogs@foodType,w,c
  6552  00E492  6ED9               	movwf	fsr2l,c
  6553  00E494  3440               	rlcf	displayLogs@foodType+1,w,c
  6554  00E496  6EDA               	movwf	fsr2h,c
  6555  00E498  0EA4               	movlw	low _foodInputs
  6556  00E49A  26D9               	addwf	fsr2l,f,c
  6557  00E49C  0E00               	movlw	high _foodInputs
  6558  00E49E  22DA               	addwfc	fsr2h,f,c
  6559  00E4A0  CFDE F011          	movff	postinc2,?_printf+4
  6560  00E4A4  CFDD F012          	movff	postdec2,?_printf+5
  6561  00E4A8  EC51  F06B         	call	_printf	;wreg free
  6562                           
  6563                           ;standbyMode.c: 1080: _delay((unsigned long)((500)*(40000000/4000.0)));
  6564  00E4AC  0E1A               	movlw	26
  6565  00E4AE  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6566  00E4B0  0E5E               	movlw	94
  6567  00E4B2  6E2B               	movwf	??_displayLogs& (0+255),c
  6568  00E4B4  0E6E               	movlw	110
  6569  00E4B6                     u9837:
  6570  00E4B6  2EE8               	decfsz	wreg,f,c
  6571  00E4B8  D7FE               	bra	u9837
  6572  00E4BA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6573  00E4BC  D7FC               	bra	u9837
  6574  00E4BE  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6575  00E4C0  D7FA               	bra	u9837
  6576  00E4C2  D000               	nop2	
  6577  00E4C4                     
  6578                           ;standbyMode.c: 1082: continue;
  6579  00E4C4  A281               	btfss	3969,1,c	;volatile
  6580  00E4C6  D7FE               	goto	l536
  6581  00E4C8                     u6300:
  6582  00E4C8  4A46               	infsnz	displayLogs@i,f,c
  6583  00E4CA  2A47               	incf	displayLogs@i+1,f,c
  6584  00E4CC  5047               	movf	displayLogs@i+1,w,c
  6585  00E4CE  E101               	bnz	l5650
  6586  00E4D0  D773               	goto	L19
  6587  00E4D2                     u6310:
  6588  00E4D2                     l5650:
  6589                           
  6590                           ;standbyMode.c: 1083: }
  6591                           ;standbyMode.c: 1084: }
  6592                           ;standbyMode.c: 1085: }
  6593                           ;standbyMode.c: 1087: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6594  00E4D2  0E01               	movlw	1
  6595  00E4D4  EC3F  F060         	call	_lcdInst
  6596  00E4D8  0EC3               	movlw	195
  6597  00E4DA  6E2B               	movwf	??_displayLogs& (0+255),c
  6598  00E4DC  0ECD               	movlw	205
  6599  00E4DE                     u9847:
  6600  00E4DE  2EE8               	decfsz	wreg,f,c
  6601  00E4E0  D7FE               	bra	u9847
  6602  00E4E2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6603  00E4E4  D7FC               	bra	u9847
  6604  00E4E6  F000               	nop	
  6605                           
  6606                           ;standbyMode.c: 1088: printf("Another log?");
  6607  00E4E8  0E0B               	movlw	low STR_61
  6608  00E4EA  6E0D               	movwf	printf@f,c
  6609  00E4EC  0EFF               	movlw	high STR_61
  6610  00E4EE  6E0E               	movwf	printf@f+1,c
  6611  00E4F0  EC51  F06B         	call	_printf	;wreg free
  6612                           
  6613                           ;standbyMode.c: 1089: lcdInst(0xC0);;
  6614  00E4F4  0EC0               	movlw	192
  6615  00E4F6  EC3F  F060         	call	_lcdInst
  6616                           
  6617                           ;standbyMode.c: 1090: printf("# = No, D = Yes");
  6618  00E4FA  0E21               	movlw	low STR_62
  6619  00E4FC  6E0D               	movwf	printf@f,c
  6620  00E4FE  0EFE               	movlw	high STR_62
  6621  00E500  6E0E               	movwf	printf@f+1,c
  6622  00E502  EC51  F06B         	call	_printf	;wreg free
  6623                           
  6624                           ;standbyMode.c: 1091: _delay((unsigned long)((500)*(40000000/4000.0)));
  6625  00E506  0E1A               	movlw	26
  6626  00E508  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6627  00E50A  0E5E               	movlw	94
  6628  00E50C  6E2B               	movwf	??_displayLogs& (0+255),c
  6629  00E50E  0E6E               	movlw	110
  6630  00E510                     u9857:
  6631  00E510  2EE8               	decfsz	wreg,f,c
  6632  00E512  D7FE               	bra	u9857
  6633  00E514  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6634  00E516  D7FC               	bra	u9857
  6635  00E518  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6636  00E51A  D7FA               	bra	u9857
  6637  00E51C  D000               	nop2	
  6638  00E51E  A281               	btfss	3969,1,c	;volatile
  6639  00E520  D7FE               	goto	l539
  6640                           
  6641                           ;standbyMode.c: 1094: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  6642  00E522  3881               	swapf	3969,w,c	;volatile
  6643  00E524  0B0F               	andlw	15
  6644  00E526  0B0F               	andlw	15
  6645  00E528  6E41               	movwf	displayLogs@keypress3,c
  6646  00E52A  B281               	btfsc	3969,1,c	;volatile
  6647  00E52C  D7FE               	goto	l542
  6648                           
  6649                           ;standbyMode.c: 1096: return keypress3;
  6650  00E52E  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  6651  00E532  6A2A               	clrf	?_displayLogs+1,c
  6652  00E534  0012               	return		;funcret
  6653  00E536                     __end_of_displayLogs:
  6654                           	opt stack 0
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           postinc0	equ	0xFEE
  6662                           wreg	equ	0xFE8
  6663                           postdec1	equ	0xFE5
  6664                           plusw1	equ	0xFE3
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           plusw2	equ	0xFDB
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _shiftEEPROM *****************
  6675 ;; Defined at:
  6676 ;;		line 68 in file "EEPROMstorage.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  i               2    5[COMRAM] unsigned int 
  6681 ;;  temp            2    3[COMRAM] unsigned int 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;Total ram usage:        5 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    1
  6698 ;; This function calls:
  6699 ;;		_readEEPROM
  6700 ;;		_writeEEPROM
  6701 ;; This function is called by:
  6702 ;;		_standbyMode
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text7
  6707  00C542                     __ptext7:
  6708                           	opt stack 0
  6709  00C542                     _shiftEEPROM:
  6710                           	opt stack 28
  6711                           
  6712                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  6713                           
  6714                           ;incstack = 0
  6715  00C542  0E00               	movlw	0
  6716  00C544  6E07               	movwf	shiftEEPROM@i+1,c
  6717  00C546  0E00               	movlw	0
  6718  00C548  6E06               	movwf	shiftEEPROM@i,c
  6719                           
  6720                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  6721  00C54A  0E00               	movlw	0
  6722  00C54C  6E05               	movwf	shiftEEPROM@temp+1,c
  6723  00C54E  0E00               	movlw	0
  6724  00C550  6E04               	movwf	shiftEEPROM@temp,c
  6725                           
  6726                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  6727  00C552  0E00               	movlw	0
  6728  00C554  6E07               	movwf	shiftEEPROM@i+1,c
  6729  00C556  0E46               	movlw	70
  6730  00C558  6E06               	movwf	shiftEEPROM@i,c
  6731  00C55A                     l6940:
  6732  00C55A  5007               	movf	shiftEEPROM@i+1,w,c
  6733  00C55C  E114               	bnz	l6950
  6734  00C55E  0E69               	movlw	105
  6735  00C560  5C06               	subwf	shiftEEPROM@i,w,c
  6736  00C562  B0D8               	btfsc	status,0,c
  6737  00C564  D010               	goto	u8340
  6738                           
  6739                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  6740  00C566  5006               	movf	shiftEEPROM@i,w,c
  6741  00C568  EC53  F060         	call	_readEEPROM
  6742  00C56C  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6743  00C56E  5003               	movf	??_shiftEEPROM,w,c
  6744  00C570  6E04               	movwf	shiftEEPROM@temp,c
  6745  00C572  6A05               	clrf	shiftEEPROM@temp+1,c
  6746                           
  6747                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  6748  00C574  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6749  00C578  5006               	movf	shiftEEPROM@i,w,c
  6750  00C57A  0F23               	addlw	35
  6751  00C57C  ECAF  F060         	call	_writeEEPROM
  6752  00C580  4A06               	infsnz	shiftEEPROM@i,f,c
  6753  00C582  2A07               	incf	shiftEEPROM@i+1,f,c
  6754  00C584  D7EA               	goto	l6940
  6755  00C586                     u8340:
  6756  00C586                     l6950:
  6757                           
  6758                           ;EEPROMstorage.c: 74: }
  6759                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  6760  00C586  0E00               	movlw	0
  6761  00C588  6E07               	movwf	shiftEEPROM@i+1,c
  6762  00C58A  0E23               	movlw	35
  6763  00C58C  6E06               	movwf	shiftEEPROM@i,c
  6764  00C58E                     l6952:
  6765  00C58E  5007               	movf	shiftEEPROM@i+1,w,c
  6766  00C590  E114               	bnz	l6962
  6767  00C592  0E46               	movlw	70
  6768  00C594  5C06               	subwf	shiftEEPROM@i,w,c
  6769  00C596  B0D8               	btfsc	status,0,c
  6770  00C598  D010               	goto	u8360
  6771                           
  6772                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  6773  00C59A  5006               	movf	shiftEEPROM@i,w,c
  6774  00C59C  EC53  F060         	call	_readEEPROM
  6775  00C5A0  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6776  00C5A2  5003               	movf	??_shiftEEPROM,w,c
  6777  00C5A4  6E04               	movwf	shiftEEPROM@temp,c
  6778  00C5A6  6A05               	clrf	shiftEEPROM@temp+1,c
  6779                           
  6780                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  6781  00C5A8  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6782  00C5AC  5006               	movf	shiftEEPROM@i,w,c
  6783  00C5AE  0F23               	addlw	35
  6784  00C5B0  ECAF  F060         	call	_writeEEPROM
  6785  00C5B4  4A06               	infsnz	shiftEEPROM@i,f,c
  6786  00C5B6  2A07               	incf	shiftEEPROM@i+1,f,c
  6787  00C5B8  D7EA               	goto	l6952
  6788  00C5BA                     u8360:
  6789  00C5BA                     l6962:
  6790                           
  6791                           ;EEPROMstorage.c: 79: }
  6792                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  6793  00C5BA  0E00               	movlw	0
  6794  00C5BC  6E07               	movwf	shiftEEPROM@i+1,c
  6795  00C5BE  0E00               	movlw	0
  6796  00C5C0  6E06               	movwf	shiftEEPROM@i,c
  6797  00C5C2                     l6964:
  6798  00C5C2  5007               	movf	shiftEEPROM@i+1,w,c
  6799  00C5C4  E114               	bnz	l871
  6800  00C5C6  0E23               	movlw	35
  6801  00C5C8  5C06               	subwf	shiftEEPROM@i,w,c
  6802  00C5CA  B0D8               	btfsc	status,0,c
  6803  00C5CC  0012               	return	
  6804                           
  6805                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  6806  00C5CE  5006               	movf	shiftEEPROM@i,w,c
  6807  00C5D0  EC53  F060         	call	_readEEPROM
  6808  00C5D4  6E03               	movwf	??_shiftEEPROM& (0+255),c
  6809  00C5D6  5003               	movf	??_shiftEEPROM,w,c
  6810  00C5D8  6E04               	movwf	shiftEEPROM@temp,c
  6811  00C5DA  6A05               	clrf	shiftEEPROM@temp+1,c
  6812                           
  6813                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  6814  00C5DC  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  6815  00C5E0  5006               	movf	shiftEEPROM@i,w,c
  6816  00C5E2  0F23               	addlw	35
  6817  00C5E4  ECAF  F060         	call	_writeEEPROM
  6818  00C5E8  4A06               	infsnz	shiftEEPROM@i,f,c
  6819  00C5EA  2A07               	incf	shiftEEPROM@i+1,f,c
  6820  00C5EC  D7EA               	goto	l6964
  6821  00C5EE                     l871:
  6822  00C5EE  0012               	return		;funcret
  6823  00C5F0                     __end_of_shiftEEPROM:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           postinc0	equ	0xFEE
  6832                           wreg	equ	0xFE8
  6833                           postdec1	equ	0xFE5
  6834                           plusw1	equ	0xFE3
  6835                           fsr1l	equ	0xFE1
  6836                           indf2	equ	0xFDF
  6837                           postinc2	equ	0xFDE
  6838                           postdec2	equ	0xFDD
  6839                           plusw2	equ	0xFDB
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function _readEEPROM *****************
  6845 ;; Defined at:
  6846 ;;		line 29 in file "EEPROMstorage.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  address         1    wreg     unsigned char 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;  address         1    0[COMRAM] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      unsigned char 
  6853 ;; Registers used:
  6854 ;;		wreg, status,2
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:        1 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_main
  6870 ;;		_viewLogs
  6871 ;;		_displayLogs
  6872 ;;		_standbyMode
  6873 ;;		_shiftEEPROM
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text8
  6878  00C0A6                     __ptext8:
  6879                           	opt stack 0
  6880  00C0A6                     _readEEPROM:
  6881                           	opt stack 28
  6882                           
  6883                           ;incstack = 0
  6884                           ;readEEPROM@address stored from wreg
  6885  00C0A6  6E01               	movwf	readEEPROM@address,c
  6886  00C0A8                     
  6887                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
  6888  00C0A8  B2A6               	btfsc	4006,1,c	;volsfr
  6889  00C0AA  D7FE               	goto	l5154
  6890                           
  6891                           ;EEPROMstorage.c: 32: EEADR = address;
  6892  00C0AC  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
  6893                           
  6894                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
  6895  00C0B0  9EA6               	bcf	4006,7,c	;volsfr
  6896                           
  6897                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
  6898  00C0B2  9CA6               	bcf	4006,6,c	;volsfr
  6899                           
  6900                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
  6901  00C0B4  80A6               	bsf	4006,0,c	;volsfr
  6902                           
  6903                           ;EEPROMstorage.c: 36: return( EEDATA );
  6904  00C0B6  50A8               	movf	4008,w,c	;volatile
  6905  00C0B8  0012               	return	
  6906  00C0BA                     __end_of_readEEPROM:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           postinc0	equ	0xFEE
  6915                           wreg	equ	0xFE8
  6916                           postdec1	equ	0xFE5
  6917                           plusw1	equ	0xFE3
  6918                           fsr1l	equ	0xFE1
  6919                           indf2	equ	0xFDF
  6920                           postinc2	equ	0xFDE
  6921                           postdec2	equ	0xFDD
  6922                           plusw2	equ	0xFDB
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927 ;; *************** function _printFoodInput *****************
  6928 ;; Defined at:
  6929 ;;		line 910 in file "standbyMode.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  food            2    0[COMRAM] unsigned int 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;		None
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  2    0[COMRAM] unsigned int 
  6936 ;; Registers used:
  6937 ;;		wreg, status,2, status,0
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6943 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;Total ram usage:        2 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_standbyMode
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text9
  6957  00D160                     __ptext9:
  6958                           	opt stack 0
  6959  00D160                     _printFoodInput:
  6960                           	opt stack 29
  6961                           
  6962                           ;standbyMode.c: 913: if (food == 1 || food == 3 || food == 5){
  6963                           
  6964                           ;incstack = 0
  6965  00D160  0401               	decf	printFoodInput@food,w,c
  6966  00D162  1002               	iorwf	printFoodInput@food+1,w,c
  6967  00D164  B4D8               	btfsc	status,2,c
  6968  00D166  D00A               	goto	u6620
  6969  00D168  0E03               	movlw	3
  6970  00D16A  1801               	xorwf	printFoodInput@food,w,c
  6971  00D16C  1002               	iorwf	printFoodInput@food+1,w,c
  6972  00D16E  B4D8               	btfsc	status,2,c
  6973  00D170  D005               	goto	u6620
  6974  00D172  0E05               	movlw	5
  6975  00D174  1801               	xorwf	printFoodInput@food,w,c
  6976  00D176  1002               	iorwf	printFoodInput@food+1,w,c
  6977  00D178  A4D8               	btfss	status,2,c
  6978  00D17A  D005               	goto	l458
  6979  00D17C                     u6620:
  6980                           
  6981                           ;standbyMode.c: 914: return 0;
  6982  00D17C  0E00               	movlw	0
  6983  00D17E  6E02               	movwf	?_printFoodInput+1,c
  6984  00D180  0E00               	movlw	0
  6985  00D182  6E01               	movwf	?_printFoodInput,c
  6986                           
  6987                           ;standbyMode.c: 915: }
  6988  00D184  0012               	return	
  6989  00D186                     l458:
  6990                           
  6991                           ;standbyMode.c: 918: else if (food == 2 || food == 4 || food == 6){
  6992  00D186  0E02               	movlw	2
  6993  00D188  1801               	xorwf	printFoodInput@food,w,c
  6994  00D18A  1002               	iorwf	printFoodInput@food+1,w,c
  6995  00D18C  B4D8               	btfsc	status,2,c
  6996  00D18E  D00A               	goto	u6650
  6997  00D190  0E04               	movlw	4
  6998  00D192  1801               	xorwf	printFoodInput@food,w,c
  6999  00D194  1002               	iorwf	printFoodInput@food+1,w,c
  7000  00D196  B4D8               	btfsc	status,2,c
  7001  00D198  D005               	goto	u6650
  7002  00D19A  0E06               	movlw	6
  7003  00D19C  1801               	xorwf	printFoodInput@food,w,c
  7004  00D19E  1002               	iorwf	printFoodInput@food+1,w,c
  7005  00D1A0  A4D8               	btfss	status,2,c
  7006  00D1A2  D005               	goto	l463
  7007  00D1A4                     u6650:
  7008                           
  7009                           ;standbyMode.c: 919: return 1;
  7010  00D1A4  0E00               	movlw	0
  7011  00D1A6  6E02               	movwf	?_printFoodInput+1,c
  7012  00D1A8  0E01               	movlw	1
  7013  00D1AA  6E01               	movwf	?_printFoodInput,c
  7014                           
  7015                           ;standbyMode.c: 920: }
  7016  00D1AC  0012               	return	
  7017  00D1AE                     l463:
  7018                           
  7019                           ;standbyMode.c: 923: else if (food == 7){
  7020  00D1AE  0E07               	movlw	7
  7021  00D1B0  1801               	xorwf	printFoodInput@food,w,c
  7022  00D1B2  1002               	iorwf	printFoodInput@food+1,w,c
  7023  00D1B4  A4D8               	btfss	status,2,c
  7024  00D1B6  D005               	goto	l467
  7025                           
  7026                           ;standbyMode.c: 924: return 2;
  7027  00D1B8  0E00               	movlw	0
  7028  00D1BA  6E02               	movwf	?_printFoodInput+1,c
  7029  00D1BC  0E02               	movlw	2
  7030  00D1BE  6E01               	movwf	?_printFoodInput,c
  7031                           
  7032                           ;standbyMode.c: 925: }
  7033  00D1C0  0012               	return	
  7034  00D1C2                     l467:
  7035                           
  7036                           ;standbyMode.c: 928: else if (food == 8 || food == 12 || food == 17){
  7037  00D1C2  0E08               	movlw	8
  7038  00D1C4  1801               	xorwf	printFoodInput@food,w,c
  7039  00D1C6  1002               	iorwf	printFoodInput@food+1,w,c
  7040  00D1C8  B4D8               	btfsc	status,2,c
  7041  00D1CA  D00A               	goto	u6690
  7042  00D1CC  0E0C               	movlw	12
  7043  00D1CE  1801               	xorwf	printFoodInput@food,w,c
  7044  00D1D0  1002               	iorwf	printFoodInput@food+1,w,c
  7045  00D1D2  B4D8               	btfsc	status,2,c
  7046  00D1D4  D005               	goto	u6690
  7047  00D1D6  0E11               	movlw	17
  7048  00D1D8  1801               	xorwf	printFoodInput@food,w,c
  7049  00D1DA  1002               	iorwf	printFoodInput@food+1,w,c
  7050  00D1DC  A4D8               	btfss	status,2,c
  7051  00D1DE  D005               	goto	l469
  7052  00D1E0                     u6690:
  7053                           
  7054                           ;standbyMode.c: 929: return 3;
  7055  00D1E0  0E00               	movlw	0
  7056  00D1E2  6E02               	movwf	?_printFoodInput+1,c
  7057  00D1E4  0E03               	movlw	3
  7058  00D1E6  6E01               	movwf	?_printFoodInput,c
  7059                           
  7060                           ;standbyMode.c: 930: }
  7061  00D1E8  0012               	return	
  7062  00D1EA                     l469:
  7063                           
  7064                           ;standbyMode.c: 933: else if (food == 9 || food == 13 || food == 18){
  7065  00D1EA  0E09               	movlw	9
  7066  00D1EC  1801               	xorwf	printFoodInput@food,w,c
  7067  00D1EE  1002               	iorwf	printFoodInput@food+1,w,c
  7068  00D1F0  B4D8               	btfsc	status,2,c
  7069  00D1F2  D00A               	goto	u6720
  7070  00D1F4  0E0D               	movlw	13
  7071  00D1F6  1801               	xorwf	printFoodInput@food,w,c
  7072  00D1F8  1002               	iorwf	printFoodInput@food+1,w,c
  7073  00D1FA  B4D8               	btfsc	status,2,c
  7074  00D1FC  D005               	goto	u6720
  7075  00D1FE  0E12               	movlw	18
  7076  00D200  1801               	xorwf	printFoodInput@food,w,c
  7077  00D202  1002               	iorwf	printFoodInput@food+1,w,c
  7078  00D204  A4D8               	btfss	status,2,c
  7079  00D206  D005               	goto	l473
  7080  00D208                     u6720:
  7081                           
  7082                           ;standbyMode.c: 934: return 4;
  7083  00D208  0E00               	movlw	0
  7084  00D20A  6E02               	movwf	?_printFoodInput+1,c
  7085  00D20C  0E04               	movlw	4
  7086  00D20E  6E01               	movwf	?_printFoodInput,c
  7087                           
  7088                           ;standbyMode.c: 935: }
  7089  00D210  0012               	return	
  7090  00D212                     l473:
  7091                           
  7092                           ;standbyMode.c: 938: else if (food == 14 || food == 19){
  7093  00D212  0E0E               	movlw	14
  7094  00D214  1801               	xorwf	printFoodInput@food,w,c
  7095  00D216  1002               	iorwf	printFoodInput@food+1,w,c
  7096  00D218  B4D8               	btfsc	status,2,c
  7097  00D21A  D005               	goto	u6740
  7098  00D21C  0E13               	movlw	19
  7099  00D21E  1801               	xorwf	printFoodInput@food,w,c
  7100  00D220  1002               	iorwf	printFoodInput@food+1,w,c
  7101  00D222  A4D8               	btfss	status,2,c
  7102  00D224  D005               	goto	l477
  7103  00D226                     u6740:
  7104                           
  7105                           ;standbyMode.c: 939: return 5;
  7106  00D226  0E00               	movlw	0
  7107  00D228  6E02               	movwf	?_printFoodInput+1,c
  7108  00D22A  0E05               	movlw	5
  7109  00D22C  6E01               	movwf	?_printFoodInput,c
  7110                           
  7111                           ;standbyMode.c: 940: }
  7112  00D22E  0012               	return	
  7113  00D230                     l477:
  7114                           
  7115                           ;standbyMode.c: 943: else if (food == 10 || food == 15 || food == 20){
  7116  00D230  0E0A               	movlw	10
  7117  00D232  1801               	xorwf	printFoodInput@food,w,c
  7118  00D234  1002               	iorwf	printFoodInput@food+1,w,c
  7119  00D236  B4D8               	btfsc	status,2,c
  7120  00D238  D00A               	goto	u6770
  7121  00D23A  0E0F               	movlw	15
  7122  00D23C  1801               	xorwf	printFoodInput@food,w,c
  7123  00D23E  1002               	iorwf	printFoodInput@food+1,w,c
  7124  00D240  B4D8               	btfsc	status,2,c
  7125  00D242  D005               	goto	u6770
  7126  00D244  0E14               	movlw	20
  7127  00D246  1801               	xorwf	printFoodInput@food,w,c
  7128  00D248  1002               	iorwf	printFoodInput@food+1,w,c
  7129  00D24A  A4D8               	btfss	status,2,c
  7130  00D24C  D005               	goto	l481
  7131  00D24E                     u6770:
  7132                           
  7133                           ;standbyMode.c: 944: return 6;
  7134  00D24E  0E00               	movlw	0
  7135  00D250  6E02               	movwf	?_printFoodInput+1,c
  7136  00D252  0E06               	movlw	6
  7137  00D254  6E01               	movwf	?_printFoodInput,c
  7138                           
  7139                           ;standbyMode.c: 945: }
  7140  00D256  0012               	return	
  7141  00D258                     l481:
  7142                           
  7143                           ;standbyMode.c: 948: else if (food == 11 || food == 16 || food == 21){
  7144  00D258  0E0B               	movlw	11
  7145  00D25A  1801               	xorwf	printFoodInput@food,w,c
  7146  00D25C  1002               	iorwf	printFoodInput@food+1,w,c
  7147  00D25E  B4D8               	btfsc	status,2,c
  7148  00D260  D00A               	goto	u6800
  7149  00D262  0E10               	movlw	16
  7150  00D264  1801               	xorwf	printFoodInput@food,w,c
  7151  00D266  1002               	iorwf	printFoodInput@food+1,w,c
  7152  00D268  B4D8               	btfsc	status,2,c
  7153  00D26A  D005               	goto	u6800
  7154  00D26C  0E15               	movlw	21
  7155  00D26E  1801               	xorwf	printFoodInput@food,w,c
  7156  00D270  1002               	iorwf	printFoodInput@food+1,w,c
  7157  00D272  A4D8               	btfss	status,2,c
  7158  00D274  D005               	goto	l485
  7159  00D276                     u6800:
  7160                           
  7161                           ;standbyMode.c: 949: return 7;
  7162  00D276  0E00               	movlw	0
  7163  00D278  6E02               	movwf	?_printFoodInput+1,c
  7164  00D27A  0E07               	movlw	7
  7165  00D27C  6E01               	movwf	?_printFoodInput,c
  7166                           
  7167                           ;standbyMode.c: 950: }
  7168  00D27E  0012               	return	
  7169  00D280                     l485:
  7170                           
  7171                           ;standbyMode.c: 953: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  7172  00D280  0E16               	movlw	22
  7173  00D282  1801               	xorwf	printFoodInput@food,w,c
  7174  00D284  1002               	iorwf	printFoodInput@food+1,w,c
  7175  00D286  B4D8               	btfsc	status,2,c
  7176  00D288  D01E               	goto	u6870
  7177  00D28A  0E18               	movlw	24
  7178  00D28C  1801               	xorwf	printFoodInput@food,w,c
  7179  00D28E  1002               	iorwf	printFoodInput@food+1,w,c
  7180  00D290  B4D8               	btfsc	status,2,c
  7181  00D292  D019               	goto	u6870
  7182  00D294  0E1A               	movlw	26
  7183  00D296  1801               	xorwf	printFoodInput@food,w,c
  7184  00D298  1002               	iorwf	printFoodInput@food+1,w,c
  7185  00D29A  B4D8               	btfsc	status,2,c
  7186  00D29C  D014               	goto	u6870
  7187  00D29E  0E1C               	movlw	28
  7188  00D2A0  1801               	xorwf	printFoodInput@food,w,c
  7189  00D2A2  1002               	iorwf	printFoodInput@food+1,w,c
  7190  00D2A4  B4D8               	btfsc	status,2,c
  7191  00D2A6  D00F               	goto	u6870
  7192  00D2A8  0E20               	movlw	32
  7193  00D2AA  1801               	xorwf	printFoodInput@food,w,c
  7194  00D2AC  1002               	iorwf	printFoodInput@food+1,w,c
  7195  00D2AE  B4D8               	btfsc	status,2,c
  7196  00D2B0  D00A               	goto	u6870
  7197  00D2B2  0E24               	movlw	36
  7198  00D2B4  1801               	xorwf	printFoodInput@food,w,c
  7199  00D2B6  1002               	iorwf	printFoodInput@food+1,w,c
  7200  00D2B8  B4D8               	btfsc	status,2,c
  7201  00D2BA  D005               	goto	u6870
  7202  00D2BC  0E26               	movlw	38
  7203  00D2BE  1801               	xorwf	printFoodInput@food,w,c
  7204  00D2C0  1002               	iorwf	printFoodInput@food+1,w,c
  7205  00D2C2  A4D8               	btfss	status,2,c
  7206  00D2C4  D005               	goto	l489
  7207  00D2C6                     u6870:
  7208                           
  7209                           ;standbyMode.c: 954: return 8;
  7210  00D2C6  0E00               	movlw	0
  7211  00D2C8  6E02               	movwf	?_printFoodInput+1,c
  7212  00D2CA  0E08               	movlw	8
  7213  00D2CC  6E01               	movwf	?_printFoodInput,c
  7214                           
  7215                           ;standbyMode.c: 955: }
  7216  00D2CE  0012               	return	
  7217  00D2D0                     l489:
  7218                           
  7219                           ;standbyMode.c: 958: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  7220  00D2D0  0E17               	movlw	23
  7221  00D2D2  1801               	xorwf	printFoodInput@food,w,c
  7222  00D2D4  1002               	iorwf	printFoodInput@food+1,w,c
  7223  00D2D6  B4D8               	btfsc	status,2,c
  7224  00D2D8  D019               	goto	u6930
  7225  00D2DA  0E19               	movlw	25
  7226  00D2DC  1801               	xorwf	printFoodInput@food,w,c
  7227  00D2DE  1002               	iorwf	printFoodInput@food+1,w,c
  7228  00D2E0  B4D8               	btfsc	status,2,c
  7229  00D2E2  D014               	goto	u6930
  7230  00D2E4  0E1D               	movlw	29
  7231  00D2E6  1801               	xorwf	printFoodInput@food,w,c
  7232  00D2E8  1002               	iorwf	printFoodInput@food+1,w,c
  7233  00D2EA  B4D8               	btfsc	status,2,c
  7234  00D2EC  D00F               	goto	u6930
  7235  00D2EE  0E21               	movlw	33
  7236  00D2F0  1801               	xorwf	printFoodInput@food,w,c
  7237  00D2F2  1002               	iorwf	printFoodInput@food+1,w,c
  7238  00D2F4  B4D8               	btfsc	status,2,c
  7239  00D2F6  D00A               	goto	u6930
  7240  00D2F8  0E25               	movlw	37
  7241  00D2FA  1801               	xorwf	printFoodInput@food,w,c
  7242  00D2FC  1002               	iorwf	printFoodInput@food+1,w,c
  7243  00D2FE  B4D8               	btfsc	status,2,c
  7244  00D300  D005               	goto	u6930
  7245  00D302  0E27               	movlw	39
  7246  00D304  1801               	xorwf	printFoodInput@food,w,c
  7247  00D306  1002               	iorwf	printFoodInput@food+1,w,c
  7248  00D308  A4D8               	btfss	status,2,c
  7249  00D30A  D005               	goto	l493
  7250  00D30C                     u6930:
  7251                           
  7252                           ;standbyMode.c: 959: return 9;
  7253  00D30C  0E00               	movlw	0
  7254  00D30E  6E02               	movwf	?_printFoodInput+1,c
  7255  00D310  0E09               	movlw	9
  7256  00D312  6E01               	movwf	?_printFoodInput,c
  7257                           
  7258                           ;standbyMode.c: 960: }
  7259  00D314  0012               	return	
  7260  00D316                     l493:
  7261                           
  7262                           ;standbyMode.c: 963: else if (food == 30 || food == 34 || food == 40){
  7263  00D316  0E1E               	movlw	30
  7264  00D318  1801               	xorwf	printFoodInput@food,w,c
  7265  00D31A  1002               	iorwf	printFoodInput@food+1,w,c
  7266  00D31C  B4D8               	btfsc	status,2,c
  7267  00D31E  D00A               	goto	u6960
  7268  00D320  0E22               	movlw	34
  7269  00D322  1801               	xorwf	printFoodInput@food,w,c
  7270  00D324  1002               	iorwf	printFoodInput@food+1,w,c
  7271  00D326  B4D8               	btfsc	status,2,c
  7272  00D328  D005               	goto	u6960
  7273  00D32A  0E28               	movlw	40
  7274  00D32C  1801               	xorwf	printFoodInput@food,w,c
  7275  00D32E  1002               	iorwf	printFoodInput@food+1,w,c
  7276  00D330  A4D8               	btfss	status,2,c
  7277  00D332  D005               	goto	l497
  7278  00D334                     u6960:
  7279                           
  7280                           ;standbyMode.c: 964: return 10;
  7281  00D334  0E00               	movlw	0
  7282  00D336  6E02               	movwf	?_printFoodInput+1,c
  7283  00D338  0E0A               	movlw	10
  7284  00D33A  6E01               	movwf	?_printFoodInput,c
  7285                           
  7286                           ;standbyMode.c: 965: }
  7287  00D33C  0012               	return	
  7288  00D33E                     l497:
  7289                           
  7290                           ;standbyMode.c: 968: else if (food == 27 || food == 31 || food == 35 || food == 41){
  7291  00D33E  0E1B               	movlw	27
  7292  00D340  1801               	xorwf	printFoodInput@food,w,c
  7293  00D342  1002               	iorwf	printFoodInput@food+1,w,c
  7294  00D344  B4D8               	btfsc	status,2,c
  7295  00D346  D00F               	goto	u7000
  7296  00D348  0E1F               	movlw	31
  7297  00D34A  1801               	xorwf	printFoodInput@food,w,c
  7298  00D34C  1002               	iorwf	printFoodInput@food+1,w,c
  7299  00D34E  B4D8               	btfsc	status,2,c
  7300  00D350  D00A               	goto	u7000
  7301  00D352  0E23               	movlw	35
  7302  00D354  1801               	xorwf	printFoodInput@food,w,c
  7303  00D356  1002               	iorwf	printFoodInput@food+1,w,c
  7304  00D358  B4D8               	btfsc	status,2,c
  7305  00D35A  D005               	goto	u7000
  7306  00D35C  0E29               	movlw	41
  7307  00D35E  1801               	xorwf	printFoodInput@food,w,c
  7308  00D360  1002               	iorwf	printFoodInput@food+1,w,c
  7309  00D362  A4D8               	btfss	status,2,c
  7310  00D364  D005               	goto	l501
  7311  00D366                     u7000:
  7312                           
  7313                           ;standbyMode.c: 969: return 11;
  7314  00D366  0E00               	movlw	0
  7315  00D368  6E02               	movwf	?_printFoodInput+1,c
  7316  00D36A  0E0B               	movlw	11
  7317  00D36C  6E01               	movwf	?_printFoodInput,c
  7318                           
  7319                           ;standbyMode.c: 970: }
  7320  00D36E  0012               	return	
  7321  00D370                     l501:
  7322                           
  7323                           ;standbyMode.c: 974: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  7324  00D370  0E2A               	movlw	42
  7325  00D372  1801               	xorwf	printFoodInput@food,w,c
  7326  00D374  1002               	iorwf	printFoodInput@food+1,w,c
  7327  00D376  B4D8               	btfsc	status,2,c
  7328  00D378  D014               	goto	u7050
  7329  00D37A  0E2B               	movlw	43
  7330  00D37C  1801               	xorwf	printFoodInput@food,w,c
  7331  00D37E  1002               	iorwf	printFoodInput@food+1,w,c
  7332  00D380  B4D8               	btfsc	status,2,c
  7333  00D382  D00F               	goto	u7050
  7334  00D384  0E2C               	movlw	44
  7335  00D386  1801               	xorwf	printFoodInput@food,w,c
  7336  00D388  1002               	iorwf	printFoodInput@food+1,w,c
  7337  00D38A  B4D8               	btfsc	status,2,c
  7338  00D38C  D00A               	goto	u7050
  7339  00D38E  0E2D               	movlw	45
  7340  00D390  1801               	xorwf	printFoodInput@food,w,c
  7341  00D392  1002               	iorwf	printFoodInput@food+1,w,c
  7342  00D394  B4D8               	btfsc	status,2,c
  7343  00D396  D005               	goto	u7050
  7344  00D398  0E2E               	movlw	46
  7345  00D39A  1801               	xorwf	printFoodInput@food,w,c
  7346  00D39C  1002               	iorwf	printFoodInput@food+1,w,c
  7347  00D39E  A4D8               	btfss	status,2,c
  7348  00D3A0  D005               	goto	l505
  7349  00D3A2                     u7050:
  7350                           
  7351                           ;standbyMode.c: 975: return 12;
  7352  00D3A2  0E00               	movlw	0
  7353  00D3A4  6E02               	movwf	?_printFoodInput+1,c
  7354  00D3A6  0E0C               	movlw	12
  7355  00D3A8  6E01               	movwf	?_printFoodInput,c
  7356                           
  7357                           ;standbyMode.c: 976: }
  7358  00D3AA  0012               	return	
  7359  00D3AC                     l505:
  7360                           
  7361                           ;standbyMode.c: 978: else{
  7362                           ;standbyMode.c: 979: return 0;
  7363  00D3AC  0E00               	movlw	0
  7364  00D3AE  6E02               	movwf	?_printFoodInput+1,c
  7365  00D3B0  0E00               	movlw	0
  7366  00D3B2  6E01               	movwf	?_printFoodInput,c
  7367  00D3B4  0012               	return	
  7368  00D3B6                     __end_of_printFoodInput:
  7369                           	opt stack 0
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           prodh	equ	0xFF4
  7375                           prodl	equ	0xFF3
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           postdec1	equ	0xFE5
  7379                           plusw1	equ	0xFE3
  7380                           fsr1l	equ	0xFE1
  7381                           indf2	equ	0xFDF
  7382                           postinc2	equ	0xFDE
  7383                           postdec2	equ	0xFDD
  7384                           plusw2	equ	0xFDB
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function _getRound *****************
  7390 ;; Defined at:
  7391 ;;		line 314 in file "standbyMode.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  code            2    0[COMRAM] unsigned int 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  returnValue     2    4[COMRAM] unsigned int 
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  2    0[COMRAM] unsigned int 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;Total ram usage:        6 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; This function calls:
  7412 ;;		Nothing
  7413 ;; This function is called by:
  7414 ;;		_standbyMode
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text10
  7419  00CA26                     __ptext10:
  7420                           	opt stack 0
  7421  00CA26                     _getRound:
  7422                           	opt stack 29
  7423                           
  7424                           ;standbyMode.c: 315: unsigned int returnValue = 0;
  7425                           
  7426                           ;incstack = 0
  7427  00CA26  0E00               	movlw	0
  7428  00CA28  6E06               	movwf	getRound@returnValue+1,c
  7429  00CA2A  0E00               	movlw	0
  7430  00CA2C  6E05               	movwf	getRound@returnValue,c
  7431                           
  7432                           ;standbyMode.c: 316: switch(code){
  7433  00CA2E  D00D               	goto	l313
  7434  00CA30                     
  7435                           ;standbyMode.c: 324: returnValue = 2;
  7436  00CA30  0E00               	movlw	0
  7437  00CA32  6E06               	movwf	getRound@returnValue+1,c
  7438  00CA34  0E02               	movlw	2
  7439  00CA36                     L21:
  7440  00CA36  6E05               	movwf	getRound@returnValue,c
  7441                           
  7442                           ;standbyMode.c: 330: break;
  7443  00CA38  D069               	goto	l315
  7444  00CA3A                     
  7445                           ;standbyMode.c: 459: returnValue = 1;
  7446                           
  7447                           ;standbyMode.c: 458: case 45:
  7448                           
  7449                           ;standbyMode.c: 455: break;
  7450                           
  7451                           ;standbyMode.c: 454: returnValue = 1;
  7452                           
  7453                           ;standbyMode.c: 453: case 44:
  7454                           
  7455                           ;standbyMode.c: 450: break;
  7456                           
  7457                           ;standbyMode.c: 449: returnValue = 1;
  7458  00CA3A  0E00               	movlw	0
  7459  00CA3C  6E06               	movwf	getRound@returnValue+1,c
  7460  00CA3E  0E01               	movlw	1
  7461  00CA40  D7FA               	goto	L21
  7462  00CA42                     
  7463                           ;standbyMode.c: 463: returnValue = 0;
  7464  00CA42  0E00               	movlw	0
  7465  00CA44  6E06               	movwf	getRound@returnValue+1,c
  7466  00CA46  0E00               	movlw	0
  7467  00CA48  D7F6               	goto	L21
  7468  00CA4A                     l313:
  7469  00CA4A  C001  F003         	movff	getRound@code,??_getRound
  7470  00CA4E  C002  F004         	movff	getRound@code+1,??_getRound+1
  7471                           
  7472                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7473                           ; Switch size 1, requested type "space"
  7474                           ; Number of cases is 1, Range of values is 0 to 0
  7475                           ; switch strategies available:
  7476                           ; Name         Instructions Cycles
  7477                           ; simple_byte            4     3 (average)
  7478                           ;	Chosen strategy is simple_byte
  7479  00CA52  5004               	movf	??_getRound+1,w,c
  7480  00CA54  0A00               	xorlw	0	; case 0
  7481  00CA56  A4D8               	btfss	status,2,c
  7482  00CA58  D7F4               	goto	l344
  7483                           
  7484                           ; Switch size 1, requested type "space"
  7485                           ; Number of cases is 29, Range of values is 1 to 45
  7486                           ; switch strategies available:
  7487                           ; Name         Instructions Cycles
  7488                           ; simple_byte           88    45 (average)
  7489                           ;	Chosen strategy is simple_byte
  7490  00CA5A  5003               	movf	??_getRound,w,c
  7491  00CA5C  0A01               	xorlw	1	; case 1
  7492  00CA5E  B4D8               	btfsc	status,2,c
  7493  00CA60  D7EC               	goto	l341
  7494  00CA62  0A03               	xorlw	3	; case 2
  7495  00CA64  B4D8               	btfsc	status,2,c
  7496  00CA66  D7E4               	goto	l316
  7497  00CA68  0A0A               	xorlw	10	; case 8
  7498  00CA6A  B4D8               	btfsc	status,2,c
  7499  00CA6C  D7E6               	goto	l341
  7500  00CA6E  0A01               	xorlw	1	; case 9
  7501  00CA70  B4D8               	btfsc	status,2,c
  7502  00CA72  D7E3               	goto	l341
  7503  00CA74  0A03               	xorlw	3	; case 10
  7504  00CA76  B4D8               	btfsc	status,2,c
  7505  00CA78  D7DB               	goto	l316
  7506  00CA7A  0A01               	xorlw	1	; case 11
  7507  00CA7C  B4D8               	btfsc	status,2,c
  7508  00CA7E  D7D8               	goto	l316
  7509  00CA80  0A07               	xorlw	7	; case 12
  7510  00CA82  B4D8               	btfsc	status,2,c
  7511  00CA84  D7DA               	goto	l341
  7512  00CA86  0A01               	xorlw	1	; case 13
  7513  00CA88  B4D8               	btfsc	status,2,c
  7514  00CA8A  D7D7               	goto	l341
  7515  00CA8C  0A03               	xorlw	3	; case 14
  7516  00CA8E  B4D8               	btfsc	status,2,c
  7517  00CA90  D7D4               	goto	l341
  7518  00CA92  0A01               	xorlw	1	; case 15
  7519  00CA94  B4D8               	btfsc	status,2,c
  7520  00CA96  D7CC               	goto	l316
  7521  00CA98  0A1F               	xorlw	31	; case 16
  7522  00CA9A  B4D8               	btfsc	status,2,c
  7523  00CA9C  D7C9               	goto	l316
  7524  00CA9E  0A06               	xorlw	6	; case 22
  7525  00CAA0  B4D8               	btfsc	status,2,c
  7526  00CAA2  D7C6               	goto	l316
  7527  00CAA4  0A01               	xorlw	1	; case 23
  7528  00CAA6  B4D8               	btfsc	status,2,c
  7529  00CAA8  D7C3               	goto	l316
  7530  00CAAA  0A0F               	xorlw	15	; case 24
  7531  00CAAC  B4D8               	btfsc	status,2,c
  7532  00CAAE  D7C0               	goto	l316
  7533  00CAB0  0A01               	xorlw	1	; case 25
  7534  00CAB2  B4D8               	btfsc	status,2,c
  7535  00CAB4  D7BD               	goto	l316
  7536  00CAB6  0A03               	xorlw	3	; case 26
  7537  00CAB8  B4D8               	btfsc	status,2,c
  7538  00CABA  D7BF               	goto	l341
  7539  00CABC  0A01               	xorlw	1	; case 27
  7540  00CABE  B4D8               	btfsc	status,2,c
  7541  00CAC0  D7B7               	goto	l316
  7542  00CAC2  0A07               	xorlw	7	; case 28
  7543  00CAC4  B4D8               	btfsc	status,2,c
  7544  00CAC6  D7B9               	goto	l341
  7545  00CAC8  0A01               	xorlw	1	; case 29
  7546  00CACA  B4D8               	btfsc	status,2,c
  7547  00CACC  D7B6               	goto	l341
  7548  00CACE  0A03               	xorlw	3	; case 30
  7549  00CAD0  B4D8               	btfsc	status,2,c
  7550  00CAD2  D7B3               	goto	l341
  7551  00CAD4  0A01               	xorlw	1	; case 31
  7552  00CAD6  B4D8               	btfsc	status,2,c
  7553  00CAD8  D7AB               	goto	l316
  7554  00CADA  0A3F               	xorlw	63	; case 32
  7555  00CADC  B4D8               	btfsc	status,2,c
  7556  00CADE  D7AD               	goto	l341
  7557  00CAE0  0A01               	xorlw	1	; case 33
  7558  00CAE2  B4D8               	btfsc	status,2,c
  7559  00CAE4  D7AA               	goto	l341
  7560  00CAE6  0A03               	xorlw	3	; case 34
  7561  00CAE8  B4D8               	btfsc	status,2,c
  7562  00CAEA  D7A7               	goto	l341
  7563  00CAEC  0A01               	xorlw	1	; case 35
  7564  00CAEE  B4D8               	btfsc	status,2,c
  7565  00CAF0  D79F               	goto	l316
  7566  00CAF2  0A09               	xorlw	9	; case 42
  7567  00CAF4  B4D8               	btfsc	status,2,c
  7568  00CAF6  D79C               	goto	l316
  7569  00CAF8  0A01               	xorlw	1	; case 43
  7570  00CAFA  B4D8               	btfsc	status,2,c
  7571  00CAFC  D79E               	goto	l341
  7572  00CAFE  0A07               	xorlw	7	; case 44
  7573  00CB00  B4D8               	btfsc	status,2,c
  7574  00CB02  D79B               	goto	l341
  7575  00CB04  0A01               	xorlw	1	; case 45
  7576  00CB06  B4D8               	btfsc	status,2,c
  7577  00CB08  D798               	goto	l341
  7578  00CB0A  D79B               	goto	l344
  7579  00CB0C                     l315:
  7580                           
  7581                           ;standbyMode.c: 466: return returnValue;
  7582  00CB0C  C005  F001         	movff	getRound@returnValue,?_getRound
  7583  00CB10  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  7584  00CB14  0012               	return		;funcret
  7585  00CB16                     __end_of_getRound:
  7586                           	opt stack 0
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           postinc0	equ	0xFEE
  7594                           wreg	equ	0xFE8
  7595                           postdec1	equ	0xFE5
  7596                           plusw1	equ	0xFE3
  7597                           fsr1l	equ	0xFE1
  7598                           indf2	equ	0xFDF
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           plusw2	equ	0xFDB
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8
  7605                           
  7606 ;; *************** function _getLong *****************
  7607 ;; Defined at:
  7608 ;;		line 627 in file "standbyMode.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  code            2    0[COMRAM] unsigned int 
  7611 ;; Auto vars:     Size  Location     Type
  7612 ;;  returnValue     2    4[COMRAM] unsigned int 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;                  2    0[COMRAM] unsigned int 
  7615 ;; Registers used:
  7616 ;;		wreg, status,2, status,0
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;Total ram usage:        6 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_standbyMode
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text11
  7636  00CB16                     __ptext11:
  7637                           	opt stack 0
  7638  00CB16                     _getLong:
  7639                           	opt stack 29
  7640                           
  7641                           ;standbyMode.c: 628: unsigned int returnValue = 0;
  7642                           
  7643                           ;incstack = 0
  7644  00CB16  0E00               	movlw	0
  7645  00CB18  6E06               	movwf	getLong@returnValue+1,c
  7646  00CB1A  0E00               	movlw	0
  7647  00CB1C  6E05               	movwf	getLong@returnValue,c
  7648                           
  7649                           ;standbyMode.c: 630: switch(code){
  7650  00CB1E  D011               	goto	l383
  7651  00CB20                     
  7652                           ;standbyMode.c: 648: returnValue = 1;
  7653  00CB20  0E00               	movlw	0
  7654  00CB22  6E06               	movwf	getLong@returnValue+1,c
  7655  00CB24  0E01               	movlw	1
  7656  00CB26  D007               	goto	L35
  7657  00CB28                     l392:
  7658                           
  7659                           ;standbyMode.c: 678: returnValue = 2;
  7660                           
  7661                           ;standbyMode.c: 677: case 18:
  7662                           
  7663                           ;standbyMode.c: 674: break;
  7664                           
  7665                           ;standbyMode.c: 673: returnValue = 1;
  7666                           
  7667                           ;standbyMode.c: 672: case 17:
  7668                           
  7669                           ;standbyMode.c: 669: break;
  7670                           
  7671                           ;standbyMode.c: 668: returnValue = 2;
  7672  00CB28  0E00               	movlw	0
  7673  00CB2A  6E06               	movwf	getLong@returnValue+1,c
  7674  00CB2C  0E02               	movlw	2
  7675  00CB2E  D003               	goto	L35
  7676  00CB30                     l395:
  7677                           
  7678                           ;standbyMode.c: 683: returnValue = 3;
  7679  00CB30  0E00               	movlw	0
  7680  00CB32  6E06               	movwf	getLong@returnValue+1,c
  7681  00CB34  0E03               	movlw	3
  7682  00CB36                     L35:
  7683  00CB36  6E05               	movwf	getLong@returnValue,c
  7684                           
  7685                           ;standbyMode.c: 704: break;
  7686  00CB38  D074               	goto	l385
  7687  00CB3A                     
  7688                           ;standbyMode.c: 802: returnValue = 0;
  7689  00CB3A  0E00               	movlw	0
  7690  00CB3C  6E06               	movwf	getLong@returnValue+1,c
  7691  00CB3E  0E00               	movlw	0
  7692  00CB40  D7FA               	goto	L35
  7693  00CB42                     l383:
  7694  00CB42  C001  F003         	movff	getLong@code,??_getLong
  7695  00CB46  C002  F004         	movff	getLong@code+1,??_getLong+1
  7696                           
  7697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7698                           ; Switch size 1, requested type "space"
  7699                           ; Number of cases is 1, Range of values is 0 to 0
  7700                           ; switch strategies available:
  7701                           ; Name         Instructions Cycles
  7702                           ; simple_byte            4     3 (average)
  7703                           ;	Chosen strategy is simple_byte
  7704  00CB4A  5004               	movf	??_getLong+1,w,c
  7705  00CB4C  0A00               	xorlw	0	; case 0
  7706  00CB4E  A4D8               	btfss	status,2,c
  7707  00CB50  D7F4               	goto	l419
  7708                           
  7709                           ; Switch size 1, requested type "space"
  7710                           ; Number of cases is 34, Range of values is 5 to 46
  7711                           ; switch strategies available:
  7712                           ; Name         Instructions Cycles
  7713                           ; simple_byte          103    52 (average)
  7714                           ;	Chosen strategy is simple_byte
  7715  00CB52  5003               	movf	??_getLong,w,c
  7716  00CB54  0A05               	xorlw	5	; case 5
  7717  00CB56  B4D8               	btfsc	status,2,c
  7718  00CB58  D7E3               	goto	l388
  7719  00CB5A  0A03               	xorlw	3	; case 6
  7720  00CB5C  B4D8               	btfsc	status,2,c
  7721  00CB5E  D7E4               	goto	l392
  7722  00CB60  0A01               	xorlw	1	; case 7
  7723  00CB62  B4D8               	btfsc	status,2,c
  7724  00CB64  D7E5               	goto	l395
  7725  00CB66  0A0B               	xorlw	11	; case 12
  7726  00CB68  B4D8               	btfsc	status,2,c
  7727  00CB6A  D7DA               	goto	l388
  7728  00CB6C  0A01               	xorlw	1	; case 13
  7729  00CB6E  B4D8               	btfsc	status,2,c
  7730  00CB70  D7DB               	goto	l392
  7731  00CB72  0A03               	xorlw	3	; case 14
  7732  00CB74  B4D8               	btfsc	status,2,c
  7733  00CB76  D7DC               	goto	l395
  7734  00CB78  0A01               	xorlw	1	; case 15
  7735  00CB7A  B4D8               	btfsc	status,2,c
  7736  00CB7C  D7D1               	goto	l388
  7737  00CB7E  0A1F               	xorlw	31	; case 16
  7738  00CB80  B4D8               	btfsc	status,2,c
  7739  00CB82  D7D2               	goto	l392
  7740  00CB84  0A01               	xorlw	1	; case 17
  7741  00CB86  B4D8               	btfsc	status,2,c
  7742  00CB88  D7CB               	goto	l388
  7743  00CB8A  0A03               	xorlw	3	; case 18
  7744  00CB8C  B4D8               	btfsc	status,2,c
  7745  00CB8E  D7CC               	goto	l392
  7746  00CB90  0A01               	xorlw	1	; case 19
  7747  00CB92  B4D8               	btfsc	status,2,c
  7748  00CB94  D7CD               	goto	l395
  7749  00CB96  0A07               	xorlw	7	; case 20
  7750  00CB98  B4D8               	btfsc	status,2,c
  7751  00CB9A  D7C2               	goto	l388
  7752  00CB9C  0A01               	xorlw	1	; case 21
  7753  00CB9E  B4D8               	btfsc	status,2,c
  7754  00CBA0  D7C3               	goto	l392
  7755  00CBA2  0A0D               	xorlw	13	; case 24
  7756  00CBA4  B4D8               	btfsc	status,2,c
  7757  00CBA6  D7BC               	goto	l388
  7758  00CBA8  0A01               	xorlw	1	; case 25
  7759  00CBAA  B4D8               	btfsc	status,2,c
  7760  00CBAC  D7BD               	goto	l392
  7761  00CBAE  0A05               	xorlw	5	; case 28
  7762  00CBB0  B4D8               	btfsc	status,2,c
  7763  00CBB2  D7BA               	goto	l392
  7764  00CBB4  0A01               	xorlw	1	; case 29
  7765  00CBB6  B4D8               	btfsc	status,2,c
  7766  00CBB8  D7BB               	goto	l395
  7767  00CBBA  0A03               	xorlw	3	; case 30
  7768  00CBBC  B4D8               	btfsc	status,2,c
  7769  00CBBE  D7B8               	goto	l395
  7770  00CBC0  0A01               	xorlw	1	; case 31
  7771  00CBC2  B4D8               	btfsc	status,2,c
  7772  00CBC4  D7B1               	goto	l392
  7773  00CBC6  0A3F               	xorlw	63	; case 32
  7774  00CBC8  B4D8               	btfsc	status,2,c
  7775  00CBCA  D7AA               	goto	l388
  7776  00CBCC  0A01               	xorlw	1	; case 33
  7777  00CBCE  B4D8               	btfsc	status,2,c
  7778  00CBD0  D7AB               	goto	l392
  7779  00CBD2  0A03               	xorlw	3	; case 34
  7780  00CBD4  B4D8               	btfsc	status,2,c
  7781  00CBD6  D7A4               	goto	l388
  7782  00CBD8  0A01               	xorlw	1	; case 35
  7783  00CBDA  B4D8               	btfsc	status,2,c
  7784  00CBDC  D7A1               	goto	l388
  7785  00CBDE  0A07               	xorlw	7	; case 36
  7786  00CBE0  B4D8               	btfsc	status,2,c
  7787  00CBE2  D79E               	goto	l388
  7788  00CBE4  0A01               	xorlw	1	; case 37
  7789  00CBE6  B4D8               	btfsc	status,2,c
  7790  00CBE8  D79F               	goto	l392
  7791  00CBEA  0A03               	xorlw	3	; case 38
  7792  00CBEC  B4D8               	btfsc	status,2,c
  7793  00CBEE  D79C               	goto	l392
  7794  00CBF0  0A01               	xorlw	1	; case 39
  7795  00CBF2  B4D8               	btfsc	status,2,c
  7796  00CBF4  D79D               	goto	l395
  7797  00CBF6  0A0F               	xorlw	15	; case 40
  7798  00CBF8  B4D8               	btfsc	status,2,c
  7799  00CBFA  D79A               	goto	l395
  7800  00CBFC  0A01               	xorlw	1	; case 41
  7801  00CBFE  B4D8               	btfsc	status,2,c
  7802  00CC00  D793               	goto	l392
  7803  00CC02  0A03               	xorlw	3	; case 42
  7804  00CC04  B4D8               	btfsc	status,2,c
  7805  00CC06  D78C               	goto	l388
  7806  00CC08  0A01               	xorlw	1	; case 43
  7807  00CC0A  B4D8               	btfsc	status,2,c
  7808  00CC0C  D789               	goto	l388
  7809  00CC0E  0A07               	xorlw	7	; case 44
  7810  00CC10  B4D8               	btfsc	status,2,c
  7811  00CC12  D78A               	goto	l392
  7812  00CC14  0A01               	xorlw	1	; case 45
  7813  00CC16  B4D8               	btfsc	status,2,c
  7814  00CC18  D78B               	goto	l395
  7815  00CC1A  0A03               	xorlw	3	; case 46
  7816  00CC1C  B4D8               	btfsc	status,2,c
  7817  00CC1E  D788               	goto	l395
  7818  00CC20  D78C               	goto	l419
  7819  00CC22                     l385:
  7820                           
  7821                           ;standbyMode.c: 805: return returnValue;
  7822  00CC22  C005  F001         	movff	getLong@returnValue,?_getLong
  7823  00CC26  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  7824  00CC2A  0012               	return		;funcret
  7825  00CC2C                     __end_of_getLong:
  7826                           	opt stack 0
  7827                           tblptru	equ	0xFF8
  7828                           tblptrh	equ	0xFF7
  7829                           tblptrl	equ	0xFF6
  7830                           tablat	equ	0xFF5
  7831                           prodh	equ	0xFF4
  7832                           prodl	equ	0xFF3
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           postdec1	equ	0xFE5
  7836                           plusw1	equ	0xFE3
  7837                           fsr1l	equ	0xFE1
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           plusw2	equ	0xFDB
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _getFlat *****************
  7847 ;; Defined at:
  7848 ;;		line 470 in file "standbyMode.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  code            2    0[COMRAM] unsigned int 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;  returnValue     2    4[COMRAM] unsigned int 
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  2    0[COMRAM] unsigned int 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;Total ram usage:        6 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; This function calls:
  7869 ;;		Nothing
  7870 ;; This function is called by:
  7871 ;;		_standbyMode
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text12
  7876  00C936                     __ptext12:
  7877                           	opt stack 0
  7878  00C936                     _getFlat:
  7879                           	opt stack 29
  7880                           
  7881                           ;standbyMode.c: 471: unsigned int returnValue = 0;
  7882                           
  7883                           ;incstack = 0
  7884  00C936  0E00               	movlw	0
  7885  00C938  6E06               	movwf	getFlat@returnValue+1,c
  7886  00C93A  0E00               	movlw	0
  7887  00C93C  6E05               	movwf	getFlat@returnValue,c
  7888                           
  7889                           ;standbyMode.c: 473: switch(code){
  7890  00C93E  D00D               	goto	l348
  7891  00C940                     
  7892                           ;standbyMode.c: 476: returnValue = 1;
  7893  00C940  0E00               	movlw	0
  7894  00C942  6E06               	movwf	getFlat@returnValue+1,c
  7895  00C944  0E01               	movlw	1
  7896  00C946  D003               	goto	L41
  7897  00C948                     
  7898                           ;standbyMode.c: 501: returnValue = 2;
  7899                           
  7900                           ;standbyMode.c: 500: case 11:
  7901                           
  7902                           ;standbyMode.c: 497: break;
  7903                           
  7904                           ;standbyMode.c: 496: returnValue = 1;
  7905                           
  7906                           ;standbyMode.c: 495: case 10:
  7907                           
  7908                           ;standbyMode.c: 492: break;
  7909                           
  7910                           ;standbyMode.c: 491: returnValue = 2;
  7911                           
  7912                           ;standbyMode.c: 490: case 9:
  7913                           
  7914                           ;standbyMode.c: 487: break;
  7915                           
  7916                           ;standbyMode.c: 486: returnValue = 1;
  7917                           
  7918                           ;standbyMode.c: 485: case 8:
  7919                           
  7920                           ;standbyMode.c: 482: break;
  7921                           
  7922                           ;standbyMode.c: 481: returnValue = 2;
  7923  00C948  0E00               	movlw	0
  7924  00C94A  6E06               	movwf	getFlat@returnValue+1,c
  7925  00C94C  0E02               	movlw	2
  7926  00C94E                     L41:
  7927  00C94E  6E05               	movwf	getFlat@returnValue,c
  7928                           
  7929                           ;standbyMode.c: 507: break;
  7930  00C950  D065               	goto	l350
  7931  00C952                     
  7932                           ;standbyMode.c: 620: returnValue = 0;
  7933  00C952  0E00               	movlw	0
  7934  00C954  6E06               	movwf	getFlat@returnValue+1,c
  7935  00C956  0E00               	movlw	0
  7936  00C958  D7FA               	goto	L41
  7937  00C95A                     l348:
  7938  00C95A  C001  F003         	movff	getFlat@code,??_getFlat
  7939  00C95E  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  7940                           
  7941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7942                           ; Switch size 1, requested type "space"
  7943                           ; Number of cases is 1, Range of values is 0 to 0
  7944                           ; switch strategies available:
  7945                           ; Name         Instructions Cycles
  7946                           ; simple_byte            4     3 (average)
  7947                           ;	Chosen strategy is simple_byte
  7948  00C962  5004               	movf	??_getFlat+1,w,c
  7949  00C964  0A00               	xorlw	0	; case 0
  7950  00C966  A4D8               	btfss	status,2,c
  7951  00C968  D7F4               	goto	l379
  7952                           
  7953                           ; Switch size 1, requested type "space"
  7954                           ; Number of cases is 29, Range of values is 3 to 46
  7955                           ; switch strategies available:
  7956                           ; Name         Instructions Cycles
  7957                           ; simple_byte           88    45 (average)
  7958                           ;	Chosen strategy is simple_byte
  7959  00C96A  5003               	movf	??_getFlat,w,c
  7960  00C96C  0A03               	xorlw	3	; case 3
  7961  00C96E  B4D8               	btfsc	status,2,c
  7962  00C970  D7E7               	goto	l349
  7963  00C972  0A07               	xorlw	7	; case 4
  7964  00C974  B4D8               	btfsc	status,2,c
  7965  00C976  D7E8               	goto	l351
  7966  00C978  0A0C               	xorlw	12	; case 8
  7967  00C97A  B4D8               	btfsc	status,2,c
  7968  00C97C  D7E1               	goto	l349
  7969  00C97E  0A01               	xorlw	1	; case 9
  7970  00C980  B4D8               	btfsc	status,2,c
  7971  00C982  D7E2               	goto	l351
  7972  00C984  0A03               	xorlw	3	; case 10
  7973  00C986  B4D8               	btfsc	status,2,c
  7974  00C988  D7DB               	goto	l349
  7975  00C98A  0A01               	xorlw	1	; case 11
  7976  00C98C  B4D8               	btfsc	status,2,c
  7977  00C98E  D7DC               	goto	l351
  7978  00C990  0A1A               	xorlw	26	; case 17
  7979  00C992  B4D8               	btfsc	status,2,c
  7980  00C994  D7D5               	goto	l349
  7981  00C996  0A03               	xorlw	3	; case 18
  7982  00C998  B4D8               	btfsc	status,2,c
  7983  00C99A  D7D2               	goto	l349
  7984  00C99C  0A01               	xorlw	1	; case 19
  7985  00C99E  B4D8               	btfsc	status,2,c
  7986  00C9A0  D7CF               	goto	l349
  7987  00C9A2  0A07               	xorlw	7	; case 20
  7988  00C9A4  B4D8               	btfsc	status,2,c
  7989  00C9A6  D7D0               	goto	l351
  7990  00C9A8  0A01               	xorlw	1	; case 21
  7991  00C9AA  B4D8               	btfsc	status,2,c
  7992  00C9AC  D7CD               	goto	l351
  7993  00C9AE  0A03               	xorlw	3	; case 22
  7994  00C9B0  B4D8               	btfsc	status,2,c
  7995  00C9B2  D7C6               	goto	l349
  7996  00C9B4  0A01               	xorlw	1	; case 23
  7997  00C9B6  B4D8               	btfsc	status,2,c
  7998  00C9B8  D7C7               	goto	l351
  7999  00C9BA  0A0D               	xorlw	13	; case 26
  8000  00C9BC  B4D8               	btfsc	status,2,c
  8001  00C9BE  D7C4               	goto	l351
  8002  00C9C0  0A01               	xorlw	1	; case 27
  8003  00C9C2  B4D8               	btfsc	status,2,c
  8004  00C9C4  D7C1               	goto	l351
  8005  00C9C6  0A3B               	xorlw	59	; case 32
  8006  00C9C8  B4D8               	btfsc	status,2,c
  8007  00C9CA  D7BA               	goto	l349
  8008  00C9CC  0A01               	xorlw	1	; case 33
  8009  00C9CE  B4D8               	btfsc	status,2,c
  8010  00C9D0  D7B7               	goto	l349
  8011  00C9D2  0A03               	xorlw	3	; case 34
  8012  00C9D4  B4D8               	btfsc	status,2,c
  8013  00C9D6  D7B8               	goto	l351
  8014  00C9D8  0A01               	xorlw	1	; case 35
  8015  00C9DA  B4D8               	btfsc	status,2,c
  8016  00C9DC  D7B1               	goto	l349
  8017  00C9DE  0A07               	xorlw	7	; case 36
  8018  00C9E0  B4D8               	btfsc	status,2,c
  8019  00C9E2  D7B2               	goto	l351
  8020  00C9E4  0A01               	xorlw	1	; case 37
  8021  00C9E6  B4D8               	btfsc	status,2,c
  8022  00C9E8  D7AF               	goto	l351
  8023  00C9EA  0A03               	xorlw	3	; case 38
  8024  00C9EC  B4D8               	btfsc	status,2,c
  8025  00C9EE  D7A8               	goto	l349
  8026  00C9F0  0A01               	xorlw	1	; case 39
  8027  00C9F2  B4D8               	btfsc	status,2,c
  8028  00C9F4  D7A5               	goto	l349
  8029  00C9F6  0A0F               	xorlw	15	; case 40
  8030  00C9F8  B4D8               	btfsc	status,2,c
  8031  00C9FA  D7A2               	goto	l349
  8032  00C9FC  0A01               	xorlw	1	; case 41
  8033  00C9FE  B4D8               	btfsc	status,2,c
  8034  00CA00  D7A3               	goto	l351
  8035  00CA02  0A03               	xorlw	3	; case 42
  8036  00CA04  B4D8               	btfsc	status,2,c
  8037  00CA06  D79C               	goto	l349
  8038  00CA08  0A01               	xorlw	1	; case 43
  8039  00CA0A  B4D8               	btfsc	status,2,c
  8040  00CA0C  D79D               	goto	l351
  8041  00CA0E  0A07               	xorlw	7	; case 44
  8042  00CA10  B4D8               	btfsc	status,2,c
  8043  00CA12  D796               	goto	l349
  8044  00CA14  0A02               	xorlw	2	; case 46
  8045  00CA16  B4D8               	btfsc	status,2,c
  8046  00CA18  D793               	goto	l349
  8047  00CA1A  D79B               	goto	l379
  8048  00CA1C                     l350:
  8049                           
  8050                           ;standbyMode.c: 623: return returnValue;
  8051  00CA1C  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8052  00CA20  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8053  00CA24  0012               	return		;funcret
  8054  00CA26                     __end_of_getFlat:
  8055                           	opt stack 0
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           postinc0	equ	0xFEE
  8063                           wreg	equ	0xFE8
  8064                           postdec1	equ	0xFE5
  8065                           plusw1	equ	0xFE3
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _food_press *****************
  8076 ;; Defined at:
  8077 ;;		line 1206 in file "standbyMode.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  dietSum         2   40[COMRAM] unsigned int 
  8080 ;;  drawer          2   42[COMRAM] unsigned int 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  keypress        1   54[COMRAM] unsigned char 
  8083 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8084 ;;  count           2   52[COMRAM] unsigned int 
  8085 ;;  isValid         2   50[COMRAM] unsigned int 
  8086 ;;  backCheck       2   48[COMRAM] unsigned int 
  8087 ;;  tally           2   46[COMRAM] unsigned int 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  2   40[COMRAM] unsigned int 
  8090 ;; Registers used:
  8091 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;Total ram usage:       23 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    3
  8104 ;; This function calls:
  8105 ;;		_check_food
  8106 ;;		_get_digits
  8107 ;;		_lcdInst
  8108 ;;		_printf
  8109 ;;		_putch
  8110 ;; This function is called by:
  8111 ;;		_standbyMode
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text13
  8116  00CD50                     __ptext13:
  8117                           	opt stack 0
  8118  00CD50                     _food_press:
  8119                           	opt stack 26
  8120                           
  8121                           ;incstack = 0
  8122                           ;standbyMode.c: 1208: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8123  00CD50  0E01               	movlw	1
  8124  00CD52  EC3F  F060         	call	_lcdInst
  8125  00CD56  0EC3               	movlw	195
  8126  00CD58  6E2D               	movwf	??_food_press& (0+255),c
  8127  00CD5A  0ECD               	movlw	205
  8128  00CD5C                     u9867:
  8129  00CD5C  2EE8               	decfsz	wreg,f,c
  8130  00CD5E  D7FE               	bra	u9867
  8131  00CD60  2E2D               	decfsz	??_food_press& (0+255),f,c
  8132  00CD62  D7FC               	bra	u9867
  8133  00CD64  F000               	nop	
  8134                           
  8135                           ;standbyMode.c: 1209: printf("Drawer %i food:", drawer);
  8136  00CD66  0EC1               	movlw	low STR_63
  8137  00CD68  6E0D               	movwf	printf@f,c
  8138  00CD6A  0EFD               	movlw	high STR_63
  8139  00CD6C  6E0E               	movwf	printf@f+1,c
  8140  00CD6E  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8141  00CD72  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8142  00CD76  EC51  F06B         	call	_printf	;wreg free
  8143                           
  8144                           ;standbyMode.c: 1210: lcdInst(0xC0);;
  8145  00CD7A  0EC0               	movlw	192
  8146  00CD7C  EC3F  F060         	call	_lcdInst
  8147                           
  8148                           ;standbyMode.c: 1212: unsigned int tally = 0;
  8149  00CD80  0E00               	movlw	0
  8150  00CD82  6E30               	movwf	food_press@tally+1,c
  8151  00CD84  0E00               	movlw	0
  8152  00CD86  6E2F               	movwf	food_press@tally,c
  8153                           
  8154                           ;standbyMode.c: 1213: unsigned int count = 0;
  8155  00CD88  0E00               	movlw	0
  8156  00CD8A  6E36               	movwf	food_press@count+1,c
  8157  00CD8C  0E00               	movlw	0
  8158  00CD8E  6E35               	movwf	food_press@count,c
  8159                           
  8160                           ;standbyMode.c: 1214: unsigned int foodTable[4] = {0, 0, 0, 0};
  8161  00CD90  EE20  F068         	lfsr	2,food_press@F3134
  8162  00CD94  EE10  F038         	lfsr	1,food_press@foodTable
  8163  00CD98  0E07               	movlw	7
  8164  00CD9A                     u7061:
  8165  00CD9A  CFDB FFE3          	movff	plusw2,plusw1
  8166  00CD9E  06E8               	decf	wreg,f,c
  8167  00CDA0  E2FC               	bc	u7061
  8168                           
  8169                           ;standbyMode.c: 1215: unsigned int isValid = 0;
  8170  00CDA2  0E00               	movlw	0
  8171  00CDA4  6E34               	movwf	food_press@isValid+1,c
  8172  00CDA6  0E00               	movlw	0
  8173  00CDA8  6E33               	movwf	food_press@isValid,c
  8174                           
  8175                           ;standbyMode.c: 1216: unsigned int backCheck = 0;
  8176  00CDAA  0E00               	movlw	0
  8177  00CDAC  6E32               	movwf	food_press@backCheck+1,c
  8178  00CDAE  0E00               	movlw	0
  8179  00CDB0  6E31               	movwf	food_press@backCheck,c
  8180                           
  8181                           ;standbyMode.c: 1217: tally = get_digits(dietSum);
  8182  00CDB2  C029  F001         	movff	food_press@dietSum,get_digits@sum
  8183  00CDB6  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  8184  00CDBA  ECF8  F062         	call	_get_digits	;wreg free
  8185  00CDBE  C001  F02F         	movff	?_get_digits,food_press@tally
  8186  00CDC2  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  8187  00CDC6                     
  8188                           ;standbyMode.c: 1220: while(PORTBbits.RB1 == 0){ continue; }
  8189  00CDC6  A281               	btfss	3969,1,c	;volatile
  8190  00CDC8  D7FE               	goto	l574
  8191                           
  8192                           ;standbyMode.c: 1221: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8193  00CDCA  3881               	swapf	3969,w,c	;volatile
  8194  00CDCC  0B0F               	andlw	15
  8195  00CDCE  0B0F               	andlw	15
  8196  00CDD0  6E37               	movwf	food_press@keypress,c
  8197  00CDD2  B281               	btfsc	3969,1,c	;volatile
  8198  00CDD4  D7FE               	goto	l579
  8199                           
  8200                           ;standbyMode.c: 1224: if(keypress == 15){
  8201  00CDD6  0E0F               	movlw	15
  8202  00CDD8  1837               	xorwf	food_press@keypress,w,c
  8203  00CDDA  B4D8               	btfsc	status,2,c
  8204  00CDDC  D070               	goto	l582
  8205                           
  8206                           ;standbyMode.c: 1227: else if (keypress == 14){
  8207                           
  8208                           ;standbyMode.c: 1226: }
  8209                           
  8210                           ;standbyMode.c: 1225: break;
  8211  00CDDE  0E0E               	movlw	14
  8212  00CDE0  1837               	xorwf	food_press@keypress,w,c
  8213  00CDE2  A4D8               	btfss	status,2,c
  8214  00CDE4  D005               	goto	l584
  8215                           
  8216                           ;standbyMode.c: 1228: backCheck = 1;
  8217  00CDE6  0E00               	movlw	0
  8218  00CDE8  6E32               	movwf	food_press@backCheck+1,c
  8219  00CDEA  0E01               	movlw	1
  8220  00CDEC  6E31               	movwf	food_press@backCheck,c
  8221                           
  8222                           ;standbyMode.c: 1229: break;
  8223  00CDEE  D067               	goto	l582
  8224  00CDF0                     l584:
  8225                           
  8226                           ;standbyMode.c: 1231: else if (keypress == 0 || keypress == 1 || keypress == 2){
  8227  00CDF0  5037               	movf	food_press@keypress,w,c
  8228  00CDF2  B4D8               	btfsc	status,2,c
  8229  00CDF4  D007               	goto	u7130
  8230  00CDF6  0437               	decf	food_press@keypress,w,c
  8231  00CDF8  B4D8               	btfsc	status,2,c
  8232  00CDFA  D004               	goto	u7130
  8233  00CDFC  0E02               	movlw	2
  8234  00CDFE  1837               	xorwf	food_press@keypress,w,c
  8235  00CE00  A4D8               	btfss	status,2,c
  8236  00CE02  D02C               	goto	l586
  8237  00CE04                     u7130:
  8238                           
  8239                           ;standbyMode.c: 1232: if (count < tally){
  8240  00CE04  502F               	movf	food_press@tally,w,c
  8241  00CE06  5C35               	subwf	food_press@count,w,c
  8242  00CE08  5030               	movf	food_press@tally+1,w,c
  8243  00CE0A  5836               	subwfb	food_press@count+1,w,c
  8244  00CE0C  B0D8               	btfsc	status,0,c
  8245  00CE0E  D7DB               	goto	l574
  8246                           
  8247                           ;standbyMode.c: 1233: putch(input[keypress]);
  8248  00CE10  5037               	movf	food_press@keypress,w,c
  8249  00CE12  0D01               	mullw	1
  8250  00CE14  0EE8               	movlw	low _input
  8251  00CE16  24F3               	addwf	prodl,w,c
  8252  00CE18  6EF6               	movwf	tblptrl,c
  8253  00CE1A  0EFC               	movlw	high _input
  8254  00CE1C  20F4               	addwfc	prodh,w,c
  8255  00CE1E  6EF7               	movwf	tblptrh,c
  8256  00CE20                     	if	1	;There are 3 active tblptr bytes
  8257  00CE20  6AF8               	clrf	tblptru,c
  8258  00CE22  0E00               	movlw	low (__mediumconst shr (0+16))
  8259  00CE24  22F8               	addwfc	tblptru,f,c
  8260  00CE26                     	endif
  8261  00CE26  0008               	tblrd		*
  8262  00CE28  50F5               	movf	tablat,w,c
  8263  00CE2A  EC49  F060         	call	_putch
  8264                           
  8265                           ;standbyMode.c: 1234: foodTable[count] = keypress + 1;
  8266  00CE2E  5037               	movf	food_press@keypress,w,c
  8267  00CE30  6E2D               	movwf	??_food_press& (0+255),c
  8268  00CE32  6A2E               	clrf	(??_food_press+1)& (0+255),c
  8269  00CE34  0E01               	movlw	1
  8270  00CE36  262D               	addwf	??_food_press,f,c
  8271  00CE38  0E00               	movlw	0
  8272  00CE3A  222E               	addwfc	??_food_press+1,f,c
  8273  00CE3C  90D8               	bcf	status,0,c
  8274  00CE3E  3435               	rlcf	food_press@count,w,c
  8275  00CE40  6ED9               	movwf	fsr2l,c
  8276  00CE42  3436               	rlcf	food_press@count+1,w,c
  8277  00CE44  6EDA               	movwf	fsr2h,c
  8278  00CE46  0E38               	movlw	low food_press@foodTable
  8279  00CE48  26D9               	addwf	fsr2l,f,c
  8280  00CE4A  0E00               	movlw	high food_press@foodTable
  8281  00CE4C  22DA               	addwfc	fsr2h,f,c
  8282  00CE4E  C02D  FFDE         	movff	??_food_press,postinc2
  8283  00CE52  C02E  FFDD         	movff	??_food_press+1,postdec2
  8284                           
  8285                           ;standbyMode.c: 1235: count += 1;
  8286  00CE56  4A35               	infsnz	food_press@count,f,c
  8287  00CE58  2A36               	incf	food_press@count+1,f,c
  8288                           
  8289                           ;standbyMode.c: 1236: }
  8290                           ;standbyMode.c: 1237: }
  8291  00CE5A  D7B5               	goto	l574
  8292  00CE5C                     l586:
  8293                           
  8294                           ;standbyMode.c: 1238: else if (keypress == 12){
  8295  00CE5C  0E0C               	movlw	12
  8296  00CE5E  1837               	xorwf	food_press@keypress,w,c
  8297  00CE60  A4D8               	btfss	status,2,c
  8298  00CE62  D7B1               	goto	l574
  8299                           
  8300                           ;standbyMode.c: 1239: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8301  00CE64  0E01               	movlw	1
  8302  00CE66  EC3F  F060         	call	_lcdInst
  8303  00CE6A  0EC3               	movlw	195
  8304  00CE6C  6E2D               	movwf	??_food_press& (0+255),c
  8305  00CE6E  0ECD               	movlw	205
  8306  00CE70                     u9877:
  8307  00CE70  2EE8               	decfsz	wreg,f,c
  8308  00CE72  D7FE               	bra	u9877
  8309  00CE74  2E2D               	decfsz	??_food_press& (0+255),f,c
  8310  00CE76  D7FC               	bra	u9877
  8311  00CE78  F000               	nop	
  8312                           
  8313                           ;standbyMode.c: 1240: printf("Drawer %i food:", drawer);
  8314  00CE7A  0EC1               	movlw	low STR_63
  8315  00CE7C  6E0D               	movwf	printf@f,c
  8316  00CE7E  0EFD               	movlw	high STR_63
  8317  00CE80  6E0E               	movwf	printf@f+1,c
  8318  00CE82  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8319  00CE86  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8320  00CE8A  EC51  F06B         	call	_printf	;wreg free
  8321                           
  8322                           ;standbyMode.c: 1241: lcdInst(0xC0);;
  8323  00CE8E  0EC0               	movlw	192
  8324  00CE90  EC3F  F060         	call	_lcdInst
  8325                           
  8326                           ;standbyMode.c: 1242: count = 0;
  8327  00CE94  0E00               	movlw	0
  8328  00CE96  6E36               	movwf	food_press@count+1,c
  8329  00CE98  0E00               	movlw	0
  8330  00CE9A  6E35               	movwf	food_press@count,c
  8331                           
  8332                           ;standbyMode.c: 1243: foodTable[0] = 0;
  8333  00CE9C  0E00               	movlw	0
  8334  00CE9E  6E39               	movwf	food_press@foodTable+1,c
  8335  00CEA0  0E00               	movlw	0
  8336  00CEA2  6E38               	movwf	food_press@foodTable,c
  8337                           
  8338                           ;standbyMode.c: 1244: foodTable[1] = 0;
  8339  00CEA4  0E00               	movlw	0
  8340  00CEA6  6E3B               	movwf	food_press@foodTable+3,c
  8341  00CEA8  0E00               	movlw	0
  8342  00CEAA  6E3A               	movwf	food_press@foodTable+2,c
  8343                           
  8344                           ;standbyMode.c: 1245: foodTable[2] = 0;
  8345  00CEAC  0E00               	movlw	0
  8346  00CEAE  6E3D               	movwf	food_press@foodTable+5,c
  8347  00CEB0  0E00               	movlw	0
  8348  00CEB2  6E3C               	movwf	food_press@foodTable+4,c
  8349                           
  8350                           ;standbyMode.c: 1246: foodTable[3] = 0;
  8351  00CEB4  0E00               	movlw	0
  8352  00CEB6  6E3F               	movwf	food_press@foodTable+7,c
  8353  00CEB8  0E00               	movlw	0
  8354  00CEBA  6E3E               	movwf	food_press@foodTable+6,c
  8355  00CEBC  D784               	goto	l574
  8356  00CEBE                     l582:
  8357                           
  8358                           ;standbyMode.c: 1247: }
  8359                           ;standbyMode.c: 1248: }
  8360                           ;standbyMode.c: 1250: if (backCheck == 1){
  8361  00CEBE  0431               	decf	food_press@backCheck,w,c
  8362  00CEC0  1032               	iorwf	food_press@backCheck+1,w,c
  8363  00CEC2  A4D8               	btfss	status,2,c
  8364  00CEC4  D005               	goto	l593
  8365                           
  8366                           ;standbyMode.c: 1251: return 100;
  8367  00CEC6  0E00               	movlw	0
  8368  00CEC8  6E2A               	movwf	?_food_press+1,c
  8369  00CECA  0E64               	movlw	100
  8370  00CECC  6E29               	movwf	?_food_press,c
  8371                           
  8372                           ;standbyMode.c: 1252: }
  8373  00CECE  0012               	return	
  8374  00CED0                     l593:
  8375                           
  8376                           ;standbyMode.c: 1253: else {
  8377                           ;standbyMode.c: 1254: isValid = check_food(dietSum, foodTable);
  8378  00CED0  C029  F001         	movff	food_press@dietSum,check_food@sum
  8379  00CED4  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  8380  00CED8  0E38               	movlw	low food_press@foodTable
  8381  00CEDA  6E03               	movwf	check_food@foodInput,c
  8382  00CEDC  0E00               	movlw	high food_press@foodTable
  8383  00CEDE  6E04               	movwf	check_food@foodInput+1,c
  8384  00CEE0  EC9B  F072         	call	_check_food	;wreg free
  8385  00CEE4  C001  F033         	movff	?_check_food,food_press@isValid
  8386  00CEE8  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  8387                           
  8388                           ;standbyMode.c: 1256: if (isValid == 0){
  8389  00CEEC  5033               	movf	food_press@isValid,w,c
  8390  00CEEE  1034               	iorwf	food_press@isValid+1,w,c
  8391  00CEF0  A4D8               	btfss	status,2,c
  8392  00CEF2  D026               	goto	l596
  8393                           
  8394                           ;standbyMode.c: 1257: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8395  00CEF4  0E01               	movlw	1
  8396  00CEF6  EC3F  F060         	call	_lcdInst
  8397  00CEFA  0EC3               	movlw	195
  8398  00CEFC  6E2D               	movwf	??_food_press& (0+255),c
  8399  00CEFE  0ECD               	movlw	205
  8400  00CF00                     u9887:
  8401  00CF00  2EE8               	decfsz	wreg,f,c
  8402  00CF02  D7FE               	bra	u9887
  8403  00CF04  2E2D               	decfsz	??_food_press& (0+255),f,c
  8404  00CF06  D7FC               	bra	u9887
  8405  00CF08  F000               	nop	
  8406                           
  8407                           ;standbyMode.c: 1258: printf("Invalid food!");
  8408  00CF0A  0EB9               	movlw	low STR_65
  8409  00CF0C  6E0D               	movwf	printf@f,c
  8410  00CF0E  0EFE               	movlw	high STR_65
  8411  00CF10  6E0E               	movwf	printf@f+1,c
  8412  00CF12  EC51  F06B         	call	_printf	;wreg free
  8413                           
  8414                           ;standbyMode.c: 1259: lcdInst(0xC0);;
  8415  00CF16  0EC0               	movlw	192
  8416  00CF18  EC3F  F060         	call	_lcdInst
  8417                           
  8418                           ;standbyMode.c: 1260: printf("Try again.");
  8419  00CF1C  0E46               	movlw	low STR_66
  8420  00CF1E  6E0D               	movwf	printf@f,c
  8421  00CF20  0EFF               	movlw	high STR_66
  8422  00CF22  6E0E               	movwf	printf@f+1,c
  8423  00CF24  EC51  F06B         	call	_printf	;wreg free
  8424                           
  8425                           ;standbyMode.c: 1261: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8426  00CF28  0E33               	movlw	51
  8427  00CF2A  6E2E               	movwf	(??_food_press+1)& (0+255),c
  8428  00CF2C  0EBB               	movlw	187
  8429  00CF2E  6E2D               	movwf	??_food_press& (0+255),c
  8430  00CF30  0EE0               	movlw	224
  8431  00CF32                     u9897:
  8432  00CF32  2EE8               	decfsz	wreg,f,c
  8433  00CF34  D7FE               	bra	u9897
  8434  00CF36  2E2D               	decfsz	??_food_press& (0+255),f,c
  8435  00CF38  D7FC               	bra	u9897
  8436  00CF3A  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  8437  00CF3C  D7FA               	bra	u9897
  8438                           
  8439                           ;standbyMode.c: 1262: goto START;
  8440  00CF3E  D708               	goto	_food_press
  8441  00CF40                     l596:
  8442                           
  8443                           ;standbyMode.c: 1264: else {
  8444                           ;standbyMode.c: 1265: return isValid;
  8445  00CF40  C033  F029         	movff	food_press@isValid,?_food_press
  8446  00CF44  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  8447  00CF48  0012               	return	
  8448  00CF4A                     __end_of_food_press:
  8449                           	opt stack 0
  8450                           tblptru	equ	0xFF8
  8451                           tblptrh	equ	0xFF7
  8452                           tblptrl	equ	0xFF6
  8453                           tablat	equ	0xFF5
  8454                           prodh	equ	0xFF4
  8455                           prodl	equ	0xFF3
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           postdec1	equ	0xFE5
  8459                           plusw1	equ	0xFE3
  8460                           fsr1l	equ	0xFE1
  8461                           indf2	equ	0xFDF
  8462                           postinc2	equ	0xFDE
  8463                           postdec2	equ	0xFDD
  8464                           plusw2	equ	0xFDB
  8465                           fsr2h	equ	0xFDA
  8466                           fsr2l	equ	0xFD9
  8467                           status	equ	0xFD8
  8468                           
  8469 ;; *************** function _get_digits *****************
  8470 ;; Defined at:
  8471 ;;		line 1101 in file "standbyMode.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  sum             2    0[COMRAM] unsigned int 
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  count           2    4[COMRAM] unsigned int 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  2    0[COMRAM] unsigned int 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;Total ram usage:        6 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_food_press
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text14
  8499  00C5F0                     __ptext14:
  8500                           	opt stack 0
  8501  00C5F0                     _get_digits:
  8502                           	opt stack 28
  8503                           
  8504                           ;standbyMode.c: 1103: unsigned int count = 0;
  8505                           
  8506                           ;incstack = 0
  8507  00C5F0  0E00               	movlw	0
  8508  00C5F2  6E06               	movwf	get_digits@count+1,c
  8509  00C5F4  0E00               	movlw	0
  8510  00C5F6  6E05               	movwf	get_digits@count,c
  8511                           
  8512                           ;standbyMode.c: 1105: switch(sum){
  8513  00C5F8  D015               	goto	l547
  8514  00C5FA                     
  8515                           ;standbyMode.c: 1118: count = 1;
  8516                           
  8517                           ;standbyMode.c: 1117: case 12:
  8518                           
  8519                           ;standbyMode.c: 1114: break;
  8520                           
  8521                           ;standbyMode.c: 1113: count = 1;
  8522                           
  8523                           ;standbyMode.c: 1112: case 7:
  8524                           
  8525                           ;standbyMode.c: 1109: break;
  8526                           
  8527                           ;standbyMode.c: 1108: count = 1;
  8528  00C5FA  0E00               	movlw	0
  8529  00C5FC  6E06               	movwf	get_digits@count+1,c
  8530  00C5FE  0E01               	movlw	1
  8531  00C600                     L42:
  8532  00C600  6E05               	movwf	get_digits@count,c
  8533                           
  8534                           ;standbyMode.c: 1124: break;
  8535  00C602  D050               	goto	l549
  8536  00C604                     
  8537                           ;standbyMode.c: 1133: count = 2;
  8538                           
  8539                           ;standbyMode.c: 1132: case 19:
  8540                           
  8541                           ;standbyMode.c: 1129: break;
  8542                           
  8543                           ;standbyMode.c: 1128: count = 2;
  8544  00C604  0E00               	movlw	0
  8545  00C606  6E06               	movwf	get_digits@count+1,c
  8546  00C608  0E02               	movlw	2
  8547  00C60A  D7FA               	goto	L42
  8548  00C60C                     
  8549                           ;standbyMode.c: 1168: count = 3;
  8550                           
  8551                           ;standbyMode.c: 1167: case 31:
  8552                           
  8553                           ;standbyMode.c: 1164: break;
  8554                           
  8555                           ;standbyMode.c: 1163: count = 3;
  8556                           
  8557                           ;standbyMode.c: 1162: case 26:
  8558                           
  8559                           ;standbyMode.c: 1159: break;
  8560                           
  8561                           ;standbyMode.c: 1158: count = 3;
  8562                           
  8563                           ;standbyMode.c: 1157: case 22:
  8564                           
  8565                           ;standbyMode.c: 1154: break;
  8566                           
  8567                           ;standbyMode.c: 1153: count = 3;
  8568                           
  8569                           ;standbyMode.c: 1152: case 27:
  8570                           
  8571                           ;standbyMode.c: 1149: break;
  8572                           
  8573                           ;standbyMode.c: 1148: count = 3;
  8574                           
  8575                           ;standbyMode.c: 1147: case 17:
  8576                           
  8577                           ;standbyMode.c: 1144: break;
  8578                           
  8579                           ;standbyMode.c: 1143: count = 3;
  8580                           
  8581                           ;standbyMode.c: 1142: case 18:
  8582                           
  8583                           ;standbyMode.c: 1139: break;
  8584                           
  8585                           ;standbyMode.c: 1138: count = 3;
  8586  00C60C  0E00               	movlw	0
  8587  00C60E  6E06               	movwf	get_digits@count+1,c
  8588  00C610  0E03               	movlw	3
  8589  00C612  D7F6               	goto	L42
  8590  00C614                     
  8591                           ;standbyMode.c: 1193: count = 4;
  8592                           
  8593                           ;standbyMode.c: 1192: case 43:
  8594                           
  8595                           ;standbyMode.c: 1189: break;
  8596                           
  8597                           ;standbyMode.c: 1188: count = 4;
  8598                           
  8599                           ;standbyMode.c: 1187: case 39:
  8600                           
  8601                           ;standbyMode.c: 1184: break;
  8602                           
  8603                           ;standbyMode.c: 1183: count = 4;
  8604                           
  8605                           ;standbyMode.c: 1182: case 34:
  8606                           
  8607                           ;standbyMode.c: 1179: break;
  8608                           
  8609                           ;standbyMode.c: 1178: count = 4;
  8610                           
  8611                           ;standbyMode.c: 1177: case 29:
  8612                           
  8613                           ;standbyMode.c: 1174: break;
  8614                           
  8615                           ;standbyMode.c: 1173: count = 4;
  8616  00C614  0E00               	movlw	0
  8617  00C616  6E06               	movwf	get_digits@count+1,c
  8618  00C618  0E04               	movlw	4
  8619  00C61A  D7F2               	goto	L42
  8620  00C61C                     
  8621                           ;standbyMode.c: 1198: count = 0;
  8622  00C61C  0E00               	movlw	0
  8623  00C61E  6E06               	movwf	get_digits@count+1,c
  8624  00C620  0E00               	movlw	0
  8625  00C622  D7EE               	goto	L42
  8626  00C624                     l547:
  8627  00C624  C001  F003         	movff	get_digits@sum,??_get_digits
  8628  00C628  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  8629                           
  8630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8631                           ; Switch size 1, requested type "space"
  8632                           ; Number of cases is 1, Range of values is 0 to 0
  8633                           ; switch strategies available:
  8634                           ; Name         Instructions Cycles
  8635                           ; simple_byte            4     3 (average)
  8636                           ;	Chosen strategy is simple_byte
  8637  00C62C  5004               	movf	??_get_digits+1,w,c
  8638  00C62E  0A00               	xorlw	0	; case 0
  8639  00C630  A4D8               	btfss	status,2,c
  8640  00C632  D7F4               	goto	l567
  8641                           
  8642                           ; Switch size 1, requested type "space"
  8643                           ; Number of cases is 18, Range of values is 3 to 43
  8644                           ; switch strategies available:
  8645                           ; Name         Instructions Cycles
  8646                           ; simple_byte           55    28 (average)
  8647                           ;	Chosen strategy is simple_byte
  8648  00C634  5003               	movf	??_get_digits,w,c
  8649  00C636  0A03               	xorlw	3	; case 3
  8650  00C638  B4D8               	btfsc	status,2,c
  8651  00C63A  D7DF               	goto	l548
  8652  00C63C  0A04               	xorlw	4	; case 7
  8653  00C63E  B4D8               	btfsc	status,2,c
  8654  00C640  D7DC               	goto	l548
  8655  00C642  0A0D               	xorlw	13	; case 10
  8656  00C644  B4D8               	btfsc	status,2,c
  8657  00C646  D7DE               	goto	l553
  8658  00C648  0A06               	xorlw	6	; case 12
  8659  00C64A  B4D8               	btfsc	status,2,c
  8660  00C64C  D7D6               	goto	l548
  8661  00C64E  0A01               	xorlw	1	; case 13
  8662  00C650  B4D8               	btfsc	status,2,c
  8663  00C652  D7DC               	goto	l555
  8664  00C654  0A02               	xorlw	2	; case 15
  8665  00C656  B4D8               	btfsc	status,2,c
  8666  00C658  D7D5               	goto	l553
  8667  00C65A  0A1E               	xorlw	30	; case 17
  8668  00C65C  B4D8               	btfsc	status,2,c
  8669  00C65E  D7D6               	goto	l555
  8670  00C660  0A03               	xorlw	3	; case 18
  8671  00C662  B4D8               	btfsc	status,2,c
  8672  00C664  D7D3               	goto	l555
  8673  00C666  0A01               	xorlw	1	; case 19
  8674  00C668  B4D8               	btfsc	status,2,c
  8675  00C66A  D7CC               	goto	l553
  8676  00C66C  0A05               	xorlw	5	; case 22
  8677  00C66E  B4D8               	btfsc	status,2,c
  8678  00C670  D7CD               	goto	l555
  8679  00C672  0A0F               	xorlw	15	; case 25
  8680  00C674  B4D8               	btfsc	status,2,c
  8681  00C676  D7CE               	goto	l562
  8682  00C678  0A03               	xorlw	3	; case 26
  8683  00C67A  B4D8               	btfsc	status,2,c
  8684  00C67C  D7C7               	goto	l555
  8685  00C67E  0A01               	xorlw	1	; case 27
  8686  00C680  B4D8               	btfsc	status,2,c
  8687  00C682  D7C4               	goto	l555
  8688  00C684  0A06               	xorlw	6	; case 29
  8689  00C686  B4D8               	btfsc	status,2,c
  8690  00C688  D7C5               	goto	l562
  8691  00C68A  0A02               	xorlw	2	; case 31
  8692  00C68C  B4D8               	btfsc	status,2,c
  8693  00C68E  D7BE               	goto	l555
  8694  00C690  0A3D               	xorlw	61	; case 34
  8695  00C692  B4D8               	btfsc	status,2,c
  8696  00C694  D7BF               	goto	l562
  8697  00C696  0A05               	xorlw	5	; case 39
  8698  00C698  B4D8               	btfsc	status,2,c
  8699  00C69A  D7BC               	goto	l562
  8700  00C69C  0A0C               	xorlw	12	; case 43
  8701  00C69E  B4D8               	btfsc	status,2,c
  8702  00C6A0  D7B9               	goto	l562
  8703  00C6A2  D7BC               	goto	l567
  8704  00C6A4                     l549:
  8705                           
  8706                           ;standbyMode.c: 1201: return count;
  8707  00C6A4  C005  F001         	movff	get_digits@count,?_get_digits
  8708  00C6A8  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  8709  00C6AC  0012               	return		;funcret
  8710  00C6AE                     __end_of_get_digits:
  8711                           	opt stack 0
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           prodh	equ	0xFF4
  8717                           prodl	equ	0xFF3
  8718                           postinc0	equ	0xFEE
  8719                           wreg	equ	0xFE8
  8720                           postdec1	equ	0xFE5
  8721                           plusw1	equ	0xFE3
  8722                           fsr1l	equ	0xFE1
  8723                           indf2	equ	0xFDF
  8724                           postinc2	equ	0xFDE
  8725                           postdec2	equ	0xFDD
  8726                           plusw2	equ	0xFDB
  8727                           fsr2h	equ	0xFDA
  8728                           fsr2l	equ	0xFD9
  8729                           status	equ	0xFD8
  8730                           
  8731 ;; *************** function _check_food *****************
  8732 ;; Defined at:
  8733 ;;		line 92 in file "standbyMode.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;  sum             2    0[COMRAM] unsigned int 
  8736 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  8737 ;;		 -> food_press@foodTable(8), 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  returnValue     2    6[COMRAM] unsigned int 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;                  2    0[COMRAM] unsigned int 
  8742 ;; Registers used:
  8743 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8752 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8753 ;;Total ram usage:        8 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; This function calls:
  8756 ;;		Nothing
  8757 ;; This function is called by:
  8758 ;;		_food_press
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text15
  8763  00E536                     __ptext15:
  8764                           	opt stack 0
  8765  00E536                     _check_food:
  8766                           	opt stack 28
  8767                           
  8768                           ;standbyMode.c: 93: unsigned int returnValue = 0;
  8769                           
  8770                           ;incstack = 0
  8771  00E536  0E00               	movlw	0
  8772  00E538  6E08               	movwf	check_food@returnValue+1,c
  8773  00E53A  0E00               	movlw	0
  8774  00E53C  6E07               	movwf	check_food@returnValue,c
  8775                           
  8776                           ;standbyMode.c: 95: switch(sum){
  8777  00E53E  EFB0  F077         	goto	l215
  8778  00E542                     
  8779                           ;standbyMode.c: 98: if (foodInput[0] == 1){
  8780  00E542  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8781  00E546  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8782  00E54A  04DE               	decf	postinc2,w,c
  8783  00E54C  10DE               	iorwf	postinc2,w,c
  8784  00E54E  A4D8               	btfss	status,2,c
  8785  00E550  D005               	goto	l217
  8786                           
  8787                           ;standbyMode.c: 99: returnValue = 1;
  8788  00E552  0E00               	movlw	0
  8789  00E554  6E08               	movwf	check_food@returnValue+1,c
  8790  00E556  0E01               	movlw	1
  8791  00E558  EFAE  F077         	goto	L87
  8792  00E55C                     l217:
  8793                           
  8794                           ;standbyMode.c: 101: else if (foodInput[0] == 2){
  8795  00E55C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8796  00E560  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8797  00E564  0E02               	movlw	2
  8798  00E566  18DE               	xorwf	postinc2,w,c
  8799  00E568  10DE               	iorwf	postinc2,w,c
  8800  00E56A  A4D8               	btfss	status,2,c
  8801  00E56C  EFF4  F077         	goto	l220
  8802                           
  8803                           ;standbyMode.c: 102: returnValue = 2;
  8804  00E570  0E00               	movlw	0
  8805  00E572  6E08               	movwf	check_food@returnValue+1,c
  8806  00E574  0E02               	movlw	2
  8807  00E576  EFAE  F077         	goto	L87
  8808  00E57A                     
  8809                           ;standbyMode.c: 108: if (foodInput[0] == 1){
  8810  00E57A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8811  00E57E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8812  00E582  04DE               	decf	postinc2,w,c
  8813  00E584  10DE               	iorwf	postinc2,w,c
  8814  00E586  A4D8               	btfss	status,2,c
  8815  00E588  D005               	goto	l222
  8816                           
  8817                           ;standbyMode.c: 109: returnValue = 3;
  8818  00E58A  0E00               	movlw	0
  8819  00E58C  6E08               	movwf	check_food@returnValue+1,c
  8820  00E58E  0E03               	movlw	3
  8821  00E590  EFAE  F077         	goto	L87
  8822  00E594                     l222:
  8823                           
  8824                           ;standbyMode.c: 111: else if (foodInput[0] == 2){
  8825  00E594  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8826  00E598  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8827  00E59C  0E02               	movlw	2
  8828  00E59E  18DE               	xorwf	postinc2,w,c
  8829  00E5A0  10DE               	iorwf	postinc2,w,c
  8830  00E5A2  A4D8               	btfss	status,2,c
  8831  00E5A4  EFF4  F077         	goto	l220
  8832                           
  8833                           ;standbyMode.c: 112: returnValue = 4;
  8834  00E5A8  0E00               	movlw	0
  8835  00E5AA  6E08               	movwf	check_food@returnValue+1,c
  8836  00E5AC  0E04               	movlw	4
  8837  00E5AE  EFAE  F077         	goto	L87
  8838  00E5B2                     
  8839                           ;standbyMode.c: 118: if (foodInput[0] == 1){
  8840  00E5B2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8841  00E5B6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8842  00E5BA  04DE               	decf	postinc2,w,c
  8843  00E5BC  10DE               	iorwf	postinc2,w,c
  8844  00E5BE  A4D8               	btfss	status,2,c
  8845  00E5C0  D005               	goto	l226
  8846                           
  8847                           ;standbyMode.c: 119: returnValue = 5;
  8848  00E5C2  0E00               	movlw	0
  8849  00E5C4  6E08               	movwf	check_food@returnValue+1,c
  8850  00E5C6  0E05               	movlw	5
  8851  00E5C8  EFAE  F077         	goto	L87
  8852  00E5CC                     l226:
  8853                           
  8854                           ;standbyMode.c: 121: else if (foodInput[0] == 2){
  8855  00E5CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8856  00E5D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8857  00E5D4  0E02               	movlw	2
  8858  00E5D6  18DE               	xorwf	postinc2,w,c
  8859  00E5D8  10DE               	iorwf	postinc2,w,c
  8860  00E5DA  A4D8               	btfss	status,2,c
  8861  00E5DC  D005               	goto	l228
  8862                           
  8863                           ;standbyMode.c: 122: returnValue = 6;
  8864  00E5DE  0E00               	movlw	0
  8865  00E5E0  6E08               	movwf	check_food@returnValue+1,c
  8866  00E5E2  0E06               	movlw	6
  8867  00E5E4  EFAE  F077         	goto	L87
  8868  00E5E8                     l228:
  8869                           
  8870                           ;standbyMode.c: 124: else if (foodInput[0] == 3){
  8871  00E5E8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8872  00E5EC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8873  00E5F0  0E03               	movlw	3
  8874  00E5F2  18DE               	xorwf	postinc2,w,c
  8875  00E5F4  10DE               	iorwf	postinc2,w,c
  8876  00E5F6  A4D8               	btfss	status,2,c
  8877  00E5F8  EFF4  F077         	goto	l220
  8878                           
  8879                           ;standbyMode.c: 125: returnValue = 7;
  8880  00E5FC  0E00               	movlw	0
  8881  00E5FE  6E08               	movwf	check_food@returnValue+1,c
  8882  00E600  0E07               	movlw	7
  8883  00E602  EFAE  F077         	goto	L87
  8884  00E606                     
  8885                           ;standbyMode.c: 131: if (foodInput[0] == 1 && foodInput[1] == 1){
  8886  00E606  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8887  00E60A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8888  00E60E  04DE               	decf	postinc2,w,c
  8889  00E610  10DE               	iorwf	postinc2,w,c
  8890  00E612  A4D8               	btfss	status,2,c
  8891  00E614  D00F               	goto	l232
  8892  00E616  EE20 F002          	lfsr	2,2
  8893  00E61A  5003               	movf	check_food@foodInput,w,c
  8894  00E61C  26D9               	addwf	fsr2l,f,c
  8895  00E61E  5004               	movf	check_food@foodInput+1,w,c
  8896  00E620  22DA               	addwfc	fsr2h,f,c
  8897  00E622  04DE               	decf	postinc2,w,c
  8898  00E624  10DE               	iorwf	postinc2,w,c
  8899  00E626  A4D8               	btfss	status,2,c
  8900  00E628  D005               	goto	l232
  8901                           
  8902                           ;standbyMode.c: 132: returnValue = 8;
  8903  00E62A  0E00               	movlw	0
  8904  00E62C  6E08               	movwf	check_food@returnValue+1,c
  8905  00E62E  0E08               	movlw	8
  8906  00E630  EFAE  F077         	goto	L87
  8907  00E634                     l232:
  8908                           
  8909                           ;standbyMode.c: 134: else if (foodInput[0] == 1 && foodInput[1] == 2){
  8910  00E634  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8911  00E638  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8912  00E63C  04DE               	decf	postinc2,w,c
  8913  00E63E  10DE               	iorwf	postinc2,w,c
  8914  00E640  A4D8               	btfss	status,2,c
  8915  00E642  D010               	goto	l234
  8916  00E644  EE20 F002          	lfsr	2,2
  8917  00E648  5003               	movf	check_food@foodInput,w,c
  8918  00E64A  26D9               	addwf	fsr2l,f,c
  8919  00E64C  5004               	movf	check_food@foodInput+1,w,c
  8920  00E64E  22DA               	addwfc	fsr2h,f,c
  8921  00E650  0E02               	movlw	2
  8922  00E652  18DE               	xorwf	postinc2,w,c
  8923  00E654  10DE               	iorwf	postinc2,w,c
  8924  00E656  A4D8               	btfss	status,2,c
  8925  00E658  D005               	goto	l234
  8926                           
  8927                           ;standbyMode.c: 135: returnValue = 9;
  8928  00E65A  0E00               	movlw	0
  8929  00E65C  6E08               	movwf	check_food@returnValue+1,c
  8930  00E65E  0E09               	movlw	9
  8931  00E660  EFAE  F077         	goto	L87
  8932  00E664                     l234:
  8933                           
  8934                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1){
  8935  00E664  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8936  00E668  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8937  00E66C  0E02               	movlw	2
  8938  00E66E  18DE               	xorwf	postinc2,w,c
  8939  00E670  10DE               	iorwf	postinc2,w,c
  8940  00E672  A4D8               	btfss	status,2,c
  8941  00E674  D00F               	goto	l236
  8942  00E676  EE20 F002          	lfsr	2,2
  8943  00E67A  5003               	movf	check_food@foodInput,w,c
  8944  00E67C  26D9               	addwf	fsr2l,f,c
  8945  00E67E  5004               	movf	check_food@foodInput+1,w,c
  8946  00E680  22DA               	addwfc	fsr2h,f,c
  8947  00E682  04DE               	decf	postinc2,w,c
  8948  00E684  10DE               	iorwf	postinc2,w,c
  8949  00E686  A4D8               	btfss	status,2,c
  8950  00E688  D005               	goto	l236
  8951                           
  8952                           ;standbyMode.c: 138: returnValue = 10;
  8953  00E68A  0E00               	movlw	0
  8954  00E68C  6E08               	movwf	check_food@returnValue+1,c
  8955  00E68E  0E0A               	movlw	10
  8956  00E690  EFAE  F077         	goto	L87
  8957  00E694                     l236:
  8958                           
  8959                           ;standbyMode.c: 140: else if (foodInput[0] == 2 && foodInput[1] == 2){
  8960  00E694  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8961  00E698  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8962  00E69C  0E02               	movlw	2
  8963  00E69E  18DE               	xorwf	postinc2,w,c
  8964  00E6A0  10DE               	iorwf	postinc2,w,c
  8965  00E6A2  A4D8               	btfss	status,2,c
  8966  00E6A4  EFF4  F077         	goto	l220
  8967  00E6A8  EE20 F002          	lfsr	2,2
  8968  00E6AC  5003               	movf	check_food@foodInput,w,c
  8969  00E6AE  26D9               	addwf	fsr2l,f,c
  8970  00E6B0  5004               	movf	check_food@foodInput+1,w,c
  8971  00E6B2  22DA               	addwfc	fsr2h,f,c
  8972  00E6B4  0E02               	movlw	2
  8973  00E6B6  18DE               	xorwf	postinc2,w,c
  8974  00E6B8  10DE               	iorwf	postinc2,w,c
  8975  00E6BA  A4D8               	btfss	status,2,c
  8976  00E6BC  EFF4  F077         	goto	l220
  8977                           
  8978                           ;standbyMode.c: 141: returnValue = 11;
  8979  00E6C0  0E00               	movlw	0
  8980  00E6C2  6E08               	movwf	check_food@returnValue+1,c
  8981  00E6C4  0E0B               	movlw	11
  8982  00E6C6  EFAE  F077         	goto	L87
  8983  00E6CA                     
  8984                           ;standbyMode.c: 147: if (foodInput[0] == 1 && foodInput[1] == 1){
  8985  00E6CA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  8986  00E6CE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  8987  00E6D2  04DE               	decf	postinc2,w,c
  8988  00E6D4  10DE               	iorwf	postinc2,w,c
  8989  00E6D6  A4D8               	btfss	status,2,c
  8990  00E6D8  D00F               	goto	l240
  8991  00E6DA  EE20 F002          	lfsr	2,2
  8992  00E6DE  5003               	movf	check_food@foodInput,w,c
  8993  00E6E0  26D9               	addwf	fsr2l,f,c
  8994  00E6E2  5004               	movf	check_food@foodInput+1,w,c
  8995  00E6E4  22DA               	addwfc	fsr2h,f,c
  8996  00E6E6  04DE               	decf	postinc2,w,c
  8997  00E6E8  10DE               	iorwf	postinc2,w,c
  8998  00E6EA  A4D8               	btfss	status,2,c
  8999  00E6EC  D005               	goto	l240
  9000                           
  9001                           ;standbyMode.c: 148: returnValue = 12;
  9002  00E6EE  0E00               	movlw	0
  9003  00E6F0  6E08               	movwf	check_food@returnValue+1,c
  9004  00E6F2  0E0C               	movlw	12
  9005  00E6F4  EFAE  F077         	goto	L87
  9006  00E6F8                     l240:
  9007                           
  9008                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9009  00E6F8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9010  00E6FC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9011  00E700  04DE               	decf	postinc2,w,c
  9012  00E702  10DE               	iorwf	postinc2,w,c
  9013  00E704  A4D8               	btfss	status,2,c
  9014  00E706  D010               	goto	l242
  9015  00E708  EE20 F002          	lfsr	2,2
  9016  00E70C  5003               	movf	check_food@foodInput,w,c
  9017  00E70E  26D9               	addwf	fsr2l,f,c
  9018  00E710  5004               	movf	check_food@foodInput+1,w,c
  9019  00E712  22DA               	addwfc	fsr2h,f,c
  9020  00E714  0E02               	movlw	2
  9021  00E716  18DE               	xorwf	postinc2,w,c
  9022  00E718  10DE               	iorwf	postinc2,w,c
  9023  00E71A  A4D8               	btfss	status,2,c
  9024  00E71C  D005               	goto	l242
  9025                           
  9026                           ;standbyMode.c: 151: returnValue = 13;
  9027  00E71E  0E00               	movlw	0
  9028  00E720  6E08               	movwf	check_food@returnValue+1,c
  9029  00E722  0E0D               	movlw	13
  9030  00E724  EFAE  F077         	goto	L87
  9031  00E728                     l242:
  9032                           
  9033                           ;standbyMode.c: 153: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9034  00E728  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9035  00E72C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9036  00E730  04DE               	decf	postinc2,w,c
  9037  00E732  10DE               	iorwf	postinc2,w,c
  9038  00E734  A4D8               	btfss	status,2,c
  9039  00E736  D010               	goto	l244
  9040  00E738  EE20 F002          	lfsr	2,2
  9041  00E73C  5003               	movf	check_food@foodInput,w,c
  9042  00E73E  26D9               	addwf	fsr2l,f,c
  9043  00E740  5004               	movf	check_food@foodInput+1,w,c
  9044  00E742  22DA               	addwfc	fsr2h,f,c
  9045  00E744  0E03               	movlw	3
  9046  00E746  18DE               	xorwf	postinc2,w,c
  9047  00E748  10DE               	iorwf	postinc2,w,c
  9048  00E74A  A4D8               	btfss	status,2,c
  9049  00E74C  D005               	goto	l244
  9050                           
  9051                           ;standbyMode.c: 154: returnValue = 14;
  9052  00E74E  0E00               	movlw	0
  9053  00E750  6E08               	movwf	check_food@returnValue+1,c
  9054  00E752  0E0E               	movlw	14
  9055  00E754  EFAE  F077         	goto	L87
  9056  00E758                     l244:
  9057                           
  9058                           ;standbyMode.c: 156: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9059  00E758  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9060  00E75C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9061  00E760  0E02               	movlw	2
  9062  00E762  18DE               	xorwf	postinc2,w,c
  9063  00E764  10DE               	iorwf	postinc2,w,c
  9064  00E766  A4D8               	btfss	status,2,c
  9065  00E768  D00E               	goto	l246
  9066  00E76A  EE20 F002          	lfsr	2,2
  9067  00E76E  5003               	movf	check_food@foodInput,w,c
  9068  00E770  26D9               	addwf	fsr2l,f,c
  9069  00E772  5004               	movf	check_food@foodInput+1,w,c
  9070  00E774  22DA               	addwfc	fsr2h,f,c
  9071  00E776  04DE               	decf	postinc2,w,c
  9072  00E778  10DE               	iorwf	postinc2,w,c
  9073  00E77A  A4D8               	btfss	status,2,c
  9074  00E77C  D004               	goto	l246
  9075                           
  9076                           ;standbyMode.c: 157: returnValue = 15;
  9077  00E77E  0E00               	movlw	0
  9078  00E780  6E08               	movwf	check_food@returnValue+1,c
  9079  00E782  0E0F               	movlw	15
  9080  00E784  D3EB               	goto	L87
  9081  00E786                     l246:
  9082                           
  9083                           ;standbyMode.c: 159: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9084  00E786  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9085  00E78A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9086  00E78E  0E02               	movlw	2
  9087  00E790  18DE               	xorwf	postinc2,w,c
  9088  00E792  10DE               	iorwf	postinc2,w,c
  9089  00E794  A4D8               	btfss	status,2,c
  9090  00E796  EFF4  F077         	goto	l220
  9091  00E79A  EE20 F002          	lfsr	2,2
  9092  00E79E  5003               	movf	check_food@foodInput,w,c
  9093  00E7A0  26D9               	addwf	fsr2l,f,c
  9094  00E7A2  5004               	movf	check_food@foodInput+1,w,c
  9095  00E7A4  22DA               	addwfc	fsr2h,f,c
  9096  00E7A6  0E02               	movlw	2
  9097  00E7A8  18DE               	xorwf	postinc2,w,c
  9098  00E7AA  10DE               	iorwf	postinc2,w,c
  9099  00E7AC  A4D8               	btfss	status,2,c
  9100  00E7AE  EFF4  F077         	goto	l220
  9101                           
  9102                           ;standbyMode.c: 160: returnValue = 16;
  9103  00E7B2  0E00               	movlw	0
  9104  00E7B4  6E08               	movwf	check_food@returnValue+1,c
  9105  00E7B6  0E10               	movlw	16
  9106  00E7B8  D3D1               	goto	L87
  9107  00E7BA                     
  9108                           ;standbyMode.c: 166: if (foodInput[0] == 1 && foodInput[1] == 1){
  9109  00E7BA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9110  00E7BE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9111  00E7C2  04DE               	decf	postinc2,w,c
  9112  00E7C4  10DE               	iorwf	postinc2,w,c
  9113  00E7C6  A4D8               	btfss	status,2,c
  9114  00E7C8  D00E               	goto	l250
  9115  00E7CA  EE20 F002          	lfsr	2,2
  9116  00E7CE  5003               	movf	check_food@foodInput,w,c
  9117  00E7D0  26D9               	addwf	fsr2l,f,c
  9118  00E7D2  5004               	movf	check_food@foodInput+1,w,c
  9119  00E7D4  22DA               	addwfc	fsr2h,f,c
  9120  00E7D6  04DE               	decf	postinc2,w,c
  9121  00E7D8  10DE               	iorwf	postinc2,w,c
  9122  00E7DA  A4D8               	btfss	status,2,c
  9123  00E7DC  D004               	goto	l250
  9124                           
  9125                           ;standbyMode.c: 167: returnValue = 17;
  9126  00E7DE  0E00               	movlw	0
  9127  00E7E0  6E08               	movwf	check_food@returnValue+1,c
  9128  00E7E2  0E11               	movlw	17
  9129  00E7E4  D3BB               	goto	L87
  9130  00E7E6                     l250:
  9131                           
  9132                           ;standbyMode.c: 169: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9133  00E7E6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9134  00E7EA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9135  00E7EE  04DE               	decf	postinc2,w,c
  9136  00E7F0  10DE               	iorwf	postinc2,w,c
  9137  00E7F2  A4D8               	btfss	status,2,c
  9138  00E7F4  D00F               	goto	l252
  9139  00E7F6  EE20 F002          	lfsr	2,2
  9140  00E7FA  5003               	movf	check_food@foodInput,w,c
  9141  00E7FC  26D9               	addwf	fsr2l,f,c
  9142  00E7FE  5004               	movf	check_food@foodInput+1,w,c
  9143  00E800  22DA               	addwfc	fsr2h,f,c
  9144  00E802  0E02               	movlw	2
  9145  00E804  18DE               	xorwf	postinc2,w,c
  9146  00E806  10DE               	iorwf	postinc2,w,c
  9147  00E808  A4D8               	btfss	status,2,c
  9148  00E80A  D004               	goto	l252
  9149                           
  9150                           ;standbyMode.c: 170: returnValue = 18;
  9151  00E80C  0E00               	movlw	0
  9152  00E80E  6E08               	movwf	check_food@returnValue+1,c
  9153  00E810  0E12               	movlw	18
  9154  00E812  D3A4               	goto	L87
  9155  00E814                     l252:
  9156                           
  9157                           ;standbyMode.c: 172: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9158  00E814  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9159  00E818  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9160  00E81C  04DE               	decf	postinc2,w,c
  9161  00E81E  10DE               	iorwf	postinc2,w,c
  9162  00E820  A4D8               	btfss	status,2,c
  9163  00E822  D00F               	goto	l254
  9164  00E824  EE20 F002          	lfsr	2,2
  9165  00E828  5003               	movf	check_food@foodInput,w,c
  9166  00E82A  26D9               	addwf	fsr2l,f,c
  9167  00E82C  5004               	movf	check_food@foodInput+1,w,c
  9168  00E82E  22DA               	addwfc	fsr2h,f,c
  9169  00E830  0E03               	movlw	3
  9170  00E832  18DE               	xorwf	postinc2,w,c
  9171  00E834  10DE               	iorwf	postinc2,w,c
  9172  00E836  A4D8               	btfss	status,2,c
  9173  00E838  D004               	goto	l254
  9174                           
  9175                           ;standbyMode.c: 173: returnValue = 19;
  9176  00E83A  0E00               	movlw	0
  9177  00E83C  6E08               	movwf	check_food@returnValue+1,c
  9178  00E83E  0E13               	movlw	19
  9179  00E840  D38D               	goto	L87
  9180  00E842                     l254:
  9181                           
  9182                           ;standbyMode.c: 175: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9183  00E842  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9184  00E846  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9185  00E84A  0E02               	movlw	2
  9186  00E84C  18DE               	xorwf	postinc2,w,c
  9187  00E84E  10DE               	iorwf	postinc2,w,c
  9188  00E850  A4D8               	btfss	status,2,c
  9189  00E852  D00E               	goto	l256
  9190  00E854  EE20 F002          	lfsr	2,2
  9191  00E858  5003               	movf	check_food@foodInput,w,c
  9192  00E85A  26D9               	addwf	fsr2l,f,c
  9193  00E85C  5004               	movf	check_food@foodInput+1,w,c
  9194  00E85E  22DA               	addwfc	fsr2h,f,c
  9195  00E860  04DE               	decf	postinc2,w,c
  9196  00E862  10DE               	iorwf	postinc2,w,c
  9197  00E864  A4D8               	btfss	status,2,c
  9198  00E866  D004               	goto	l256
  9199                           
  9200                           ;standbyMode.c: 176: returnValue = 20;
  9201  00E868  0E00               	movlw	0
  9202  00E86A  6E08               	movwf	check_food@returnValue+1,c
  9203  00E86C  0E14               	movlw	20
  9204  00E86E  D376               	goto	L87
  9205  00E870                     l256:
  9206                           
  9207                           ;standbyMode.c: 178: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9208  00E870  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9209  00E874  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9210  00E878  0E02               	movlw	2
  9211  00E87A  18DE               	xorwf	postinc2,w,c
  9212  00E87C  10DE               	iorwf	postinc2,w,c
  9213  00E87E  A4D8               	btfss	status,2,c
  9214  00E880  D3B3               	goto	l220
  9215  00E882  EE20 F002          	lfsr	2,2
  9216  00E886  5003               	movf	check_food@foodInput,w,c
  9217  00E888  26D9               	addwf	fsr2l,f,c
  9218  00E88A  5004               	movf	check_food@foodInput+1,w,c
  9219  00E88C  22DA               	addwfc	fsr2h,f,c
  9220  00E88E  0E02               	movlw	2
  9221  00E890  18DE               	xorwf	postinc2,w,c
  9222  00E892  10DE               	iorwf	postinc2,w,c
  9223  00E894  A4D8               	btfss	status,2,c
  9224  00E896  D3A8               	goto	l220
  9225                           
  9226                           ;standbyMode.c: 179: returnValue = 21;
  9227  00E898  0E00               	movlw	0
  9228  00E89A  6E08               	movwf	check_food@returnValue+1,c
  9229  00E89C  0E15               	movlw	21
  9230  00E89E  D35E               	goto	L87
  9231  00E8A0                     
  9232                           ;standbyMode.c: 185: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9233  00E8A0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9234  00E8A4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9235  00E8A8  04DE               	decf	postinc2,w,c
  9236  00E8AA  10DE               	iorwf	postinc2,w,c
  9237  00E8AC  A4D8               	btfss	status,2,c
  9238  00E8AE  D018               	goto	l260
  9239  00E8B0  EE20 F002          	lfsr	2,2
  9240  00E8B4  5003               	movf	check_food@foodInput,w,c
  9241  00E8B6  26D9               	addwf	fsr2l,f,c
  9242  00E8B8  5004               	movf	check_food@foodInput+1,w,c
  9243  00E8BA  22DA               	addwfc	fsr2h,f,c
  9244  00E8BC  04DE               	decf	postinc2,w,c
  9245  00E8BE  10DE               	iorwf	postinc2,w,c
  9246  00E8C0  A4D8               	btfss	status,2,c
  9247  00E8C2  D00E               	goto	l260
  9248  00E8C4  EE20 F004          	lfsr	2,4
  9249  00E8C8  5003               	movf	check_food@foodInput,w,c
  9250  00E8CA  26D9               	addwf	fsr2l,f,c
  9251  00E8CC  5004               	movf	check_food@foodInput+1,w,c
  9252  00E8CE  22DA               	addwfc	fsr2h,f,c
  9253  00E8D0  04DE               	decf	postinc2,w,c
  9254  00E8D2  10DE               	iorwf	postinc2,w,c
  9255  00E8D4  A4D8               	btfss	status,2,c
  9256  00E8D6  D004               	goto	l260
  9257                           
  9258                           ;standbyMode.c: 186: returnValue = 22;
  9259  00E8D8  0E00               	movlw	0
  9260  00E8DA  6E08               	movwf	check_food@returnValue+1,c
  9261  00E8DC  0E16               	movlw	22
  9262  00E8DE  D33E               	goto	L87
  9263  00E8E0                     l260:
  9264                           
  9265                           ;standbyMode.c: 188: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9266  00E8E0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9267  00E8E4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9268  00E8E8  04DE               	decf	postinc2,w,c
  9269  00E8EA  10DE               	iorwf	postinc2,w,c
  9270  00E8EC  A4D8               	btfss	status,2,c
  9271  00E8EE  D37C               	goto	l220
  9272  00E8F0  EE20 F002          	lfsr	2,2
  9273  00E8F4  5003               	movf	check_food@foodInput,w,c
  9274  00E8F6  26D9               	addwf	fsr2l,f,c
  9275  00E8F8  5004               	movf	check_food@foodInput+1,w,c
  9276  00E8FA  22DA               	addwfc	fsr2h,f,c
  9277  00E8FC  04DE               	decf	postinc2,w,c
  9278  00E8FE  10DE               	iorwf	postinc2,w,c
  9279  00E900  A4D8               	btfss	status,2,c
  9280  00E902  D372               	goto	l220
  9281  00E904  EE20 F004          	lfsr	2,4
  9282  00E908  5003               	movf	check_food@foodInput,w,c
  9283  00E90A  26D9               	addwf	fsr2l,f,c
  9284  00E90C  5004               	movf	check_food@foodInput+1,w,c
  9285  00E90E  22DA               	addwfc	fsr2h,f,c
  9286  00E910  0E02               	movlw	2
  9287  00E912  18DE               	xorwf	postinc2,w,c
  9288  00E914  10DE               	iorwf	postinc2,w,c
  9289  00E916  A4D8               	btfss	status,2,c
  9290  00E918  D367               	goto	l220
  9291                           
  9292                           ;standbyMode.c: 189: returnValue = 23;
  9293  00E91A  0E00               	movlw	0
  9294  00E91C  6E08               	movwf	check_food@returnValue+1,c
  9295  00E91E  0E17               	movlw	23
  9296  00E920  D31D               	goto	L87
  9297  00E922                     
  9298                           ;standbyMode.c: 195: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9299  00E922  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9300  00E926  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9301  00E92A  04DE               	decf	postinc2,w,c
  9302  00E92C  10DE               	iorwf	postinc2,w,c
  9303  00E92E  A4D8               	btfss	status,2,c
  9304  00E930  D018               	goto	l264
  9305  00E932  EE20 F002          	lfsr	2,2
  9306  00E936  5003               	movf	check_food@foodInput,w,c
  9307  00E938  26D9               	addwf	fsr2l,f,c
  9308  00E93A  5004               	movf	check_food@foodInput+1,w,c
  9309  00E93C  22DA               	addwfc	fsr2h,f,c
  9310  00E93E  04DE               	decf	postinc2,w,c
  9311  00E940  10DE               	iorwf	postinc2,w,c
  9312  00E942  A4D8               	btfss	status,2,c
  9313  00E944  D00E               	goto	l264
  9314  00E946  EE20 F004          	lfsr	2,4
  9315  00E94A  5003               	movf	check_food@foodInput,w,c
  9316  00E94C  26D9               	addwf	fsr2l,f,c
  9317  00E94E  5004               	movf	check_food@foodInput+1,w,c
  9318  00E950  22DA               	addwfc	fsr2h,f,c
  9319  00E952  04DE               	decf	postinc2,w,c
  9320  00E954  10DE               	iorwf	postinc2,w,c
  9321  00E956  A4D8               	btfss	status,2,c
  9322  00E958  D004               	goto	l264
  9323                           
  9324                           ;standbyMode.c: 196: returnValue = 24;
  9325  00E95A  0E00               	movlw	0
  9326  00E95C  6E08               	movwf	check_food@returnValue+1,c
  9327  00E95E  0E18               	movlw	24
  9328  00E960  D2FD               	goto	L87
  9329  00E962                     l264:
  9330                           
  9331                           ;standbyMode.c: 198: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9332  00E962  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9333  00E966  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9334  00E96A  04DE               	decf	postinc2,w,c
  9335  00E96C  10DE               	iorwf	postinc2,w,c
  9336  00E96E  A4D8               	btfss	status,2,c
  9337  00E970  D33B               	goto	l220
  9338  00E972  EE20 F002          	lfsr	2,2
  9339  00E976  5003               	movf	check_food@foodInput,w,c
  9340  00E978  26D9               	addwf	fsr2l,f,c
  9341  00E97A  5004               	movf	check_food@foodInput+1,w,c
  9342  00E97C  22DA               	addwfc	fsr2h,f,c
  9343  00E97E  04DE               	decf	postinc2,w,c
  9344  00E980  10DE               	iorwf	postinc2,w,c
  9345  00E982  A4D8               	btfss	status,2,c
  9346  00E984  D331               	goto	l220
  9347  00E986  EE20 F004          	lfsr	2,4
  9348  00E98A  5003               	movf	check_food@foodInput,w,c
  9349  00E98C  26D9               	addwf	fsr2l,f,c
  9350  00E98E  5004               	movf	check_food@foodInput+1,w,c
  9351  00E990  22DA               	addwfc	fsr2h,f,c
  9352  00E992  0E02               	movlw	2
  9353  00E994  18DE               	xorwf	postinc2,w,c
  9354  00E996  10DE               	iorwf	postinc2,w,c
  9355  00E998  A4D8               	btfss	status,2,c
  9356  00E99A  D326               	goto	l220
  9357                           
  9358                           ;standbyMode.c: 199: returnValue = 25;
  9359  00E99C  0E00               	movlw	0
  9360  00E99E  6E08               	movwf	check_food@returnValue+1,c
  9361  00E9A0  0E19               	movlw	25
  9362  00E9A2  D2DC               	goto	L87
  9363  00E9A4                     
  9364                           ;standbyMode.c: 205: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9365  00E9A4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9366  00E9A8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9367  00E9AC  04DE               	decf	postinc2,w,c
  9368  00E9AE  10DE               	iorwf	postinc2,w,c
  9369  00E9B0  A4D8               	btfss	status,2,c
  9370  00E9B2  D018               	goto	l268
  9371  00E9B4  EE20 F002          	lfsr	2,2
  9372  00E9B8  5003               	movf	check_food@foodInput,w,c
  9373  00E9BA  26D9               	addwf	fsr2l,f,c
  9374  00E9BC  5004               	movf	check_food@foodInput+1,w,c
  9375  00E9BE  22DA               	addwfc	fsr2h,f,c
  9376  00E9C0  04DE               	decf	postinc2,w,c
  9377  00E9C2  10DE               	iorwf	postinc2,w,c
  9378  00E9C4  A4D8               	btfss	status,2,c
  9379  00E9C6  D00E               	goto	l268
  9380  00E9C8  EE20 F004          	lfsr	2,4
  9381  00E9CC  5003               	movf	check_food@foodInput,w,c
  9382  00E9CE  26D9               	addwf	fsr2l,f,c
  9383  00E9D0  5004               	movf	check_food@foodInput+1,w,c
  9384  00E9D2  22DA               	addwfc	fsr2h,f,c
  9385  00E9D4  04DE               	decf	postinc2,w,c
  9386  00E9D6  10DE               	iorwf	postinc2,w,c
  9387  00E9D8  A4D8               	btfss	status,2,c
  9388  00E9DA  D004               	goto	l268
  9389                           
  9390                           ;standbyMode.c: 206: returnValue = 26;
  9391  00E9DC  0E00               	movlw	0
  9392  00E9DE  6E08               	movwf	check_food@returnValue+1,c
  9393  00E9E0  0E1A               	movlw	26
  9394  00E9E2  D2BC               	goto	L87
  9395  00E9E4                     l268:
  9396                           
  9397                           ;standbyMode.c: 208: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9398  00E9E4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9399  00E9E8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9400  00E9EC  0E02               	movlw	2
  9401  00E9EE  18DE               	xorwf	postinc2,w,c
  9402  00E9F0  10DE               	iorwf	postinc2,w,c
  9403  00E9F2  A4D8               	btfss	status,2,c
  9404  00E9F4  D2F9               	goto	l220
  9405  00E9F6  EE20 F002          	lfsr	2,2
  9406  00E9FA  5003               	movf	check_food@foodInput,w,c
  9407  00E9FC  26D9               	addwf	fsr2l,f,c
  9408  00E9FE  5004               	movf	check_food@foodInput+1,w,c
  9409  00EA00  22DA               	addwfc	fsr2h,f,c
  9410  00EA02  04DE               	decf	postinc2,w,c
  9411  00EA04  10DE               	iorwf	postinc2,w,c
  9412  00EA06  A4D8               	btfss	status,2,c
  9413  00EA08  D2EF               	goto	l220
  9414  00EA0A  EE20 F004          	lfsr	2,4
  9415  00EA0E  5003               	movf	check_food@foodInput,w,c
  9416  00EA10  26D9               	addwf	fsr2l,f,c
  9417  00EA12  5004               	movf	check_food@foodInput+1,w,c
  9418  00EA14  22DA               	addwfc	fsr2h,f,c
  9419  00EA16  04DE               	decf	postinc2,w,c
  9420  00EA18  10DE               	iorwf	postinc2,w,c
  9421  00EA1A  A4D8               	btfss	status,2,c
  9422  00EA1C  D2E5               	goto	l220
  9423                           
  9424                           ;standbyMode.c: 209: returnValue = 27;
  9425  00EA1E  0E00               	movlw	0
  9426  00EA20  6E08               	movwf	check_food@returnValue+1,c
  9427  00EA22  0E1B               	movlw	27
  9428  00EA24  D29B               	goto	L87
  9429  00EA26                     
  9430                           ;standbyMode.c: 215: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9431  00EA26  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9432  00EA2A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9433  00EA2E  04DE               	decf	postinc2,w,c
  9434  00EA30  10DE               	iorwf	postinc2,w,c
  9435  00EA32  A4D8               	btfss	status,2,c
  9436  00EA34  D018               	goto	l272
  9437  00EA36  EE20 F002          	lfsr	2,2
  9438  00EA3A  5003               	movf	check_food@foodInput,w,c
  9439  00EA3C  26D9               	addwf	fsr2l,f,c
  9440  00EA3E  5004               	movf	check_food@foodInput+1,w,c
  9441  00EA40  22DA               	addwfc	fsr2h,f,c
  9442  00EA42  04DE               	decf	postinc2,w,c
  9443  00EA44  10DE               	iorwf	postinc2,w,c
  9444  00EA46  A4D8               	btfss	status,2,c
  9445  00EA48  D00E               	goto	l272
  9446  00EA4A  EE20 F004          	lfsr	2,4
  9447  00EA4E  5003               	movf	check_food@foodInput,w,c
  9448  00EA50  26D9               	addwf	fsr2l,f,c
  9449  00EA52  5004               	movf	check_food@foodInput+1,w,c
  9450  00EA54  22DA               	addwfc	fsr2h,f,c
  9451  00EA56  04DE               	decf	postinc2,w,c
  9452  00EA58  10DE               	iorwf	postinc2,w,c
  9453  00EA5A  A4D8               	btfss	status,2,c
  9454  00EA5C  D004               	goto	l272
  9455                           
  9456                           ;standbyMode.c: 216: returnValue = 28;
  9457  00EA5E  0E00               	movlw	0
  9458  00EA60  6E08               	movwf	check_food@returnValue+1,c
  9459  00EA62  0E1C               	movlw	28
  9460  00EA64  D27B               	goto	L87
  9461  00EA66                     l272:
  9462                           
  9463                           ;standbyMode.c: 218: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9464  00EA66  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9465  00EA6A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9466  00EA6E  04DE               	decf	postinc2,w,c
  9467  00EA70  10DE               	iorwf	postinc2,w,c
  9468  00EA72  A4D8               	btfss	status,2,c
  9469  00EA74  D019               	goto	l274
  9470  00EA76  EE20 F002          	lfsr	2,2
  9471  00EA7A  5003               	movf	check_food@foodInput,w,c
  9472  00EA7C  26D9               	addwf	fsr2l,f,c
  9473  00EA7E  5004               	movf	check_food@foodInput+1,w,c
  9474  00EA80  22DA               	addwfc	fsr2h,f,c
  9475  00EA82  04DE               	decf	postinc2,w,c
  9476  00EA84  10DE               	iorwf	postinc2,w,c
  9477  00EA86  A4D8               	btfss	status,2,c
  9478  00EA88  D00F               	goto	l274
  9479  00EA8A  EE20 F004          	lfsr	2,4
  9480  00EA8E  5003               	movf	check_food@foodInput,w,c
  9481  00EA90  26D9               	addwf	fsr2l,f,c
  9482  00EA92  5004               	movf	check_food@foodInput+1,w,c
  9483  00EA94  22DA               	addwfc	fsr2h,f,c
  9484  00EA96  0E02               	movlw	2
  9485  00EA98  18DE               	xorwf	postinc2,w,c
  9486  00EA9A  10DE               	iorwf	postinc2,w,c
  9487  00EA9C  A4D8               	btfss	status,2,c
  9488  00EA9E  D004               	goto	l274
  9489                           
  9490                           ;standbyMode.c: 219: returnValue = 29;
  9491  00EAA0  0E00               	movlw	0
  9492  00EAA2  6E08               	movwf	check_food@returnValue+1,c
  9493  00EAA4  0E1D               	movlw	29
  9494  00EAA6  D25A               	goto	L87
  9495  00EAA8                     l274:
  9496                           
  9497                           ;standbyMode.c: 221: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9498  00EAA8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9499  00EAAC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9500  00EAB0  04DE               	decf	postinc2,w,c
  9501  00EAB2  10DE               	iorwf	postinc2,w,c
  9502  00EAB4  A4D8               	btfss	status,2,c
  9503  00EAB6  D019               	goto	l276
  9504  00EAB8  EE20 F002          	lfsr	2,2
  9505  00EABC  5003               	movf	check_food@foodInput,w,c
  9506  00EABE  26D9               	addwf	fsr2l,f,c
  9507  00EAC0  5004               	movf	check_food@foodInput+1,w,c
  9508  00EAC2  22DA               	addwfc	fsr2h,f,c
  9509  00EAC4  0E02               	movlw	2
  9510  00EAC6  18DE               	xorwf	postinc2,w,c
  9511  00EAC8  10DE               	iorwf	postinc2,w,c
  9512  00EACA  A4D8               	btfss	status,2,c
  9513  00EACC  D00E               	goto	l276
  9514  00EACE  EE20 F004          	lfsr	2,4
  9515  00EAD2  5003               	movf	check_food@foodInput,w,c
  9516  00EAD4  26D9               	addwf	fsr2l,f,c
  9517  00EAD6  5004               	movf	check_food@foodInput+1,w,c
  9518  00EAD8  22DA               	addwfc	fsr2h,f,c
  9519  00EADA  04DE               	decf	postinc2,w,c
  9520  00EADC  10DE               	iorwf	postinc2,w,c
  9521  00EADE  A4D8               	btfss	status,2,c
  9522  00EAE0  D004               	goto	l276
  9523                           
  9524                           ;standbyMode.c: 222: returnValue = 30;
  9525  00EAE2  0E00               	movlw	0
  9526  00EAE4  6E08               	movwf	check_food@returnValue+1,c
  9527  00EAE6  0E1E               	movlw	30
  9528  00EAE8  D239               	goto	L87
  9529  00EAEA                     l276:
  9530                           
  9531                           ;standbyMode.c: 224: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9532  00EAEA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9533  00EAEE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9534  00EAF2  0E02               	movlw	2
  9535  00EAF4  18DE               	xorwf	postinc2,w,c
  9536  00EAF6  10DE               	iorwf	postinc2,w,c
  9537  00EAF8  A4D8               	btfss	status,2,c
  9538  00EAFA  D276               	goto	l220
  9539  00EAFC  EE20 F002          	lfsr	2,2
  9540  00EB00  5003               	movf	check_food@foodInput,w,c
  9541  00EB02  26D9               	addwf	fsr2l,f,c
  9542  00EB04  5004               	movf	check_food@foodInput+1,w,c
  9543  00EB06  22DA               	addwfc	fsr2h,f,c
  9544  00EB08  04DE               	decf	postinc2,w,c
  9545  00EB0A  10DE               	iorwf	postinc2,w,c
  9546  00EB0C  A4D8               	btfss	status,2,c
  9547  00EB0E  D26C               	goto	l220
  9548  00EB10  EE20 F004          	lfsr	2,4
  9549  00EB14  5003               	movf	check_food@foodInput,w,c
  9550  00EB16  26D9               	addwf	fsr2l,f,c
  9551  00EB18  5004               	movf	check_food@foodInput+1,w,c
  9552  00EB1A  22DA               	addwfc	fsr2h,f,c
  9553  00EB1C  04DE               	decf	postinc2,w,c
  9554  00EB1E  10DE               	iorwf	postinc2,w,c
  9555  00EB20  A4D8               	btfss	status,2,c
  9556  00EB22  D262               	goto	l220
  9557                           
  9558                           ;standbyMode.c: 225: returnValue = 31;
  9559  00EB24  0E00               	movlw	0
  9560  00EB26  6E08               	movwf	check_food@returnValue+1,c
  9561  00EB28  0E1F               	movlw	31
  9562  00EB2A  D218               	goto	L87
  9563  00EB2C                     
  9564                           ;standbyMode.c: 231: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9565  00EB2C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9566  00EB30  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9567  00EB34  04DE               	decf	postinc2,w,c
  9568  00EB36  10DE               	iorwf	postinc2,w,c
  9569  00EB38  A4D8               	btfss	status,2,c
  9570  00EB3A  D018               	goto	l280
  9571  00EB3C  EE20 F002          	lfsr	2,2
  9572  00EB40  5003               	movf	check_food@foodInput,w,c
  9573  00EB42  26D9               	addwf	fsr2l,f,c
  9574  00EB44  5004               	movf	check_food@foodInput+1,w,c
  9575  00EB46  22DA               	addwfc	fsr2h,f,c
  9576  00EB48  04DE               	decf	postinc2,w,c
  9577  00EB4A  10DE               	iorwf	postinc2,w,c
  9578  00EB4C  A4D8               	btfss	status,2,c
  9579  00EB4E  D00E               	goto	l280
  9580  00EB50  EE20 F004          	lfsr	2,4
  9581  00EB54  5003               	movf	check_food@foodInput,w,c
  9582  00EB56  26D9               	addwf	fsr2l,f,c
  9583  00EB58  5004               	movf	check_food@foodInput+1,w,c
  9584  00EB5A  22DA               	addwfc	fsr2h,f,c
  9585  00EB5C  04DE               	decf	postinc2,w,c
  9586  00EB5E  10DE               	iorwf	postinc2,w,c
  9587  00EB60  A4D8               	btfss	status,2,c
  9588  00EB62  D004               	goto	l280
  9589                           
  9590                           ;standbyMode.c: 232: returnValue = 32;
  9591  00EB64  0E00               	movlw	0
  9592  00EB66  6E08               	movwf	check_food@returnValue+1,c
  9593  00EB68  0E20               	movlw	32
  9594  00EB6A  D1F8               	goto	L87
  9595  00EB6C                     l280:
  9596                           
  9597                           ;standbyMode.c: 234: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9598  00EB6C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9599  00EB70  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9600  00EB74  04DE               	decf	postinc2,w,c
  9601  00EB76  10DE               	iorwf	postinc2,w,c
  9602  00EB78  A4D8               	btfss	status,2,c
  9603  00EB7A  D019               	goto	l282
  9604  00EB7C  EE20 F002          	lfsr	2,2
  9605  00EB80  5003               	movf	check_food@foodInput,w,c
  9606  00EB82  26D9               	addwf	fsr2l,f,c
  9607  00EB84  5004               	movf	check_food@foodInput+1,w,c
  9608  00EB86  22DA               	addwfc	fsr2h,f,c
  9609  00EB88  04DE               	decf	postinc2,w,c
  9610  00EB8A  10DE               	iorwf	postinc2,w,c
  9611  00EB8C  A4D8               	btfss	status,2,c
  9612  00EB8E  D00F               	goto	l282
  9613  00EB90  EE20 F004          	lfsr	2,4
  9614  00EB94  5003               	movf	check_food@foodInput,w,c
  9615  00EB96  26D9               	addwf	fsr2l,f,c
  9616  00EB98  5004               	movf	check_food@foodInput+1,w,c
  9617  00EB9A  22DA               	addwfc	fsr2h,f,c
  9618  00EB9C  0E02               	movlw	2
  9619  00EB9E  18DE               	xorwf	postinc2,w,c
  9620  00EBA0  10DE               	iorwf	postinc2,w,c
  9621  00EBA2  A4D8               	btfss	status,2,c
  9622  00EBA4  D004               	goto	l282
  9623                           
  9624                           ;standbyMode.c: 235: returnValue = 33;
  9625  00EBA6  0E00               	movlw	0
  9626  00EBA8  6E08               	movwf	check_food@returnValue+1,c
  9627  00EBAA  0E21               	movlw	33
  9628  00EBAC  D1D7               	goto	L87
  9629  00EBAE                     l282:
  9630                           
  9631                           ;standbyMode.c: 237: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9632  00EBAE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9633  00EBB2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9634  00EBB6  04DE               	decf	postinc2,w,c
  9635  00EBB8  10DE               	iorwf	postinc2,w,c
  9636  00EBBA  A4D8               	btfss	status,2,c
  9637  00EBBC  D019               	goto	l284
  9638  00EBBE  EE20 F002          	lfsr	2,2
  9639  00EBC2  5003               	movf	check_food@foodInput,w,c
  9640  00EBC4  26D9               	addwf	fsr2l,f,c
  9641  00EBC6  5004               	movf	check_food@foodInput+1,w,c
  9642  00EBC8  22DA               	addwfc	fsr2h,f,c
  9643  00EBCA  0E02               	movlw	2
  9644  00EBCC  18DE               	xorwf	postinc2,w,c
  9645  00EBCE  10DE               	iorwf	postinc2,w,c
  9646  00EBD0  A4D8               	btfss	status,2,c
  9647  00EBD2  D00E               	goto	l284
  9648  00EBD4  EE20 F004          	lfsr	2,4
  9649  00EBD8  5003               	movf	check_food@foodInput,w,c
  9650  00EBDA  26D9               	addwf	fsr2l,f,c
  9651  00EBDC  5004               	movf	check_food@foodInput+1,w,c
  9652  00EBDE  22DA               	addwfc	fsr2h,f,c
  9653  00EBE0  04DE               	decf	postinc2,w,c
  9654  00EBE2  10DE               	iorwf	postinc2,w,c
  9655  00EBE4  A4D8               	btfss	status,2,c
  9656  00EBE6  D004               	goto	l284
  9657                           
  9658                           ;standbyMode.c: 238: returnValue = 34;
  9659  00EBE8  0E00               	movlw	0
  9660  00EBEA  6E08               	movwf	check_food@returnValue+1,c
  9661  00EBEC  0E22               	movlw	34
  9662  00EBEE  D1B6               	goto	L87
  9663  00EBF0                     l284:
  9664                           
  9665                           ;standbyMode.c: 240: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9666  00EBF0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9667  00EBF4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9668  00EBF8  0E02               	movlw	2
  9669  00EBFA  18DE               	xorwf	postinc2,w,c
  9670  00EBFC  10DE               	iorwf	postinc2,w,c
  9671  00EBFE  A4D8               	btfss	status,2,c
  9672  00EC00  D1F3               	goto	l220
  9673  00EC02  EE20 F002          	lfsr	2,2
  9674  00EC06  5003               	movf	check_food@foodInput,w,c
  9675  00EC08  26D9               	addwf	fsr2l,f,c
  9676  00EC0A  5004               	movf	check_food@foodInput+1,w,c
  9677  00EC0C  22DA               	addwfc	fsr2h,f,c
  9678  00EC0E  04DE               	decf	postinc2,w,c
  9679  00EC10  10DE               	iorwf	postinc2,w,c
  9680  00EC12  A4D8               	btfss	status,2,c
  9681  00EC14  D1E9               	goto	l220
  9682  00EC16  EE20 F004          	lfsr	2,4
  9683  00EC1A  5003               	movf	check_food@foodInput,w,c
  9684  00EC1C  26D9               	addwf	fsr2l,f,c
  9685  00EC1E  5004               	movf	check_food@foodInput+1,w,c
  9686  00EC20  22DA               	addwfc	fsr2h,f,c
  9687  00EC22  04DE               	decf	postinc2,w,c
  9688  00EC24  10DE               	iorwf	postinc2,w,c
  9689  00EC26  A4D8               	btfss	status,2,c
  9690  00EC28  D1DF               	goto	l220
  9691                           
  9692                           ;standbyMode.c: 241: returnValue = 35;
  9693  00EC2A  0E00               	movlw	0
  9694  00EC2C  6E08               	movwf	check_food@returnValue+1,c
  9695  00EC2E  0E23               	movlw	35
  9696  00EC30  D195               	goto	L87
  9697  00EC32                     
  9698                           ;standbyMode.c: 247: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9699  00EC32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9700  00EC36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9701  00EC3A  04DE               	decf	postinc2,w,c
  9702  00EC3C  10DE               	iorwf	postinc2,w,c
  9703  00EC3E  A4D8               	btfss	status,2,c
  9704  00EC40  D018               	goto	l288
  9705  00EC42  EE20 F002          	lfsr	2,2
  9706  00EC46  5003               	movf	check_food@foodInput,w,c
  9707  00EC48  26D9               	addwf	fsr2l,f,c
  9708  00EC4A  5004               	movf	check_food@foodInput+1,w,c
  9709  00EC4C  22DA               	addwfc	fsr2h,f,c
  9710  00EC4E  04DE               	decf	postinc2,w,c
  9711  00EC50  10DE               	iorwf	postinc2,w,c
  9712  00EC52  A4D8               	btfss	status,2,c
  9713  00EC54  D00E               	goto	l288
  9714  00EC56  EE20 F004          	lfsr	2,4
  9715  00EC5A  5003               	movf	check_food@foodInput,w,c
  9716  00EC5C  26D9               	addwf	fsr2l,f,c
  9717  00EC5E  5004               	movf	check_food@foodInput+1,w,c
  9718  00EC60  22DA               	addwfc	fsr2h,f,c
  9719  00EC62  04DE               	decf	postinc2,w,c
  9720  00EC64  10DE               	iorwf	postinc2,w,c
  9721  00EC66  A4D8               	btfss	status,2,c
  9722  00EC68  D004               	goto	l288
  9723                           
  9724                           ;standbyMode.c: 248: returnValue = 36;
  9725  00EC6A  0E00               	movlw	0
  9726  00EC6C  6E08               	movwf	check_food@returnValue+1,c
  9727  00EC6E  0E24               	movlw	36
  9728  00EC70  D175               	goto	L87
  9729  00EC72                     l288:
  9730                           
  9731                           ;standbyMode.c: 250: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9732  00EC72  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9733  00EC76  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9734  00EC7A  04DE               	decf	postinc2,w,c
  9735  00EC7C  10DE               	iorwf	postinc2,w,c
  9736  00EC7E  A4D8               	btfss	status,2,c
  9737  00EC80  D1B3               	goto	l220
  9738  00EC82  EE20 F002          	lfsr	2,2
  9739  00EC86  5003               	movf	check_food@foodInput,w,c
  9740  00EC88  26D9               	addwf	fsr2l,f,c
  9741  00EC8A  5004               	movf	check_food@foodInput+1,w,c
  9742  00EC8C  22DA               	addwfc	fsr2h,f,c
  9743  00EC8E  04DE               	decf	postinc2,w,c
  9744  00EC90  10DE               	iorwf	postinc2,w,c
  9745  00EC92  A4D8               	btfss	status,2,c
  9746  00EC94  D1A9               	goto	l220
  9747  00EC96  EE20 F004          	lfsr	2,4
  9748  00EC9A  5003               	movf	check_food@foodInput,w,c
  9749  00EC9C  26D9               	addwf	fsr2l,f,c
  9750  00EC9E  5004               	movf	check_food@foodInput+1,w,c
  9751  00ECA0  22DA               	addwfc	fsr2h,f,c
  9752  00ECA2  0E02               	movlw	2
  9753  00ECA4  18DE               	xorwf	postinc2,w,c
  9754  00ECA6  10DE               	iorwf	postinc2,w,c
  9755  00ECA8  A4D8               	btfss	status,2,c
  9756  00ECAA  D19E               	goto	l220
  9757                           
  9758                           ;standbyMode.c: 251: returnValue = 37;
  9759  00ECAC  0E00               	movlw	0
  9760  00ECAE  6E08               	movwf	check_food@returnValue+1,c
  9761  00ECB0  0E25               	movlw	37
  9762  00ECB2  D154               	goto	L87
  9763  00ECB4                     
  9764                           ;standbyMode.c: 257: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9765  00ECB4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9766  00ECB8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9767  00ECBC  04DE               	decf	postinc2,w,c
  9768  00ECBE  10DE               	iorwf	postinc2,w,c
  9769  00ECC0  A4D8               	btfss	status,2,c
  9770  00ECC2  D018               	goto	l292
  9771  00ECC4  EE20 F002          	lfsr	2,2
  9772  00ECC8  5003               	movf	check_food@foodInput,w,c
  9773  00ECCA  26D9               	addwf	fsr2l,f,c
  9774  00ECCC  5004               	movf	check_food@foodInput+1,w,c
  9775  00ECCE  22DA               	addwfc	fsr2h,f,c
  9776  00ECD0  04DE               	decf	postinc2,w,c
  9777  00ECD2  10DE               	iorwf	postinc2,w,c
  9778  00ECD4  A4D8               	btfss	status,2,c
  9779  00ECD6  D00E               	goto	l292
  9780  00ECD8  EE20 F004          	lfsr	2,4
  9781  00ECDC  5003               	movf	check_food@foodInput,w,c
  9782  00ECDE  26D9               	addwf	fsr2l,f,c
  9783  00ECE0  5004               	movf	check_food@foodInput+1,w,c
  9784  00ECE2  22DA               	addwfc	fsr2h,f,c
  9785  00ECE4  04DE               	decf	postinc2,w,c
  9786  00ECE6  10DE               	iorwf	postinc2,w,c
  9787  00ECE8  A4D8               	btfss	status,2,c
  9788  00ECEA  D004               	goto	l292
  9789                           
  9790                           ;standbyMode.c: 258: returnValue = 38;
  9791  00ECEC  0E00               	movlw	0
  9792  00ECEE  6E08               	movwf	check_food@returnValue+1,c
  9793  00ECF0  0E26               	movlw	38
  9794  00ECF2  D134               	goto	L87
  9795  00ECF4                     l292:
  9796                           
  9797                           ;standbyMode.c: 260: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9798  00ECF4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9799  00ECF8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9800  00ECFC  04DE               	decf	postinc2,w,c
  9801  00ECFE  10DE               	iorwf	postinc2,w,c
  9802  00ED00  A4D8               	btfss	status,2,c
  9803  00ED02  D019               	goto	l294
  9804  00ED04  EE20 F002          	lfsr	2,2
  9805  00ED08  5003               	movf	check_food@foodInput,w,c
  9806  00ED0A  26D9               	addwf	fsr2l,f,c
  9807  00ED0C  5004               	movf	check_food@foodInput+1,w,c
  9808  00ED0E  22DA               	addwfc	fsr2h,f,c
  9809  00ED10  04DE               	decf	postinc2,w,c
  9810  00ED12  10DE               	iorwf	postinc2,w,c
  9811  00ED14  A4D8               	btfss	status,2,c
  9812  00ED16  D00F               	goto	l294
  9813  00ED18  EE20 F004          	lfsr	2,4
  9814  00ED1C  5003               	movf	check_food@foodInput,w,c
  9815  00ED1E  26D9               	addwf	fsr2l,f,c
  9816  00ED20  5004               	movf	check_food@foodInput+1,w,c
  9817  00ED22  22DA               	addwfc	fsr2h,f,c
  9818  00ED24  0E02               	movlw	2
  9819  00ED26  18DE               	xorwf	postinc2,w,c
  9820  00ED28  10DE               	iorwf	postinc2,w,c
  9821  00ED2A  A4D8               	btfss	status,2,c
  9822  00ED2C  D004               	goto	l294
  9823                           
  9824                           ;standbyMode.c: 261: returnValue = 39;
  9825  00ED2E  0E00               	movlw	0
  9826  00ED30  6E08               	movwf	check_food@returnValue+1,c
  9827  00ED32  0E27               	movlw	39
  9828  00ED34  D113               	goto	L87
  9829  00ED36                     l294:
  9830                           
  9831                           ;standbyMode.c: 263: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9832  00ED36  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9833  00ED3A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9834  00ED3E  04DE               	decf	postinc2,w,c
  9835  00ED40  10DE               	iorwf	postinc2,w,c
  9836  00ED42  A4D8               	btfss	status,2,c
  9837  00ED44  D019               	goto	l296
  9838  00ED46  EE20 F002          	lfsr	2,2
  9839  00ED4A  5003               	movf	check_food@foodInput,w,c
  9840  00ED4C  26D9               	addwf	fsr2l,f,c
  9841  00ED4E  5004               	movf	check_food@foodInput+1,w,c
  9842  00ED50  22DA               	addwfc	fsr2h,f,c
  9843  00ED52  0E02               	movlw	2
  9844  00ED54  18DE               	xorwf	postinc2,w,c
  9845  00ED56  10DE               	iorwf	postinc2,w,c
  9846  00ED58  A4D8               	btfss	status,2,c
  9847  00ED5A  D00E               	goto	l296
  9848  00ED5C  EE20 F004          	lfsr	2,4
  9849  00ED60  5003               	movf	check_food@foodInput,w,c
  9850  00ED62  26D9               	addwf	fsr2l,f,c
  9851  00ED64  5004               	movf	check_food@foodInput+1,w,c
  9852  00ED66  22DA               	addwfc	fsr2h,f,c
  9853  00ED68  04DE               	decf	postinc2,w,c
  9854  00ED6A  10DE               	iorwf	postinc2,w,c
  9855  00ED6C  A4D8               	btfss	status,2,c
  9856  00ED6E  D004               	goto	l296
  9857                           
  9858                           ;standbyMode.c: 264: returnValue = 40;
  9859  00ED70  0E00               	movlw	0
  9860  00ED72  6E08               	movwf	check_food@returnValue+1,c
  9861  00ED74  0E28               	movlw	40
  9862  00ED76  D0F2               	goto	L87
  9863  00ED78                     l296:
  9864                           
  9865                           ;standbyMode.c: 266: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9866  00ED78  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9867  00ED7C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9868  00ED80  0E02               	movlw	2
  9869  00ED82  18DE               	xorwf	postinc2,w,c
  9870  00ED84  10DE               	iorwf	postinc2,w,c
  9871  00ED86  A4D8               	btfss	status,2,c
  9872  00ED88  D12F               	goto	l220
  9873  00ED8A  EE20 F002          	lfsr	2,2
  9874  00ED8E  5003               	movf	check_food@foodInput,w,c
  9875  00ED90  26D9               	addwf	fsr2l,f,c
  9876  00ED92  5004               	movf	check_food@foodInput+1,w,c
  9877  00ED94  22DA               	addwfc	fsr2h,f,c
  9878  00ED96  04DE               	decf	postinc2,w,c
  9879  00ED98  10DE               	iorwf	postinc2,w,c
  9880  00ED9A  A4D8               	btfss	status,2,c
  9881  00ED9C  D125               	goto	l220
  9882  00ED9E  EE20 F004          	lfsr	2,4
  9883  00EDA2  5003               	movf	check_food@foodInput,w,c
  9884  00EDA4  26D9               	addwf	fsr2l,f,c
  9885  00EDA6  5004               	movf	check_food@foodInput+1,w,c
  9886  00EDA8  22DA               	addwfc	fsr2h,f,c
  9887  00EDAA  04DE               	decf	postinc2,w,c
  9888  00EDAC  10DE               	iorwf	postinc2,w,c
  9889  00EDAE  A4D8               	btfss	status,2,c
  9890  00EDB0  D11B               	goto	l220
  9891                           
  9892                           ;standbyMode.c: 267: returnValue = 41;
  9893  00EDB2  0E00               	movlw	0
  9894  00EDB4  6E08               	movwf	check_food@returnValue+1,c
  9895  00EDB6  0E29               	movlw	41
  9896  00EDB8  D0D1               	goto	L87
  9897  00EDBA                     
  9898                           ;standbyMode.c: 273: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9899  00EDBA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9900  00EDBE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9901  00EDC2  04DE               	decf	postinc2,w,c
  9902  00EDC4  10DE               	iorwf	postinc2,w,c
  9903  00EDC6  A4D8               	btfss	status,2,c
  9904  00EDC8  D10F               	goto	l220
  9905  00EDCA  EE20 F002          	lfsr	2,2
  9906  00EDCE  5003               	movf	check_food@foodInput,w,c
  9907  00EDD0  26D9               	addwf	fsr2l,f,c
  9908  00EDD2  5004               	movf	check_food@foodInput+1,w,c
  9909  00EDD4  22DA               	addwfc	fsr2h,f,c
  9910  00EDD6  04DE               	decf	postinc2,w,c
  9911  00EDD8  10DE               	iorwf	postinc2,w,c
  9912  00EDDA  A4D8               	btfss	status,2,c
  9913  00EDDC  D105               	goto	l220
  9914  00EDDE  EE20 F004          	lfsr	2,4
  9915  00EDE2  5003               	movf	check_food@foodInput,w,c
  9916  00EDE4  26D9               	addwf	fsr2l,f,c
  9917  00EDE6  5004               	movf	check_food@foodInput+1,w,c
  9918  00EDE8  22DA               	addwfc	fsr2h,f,c
  9919  00EDEA  04DE               	decf	postinc2,w,c
  9920  00EDEC  10DE               	iorwf	postinc2,w,c
  9921  00EDEE  A4D8               	btfss	status,2,c
  9922  00EDF0  D0FB               	goto	l220
  9923  00EDF2  EE20 F006          	lfsr	2,6
  9924  00EDF6  5003               	movf	check_food@foodInput,w,c
  9925  00EDF8  26D9               	addwf	fsr2l,f,c
  9926  00EDFA  5004               	movf	check_food@foodInput+1,w,c
  9927  00EDFC  22DA               	addwfc	fsr2h,f,c
  9928  00EDFE  04DE               	decf	postinc2,w,c
  9929  00EE00  10DE               	iorwf	postinc2,w,c
  9930  00EE02  A4D8               	btfss	status,2,c
  9931  00EE04  D0F1               	goto	l220
  9932                           
  9933                           ;standbyMode.c: 274: returnValue = 42;
  9934  00EE06  0E00               	movlw	0
  9935  00EE08  6E08               	movwf	check_food@returnValue+1,c
  9936  00EE0A  0E2A               	movlw	42
  9937  00EE0C  D0A7               	goto	L87
  9938  00EE0E                     
  9939                           ;standbyMode.c: 280: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9940  00EE0E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9941  00EE12  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9942  00EE16  04DE               	decf	postinc2,w,c
  9943  00EE18  10DE               	iorwf	postinc2,w,c
  9944  00EE1A  A4D8               	btfss	status,2,c
  9945  00EE1C  D0E5               	goto	l220
  9946  00EE1E  EE20 F002          	lfsr	2,2
  9947  00EE22  5003               	movf	check_food@foodInput,w,c
  9948  00EE24  26D9               	addwf	fsr2l,f,c
  9949  00EE26  5004               	movf	check_food@foodInput+1,w,c
  9950  00EE28  22DA               	addwfc	fsr2h,f,c
  9951  00EE2A  04DE               	decf	postinc2,w,c
  9952  00EE2C  10DE               	iorwf	postinc2,w,c
  9953  00EE2E  A4D8               	btfss	status,2,c
  9954  00EE30  D0DB               	goto	l220
  9955  00EE32  EE20 F004          	lfsr	2,4
  9956  00EE36  5003               	movf	check_food@foodInput,w,c
  9957  00EE38  26D9               	addwf	fsr2l,f,c
  9958  00EE3A  5004               	movf	check_food@foodInput+1,w,c
  9959  00EE3C  22DA               	addwfc	fsr2h,f,c
  9960  00EE3E  04DE               	decf	postinc2,w,c
  9961  00EE40  10DE               	iorwf	postinc2,w,c
  9962  00EE42  A4D8               	btfss	status,2,c
  9963  00EE44  D0D1               	goto	l220
  9964  00EE46  EE20 F006          	lfsr	2,6
  9965  00EE4A  5003               	movf	check_food@foodInput,w,c
  9966  00EE4C  26D9               	addwf	fsr2l,f,c
  9967  00EE4E  5004               	movf	check_food@foodInput+1,w,c
  9968  00EE50  22DA               	addwfc	fsr2h,f,c
  9969  00EE52  04DE               	decf	postinc2,w,c
  9970  00EE54  10DE               	iorwf	postinc2,w,c
  9971  00EE56  A4D8               	btfss	status,2,c
  9972  00EE58  D0C7               	goto	l220
  9973                           
  9974                           ;standbyMode.c: 281: returnValue = 43;
  9975  00EE5A  0E00               	movlw	0
  9976  00EE5C  6E08               	movwf	check_food@returnValue+1,c
  9977  00EE5E  0E2B               	movlw	43
  9978  00EE60  D07D               	goto	L87
  9979  00EE62                     
  9980                           ;standbyMode.c: 287: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  9981  00EE62  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9982  00EE66  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9983  00EE6A  04DE               	decf	postinc2,w,c
  9984  00EE6C  10DE               	iorwf	postinc2,w,c
  9985  00EE6E  A4D8               	btfss	status,2,c
  9986  00EE70  D0BB               	goto	l220
  9987  00EE72  EE20 F002          	lfsr	2,2
  9988  00EE76  5003               	movf	check_food@foodInput,w,c
  9989  00EE78  26D9               	addwf	fsr2l,f,c
  9990  00EE7A  5004               	movf	check_food@foodInput+1,w,c
  9991  00EE7C  22DA               	addwfc	fsr2h,f,c
  9992  00EE7E  04DE               	decf	postinc2,w,c
  9993  00EE80  10DE               	iorwf	postinc2,w,c
  9994  00EE82  A4D8               	btfss	status,2,c
  9995  00EE84  D0B1               	goto	l220
  9996  00EE86  EE20 F004          	lfsr	2,4
  9997  00EE8A  5003               	movf	check_food@foodInput,w,c
  9998  00EE8C  26D9               	addwf	fsr2l,f,c
  9999  00EE8E  5004               	movf	check_food@foodInput+1,w,c
 10000  00EE90  22DA               	addwfc	fsr2h,f,c
 10001  00EE92  04DE               	decf	postinc2,w,c
 10002  00EE94  10DE               	iorwf	postinc2,w,c
 10003  00EE96  A4D8               	btfss	status,2,c
 10004  00EE98  D0A7               	goto	l220
 10005  00EE9A  EE20 F006          	lfsr	2,6
 10006  00EE9E  5003               	movf	check_food@foodInput,w,c
 10007  00EEA0  26D9               	addwf	fsr2l,f,c
 10008  00EEA2  5004               	movf	check_food@foodInput+1,w,c
 10009  00EEA4  22DA               	addwfc	fsr2h,f,c
 10010  00EEA6  04DE               	decf	postinc2,w,c
 10011  00EEA8  10DE               	iorwf	postinc2,w,c
 10012  00EEAA  A4D8               	btfss	status,2,c
 10013  00EEAC  D09D               	goto	l220
 10014                           
 10015                           ;standbyMode.c: 288: returnValue = 44;
 10016  00EEAE  0E00               	movlw	0
 10017  00EEB0  6E08               	movwf	check_food@returnValue+1,c
 10018  00EEB2  0E2C               	movlw	44
 10019  00EEB4  D053               	goto	L87
 10020  00EEB6                     
 10021                           ;standbyMode.c: 294: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10022  00EEB6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10023  00EEBA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10024  00EEBE  04DE               	decf	postinc2,w,c
 10025  00EEC0  10DE               	iorwf	postinc2,w,c
 10026  00EEC2  A4D8               	btfss	status,2,c
 10027  00EEC4  D091               	goto	l220
 10028  00EEC6  EE20 F002          	lfsr	2,2
 10029  00EECA  5003               	movf	check_food@foodInput,w,c
 10030  00EECC  26D9               	addwf	fsr2l,f,c
 10031  00EECE  5004               	movf	check_food@foodInput+1,w,c
 10032  00EED0  22DA               	addwfc	fsr2h,f,c
 10033  00EED2  04DE               	decf	postinc2,w,c
 10034  00EED4  10DE               	iorwf	postinc2,w,c
 10035  00EED6  A4D8               	btfss	status,2,c
 10036  00EED8  D087               	goto	l220
 10037  00EEDA  EE20 F004          	lfsr	2,4
 10038  00EEDE  5003               	movf	check_food@foodInput,w,c
 10039  00EEE0  26D9               	addwf	fsr2l,f,c
 10040  00EEE2  5004               	movf	check_food@foodInput+1,w,c
 10041  00EEE4  22DA               	addwfc	fsr2h,f,c
 10042  00EEE6  04DE               	decf	postinc2,w,c
 10043  00EEE8  10DE               	iorwf	postinc2,w,c
 10044  00EEEA  A4D8               	btfss	status,2,c
 10045  00EEEC  D07D               	goto	l220
 10046  00EEEE  EE20 F006          	lfsr	2,6
 10047  00EEF2  5003               	movf	check_food@foodInput,w,c
 10048  00EEF4  26D9               	addwf	fsr2l,f,c
 10049  00EEF6  5004               	movf	check_food@foodInput+1,w,c
 10050  00EEF8  22DA               	addwfc	fsr2h,f,c
 10051  00EEFA  04DE               	decf	postinc2,w,c
 10052  00EEFC  10DE               	iorwf	postinc2,w,c
 10053  00EEFE  A4D8               	btfss	status,2,c
 10054  00EF00  D073               	goto	l220
 10055                           
 10056                           ;standbyMode.c: 295: returnValue = 45;
 10057  00EF02  0E00               	movlw	0
 10058  00EF04  6E08               	movwf	check_food@returnValue+1,c
 10059  00EF06  0E2D               	movlw	45
 10060  00EF08  D029               	goto	L87
 10061  00EF0A                     
 10062                           ;standbyMode.c: 301: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10063  00EF0A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10064  00EF0E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10065  00EF12  04DE               	decf	postinc2,w,c
 10066  00EF14  10DE               	iorwf	postinc2,w,c
 10067  00EF16  A4D8               	btfss	status,2,c
 10068  00EF18  D067               	goto	l220
 10069  00EF1A  EE20 F002          	lfsr	2,2
 10070  00EF1E  5003               	movf	check_food@foodInput,w,c
 10071  00EF20  26D9               	addwf	fsr2l,f,c
 10072  00EF22  5004               	movf	check_food@foodInput+1,w,c
 10073  00EF24  22DA               	addwfc	fsr2h,f,c
 10074  00EF26  04DE               	decf	postinc2,w,c
 10075  00EF28  10DE               	iorwf	postinc2,w,c
 10076  00EF2A  A4D8               	btfss	status,2,c
 10077  00EF2C  D05D               	goto	l220
 10078  00EF2E  EE20 F004          	lfsr	2,4
 10079  00EF32  5003               	movf	check_food@foodInput,w,c
 10080  00EF34  26D9               	addwf	fsr2l,f,c
 10081  00EF36  5004               	movf	check_food@foodInput+1,w,c
 10082  00EF38  22DA               	addwfc	fsr2h,f,c
 10083  00EF3A  04DE               	decf	postinc2,w,c
 10084  00EF3C  10DE               	iorwf	postinc2,w,c
 10085  00EF3E  A4D8               	btfss	status,2,c
 10086  00EF40  D053               	goto	l220
 10087  00EF42  EE20 F006          	lfsr	2,6
 10088  00EF46  5003               	movf	check_food@foodInput,w,c
 10089  00EF48  26D9               	addwf	fsr2l,f,c
 10090  00EF4A  5004               	movf	check_food@foodInput+1,w,c
 10091  00EF4C  22DA               	addwfc	fsr2h,f,c
 10092  00EF4E  04DE               	decf	postinc2,w,c
 10093  00EF50  10DE               	iorwf	postinc2,w,c
 10094  00EF52  A4D8               	btfss	status,2,c
 10095  00EF54  D049               	goto	l220
 10096                           
 10097                           ;standbyMode.c: 302: returnValue = 46;
 10098  00EF56  0E00               	movlw	0
 10099  00EF58  6E08               	movwf	check_food@returnValue+1,c
 10100  00EF5A  0E2E               	movlw	46
 10101  00EF5C                     L87:
 10102  00EF5C  6E07               	movwf	check_food@returnValue,c
 10103                           
 10104                           ;standbyMode.c: 309: }
 10105                           
 10106                           ;standbyMode.c: 308: break;
 10107                           
 10108                           ;standbyMode.c: 307: default:
 10109                           
 10110                           ;standbyMode.c: 303: }
 10111                           ;standbyMode.c: 304: break;
 10112  00EF5E  D044               	goto	l220
 10113  00EF60                     l215:
 10114  00EF60  C001  F005         	movff	check_food@sum,??_check_food
 10115  00EF64  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10116                           
 10117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10118                           ; Switch size 1, requested type "space"
 10119                           ; Number of cases is 1, Range of values is 0 to 0
 10120                           ; switch strategies available:
 10121                           ; Name         Instructions Cycles
 10122                           ; simple_byte            4     3 (average)
 10123                           ;	Chosen strategy is simple_byte
 10124  00EF68  5006               	movf	??_check_food+1,w,c
 10125  00EF6A  0A00               	xorlw	0	; case 0
 10126  00EF6C  A4D8               	btfss	status,2,c
 10127  00EF6E  D03C               	goto	l220
 10128                           
 10129                           ; Switch size 1, requested type "space"
 10130                           ; Number of cases is 18, Range of values is 3 to 43
 10131                           ; switch strategies available:
 10132                           ; Name         Instructions Cycles
 10133                           ; simple_byte           55    28 (average)
 10134                           ;	Chosen strategy is simple_byte
 10135  00EF70  5005               	movf	??_check_food,w,c
 10136  00EF72  0A03               	xorlw	3	; case 3
 10137  00EF74  B4D8               	btfsc	status,2,c
 10138  00EF76  EFA1  F072         	goto	l216
 10139  00EF7A  0A04               	xorlw	4	; case 7
 10140  00EF7C  B4D8               	btfsc	status,2,c
 10141  00EF7E  EFBD  F072         	goto	l221
 10142  00EF82  0A0D               	xorlw	13	; case 10
 10143  00EF84  B4D8               	btfsc	status,2,c
 10144  00EF86  EF03  F073         	goto	l231
 10145  00EF8A  0A06               	xorlw	6	; case 12
 10146  00EF8C  B4D8               	btfsc	status,2,c
 10147  00EF8E  EFD9  F072         	goto	l225
 10148  00EF92  0A01               	xorlw	1	; case 13
 10149  00EF94  B4D8               	btfsc	status,2,c
 10150  00EF96  D484               	goto	l259
 10151  00EF98  0A02               	xorlw	2	; case 15
 10152  00EF9A  B4D8               	btfsc	status,2,c
 10153  00EF9C  EF65  F073         	goto	l239
 10154  00EFA0  0A1E               	xorlw	30	; case 17
 10155  00EFA2  B4D8               	btfsc	status,2,c
 10156  00EFA4  D4FF               	goto	l267
 10157  00EFA6  0A03               	xorlw	3	; case 18
 10158  00EFA8  B4D8               	btfsc	status,2,c
 10159  00EFAA  D4BB               	goto	l263
 10160  00EFAC  0A01               	xorlw	1	; case 19
 10161  00EFAE  B4D8               	btfsc	status,2,c
 10162  00EFB0  D404               	goto	l249
 10163  00EFB2  0A05               	xorlw	5	; case 22
 10164  00EFB4  B4D8               	btfsc	status,2,c
 10165  00EFB6  D5BA               	goto	l279
 10166  00EFB8  0A0F               	xorlw	15	; case 25
 10167  00EFBA  B4D8               	btfsc	status,2,c
 10168  00EFBC  D6FE               	goto	l299
 10169  00EFBE  0A03               	xorlw	3	; case 26
 10170  00EFC0  B4D8               	btfsc	status,2,c
 10171  00EFC2  D637               	goto	l287
 10172  00EFC4  0A01               	xorlw	1	; case 27
 10173  00EFC6  B4D8               	btfsc	status,2,c
 10174  00EFC8  D52E               	goto	l271
 10175  00EFCA  0A06               	xorlw	6	; case 29
 10176  00EFCC  B4D8               	btfsc	status,2,c
 10177  00EFCE  D71F               	goto	l301
 10178  00EFD0  0A02               	xorlw	2	; case 31
 10179  00EFD2  B4D8               	btfsc	status,2,c
 10180  00EFD4  D66F               	goto	l291
 10181  00EFD6  0A3D               	xorlw	61	; case 34
 10182  00EFD8  B4D8               	btfsc	status,2,c
 10183  00EFDA  D743               	goto	l303
 10184  00EFDC  0A05               	xorlw	5	; case 39
 10185  00EFDE  B4D8               	btfsc	status,2,c
 10186  00EFE0  D76A               	goto	l305
 10187  00EFE2  0A0C               	xorlw	12	; case 43
 10188  00EFE4  B4D8               	btfsc	status,2,c
 10189  00EFE6  D791               	goto	l307
 10190  00EFE8                     l220:
 10191                           
 10192                           ;standbyMode.c: 310: return returnValue;
 10193  00EFE8  C007  F001         	movff	check_food@returnValue,?_check_food
 10194  00EFEC  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 10195  00EFF0  0012               	return		;funcret
 10196  00EFF2                     __end_of_check_food:
 10197                           	opt stack 0
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           postdec1	equ	0xFE5
 10207                           plusw1	equ	0xFE3
 10208                           fsr1l	equ	0xFE1
 10209                           indf2	equ	0xFDF
 10210                           postinc2	equ	0xFDE
 10211                           postdec2	equ	0xFDD
 10212                           plusw2	equ	0xFDB
 10213                           fsr2h	equ	0xFDA
 10214                           fsr2l	equ	0xFD9
 10215                           status	equ	0xFD8
 10216                           
 10217 ;; *************** function _diet_press *****************
 10218 ;; Defined at:
 10219 ;;		line 1272 in file "standbyMode.c"
 10220 ;; Parameters:    Size  Location     Type
 10221 ;;  drawer          2   40[COMRAM] unsigned int 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  keypress        1   54[COMRAM] unsigned char 
 10224 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 10225 ;;  sum             2   52[COMRAM] unsigned int 
 10226 ;;  count           2   50[COMRAM] unsigned int 
 10227 ;;  backCheck       2   48[COMRAM] unsigned int 
 10228 ;;  i               2   46[COMRAM] unsigned int 
 10229 ;;  previous        2   44[COMRAM] unsigned int 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  2   40[COMRAM] unsigned int 
 10232 ;; Registers used:
 10233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;Total ram usage:       23 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    3
 10246 ;; This function calls:
 10247 ;;		_lcdInst
 10248 ;;		_printf
 10249 ;;		_putch
 10250 ;; This function is called by:
 10251 ;;		_standbyMode
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           	psect	text16
 10256  00DA94                     __ptext16:
 10257                           	opt stack 0
 10258  00DA94                     _diet_press:
 10259                           	opt stack 26
 10260                           
 10261                           ;incstack = 0
 10262                           ;standbyMode.c: 1275: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 10263  00DA94  0E01               	movlw	1
 10264  00DA96  EC3F  F060         	call	_lcdInst
 10265  00DA9A  0EC3               	movlw	195
 10266  00DA9C  6E2B               	movwf	??_diet_press& (0+255),c
 10267  00DA9E  0ECD               	movlw	205
 10268  00DAA0                     u9907:
 10269  00DAA0  2EE8               	decfsz	wreg,f,c
 10270  00DAA2  D7FE               	bra	u9907
 10271  00DAA4  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10272  00DAA6  D7FC               	bra	u9907
 10273  00DAA8  F000               	nop	
 10274                           
 10275                           ;standbyMode.c: 1276: printf("Drawer %i diet:", drawer);
 10276  00DAAA  0EF1               	movlw	low STR_67
 10277  00DAAC  6E0D               	movwf	printf@f,c
 10278  00DAAE  0EFD               	movlw	high STR_67
 10279  00DAB0  6E0E               	movwf	printf@f+1,c
 10280  00DAB2  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10281  00DAB6  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10282  00DABA  EC51  F06B         	call	_printf	;wreg free
 10283                           
 10284                           ;standbyMode.c: 1277: lcdInst(0xC0);;
 10285  00DABE  0EC0               	movlw	192
 10286  00DAC0  EC3F  F060         	call	_lcdInst
 10287                           
 10288                           ;standbyMode.c: 1279: unsigned int count = 0;
 10289  00DAC4  0E00               	movlw	0
 10290  00DAC6  6E34               	movwf	diet_press@count+1,c
 10291  00DAC8  0E00               	movlw	0
 10292  00DACA  6E33               	movwf	diet_press@count,c
 10293                           
 10294                           ;standbyMode.c: 1280: unsigned int previous = 0;
 10295  00DACC  0E00               	movlw	0
 10296  00DACE  6E2E               	movwf	diet_press@previous+1,c
 10297  00DAD0  0E00               	movlw	0
 10298  00DAD2  6E2D               	movwf	diet_press@previous,c
 10299                           
 10300                           ;standbyMode.c: 1281: unsigned int sum = 0;
 10301  00DAD4  0E00               	movlw	0
 10302  00DAD6  6E36               	movwf	diet_press@sum+1,c
 10303  00DAD8  0E00               	movlw	0
 10304  00DADA  6E35               	movwf	diet_press@sum,c
 10305                           
 10306                           ;standbyMode.c: 1282: unsigned int i = 0;
 10307  00DADC  0E00               	movlw	0
 10308  00DADE  6E30               	movwf	diet_press@i+1,c
 10309  00DAE0  0E00               	movlw	0
 10310  00DAE2  6E2F               	movwf	diet_press@i,c
 10311                           
 10312                           ;standbyMode.c: 1283: unsigned int dietTable[4] = {0, 0, 0, 0};
 10313  00DAE4  EE20  F0BE         	lfsr	2,diet_press@F3149
 10314  00DAE8  EE10  F038         	lfsr	1,diet_press@dietTable
 10315  00DAEC  0E07               	movlw	7
 10316  00DAEE                     u7181:
 10317  00DAEE  CFDB FFE3          	movff	plusw2,plusw1
 10318  00DAF2  06E8               	decf	wreg,f,c
 10319  00DAF4  E2FC               	bc	u7181
 10320                           
 10321                           ;standbyMode.c: 1284: unsigned int backCheck = 0;
 10322  00DAF6  0E00               	movlw	0
 10323  00DAF8  6E32               	movwf	diet_press@backCheck+1,c
 10324  00DAFA  0E00               	movlw	0
 10325  00DAFC  6E31               	movwf	diet_press@backCheck,c
 10326  00DAFE                     l604:
 10327  00DAFE  A281               	btfss	3969,1,c	;volatile
 10328  00DB00  D7FE               	goto	l603
 10329                           
 10330                           ;standbyMode.c: 1288: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10331  00DB02  3881               	swapf	3969,w,c	;volatile
 10332  00DB04  0B0F               	andlw	15
 10333  00DB06  0B0F               	andlw	15
 10334  00DB08  6E37               	movwf	diet_press@keypress,c
 10335  00DB0A  B281               	btfsc	3969,1,c	;volatile
 10336  00DB0C  D7FE               	goto	l608
 10337                           
 10338                           ;standbyMode.c: 1291: if(keypress == 15){
 10339  00DB0E  0E0F               	movlw	15
 10340  00DB10  1837               	xorwf	diet_press@keypress,w,c
 10341  00DB12  B4D8               	btfsc	status,2,c
 10342  00DB14  D086               	goto	l611
 10343                           
 10344                           ;standbyMode.c: 1294: else if (keypress == 14){
 10345                           
 10346                           ;standbyMode.c: 1293: }
 10347                           
 10348                           ;standbyMode.c: 1292: break;
 10349  00DB16  0E0E               	movlw	14
 10350  00DB18  1837               	xorwf	diet_press@keypress,w,c
 10351  00DB1A  A4D8               	btfss	status,2,c
 10352  00DB1C  D005               	goto	l613
 10353                           
 10354                           ;standbyMode.c: 1295: backCheck = 1;
 10355  00DB1E  0E00               	movlw	0
 10356  00DB20  6E32               	movwf	diet_press@backCheck+1,c
 10357  00DB22  0E01               	movlw	1
 10358  00DB24  6E31               	movwf	diet_press@backCheck,c
 10359                           
 10360                           ;standbyMode.c: 1296: break;
 10361  00DB26  D07D               	goto	l611
 10362  00DB28                     l613:
 10363                           
 10364                           ;standbyMode.c: 1298: else if (keypress == 12){
 10365  00DB28  0E0C               	movlw	12
 10366  00DB2A  1837               	xorwf	diet_press@keypress,w,c
 10367  00DB2C  A4D8               	btfss	status,2,c
 10368  00DB2E  D02D               	goto	l615
 10369                           
 10370                           ;standbyMode.c: 1299: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10371  00DB30  0E01               	movlw	1
 10372  00DB32  EC3F  F060         	call	_lcdInst
 10373  00DB36  0EC3               	movlw	195
 10374  00DB38  6E2B               	movwf	??_diet_press& (0+255),c
 10375  00DB3A  0ECD               	movlw	205
 10376  00DB3C                     u9917:
 10377  00DB3C  2EE8               	decfsz	wreg,f,c
 10378  00DB3E  D7FE               	bra	u9917
 10379  00DB40  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10380  00DB42  D7FC               	bra	u9917
 10381  00DB44  F000               	nop	
 10382                           
 10383                           ;standbyMode.c: 1300: printf("Drawer %i diet:", drawer);
 10384  00DB46  0EF1               	movlw	low STR_67
 10385  00DB48  6E0D               	movwf	printf@f,c
 10386  00DB4A  0EFD               	movlw	high STR_67
 10387  00DB4C  6E0E               	movwf	printf@f+1,c
 10388  00DB4E  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10389  00DB52  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10390  00DB56  EC51  F06B         	call	_printf	;wreg free
 10391                           
 10392                           ;standbyMode.c: 1301: lcdInst(0xC0);;
 10393  00DB5A  0EC0               	movlw	192
 10394  00DB5C  EC3F  F060         	call	_lcdInst
 10395                           
 10396                           ;standbyMode.c: 1302: count = 0;
 10397  00DB60  0E00               	movlw	0
 10398  00DB62  6E34               	movwf	diet_press@count+1,c
 10399  00DB64  0E00               	movlw	0
 10400  00DB66  6E33               	movwf	diet_press@count,c
 10401                           
 10402                           ;standbyMode.c: 1303: dietTable[0] = 0;
 10403  00DB68  0E00               	movlw	0
 10404  00DB6A  6E39               	movwf	diet_press@dietTable+1,c
 10405  00DB6C  0E00               	movlw	0
 10406  00DB6E  6E38               	movwf	diet_press@dietTable,c
 10407                           
 10408                           ;standbyMode.c: 1304: dietTable[1] = 0;
 10409  00DB70  0E00               	movlw	0
 10410  00DB72  6E3B               	movwf	diet_press@dietTable+3,c
 10411  00DB74  0E00               	movlw	0
 10412  00DB76  6E3A               	movwf	diet_press@dietTable+2,c
 10413                           
 10414                           ;standbyMode.c: 1305: dietTable[2] = 0;
 10415  00DB78  0E00               	movlw	0
 10416  00DB7A  6E3D               	movwf	diet_press@dietTable+5,c
 10417  00DB7C  0E00               	movlw	0
 10418  00DB7E  6E3C               	movwf	diet_press@dietTable+4,c
 10419                           
 10420                           ;standbyMode.c: 1306: dietTable[3] = 0;
 10421  00DB80  0E00               	movlw	0
 10422  00DB82  6E3F               	movwf	diet_press@dietTable+7,c
 10423  00DB84  0E00               	movlw	0
 10424  00DB86  6E3E               	movwf	diet_press@dietTable+6,c
 10425                           
 10426                           ;standbyMode.c: 1307: }
 10427  00DB88  D7BA               	goto	l603
 10428  00DB8A                     l615:
 10429                           
 10430                           ;standbyMode.c: 1308: else if (count <= 3){
 10431  00DB8A  5034               	movf	diet_press@count+1,w,c
 10432  00DB8C  E1B8               	bnz	l604
 10433  00DB8E  0E04               	movlw	4
 10434  00DB90  5C33               	subwf	diet_press@count,w,c
 10435  00DB92  B0D8               	btfsc	status,0,c
 10436  00DB94  D7B4               	goto	l603
 10437                           
 10438                           ;standbyMode.c: 1309: if (keypress == 3 || keypress == 7){
 10439  00DB96  0E03               	movlw	3
 10440  00DB98  1837               	xorwf	diet_press@keypress,w,c
 10441  00DB9A  B4D8               	btfsc	status,2,c
 10442  00DB9C  D004               	goto	u7260
 10443  00DB9E  0E07               	movlw	7
 10444  00DBA0  1837               	xorwf	diet_press@keypress,w,c
 10445  00DBA2  A4D8               	btfss	status,2,c
 10446  00DBA4  D016               	goto	l618
 10447  00DBA6                     u7260:
 10448                           
 10449                           ;standbyMode.c: 1310: putch(input[keypress]);
 10450  00DBA6  5037               	movf	diet_press@keypress,w,c
 10451  00DBA8  0D01               	mullw	1
 10452  00DBAA  0EE8               	movlw	low _input
 10453  00DBAC  24F3               	addwf	prodl,w,c
 10454  00DBAE  6EF6               	movwf	tblptrl,c
 10455  00DBB0  0EFC               	movlw	high _input
 10456  00DBB2  20F4               	addwfc	prodh,w,c
 10457  00DBB4  6EF7               	movwf	tblptrh,c
 10458  00DBB6                     	if	1	;There are 3 active tblptr bytes
 10459  00DBB6  6AF8               	clrf	tblptru,c
 10460  00DBB8  0E00               	movlw	low (__mediumconst shr (0+16))
 10461  00DBBA  22F8               	addwfc	tblptru,f,c
 10462  00DBBC                     	endif
 10463  00DBBC  0008               	tblrd		*
 10464  00DBBE  50F5               	movf	tablat,w,c
 10465  00DBC0  EC49  F060         	call	_putch
 10466                           
 10467                           ;standbyMode.c: 1311: dietTable[count] = keypress;
 10468  00DBC4  5037               	movf	diet_press@keypress,w,c
 10469  00DBC6  6E2B               	movwf	??_diet_press& (0+255),c
 10470  00DBC8  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10471  00DBCA  D01D               	goto	L106
 10472  00DBCC                     l6532:
 10473                           
 10474                           ;standbyMode.c: 1312: count += 1;
 10475  00DBCC  4A33               	infsnz	diet_press@count,f,c
 10476  00DBCE  2A34               	incf	diet_press@count+1,f,c
 10477                           
 10478                           ;standbyMode.c: 1313: }
 10479  00DBD0  D796               	goto	l603
 10480  00DBD2                     l618:
 10481                           
 10482                           ;standbyMode.c: 1314: else if (keypress == 11){
 10483  00DBD2  0E0B               	movlw	11
 10484  00DBD4  1837               	xorwf	diet_press@keypress,w,c
 10485  00DBD6  A4D8               	btfss	status,2,c
 10486  00DBD8  D792               	goto	l603
 10487                           
 10488                           ;standbyMode.c: 1315: putch(input[keypress]);
 10489  00DBDA  5037               	movf	diet_press@keypress,w,c
 10490  00DBDC  0D01               	mullw	1
 10491  00DBDE  0EE8               	movlw	low _input
 10492  00DBE0  24F3               	addwf	prodl,w,c
 10493  00DBE2  6EF6               	movwf	tblptrl,c
 10494  00DBE4  0EFC               	movlw	high _input
 10495  00DBE6  20F4               	addwfc	prodh,w,c
 10496  00DBE8  6EF7               	movwf	tblptrh,c
 10497  00DBEA                     	if	1	;There are 3 active tblptr bytes
 10498  00DBEA  6AF8               	clrf	tblptru,c
 10499  00DBEC  0E00               	movlw	low (__mediumconst shr (0+16))
 10500  00DBEE  22F8               	addwfc	tblptru,f,c
 10501  00DBF0                     	endif
 10502  00DBF0  0008               	tblrd		*
 10503  00DBF2  50F5               	movf	tablat,w,c
 10504  00DBF4  EC49  F060         	call	_putch
 10505                           
 10506                           ;standbyMode.c: 1316: dietTable[count] = keypress + 1;
 10507  00DBF8  5037               	movf	diet_press@keypress,w,c
 10508  00DBFA  6E2B               	movwf	??_diet_press& (0+255),c
 10509  00DBFC  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10510  00DBFE  0E01               	movlw	1
 10511  00DC00  262B               	addwf	??_diet_press,f,c
 10512  00DC02  0E00               	movlw	0
 10513  00DC04  222C               	addwfc	??_diet_press+1,f,c
 10514  00DC06                     L106:
 10515  00DC06  90D8               	bcf	status,0,c
 10516  00DC08  3433               	rlcf	diet_press@count,w,c
 10517  00DC0A  6ED9               	movwf	fsr2l,c
 10518  00DC0C  3434               	rlcf	diet_press@count+1,w,c
 10519  00DC0E  6EDA               	movwf	fsr2h,c
 10520  00DC10  0E38               	movlw	low diet_press@dietTable
 10521  00DC12  26D9               	addwf	fsr2l,f,c
 10522  00DC14  0E00               	movlw	high diet_press@dietTable
 10523  00DC16  22DA               	addwfc	fsr2h,f,c
 10524  00DC18  C02B  FFDE         	movff	??_diet_press,postinc2
 10525  00DC1C  C02C  FFDD         	movff	??_diet_press+1,postdec2
 10526  00DC20  D7D5               	goto	l6532
 10527  00DC22                     l611:
 10528                           
 10529                           ;standbyMode.c: 1318: }
 10530                           ;standbyMode.c: 1319: }
 10531                           ;standbyMode.c: 1320: }
 10532                           ;standbyMode.c: 1322: if (backCheck == 1){
 10533  00DC22  0431               	decf	diet_press@backCheck,w,c
 10534  00DC24  1032               	iorwf	diet_press@backCheck+1,w,c
 10535  00DC26  A4D8               	btfss	status,2,c
 10536  00DC28  D004               	goto	l624
 10537                           
 10538                           ;standbyMode.c: 1323: sum = 100;
 10539  00DC2A  0E00               	movlw	0
 10540  00DC2C  6E36               	movwf	diet_press@sum+1,c
 10541  00DC2E  0E64               	movlw	100
 10542  00DC30  D199               	goto	L105
 10543  00DC32                     l624:
 10544                           
 10545                           ;standbyMode.c: 1327: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10546  00DC32  0E0C               	movlw	12
 10547  00DC34  1838               	xorwf	diet_press@dietTable,w,c
 10548  00DC36  1039               	iorwf	diet_press@dietTable+1,w,c
 10549  00DC38  A4D8               	btfss	status,2,c
 10550  00DC3A  D010               	goto	l626
 10551  00DC3C  503A               	movf	diet_press@dietTable+2,w,c
 10552  00DC3E  103B               	iorwf	diet_press@dietTable+3,w,c
 10553  00DC40  A4D8               	btfss	status,2,c
 10554  00DC42  D00C               	goto	l626
 10555  00DC44  503C               	movf	diet_press@dietTable+4,w,c
 10556  00DC46  103D               	iorwf	diet_press@dietTable+5,w,c
 10557  00DC48  A4D8               	btfss	status,2,c
 10558  00DC4A  D008               	goto	l626
 10559  00DC4C  503E               	movf	diet_press@dietTable+6,w,c
 10560  00DC4E  103F               	iorwf	diet_press@dietTable+7,w,c
 10561  00DC50  A4D8               	btfss	status,2,c
 10562  00DC52  D004               	goto	l626
 10563                           
 10564                           ;standbyMode.c: 1328: sum = 12;
 10565  00DC54  0E00               	movlw	0
 10566  00DC56  6E36               	movwf	diet_press@sum+1,c
 10567  00DC58  0E0C               	movlw	12
 10568  00DC5A  D184               	goto	L105
 10569  00DC5C                     l626:
 10570                           
 10571                           ;standbyMode.c: 1332: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10572  00DC5C  0E03               	movlw	3
 10573  00DC5E  1838               	xorwf	diet_press@dietTable,w,c
 10574  00DC60  1039               	iorwf	diet_press@dietTable+1,w,c
 10575  00DC62  A4D8               	btfss	status,2,c
 10576  00DC64  D010               	goto	l628
 10577  00DC66  503A               	movf	diet_press@dietTable+2,w,c
 10578  00DC68  103B               	iorwf	diet_press@dietTable+3,w,c
 10579  00DC6A  A4D8               	btfss	status,2,c
 10580  00DC6C  D00C               	goto	l628
 10581  00DC6E  503C               	movf	diet_press@dietTable+4,w,c
 10582  00DC70  103D               	iorwf	diet_press@dietTable+5,w,c
 10583  00DC72  A4D8               	btfss	status,2,c
 10584  00DC74  D008               	goto	l628
 10585  00DC76  503E               	movf	diet_press@dietTable+6,w,c
 10586  00DC78  103F               	iorwf	diet_press@dietTable+7,w,c
 10587  00DC7A  A4D8               	btfss	status,2,c
 10588  00DC7C  D004               	goto	l628
 10589                           
 10590                           ;standbyMode.c: 1333: sum = 3;
 10591  00DC7E  0E00               	movlw	0
 10592  00DC80  6E36               	movwf	diet_press@sum+1,c
 10593  00DC82  0E03               	movlw	3
 10594  00DC84  D16F               	goto	L105
 10595  00DC86                     l628:
 10596                           
 10597                           ;standbyMode.c: 1337: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10598  00DC86  0E07               	movlw	7
 10599  00DC88  1838               	xorwf	diet_press@dietTable,w,c
 10600  00DC8A  1039               	iorwf	diet_press@dietTable+1,w,c
 10601  00DC8C  A4D8               	btfss	status,2,c
 10602  00DC8E  D010               	goto	l630
 10603  00DC90  503A               	movf	diet_press@dietTable+2,w,c
 10604  00DC92  103B               	iorwf	diet_press@dietTable+3,w,c
 10605  00DC94  A4D8               	btfss	status,2,c
 10606  00DC96  D00C               	goto	l630
 10607  00DC98  503C               	movf	diet_press@dietTable+4,w,c
 10608  00DC9A  103D               	iorwf	diet_press@dietTable+5,w,c
 10609  00DC9C  A4D8               	btfss	status,2,c
 10610  00DC9E  D008               	goto	l630
 10611  00DCA0  503E               	movf	diet_press@dietTable+6,w,c
 10612  00DCA2  103F               	iorwf	diet_press@dietTable+7,w,c
 10613  00DCA4  A4D8               	btfss	status,2,c
 10614  00DCA6  D004               	goto	l630
 10615                           
 10616                           ;standbyMode.c: 1338: sum = 7;
 10617  00DCA8  0E00               	movlw	0
 10618  00DCAA  6E36               	movwf	diet_press@sum+1,c
 10619  00DCAC  0E07               	movlw	7
 10620  00DCAE  D15A               	goto	L105
 10621  00DCB0                     l630:
 10622                           
 10623                           ;standbyMode.c: 1342: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10624  00DCB0  0E03               	movlw	3
 10625  00DCB2  1838               	xorwf	diet_press@dietTable,w,c
 10626  00DCB4  1039               	iorwf	diet_press@dietTable+1,w,c
 10627  00DCB6  A4D8               	btfss	status,2,c
 10628  00DCB8  D011               	goto	l632
 10629  00DCBA  0E07               	movlw	7
 10630  00DCBC  183A               	xorwf	diet_press@dietTable+2,w,c
 10631  00DCBE  103B               	iorwf	diet_press@dietTable+3,w,c
 10632  00DCC0  A4D8               	btfss	status,2,c
 10633  00DCC2  D00C               	goto	l632
 10634  00DCC4  503C               	movf	diet_press@dietTable+4,w,c
 10635  00DCC6  103D               	iorwf	diet_press@dietTable+5,w,c
 10636  00DCC8  A4D8               	btfss	status,2,c
 10637  00DCCA  D008               	goto	l632
 10638  00DCCC  503E               	movf	diet_press@dietTable+6,w,c
 10639  00DCCE  103F               	iorwf	diet_press@dietTable+7,w,c
 10640  00DCD0  A4D8               	btfss	status,2,c
 10641  00DCD2  D004               	goto	l632
 10642                           
 10643                           ;standbyMode.c: 1343: sum = 10;
 10644  00DCD4  0E00               	movlw	0
 10645  00DCD6  6E36               	movwf	diet_press@sum+1,c
 10646  00DCD8  0E0A               	movlw	10
 10647  00DCDA  D144               	goto	L105
 10648  00DCDC                     l632:
 10649                           
 10650                           ;standbyMode.c: 1347: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10651  00DCDC  0E03               	movlw	3
 10652  00DCDE  1838               	xorwf	diet_press@dietTable,w,c
 10653  00DCE0  1039               	iorwf	diet_press@dietTable+1,w,c
 10654  00DCE2  A4D8               	btfss	status,2,c
 10655  00DCE4  D011               	goto	l634
 10656  00DCE6  0E0C               	movlw	12
 10657  00DCE8  183A               	xorwf	diet_press@dietTable+2,w,c
 10658  00DCEA  103B               	iorwf	diet_press@dietTable+3,w,c
 10659  00DCEC  A4D8               	btfss	status,2,c
 10660  00DCEE  D00C               	goto	l634
 10661  00DCF0  503C               	movf	diet_press@dietTable+4,w,c
 10662  00DCF2  103D               	iorwf	diet_press@dietTable+5,w,c
 10663  00DCF4  A4D8               	btfss	status,2,c
 10664  00DCF6  D008               	goto	l634
 10665  00DCF8  503E               	movf	diet_press@dietTable+6,w,c
 10666  00DCFA  103F               	iorwf	diet_press@dietTable+7,w,c
 10667  00DCFC  A4D8               	btfss	status,2,c
 10668  00DCFE  D004               	goto	l634
 10669                           
 10670                           ;standbyMode.c: 1348: sum = 15;
 10671  00DD00  0E00               	movlw	0
 10672  00DD02  6E36               	movwf	diet_press@sum+1,c
 10673  00DD04  0E0F               	movlw	15
 10674  00DD06  D12E               	goto	L105
 10675  00DD08                     l634:
 10676                           
 10677                           ;standbyMode.c: 1352: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10678  00DD08  0E07               	movlw	7
 10679  00DD0A  1838               	xorwf	diet_press@dietTable,w,c
 10680  00DD0C  1039               	iorwf	diet_press@dietTable+1,w,c
 10681  00DD0E  A4D8               	btfss	status,2,c
 10682  00DD10  D011               	goto	l636
 10683  00DD12  0E0C               	movlw	12
 10684  00DD14  183A               	xorwf	diet_press@dietTable+2,w,c
 10685  00DD16  103B               	iorwf	diet_press@dietTable+3,w,c
 10686  00DD18  A4D8               	btfss	status,2,c
 10687  00DD1A  D00C               	goto	l636
 10688  00DD1C  503C               	movf	diet_press@dietTable+4,w,c
 10689  00DD1E  103D               	iorwf	diet_press@dietTable+5,w,c
 10690  00DD20  A4D8               	btfss	status,2,c
 10691  00DD22  D008               	goto	l636
 10692  00DD24  503E               	movf	diet_press@dietTable+6,w,c
 10693  00DD26  103F               	iorwf	diet_press@dietTable+7,w,c
 10694  00DD28  A4D8               	btfss	status,2,c
 10695  00DD2A  D004               	goto	l636
 10696                           
 10697                           ;standbyMode.c: 1353: sum = 19;
 10698  00DD2C  0E00               	movlw	0
 10699  00DD2E  6E36               	movwf	diet_press@sum+1,c
 10700  00DD30  0E13               	movlw	19
 10701  00DD32  D118               	goto	L105
 10702  00DD34                     l636:
 10703                           
 10704                           ;standbyMode.c: 1357: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10705  00DD34  0E03               	movlw	3
 10706  00DD36  1838               	xorwf	diet_press@dietTable,w,c
 10707  00DD38  1039               	iorwf	diet_press@dietTable+1,w,c
 10708  00DD3A  A4D8               	btfss	status,2,c
 10709  00DD3C  D012               	goto	l638
 10710  00DD3E  0E03               	movlw	3
 10711  00DD40  183A               	xorwf	diet_press@dietTable+2,w,c
 10712  00DD42  103B               	iorwf	diet_press@dietTable+3,w,c
 10713  00DD44  A4D8               	btfss	status,2,c
 10714  00DD46  D00D               	goto	l638
 10715  00DD48  0E07               	movlw	7
 10716  00DD4A  183C               	xorwf	diet_press@dietTable+4,w,c
 10717  00DD4C  103D               	iorwf	diet_press@dietTable+5,w,c
 10718  00DD4E  A4D8               	btfss	status,2,c
 10719  00DD50  D008               	goto	l638
 10720  00DD52  503E               	movf	diet_press@dietTable+6,w,c
 10721  00DD54  103F               	iorwf	diet_press@dietTable+7,w,c
 10722  00DD56  A4D8               	btfss	status,2,c
 10723  00DD58  D004               	goto	l638
 10724                           
 10725                           ;standbyMode.c: 1358: sum = 13;
 10726  00DD5A  0E00               	movlw	0
 10727  00DD5C  6E36               	movwf	diet_press@sum+1,c
 10728  00DD5E  0E0D               	movlw	13
 10729  00DD60  D101               	goto	L105
 10730  00DD62                     l638:
 10731                           
 10732                           ;standbyMode.c: 1362: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10733  00DD62  0E03               	movlw	3
 10734  00DD64  1838               	xorwf	diet_press@dietTable,w,c
 10735  00DD66  1039               	iorwf	diet_press@dietTable+1,w,c
 10736  00DD68  A4D8               	btfss	status,2,c
 10737  00DD6A  D012               	goto	l640
 10738  00DD6C  0E03               	movlw	3
 10739  00DD6E  183A               	xorwf	diet_press@dietTable+2,w,c
 10740  00DD70  103B               	iorwf	diet_press@dietTable+3,w,c
 10741  00DD72  A4D8               	btfss	status,2,c
 10742  00DD74  D00D               	goto	l640
 10743  00DD76  0E0C               	movlw	12
 10744  00DD78  183C               	xorwf	diet_press@dietTable+4,w,c
 10745  00DD7A  103D               	iorwf	diet_press@dietTable+5,w,c
 10746  00DD7C  A4D8               	btfss	status,2,c
 10747  00DD7E  D008               	goto	l640
 10748  00DD80  503E               	movf	diet_press@dietTable+6,w,c
 10749  00DD82  103F               	iorwf	diet_press@dietTable+7,w,c
 10750  00DD84  A4D8               	btfss	status,2,c
 10751  00DD86  D004               	goto	l640
 10752                           
 10753                           ;standbyMode.c: 1363: sum = 18;
 10754  00DD88  0E00               	movlw	0
 10755  00DD8A  6E36               	movwf	diet_press@sum+1,c
 10756  00DD8C  0E12               	movlw	18
 10757  00DD8E  D0EA               	goto	L105
 10758  00DD90                     l640:
 10759                           
 10760                           ;standbyMode.c: 1367: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 10761  00DD90  0E03               	movlw	3
 10762  00DD92  1838               	xorwf	diet_press@dietTable,w,c
 10763  00DD94  1039               	iorwf	diet_press@dietTable+1,w,c
 10764  00DD96  A4D8               	btfss	status,2,c
 10765  00DD98  D012               	goto	l642
 10766  00DD9A  0E07               	movlw	7
 10767  00DD9C  183A               	xorwf	diet_press@dietTable+2,w,c
 10768  00DD9E  103B               	iorwf	diet_press@dietTable+3,w,c
 10769  00DDA0  A4D8               	btfss	status,2,c
 10770  00DDA2  D00D               	goto	l642
 10771  00DDA4  0E07               	movlw	7
 10772  00DDA6  183C               	xorwf	diet_press@dietTable+4,w,c
 10773  00DDA8  103D               	iorwf	diet_press@dietTable+5,w,c
 10774  00DDAA  A4D8               	btfss	status,2,c
 10775  00DDAC  D008               	goto	l642
 10776  00DDAE  503E               	movf	diet_press@dietTable+6,w,c
 10777  00DDB0  103F               	iorwf	diet_press@dietTable+7,w,c
 10778  00DDB2  A4D8               	btfss	status,2,c
 10779  00DDB4  D004               	goto	l642
 10780                           
 10781                           ;standbyMode.c: 1368: sum = 17;
 10782  00DDB6  0E00               	movlw	0
 10783  00DDB8  6E36               	movwf	diet_press@sum+1,c
 10784  00DDBA  0E11               	movlw	17
 10785  00DDBC  D0D3               	goto	L105
 10786  00DDBE                     l642:
 10787                           
 10788                           ;standbyMode.c: 1372: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10789  00DDBE  0E03               	movlw	3
 10790  00DDC0  1838               	xorwf	diet_press@dietTable,w,c
 10791  00DDC2  1039               	iorwf	diet_press@dietTable+1,w,c
 10792  00DDC4  A4D8               	btfss	status,2,c
 10793  00DDC6  D012               	goto	l644
 10794  00DDC8  0E0C               	movlw	12
 10795  00DDCA  183A               	xorwf	diet_press@dietTable+2,w,c
 10796  00DDCC  103B               	iorwf	diet_press@dietTable+3,w,c
 10797  00DDCE  A4D8               	btfss	status,2,c
 10798  00DDD0  D00D               	goto	l644
 10799  00DDD2  0E0C               	movlw	12
 10800  00DDD4  183C               	xorwf	diet_press@dietTable+4,w,c
 10801  00DDD6  103D               	iorwf	diet_press@dietTable+5,w,c
 10802  00DDD8  A4D8               	btfss	status,2,c
 10803  00DDDA  D008               	goto	l644
 10804  00DDDC  503E               	movf	diet_press@dietTable+6,w,c
 10805  00DDDE  103F               	iorwf	diet_press@dietTable+7,w,c
 10806  00DDE0  A4D8               	btfss	status,2,c
 10807  00DDE2  D004               	goto	l644
 10808                           
 10809                           ;standbyMode.c: 1373: sum = 27;
 10810  00DDE4  0E00               	movlw	0
 10811  00DDE6  6E36               	movwf	diet_press@sum+1,c
 10812  00DDE8  0E1B               	movlw	27
 10813  00DDEA  D0BC               	goto	L105
 10814  00DDEC                     l644:
 10815                           
 10816                           ;standbyMode.c: 1377: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10817  00DDEC  0E03               	movlw	3
 10818  00DDEE  1838               	xorwf	diet_press@dietTable,w,c
 10819  00DDF0  1039               	iorwf	diet_press@dietTable+1,w,c
 10820  00DDF2  A4D8               	btfss	status,2,c
 10821  00DDF4  D012               	goto	l646
 10822  00DDF6  0E07               	movlw	7
 10823  00DDF8  183A               	xorwf	diet_press@dietTable+2,w,c
 10824  00DDFA  103B               	iorwf	diet_press@dietTable+3,w,c
 10825  00DDFC  A4D8               	btfss	status,2,c
 10826  00DDFE  D00D               	goto	l646
 10827  00DE00  0E0C               	movlw	12
 10828  00DE02  183C               	xorwf	diet_press@dietTable+4,w,c
 10829  00DE04  103D               	iorwf	diet_press@dietTable+5,w,c
 10830  00DE06  A4D8               	btfss	status,2,c
 10831  00DE08  D008               	goto	l646
 10832  00DE0A  503E               	movf	diet_press@dietTable+6,w,c
 10833  00DE0C  103F               	iorwf	diet_press@dietTable+7,w,c
 10834  00DE0E  A4D8               	btfss	status,2,c
 10835  00DE10  D004               	goto	l646
 10836                           
 10837                           ;standbyMode.c: 1378: sum = 22;
 10838  00DE12  0E00               	movlw	0
 10839  00DE14  6E36               	movwf	diet_press@sum+1,c
 10840  00DE16  0E16               	movlw	22
 10841  00DE18  D0A5               	goto	L105
 10842  00DE1A                     l646:
 10843                           
 10844                           ;standbyMode.c: 1382: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 10845  00DE1A  0E07               	movlw	7
 10846  00DE1C  1838               	xorwf	diet_press@dietTable,w,c
 10847  00DE1E  1039               	iorwf	diet_press@dietTable+1,w,c
 10848  00DE20  A4D8               	btfss	status,2,c
 10849  00DE22  D012               	goto	l648
 10850  00DE24  0E07               	movlw	7
 10851  00DE26  183A               	xorwf	diet_press@dietTable+2,w,c
 10852  00DE28  103B               	iorwf	diet_press@dietTable+3,w,c
 10853  00DE2A  A4D8               	btfss	status,2,c
 10854  00DE2C  D00D               	goto	l648
 10855  00DE2E  0E0C               	movlw	12
 10856  00DE30  183C               	xorwf	diet_press@dietTable+4,w,c
 10857  00DE32  103D               	iorwf	diet_press@dietTable+5,w,c
 10858  00DE34  A4D8               	btfss	status,2,c
 10859  00DE36  D008               	goto	l648
 10860  00DE38  503E               	movf	diet_press@dietTable+6,w,c
 10861  00DE3A  103F               	iorwf	diet_press@dietTable+7,w,c
 10862  00DE3C  A4D8               	btfss	status,2,c
 10863  00DE3E  D004               	goto	l648
 10864                           
 10865                           ;standbyMode.c: 1383: sum = 26;
 10866  00DE40  0E00               	movlw	0
 10867  00DE42  6E36               	movwf	diet_press@sum+1,c
 10868  00DE44  0E1A               	movlw	26
 10869  00DE46  D08E               	goto	L105
 10870  00DE48                     l648:
 10871                           
 10872                           ;standbyMode.c: 1387: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 10873  00DE48  0E07               	movlw	7
 10874  00DE4A  1838               	xorwf	diet_press@dietTable,w,c
 10875  00DE4C  1039               	iorwf	diet_press@dietTable+1,w,c
 10876  00DE4E  A4D8               	btfss	status,2,c
 10877  00DE50  D012               	goto	l650
 10878  00DE52  0E0C               	movlw	12
 10879  00DE54  183A               	xorwf	diet_press@dietTable+2,w,c
 10880  00DE56  103B               	iorwf	diet_press@dietTable+3,w,c
 10881  00DE58  A4D8               	btfss	status,2,c
 10882  00DE5A  D00D               	goto	l650
 10883  00DE5C  0E0C               	movlw	12
 10884  00DE5E  183C               	xorwf	diet_press@dietTable+4,w,c
 10885  00DE60  103D               	iorwf	diet_press@dietTable+5,w,c
 10886  00DE62  A4D8               	btfss	status,2,c
 10887  00DE64  D008               	goto	l650
 10888  00DE66  503E               	movf	diet_press@dietTable+6,w,c
 10889  00DE68  103F               	iorwf	diet_press@dietTable+7,w,c
 10890  00DE6A  A4D8               	btfss	status,2,c
 10891  00DE6C  D004               	goto	l650
 10892                           
 10893                           ;standbyMode.c: 1388: sum = 31;
 10894  00DE6E  0E00               	movlw	0
 10895  00DE70  6E36               	movwf	diet_press@sum+1,c
 10896  00DE72  0E1F               	movlw	31
 10897  00DE74  D077               	goto	L105
 10898  00DE76                     l650:
 10899                           
 10900                           ;standbyMode.c: 1392: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10901  00DE76  0E03               	movlw	3
 10902  00DE78  1838               	xorwf	diet_press@dietTable,w,c
 10903  00DE7A  1039               	iorwf	diet_press@dietTable+1,w,c
 10904  00DE7C  A4D8               	btfss	status,2,c
 10905  00DE7E  D013               	goto	l652
 10906  00DE80  0E03               	movlw	3
 10907  00DE82  183A               	xorwf	diet_press@dietTable+2,w,c
 10908  00DE84  103B               	iorwf	diet_press@dietTable+3,w,c
 10909  00DE86  A4D8               	btfss	status,2,c
 10910  00DE88  D00E               	goto	l652
 10911  00DE8A  0E07               	movlw	7
 10912  00DE8C  183C               	xorwf	diet_press@dietTable+4,w,c
 10913  00DE8E  103D               	iorwf	diet_press@dietTable+5,w,c
 10914  00DE90  A4D8               	btfss	status,2,c
 10915  00DE92  D009               	goto	l652
 10916  00DE94  0E0C               	movlw	12
 10917  00DE96  183E               	xorwf	diet_press@dietTable+6,w,c
 10918  00DE98  103F               	iorwf	diet_press@dietTable+7,w,c
 10919  00DE9A  A4D8               	btfss	status,2,c
 10920  00DE9C  D004               	goto	l652
 10921                           
 10922                           ;standbyMode.c: 1393: sum = 25;
 10923  00DE9E  0E00               	movlw	0
 10924  00DEA0  6E36               	movwf	diet_press@sum+1,c
 10925  00DEA2  0E19               	movlw	25
 10926  00DEA4  D05F               	goto	L105
 10927  00DEA6                     l652:
 10928                           
 10929                           ;standbyMode.c: 1397: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 10930  00DEA6  0E03               	movlw	3
 10931  00DEA8  1838               	xorwf	diet_press@dietTable,w,c
 10932  00DEAA  1039               	iorwf	diet_press@dietTable+1,w,c
 10933  00DEAC  A4D8               	btfss	status,2,c
 10934  00DEAE  D013               	goto	l654
 10935  00DEB0  0E07               	movlw	7
 10936  00DEB2  183A               	xorwf	diet_press@dietTable+2,w,c
 10937  00DEB4  103B               	iorwf	diet_press@dietTable+3,w,c
 10938  00DEB6  A4D8               	btfss	status,2,c
 10939  00DEB8  D00E               	goto	l654
 10940  00DEBA  0E07               	movlw	7
 10941  00DEBC  183C               	xorwf	diet_press@dietTable+4,w,c
 10942  00DEBE  103D               	iorwf	diet_press@dietTable+5,w,c
 10943  00DEC0  A4D8               	btfss	status,2,c
 10944  00DEC2  D009               	goto	l654
 10945  00DEC4  0E0C               	movlw	12
 10946  00DEC6  183E               	xorwf	diet_press@dietTable+6,w,c
 10947  00DEC8  103F               	iorwf	diet_press@dietTable+7,w,c
 10948  00DECA  A4D8               	btfss	status,2,c
 10949  00DECC  D004               	goto	l654
 10950                           
 10951                           ;standbyMode.c: 1398: sum = 29;
 10952  00DECE  0E00               	movlw	0
 10953  00DED0  6E36               	movwf	diet_press@sum+1,c
 10954  00DED2  0E1D               	movlw	29
 10955  00DED4  D047               	goto	L105
 10956  00DED6                     l654:
 10957                           
 10958                           ;standbyMode.c: 1402: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 10959  00DED6  0E03               	movlw	3
 10960  00DED8  1838               	xorwf	diet_press@dietTable,w,c
 10961  00DEDA  1039               	iorwf	diet_press@dietTable+1,w,c
 10962  00DEDC  A4D8               	btfss	status,2,c
 10963  00DEDE  D013               	goto	l656
 10964  00DEE0  0E07               	movlw	7
 10965  00DEE2  183A               	xorwf	diet_press@dietTable+2,w,c
 10966  00DEE4  103B               	iorwf	diet_press@dietTable+3,w,c
 10967  00DEE6  A4D8               	btfss	status,2,c
 10968  00DEE8  D00E               	goto	l656
 10969  00DEEA  0E0C               	movlw	12
 10970  00DEEC  183C               	xorwf	diet_press@dietTable+4,w,c
 10971  00DEEE  103D               	iorwf	diet_press@dietTable+5,w,c
 10972  00DEF0  A4D8               	btfss	status,2,c
 10973  00DEF2  D009               	goto	l656
 10974  00DEF4  0E0C               	movlw	12
 10975  00DEF6  183E               	xorwf	diet_press@dietTable+6,w,c
 10976  00DEF8  103F               	iorwf	diet_press@dietTable+7,w,c
 10977  00DEFA  A4D8               	btfss	status,2,c
 10978  00DEFC  D004               	goto	l656
 10979                           
 10980                           ;standbyMode.c: 1403: sum = 34;
 10981  00DEFE  0E00               	movlw	0
 10982  00DF00  6E36               	movwf	diet_press@sum+1,c
 10983  00DF02  0E22               	movlw	34
 10984  00DF04  D02F               	goto	L105
 10985  00DF06                     l656:
 10986                           
 10987                           ;standbyMode.c: 1407: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 10988  00DF06  0E03               	movlw	3
 10989  00DF08  1838               	xorwf	diet_press@dietTable,w,c
 10990  00DF0A  1039               	iorwf	diet_press@dietTable+1,w,c
 10991  00DF0C  A4D8               	btfss	status,2,c
 10992  00DF0E  D013               	goto	l658
 10993  00DF10  0E0C               	movlw	12
 10994  00DF12  183A               	xorwf	diet_press@dietTable+2,w,c
 10995  00DF14  103B               	iorwf	diet_press@dietTable+3,w,c
 10996  00DF16  A4D8               	btfss	status,2,c
 10997  00DF18  D00E               	goto	l658
 10998  00DF1A  0E0C               	movlw	12
 10999  00DF1C  183C               	xorwf	diet_press@dietTable+4,w,c
 11000  00DF1E  103D               	iorwf	diet_press@dietTable+5,w,c
 11001  00DF20  A4D8               	btfss	status,2,c
 11002  00DF22  D009               	goto	l658
 11003  00DF24  0E0C               	movlw	12
 11004  00DF26  183E               	xorwf	diet_press@dietTable+6,w,c
 11005  00DF28  103F               	iorwf	diet_press@dietTable+7,w,c
 11006  00DF2A  A4D8               	btfss	status,2,c
 11007  00DF2C  D004               	goto	l658
 11008                           
 11009                           ;standbyMode.c: 1408: sum = 39;
 11010  00DF2E  0E00               	movlw	0
 11011  00DF30  6E36               	movwf	diet_press@sum+1,c
 11012  00DF32  0E27               	movlw	39
 11013  00DF34  D017               	goto	L105
 11014  00DF36                     l658:
 11015                           
 11016                           ;standbyMode.c: 1412: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11017  00DF36  0E07               	movlw	7
 11018  00DF38  1838               	xorwf	diet_press@dietTable,w,c
 11019  00DF3A  1039               	iorwf	diet_press@dietTable+1,w,c
 11020  00DF3C  A4D8               	btfss	status,2,c
 11021  00DF3E  D014               	goto	l660
 11022  00DF40  0E0C               	movlw	12
 11023  00DF42  183A               	xorwf	diet_press@dietTable+2,w,c
 11024  00DF44  103B               	iorwf	diet_press@dietTable+3,w,c
 11025  00DF46  A4D8               	btfss	status,2,c
 11026  00DF48  D00F               	goto	l660
 11027  00DF4A  0E0C               	movlw	12
 11028  00DF4C  183C               	xorwf	diet_press@dietTable+4,w,c
 11029  00DF4E  103D               	iorwf	diet_press@dietTable+5,w,c
 11030  00DF50  A4D8               	btfss	status,2,c
 11031  00DF52  D00A               	goto	l660
 11032  00DF54  0E0C               	movlw	12
 11033  00DF56  183E               	xorwf	diet_press@dietTable+6,w,c
 11034  00DF58  103F               	iorwf	diet_press@dietTable+7,w,c
 11035  00DF5A  A4D8               	btfss	status,2,c
 11036  00DF5C  D005               	goto	l660
 11037                           
 11038                           ;standbyMode.c: 1413: sum = 43;
 11039  00DF5E  0E00               	movlw	0
 11040  00DF60  6E36               	movwf	diet_press@sum+1,c
 11041  00DF62  0E2B               	movlw	43
 11042  00DF64                     L105:
 11043  00DF64  6E35               	movwf	diet_press@sum,c
 11044                           
 11045                           ;standbyMode.c: 1414: }
 11046  00DF66  D02A               	goto	l661
 11047  00DF68                     l660:
 11048                           
 11049                           ;standbyMode.c: 1417: else{
 11050                           ;standbyMode.c: 1418: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11051  00DF68  0E01               	movlw	1
 11052  00DF6A  EC3F  F060         	call	_lcdInst
 11053  00DF6E  0EC3               	movlw	195
 11054  00DF70  6E2B               	movwf	??_diet_press& (0+255),c
 11055  00DF72  0ECD               	movlw	205
 11056  00DF74                     u9927:
 11057  00DF74  2EE8               	decfsz	wreg,f,c
 11058  00DF76  D7FE               	bra	u9927
 11059  00DF78  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11060  00DF7A  D7FC               	bra	u9927
 11061  00DF7C  F000               	nop	
 11062                           
 11063                           ;standbyMode.c: 1419: printf("Invalid diet!");
 11064  00DF7E  0EC7               	movlw	low STR_69
 11065  00DF80  6E0D               	movwf	printf@f,c
 11066  00DF82  0EFE               	movlw	high STR_69
 11067  00DF84  6E0E               	movwf	printf@f+1,c
 11068  00DF86  EC51  F06B         	call	_printf	;wreg free
 11069                           
 11070                           ;standbyMode.c: 1420: lcdInst(0xC0);;
 11071  00DF8A  0EC0               	movlw	192
 11072  00DF8C  EC3F  F060         	call	_lcdInst
 11073                           
 11074                           ;standbyMode.c: 1421: printf("Try again.");
 11075  00DF90  0E46               	movlw	low STR_66
 11076  00DF92  6E0D               	movwf	printf@f,c
 11077  00DF94  0EFF               	movlw	high STR_66
 11078  00DF96  6E0E               	movwf	printf@f+1,c
 11079  00DF98  EC51  F06B         	call	_printf	;wreg free
 11080                           
 11081                           ;standbyMode.c: 1422: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11082  00DF9C  0E33               	movlw	51
 11083  00DF9E  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11084  00DFA0  0EBB               	movlw	187
 11085  00DFA2  6E2B               	movwf	??_diet_press& (0+255),c
 11086  00DFA4  0EE0               	movlw	224
 11087  00DFA6                     u9937:
 11088  00DFA6  2EE8               	decfsz	wreg,f,c
 11089  00DFA8  D7FE               	bra	u9937
 11090  00DFAA  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11091  00DFAC  D7FC               	bra	u9937
 11092  00DFAE  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11093  00DFB0  D7FA               	bra	u9937
 11094                           
 11095                           ;standbyMode.c: 1423: sum = 0;
 11096  00DFB2  0E00               	movlw	0
 11097  00DFB4  6E36               	movwf	diet_press@sum+1,c
 11098  00DFB6  0E00               	movlw	0
 11099  00DFB8  6E35               	movwf	diet_press@sum,c
 11100                           
 11101                           ;standbyMode.c: 1424: goto START;
 11102  00DFBA  D56C               	goto	_diet_press
 11103  00DFBC                     l661:
 11104                           
 11105                           ;standbyMode.c: 1425: }
 11106                           ;standbyMode.c: 1426: return sum;
 11107  00DFBC  C035  F029         	movff	diet_press@sum,?_diet_press
 11108  00DFC0  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11109  00DFC4  0012               	return		;funcret
 11110  00DFC6                     __end_of_diet_press:
 11111                           	opt stack 0
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           postdec1	equ	0xFE5
 11121                           plusw1	equ	0xFE3
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           postdec2	equ	0xFDD
 11126                           plusw2	equ	0xFDB
 11127                           fsr2h	equ	0xFDA
 11128                           fsr2l	equ	0xFD9
 11129                           status	equ	0xFD8
 11130                           
 11131 ;; *************** function _printf *****************
 11132 ;; Defined at:
 11133 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11136 ;;		 -> STR_102(11), STR_101(13), STR_100(11), STR_99(13), 
 11137 ;;		 -> STR_98(11), STR_97(8), STR_96(15), STR_95(16), 
 11138 ;;		 -> STR_94(10), STR_93(8), STR_92(15), STR_91(16), 
 11139 ;;		 -> STR_90(10), STR_89(16), STR_88(16), STR_87(17), 
 11140 ;;		 -> STR_86(13), STR_85(17), STR_84(14), STR_83(11), 
 11141 ;;		 -> STR_82(11), STR_81(15), STR_80(15), STR_79(10), 
 11142 ;;		 -> STR_78(13), STR_77(16), STR_76(16), STR_75(17), 
 11143 ;;		 -> STR_74(17), STR_73(8), STR_72(15), STR_71(15), 
 11144 ;;		 -> STR_70(11), STR_69(14), STR_68(16), STR_67(16), 
 11145 ;;		 -> STR_66(11), STR_65(14), STR_64(16), STR_63(16), 
 11146 ;;		 -> STR_62(16), STR_61(13), STR_60(5), STR_59(11), 
 11147 ;;		 -> STR_58(15), STR_57(17), STR_56(18), STR_55(15), 
 11148 ;;		 -> STR_54(11), STR_53(7), STR_52(3), STR_51(16), 
 11149 ;;		 -> STR_50(8), STR_49(16), STR_48(15), STR_47(6), 
 11150 ;;		 -> STR_46(14), STR_45(17), STR_44(7), STR_43(9), 
 11151 ;;		 -> STR_42(17), STR_41(11), STR_40(17), STR_39(14), 
 11152 ;;		 -> STR_38(17), STR_37(11), STR_36(15), STR_35(11), 
 11153 ;;		 -> STR_34(8), STR_2(16), STR_1(8), 
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  idx             1   26[COMRAM] unsigned char 
 11156 ;;  tmpval          4    0        struct .
 11157 ;;  width           2   37[COMRAM] int 
 11158 ;;  val             2   34[COMRAM] unsigned int 
 11159 ;;  len             2   32[COMRAM] unsigned int 
 11160 ;;  ap              2   30[COMRAM] PTR void [1]
 11161 ;;		 -> ?_printf(2), 
 11162 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 11163 ;;		 -> STR_103(7), STR_33(5), STR_32(4), STR_31(4), 
 11164 ;;		 -> STR_30(4), STR_29(4), STR_28(3), STR_27(3), 
 11165 ;;		 -> STR_26(3), STR_25(3), STR_24(3), STR_23(2), 
 11166 ;;		 -> STR_22(2), STR_21(2), STR_20(5), STR_19(5), 
 11167 ;;		 -> STR_18(5), STR_17(5), STR_16(5), STR_15(4), 
 11168 ;;		 -> STR_14(4), STR_13(4), STR_12(4), STR_11(4), 
 11169 ;;		 -> STR_10(4), STR_9(4), STR_8(3), STR_7(3), 
 11170 ;;		 -> STR_6(3), STR_5(2), STR_4(2), STR_3(2), 
 11171 ;;  c               1   39[COMRAM] char 
 11172 ;;  flag            1   36[COMRAM] unsigned char 
 11173 ;;  prec            1   27[COMRAM] char 
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  2   12[COMRAM] int 
 11176 ;; Registers used:
 11177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11183 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;Total ram usage:       28 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; Hardware stack levels required when called:    2
 11190 ;; This function calls:
 11191 ;;		___lwdiv
 11192 ;;		___lwmod
 11193 ;;		___wmul
 11194 ;;		_isdigit
 11195 ;;		_putch
 11196 ;; This function is called by:
 11197 ;;		_main
 11198 ;;		_viewLogs
 11199 ;;		_displayLogs
 11200 ;;		_food_press
 11201 ;;		_diet_press
 11202 ;;		_which_drawer
 11203 ;;		_standbyMode
 11204 ;; This function uses a non-reentrant model
 11205 ;;
 11206                           
 11207                           	psect	text17
 11208  00D6A2                     __ptext17:
 11209                           	opt stack 0
 11210  00D6A2                     _printf:
 11211                           	opt stack 26
 11212                           
 11213                           ;doprnt.c: 466: va_list ap;
 11214                           ;doprnt.c: 499: signed char c;
 11215                           ;doprnt.c: 501: int width;
 11216                           ;doprnt.c: 506: signed char prec;
 11217                           ;doprnt.c: 508: unsigned char flag;
 11218                           ;doprnt.c: 523: union {
 11219                           ;doprnt.c: 524: unsigned long vd;
 11220                           ;doprnt.c: 525: double integ;
 11221                           ;doprnt.c: 526: } tmpval;
 11222                           ;doprnt.c: 528: unsigned int val;
 11223                           ;doprnt.c: 529: unsigned len;
 11224                           ;doprnt.c: 530: const char * cp;
 11225                           ;doprnt.c: 533: *ap = __va_start();
 11226                           
 11227                           ;incstack = 0
 11228  00D6A2  0E0F               	movlw	low (?_printf+2)
 11229  00D6A4  6E1F               	movwf	printf@ap,c
 11230  00D6A6  0E00               	movlw	high (?_printf+2)
 11231  00D6A8  6E20               	movwf	printf@ap+1,c
 11232                           
 11233                           ;doprnt.c: 536: while(c = *f++) {
 11234  00D6AA  D1E6               	goto	u4970
 11235  00D6AC                     
 11236                           ;doprnt.c: 538: if(c != '%')
 11237  00D6AC  0E25               	movlw	37
 11238  00D6AE  1828               	xorwf	printf@c,w,c
 11239  00D6B0  B4D8               	btfsc	status,2,c
 11240  00D6B2  D004               	goto	l1060
 11241                           
 11242                           ;doprnt.c: 540: {
 11243                           ;doprnt.c: 541: (putch(c) );
 11244  00D6B4  5028               	movf	printf@c,w,c
 11245  00D6B6  EC49  F060         	call	_putch
 11246                           
 11247                           ;doprnt.c: 542: continue;
 11248  00D6BA  D1DE               	goto	u4970
 11249  00D6BC                     l1060:
 11250                           
 11251                           ;doprnt.c: 543: }
 11252                           ;doprnt.c: 546: width = 0;
 11253  00D6BC  0E00               	movlw	0
 11254  00D6BE  6E27               	movwf	printf@width+1,c
 11255  00D6C0  0E00               	movlw	0
 11256  00D6C2  6E26               	movwf	printf@width,c
 11257                           
 11258                           ;doprnt.c: 548: flag = 0;
 11259  00D6C4  0E00               	movlw	0
 11260  00D6C6  6E25               	movwf	printf@flag,c
 11261                           
 11262                           ;doprnt.c: 551: switch(*f) {
 11263                           
 11264                           ;doprnt.c: 550: for(;;) {
 11265  00D6C8  D003               	goto	l1062
 11266  00D6CA                     
 11267                           ;doprnt.c: 580: flag |= 0x04;
 11268  00D6CA  8425               	bsf	printf@flag,2,c
 11269                           
 11270                           ;doprnt.c: 581: f++;
 11271  00D6CC  4A0D               	infsnz	printf@f,f,c
 11272  00D6CE  2A0E               	incf	printf@f+1,f,c
 11273  00D6D0                     l1062:
 11274  00D6D0  C00D  FFF6         	movff	printf@f,tblptrl
 11275  00D6D4  C00E  FFF7         	movff	printf@f+1,tblptrh
 11276  00D6D8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11277  00D6D8  6AF8               	clrf	tblptru,c
 11278  00D6DA                     	endif
 11279  00D6DA                     	if	0	;tblptru may be non-zero
 11280  00D6DA                     	endif
 11281  00D6DA  0008               	tblrd		*
 11282  00D6DC  50F5               	movf	tablat,w,c
 11283                           
 11284                           ; Switch size 1, requested type "space"
 11285                           ; Number of cases is 1, Range of values is 48 to 48
 11286                           ; switch strategies available:
 11287                           ; Name         Instructions Cycles
 11288                           ; simple_byte            4     3 (average)
 11289                           ;	Chosen strategy is simple_byte
 11290  00D6DE  0A30               	xorlw	48	; case 48
 11291  00D6E0  B4D8               	btfsc	status,2,c
 11292  00D6E2  D7F3               	goto	l1063
 11293                           
 11294                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11295                           
 11296                           ;doprnt.c: 586: }
 11297                           
 11298                           ;doprnt.c: 585: break;
 11299  00D6E4  C00D  FFF6         	movff	printf@f,tblptrl
 11300  00D6E8  C00E  FFF7         	movff	printf@f+1,tblptrh
 11301  00D6EC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11302  00D6EC  6AF8               	clrf	tblptru,c
 11303  00D6EE                     	endif
 11304  00D6EE                     	if	0	;tblptru may be non-zero
 11305  00D6EE                     	endif
 11306  00D6EE  0008               	tblrd		*
 11307  00D6F0  50F5               	movf	tablat,w,c
 11308  00D6F2  EC68  F060         	call	_isdigit
 11309  00D6F6  A0D8               	btfss	status,0,c
 11310  00D6F8  D092               	goto	l1070
 11311                           
 11312                           ;doprnt.c: 598: width = 0;
 11313  00D6FA  0E00               	movlw	0
 11314  00D6FC  6E27               	movwf	printf@width+1,c
 11315  00D6FE  0E00               	movlw	0
 11316  00D700  6E26               	movwf	printf@width,c
 11317  00D702                     
 11318                           ;doprnt.c: 600: width *= 10;
 11319  00D702  C026  F001         	movff	printf@width,___wmul@multiplier
 11320  00D706  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 11321  00D70A  0E00               	movlw	0
 11322  00D70C  6E04               	movwf	___wmul@multiplicand+1,c
 11323  00D70E  0E0A               	movlw	10
 11324  00D710  6E03               	movwf	___wmul@multiplicand,c
 11325  00D712  EC9C  F060         	call	___wmul	;wreg free
 11326  00D716  C001  F026         	movff	?___wmul,printf@width
 11327  00D71A  C002  F027         	movff	?___wmul+1,printf@width+1
 11328                           
 11329                           ;doprnt.c: 601: width += *f++ - '0';
 11330  00D71E  0ED0               	movlw	208
 11331  00D720  6E17               	movwf	??_printf& (0+255),c
 11332  00D722  0EFF               	movlw	255
 11333  00D724  6E18               	movwf	(??_printf+1)& (0+255),c
 11334  00D726  C00D  FFF6         	movff	printf@f,tblptrl
 11335  00D72A  C00E  FFF7         	movff	printf@f+1,tblptrh
 11336  00D72E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11337  00D72E  6AF8               	clrf	tblptru,c
 11338  00D730                     	endif
 11339  00D730                     	if	0	;tblptru may be non-zero
 11340  00D730                     	endif
 11341  00D730  0008               	tblrd		*
 11342  00D732  50F5               	movf	tablat,w,c
 11343  00D734  6E19               	movwf	(??_printf+2)& (0+255),c
 11344  00D736  6A1A               	clrf	(??_printf+3)& (0+255),c
 11345  00D738  5017               	movf	??_printf,w,c
 11346  00D73A  2619               	addwf	??_printf+2,f,c
 11347  00D73C  5018               	movf	??_printf+1,w,c
 11348  00D73E  221A               	addwfc	??_printf+3,f,c
 11349  00D740  5019               	movf	??_printf+2,w,c
 11350  00D742  2626               	addwf	printf@width,f,c
 11351  00D744  501A               	movf	??_printf+3,w,c
 11352  00D746  2227               	addwfc	printf@width+1,f,c
 11353  00D748  4A0D               	infsnz	printf@f,f,c
 11354  00D74A  2A0E               	incf	printf@f+1,f,c
 11355                           
 11356                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11357  00D74C  C00D  FFF6         	movff	printf@f,tblptrl
 11358  00D750  C00E  FFF7         	movff	printf@f+1,tblptrh
 11359  00D754                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11360  00D754  6AF8               	clrf	tblptru,c
 11361  00D756                     	endif
 11362  00D756                     	if	0	;tblptru may be non-zero
 11363  00D756                     	endif
 11364  00D756  0008               	tblrd		*
 11365  00D758  50F5               	movf	tablat,w,c
 11366  00D75A  EC68  F060         	call	_isdigit
 11367  00D75E  A0D8               	btfss	status,0,c
 11368  00D760  D05E               	goto	l1070
 11369  00D762  D7CF               	goto	l1068
 11370  00D764                     
 11371                           ;doprnt.c: 721: flag |= 0x80;
 11372  00D764  8E25               	bsf	printf@flag,7,c
 11373                           
 11374                           ;doprnt.c: 723: break;
 11375  00D766  D076               	goto	l1075
 11376  00D768                     
 11377                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11378  00D768  C01F  FFD9         	movff	printf@ap,fsr2l
 11379  00D76C  C020  FFDA         	movff	printf@ap+1,fsr2h
 11380  00D770  CFDE F01D          	movff	postinc2,printf@cp
 11381  00D774  CFDD F01E          	movff	postdec2,printf@cp+1
 11382  00D778  0E02               	movlw	2
 11383  00D77A  261F               	addwf	printf@ap,f,c
 11384  00D77C  0E00               	movlw	0
 11385  00D77E  2220               	addwfc	printf@ap+1,f,c
 11386                           
 11387                           ;doprnt.c: 740: if(!cp)
 11388  00D780  501D               	movf	printf@cp,w,c
 11389  00D782  101E               	iorwf	printf@cp+1,w,c
 11390  00D784  A4D8               	btfss	status,2,c
 11391  00D786  D004               	goto	l1078
 11392                           
 11393                           ;doprnt.c: 741: cp = "(null)";
 11394  00D788  0EA4               	movlw	low STR_103
 11395  00D78A  6E1D               	movwf	printf@cp,c
 11396  00D78C  0EFF               	movlw	high STR_103
 11397  00D78E  6E1E               	movwf	printf@cp+1,c
 11398  00D790                     l1078:
 11399                           
 11400                           ;doprnt.c: 745: len = 0;
 11401  00D790  0E00               	movlw	0
 11402  00D792  6E22               	movwf	printf@len+1,c
 11403  00D794  0E00               	movlw	0
 11404  00D796  6E21               	movwf	printf@len,c
 11405                           
 11406                           ;doprnt.c: 746: while(cp[len])
 11407  00D798  D002               	goto	l1079
 11408  00D79A                     
 11409                           ;doprnt.c: 747: len++;
 11410  00D79A  4A21               	infsnz	printf@len,f,c
 11411  00D79C  2A22               	incf	printf@len+1,f,c
 11412  00D79E                     l1079:
 11413  00D79E  5021               	movf	printf@len,w,c
 11414  00D7A0  241D               	addwf	printf@cp,w,c
 11415  00D7A2  6E17               	movwf	??_printf& (0+255),c
 11416  00D7A4  5022               	movf	printf@len+1,w,c
 11417  00D7A6  201E               	addwfc	printf@cp+1,w,c
 11418  00D7A8  6E18               	movwf	(??_printf+1)& (0+255),c
 11419  00D7AA  C017  FFF6         	movff	??_printf,tblptrl
 11420  00D7AE  C018  FFF7         	movff	??_printf+1,tblptrh
 11421  00D7B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11422  00D7B2  6AF8               	clrf	tblptru,c
 11423  00D7B4                     	endif
 11424  00D7B4                     	if	0	;tblptru may be non-zero
 11425  00D7B4                     	endif
 11426  00D7B4  0008               	tblrd		*
 11427  00D7B6  50F5               	movf	tablat,w,c
 11428  00D7B8  0900               	iorlw	0
 11429  00D7BA  A4D8               	btfss	status,2,c
 11430  00D7BC  D7EE               	goto	l1080
 11431                           
 11432                           ;doprnt.c: 757: if(width > len)
 11433  00D7BE  5026               	movf	printf@width,w,c
 11434  00D7C0  5C21               	subwf	printf@len,w,c
 11435  00D7C2  5027               	movf	printf@width+1,w,c
 11436  00D7C4  5822               	subwfb	printf@len+1,w,c
 11437  00D7C6  B0D8               	btfsc	status,0,c
 11438  00D7C8  D005               	goto	l1082
 11439                           
 11440                           ;doprnt.c: 758: width -= len;
 11441  00D7CA  5021               	movf	printf@len,w,c
 11442  00D7CC  5E26               	subwf	printf@width,f,c
 11443  00D7CE  5022               	movf	printf@len+1,w,c
 11444  00D7D0  5A27               	subwfb	printf@width+1,f,c
 11445  00D7D2  D008               	goto	l1084
 11446  00D7D4                     l1082:
 11447                           
 11448                           ;doprnt.c: 759: else
 11449                           ;doprnt.c: 760: width = 0;
 11450  00D7D4  0E00               	movlw	0
 11451  00D7D6  6E27               	movwf	printf@width+1,c
 11452  00D7D8  0E00               	movlw	0
 11453  00D7DA  6E26               	movwf	printf@width,c
 11454                           
 11455                           ;doprnt.c: 764: while(width--)
 11456  00D7DC  D003               	goto	l1084
 11457  00D7DE                     l5042:
 11458                           
 11459                           ;doprnt.c: 765: (putch(' ') );
 11460  00D7DE  0E20               	movlw	32
 11461  00D7E0  EC49  F060         	call	_putch
 11462  00D7E4                     l1084:
 11463  00D7E4  0626               	decf	printf@width,f,c
 11464  00D7E6  A0D8               	btfss	status,0,c
 11465  00D7E8  0627               	decf	printf@width+1,f,c
 11466  00D7EA  2826               	incf	printf@width,w,c
 11467  00D7EC  E1F8               	bnz	l5042
 11468  00D7EE  2827               	incf	printf@width+1,w,c
 11469  00D7F0  B4D8               	btfsc	status,2,c
 11470  00D7F2  D00C               	goto	l1087
 11471  00D7F4  D7F4               	goto	l1085
 11472  00D7F6                     l5046:
 11473                           
 11474                           ;doprnt.c: 768: (putch(*cp++) );
 11475  00D7F6  C01D  FFF6         	movff	printf@cp,tblptrl
 11476  00D7FA  C01E  FFF7         	movff	printf@cp+1,tblptrh
 11477  00D7FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11478  00D7FE  6AF8               	clrf	tblptru,c
 11479  00D800                     	endif
 11480  00D800                     	if	0	;tblptru may be non-zero
 11481  00D800                     	endif
 11482  00D800  0008               	tblrd		*
 11483  00D802  50F5               	movf	tablat,w,c
 11484  00D804  EC49  F060         	call	_putch
 11485  00D808  4A1D               	infsnz	printf@cp,f,c
 11486  00D80A  2A1E               	incf	printf@cp+1,f,c
 11487  00D80C                     l1087:
 11488  00D80C  0621               	decf	printf@len,f,c
 11489  00D80E  A0D8               	btfss	status,0,c
 11490  00D810  0622               	decf	printf@len+1,f,c
 11491  00D812  2821               	incf	printf@len,w,c
 11492  00D814  E1F0               	bnz	l5046
 11493  00D816  2822               	incf	printf@len+1,w,c
 11494  00D818  B4D8               	btfsc	status,2,c
 11495  00D81A  D12E               	goto	u4970
 11496  00D81C  D7EC               	goto	l1088
 11497  00D81E                     l1070:
 11498  00D81E  C00D  FFF6         	movff	printf@f,tblptrl
 11499  00D822  C00E  FFF7         	movff	printf@f+1,tblptrh
 11500  00D826  4A0D               	infsnz	printf@f,f,c
 11501  00D828  2A0E               	incf	printf@f+1,f,c
 11502  00D82A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11503  00D82A  6AF8               	clrf	tblptru,c
 11504  00D82C                     	endif
 11505  00D82C                     	if	0	;tblptru may be non-zero
 11506  00D82C                     	endif
 11507  00D82C  0008               	tblrd		*
 11508  00D82E  CFF5 F028          	movff	tablat,printf@c
 11509  00D832  5028               	movf	printf@c,w,c
 11510                           
 11511                           ; Switch size 1, requested type "space"
 11512                           ; Number of cases is 5, Range of values is 0 to 120
 11513                           ; switch strategies available:
 11514                           ; Name         Instructions Cycles
 11515                           ; simple_byte           16     9 (average)
 11516                           ;	Chosen strategy is simple_byte
 11517  00D834  0A00               	xorlw	0	; case 0
 11518  00D836  B4D8               	btfsc	status,2,c
 11519  00D838  0012               	return	
 11520  00D83A  0A64               	xorlw	100	; case 100
 11521  00D83C  B4D8               	btfsc	status,2,c
 11522  00D83E  D00A               	goto	l1075
 11523  00D840  0A0D               	xorlw	13	; case 105
 11524  00D842  B4D8               	btfsc	status,2,c
 11525  00D844  D007               	goto	l1075
 11526  00D846  0A1A               	xorlw	26	; case 115
 11527  00D848  B4D8               	btfsc	status,2,c
 11528  00D84A  D78E               	goto	l1077
 11529  00D84C  0A0B               	xorlw	11	; case 120
 11530  00D84E  B4D8               	btfsc	status,2,c
 11531  00D850  D789               	goto	l1076
 11532  00D852  D112               	goto	u4970
 11533  00D854                     l1075:
 11534                           
 11535                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11536  00D854  BE25               	btfsc	printf@flag,7,c
 11537  00D856  D015               	goto	l1091
 11538                           
 11539                           ;doprnt.c: 1253: {
 11540                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11541  00D858  C01F  FFD9         	movff	printf@ap,fsr2l
 11542  00D85C  C020  FFDA         	movff	printf@ap+1,fsr2h
 11543  00D860  CFDE F023          	movff	postinc2,printf@val
 11544  00D864  CFDD F024          	movff	postdec2,printf@val+1
 11545  00D868  0E02               	movlw	2
 11546  00D86A  261F               	addwf	printf@ap,f,c
 11547  00D86C  0E00               	movlw	0
 11548  00D86E  2220               	addwfc	printf@ap+1,f,c
 11549                           
 11550                           ;doprnt.c: 1261: if((int)val < 0) {
 11551  00D870  AE24               	btfss	printf@val+1,7,c
 11552  00D872  D04A               	goto	l1094
 11553                           
 11554                           ;doprnt.c: 1262: flag |= 0x03;
 11555  00D874  0E03               	movlw	3
 11556  00D876  1225               	iorwf	printf@flag,f,c
 11557                           
 11558                           ;doprnt.c: 1263: val = -val;
 11559  00D878  6C23               	negf	printf@val,c
 11560  00D87A  1E24               	comf	printf@val+1,f,c
 11561  00D87C  B0D8               	btfsc	status,0,c
 11562  00D87E  2A24               	incf	printf@val+1,f,c
 11563                           
 11564                           ;doprnt.c: 1264: }
 11565                           ;doprnt.c: 1266: }
 11566  00D880  D043               	goto	l1094
 11567  00D882                     l1091:
 11568                           
 11569                           ;doprnt.c: 1268: else
 11570                           ;doprnt.c: 1273: {
 11571                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11572  00D882  C01F  FFD9         	movff	printf@ap,fsr2l
 11573  00D886  C020  FFDA         	movff	printf@ap+1,fsr2h
 11574  00D88A  CFDE F023          	movff	postinc2,printf@val
 11575  00D88E  CFDD F024          	movff	postdec2,printf@val+1
 11576  00D892  0E02               	movlw	2
 11577  00D894  261F               	addwf	printf@ap,f,c
 11578  00D896  0E00               	movlw	0
 11579  00D898  2220               	addwfc	printf@ap+1,f,c
 11580                           
 11581                           ;doprnt.c: 1287: }
 11582                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11583  00D89A  D036               	goto	l1094
 11584  00D89C                     
 11585                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11586  00D89C  0E01               	movlw	1
 11587  00D89E  6E28               	movwf	printf@c,c
 11588  00D8A0                     l5072:
 11589  00D8A0  0E05               	movlw	5
 11590  00D8A2  1828               	xorwf	printf@c,w,c
 11591  00D8A4  B4D8               	btfsc	status,2,c
 11592  00D8A6  D038               	goto	l1099
 11593                           
 11594                           ;doprnt.c: 1306: if(val < dpowers[c])
 11595  00D8A8  5028               	movf	printf@c,w,c
 11596  00D8AA  0D02               	mullw	2
 11597  00D8AC  0EF9               	movlw	low _dpowers
 11598  00D8AE  24F3               	addwf	prodl,w,c
 11599  00D8B0  6EF6               	movwf	tblptrl,c
 11600  00D8B2  0EFC               	movlw	high _dpowers
 11601  00D8B4  20F4               	addwfc	prodh,w,c
 11602  00D8B6  6EF7               	movwf	tblptrh,c
 11603  00D8B8                     	if	1	;There are 3 active tblptr bytes
 11604  00D8B8  6AF8               	clrf	tblptru,c
 11605  00D8BA  0E00               	movlw	low (__mediumconst shr (0+16))
 11606  00D8BC  22F8               	addwfc	tblptru,f,c
 11607  00D8BE                     	endif
 11608  00D8BE  0009               	tblrd		*+
 11609  00D8C0  50F5               	movf	tablat,w,c
 11610  00D8C2  5C23               	subwf	printf@val,w,c
 11611  00D8C4  0009               	tblrd		*+
 11612  00D8C6  50F5               	movf	tablat,w,c
 11613  00D8C8  5824               	subwfb	printf@val+1,w,c
 11614  00D8CA  A0D8               	btfss	status,0,c
 11615  00D8CC  D025               	goto	l1099
 11616                           
 11617                           ;doprnt.c: 1307: break;
 11618  00D8CE  2A28               	incf	printf@c,f,c
 11619  00D8D0  D7E7               	goto	l5072
 11620  00D8D2                     
 11621                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11622  00D8D2  0E01               	movlw	1
 11623  00D8D4  6E28               	movwf	printf@c,c
 11624  00D8D6                     l5086:
 11625  00D8D6  0E04               	movlw	4
 11626  00D8D8  1828               	xorwf	printf@c,w,c
 11627  00D8DA  B4D8               	btfsc	status,2,c
 11628  00D8DC  D01D               	goto	l1099
 11629                           
 11630                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11631  00D8DE  5028               	movf	printf@c,w,c
 11632  00D8E0  0D02               	mullw	2
 11633  00D8E2  0E03               	movlw	low _hexpowers
 11634  00D8E4  24F3               	addwf	prodl,w,c
 11635  00D8E6  6EF6               	movwf	tblptrl,c
 11636  00D8E8  0EFD               	movlw	high _hexpowers
 11637  00D8EA  20F4               	addwfc	prodh,w,c
 11638  00D8EC  6EF7               	movwf	tblptrh,c
 11639  00D8EE                     	if	1	;There are 3 active tblptr bytes
 11640  00D8EE  6AF8               	clrf	tblptru,c
 11641  00D8F0  0E00               	movlw	low (__mediumconst shr (0+16))
 11642  00D8F2  22F8               	addwfc	tblptru,f,c
 11643  00D8F4                     	endif
 11644  00D8F4  0009               	tblrd		*+
 11645  00D8F6  50F5               	movf	tablat,w,c
 11646  00D8F8  5C23               	subwf	printf@val,w,c
 11647  00D8FA  0009               	tblrd		*+
 11648  00D8FC  50F5               	movf	tablat,w,c
 11649  00D8FE  5824               	subwfb	printf@val+1,w,c
 11650  00D900  A0D8               	btfss	status,0,c
 11651  00D902  D00A               	goto	l1099
 11652                           
 11653                           ;doprnt.c: 1318: break;
 11654  00D904  2A28               	incf	printf@c,f,c
 11655  00D906  D7E7               	goto	l5086
 11656  00D908                     l1094:
 11657  00D908  5025               	movf	printf@flag,w,c
 11658  00D90A  0B80               	andlw	128
 11659                           
 11660                           ; Switch size 1, requested type "space"
 11661                           ; Number of cases is 2, Range of values is 0 to 128
 11662                           ; switch strategies available:
 11663                           ; Name         Instructions Cycles
 11664                           ; simple_byte            7     4 (average)
 11665                           ;	Chosen strategy is simple_byte
 11666  00D90C  0A00               	xorlw	0	; case 0
 11667  00D90E  B4D8               	btfsc	status,2,c
 11668  00D910  D7C5               	goto	l1095
 11669  00D912  0A80               	xorlw	128	; case 128
 11670  00D914  B4D8               	btfsc	status,2,c
 11671  00D916  D7DD               	goto	l1100
 11672  00D918                     l1099:
 11673                           
 11674                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11675  00D918  5026               	movf	printf@width,w,c
 11676  00D91A  1027               	iorwf	printf@width+1,w,c
 11677  00D91C  B4D8               	btfsc	status,2,c
 11678  00D91E  D009               	goto	l1104
 11679  00D920  C025  F017         	movff	printf@flag,??_printf
 11680  00D924  0E03               	movlw	3
 11681  00D926  1617               	andwf	??_printf,f,c
 11682  00D928  B4D8               	btfsc	status,2,c
 11683  00D92A  D003               	goto	l1104
 11684                           
 11685                           ;doprnt.c: 1346: width--;
 11686  00D92C  0626               	decf	printf@width,f,c
 11687  00D92E  A0D8               	btfss	status,0,c
 11688  00D930  0627               	decf	printf@width+1,f,c
 11689  00D932                     l1104:
 11690                           
 11691                           ;doprnt.c: 1381: if(width > c)
 11692  00D932  0E80               	movlw	128
 11693  00D934  BE28               	btfsc	printf@c,7,c
 11694  00D936  0E7F               	movlw	127
 11695  00D938  6E17               	movwf	??_printf& (0+255),c
 11696  00D93A  5026               	movf	printf@width,w,c
 11697  00D93C  5C28               	subwf	printf@c,w,c
 11698  00D93E  5027               	movf	printf@width+1,w,c
 11699  00D940  0A80               	xorlw	128
 11700  00D942  5817               	subwfb	??_printf& (0+255),w,c
 11701  00D944  B0D8               	btfsc	status,0,c
 11702  00D946  D007               	goto	l1105
 11703                           
 11704                           ;doprnt.c: 1382: width -= c;
 11705  00D948  5028               	movf	printf@c,w,c
 11706  00D94A  5E26               	subwf	printf@width,f,c
 11707  00D94C  0E00               	movlw	0
 11708  00D94E  BE28               	btfsc	printf@c,7,c
 11709  00D950  0EFF               	movlw	255
 11710  00D952  5A27               	subwfb	printf@width+1,f,c
 11711  00D954  D004               	goto	l1106
 11712  00D956                     l1105:
 11713                           
 11714                           ;doprnt.c: 1383: else
 11715                           ;doprnt.c: 1384: width = 0;
 11716  00D956  0E00               	movlw	0
 11717  00D958  6E27               	movwf	printf@width+1,c
 11718  00D95A  0E00               	movlw	0
 11719  00D95C  6E26               	movwf	printf@width,c
 11720  00D95E                     l1106:
 11721                           
 11722                           ;doprnt.c: 1387: if(flag & 0x04) {
 11723  00D95E  A425               	btfss	printf@flag,2,c
 11724  00D960  D014               	goto	l1107
 11725                           
 11726                           ;doprnt.c: 1392: if(flag & 0x03)
 11727  00D962  C025  F017         	movff	printf@flag,??_printf
 11728  00D966  0E03               	movlw	3
 11729  00D968  1617               	andwf	??_printf,f,c
 11730  00D96A  B4D8               	btfsc	status,2,c
 11731  00D96C  D003               	goto	l1108
 11732                           
 11733                           ;doprnt.c: 1393: (putch('-') );
 11734  00D96E  0E2D               	movlw	45
 11735  00D970  EC49  F060         	call	_putch
 11736  00D974                     l1108:
 11737                           
 11738                           ;doprnt.c: 1415: if(width)
 11739  00D974  5026               	movf	printf@width,w,c
 11740  00D976  1027               	iorwf	printf@width+1,w,c
 11741  00D978  B4D8               	btfsc	status,2,c
 11742  00D97A  D01E               	goto	l1116
 11743                           
 11744                           ;doprnt.c: 1417: (putch('0') );
 11745                           
 11746                           ;doprnt.c: 1416: do
 11747  00D97C  0E30               	movlw	48
 11748  00D97E  EC49  F060         	call	_putch
 11749                           
 11750                           ;doprnt.c: 1418: while(--width);
 11751  00D982  0626               	decf	printf@width,f,c
 11752  00D984  A0D8               	btfss	status,0,c
 11753  00D986  0627               	decf	printf@width+1,f,c
 11754  00D988  D7F5               	goto	l1108
 11755  00D98A                     l1107:
 11756                           
 11757                           ;doprnt.c: 1422: {
 11758                           ;doprnt.c: 1424: if(width
 11759                           ;doprnt.c: 1428: )
 11760  00D98A  5026               	movf	printf@width,w,c
 11761  00D98C  1027               	iorwf	printf@width+1,w,c
 11762  00D98E  B4D8               	btfsc	status,2,c
 11763  00D990  D00A               	goto	u4950
 11764  00D992                     u4940:
 11765                           
 11766                           ;doprnt.c: 1430: (putch(' ') );
 11767                           
 11768                           ;doprnt.c: 1429: do
 11769  00D992  0E20               	movlw	32
 11770  00D994  EC49  F060         	call	_putch
 11771                           
 11772                           ;doprnt.c: 1431: while(--width);
 11773  00D998  0626               	decf	printf@width,f,c
 11774  00D99A  A0D8               	btfss	status,0,c
 11775  00D99C  0627               	decf	printf@width+1,f,c
 11776  00D99E  5026               	movf	printf@width,w,c
 11777  00D9A0  1027               	iorwf	printf@width+1,w,c
 11778  00D9A2  A4D8               	btfss	status,2,c
 11779  00D9A4  D7F6               	goto	u4940
 11780  00D9A6                     u4950:
 11781                           
 11782                           ;doprnt.c: 1438: if(flag & 0x03)
 11783  00D9A6  C025  F017         	movff	printf@flag,??_printf
 11784  00D9AA  0E03               	movlw	3
 11785  00D9AC  1617               	andwf	??_printf,f,c
 11786  00D9AE  B4D8               	btfsc	status,2,c
 11787  00D9B0  D003               	goto	l1116
 11788                           
 11789                           ;doprnt.c: 1439: (putch('-') );
 11790  00D9B2  0E2D               	movlw	45
 11791  00D9B4  EC49  F060         	call	_putch
 11792  00D9B8                     l1116:
 11793                           
 11794                           ;doprnt.c: 1469: }
 11795                           ;doprnt.c: 1472: prec = c;
 11796  00D9B8  C028  F01C         	movff	printf@c,printf@prec
 11797                           
 11798                           ;doprnt.c: 1474: while(prec--) {
 11799  00D9BC  D059               	goto	l1117
 11800  00D9BE                     
 11801                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11802  00D9BE  501C               	movf	printf@prec,w,c
 11803  00D9C0  0D02               	mullw	2
 11804  00D9C2  0EF9               	movlw	low _dpowers
 11805  00D9C4  24F3               	addwf	prodl,w,c
 11806  00D9C6  6EF6               	movwf	tblptrl,c
 11807  00D9C8  0EFC               	movlw	high _dpowers
 11808  00D9CA  20F4               	addwfc	prodh,w,c
 11809  00D9CC  6EF7               	movwf	tblptrh,c
 11810  00D9CE                     	if	1	;There are 3 active tblptr bytes
 11811  00D9CE  6AF8               	clrf	tblptru,c
 11812  00D9D0  0E00               	movlw	low (__mediumconst shr (0+16))
 11813  00D9D2  22F8               	addwfc	tblptru,f,c
 11814  00D9D4                     	endif
 11815  00D9D4  0009               	tblrd		*+
 11816  00D9D6  CFF5 F003          	movff	tablat,___lwdiv@divisor
 11817  00D9DA  000A               	tblrd		*-
 11818  00D9DC  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 11819  00D9E0  C023  F001         	movff	printf@val,___lwdiv@dividend
 11820  00D9E4  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 11821  00D9E8  EC2A  F061         	call	___lwdiv	;wreg free
 11822  00D9EC  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 11823  00D9F0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 11824  00D9F4  0E00               	movlw	0
 11825  00D9F6  6E0B               	movwf	___lwmod@divisor+1,c
 11826  00D9F8  0E0A               	movlw	10
 11827  00D9FA  6E0A               	movwf	___lwmod@divisor,c
 11828  00D9FC  ECE3  F060         	call	___lwmod	;wreg free
 11829  00DA00  5008               	movf	?___lwmod,w,c
 11830  00DA02  0F30               	addlw	48
 11831  00DA04  6E28               	movwf	printf@c,c
 11832                           
 11833                           ;doprnt.c: 1491: break;
 11834  00DA06  D031               	goto	l1121
 11835  00DA08                     
 11836                           ;doprnt.c: 1499: {
 11837                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11838  00DA08  C023  F001         	movff	printf@val,___lwdiv@dividend
 11839  00DA0C  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 11840  00DA10  501C               	movf	printf@prec,w,c
 11841  00DA12  0D02               	mullw	2
 11842  00DA14  0E03               	movlw	low _hexpowers
 11843  00DA16  24F3               	addwf	prodl,w,c
 11844  00DA18  6EF6               	movwf	tblptrl,c
 11845  00DA1A  0EFD               	movlw	high _hexpowers
 11846  00DA1C  20F4               	addwfc	prodh,w,c
 11847  00DA1E  6EF7               	movwf	tblptrh,c
 11848  00DA20                     	if	1	;There are 3 active tblptr bytes
 11849  00DA20  6AF8               	clrf	tblptru,c
 11850  00DA22  0E00               	movlw	low (__mediumconst shr (0+16))
 11851  00DA24  22F8               	addwfc	tblptru,f,c
 11852  00DA26                     	endif
 11853  00DA26  0009               	tblrd		*+
 11854  00DA28  CFF5 F003          	movff	tablat,___lwdiv@divisor
 11855  00DA2C  000A               	tblrd		*-
 11856  00DA2E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 11857  00DA32  EC2A  F061         	call	___lwdiv	;wreg free
 11858  00DA36  5001               	movf	?___lwdiv,w,c
 11859  00DA38  0B0F               	andlw	15
 11860  00DA3A  6E1B               	movwf	printf@idx,c
 11861                           
 11862                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11863  00DA3C  501B               	movf	printf@idx,w,c
 11864  00DA3E  0D01               	mullw	1
 11865  00DA40  0E2A               	movlw	low STR_104
 11866  00DA42  24F3               	addwf	prodl,w,c
 11867  00DA44  6EF6               	movwf	tblptrl,c
 11868  00DA46  0EFD               	movlw	high STR_104
 11869  00DA48  20F4               	addwfc	prodh,w,c
 11870  00DA4A  6EF7               	movwf	tblptrh,c
 11871  00DA4C                     	if	1	;There are 3 active tblptr bytes
 11872  00DA4C  6AF8               	clrf	tblptru,c
 11873  00DA4E  0E00               	movlw	low (__mediumconst shr (0+16))
 11874  00DA50  22F8               	addwfc	tblptru,f,c
 11875  00DA52                     	endif
 11876  00DA52  0008               	tblrd		*
 11877  00DA54  CFF5 F028          	movff	tablat,printf@c
 11878                           
 11879                           ;doprnt.c: 1523: }
 11880                           
 11881                           ;doprnt.c: 1508: }
 11882                           ;doprnt.c: 1510: break;
 11883  00DA58  D008               	goto	l1121
 11884  00DA5A  5025               	movf	printf@flag,w,c
 11885  00DA5C  0B80               	andlw	128
 11886                           
 11887                           ; Switch size 1, requested type "space"
 11888                           ; Number of cases is 2, Range of values is 0 to 128
 11889                           ; switch strategies available:
 11890                           ; Name         Instructions Cycles
 11891                           ; simple_byte            7     4 (average)
 11892                           ;	Chosen strategy is simple_byte
 11893  00DA5E  0A00               	xorlw	0	; case 0
 11894  00DA60  B4D8               	btfsc	status,2,c
 11895  00DA62  D7AD               	goto	l1120
 11896  00DA64  0A80               	xorlw	128	; case 128
 11897  00DA66  B4D8               	btfsc	status,2,c
 11898  00DA68  D7CF               	goto	l1122
 11899  00DA6A                     l1121:
 11900                           
 11901                           ;doprnt.c: 1524: (putch(c) );
 11902  00DA6A  5028               	movf	printf@c,w,c
 11903  00DA6C  EC49  F060         	call	_putch
 11904  00DA70                     l1117:
 11905  00DA70  061C               	decf	printf@prec,f,c
 11906  00DA72  281C               	incf	printf@prec,w,c
 11907  00DA74  A4D8               	btfss	status,2,c
 11908  00DA76  D7F1               	goto	l1119
 11909  00DA78                     u4970:
 11910  00DA78  C00D  FFF6         	movff	printf@f,tblptrl
 11911  00DA7C  C00E  FFF7         	movff	printf@f+1,tblptrh
 11912  00DA80  4A0D               	infsnz	printf@f,f,c
 11913  00DA82  2A0E               	incf	printf@f+1,f,c
 11914  00DA84                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11915  00DA84  6AF8               	clrf	tblptru,c
 11916  00DA86                     	endif
 11917  00DA86                     	if	0	;tblptru may be non-zero
 11918  00DA86                     	endif
 11919  00DA86  0008               	tblrd		*
 11920  00DA88  CFF5 F028          	movff	tablat,printf@c
 11921  00DA8C  5028               	movf	printf@c,w,c
 11922  00DA8E  B4D8               	btfsc	status,2,c
 11923  00DA90  0012               	return	
 11924  00DA92  D60C               	goto	l1059
 11925  00DA94                     __end_of_printf:
 11926                           	opt stack 0
 11927                           tblptru	equ	0xFF8
 11928                           tblptrh	equ	0xFF7
 11929                           tblptrl	equ	0xFF6
 11930                           tablat	equ	0xFF5
 11931                           prodh	equ	0xFF4
 11932                           prodl	equ	0xFF3
 11933                           postinc0	equ	0xFEE
 11934                           wreg	equ	0xFE8
 11935                           postdec1	equ	0xFE5
 11936                           plusw1	equ	0xFE3
 11937                           fsr1l	equ	0xFE1
 11938                           indf2	equ	0xFDF
 11939                           postinc2	equ	0xFDE
 11940                           postdec2	equ	0xFDD
 11941                           plusw2	equ	0xFDB
 11942                           fsr2h	equ	0xFDA
 11943                           fsr2l	equ	0xFD9
 11944                           status	equ	0xFD8
 11945                           
 11946 ;; *************** function _putch *****************
 11947 ;; Defined at:
 11948 ;;		line 78 in file "standbyMode.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;  data            1    wreg     unsigned char 
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;  data            1    2[COMRAM] unsigned char 
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  1    wreg      void 
 11955 ;; Registers used:
 11956 ;;		wreg, status,2, status,0, cstack
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;Total ram usage:        1 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    1
 11969 ;; This function calls:
 11970 ;;		_lcdNibble
 11971 ;; This function is called by:
 11972 ;;		_viewLogs
 11973 ;;		_food_press
 11974 ;;		_diet_press
 11975 ;;		_which_drawer
 11976 ;;		_printf
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           	psect	text18
 11981  00C092                     __ptext18:
 11982                           	opt stack 0
 11983  00C092                     _putch:
 11984                           	opt stack 27
 11985                           
 11986                           ;incstack = 0
 11987                           ;putch@data stored from wreg
 11988  00C092  6E03               	movwf	putch@data,c
 11989                           
 11990                           ;standbyMode.c: 86: LATDbits.LATD2 = 1;
 11991  00C094  848C               	bsf	3980,2,c	;volatile
 11992                           
 11993                           ;standbyMode.c: 87: lcdNibble(data);
 11994  00C096  5003               	movf	putch@data,w,c
 11995  00C098  ECDF  F061         	call	_lcdNibble
 11996                           
 11997                           ;standbyMode.c: 88: _delay((unsigned long)((100)*(40000000/4000000.0)));
 11998  00C09C  0EC8               	movlw	200
 11999  00C09E                     u9947:
 12000  00C09E  D000               	nop2	
 12001  00C0A0  2EE8               	decfsz	wreg,f,c
 12002  00C0A2  D7FD               	bra	u9947
 12003  00C0A4  0012               	return		;funcret
 12004  00C0A6                     __end_of_putch:
 12005                           	opt stack 0
 12006                           tblptru	equ	0xFF8
 12007                           tblptrh	equ	0xFF7
 12008                           tblptrl	equ	0xFF6
 12009                           tablat	equ	0xFF5
 12010                           prodh	equ	0xFF4
 12011                           prodl	equ	0xFF3
 12012                           postinc0	equ	0xFEE
 12013                           wreg	equ	0xFE8
 12014                           postdec1	equ	0xFE5
 12015                           plusw1	equ	0xFE3
 12016                           fsr1l	equ	0xFE1
 12017                           indf2	equ	0xFDF
 12018                           postinc2	equ	0xFDE
 12019                           postdec2	equ	0xFDD
 12020                           plusw2	equ	0xFDB
 12021                           fsr2h	equ	0xFDA
 12022                           fsr2l	equ	0xFD9
 12023                           status	equ	0xFD8
 12024                           
 12025 ;; *************** function _isdigit *****************
 12026 ;; Defined at:
 12027 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 12028 ;; Parameters:    Size  Location     Type
 12029 ;;  c               1    wreg     unsigned char 
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;  c               1    2[COMRAM] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;		None               void
 12034 ;; Registers used:
 12035 ;;		wreg, status,2, status,0
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12044 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;Total ram usage:        3 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; This function calls:
 12048 ;;		Nothing
 12049 ;; This function is called by:
 12050 ;;		_printf
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           	psect	text19
 12055  00C0D0                     __ptext19:
 12056                           	opt stack 0
 12057  00C0D0                     _isdigit:
 12058                           	opt stack 27
 12059                           
 12060                           ;incstack = 0
 12061                           ;isdigit@c stored from wreg
 12062  00C0D0  6E03               	movwf	isdigit@c,c
 12063  00C0D2  0E00               	movlw	0
 12064  00C0D4  6E02               	movwf	_isdigit$1475,c
 12065  00C0D6  0E3A               	movlw	58
 12066  00C0D8  6003               	cpfslt	isdigit@c,c
 12067  00C0DA  D005               	goto	l1455
 12068  00C0DC  0E2F               	movlw	47
 12069  00C0DE  6403               	cpfsgt	isdigit@c,c
 12070  00C0E0  D002               	goto	l1455
 12071  00C0E2  0E01               	movlw	1
 12072  00C0E4  6E02               	movwf	_isdigit$1475,c
 12073  00C0E6                     l1455:
 12074  00C0E6  C002  F001         	movff	_isdigit$1475,??_isdigit
 12075  00C0EA  3001               	rrcf	??_isdigit,w,c
 12076  00C0EC  0012               	return	
 12077  00C0EE                     __end_of_isdigit:
 12078                           	opt stack 0
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           postinc0	equ	0xFEE
 12086                           wreg	equ	0xFE8
 12087                           postdec1	equ	0xFE5
 12088                           plusw1	equ	0xFE3
 12089                           fsr1l	equ	0xFE1
 12090                           indf2	equ	0xFDF
 12091                           postinc2	equ	0xFDE
 12092                           postdec2	equ	0xFDD
 12093                           plusw2	equ	0xFDB
 12094                           fsr2h	equ	0xFDA
 12095                           fsr2l	equ	0xFD9
 12096                           status	equ	0xFD8
 12097                           
 12098 ;; *************** function ___wmul *****************
 12099 ;; Defined at:
 12100 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 12101 ;; Parameters:    Size  Location     Type
 12102 ;;  multiplier      2    0[COMRAM] unsigned int 
 12103 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  product         2    4[COMRAM] unsigned int 
 12106 ;; Return value:  Size  Location     Type
 12107 ;;                  2    0[COMRAM] unsigned int 
 12108 ;; Registers used:
 12109 ;;		wreg, status,2, status,0, prodl, prodh
 12110 ;; Tracked objects:
 12111 ;;		On entry : 0/0
 12112 ;;		On exit  : 0/0
 12113 ;;		Unchanged: 0/0
 12114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12118 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12119 ;;Total ram usage:        6 bytes
 12120 ;; Hardware stack levels used:    1
 12121 ;; This function calls:
 12122 ;;		Nothing
 12123 ;; This function is called by:
 12124 ;;		_displayLogs
 12125 ;;		_standbyMode
 12126 ;;		_printf
 12127 ;;		_tock
 12128 ;; This function uses a non-reentrant model
 12129 ;;
 12130                           
 12131                           	psect	text20
 12132  00C138                     __ptext20:
 12133                           	opt stack 0
 12134  00C138                     ___wmul:
 12135                           	opt stack 27
 12136                           
 12137                           ;incstack = 0
 12138  00C138  5001               	movf	___wmul@multiplier,w,c
 12139  00C13A  0203               	mulwf	___wmul@multiplicand,c
 12140  00C13C  CFF3 F005          	movff	prodl,___wmul@product
 12141  00C140  CFF4 F006          	movff	prodh,___wmul@product+1
 12142  00C144  5001               	movf	___wmul@multiplier,w,c
 12143  00C146  0204               	mulwf	___wmul@multiplicand+1,c
 12144  00C148  50F3               	movf	prodl,w,c
 12145  00C14A  2606               	addwf	___wmul@product+1,f,c
 12146  00C14C  5002               	movf	___wmul@multiplier+1,w,c
 12147  00C14E  0203               	mulwf	___wmul@multiplicand,c
 12148  00C150  50F3               	movf	prodl,w,c
 12149  00C152  2606               	addwf	___wmul@product+1,f,c
 12150  00C154  C005  F001         	movff	___wmul@product,?___wmul
 12151  00C158  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12152  00C15C  0012               	return	
 12153  00C15E                     __end_of___wmul:
 12154                           	opt stack 0
 12155                           tblptru	equ	0xFF8
 12156                           tblptrh	equ	0xFF7
 12157                           tblptrl	equ	0xFF6
 12158                           tablat	equ	0xFF5
 12159                           prodh	equ	0xFF4
 12160                           prodl	equ	0xFF3
 12161                           postinc0	equ	0xFEE
 12162                           wreg	equ	0xFE8
 12163                           postdec1	equ	0xFE5
 12164                           plusw1	equ	0xFE3
 12165                           fsr1l	equ	0xFE1
 12166                           indf2	equ	0xFDF
 12167                           postinc2	equ	0xFDE
 12168                           postdec2	equ	0xFDD
 12169                           plusw2	equ	0xFDB
 12170                           fsr2h	equ	0xFDA
 12171                           fsr2l	equ	0xFD9
 12172                           status	equ	0xFD8
 12173                           
 12174 ;; *************** function ___lwmod *****************
 12175 ;; Defined at:
 12176 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;  dividend        2    7[COMRAM] unsigned int 
 12179 ;;  divisor         2    9[COMRAM] unsigned int 
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;  counter         1   11[COMRAM] unsigned char 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  2    7[COMRAM] unsigned int 
 12184 ;; Registers used:
 12185 ;;		wreg, status,2, status,0
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12191 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;Total ram usage:        5 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; This function calls:
 12198 ;;		Nothing
 12199 ;; This function is called by:
 12200 ;;		_displayLogs
 12201 ;;		_printf
 12202 ;; This function uses a non-reentrant model
 12203 ;;
 12204                           
 12205                           	psect	text21
 12206  00C1C6                     __ptext21:
 12207                           	opt stack 0
 12208  00C1C6                     ___lwmod:
 12209                           	opt stack 27
 12210                           
 12211                           ;incstack = 0
 12212  00C1C6  500A               	movf	___lwmod@divisor,w,c
 12213  00C1C8  100B               	iorwf	___lwmod@divisor+1,w,c
 12214  00C1CA  B4D8               	btfsc	status,2,c
 12215  00C1CC  D018               	goto	l1549
 12216  00C1CE  0E01               	movlw	1
 12217  00C1D0  6E0C               	movwf	___lwmod@counter,c
 12218  00C1D2  D004               	goto	l1544
 12219  00C1D4  90D8               	bcf	status,0,c
 12220  00C1D6  360A               	rlcf	___lwmod@divisor,f,c
 12221  00C1D8  360B               	rlcf	___lwmod@divisor+1,f,c
 12222  00C1DA  2A0C               	incf	___lwmod@counter,f,c
 12223  00C1DC                     l1544:
 12224  00C1DC  AE0B               	btfss	___lwmod@divisor+1,7,c
 12225  00C1DE  D7FA               	goto	l1545
 12226  00C1E0                     u4690:
 12227  00C1E0  500A               	movf	___lwmod@divisor,w,c
 12228  00C1E2  5C08               	subwf	___lwmod@dividend,w,c
 12229  00C1E4  500B               	movf	___lwmod@divisor+1,w,c
 12230  00C1E6  5809               	subwfb	___lwmod@dividend+1,w,c
 12231  00C1E8  A0D8               	btfss	status,0,c
 12232  00C1EA  D004               	goto	l1548
 12233  00C1EC  500A               	movf	___lwmod@divisor,w,c
 12234  00C1EE  5E08               	subwf	___lwmod@dividend,f,c
 12235  00C1F0  500B               	movf	___lwmod@divisor+1,w,c
 12236  00C1F2  5A09               	subwfb	___lwmod@dividend+1,f,c
 12237  00C1F4                     l1548:
 12238  00C1F4  90D8               	bcf	status,0,c
 12239  00C1F6  320B               	rrcf	___lwmod@divisor+1,f,c
 12240  00C1F8  320A               	rrcf	___lwmod@divisor,f,c
 12241  00C1FA  2E0C               	decfsz	___lwmod@counter,f,c
 12242  00C1FC  D7F1               	goto	u4690
 12243  00C1FE                     l1549:
 12244  00C1FE  C008  F008         	movff	___lwmod@dividend,?___lwmod
 12245  00C202  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 12246  00C206  0012               	return		;funcret
 12247  00C208                     __end_of___lwmod:
 12248                           	opt stack 0
 12249                           tblptru	equ	0xFF8
 12250                           tblptrh	equ	0xFF7
 12251                           tblptrl	equ	0xFF6
 12252                           tablat	equ	0xFF5
 12253                           prodh	equ	0xFF4
 12254                           prodl	equ	0xFF3
 12255                           postinc0	equ	0xFEE
 12256                           wreg	equ	0xFE8
 12257                           postdec1	equ	0xFE5
 12258                           plusw1	equ	0xFE3
 12259                           fsr1l	equ	0xFE1
 12260                           indf2	equ	0xFDF
 12261                           postinc2	equ	0xFDE
 12262                           postdec2	equ	0xFDD
 12263                           plusw2	equ	0xFDB
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function ___lwdiv *****************
 12269 ;; Defined at:
 12270 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;  dividend        2    0[COMRAM] unsigned int 
 12273 ;;  divisor         2    2[COMRAM] unsigned int 
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  quotient        2    4[COMRAM] unsigned int 
 12276 ;;  counter         1    6[COMRAM] unsigned char 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;                  2    0[COMRAM] unsigned int 
 12279 ;; Registers used:
 12280 ;;		wreg, status,2, status,0
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12287 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12289 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;Total ram usage:        7 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; This function calls:
 12293 ;;		Nothing
 12294 ;; This function is called by:
 12295 ;;		_displayLogs
 12296 ;;		_printf
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           	psect	text22
 12301  00C254                     __ptext22:
 12302                           	opt stack 0
 12303  00C254                     ___lwdiv:
 12304                           	opt stack 27
 12305                           
 12306                           ;incstack = 0
 12307  00C254  0E00               	movlw	0
 12308  00C256  6E06               	movwf	___lwdiv@quotient+1,c
 12309  00C258  0E00               	movlw	0
 12310  00C25A  6E05               	movwf	___lwdiv@quotient,c
 12311  00C25C  5003               	movf	___lwdiv@divisor,w,c
 12312  00C25E  1004               	iorwf	___lwdiv@divisor+1,w,c
 12313  00C260  B4D8               	btfsc	status,2,c
 12314  00C262  D01C               	goto	l1539
 12315  00C264  0E01               	movlw	1
 12316  00C266  6E07               	movwf	___lwdiv@counter,c
 12317  00C268  D004               	goto	l1534
 12318  00C26A  90D8               	bcf	status,0,c
 12319  00C26C  3603               	rlcf	___lwdiv@divisor,f,c
 12320  00C26E  3604               	rlcf	___lwdiv@divisor+1,f,c
 12321  00C270  2A07               	incf	___lwdiv@counter,f,c
 12322  00C272                     l1534:
 12323  00C272  AE04               	btfss	___lwdiv@divisor+1,7,c
 12324  00C274  D7FA               	goto	l1535
 12325  00C276                     u4660:
 12326  00C276  90D8               	bcf	status,0,c
 12327  00C278  3605               	rlcf	___lwdiv@quotient,f,c
 12328  00C27A  3606               	rlcf	___lwdiv@quotient+1,f,c
 12329  00C27C  5003               	movf	___lwdiv@divisor,w,c
 12330  00C27E  5C01               	subwf	___lwdiv@dividend,w,c
 12331  00C280  5004               	movf	___lwdiv@divisor+1,w,c
 12332  00C282  5802               	subwfb	___lwdiv@dividend+1,w,c
 12333  00C284  A0D8               	btfss	status,0,c
 12334  00C286  D005               	goto	l1538
 12335  00C288  5003               	movf	___lwdiv@divisor,w,c
 12336  00C28A  5E01               	subwf	___lwdiv@dividend,f,c
 12337  00C28C  5004               	movf	___lwdiv@divisor+1,w,c
 12338  00C28E  5A02               	subwfb	___lwdiv@dividend+1,f,c
 12339  00C290  8005               	bsf	___lwdiv@quotient,0,c
 12340  00C292                     l1538:
 12341  00C292  90D8               	bcf	status,0,c
 12342  00C294  3204               	rrcf	___lwdiv@divisor+1,f,c
 12343  00C296  3203               	rrcf	___lwdiv@divisor,f,c
 12344  00C298  2E07               	decfsz	___lwdiv@counter,f,c
 12345  00C29A  D7ED               	goto	u4660
 12346  00C29C                     l1539:
 12347  00C29C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 12348  00C2A0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12349  00C2A4  0012               	return		;funcret
 12350  00C2A6                     __end_of___lwdiv:
 12351                           	opt stack 0
 12352                           tblptru	equ	0xFF8
 12353                           tblptrh	equ	0xFF7
 12354                           tblptrl	equ	0xFF6
 12355                           tablat	equ	0xFF5
 12356                           prodh	equ	0xFF4
 12357                           prodl	equ	0xFF3
 12358                           postinc0	equ	0xFEE
 12359                           wreg	equ	0xFE8
 12360                           postdec1	equ	0xFE5
 12361                           plusw1	equ	0xFE3
 12362                           fsr1l	equ	0xFE1
 12363                           indf2	equ	0xFDF
 12364                           postinc2	equ	0xFDE
 12365                           postdec2	equ	0xFDD
 12366                           plusw2	equ	0xFDB
 12367                           fsr2h	equ	0xFDA
 12368                           fsr2l	equ	0xFD9
 12369                           status	equ	0xFD8
 12370                           
 12371 ;; *************** function _decode_diet *****************
 12372 ;; Defined at:
 12373 ;;		line 1430 in file "standbyMode.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;  dietType        2    0[COMRAM] unsigned int 
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;  returnValue     2    4[COMRAM] unsigned int 
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  2    0[COMRAM] unsigned int 
 12380 ;; Registers used:
 12381 ;;		wreg, status,2, status,0
 12382 ;; Tracked objects:
 12383 ;;		On entry : 0/0
 12384 ;;		On exit  : 0/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12389 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12391 ;;Total ram usage:        6 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; This function calls:
 12394 ;;		Nothing
 12395 ;; This function is called by:
 12396 ;;		_standbyMode
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           	psect	text23
 12401  00CC2C                     __ptext23:
 12402                           	opt stack 0
 12403  00CC2C                     _decode_diet:
 12404                           	opt stack 29
 12405                           
 12406                           ;standbyMode.c: 1431: unsigned int returnValue = 100;
 12407                           
 12408                           ;incstack = 0
 12409  00CC2C  0E00               	movlw	0
 12410  00CC2E  6E06               	movwf	decode_diet@returnValue+1,c
 12411  00CC30  0E64               	movlw	100
 12412  00CC32  6E05               	movwf	decode_diet@returnValue,c
 12413                           
 12414                           ;standbyMode.c: 1433: switch(dietType){
 12415  00CC34  D049               	goto	l665
 12416  00CC36                     
 12417                           ;standbyMode.c: 1436: returnValue = 2;
 12418  00CC36  0E00               	movlw	0
 12419  00CC38  6E06               	movwf	decode_diet@returnValue+1,c
 12420  00CC3A  0E02               	movlw	2
 12421  00CC3C  D043               	goto	L123
 12422  00CC3E                     
 12423                           ;standbyMode.c: 1441: returnValue = 0;
 12424  00CC3E  0E00               	movlw	0
 12425  00CC40  6E06               	movwf	decode_diet@returnValue+1,c
 12426  00CC42  0E00               	movlw	0
 12427  00CC44  D03F               	goto	L123
 12428  00CC46                     
 12429                           ;standbyMode.c: 1446: returnValue = 1;
 12430  00CC46  0E00               	movlw	0
 12431  00CC48  6E06               	movwf	decode_diet@returnValue+1,c
 12432  00CC4A  0E01               	movlw	1
 12433  00CC4C  D03B               	goto	L123
 12434  00CC4E                     
 12435                           ;standbyMode.c: 1451: returnValue = 3;
 12436  00CC4E  0E00               	movlw	0
 12437  00CC50  6E06               	movwf	decode_diet@returnValue+1,c
 12438  00CC52  0E03               	movlw	3
 12439  00CC54  D037               	goto	L123
 12440  00CC56                     
 12441                           ;standbyMode.c: 1456: returnValue = 4;
 12442  00CC56  0E00               	movlw	0
 12443  00CC58  6E06               	movwf	decode_diet@returnValue+1,c
 12444  00CC5A  0E04               	movlw	4
 12445  00CC5C  D033               	goto	L123
 12446  00CC5E                     
 12447                           ;standbyMode.c: 1461: returnValue = 5;
 12448  00CC5E  0E00               	movlw	0
 12449  00CC60  6E06               	movwf	decode_diet@returnValue+1,c
 12450  00CC62  0E05               	movlw	5
 12451  00CC64  D02F               	goto	L123
 12452  00CC66                     
 12453                           ;standbyMode.c: 1466: returnValue = 6;
 12454  00CC66  0E00               	movlw	0
 12455  00CC68  6E06               	movwf	decode_diet@returnValue+1,c
 12456  00CC6A  0E06               	movlw	6
 12457  00CC6C  D02B               	goto	L123
 12458  00CC6E                     
 12459                           ;standbyMode.c: 1471: returnValue = 7;
 12460  00CC6E  0E00               	movlw	0
 12461  00CC70  6E06               	movwf	decode_diet@returnValue+1,c
 12462  00CC72  0E07               	movlw	7
 12463  00CC74  D027               	goto	L123
 12464  00CC76                     
 12465                           ;standbyMode.c: 1476: returnValue = 8;
 12466  00CC76  0E00               	movlw	0
 12467  00CC78  6E06               	movwf	decode_diet@returnValue+1,c
 12468  00CC7A  0E08               	movlw	8
 12469  00CC7C  D023               	goto	L123
 12470  00CC7E                     
 12471                           ;standbyMode.c: 1481: returnValue = 9;
 12472  00CC7E  0E00               	movlw	0
 12473  00CC80  6E06               	movwf	decode_diet@returnValue+1,c
 12474  00CC82  0E09               	movlw	9
 12475  00CC84  D01F               	goto	L123
 12476  00CC86                     
 12477                           ;standbyMode.c: 1486: returnValue = 10;
 12478  00CC86  0E00               	movlw	0
 12479  00CC88  6E06               	movwf	decode_diet@returnValue+1,c
 12480  00CC8A  0E0A               	movlw	10
 12481  00CC8C  D01B               	goto	L123
 12482  00CC8E                     
 12483                           ;standbyMode.c: 1491: returnValue = 11;
 12484  00CC8E  0E00               	movlw	0
 12485  00CC90  6E06               	movwf	decode_diet@returnValue+1,c
 12486  00CC92  0E0B               	movlw	11
 12487  00CC94  D017               	goto	L123
 12488  00CC96                     
 12489                           ;standbyMode.c: 1496: returnValue = 12;
 12490  00CC96  0E00               	movlw	0
 12491  00CC98  6E06               	movwf	decode_diet@returnValue+1,c
 12492  00CC9A  0E0C               	movlw	12
 12493  00CC9C  D013               	goto	L123
 12494  00CC9E                     
 12495                           ;standbyMode.c: 1501: returnValue = 13;
 12496  00CC9E  0E00               	movlw	0
 12497  00CCA0  6E06               	movwf	decode_diet@returnValue+1,c
 12498  00CCA2  0E0D               	movlw	13
 12499  00CCA4  D00F               	goto	L123
 12500  00CCA6                     
 12501                           ;standbyMode.c: 1506: returnValue = 14;
 12502  00CCA6  0E00               	movlw	0
 12503  00CCA8  6E06               	movwf	decode_diet@returnValue+1,c
 12504  00CCAA  0E0E               	movlw	14
 12505  00CCAC  D00B               	goto	L123
 12506  00CCAE                     
 12507                           ;standbyMode.c: 1511: returnValue = 15;
 12508  00CCAE  0E00               	movlw	0
 12509  00CCB0  6E06               	movwf	decode_diet@returnValue+1,c
 12510  00CCB2  0E0F               	movlw	15
 12511  00CCB4  D007               	goto	L123
 12512  00CCB6                     
 12513                           ;standbyMode.c: 1516: returnValue = 16;
 12514  00CCB6  0E00               	movlw	0
 12515  00CCB8  6E06               	movwf	decode_diet@returnValue+1,c
 12516  00CCBA  0E10               	movlw	16
 12517  00CCBC  D003               	goto	L123
 12518  00CCBE                     
 12519                           ;standbyMode.c: 1521: returnValue = 17;
 12520  00CCBE  0E00               	movlw	0
 12521  00CCC0  6E06               	movwf	decode_diet@returnValue+1,c
 12522  00CCC2  0E11               	movlw	17
 12523  00CCC4                     L123:
 12524  00CCC4  6E05               	movwf	decode_diet@returnValue,c
 12525                           
 12526                           ;standbyMode.c: 1526: }
 12527                           
 12528                           ;standbyMode.c: 1525: break;
 12529                           
 12530                           ;standbyMode.c: 1524: default:
 12531                           
 12532                           ;standbyMode.c: 1522: break;
 12533  00CCC6  D03F               	goto	l667
 12534  00CCC8                     l665:
 12535  00CCC8  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 12536  00CCCC  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 12537                           
 12538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12539                           ; Switch size 1, requested type "space"
 12540                           ; Number of cases is 1, Range of values is 0 to 0
 12541                           ; switch strategies available:
 12542                           ; Name         Instructions Cycles
 12543                           ; simple_byte            4     3 (average)
 12544                           ;	Chosen strategy is simple_byte
 12545  00CCD0  5004               	movf	??_decode_diet+1,w,c
 12546  00CCD2  0A00               	xorlw	0	; case 0
 12547  00CCD4  A4D8               	btfss	status,2,c
 12548  00CCD6  D037               	goto	l667
 12549                           
 12550                           ; Switch size 1, requested type "space"
 12551                           ; Number of cases is 18, Range of values is 3 to 43
 12552                           ; switch strategies available:
 12553                           ; Name         Instructions Cycles
 12554                           ; simple_byte           55    28 (average)
 12555                           ;	Chosen strategy is simple_byte
 12556  00CCD8  5003               	movf	??_decode_diet,w,c
 12557  00CCDA  0A03               	xorlw	3	; case 3
 12558  00CCDC  B4D8               	btfsc	status,2,c
 12559  00CCDE  D7AF               	goto	l668
 12560  00CCE0  0A04               	xorlw	4	; case 7
 12561  00CCE2  B4D8               	btfsc	status,2,c
 12562  00CCE4  D7B0               	goto	l669
 12563  00CCE6  0A0D               	xorlw	13	; case 10
 12564  00CCE8  B4D8               	btfsc	status,2,c
 12565  00CCEA  D7B1               	goto	l670
 12566  00CCEC  0A06               	xorlw	6	; case 12
 12567  00CCEE  B4D8               	btfsc	status,2,c
 12568  00CCF0  D7A2               	goto	l666
 12569  00CCF2  0A01               	xorlw	1	; case 13
 12570  00CCF4  B4D8               	btfsc	status,2,c
 12571  00CCF6  D7B7               	goto	l673
 12572  00CCF8  0A02               	xorlw	2	; case 15
 12573  00CCFA  B4D8               	btfsc	status,2,c
 12574  00CCFC  D7AC               	goto	l671
 12575  00CCFE  0A1E               	xorlw	30	; case 17
 12576  00CD00  B4D8               	btfsc	status,2,c
 12577  00CD02  D7B9               	goto	l675
 12578  00CD04  0A03               	xorlw	3	; case 18
 12579  00CD06  B4D8               	btfsc	status,2,c
 12580  00CD08  D7B2               	goto	l674
 12581  00CD0A  0A01               	xorlw	1	; case 19
 12582  00CD0C  B4D8               	btfsc	status,2,c
 12583  00CD0E  D7A7               	goto	l672
 12584  00CD10  0A05               	xorlw	5	; case 22
 12585  00CD12  B4D8               	btfsc	status,2,c
 12586  00CD14  D7B8               	goto	l677
 12587  00CD16  0A0F               	xorlw	15	; case 25
 12588  00CD18  B4D8               	btfsc	status,2,c
 12589  00CD1A  D7C1               	goto	l680
 12590  00CD1C  0A03               	xorlw	3	; case 26
 12591  00CD1E  B4D8               	btfsc	status,2,c
 12592  00CD20  D7B6               	goto	l678
 12593  00CD22  0A01               	xorlw	1	; case 27
 12594  00CD24  B4D8               	btfsc	status,2,c
 12595  00CD26  D7AB               	goto	l676
 12596  00CD28  0A06               	xorlw	6	; case 29
 12597  00CD2A  B4D8               	btfsc	status,2,c
 12598  00CD2C  D7BC               	goto	l681
 12599  00CD2E  0A02               	xorlw	2	; case 31
 12600  00CD30  B4D8               	btfsc	status,2,c
 12601  00CD32  D7B1               	goto	l679
 12602  00CD34  0A3D               	xorlw	61	; case 34
 12603  00CD36  B4D8               	btfsc	status,2,c
 12604  00CD38  D7BA               	goto	l682
 12605  00CD3A  0A05               	xorlw	5	; case 39
 12606  00CD3C  B4D8               	btfsc	status,2,c
 12607  00CD3E  D7BB               	goto	l683
 12608  00CD40  0A0C               	xorlw	12	; case 43
 12609  00CD42  B4D8               	btfsc	status,2,c
 12610  00CD44  D7BC               	goto	l684
 12611  00CD46                     l667:
 12612                           
 12613                           ;standbyMode.c: 1527: return returnValue;
 12614  00CD46  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 12615  00CD4A  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 12616  00CD4E  0012               	return		;funcret
 12617  00CD50                     __end_of_decode_diet:
 12618                           	opt stack 0
 12619                           tblptru	equ	0xFF8
 12620                           tblptrh	equ	0xFF7
 12621                           tblptrl	equ	0xFF6
 12622                           tablat	equ	0xFF5
 12623                           prodh	equ	0xFF4
 12624                           prodl	equ	0xFF3
 12625                           postinc0	equ	0xFEE
 12626                           wreg	equ	0xFE8
 12627                           postdec1	equ	0xFE5
 12628                           plusw1	equ	0xFE3
 12629                           fsr1l	equ	0xFE1
 12630                           indf2	equ	0xFDF
 12631                           postinc2	equ	0xFDE
 12632                           postdec2	equ	0xFDD
 12633                           plusw2	equ	0xFDB
 12634                           fsr2h	equ	0xFDA
 12635                           fsr2l	equ	0xFD9
 12636                           status	equ	0xFD8
 12637                           
 12638 ;; *************** function _I2C_Master_Write *****************
 12639 ;; Defined at:
 12640 ;;		line 108 in file "I2C.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12643 ;; Auto vars:     Size  Location     Type
 12644 ;;		None
 12645 ;; Return value:  Size  Location     Type
 12646 ;;                  1    wreg      void 
 12647 ;; Registers used:
 12648 ;;		wreg, status,2, status,0, cstack
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;Total ram usage:        2 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; Hardware stack levels required when called:    1
 12661 ;; This function calls:
 12662 ;;		_I2C_Master_Wait
 12663 ;; This function is called by:
 12664 ;;		_standbyMode
 12665 ;;		_RTC_setTime
 12666 ;;		_tick
 12667 ;;		_tock
 12668 ;;		_sendByteToArduino
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text24
 12673  00C062                     __ptext24:
 12674                           	opt stack 0
 12675  00C062                     _I2C_Master_Write:
 12676                           	opt stack 28
 12677                           
 12678                           ;I2C.c: 116: I2C_Master_Wait();
 12679                           
 12680                           ;incstack = 0
 12681  00C062  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12682                           
 12683                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12684  00C066  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12685  00C06A  0012               	return		;funcret
 12686  00C06C                     __end_of_I2C_Master_Write:
 12687                           	opt stack 0
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           postinc0	equ	0xFEE
 12695                           wreg	equ	0xFE8
 12696                           postdec1	equ	0xFE5
 12697                           plusw1	equ	0xFE3
 12698                           fsr1l	equ	0xFE1
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           plusw2	equ	0xFDB
 12703                           fsr2h	equ	0xFDA
 12704                           fsr2l	equ	0xFD9
 12705                           status	equ	0xFD8
 12706                           
 12707 ;; *************** function _I2C_Master_Stop *****************
 12708 ;; Defined at:
 12709 ;;		line 95 in file "I2C.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;		None
 12712 ;; Auto vars:     Size  Location     Type
 12713 ;;		None
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  1    wreg      void 
 12716 ;; Registers used:
 12717 ;;		wreg, status,2, status,0, cstack
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12727 ;;Total ram usage:        0 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:    1
 12730 ;; This function calls:
 12731 ;;		_I2C_Master_Wait
 12732 ;; This function is called by:
 12733 ;;		_standbyMode
 12734 ;;		_RTC_setTime
 12735 ;;		_tick
 12736 ;;		_tock
 12737 ;;		_sendByteToArduino
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text25
 12742  00C05A                     __ptext25:
 12743                           	opt stack 0
 12744  00C05A                     _I2C_Master_Stop:
 12745                           	opt stack 28
 12746                           
 12747                           ;I2C.c: 104: I2C_Master_Wait();
 12748                           
 12749                           ;incstack = 0
 12750  00C05A  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12751                           
 12752                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12753  00C05E  84C5               	bsf	4037,2,c	;volatile
 12754  00C060  0012               	return		;funcret
 12755  00C062                     __end_of_I2C_Master_Stop:
 12756                           	opt stack 0
 12757                           tblptru	equ	0xFF8
 12758                           tblptrh	equ	0xFF7
 12759                           tblptrl	equ	0xFF6
 12760                           tablat	equ	0xFF5
 12761                           prodh	equ	0xFF4
 12762                           prodl	equ	0xFF3
 12763                           postinc0	equ	0xFEE
 12764                           wreg	equ	0xFE8
 12765                           postdec1	equ	0xFE5
 12766                           plusw1	equ	0xFE3
 12767                           fsr1l	equ	0xFE1
 12768                           indf2	equ	0xFDF
 12769                           postinc2	equ	0xFDE
 12770                           postdec2	equ	0xFDD
 12771                           plusw2	equ	0xFDB
 12772                           fsr2h	equ	0xFDA
 12773                           fsr2l	equ	0xFD9
 12774                           status	equ	0xFD8
 12775                           
 12776 ;; *************** function _I2C_Master_Start *****************
 12777 ;; Defined at:
 12778 ;;		line 69 in file "I2C.c"
 12779 ;; Parameters:    Size  Location     Type
 12780 ;;		None
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;		None
 12783 ;; Return value:  Size  Location     Type
 12784 ;;                  1    wreg      void 
 12785 ;; Registers used:
 12786 ;;		wreg, status,2, status,0, cstack
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12796 ;;Total ram usage:        0 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:    1
 12799 ;; This function calls:
 12800 ;;		_I2C_Master_Wait
 12801 ;; This function is called by:
 12802 ;;		_standbyMode
 12803 ;;		_RTC_setTime
 12804 ;;		_tick
 12805 ;;		_tock
 12806 ;;		_sendByteToArduino
 12807 ;; This function uses a non-reentrant model
 12808 ;;
 12809                           
 12810                           	psect	text26
 12811  00C052                     __ptext26:
 12812                           	opt stack 0
 12813  00C052                     _I2C_Master_Start:
 12814                           	opt stack 28
 12815                           
 12816                           ;I2C.c: 78: I2C_Master_Wait();
 12817                           
 12818                           ;incstack = 0
 12819  00C052  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12820                           
 12821                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12822  00C056  80C5               	bsf	4037,0,c	;volatile
 12823  00C058  0012               	return		;funcret
 12824  00C05A                     __end_of_I2C_Master_Start:
 12825                           	opt stack 0
 12826                           tblptru	equ	0xFF8
 12827                           tblptrh	equ	0xFF7
 12828                           tblptrl	equ	0xFF6
 12829                           tablat	equ	0xFF5
 12830                           prodh	equ	0xFF4
 12831                           prodl	equ	0xFF3
 12832                           postinc0	equ	0xFEE
 12833                           wreg	equ	0xFE8
 12834                           postdec1	equ	0xFE5
 12835                           plusw1	equ	0xFE3
 12836                           fsr1l	equ	0xFE1
 12837                           indf2	equ	0xFDF
 12838                           postinc2	equ	0xFDE
 12839                           postdec2	equ	0xFDD
 12840                           plusw2	equ	0xFDB
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function _I2C_Master_Read *****************
 12846 ;; Defined at:
 12847 ;;		line 120 in file "I2C.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;  ackBit          1    wreg     unsigned char 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  ackBit          1    1[COMRAM] unsigned char 
 12852 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      unsigned char 
 12855 ;; Registers used:
 12856 ;;		wreg, status,2, status,0, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12866 ;;Total ram usage:        2 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    1
 12869 ;; This function calls:
 12870 ;;		_I2C_Master_Wait
 12871 ;; This function is called by:
 12872 ;;		_standbyMode
 12873 ;;		_tick
 12874 ;;		_tock
 12875 ;; This function uses a non-reentrant model
 12876 ;;
 12877                           
 12878                           	psect	text27
 12879  00C0EE                     __ptext27:
 12880                           	opt stack 0
 12881  00C0EE                     _I2C_Master_Read:
 12882                           	opt stack 28
 12883                           
 12884                           ;incstack = 0
 12885                           ;I2C_Master_Read@ackBit stored from wreg
 12886  00C0EE  6E02               	movwf	I2C_Master_Read@ackBit,c
 12887                           
 12888                           ;I2C.c: 130: unsigned char receivedByte;
 12889                           ;I2C.c: 132: I2C_Master_Wait();
 12890  00C0F0  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12891                           
 12892                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12893  00C0F4  86C5               	bsf	4037,3,c	;volatile
 12894                           
 12895                           ;I2C.c: 135: I2C_Master_Wait();
 12896  00C0F6  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12897                           
 12898                           ;I2C.c: 136: receivedByte = SSPBUF;
 12899  00C0FA  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12900                           
 12901                           ;I2C.c: 138: I2C_Master_Wait();
 12902  00C0FE  EC36  F060         	call	_I2C_Master_Wait	;wreg free
 12903                           
 12904                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12905  00C102  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12906  00C104  D002               	bra	u8325
 12907  00C106  9AC5               	bcf	4037,5,c	;volatile
 12908  00C108  D001               	bra	u8326
 12909  00C10A                     u8325:
 12910  00C10A  8AC5               	bsf	4037,5,c	;volatile
 12911  00C10C                     u8326:
 12912                           
 12913                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12914  00C10C  88C5               	bsf	4037,4,c	;volatile
 12915                           
 12916                           ;I2C.c: 142: return receivedByte;
 12917  00C10E  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12918  00C110  0012               	return	
 12919  00C112                     __end_of_I2C_Master_Read:
 12920                           	opt stack 0
 12921                           tblptru	equ	0xFF8
 12922                           tblptrh	equ	0xFF7
 12923                           tblptrl	equ	0xFF6
 12924                           tablat	equ	0xFF5
 12925                           prodh	equ	0xFF4
 12926                           prodl	equ	0xFF3
 12927                           postinc0	equ	0xFEE
 12928                           wreg	equ	0xFE8
 12929                           postdec1	equ	0xFE5
 12930                           plusw1	equ	0xFE3
 12931                           fsr1l	equ	0xFE1
 12932                           indf2	equ	0xFDF
 12933                           postinc2	equ	0xFDE
 12934                           postdec2	equ	0xFDD
 12935                           plusw2	equ	0xFDB
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _I2C_Master_Wait *****************
 12941 ;; Defined at:
 12942 ;;		line 51 in file "I2C.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;		None
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  1    wreg      void 
 12949 ;; Registers used:
 12950 ;;		wreg, status,2, status,0
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;Total ram usage:        1 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; This function calls:
 12963 ;;		Nothing
 12964 ;; This function is called by:
 12965 ;;		_I2C_Master_Start
 12966 ;;		_I2C_Master_Stop
 12967 ;;		_I2C_Master_Write
 12968 ;;		_I2C_Master_Read
 12969 ;;		_I2C_Master_RepeatedStart
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text28
 12974  00C06C                     __ptext28:
 12975                           	opt stack 0
 12976  00C06C                     _I2C_Master_Wait:
 12977                           	opt stack 28
 12978                           
 12979                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12980                           
 12981                           ;incstack = 0
 12982  00C06C  B4C7               	btfsc	4039,2,c	;volatile
 12983  00C06E  D7FE               	goto	_I2C_Master_Wait
 12984  00C070  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12985  00C074  0E1F               	movlw	31
 12986  00C076  1601               	andwf	??_I2C_Master_Wait,f,c
 12987  00C078  B4D8               	btfsc	status,2,c
 12988  00C07A  0012               	return	
 12989  00C07C  D7F7               	goto	_I2C_Master_Wait
 12990  00C07E                     __end_of_I2C_Master_Wait:
 12991                           	opt stack 0
 12992                           tblptru	equ	0xFF8
 12993                           tblptrh	equ	0xFF7
 12994                           tblptrl	equ	0xFF6
 12995                           tablat	equ	0xFF5
 12996                           prodh	equ	0xFF4
 12997                           prodl	equ	0xFF3
 12998                           postinc0	equ	0xFEE
 12999                           wreg	equ	0xFE8
 13000                           postdec1	equ	0xFE5
 13001                           plusw1	equ	0xFE3
 13002                           fsr1l	equ	0xFE1
 13003                           indf2	equ	0xFDF
 13004                           postinc2	equ	0xFDE
 13005                           postdec2	equ	0xFDD
 13006                           plusw2	equ	0xFDB
 13007                           fsr2h	equ	0xFDA
 13008                           fsr2l	equ	0xFD9
 13009                           status	equ	0xFD8
 13010                           
 13011 ;; *************** function _I2C_Master_Init *****************
 13012 ;; Defined at:
 13013 ;;		line 14 in file "I2C.c"
 13014 ;; Parameters:    Size  Location     Type
 13015 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 13016 ;; Auto vars:     Size  Location     Type
 13017 ;;		None
 13018 ;; Return value:  Size  Location     Type
 13019 ;;                  1    wreg      void 
 13020 ;; Registers used:
 13021 ;;		wreg, status,2, status,0, cstack
 13022 ;; Tracked objects:
 13023 ;;		On entry : 0/0
 13024 ;;		On exit  : 0/0
 13025 ;;		Unchanged: 0/0
 13026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13027 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;Total ram usage:        8 bytes
 13032 ;; Hardware stack levels used:    1
 13033 ;; Hardware stack levels required when called:    1
 13034 ;; This function calls:
 13035 ;;		___lldiv
 13036 ;; This function is called by:
 13037 ;;		_standbyMode
 13038 ;;		_tick
 13039 ;;		_tock
 13040 ;; This function uses a non-reentrant model
 13041 ;;
 13042                           
 13043                           	psect	text29
 13044  00C2F8                     __ptext29:
 13045                           	opt stack 0
 13046  00C2F8                     _I2C_Master_Init:
 13047                           	opt stack 28
 13048                           
 13049                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 13050                           
 13051                           ;incstack = 0
 13052  00C2F8  9AC6               	bcf	4038,5,c	;volatile
 13053                           
 13054                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 13055  00C2FA  8694               	bsf	3988,3,c	;volatile
 13056                           
 13057                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 13058  00C2FC  8894               	bsf	3988,4,c	;volatile
 13059                           
 13060                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 13061  00C2FE  0E80               	movlw	128
 13062  00C300  6EC7               	movwf	4039,c	;volatile
 13063                           
 13064                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 13065  00C302  0E28               	movlw	40
 13066  00C304  6EC6               	movwf	4038,c	;volatile
 13067                           
 13068                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 13069  00C306  0E00               	movlw	0
 13070  00C308  6EC5               	movwf	4037,c	;volatile
 13071                           
 13072                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 13073  00C30A  0E00               	movlw	0
 13074  00C30C  6E01               	movwf	___lldiv@dividend,c
 13075  00C30E  0E5A               	movlw	90
 13076  00C310  6E02               	movwf	___lldiv@dividend+1,c
 13077  00C312  0E62               	movlw	98
 13078  00C314  6E03               	movwf	___lldiv@dividend+2,c
 13079  00C316  0E02               	movlw	2
 13080  00C318  6E04               	movwf	___lldiv@dividend+3,c
 13081  00C31A  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 13082  00C31E  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 13083  00C322  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 13084  00C326  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 13085  00C32A  0E02               	movlw	2
 13086  00C32C                     u8315:
 13087  00C32C  90D8               	bcf	status,0,c
 13088  00C32E  3612               	rlcf	??_I2C_Master_Init,f,c
 13089  00C330  3613               	rlcf	??_I2C_Master_Init+1,f,c
 13090  00C332  3614               	rlcf	??_I2C_Master_Init+2,f,c
 13091  00C334  3615               	rlcf	??_I2C_Master_Init+3,f,c
 13092  00C336  2EE8               	decfsz	wreg,f,c
 13093  00C338  D7F9               	goto	u8315
 13094  00C33A  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 13095  00C33E  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 13096  00C342  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 13097  00C346  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 13098  00C34A  EC1E  F062         	call	___lldiv	;wreg free
 13099  00C34E  0401               	decf	?___lldiv,w,c
 13100  00C350  6EC8               	movwf	4040,c	;volatile
 13101  00C352  0012               	return		;funcret
 13102  00C354                     __end_of_I2C_Master_Init:
 13103                           	opt stack 0
 13104                           tblptru	equ	0xFF8
 13105                           tblptrh	equ	0xFF7
 13106                           tblptrl	equ	0xFF6
 13107                           tablat	equ	0xFF5
 13108                           prodh	equ	0xFF4
 13109                           prodl	equ	0xFF3
 13110                           postinc0	equ	0xFEE
 13111                           wreg	equ	0xFE8
 13112                           postdec1	equ	0xFE5
 13113                           plusw1	equ	0xFE3
 13114                           fsr1l	equ	0xFE1
 13115                           indf2	equ	0xFDF
 13116                           postinc2	equ	0xFDE
 13117                           postdec2	equ	0xFDD
 13118                           plusw2	equ	0xFDB
 13119                           fsr2h	equ	0xFDA
 13120                           fsr2l	equ	0xFD9
 13121                           status	equ	0xFD8
 13122                           
 13123 ;; *************** function ___lldiv *****************
 13124 ;; Defined at:
 13125 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 13126 ;; Parameters:    Size  Location     Type
 13127 ;;  dividend        4    0[COMRAM] unsigned long 
 13128 ;;  divisor         4    4[COMRAM] unsigned long 
 13129 ;; Auto vars:     Size  Location     Type
 13130 ;;  quotient        4    8[COMRAM] unsigned long 
 13131 ;;  counter         1   12[COMRAM] unsigned char 
 13132 ;; Return value:  Size  Location     Type
 13133 ;;                  4    0[COMRAM] unsigned long 
 13134 ;; Registers used:
 13135 ;;		wreg, status,2, status,0
 13136 ;; Tracked objects:
 13137 ;;		On entry : 0/0
 13138 ;;		On exit  : 0/0
 13139 ;;		Unchanged: 0/0
 13140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13141 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13142 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;Total ram usage:       13 bytes
 13146 ;; Hardware stack levels used:    1
 13147 ;; This function calls:
 13148 ;;		Nothing
 13149 ;; This function is called by:
 13150 ;;		_I2C_Master_Init
 13151 ;; This function uses a non-reentrant model
 13152 ;;
 13153                           
 13154                           	psect	text30
 13155  00C43C                     __ptext30:
 13156                           	opt stack 0
 13157  00C43C                     ___lldiv:
 13158                           	opt stack 28
 13159                           
 13160                           ;incstack = 0
 13161  00C43C  0E00               	movlw	0
 13162  00C43E  6E09               	movwf	___lldiv@quotient,c
 13163  00C440  0E00               	movlw	0
 13164  00C442  6E0A               	movwf	___lldiv@quotient+1,c
 13165  00C444  0E00               	movlw	0
 13166  00C446  6E0B               	movwf	___lldiv@quotient+2,c
 13167  00C448  0E00               	movlw	0
 13168  00C44A  6E0C               	movwf	___lldiv@quotient+3,c
 13169  00C44C  5005               	movf	___lldiv@divisor,w,c
 13170  00C44E  1006               	iorwf	___lldiv@divisor+1,w,c
 13171  00C450  1007               	iorwf	___lldiv@divisor+2,w,c
 13172  00C452  1008               	iorwf	___lldiv@divisor+3,w,c
 13173  00C454  B4D8               	btfsc	status,2,c
 13174  00C456  D02A               	goto	l1486
 13175  00C458  0E01               	movlw	1
 13176  00C45A  6E0D               	movwf	___lldiv@counter,c
 13177  00C45C  D006               	goto	l1481
 13178  00C45E  90D8               	bcf	status,0,c
 13179  00C460  3605               	rlcf	___lldiv@divisor,f,c
 13180  00C462  3606               	rlcf	___lldiv@divisor+1,f,c
 13181  00C464  3607               	rlcf	___lldiv@divisor+2,f,c
 13182  00C466  3608               	rlcf	___lldiv@divisor+3,f,c
 13183  00C468  2A0D               	incf	___lldiv@counter,f,c
 13184  00C46A                     l1481:
 13185  00C46A  AE08               	btfss	___lldiv@divisor+3,7,c
 13186  00C46C  D7F8               	goto	l1482
 13187  00C46E                     u6450:
 13188  00C46E  90D8               	bcf	status,0,c
 13189  00C470  3609               	rlcf	___lldiv@quotient,f,c
 13190  00C472  360A               	rlcf	___lldiv@quotient+1,f,c
 13191  00C474  360B               	rlcf	___lldiv@quotient+2,f,c
 13192  00C476  360C               	rlcf	___lldiv@quotient+3,f,c
 13193  00C478  5005               	movf	___lldiv@divisor,w,c
 13194  00C47A  5C01               	subwf	___lldiv@dividend,w,c
 13195  00C47C  5006               	movf	___lldiv@divisor+1,w,c
 13196  00C47E  5802               	subwfb	___lldiv@dividend+1,w,c
 13197  00C480  5007               	movf	___lldiv@divisor+2,w,c
 13198  00C482  5803               	subwfb	___lldiv@dividend+2,w,c
 13199  00C484  5008               	movf	___lldiv@divisor+3,w,c
 13200  00C486  5804               	subwfb	___lldiv@dividend+3,w,c
 13201  00C488  A0D8               	btfss	status,0,c
 13202  00C48A  D009               	goto	l1485
 13203  00C48C  5005               	movf	___lldiv@divisor,w,c
 13204  00C48E  5E01               	subwf	___lldiv@dividend,f,c
 13205  00C490  5006               	movf	___lldiv@divisor+1,w,c
 13206  00C492  5A02               	subwfb	___lldiv@dividend+1,f,c
 13207  00C494  5007               	movf	___lldiv@divisor+2,w,c
 13208  00C496  5A03               	subwfb	___lldiv@dividend+2,f,c
 13209  00C498  5008               	movf	___lldiv@divisor+3,w,c
 13210  00C49A  5A04               	subwfb	___lldiv@dividend+3,f,c
 13211  00C49C  8009               	bsf	___lldiv@quotient,0,c
 13212  00C49E                     l1485:
 13213  00C49E  90D8               	bcf	status,0,c
 13214  00C4A0  3208               	rrcf	___lldiv@divisor+3,f,c
 13215  00C4A2  3207               	rrcf	___lldiv@divisor+2,f,c
 13216  00C4A4  3206               	rrcf	___lldiv@divisor+1,f,c
 13217  00C4A6  3205               	rrcf	___lldiv@divisor,f,c
 13218  00C4A8  2E0D               	decfsz	___lldiv@counter,f,c
 13219  00C4AA  D7E1               	goto	u6450
 13220  00C4AC                     l1486:
 13221  00C4AC  C009  F001         	movff	___lldiv@quotient,?___lldiv
 13222  00C4B0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 13223  00C4B4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 13224  00C4B8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 13225  00C4BC  0012               	return		;funcret
 13226  00C4BE                     __end_of___lldiv:
 13227                           	opt stack 0
 13228                           tblptru	equ	0xFF8
 13229                           tblptrh	equ	0xFF7
 13230                           tblptrl	equ	0xFF6
 13231                           tablat	equ	0xFF5
 13232                           prodh	equ	0xFF4
 13233                           prodl	equ	0xFF3
 13234                           postinc0	equ	0xFEE
 13235                           wreg	equ	0xFE8
 13236                           postdec1	equ	0xFE5
 13237                           plusw1	equ	0xFE3
 13238                           fsr1l	equ	0xFE1
 13239                           indf2	equ	0xFDF
 13240                           postinc2	equ	0xFDE
 13241                           postdec2	equ	0xFDD
 13242                           plusw2	equ	0xFDB
 13243                           fsr2h	equ	0xFDA
 13244                           fsr2l	equ	0xFD9
 13245                           status	equ	0xFD8
 13246                           
 13247 ;; *************** function _mainOperation *****************
 13248 ;; Defined at:
 13249 ;;		line 214 in file "operationMode.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;		None
 13252 ;; Auto vars:     Size  Location     Type
 13253 ;;		None
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  1    wreg      void 
 13256 ;; Registers used:
 13257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;Total ram usage:        0 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    2
 13270 ;; This function calls:
 13271 ;;		_UART_Init
 13272 ;; This function is called by:
 13273 ;;		_main
 13274 ;; This function uses a non-reentrant model
 13275 ;;
 13276                           
 13277                           	psect	text31
 13278  00C0BA                     __ptext31:
 13279                           	opt stack 0
 13280  00C0BA                     _mainOperation:
 13281                           	opt stack 28
 13282                           
 13283                           ;operationMode.c: 216: UART_Init(9600);
 13284                           
 13285                           ;incstack = 0
 13286  00C0BA  0E80               	movlw	128
 13287  00C0BC  6E0F               	movwf	UART_Init@baud,c
 13288  00C0BE  0E25               	movlw	37
 13289  00C0C0  6E10               	movwf	UART_Init@baud+1,c
 13290  00C0C2  0E00               	movlw	0
 13291  00C0C4  6E11               	movwf	UART_Init@baud+2,c
 13292  00C0C6  0E00               	movlw	0
 13293  00C0C8  6E12               	movwf	UART_Init@baud+3,c
 13294  00C0CA  EC5F  F062         	call	_UART_Init	;wreg free
 13295  00C0CE  0012               	return		;funcret
 13296  00C0D0                     __end_of_mainOperation:
 13297                           	opt stack 0
 13298                           tblptru	equ	0xFF8
 13299                           tblptrh	equ	0xFF7
 13300                           tblptrl	equ	0xFF6
 13301                           tablat	equ	0xFF5
 13302                           prodh	equ	0xFF4
 13303                           prodl	equ	0xFF3
 13304                           postinc0	equ	0xFEE
 13305                           wreg	equ	0xFE8
 13306                           postdec1	equ	0xFE5
 13307                           plusw1	equ	0xFE3
 13308                           fsr1l	equ	0xFE1
 13309                           indf2	equ	0xFDF
 13310                           postinc2	equ	0xFDE
 13311                           postdec2	equ	0xFDD
 13312                           plusw2	equ	0xFDB
 13313                           fsr2h	equ	0xFDA
 13314                           fsr2l	equ	0xFD9
 13315                           status	equ	0xFD8
 13316                           
 13317 ;; *************** function _UART_Init *****************
 13318 ;; Defined at:
 13319 ;;		line 197 in file "UART_PIC.c"
 13320 ;; Parameters:    Size  Location     Type
 13321 ;;  baud            4   14[COMRAM] long 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;		None
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      void 
 13326 ;; Registers used:
 13327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13328 ;; Tracked objects:
 13329 ;;		On entry : 0/0
 13330 ;;		On exit  : 0/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13333 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;Total ram usage:        8 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    1
 13340 ;; This function calls:
 13341 ;;		___aldiv
 13342 ;; This function is called by:
 13343 ;;		_mainOperation
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           	psect	text32
 13348  00C4BE                     __ptext32:
 13349                           	opt stack 0
 13350  00C4BE                     _UART_Init:
 13351                           	opt stack 28
 13352                           
 13353                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 13354                           
 13355                           ;incstack = 0
 13356  00C4BE  0E00               	movlw	0
 13357  00C4C0  6E01               	movwf	___aldiv@dividend,c
 13358  00C4C2  0E5A               	movlw	90
 13359  00C4C4  6E02               	movwf	___aldiv@dividend+1,c
 13360  00C4C6  0E62               	movlw	98
 13361  00C4C8  6E03               	movwf	___aldiv@dividend+2,c
 13362  00C4CA  0E02               	movlw	2
 13363  00C4CC  6E04               	movwf	___aldiv@dividend+3,c
 13364  00C4CE  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 13365  00C4D2  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 13366  00C4D6  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 13367  00C4DA  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 13368  00C4DE  0E06               	movlw	6
 13369  00C4E0                     u6475:
 13370  00C4E0  90D8               	bcf	status,0,c
 13371  00C4E2  3613               	rlcf	??_UART_Init,f,c
 13372  00C4E4  3614               	rlcf	??_UART_Init+1,f,c
 13373  00C4E6  3615               	rlcf	??_UART_Init+2,f,c
 13374  00C4E8  3616               	rlcf	??_UART_Init+3,f,c
 13375  00C4EA  2EE8               	decfsz	wreg,f,c
 13376  00C4EC  D7F9               	goto	u6475
 13377  00C4EE  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 13378  00C4F2  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 13379  00C4F6  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 13380  00C4FA  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 13381  00C4FE  EC57  F063         	call	___aldiv	;wreg free
 13382  00C502  0401               	decf	?___aldiv,w,c
 13383  00C504  6EAF               	movwf	4015,c	;volatile
 13384                           
 13385                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 13386  00C506  9CAC               	bcf	4012,6,c	;volatile
 13387                           
 13388                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 13389  00C508  98AC               	bcf	4012,4,c	;volatile
 13390                           
 13391                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 13392  00C50A  8AAC               	bsf	4012,5,c	;volatile
 13393                           
 13394                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 13395  00C50C  9CAB               	bcf	4011,6,c	;volatile
 13396                           
 13397                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 13398  00C50E  88AB               	bsf	4011,4,c	;volatile
 13399                           
 13400                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 13401  00C510  EE20 F008          	lfsr	2,8
 13402  00C514  5075               	movf	_UART,w,c
 13403  00C516  26D9               	addwf	fsr2l,f,c
 13404  00C518  5076               	movf	_UART+1,w,c
 13405  00C51A  22DA               	addwfc	fsr2h,f,c
 13406  00C51C  0E01               	movlw	1
 13407  00C51E  6EDF               	movwf	indf2,c
 13408                           
 13409                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 13410  00C520  EE20 F009          	lfsr	2,9
 13411  00C524  5075               	movf	_UART,w,c
 13412  00C526  26D9               	addwf	fsr2l,f,c
 13413  00C528  5076               	movf	_UART+1,w,c
 13414  00C52A  22DA               	addwfc	fsr2h,f,c
 13415  00C52C  0E01               	movlw	1
 13416  00C52E  6EDF               	movwf	indf2,c
 13417                           
 13418                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 13419  00C530  0EC6               	movlw	low _arr_dataRX
 13420  00C532  0100               	movlb	0	; () banked
 13421  00C534  6FDA               	movwf	(_uart+4)& (0+255),b	;volatile
 13422  00C536  0E00               	movlw	high _arr_dataRX
 13423  00C538  6FDB               	movwf	(_uart+5)& (0+255),b	;volatile
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;UART_PIC.c: 229: TRISC6 = 0;
 13427  00C53A  9C94               	bcf	3988,6,c	;volatile
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;UART_PIC.c: 230: TRISC7 = 1;
 13431  00C53C  8E94               	bsf	3988,7,c	;volatile
 13432                           
 13433                           ; BSR set to: 0
 13434                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 13435  00C53E  8EAB               	bsf	4011,7,c	;volatile
 13436                           
 13437                           ; BSR set to: 0
 13438  00C540  0012               	return		;funcret
 13439  00C542                     __end_of_UART_Init:
 13440                           	opt stack 0
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           postdec1	equ	0xFE5
 13450                           plusw1	equ	0xFE3
 13451                           fsr1l	equ	0xFE1
 13452                           indf2	equ	0xFDF
 13453                           postinc2	equ	0xFDE
 13454                           postdec2	equ	0xFDD
 13455                           plusw2	equ	0xFDB
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460 ;; *************** function ___aldiv *****************
 13461 ;; Defined at:
 13462 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;  dividend        4    0[COMRAM] long 
 13465 ;;  divisor         4    4[COMRAM] long 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  quotient        4   10[COMRAM] long 
 13468 ;;  sign            1    9[COMRAM] unsigned char 
 13469 ;;  counter         1    8[COMRAM] unsigned char 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  4    0[COMRAM] long 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13479 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;Total ram usage:       14 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; This function calls:
 13486 ;;		Nothing
 13487 ;; This function is called by:
 13488 ;;		_UART_Init
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492                           	psect	text33
 13493  00C6AE                     __ptext33:
 13494                           	opt stack 0
 13495  00C6AE                     ___aldiv:
 13496                           	opt stack 28
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;incstack = 0
 13500  00C6AE  0E00               	movlw	0
 13501  00C6B0  6E0A               	movwf	___aldiv@sign,c
 13502  00C6B2  AE08               	btfss	___aldiv@divisor+3,7,c
 13503  00C6B4  D00A               	goto	l1181
 13504  00C6B6  1E08               	comf	___aldiv@divisor+3,f,c
 13505  00C6B8  1E07               	comf	___aldiv@divisor+2,f,c
 13506  00C6BA  1E06               	comf	___aldiv@divisor+1,f,c
 13507  00C6BC  6C05               	negf	___aldiv@divisor,c
 13508  00C6BE  0E00               	movlw	0
 13509  00C6C0  2206               	addwfc	___aldiv@divisor+1,f,c
 13510  00C6C2  2207               	addwfc	___aldiv@divisor+2,f,c
 13511  00C6C4  2208               	addwfc	___aldiv@divisor+3,f,c
 13512  00C6C6  0E01               	movlw	1
 13513  00C6C8  6E0A               	movwf	___aldiv@sign,c
 13514  00C6CA                     l1181:
 13515  00C6CA  AE04               	btfss	___aldiv@dividend+3,7,c
 13516  00C6CC  D00A               	goto	l1182
 13517  00C6CE  1E04               	comf	___aldiv@dividend+3,f,c
 13518  00C6D0  1E03               	comf	___aldiv@dividend+2,f,c
 13519  00C6D2  1E02               	comf	___aldiv@dividend+1,f,c
 13520  00C6D4  6C01               	negf	___aldiv@dividend,c
 13521  00C6D6  0E00               	movlw	0
 13522  00C6D8  2202               	addwfc	___aldiv@dividend+1,f,c
 13523  00C6DA  2203               	addwfc	___aldiv@dividend+2,f,c
 13524  00C6DC  2204               	addwfc	___aldiv@dividend+3,f,c
 13525  00C6DE  0E01               	movlw	1
 13526  00C6E0  1A0A               	xorwf	___aldiv@sign,f,c
 13527  00C6E2                     l1182:
 13528  00C6E2  0E00               	movlw	0
 13529  00C6E4  6E0B               	movwf	___aldiv@quotient,c
 13530  00C6E6  0E00               	movlw	0
 13531  00C6E8  6E0C               	movwf	___aldiv@quotient+1,c
 13532  00C6EA  0E00               	movlw	0
 13533  00C6EC  6E0D               	movwf	___aldiv@quotient+2,c
 13534  00C6EE  0E00               	movlw	0
 13535  00C6F0  6E0E               	movwf	___aldiv@quotient+3,c
 13536  00C6F2  5005               	movf	___aldiv@divisor,w,c
 13537  00C6F4  1006               	iorwf	___aldiv@divisor+1,w,c
 13538  00C6F6  1007               	iorwf	___aldiv@divisor+2,w,c
 13539  00C6F8  1008               	iorwf	___aldiv@divisor+3,w,c
 13540  00C6FA  B4D8               	btfsc	status,2,c
 13541  00C6FC  D02A               	goto	l1189
 13542  00C6FE  0E01               	movlw	1
 13543  00C700  6E09               	movwf	___aldiv@counter,c
 13544  00C702  D006               	goto	l1184
 13545  00C704  90D8               	bcf	status,0,c
 13546  00C706  3605               	rlcf	___aldiv@divisor,f,c
 13547  00C708  3606               	rlcf	___aldiv@divisor+1,f,c
 13548  00C70A  3607               	rlcf	___aldiv@divisor+2,f,c
 13549  00C70C  3608               	rlcf	___aldiv@divisor+3,f,c
 13550  00C70E  2A09               	incf	___aldiv@counter,f,c
 13551  00C710                     l1184:
 13552  00C710  AE08               	btfss	___aldiv@divisor+3,7,c
 13553  00C712  D7F8               	goto	l1185
 13554  00C714                     u6410:
 13555  00C714  90D8               	bcf	status,0,c
 13556  00C716  360B               	rlcf	___aldiv@quotient,f,c
 13557  00C718  360C               	rlcf	___aldiv@quotient+1,f,c
 13558  00C71A  360D               	rlcf	___aldiv@quotient+2,f,c
 13559  00C71C  360E               	rlcf	___aldiv@quotient+3,f,c
 13560  00C71E  5005               	movf	___aldiv@divisor,w,c
 13561  00C720  5C01               	subwf	___aldiv@dividend,w,c
 13562  00C722  5006               	movf	___aldiv@divisor+1,w,c
 13563  00C724  5802               	subwfb	___aldiv@dividend+1,w,c
 13564  00C726  5007               	movf	___aldiv@divisor+2,w,c
 13565  00C728  5803               	subwfb	___aldiv@dividend+2,w,c
 13566  00C72A  5008               	movf	___aldiv@divisor+3,w,c
 13567  00C72C  5804               	subwfb	___aldiv@dividend+3,w,c
 13568  00C72E  A0D8               	btfss	status,0,c
 13569  00C730  D009               	goto	l1188
 13570  00C732  5005               	movf	___aldiv@divisor,w,c
 13571  00C734  5E01               	subwf	___aldiv@dividend,f,c
 13572  00C736  5006               	movf	___aldiv@divisor+1,w,c
 13573  00C738  5A02               	subwfb	___aldiv@dividend+1,f,c
 13574  00C73A  5007               	movf	___aldiv@divisor+2,w,c
 13575  00C73C  5A03               	subwfb	___aldiv@dividend+2,f,c
 13576  00C73E  5008               	movf	___aldiv@divisor+3,w,c
 13577  00C740  5A04               	subwfb	___aldiv@dividend+3,f,c
 13578  00C742  800B               	bsf	___aldiv@quotient,0,c
 13579  00C744                     l1188:
 13580  00C744  90D8               	bcf	status,0,c
 13581  00C746  3208               	rrcf	___aldiv@divisor+3,f,c
 13582  00C748  3207               	rrcf	___aldiv@divisor+2,f,c
 13583  00C74A  3206               	rrcf	___aldiv@divisor+1,f,c
 13584  00C74C  3205               	rrcf	___aldiv@divisor,f,c
 13585  00C74E  2E09               	decfsz	___aldiv@counter,f,c
 13586  00C750  D7E1               	goto	u6410
 13587  00C752                     l1189:
 13588  00C752  500A               	movf	___aldiv@sign,w,c
 13589  00C754  B4D8               	btfsc	status,2,c
 13590  00C756  D008               	goto	l1190
 13591  00C758  1E0E               	comf	___aldiv@quotient+3,f,c
 13592  00C75A  1E0D               	comf	___aldiv@quotient+2,f,c
 13593  00C75C  1E0C               	comf	___aldiv@quotient+1,f,c
 13594  00C75E  6C0B               	negf	___aldiv@quotient,c
 13595  00C760  0E00               	movlw	0
 13596  00C762  220C               	addwfc	___aldiv@quotient+1,f,c
 13597  00C764  220D               	addwfc	___aldiv@quotient+2,f,c
 13598  00C766  220E               	addwfc	___aldiv@quotient+3,f,c
 13599  00C768                     l1190:
 13600  00C768  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 13601  00C76C  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 13602  00C770  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 13603  00C774  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 13604  00C778  0012               	return	
 13605  00C77A                     __end_of___aldiv:
 13606                           	opt stack 0
 13607                           tblptru	equ	0xFF8
 13608                           tblptrh	equ	0xFF7
 13609                           tblptrl	equ	0xFF6
 13610                           tablat	equ	0xFF5
 13611                           prodh	equ	0xFF4
 13612                           prodl	equ	0xFF3
 13613                           postinc0	equ	0xFEE
 13614                           wreg	equ	0xFE8
 13615                           postdec1	equ	0xFE5
 13616                           plusw1	equ	0xFE3
 13617                           fsr1l	equ	0xFE1
 13618                           indf2	equ	0xFDF
 13619                           postinc2	equ	0xFDE
 13620                           postdec2	equ	0xFDD
 13621                           plusw2	equ	0xFDB
 13622                           fsr2h	equ	0xFDA
 13623                           fsr2l	equ	0xFD9
 13624                           status	equ	0xFD8
 13625                           
 13626 ;; *************** function _initLCD *****************
 13627 ;; Defined at:
 13628 ;;		line 33 in file "standbyMode.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;		None
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;		None
 13633 ;; Return value:  Size  Location     Type
 13634 ;;                  1    wreg      void 
 13635 ;; Registers used:
 13636 ;;		wreg, status,2, status,0, cstack
 13637 ;; Tracked objects:
 13638 ;;		On entry : 0/0
 13639 ;;		On exit  : 0/0
 13640 ;;		Unchanged: 0/0
 13641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13646 ;;Total ram usage:        1 bytes
 13647 ;; Hardware stack levels used:    1
 13648 ;; Hardware stack levels required when called:    2
 13649 ;; This function calls:
 13650 ;;		_lcdInst
 13651 ;; This function is called by:
 13652 ;;		_main
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           	psect	text34
 13657  00C208                     __ptext34:
 13658                           	opt stack 0
 13659  00C208                     _initLCD:
 13660                           	opt stack 28
 13661                           
 13662                           ;standbyMode.c: 41: _delay((unsigned long)((15)*(40000000/4000.0)));
 13663                           
 13664                           ;incstack = 0
 13665  00C208  0EC3               	movlw	195
 13666  00C20A  6E04               	movwf	??_initLCD& (0+255),c
 13667  00C20C  0ECD               	movlw	205
 13668  00C20E                     u9957:
 13669  00C20E  2EE8               	decfsz	wreg,f,c
 13670  00C210  D7FE               	bra	u9957
 13671  00C212  2E04               	decfsz	??_initLCD& (0+255),f,c
 13672  00C214  D7FC               	bra	u9957
 13673  00C216  F000               	nop	
 13674                           
 13675                           ;standbyMode.c: 42: lcdInst(0b00110011);
 13676  00C218  0E33               	movlw	51
 13677  00C21A  EC3F  F060         	call	_lcdInst
 13678                           
 13679                           ;standbyMode.c: 43: lcdInst(0b00110010);
 13680  00C21E  0E32               	movlw	50
 13681  00C220  EC3F  F060         	call	_lcdInst
 13682                           
 13683                           ;standbyMode.c: 44: lcdInst(0b00101000);
 13684  00C224  0E28               	movlw	40
 13685  00C226  EC3F  F060         	call	_lcdInst
 13686                           
 13687                           ;standbyMode.c: 45: lcdInst(0b00001111);
 13688  00C22A  0E0F               	movlw	15
 13689  00C22C  EC3F  F060         	call	_lcdInst
 13690                           
 13691                           ;standbyMode.c: 46: lcdInst(0b00000110);
 13692  00C230  0E06               	movlw	6
 13693  00C232  EC3F  F060         	call	_lcdInst
 13694                           
 13695                           ;standbyMode.c: 47: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13696  00C236  0E01               	movlw	1
 13697  00C238  EC3F  F060         	call	_lcdInst
 13698  00C23C  0EC3               	movlw	195
 13699  00C23E  6E04               	movwf	??_initLCD& (0+255),c
 13700  00C240  0ECD               	movlw	205
 13701  00C242                     u9967:
 13702  00C242  2EE8               	decfsz	wreg,f,c
 13703  00C244  D7FE               	bra	u9967
 13704  00C246  2E04               	decfsz	??_initLCD& (0+255),f,c
 13705  00C248  D7FC               	bra	u9967
 13706  00C24A  F000               	nop	
 13707                           
 13708                           ;standbyMode.c: 50: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 13709  00C24C  0E0F               	movlw	15
 13710  00C24E  EC3F  F060         	call	_lcdInst
 13711  00C252  0012               	return		;funcret
 13712  00C254                     __end_of_initLCD:
 13713                           	opt stack 0
 13714                           tblptru	equ	0xFF8
 13715                           tblptrh	equ	0xFF7
 13716                           tblptrl	equ	0xFF6
 13717                           tablat	equ	0xFF5
 13718                           prodh	equ	0xFF4
 13719                           prodl	equ	0xFF3
 13720                           postinc0	equ	0xFEE
 13721                           wreg	equ	0xFE8
 13722                           postdec1	equ	0xFE5
 13723                           plusw1	equ	0xFE3
 13724                           fsr1l	equ	0xFE1
 13725                           indf2	equ	0xFDF
 13726                           postinc2	equ	0xFDE
 13727                           postdec2	equ	0xFDD
 13728                           plusw2	equ	0xFDB
 13729                           fsr2h	equ	0xFDA
 13730                           fsr2l	equ	0xFD9
 13731                           status	equ	0xFD8
 13732                           
 13733 ;; *************** function _lcdInst *****************
 13734 ;; Defined at:
 13735 ;;		line 19 in file "standbyMode.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  data            1    wreg     unsigned char 
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;  data            1    2[COMRAM] unsigned char 
 13740 ;; Return value:  Size  Location     Type
 13741 ;;                  1    wreg      void 
 13742 ;; Registers used:
 13743 ;;		wreg, status,2, status,0, cstack
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13752 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13753 ;;Total ram usage:        1 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    1
 13756 ;; This function calls:
 13757 ;;		_lcdNibble
 13758 ;; This function is called by:
 13759 ;;		_main
 13760 ;;		_initLCD
 13761 ;;		_viewLogs
 13762 ;;		_displayLogs
 13763 ;;		_food_press
 13764 ;;		_diet_press
 13765 ;;		_which_drawer
 13766 ;;		_standbyMode
 13767 ;; This function uses a non-reentrant model
 13768 ;;
 13769                           
 13770                           	psect	text35
 13771  00C07E                     __ptext35:
 13772                           	opt stack 0
 13773  00C07E                     _lcdInst:
 13774                           	opt stack 27
 13775                           
 13776                           ;incstack = 0
 13777                           ;lcdInst@data stored from wreg
 13778  00C07E  6E03               	movwf	lcdInst@data,c
 13779                           
 13780                           ;standbyMode.c: 27: LATDbits.LATD2 = 0;
 13781  00C080  948C               	bcf	3980,2,c	;volatile
 13782                           
 13783                           ;standbyMode.c: 28: lcdNibble(data);
 13784  00C082  5003               	movf	lcdInst@data,w,c
 13785  00C084  ECDF  F061         	call	_lcdNibble
 13786                           
 13787                           ;standbyMode.c: 29: _delay((unsigned long)((100)*(40000000/4000000.0)));
 13788  00C088  0EC8               	movlw	200
 13789  00C08A                     u9977:
 13790  00C08A  D000               	nop2	
 13791  00C08C  2EE8               	decfsz	wreg,f,c
 13792  00C08E  D7FD               	bra	u9977
 13793  00C090  0012               	return		;funcret
 13794  00C092                     __end_of_lcdInst:
 13795                           	opt stack 0
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           postinc0	equ	0xFEE
 13803                           wreg	equ	0xFE8
 13804                           postdec1	equ	0xFE5
 13805                           plusw1	equ	0xFE3
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           postdec2	equ	0xFDD
 13810                           plusw2	equ	0xFDB
 13811                           fsr2h	equ	0xFDA
 13812                           fsr2l	equ	0xFD9
 13813                           status	equ	0xFD8
 13814                           
 13815 ;; *************** function _lcdNibble *****************
 13816 ;; Defined at:
 13817 ;;		line 54 in file "standbyMode.c"
 13818 ;; Parameters:    Size  Location     Type
 13819 ;;  data            1    wreg     unsigned char 
 13820 ;; Auto vars:     Size  Location     Type
 13821 ;;  data            1    1[COMRAM] unsigned char 
 13822 ;;  temp            1    0[COMRAM] unsigned char 
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      void 
 13825 ;; Registers used:
 13826 ;;		wreg, status,2, status,0
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13833 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13836 ;;Total ram usage:        2 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; This function calls:
 13839 ;;		Nothing
 13840 ;; This function is called by:
 13841 ;;		_lcdInst
 13842 ;;		_putch
 13843 ;; This function uses a non-reentrant model
 13844 ;;
 13845                           
 13846                           	psect	text36
 13847  00C3BE                     __ptext36:
 13848                           	opt stack 0
 13849  00C3BE                     _lcdNibble:
 13850                           	opt stack 27
 13851                           
 13852                           ;incstack = 0
 13853                           ;lcdNibble@data stored from wreg
 13854  00C3BE  6E02               	movwf	lcdNibble@data,c
 13855                           
 13856                           ;standbyMode.c: 62: char temp = (unsigned char) (data & 0xF0);
 13857  00C3C0  5002               	movf	lcdNibble@data,w,c
 13858  00C3C2  0BF0               	andlw	240
 13859  00C3C4  6E01               	movwf	lcdNibble@temp,c
 13860                           
 13861                           ;standbyMode.c: 63: LATD = (unsigned char) (LATD & 0x0F);
 13862  00C3C6  508C               	movf	3980,w,c	;volatile
 13863  00C3C8  0B0F               	andlw	15
 13864  00C3CA  6E8C               	movwf	3980,c	;volatile
 13865                           
 13866                           ;standbyMode.c: 64: LATD = (unsigned char) (temp | LATD);
 13867  00C3CC  5001               	movf	lcdNibble@temp,w,c
 13868  00C3CE  108C               	iorwf	3980,w,c	;volatile
 13869  00C3D0  6E8C               	movwf	3980,c	;volatile
 13870                           
 13871                           ;standbyMode.c: 66: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13872  00C3D2  0E00               	movlw	0
 13873  00C3D4  BEF2               	btfsc	intcon,7,c	;volatile
 13874  00C3D6  0E01               	movlw	1
 13875  00C3D8  6E72               	movwf	standbyMode@LCDinterruptState,c
 13876  00C3DA  9EF2               	bcf	intcon,7,c	;volatile
 13877  00C3DC  868C               	bsf	3980,3,c	;volatile
 13878  00C3DE  0E53               	movlw	83
 13879  00C3E0                     u9987:
 13880  00C3E0  2EE8               	decfsz	wreg,f,c
 13881  00C3E2  D7FE               	bra	u9987
 13882  00C3E4  F000               	nop	
 13883  00C3E6  968C               	bcf	3980,3,c	;volatile
 13884  00C3E8  0EC8               	movlw	200
 13885  00C3EA                     u9997:
 13886  00C3EA  D000               	nop2	
 13887  00C3EC  2EE8               	decfsz	wreg,f,c
 13888  00C3EE  D7FD               	bra	u9997
 13889  00C3F0  B072               	btfsc	standbyMode@LCDinterruptState,0,c
 13890  00C3F2  D002               	bra	u4615
 13891  00C3F4  9EF2               	bcf	intcon,7,c	;volatile
 13892  00C3F6  D001               	bra	u4616
 13893  00C3F8                     u4615:
 13894  00C3F8  8EF2               	bsf	intcon,7,c	;volatile
 13895  00C3FA                     u4616:
 13896                           
 13897                           ;standbyMode.c: 69: data = (unsigned char) (data << 4);
 13898  00C3FA  3802               	swapf	lcdNibble@data,w,c
 13899  00C3FC  0BF0               	andlw	240
 13900  00C3FE  6E02               	movwf	lcdNibble@data,c
 13901                           
 13902                           ;standbyMode.c: 70: temp = (unsigned char) (data & 0xF0);
 13903  00C400  5002               	movf	lcdNibble@data,w,c
 13904  00C402  0BF0               	andlw	240
 13905  00C404  6E01               	movwf	lcdNibble@temp,c
 13906                           
 13907                           ;standbyMode.c: 71: LATD = (unsigned char) (LATD & 0x0F);
 13908  00C406  508C               	movf	3980,w,c	;volatile
 13909  00C408  0B0F               	andlw	15
 13910  00C40A  6E8C               	movwf	3980,c	;volatile
 13911                           
 13912                           ;standbyMode.c: 72: LATD = (unsigned char) (temp | LATD);
 13913  00C40C  5001               	movf	lcdNibble@temp,w,c
 13914  00C40E  108C               	iorwf	3980,w,c	;volatile
 13915  00C410  6E8C               	movwf	3980,c	;volatile
 13916                           
 13917                           ;standbyMode.c: 74: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 13918  00C412  0E00               	movlw	0
 13919  00C414  BEF2               	btfsc	intcon,7,c	;volatile
 13920  00C416  0E01               	movlw	1
 13921  00C418  6E72               	movwf	standbyMode@LCDinterruptState,c
 13922  00C41A  9EF2               	bcf	intcon,7,c	;volatile
 13923  00C41C  868C               	bsf	3980,3,c	;volatile
 13924  00C41E  0E53               	movlw	83
 13925  00C420                     u10007:
 13926  00C420  2EE8               	decfsz	wreg,f,c
 13927  00C422  D7FE               	bra	u10007
 13928  00C424  F000               	nop	
 13929  00C426  968C               	bcf	3980,3,c	;volatile
 13930  00C428  0EC8               	movlw	200
 13931  00C42A                     u10017:
 13932  00C42A  D000               	nop2	
 13933  00C42C  2EE8               	decfsz	wreg,f,c
 13934  00C42E  D7FD               	bra	u10017
 13935  00C430  B072               	btfsc	standbyMode@LCDinterruptState,0,c
 13936  00C432  D002               	bra	u4625
 13937  00C434  9EF2               	bcf	intcon,7,c	;volatile
 13938  00C436  D001               	bra	u4626
 13939  00C438                     u4625:
 13940  00C438  8EF2               	bsf	intcon,7,c	;volatile
 13941  00C43A                     u4626:
 13942  00C43A  0012               	return		;funcret
 13943  00C43C                     __end_of_lcdNibble:
 13944                           	opt stack 0
 13945                           tblptru	equ	0xFF8
 13946                           tblptrh	equ	0xFF7
 13947                           tblptrl	equ	0xFF6
 13948                           tablat	equ	0xFF5
 13949                           prodh	equ	0xFF4
 13950                           prodl	equ	0xFF3
 13951                           intcon	equ	0xFF2
 13952                           postinc0	equ	0xFEE
 13953                           wreg	equ	0xFE8
 13954                           postdec1	equ	0xFE5
 13955                           plusw1	equ	0xFE3
 13956                           fsr1l	equ	0xFE1
 13957                           indf2	equ	0xFDF
 13958                           postinc2	equ	0xFDE
 13959                           postdec2	equ	0xFDD
 13960                           plusw2	equ	0xFDB
 13961                           fsr2h	equ	0xFDA
 13962                           fsr2l	equ	0xFD9
 13963                           status	equ	0xFD8
 13964                           
 13965 ;; *************** function _initEEPROM *****************
 13966 ;; Defined at:
 13967 ;;		line 40 in file "EEPROMstorage.c"
 13968 ;; Parameters:    Size  Location     Type
 13969 ;;		None
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;  i               2    2[COMRAM] unsigned int 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      void 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0, cstack
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13982 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13985 ;;Total ram usage:        2 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    1
 13988 ;; This function calls:
 13989 ;;		_writeEEPROM
 13990 ;; This function is called by:
 13991 ;;		_main
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           	psect	text37
 13996  00C112                     __ptext37:
 13997                           	opt stack 0
 13998  00C112                     _initEEPROM:
 13999                           	opt stack 29
 14000                           
 14001                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 14002                           
 14003                           ;incstack = 0
 14004  00C112  0E00               	movlw	0
 14005  00C114  6E04               	movwf	initEEPROM@i+1,c
 14006  00C116  0E00               	movlw	0
 14007  00C118  6E03               	movwf	initEEPROM@i,c
 14008                           
 14009                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 14010  00C11A  0E00               	movlw	0
 14011  00C11C  6E04               	movwf	initEEPROM@i+1,c
 14012  00C11E  0E00               	movlw	0
 14013  00C120  6E03               	movwf	initEEPROM@i,c
 14014  00C122                     l6992:
 14015  00C122  0404               	decf	initEEPROM@i+1,w,c
 14016  00C124  B0D8               	btfsc	status,0,c
 14017  00C126  0012               	return	
 14018                           
 14019                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 14020  00C128  0E00               	movlw	0
 14021  00C12A  6E01               	movwf	writeEEPROM@data,c
 14022  00C12C  5003               	movf	initEEPROM@i,w,c
 14023  00C12E  ECAF  F060         	call	_writeEEPROM
 14024  00C132  4A03               	infsnz	initEEPROM@i,f,c
 14025  00C134  2A04               	incf	initEEPROM@i+1,f,c
 14026  00C136  D7F5               	goto	l6992
 14027  00C138                     __end_of_initEEPROM:
 14028                           	opt stack 0
 14029                           tblptru	equ	0xFF8
 14030                           tblptrh	equ	0xFF7
 14031                           tblptrl	equ	0xFF6
 14032                           tablat	equ	0xFF5
 14033                           prodh	equ	0xFF4
 14034                           prodl	equ	0xFF3
 14035                           intcon	equ	0xFF2
 14036                           postinc0	equ	0xFEE
 14037                           wreg	equ	0xFE8
 14038                           postdec1	equ	0xFE5
 14039                           plusw1	equ	0xFE3
 14040                           fsr1l	equ	0xFE1
 14041                           indf2	equ	0xFDF
 14042                           postinc2	equ	0xFDE
 14043                           postdec2	equ	0xFDD
 14044                           plusw2	equ	0xFDB
 14045                           fsr2h	equ	0xFDA
 14046                           fsr2l	equ	0xFD9
 14047                           status	equ	0xFD8
 14048                           
 14049 ;; *************** function _writeEEPROM *****************
 14050 ;; Defined at:
 14051 ;;		line 10 in file "EEPROMstorage.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;  address         1    wreg     unsigned char 
 14054 ;;  data            1    0[COMRAM] unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  address         1    1[COMRAM] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;                  1    wreg      void 
 14059 ;; Registers used:
 14060 ;;		wreg, status,2
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14066 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14069 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14070 ;;Total ram usage:        2 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; This function calls:
 14073 ;;		Nothing
 14074 ;; This function is called by:
 14075 ;;		_standbyMode
 14076 ;;		_initEEPROM
 14077 ;;		_shiftEEPROM
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text38
 14082  00C15E                     __ptext38:
 14083                           	opt stack 0
 14084  00C15E                     _writeEEPROM:
 14085                           	opt stack 29
 14086                           
 14087                           ;incstack = 0
 14088                           ;writeEEPROM@address stored from wreg
 14089  00C15E  6E02               	movwf	writeEEPROM@address,c
 14090  00C160                     
 14091                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 14092  00C160  B2A6               	btfsc	4006,1,c	;volsfr
 14093  00C162  D7FE               	goto	l5746
 14094                           
 14095                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 14096  00C164  84A6               	bsf	4006,2,c	;volsfr
 14097                           
 14098                           ;EEPROMstorage.c: 14: EEADR=address;
 14099  00C166  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 14100                           
 14101                           ;EEPROMstorage.c: 15: EEDATA=data;
 14102  00C16A  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 14103                           
 14104                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 14105  00C16E  9EA6               	bcf	4006,7,c	;volsfr
 14106                           
 14107                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 14108  00C170  9CA6               	bcf	4006,6,c	;volsfr
 14109                           
 14110                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 14111  00C172  9EF2               	bcf	intcon,7,c	;volatile
 14112                           
 14113                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 14114  00C174  0E55               	movlw	85
 14115  00C176  6EA7               	movwf	4007,c	;volsfr
 14116                           
 14117                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 14118  00C178  0EAA               	movlw	170
 14119  00C17A  6EA7               	movwf	4007,c	;volsfr
 14120                           
 14121                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 14122  00C17C  82A6               	bsf	4006,1,c	;volsfr
 14123                           
 14124                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 14125  00C17E  8EF2               	bsf	intcon,7,c	;volatile
 14126  00C180  B2A6               	btfsc	4006,1,c	;volsfr
 14127  00C182  D7FE               	goto	l849
 14128                           
 14129                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 14130  00C184  94A6               	bcf	4006,2,c	;volsfr
 14131  00C186  0012               	return		;funcret
 14132  00C188                     __end_of_writeEEPROM:
 14133                           	opt stack 0
 14134                           tblptru	equ	0xFF8
 14135                           tblptrh	equ	0xFF7
 14136                           tblptrl	equ	0xFF6
 14137                           tablat	equ	0xFF5
 14138                           prodh	equ	0xFF4
 14139                           prodl	equ	0xFF3
 14140                           intcon	equ	0xFF2
 14141                           postinc0	equ	0xFEE
 14142                           wreg	equ	0xFE8
 14143                           postdec1	equ	0xFE5
 14144                           plusw1	equ	0xFE3
 14145                           fsr1l	equ	0xFE1
 14146                           indf2	equ	0xFDF
 14147                           postinc2	equ	0xFDE
 14148                           postdec2	equ	0xFDD
 14149                           plusw2	equ	0xFDB
 14150                           fsr2h	equ	0xFDA
 14151                           fsr2l	equ	0xFD9
 14152                           status	equ	0xFD8
 14153                           tblptru	equ	0xFF8
 14154                           tblptrh	equ	0xFF7
 14155                           tblptrl	equ	0xFF6
 14156                           tablat	equ	0xFF5
 14157                           prodh	equ	0xFF4
 14158                           prodl	equ	0xFF3
 14159                           intcon	equ	0xFF2
 14160                           postinc0	equ	0xFEE
 14161                           wreg	equ	0xFE8
 14162                           postdec1	equ	0xFE5
 14163                           plusw1	equ	0xFE3
 14164                           fsr1l	equ	0xFE1
 14165                           indf2	equ	0xFDF
 14166                           postinc2	equ	0xFDE
 14167                           postdec2	equ	0xFDD
 14168                           plusw2	equ	0xFDB
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8
 14172                           
 14173                           	psect	rparam
 14174  0000                     tblptru	equ	0xFF8
 14175                           tblptrh	equ	0xFF7
 14176                           tblptrl	equ	0xFF6
 14177                           tablat	equ	0xFF5
 14178                           prodh	equ	0xFF4
 14179                           prodl	equ	0xFF3
 14180                           intcon	equ	0xFF2
 14181                           postinc0	equ	0xFEE
 14182                           wreg	equ	0xFE8
 14183                           postdec1	equ	0xFE5
 14184                           plusw1	equ	0xFE3
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           plusw2	equ	0xFDB
 14190                           fsr2h	equ	0xFDA
 14191                           fsr2l	equ	0xFD9
 14192                           status	equ	0xFD8


Data Sizes:
    Strings     743
    Constant    65
    Data        68
    BSS         145
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    103     122
    BANK0           128      0      98
    BANK1           256    138     234
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    displayLogs$1883	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), 

    displayLogs$1882	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_103(CODE[7]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_102(CODE[11]), STR_101(CODE[13]), STR_100(CODE[11]), STR_99(CODE[13]), 
		 -> STR_98(CODE[11]), STR_97(CODE[8]), STR_96(CODE[15]), STR_95(CODE[16]), 
		 -> STR_94(CODE[10]), STR_93(CODE[8]), STR_92(CODE[15]), STR_91(CODE[16]), 
		 -> STR_90(CODE[10]), STR_89(CODE[16]), STR_88(CODE[16]), STR_87(CODE[17]), 
		 -> STR_86(CODE[13]), STR_85(CODE[17]), STR_84(CODE[14]), STR_83(CODE[11]), 
		 -> STR_82(CODE[11]), STR_81(CODE[15]), STR_80(CODE[15]), STR_79(CODE[10]), 
		 -> STR_78(CODE[13]), STR_77(CODE[16]), STR_76(CODE[16]), STR_75(CODE[17]), 
		 -> STR_74(CODE[17]), STR_73(CODE[8]), STR_72(CODE[15]), STR_71(CODE[15]), 
		 -> STR_70(CODE[11]), STR_69(CODE[14]), STR_68(CODE[16]), STR_67(CODE[16]), 
		 -> STR_66(CODE[11]), STR_65(CODE[14]), STR_64(CODE[16]), STR_63(CODE[16]), 
		 -> STR_62(CODE[16]), STR_61(CODE[13]), STR_60(CODE[5]), STR_59(CODE[11]), 
		 -> STR_58(CODE[15]), STR_57(CODE[17]), STR_56(CODE[18]), STR_55(CODE[15]), 
		 -> STR_54(CODE[11]), STR_53(CODE[7]), STR_52(CODE[3]), STR_51(CODE[16]), 
		 -> STR_50(CODE[8]), STR_49(CODE[16]), STR_48(CODE[15]), STR_47(CODE[6]), 
		 -> STR_46(CODE[14]), STR_45(CODE[17]), STR_44(CODE[7]), STR_43(CODE[9]), 
		 -> STR_42(CODE[17]), STR_41(CODE[11]), STR_40(CODE[17]), STR_39(CODE[14]), 
		 -> STR_38(CODE[17]), STR_37(CODE[11]), STR_36(CODE[15]), STR_35(CODE[11]), 
		 -> STR_34(CODE[8]), STR_2(CODE[16]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK0[12]), 

    S87$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK0[16]), 

    S87$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_UART_Init
    _UART_Init->___aldiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  102533
                                             97 COMRAM     6     6      0
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        142   140      2   89542
                                             93 COMRAM     4     2      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   11777
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   27077
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   15688
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   14672
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   13130
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   10544
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2639
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                        0     0      0     550
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _UART_Init
       ___aldiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     8A      EA       7       91.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      62       5       76.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     67      7A       1       96.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C6      34        0.0%
DATA                 0      0     1C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar  6 19:32:27 2018

                 _standbyMode EFF2        __end_of_verifyKeypress C2F8                  ?_displayLogs 0029  
                          l61 C836                   __CFG_CPD$ON 000000           ___wmul@multiplicand 0003  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l220 EFE8  
                         l301 EE0E                           l221 E57A                           l222 E594  
                         l215 EF60                           l303 EE62                           l231 E606  
                         l240 E6F8                           l232 E634                           l216 E542  
                         l305 EEB6                           l225 E5B2                           l217 E55C  
                         l313 CA4A                           l250 E7E6                           l242 E728  
                         l234 E664                           l226 E5CC                           l307 EF0A  
                         l315 CB0C                           l260 E8E0                           l252 E814  
                         l244 E758                           l236 E694                           l228 E5E8  
                         l316 CA30                           l341 CA3A                           l501 D370  
                         l254 E842                           l246 E786                           l350 CA1C  
                         l430 D432                           l271 EA26                           l263 E922  
                         l239 E6CA                           l351 C948                           l423 C2DC  
                         l280 EB6C                           l272 EA66                           l264 E962  
                         l256 E870                           l344 CA42                           l512 E12E  
                         l424 C2C2                           l249 E7BA                           l505 D3AC  
                         l521 E2BE                           l425 C2D8                           l433 D4DE  
                         l282 EBAE                           l274 EAA8                           l530 E3A8  
                         l522 E302                           l450 D5E6                           l611 DC22  
                         l603 DAFE                           l291 ECB4                           l267 E9A4  
                         l259 E8A0                           l419 CB3A                           l515 E1C6  
                         l443 D570                           l435 D4D8                           l604 DAFE  
                         l292 ECF4                           l284 EBF0                           l276 EAEA  
                         l268 E9E4                           l348 C95A                           l532 E3C4  
                         l700 C89E                           l613 DB28                           l349 C940  
                         l517 E236                           l701 C8A6                           l630 DCB0  
                         l294 ED36                           l542 E52A                           l454 D680  
                         l438 D564                           l702 C8AE                           l615 DB8A  
                         l287 EC32                           l279 EB2C                           l383 CB42  
                         l463 D1AE                           l527 E36A                           l519 E27A  
                         l703 C8B6                           l640 DD90                           l632 DCDC  
                         l624 DC32                           l608 DB0A                           l296 ED78  
                         l288 EC72                           l392 CB28                           l536 E4C4  
                         l704 C8C0                           l720 D0EC                           l800 F7D2  
                         l553 C604                           l385 CC22                           l481 D258  
                         l473 D212                           l449 D5DA                           l713 CF9C  
                         l650 DE76                           l642 DDBE                           l634 DD08  
                         l626 DC5C                           l618 DBD2                           l562 C614  
                         l458 D186                           l299 EDBA                           l547 C624  
                         l555 C60C                           l379 C952                           l395 CB30  
                         l467 D1C2                           l539 E51E                           l723 D0A6  
                         l811 F94A                           l660 DF68                           l652 DEA6  
                         l644 DDEC                           l636 DD34                           l628 DC86  
                         l548 C5FA                           l388 CB20                           l716 D12E  
                         l724 D074                           l708 CF90                           l812 F984  
                         l804 F838                           l661 DFBC                           l549 C6A4  
                         l493 D316                           l485 D280                           l477 D230  
                         l469 D1EA                           l813 FAA4                           l805 F90A  
                         l670 CC4E                           l654 DED6                           l646 DE1A  
                         l638 DD62                           l582 CEBE                           l574 CDC6  
                         l734 D0E8                           l718 CFBA                           l822 FB3E  
                         l806 F8AC                           l671 CC56                           l567 C61C  
                         l807 F8FE                           l680 CC9E                           l672 CC5E  
                         l656 DF06                           l648 DE48                           l584 CDF0  
                         l824 FC7A                           l665 CCC8                           l681 CCA6  
                         l673 CC66                           l593 CED0                           l497 D33E  
                         l489 D2D0                           l682 CCAE                           l674 CC6E  
                         l666 CC36                           l658 DF36                           l586 CE5C  
                         l690 C856                           l818 FBAA                           l762 F3BC  
                         l683 CCB6                           l675 CC76                           l667 CD46  
                         l579 CDD2                           l691 C92C                           l739 D142  
                         l819 FAFA                           l771 F440                           l684 CCBE  
                         l676 CC7E                           l668 CC3E                           l596 CF40  
                         l692 C85E                           l780 F784                           l677 CC86  
                         l669 CC46                           l693 C866                           l829 FC1E  
                         l765 F3CA                           l757 F150                           l678 CC8E  
                         l694 C86E                           l782 F4CE                           l679 CC96  
                         l871 C5EE                           l695 C876                           l767 FBB4  
                         l775 F47A                           l696 C87E                           l849 C180  
                         l689 C8CA                           l697 C886                           l769 F792  
                         l793 F63E                           l698 C88E                           l794 F678  
                         l786 F52C                           l778 F488                           l699 C896  
                         l787 F5FE                           l796 F78C                           l788 F5A0  
                         l797 FA90                           l789 F5F2                  __CFG_CPB$OFF 000000  
                         wreg 000FE8                 _mainOperation C0BA                  __CFG_LVP$OFF 000000  
         standbyMode@dietType 0130                  __CFG_WDT$OFF 000000                          l1100 D8D2  
                        l1120 D9BE                          l1104 D932                          l1121 DA6A  
                        l1105 D956                          l1122 DA08                          l1106 D95E  
                        l1107 D98A                          l1116 D9B8                          l1108 D974  
                        l1060 D6BC                          l1117 DA70                          l1070 D81E  
                        l1062 D6D0                          l1119 DA5A                          l1063 D6CA  
                        l1080 D79A                          l1082 D7D4                          l1091 D882  
                        l1075 D854                          l1059 D6AC                          l1084 D7E4  
                        l1076 D764                          l1068 D702                          l1181 C6CA  
                        l1085 D7DE                          l1077 D768                          l1190 C768  
                        l1182 C6E2                          l1094 D908                          l1078 D790  
                        l1095 D89C                          l1087 D80C                          l1079 D79E  
                        l1184 C710                          l1088 D7F6                          l1185 C704  
                        l1099 D918                          l1188 C744                          l1189 C752  
                        l1534 C272                          l1535 C26A                          l1455 C0E6  
                        l1544 C1DC                          l1481 C46A                          l1545 C1D4  
                        l1482 C45E                          l1538 C292                          l1539 C29C  
                        l1548 C1F4                          l1485 C49E                          l1549 C1FE  
                        l1486 C4AC                          l5042 D7DE                          l5046 D7F6  
                        l5072 D8A0                          l5154 C0A8                          l5086 D8D6  
                        l5506 C2D8                          l7210 F532                          l7106 F272  
                        l7300 F7E2                          l7206 F52C                          l7312 F838  
                        l5650 E4D2                          l6532 DBCC                          l7316 F83E  
                        l7424 FBAA                          l7096 F24A                          l5746 C160  
                        l7194 F4D6                          l6940 C55A                          l6950 C586  
                        l6952 C58E                          l6962 C5BA                          l6964 C5C2  
                        _ADON 007E10                          l6992 C122                          STR_1 FF9C  
                        STR_2 FE31                          STR_3 FFFD                          STR_4 FFE9  
                        STR_5 FFC0                          STR_6 FFEC                          STR_7 FFF4  
                        STR_8 FFBF                          STR_9 FFEB                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u7000 D366                          u6300 E4C8  
                        u6310 E4D2                          u4615 C3F8                          u4616 C3FA  
                        u4625 C438                          u4626 C43A                          u6410 C714  
                        u7130 CE04                          u7050 D3A2                          _RCIE 007CED  
                        u4660 C276                          _RCIF 007CF5                          u7061 CD9A  
                        u6280 E3C2                          u6450 C46E                          u4690 C1E0  
                        u4940 D992                          u7260 DBA6                          u6620 D17C  
                        u8140 D006                          u7181 DAEE                          u4950 D9A6  
                        u8230 D04C                          u6800 D276                          u6720 D208  
                        u6560 D590                          u4970 DA78                          u6650 D1A4  
                        u6475 C4E0                          u8315 C32C                          u8411 EFFC  
                        u6740 D226                          u8340 C586                          u8325 C10A  
                        u8421 F00E                          u8326 C10C                          u6590 D684  
                        u8270 D0BC                          u9207 F0E8                          u8431 F020  
                        u8360 C5BA                          u8280 D0E4                          u8520 F3D8  
                        u9217 F10E                          u8441 F032                          u6930 D30C  
                        u6770 D24E                          u6690 D1E0                          u8530 F3E0  
                        u9307 F37A                          u9227 F128                          u8451 F044  
                        u8620 F532                          u8540 F3EC                          u9317 F394  
                        u9237 F160                          u8461 F056                          u6870 D2C6  
                        u9407 F60A                          u9327 F3F8                          u9247 F198  
                        u6960 D334                          u8720 F83E                          u9417 F79E  
                        u9337 F430                          u9257 F28C                          u9177 C7B6  
                        u8810 FADC                          u8570 F496                          u8490 F272  
                        u9507 FC62                          u9427 F85A                          u9347 F44C  
                        u9267 F2BE                          u9187 C808                          u8820 FBAA  
                        u9517 FC86                          u9437 F892                          u9357 F4A2  
                        u9277 F2D8                          u9197 C828                          u8830 FBBC  
                        u9607 D4CA                          u9527 FCBE                          u9447 F8B8  
                        u9367 F54E                          u9287 F32E                          u9617 D4EA  
                        u9537 CF5C                          u9457 F8F0                          u9377 F586  
                        u9297 F348                          u9707 E120                          u9627 D522  
                        u9547 D100                          u9467 F916                          u9387 F5AC  
                        u9717 E176                          u9637 D53C                          u9557 D3E8  
                        u9477 FBEA                          u9397 F5E4                          u9807 E37A  
                        u9727 E1B8                          u9647 D5F0                          u9567 D41A  
                        u9487 FC10                          u9817 E39A                          u9737 E1D6  
                        u9657 D608                          u9577 D44C                          u9497 FC2A  
                        u9907 DAA0                          u9827 E3D0                          u9747 E228  
                        u9667 D628                          u9587 D47E                          _UART 0075  
                        u9917 DB3C                          u9837 E4B6                          u9757 E26C  
                        u9677 D640                          u9597 D498                          u9927 DF74  
                        u9847 E4DE                          u9767 E2B0                          u9687 D672  
                        u9937 DFA6                          u9857 E510                          u9777 E2F4  
                        u9697 E0D6                          u9947 C09E                          u9867 CD5C  
                        u9787 E312                          u9957 C20E                          u9877 CE70  
                        u9797 E35C                          u9967 C242                          u9887 CF00  
                        u9977 C08A                          u9897 CF32                          u9987 C3E0  
                        u9997 C3EA                          _TRMT 007D61                          _TXIE 007CEC  
                        _TXIF 007CF4         __end_of_decode_drawer C936           standbyMode@foodType 0140  
           viewLogs@logNumber 005C                          _main C77A                          _keys FCD7  
             food_press@F3134 0068                          _uart 00D6                          fsr2h 000FDA  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
               get_digits@sum 0001                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000             viewLogs@keypress2 005D  
         standbyMode@keypress 016B                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
                 _writeEEPROM C15E               diet_press@F3149 00BE               ?_verifyKeypress 0001  
            __end_of_LCD_LEFT FD13           standbyMode@whichKey 0169               food_press@count 0035  
             food_press@tally 002F         I2C_Master_Read@ackBit 0002              ?_I2C_Master_Init 000E  
            ?_I2C_Master_Read 0001              ?_I2C_Master_Wait 0001              ?_I2C_Master_Stop 0001  
             __end_of___aldiv C77A            writeEEPROM@address 0002                         ?_main 0001  
                       _EEADR 000FA9                         STR_10 FFF3                         STR_11 FFE7  
                       STR_20 FFCC                         STR_12 FFEF                         STR_21 FFBB  
                       STR_13 FFC3                         STR_30 FFE3                         STR_22 FFE5  
                       STR_14 FFBE                         STR_31 FFDF                         STR_23 FFFB  
                       STR_15 FFC8                         STR_40 FD90                         STR_32 FFDB  
                       STR_24 FFBA                         STR_16 FFC2                         STR_41 FF30  
                       STR_33 FFB8                         STR_25 FFE4                         STR_17 FFBD  
                       STR_34 FF94                         STR_50 FF8C                         STR_42 FD5D  
                       STR_26 FFFA                         STR_18 FFC7                         STR_43 FF7B  
                       STR_35 FF30                         STR_51 FDE1                         STR_27 FFE0  
                       STR_19 FFD1                         STR_52 FE7A                         STR_60 FFD6  
                       STR_44 FFAB                         STR_36 FE5F                         STR_28 FFF7  
                       STR_37 FF30                         STR_53 FE76                         STR_45 FD7F  
                       STR_61 FF0B                         STR_29 FFB9                         STR_46 FED5  
                       STR_70 FF46                         STR_54 FE72                         STR_62 FE21  
                       STR_38 FD7F                         STR_47 FFB2                         STR_39 FED5  
                       STR_55 FE6E                         STR_71 FE41                         STR_63 FDC1  
                       STR_64 FDC1                         STR_72 FE41                         STR_80 FE8C  
                       STR_48 FE7D                         STR_56 FD18                         STR_73 FF9C  
                       STR_65 FEB9                         STR_81 FE9B                         STR_49 FDD1  
                       STR_57 FD6E                         STR_74 FD7F                         STR_90 FF71  
                       STR_82 FF5C                         STR_66 FF46                         STR_58 FE50  
                       STR_59 FF51                         STR_83 FF25                         STR_67 FDF1  
                       STR_91 FDB1                         STR_75 FD4C                         STR_68 FDF1  
                       STR_84 FEE3                         STR_92 FEAA                         STR_76 FE11  
                       STR_85 FD4C                         STR_93 FF84                         STR_69 FEC7  
                       STR_77 FDA1                         STR_94 FF71                         STR_78 FF18  
                       STR_86 FEFE                         STR_95 FDB1                         STR_79 FF67  
                       STR_87 FD3B                         STR_96 FEAA                         STR_88 FE01  
                       STR_97 FF84                         STR_89 FE21                         STR_98 FF3B  
                       STR_99 FEF1               __end_of___lldiv C4BE                         u10007 C420  
                       u10017 C42A             viewLogs@returnVal 0058               __end_of___lwdiv C2A6  
             __end_of___lwmod C208                         _RCREG 000FAE                         _SPBRG 000FAF  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
              ?_mainOperation 0001                         _TXREG 000FAD                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
             __end_of_getFlat CA26                 __CFG_WRT3$OFF 000000               diet_press@count 0033  
             __end_of_lcdInst C092               __end_of_getLong CC2C                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000            __size_of_UART_Init 0084                   initEEPROM@i 0003  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD C254                __CFG_EBTRB$OFF 000000          __size_of_decode_diet 0124  
             __end_of_dpowers FD03            printFoodInput@food 0001                  displayLogs@i 0046  
                displayLogs@n 0050               __end_of_isdigit C0EE                         _input FCE8  
                       _rowUp 007A                         _putch C092                         tablat 000FF5  
        standbyMode@logNumber 017F             _LCDinterruptState 0074                         plusw1 000FE3  
                       plusw2 000FDB                         status 000FD8   I2C_Master_Read@receivedByte 0003  
        standbyMode@keypress1 0176                __CFG_PBADEN$ON 000000               standbyMode@diet 0180  
             standbyMode@flat 016E               standbyMode@food 0184               standbyMode@time 0160  
             standbyMode@zero 0179               __initialization C354                  __end_of_main C854  
                __end_of_keys FCE8                  standbyMode@i 0188                  standbyMode@n 017B  
                standbyMode@x 017D              ??_printFoodInput 0003                __CFG_OSC$HSPLL 000000  
           __end_of_LCD_RIGHT FD14              food_press@drawer 002B                        ??_main 0062  
               __activetblptr 000003           food_press@backCheck 0031             ?_I2C_Master_Start 0001  
           ?_I2C_Master_Write 0002                  ?_shiftEEPROM 0001            ??_I2C_Master_Start 0002  
                      _ADCON0 000FC2                        _ADCON1 000FC1            ??_I2C_Master_Write 0004  
       standbyMode@flatPieces 0110                        STR_100 FF3B                        STR_101 FEF1  
                      STR_102 FF3B                        STR_103 FFA4                        STR_104 FD2A  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _EEDATA 000FA8  
                      _EECON2 000FA7                        ?_putch 0001                        _SSPADD 000FC8  
                      _TRISC6 007CA6                        _TRISC7 007CA7                        _SSPBUF 000FC9  
            diet_press@drawer 0029     standbyMode@storedFoodType 0174                __CFG_XINST$OFF 000000  
            __end_of_getRound CB16             __end_of_UART_Init C542                     ??___aldiv 0009  
                      ___wmul C138                __CFG_STVREN$ON 000000                     ??___lldiv 0009  
                   ??___lwdiv 0005                     ??___lwmod 000C        decode_diet@returnValue 0005  
                      clear_0 C39A                        clear_1 C3A6                        clear_2 C3B2  
                      _inputs 0080                _firstIteration 0070                     ??_getFlat 0003  
                   ??_lcdInst 0003                        _printf D6A2                     ??_getLong 0003  
        __size_of_displayLogs 0570               ??_mainOperation 0017           food_press@foodTable 0038  
                   ??_initLCD 0004               get_digits@count 0005                  __pdataCOMRAM 0075  
                   ??_isdigit 0001                  __mediumconst FCD6              __end_of_viewLogs D6A2  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
            standbyMode@F3171 01CA              standbyMode@F3173 01BA              standbyMode@F3175 01AA  
            standbyMode@F3169 01DA              standbyMode@F3177 019A              standbyMode@F3179 018A  
         decode_diet@dietType 0001         standbyMode@longPieces 0120                    __accesstop 0080  
     __end_of__initialization C3B8          which_drawer@keypress 0034                 ___rparam_used 000001  
            standbyMode@round 016C               writeEEPROM@data 0001               viewLogs@logView 005A  
      standbyMode@decodedDiet 0172                  ?_standbyMode 005E          __end_of_happynewyear FD12  
              __pcstackCOMRAM 0001                  __pidataBANK0 C188                 __end_of_input FCF9  
               __end_of_putch C0A6            __size_of_lcdNibble 007E                 check_food@sum 0001  
           food_press@dietSum 0029             food_press@isValid 0033                       ??_putch 0003  
                  __pbssBANK0 00BE                    __pbssBANK1 018A                    _check_food E536  
            ??_verifyKeypress 0003                  ?_writeEEPROM 0001                       ?___wmul 0001  
                  _diet_press DA94       displayLogs@drawerNumber 0044                       ?_printf 000D  
                  _arr_dataRX 00C6                    _get_digits C5F0                     ?_getRound 0001  
                     _SSPCON1 000FC6                       _SSPCON2 000FC5                       _SSPSTAT 000FC7  
        __size_of_shiftEEPROM 00AE                    _columnLeft 0078                    _foodInputs 00A4  
                  _initEEPROM C112                    _readEEPROM C0A6        standbyMode@drawerCount 0186  
                  _food_press CD50             __end_of_lcdNibble C43C                       __Hparam 0000  
                     __Lparam 0000                     ?_viewLogs 0052                       ___aldiv C6AE  
    displayLogs@operationTime 0042                       ___lldiv C43C               __size_of___wmul 0026  
                     ___lwdiv C254                       ___lwmod C1C6                       __pcinit C354  
                     __ramtop 1000                       _getFlat C936                       _lcdInst C07E  
                     _getLong CB16                       __ptext0 C77A                       __ptext1 EFF2  
                     __ptext2 CF4A                       __ptext3 C854                       __ptext4 D3B6  
                     __ptext5 C2A6                       __ptext6 DFC6                       __ptext7 C542  
                     __ptext8 C0A6                       __ptext9 D160        __size_of_decode_drawer 00E2  
             __size_of_printf 03F2                       _initLCD C208             __end_of_hexpowers FD0B  
                     _dpowers FCF9                 ??_decode_diet 0003         which_drawer@backCheck 0030  
                     _isdigit C0D0                displayLogs@day 0031              ___aldiv@dividend 0001  
                   _LCD_RIGHT FD13      __size_of_I2C_Master_Init 005C      __size_of_I2C_Master_Read 0024  
    __size_of_I2C_Master_Wait 0012          displayLogs@logNumber 0029      __size_of_I2C_Master_Stop 0008  
                     _rowDown 0079                    ??_getRound 0003          end_of_initialization C3B8  
        displayLogs@keypress3 0041               which_drawer@sum 002E         __end_of_LCD_SIZE_HORZ FD16  
                 ?_check_food 0001         __end_of_LCD_SIZE_VERT FD15             main@operationMode 0064  
   __size_of_I2C_Master_Start 0008     __size_of_I2C_Master_Write 000A               ___lldiv@divisor 0005  
             ___lldiv@counter 000D                     _RCSTAbits 000FAB                       printf@c 0028  
                     printf@f 000D              ___aldiv@quotient 000B                       postdec1 000FE5  
                     postdec2 000FDD                    ??_viewLogs 0054                       postinc0 000FEE  
                     postinc2 000FDE          __size_of_standbyMode 0CE4                   ?_diet_press 0029  
                   _UART_Init C4BE                     _PORTBbits 000F81                 ?_which_drawer 0029  
         diet_press@backCheck 0031                   ?_get_digits 0001                     _TRISCbits 000F94  
            viewLogs@checkLog 0056                  _happynewyear FD0B             readEEPROM@address 0001  
         __end_of_decode_diet CD50             standbyMode@drawer 0182                   ?_initEEPROM 0001  
               _decode_drawer C854                   ?_readEEPROM 0001                   printf@width 0026  
                   _TXSTAbits 000FAC                   ?_food_press 0029           diet_press@dietTable 0038  
             main@checkEEPROM 0066                 ??_displayLogs 002B          __size_of_writeEEPROM 002A  
              __end_of___wmul C15E                    ?_UART_Init 000F                 __pidataCOMRAM C04C  
      standbyMode@validDrawer 0177           __size_of_check_food 0ABC                ??_which_drawer 002B  
              __end_of_printf DA94         __end_of_mainOperation C0D0           start_initialization C354  
              standbyMode@lng 0170       __size_of_printFoodInput 0256                ?_decode_drawer 0001  
         __size_of_diet_press 0532             ??_I2C_Master_Init 0012             ??_I2C_Master_Read 0002  
           ??_I2C_Master_Wait 0001             ??_I2C_Master_Stop 0002  standbyMode@drawerInformation 0150  
         __size_of_get_digits 00BE                      ??___wmul 0005      I2C_Master_Init@clockFreq 000E  
                 __pdataBANK0 0080              __CFG_LPT1OSC$OFF 000000                      ??_printf 0017  
         __size_of_initEEPROM 0026            food_press@keypress 0037           __size_of_readEEPROM 0014  
         __end_of_displayLogs E536           __size_of_food_press 01FA  standbyMode@LCDinterruptState 0072  
                 __pbssCOMRAM 0068                   _decode_diet CC2C                 __pcstackBANK1 0100  
                _isdigit$1475 0002           decode_drawer@drawer 0001             __size_of_getRound 00F0  
      standbyMode@roundPieces 0100              _I2C_Master_Start C052              _I2C_Master_Write C062  
            ___lwdiv@dividend 0001             __CFG_CCP2MX$PORTC 000000            _UARTinterruptState 0073  
               __pmediumconst FCD6                 UART_Init@baud 000F                     _lcdNibble C3BE  
                    ?___aldiv 0001                      ?___lldiv 0001                      ?___lwdiv 0001  
                    ?___lwmod 0008                   ??_UART_Init 0013             __size_of_viewLogs 02EC  
                    ?_getFlat 0001                      ?_lcdInst 0001                      ?_getLong 0001  
                    ?_initLCD 0001                      ?_isdigit 0001           check_food@foodInput 0003  
               ??_shiftEEPROM 0003           displayLogs@dietType 003D                     _hexpowers FD03  
            ___lwdiv@quotient 0005               ??_decode_drawer 0003                __size_of_putch 0014  
         displayLogs@foodType 003F                  ??_check_food 0005                      _LCD_LEFT FD12  
            displayLogs@month 002F               ___aldiv@divisor 0005               ___aldiv@counter 0009  
              ___wmul@product 0005                      _LATCbits 000F8B                      _LATDbits 000F8C  
        __end_of_which_drawer D160              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
                ??_diet_press 002B                  shiftEEPROM@i 0006                   _displayLogs DFC6  
     __size_of_verifyKeypress 0052                    _ADCON0bits 000FC2             ___wmul@multiplier 0001  
          __end_of_check_food EFF2                 lcdNibble@data 0002                    printf@flag 0025  
                 _columnRight 0077                 lcdNibble@temp 0001                    printf@prec 001C  
                ??_get_digits 0003                _printFoodInput D160                _LCD_HORZ_LIMIT FD17  
               diet_press@sum 0035                     copy_data0 C368                     copy_data1 C388  
           which_drawer@count 0032                  ??_initEEPROM 0003           __end_of_shiftEEPROM C5F0  
          __end_of_diet_press DFC6                  ??_readEEPROM 0001                  ??_food_press 002D  
          diet_press@keypress 0037                    _EECON1bits 000FA6                      __Hrparam 0000  
               ??_standbyMode 0060                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
          __end_of_get_digits C6AE            diet_press@previous 002D              __size_of___aldiv 00CC  
            __size_of___lldiv 0082         displayLogs@flatPieces 0035              __size_of___lwdiv 0052  
            __size_of___lwmod 0042              __size_of_getFlat 00F0              __size_of_lcdInst 0014  
            __size_of_getLong 0116        __end_of_printFoodInput D3B6            __end_of_initEEPROM C138  
             _I2C_Master_Init C2F8               _I2C_Master_Read C0EE              __size_of_initLCD 004C  
             _I2C_Master_Wait C06C            __end_of_readEEPROM C0BA               _I2C_Master_Stop C05A  
      __end_of_LCD_HORZ_LIMIT FD18              __size_of_isdigit 001E            __end_of_food_press CF4A  
             ___lwdiv@divisor 0003               ___lwdiv@counter 0007                      __ptext10 CA26  
                    __ptext11 CB16                      __ptext20 C138                      __ptext12 C936  
                    __ptext21 C1C6                      __ptext13 CD50                      __ptext30 C43C  
                    __ptext22 C254                      __ptext14 C5F0                      __ptext31 C0BA  
                    __ptext23 CC2C                      __ptext15 E536                      __ptext32 C4BE  
                    __ptext24 C062                      __ptext16 DA94                      __ptext33 C6AE  
                    __ptext25 C05A                      __ptext17 D6A2                      __ptext34 C208  
                    __ptext26 C052                      __ptext18 C092                      __ptext35 C07E  
                    __ptext27 C0EE                      __ptext19 C0D0                      __ptext36 C3BE  
                    __ptext28 C06C                      __ptext37 C112                      __ptext29 C2F8  
                    __ptext38 C15E                      _getRound CA26                _LCD_VERT_LIMIT FD16  
               __size_of_main 00DA               displayLogs@year 002D            displayLogs@minutes 0039  
          displayLogs@seconds 003B                 ??_writeEEPROM 0002      displayLogs@markedDrawer1 0048  
    displayLogs@markedDrawer2 004A      displayLogs@markedDrawer3 004C      displayLogs@markedDrawer4 004E  
                 ??_lcdNibble 0001                      _viewLogs D3B6               verifyKeypress@i 0008  
          getLong@returnValue 0005                     printf@idx 001B                     printf@len 0021  
                   printf@val 0023           __end_of_standbyMode FCD6   I2C_Master_Write@byteToWrite 0002  
    decode_drawer@returnValue 0005         displayLogs@longPieces 0037               ?_printFoodInput 0001  
            which_drawer@rand 002C                     putch@data 0003      __end_of_I2C_Master_Start C05A  
    __end_of_I2C_Master_Write C06C                    _INTCONbits 000FF2                  ?_decode_diet 0001  
      __end_of_LCD_VERT_LIMIT FD17                   _shiftEEPROM C542                      isdigit@c 0003  
       __size_of_which_drawer 0216                   getFlat@code 0001     standbyMode@firstIteration 0167  
               _LCD_SIZE_HORZ FD15              ___lwmod@dividend 0008                 _LCD_SIZE_VERT FD14  
            ___lldiv@dividend 0001       verifyKeypress@logNumber 0005        __size_of_mainOperation 0016  
          getFlat@returnValue 0005        displayLogs@roundPieces 0033                      printf@ap 001F  
                    printf@cp 001D                   diet_press@i 002F       __end_of_I2C_Master_Init C354  
     __end_of_I2C_Master_Read C112       __end_of_I2C_Master_Wait C07E       __end_of_I2C_Master_Stop C062  
                 lcdInst@data 0003               shiftEEPROM@temp 0004                _verifyKeypress C2A6  
         getRound@returnValue 0005                   getLong@code 0001           __end_of_writeEEPROM C188  
     verifyKeypress@returnVal 0006              ___lldiv@quotient 0009                  _which_drawer CF4A  
             ___lwmod@divisor 000A               ___lwmod@counter 000C                  ___aldiv@sign 000A  
      verifyKeypress@keypress 0001                   _SSPCON1bits 000FC6                   _SSPCON2bits 000FC5  
                getRound@code 0001         check_food@returnValue 0007  
