

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 15 23:14:48 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65  0000                     
    66                           ; Version 1.45
    67                           ; Generated 16/11/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4620 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     
   101                           	psect	idataCOMRAM
   102  00A982                     __pidataCOMRAM:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _UART
   106  00A982  EA                 	db	low _uart
   107  00A983  01                 	db	high _uart
   108                           
   109                           ;initializer for _drawerDown
   110  00A984  36                 	db	54
   111                           
   112                           ;initializer for _drawerUp
   113  00A985  35                 	db	53
   114                           
   115                           ;initializer for _columnRight
   116  00A986  34                 	db	52
   117                           
   118                           ;initializer for _columnLeft
   119  00A987  33                 	db	51
   120                           
   121                           ;initializer for _rowDown
   122  00A988  32                 	db	50
   123                           
   124                           ;initializer for _rowUp
   125  00A989  31                 	db	49
   126                           
   127                           	psect	idataBANK2
   128  00AA9A                     __pidataBANK2:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _inputs
   132  00AA9A  FC                 	db	low STR_3
   133  00AA9B  FF                 	db	high STR_3
   134  00AA9C  E8                 	db	low (STR_11+2)
   135  00AA9D  FF                 	db	high (STR_11+2)
   136  00AA9E  C4                 	db	low (STR_17+3)
   137  00AA9F  FF                 	db	high (STR_17+3)
   138  00AAA0  EB                 	db	low (STR_9+1)
   139  00AAA1  FF                 	db	high (STR_9+1)
   140  00AAA2  F3                 	db	low (STR_10+1)
   141  00AAA3  FF                 	db	high (STR_10+1)
   142  00AAA4  C3                 	db	low (STR_17+2)
   143  00AAA5  FF                 	db	high (STR_17+2)
   144  00AAA6  EA                 	db	low STR_9
   145  00AAA7  FF                 	db	high STR_9
   146  00AAA8  F2                 	db	low STR_10
   147  00AAA9  FF                 	db	high STR_10
   148  00AAAA  E6                 	db	low STR_11
   149  00AAAB  FF                 	db	high STR_11
   150  00AAAC  EE                 	db	low STR_12
   151  00AAAD  FF                 	db	high STR_12
   152  00AAAE  C7                 	db	low (STR_16+1)
   153  00AAAF  FF                 	db	high (STR_16+1)
   154  00AAB0  C2                 	db	low (STR_17+1)
   155  00AAB1  FF                 	db	high (STR_17+1)
   156  00AAB2  CC                 	db	low (STR_18+1)
   157  00AAB3  FF                 	db	high (STR_18+1)
   158  00AAB4  C6                 	db	low STR_16
   159  00AAB5  FF                 	db	high STR_16
   160  00AAB6  C1                 	db	low STR_17
   161  00AAB7  FF                 	db	high STR_17
   162  00AAB8  CB                 	db	low STR_18
   163  00AAB9  FF                 	db	high STR_18
   164  00AABA  D5                 	db	low STR_19
   165  00AABB  FF                 	db	high STR_19
   166  00AABC  D0                 	db	low STR_20
   167  00AABD  FF                 	db	high STR_20
   168                           
   169                           ;initializer for _foodInputs
   170  00AABE  BF                 	db	low (STR_33+3)
   171  00AABF  FF                 	db	high (STR_33+3)
   172  00AAC0  E4                 	db	low (STR_30+2)
   173  00AAC1  FF                 	db	high (STR_30+2)
   174  00AAC2  FA                 	db	low (STR_26+1)
   175  00AAC3  FF                 	db	high (STR_26+1)
   176  00AAC4  BE                 	db	low (STR_33+2)
   177  00AAC5  FF                 	db	high (STR_33+2)
   178  00AAC6  E3                 	db	low (STR_30+1)
   179  00AAC7  FF                 	db	high (STR_30+1)
   180  00AAC8  F9                 	db	low STR_26
   181  00AAC9  FF                 	db	high STR_26
   182  00AACA  DF                 	db	low (STR_31+1)
   183  00AACB  FF                 	db	high (STR_31+1)
   184  00AACC  F6                 	db	low STR_28
   185  00AACD  FF                 	db	high STR_28
   186  00AACE  BD                 	db	low (STR_33+1)
   187  00AACF  FF                 	db	high (STR_33+1)
   188  00AAD0  E2                 	db	low STR_30
   189  00AAD1  FF                 	db	high STR_30
   190  00AAD2  DE                 	db	low STR_31
   191  00AAD3  FF                 	db	high STR_31
   192  00AAD4  DA                 	db	low STR_32
   193  00AAD5  FF                 	db	high STR_32
   194  00AAD6  BC                 	db	low STR_33
   195  00AAD7  FF                 	db	high STR_33
   196                           
   197                           	psect	mediumconst
   198  00FC50                     __pmediumconst:
   199                           	opt stack 0
   200  00FC50  00                 	db	0
   201  00FC51                     _keys:
   202                           	opt stack 0
   203  00FC51  31                 	db	49
   204  00FC52  32                 	db	50
   205  00FC53  33                 	db	51
   206  00FC54  41                 	db	65
   207  00FC55  34                 	db	52
   208  00FC56  35                 	db	53
   209  00FC57  36                 	db	54
   210  00FC58  42                 	db	66
   211  00FC59  37                 	db	55
   212  00FC5A  38                 	db	56
   213  00FC5B  39                 	db	57
   214  00FC5C  43                 	db	67
   215  00FC5D  2A                 	db	42
   216  00FC5E  30                 	db	48
   217  00FC5F  23                 	db	35
   218  00FC60  44                 	db	68
   219  00FC61  00                 	db	0
   220  00FC62                     __end_of_keys:
   221                           	opt stack 0
   222  00FC62                     _input:
   223                           	opt stack 0
   224  00FC62  31                 	db	49
   225  00FC63  32                 	db	50
   226  00FC64  33                 	db	51
   227  00FC65  52                 	db	82
   228  00FC66  34                 	db	52
   229  00FC67  35                 	db	53
   230  00FC68  36                 	db	54
   231  00FC69  46                 	db	70
   232  00FC6A  37                 	db	55
   233  00FC6B  38                 	db	56
   234  00FC6C  39                 	db	57
   235  00FC6D  4C                 	db	76
   236  00FC6E  2A                 	db	42
   237  00FC6F  30                 	db	48
   238  00FC70  23                 	db	35
   239  00FC71  44                 	db	68
   240  00FC72  00                 	db	0
   241  00FC73                     __end_of_input:
   242                           	opt stack 0
   243  00FC73                     _dpowers:
   244                           	opt stack 0
   245  00FC73  0001               	dw	1
   246  00FC75  000A               	dw	10
   247  00FC77  0064               	dw	100
   248  00FC79  03E8               	dw	1000
   249  00FC7B  2710               	dw	10000
   250  00FC7D                     __end_of_dpowers:
   251                           	opt stack 0
   252  00FC7D                     _hexpowers:
   253                           	opt stack 0
   254  00FC7D  0001               	dw	1
   255  00FC7F  0010               	dw	16
   256  00FC81  0100               	dw	256
   257  00FC83  1000               	dw	4096
   258  00FC85                     __end_of_hexpowers:
   259                           	opt stack 0
   260  00FC85                     _happynewyear:
   261                           	opt stack 0
   262  00FC85  00                 	db	0
   263  00FC86  28                 	db	40
   264  00FC87  00                 	db	0
   265  00FC88  06                 	db	6
   266  00FC89  24                 	db	36
   267  00FC8A  02                 	db	2
   268  00FC8B  18                 	db	24
   269  00FC8C                     __end_of_happynewyear:
   270                           	opt stack 0
   271  00FC8C                     _LCD_LEFT:
   272                           	opt stack 0
   273  00FC8C  00                 	db	0
   274  00FC8D                     __end_of_LCD_LEFT:
   275                           	opt stack 0
   276  00FC8D                     _LCD_RIGHT:
   277                           	opt stack 0
   278  00FC8D  01                 	db	1
   279  00FC8E                     __end_of_LCD_RIGHT:
   280                           	opt stack 0
   281  00FC8E                     _LCD_SIZE_VERT:
   282                           	opt stack 0
   283  00FC8E  02                 	db	2
   284  00FC8F                     __end_of_LCD_SIZE_VERT:
   285                           	opt stack 0
   286  00FC8F                     _LCD_SIZE_HORZ:
   287                           	opt stack 0
   288  00FC8F  10                 	db	16
   289  00FC90                     __end_of_LCD_SIZE_HORZ:
   290                           	opt stack 0
   291  00FC90                     _LCD_VERT_LIMIT:
   292                           	opt stack 0
   293  00FC90  02                 	db	2
   294  00FC91                     __end_of_LCD_VERT_LIMIT:
   295                           	opt stack 0
   296  00FC91                     _LCD_HORZ_LIMIT:
   297                           	opt stack 0
   298  00FC91  28                 	db	40
   299  00FC92                     __end_of_LCD_HORZ_LIMIT:
   300                           	opt stack 0
   301  0000                     _LATDbits	set	3980
   302  0000                     _SPBRG	set	4015
   303  0000                     _RCREG	set	4014
   304  0000                     _RCSTAbits	set	4011
   305  0000                     _TXREG	set	4013
   306  0000                     _TXSTAbits	set	4012
   307  0000                     _ADRESL	set	4035
   308  0000                     _ADRESH	set	4036
   309  0000                     _ADCON0bits	set	4034
   310  0000                     _SSPBUF	set	4041
   311  0000                     _SSPCON2bits	set	4037
   312  0000                     _SSPADD	set	4040
   313  0000                     _SSPCON2	set	4037
   314  0000                     _SSPCON1	set	4038
   315  0000                     _SSPSTAT	set	4039
   316  0000                     _SSPCON1bits	set	4038
   317  0000                     _EECON2	set	4007
   318  0000                     _INTCONbits	set	4082
   319  0000                     _EEDATA	set	4008
   320  0000                     _EEADR	set	4009
   321  0000                     _EECON1bits	set	4006
   322  0000                     _PORTB	set	3969
   323  0000                     _PORTBbits	set	3969
   324  0000                     _LATCbits	set	3979
   325  0000                     _TRISCbits	set	3988
   326  0000                     _ADCON1	set	4033
   327  0000                     _ADCON0	set	4034
   328  0000                     _TRISE	set	3990
   329  0000                     _TRISD	set	3989
   330  0000                     _TRISC	set	3988
   331  0000                     _TRISB	set	3987
   332  0000                     _TRISA	set	3986
   333  0000                     _LATE	set	3981
   334  0000                     _LATD	set	3980
   335  0000                     _LATC	set	3979
   336  0000                     _LATB	set	3978
   337  0000                     _LATA	set	3977
   338  0000                     _TRISC7	set	31911
   339  0000                     _TRISC6	set	31910
   340  0000                     _RCIE	set	31981
   341  0000                     _RCIF	set	31989
   342  0000                     _TXIE	set	31980
   343  0000                     _TRMT	set	32097
   344  0000                     _TXIF	set	31988
   345  0000                     _ADON	set	32272
   346  00FC92                     STR_92:
   347  00FC92  52                 	db	82	;'R'
   348  00FC93  65                 	db	101	;'e'
   349  00FC94  6D                 	db	109	;'m'
   350  00FC95  61                 	db	97	;'a'
   351  00FC96  69                 	db	105	;'i'
   352  00FC97  6E                 	db	110	;'n'
   353  00FC98  69                 	db	105	;'i'
   354  00FC99  6E                 	db	110	;'n'
   355  00FC9A  67                 	db	103	;'g'
   356  00FC9B  20                 	db	32
   357  00FC9C  70                 	db	112	;'p'
   358  00FC9D  69                 	db	105	;'i'
   359  00FC9E  65                 	db	101	;'e'
   360  00FC9F  63                 	db	99	;'c'
   361  00FCA0  65                 	db	101	;'e'
   362  00FCA1  73                 	db	115	;'s'
   363  00FCA2  3A                 	db	58	;':'
   364  00FCA3  00                 	db	0
   365  00FCA4                     STR_148:
   366  00FCA4  30                 	db	48	;'0'
   367  00FCA5  31                 	db	49	;'1'
   368  00FCA6  32                 	db	50	;'2'
   369  00FCA7  33                 	db	51	;'3'
   370  00FCA8  34                 	db	52	;'4'
   371  00FCA9  35                 	db	53	;'5'
   372  00FCAA  36                 	db	54	;'6'
   373  00FCAB  37                 	db	55	;'7'
   374  00FCAC  38                 	db	56	;'8'
   375  00FCAD  39                 	db	57	;'9'
   376  00FCAE  61                 	db	97	;'a'
   377  00FCAF  62                 	db	98	;'b'
   378  00FCB0  63                 	db	99	;'c'
   379  00FCB1  64                 	db	100	;'d'
   380  00FCB2  65                 	db	101	;'e'
   381  00FCB3  66                 	db	102	;'f'
   382  00FCB4  00                 	db	0
   383  00FCB5                     STR_123:
   384  00FCB5  64                 	db	100	;'d'
   385  00FCB6  72                 	db	114	;'r'
   386  00FCB7  61                 	db	97	;'a'
   387  00FCB8  77                 	db	119	;'w'
   388  00FCB9  65                 	db	101	;'e'
   389  00FCBA  72                 	db	114	;'r'
   390  00FCBB  73                 	db	115	;'s'
   391  00FCBC  20                 	db	32
   392  00FCBD  72                 	db	114	;'r'
   393  00FCBE  65                 	db	101	;'e'
   394  00FCBF  61                 	db	97	;'a'
   395  00FCC0  63                 	db	99	;'c'
   396  00FCC1  68                 	db	104	;'h'
   397  00FCC2  65                 	db	101	;'e'
   398  00FCC3  64                 	db	100	;'d'
   399  00FCC4  21                 	db	33
   400  00FCC5  00                 	db	0
   401  00FCC6                     STR_111:
   402  00FCC6  62                 	db	98	;'b'
   403  00FCC7  65                 	db	101	;'e'
   404  00FCC8  67                 	db	103	;'g'
   405  00FCC9  69                 	db	105	;'i'
   406  00FCCA  6E                 	db	110	;'n'
   407  00FCCB  20                 	db	32
   408  00FCCC  6F                 	db	111	;'o'
   409  00FCCD  70                 	db	112	;'p'
   410  00FCCE  65                 	db	101	;'e'
   411  00FCCF  72                 	db	114	;'r'
   412  00FCD0  61                 	db	97	;'a'
   413  00FCD1  74                 	db	116	;'t'
   414  00FCD2  69                 	db	105	;'i'
   415  00FCD3  6F                 	db	111	;'o'
   416  00FCD4  6E                 	db	110	;'n'
   417  00FCD5  2E                 	db	46
   418  00FCD6  00                 	db	0
   419  00FCD7                     STR_134:
   420  00FCD7  49                 	db	73	;'I'
   421  00FCD8  6E                 	db	110	;'n'
   422  00FCD9  70                 	db	112	;'p'
   423  00FCDA  75                 	db	117	;'u'
   424  00FCDB  74                 	db	116	;'t'
   425  00FCDC  73                 	db	115	;'s'
   426  00FCDD  20                 	db	32
   427  00FCDE  73                 	db	115	;'s'
   428  00FCDF  75                 	db	117	;'u'
   429  00FCE0  62                 	db	98	;'b'
   430  00FCE1  6D                 	db	109	;'m'
   431  00FCE2  69                 	db	105	;'i'
   432  00FCE3  74                 	db	116	;'t'
   433  00FCE4  74                 	db	116	;'t'
   434  00FCE5  65                 	db	101	;'e'
   435  00FCE6  64                 	db	100	;'d'
   436  00FCE7  00                 	db	0
   437  00FCE8                     STR_78:
   438  00FCE8  50                 	db	80	;'P'
   439  00FCE9  6C                 	db	108	;'l'
   440  00FCEA  65                 	db	101	;'e'
   441  00FCEB  61                 	db	97	;'a'
   442  00FCEC  73                 	db	115	;'s'
   443  00FCED  65                 	db	101	;'e'
   444  00FCEE  20                 	db	32
   445  00FCEF  69                 	db	105	;'i'
   446  00FCF0  6E                 	db	110	;'n'
   447  00FCF1  70                 	db	112	;'p'
   448  00FCF2  75                 	db	117	;'u'
   449  00FCF3  74                 	db	116	;'t'
   450  00FCF4  20                 	db	32
   451  00FCF5  6C                 	db	108	;'l'
   452  00FCF6  6F                 	db	111	;'o'
   453  00FCF7  67                 	db	103	;'g'
   454  00FCF8  00                 	db	0
   455  00FCF9                     STR_93:
   456  00FCF9  52                 	db	82	;'R'
   457  00FCFA  3A                 	db	58	;':'
   458  00FCFB  25                 	db	37
   459  00FCFC  69                 	db	105	;'i'
   460  00FCFD  20                 	db	32
   461  00FCFE  20                 	db	32
   462  00FCFF  46                 	db	70	;'F'
   463  00FD00  3A                 	db	58	;':'
   464  00FD01  25                 	db	37
   465  00FD02  69                 	db	105	;'i'
   466  00FD03  20                 	db	32
   467  00FD04  20                 	db	32
   468  00FD05  4C                 	db	76	;'L'
   469  00FD06  3A                 	db	58	;':'
   470  00FD07  25                 	db	37
   471  00FD08  69                 	db	105	;'i'
   472  00FD09  00                 	db	0
   473  00FD0A                     STR_74:
   474  00FD0A  50                 	db	80	;'P'
   475  00FD0B  72                 	db	114	;'r'
   476  00FD0C  65                 	db	101	;'e'
   477  00FD0D  73                 	db	115	;'s'
   478  00FD0E  73                 	db	115	;'s'
   479  00FD0F  20                 	db	32
   480  00FD10  61                 	db	97	;'a'
   481  00FD11  6E                 	db	110	;'n'
   482  00FD12  79                 	db	121	;'y'
   483  00FD13  20                 	db	32
   484  00FD14  6B                 	db	107	;'k'
   485  00FD15  65                 	db	101	;'e'
   486  00FD16  79                 	db	121	;'y'
   487  00FD17  20                 	db	32
   488  00FD18  74                 	db	116	;'t'
   489  00FD19  6F                 	db	111	;'o'
   490  00FD1A  00                 	db	0
   491  00FD1B                     STR_76:
   492  00FD1B  25                 	db	37
   493  00FD1C  69                 	db	105	;'i'
   494  00FD1D  20                 	db	32
   495  00FD1E  70                 	db	112	;'p'
   496  00FD1F  72                 	db	114	;'r'
   497  00FD20  65                 	db	101	;'e'
   498  00FD21  76                 	db	118	;'v'
   499  00FD22  69                 	db	105	;'i'
   500  00FD23  6F                 	db	111	;'o'
   501  00FD24  75                 	db	117	;'u'
   502  00FD25  73                 	db	115	;'s'
   503  00FD26  20                 	db	32
   504  00FD27  6C                 	db	108	;'l'
   505  00FD28  6F                 	db	111	;'o'
   506  00FD29  67                 	db	103	;'g'
   507  00FD2A  73                 	db	115	;'s'
   508  00FD2B  00                 	db	0
   509  00FD2C                     STR_113:
   510  00FD2C  63                 	db	99	;'c'
   511  00FD2D  61                 	db	97	;'a'
   512  00FD2E  62                 	db	98	;'b'
   513  00FD2F  69                 	db	105	;'i'
   514  00FD30  6E                 	db	110	;'n'
   515  00FD31  65                 	db	101	;'e'
   516  00FD32  74                 	db	116	;'t'
   517  00FD33  20                 	db	32
   518  00FD34  73                 	db	115	;'s'
   519  00FD35  6F                 	db	111	;'o'
   520  00FD36  72                 	db	114	;'r'
   521  00FD37  74                 	db	116	;'t'
   522  00FD38  65                 	db	101	;'e'
   523  00FD39  72                 	db	114	;'r'
   524  00FD3A  21                 	db	33
   525  00FD3B  00                 	db	0
   526  00FD3C                     STR_127:
   527  00FD3C  6E                 	db	110	;'n'
   528  00FD3D  75                 	db	117	;'u'
   529  00FD3E  6D                 	db	109	;'m'
   530  00FD3F  62                 	db	98	;'b'
   531  00FD40  65                 	db	101	;'e'
   532  00FD41  72                 	db	114	;'r'
   533  00FD42  20                 	db	32
   534  00FD43  70                 	db	112	;'p'
   535  00FD44  72                 	db	114	;'r'
   536  00FD45  65                 	db	101	;'e'
   537  00FD46  73                 	db	115	;'s'
   538  00FD47  73                 	db	115	;'s'
   539  00FD48  65                 	db	101	;'e'
   540  00FD49  64                 	db	100	;'d'
   541  00FD4A  2E                 	db	46
   542  00FD4B  00                 	db	0
   543  00FD4C                     STR_99:
   544  00FD4C  44                 	db	68	;'D'
   545  00FD4D  72                 	db	114	;'r'
   546  00FD4E  61                 	db	97	;'a'
   547  00FD4F  77                 	db	119	;'w'
   548  00FD50  65                 	db	101	;'e'
   549  00FD51  72                 	db	114	;'r'
   550  00FD52  20                 	db	32
   551  00FD53  25                 	db	37
   552  00FD54  69                 	db	105	;'i'
   553  00FD55  20                 	db	32
   554  00FD56  66                 	db	102	;'f'
   555  00FD57  6F                 	db	111	;'o'
   556  00FD58  6F                 	db	111	;'o'
   557  00FD59  64                 	db	100	;'d'
   558  00FD5A  3A                 	db	58	;':'
   559  00FD5B  00                 	db	0
   560  00FD5C                     STR_85:
   561  00FD5C  4F                 	db	79	;'O'
   562  00FD5D  70                 	db	112	;'p'
   563  00FD5E  65                 	db	101	;'e'
   564  00FD5F  72                 	db	114	;'r'
   565  00FD60  61                 	db	97	;'a'
   566  00FD61  74                 	db	116	;'t'
   567  00FD62  69                 	db	105	;'i'
   568  00FD63  6F                 	db	111	;'o'
   569  00FD64  6E                 	db	110	;'n'
   570  00FD65  20                 	db	32
   571  00FD66  74                 	db	116	;'t'
   572  00FD67  69                 	db	105	;'i'
   573  00FD68  6D                 	db	109	;'m'
   574  00FD69  65                 	db	101	;'e'
   575  00FD6A  3A                 	db	58	;':'
   576  00FD6B  00                 	db	0
   577  00FD6C                     STR_87:
   578  00FD6C  4D                 	db	77	;'M'
   579  00FD6D  61                 	db	97	;'a'
   580  00FD6E  72                 	db	114	;'r'
   581  00FD6F  6B                 	db	107	;'k'
   582  00FD70  65                 	db	101	;'e'
   583  00FD71  64                 	db	100	;'d'
   584  00FD72  20                 	db	32
   585  00FD73  64                 	db	100	;'d'
   586  00FD74  72                 	db	114	;'r'
   587  00FD75  61                 	db	97	;'a'
   588  00FD76  77                 	db	119	;'w'
   589  00FD77  65                 	db	101	;'e'
   590  00FD78  72                 	db	114	;'r'
   591  00FD79  73                 	db	115	;'s'
   592  00FD7A  3A                 	db	58	;':'
   593  00FD7B  00                 	db	0
   594  00FD7C                     STR_103:
   595  00FD7C  44                 	db	68	;'D'
   596  00FD7D  72                 	db	114	;'r'
   597  00FD7E  61                 	db	97	;'a'
   598  00FD7F  77                 	db	119	;'w'
   599  00FD80  65                 	db	101	;'e'
   600  00FD81  72                 	db	114	;'r'
   601  00FD82  20                 	db	32
   602  00FD83  25                 	db	37
   603  00FD84  69                 	db	105	;'i'
   604  00FD85  20                 	db	32
   605  00FD86  64                 	db	100	;'d'
   606  00FD87  69                 	db	105	;'i'
   607  00FD88  65                 	db	101	;'e'
   608  00FD89  74                 	db	116	;'t'
   609  00FD8A  3A                 	db	58	;':'
   610  00FD8B  00                 	db	0
   611  00FD8C                     STR_124:
   612  00FD8C  41                 	db	65	;'A'
   613  00FD8D  6E                 	db	110	;'n'
   614  00FD8E  6F                 	db	111	;'o'
   615  00FD8F  74                 	db	116	;'t'
   616  00FD90  68                 	db	104	;'h'
   617  00FD91  65                 	db	101	;'e'
   618  00FD92  72                 	db	114	;'r'
   619  00FD93  20                 	db	32
   620  00FD94  64                 	db	100	;'d'
   621  00FD95  72                 	db	114	;'r'
   622  00FD96  61                 	db	97	;'a'
   623  00FD97  77                 	db	119	;'w'
   624  00FD98  65                 	db	101	;'e'
   625  00FD99  72                 	db	114	;'r'
   626  00FD9A  3F                 	db	63	;'?'
   627  00FD9B  00                 	db	0
   628  00FD9C                     STR_112:
   629  00FD9C  57                 	db	87	;'W'
   630  00FD9D  65                 	db	101	;'e'
   631  00FD9E  6C                 	db	108	;'l'
   632  00FD9F  63                 	db	99	;'c'
   633  00FDA0  6F                 	db	111	;'o'
   634  00FDA1  6D                 	db	109	;'m'
   635  00FDA2  65                 	db	101	;'e'
   636  00FDA3  20                 	db	32
   637  00FDA4  74                 	db	116	;'t'
   638  00FDA5  6F                 	db	111	;'o'
   639  00FDA6  20                 	db	32
   640  00FDA7  79                 	db	121	;'y'
   641  00FDA8  6F                 	db	111	;'o'
   642  00FDA9  75                 	db	117	;'u'
   643  00FDAA  72                 	db	114	;'r'
   644  00FDAB  00                 	db	0
   645  00FDAC                     STR_98:
   646  00FDAC  23                 	db	35
   647  00FDAD  20                 	db	32
   648  00FDAE  3D                 	db	61	;'='
   649  00FDAF  20                 	db	32
   650  00FDB0  4E                 	db	78	;'N'
   651  00FDB1  6F                 	db	111	;'o'
   652  00FDB2  2C                 	db	44
   653  00FDB3  20                 	db	32
   654  00FDB4  44                 	db	68	;'D'
   655  00FDB5  20                 	db	32
   656  00FDB6  3D                 	db	61	;'='
   657  00FDB7  20                 	db	32
   658  00FDB8  59                 	db	89	;'Y'
   659  00FDB9  65                 	db	101	;'e'
   660  00FDBA  73                 	db	115	;'s'
   661  00FDBB  00                 	db	0
   662  00FDBC                     STR_2:
   663  00FDBC  43                 	db	67	;'C'
   664  00FDBD  6C                 	db	108	;'l'
   665  00FDBE  65                 	db	101	;'e'
   666  00FDBF  61                 	db	97	;'a'
   667  00FDC0  72                 	db	114	;'r'
   668  00FDC1  69                 	db	105	;'i'
   669  00FDC2  6E                 	db	110	;'n'
   670  00FDC3  67                 	db	103	;'g'
   671  00FDC4  20                 	db	32
   672  00FDC5  45                 	db	69	;'E'
   673  00FDC6  45                 	db	69	;'E'
   674  00FDC7  50                 	db	80	;'P'
   675  00FDC8  52                 	db	82	;'R'
   676  00FDC9  4F                 	db	79	;'O'
   677  00FDCA  4D                 	db	77	;'M'
   678  00FDCB  00                 	db	0
   679  00FDCC                     STR_141:
   680  00FDCC  62                 	db	98	;'b'
   681  00FDCD  65                 	db	101	;'e'
   682  00FDCE  67                 	db	103	;'g'
   683  00FDCF  69                 	db	105	;'i'
   684  00FDD0  6E                 	db	110	;'n'
   685  00FDD1  20                 	db	32
   686  00FDD2  73                 	db	115	;'s'
   687  00FDD3  68                 	db	104	;'h'
   688  00FDD4  6F                 	db	111	;'o'
   689  00FDD5  72                 	db	114	;'r'
   690  00FDD6  74                 	db	116	;'t'
   691  00FDD7  6C                 	db	108	;'l'
   692  00FDD8  79                 	db	121	;'y'
   693  00FDD9  2E                 	db	46
   694  00FDDA  00                 	db	0
   695  00FDDB                     STR_107:
   696  00FDDB  44                 	db	68	;'D'
   697  00FDDC  72                 	db	114	;'r'
   698  00FDDD  61                 	db	97	;'a'
   699  00FDDE  77                 	db	119	;'w'
   700  00FDDF  65                 	db	101	;'e'
   701  00FDE0  72                 	db	114	;'r'
   702  00FDE1  20                 	db	32
   703  00FDE2  6E                 	db	110	;'n'
   704  00FDE3  75                 	db	117	;'u'
   705  00FDE4  6D                 	db	109	;'m'
   706  00FDE5  62                 	db	98	;'b'
   707  00FDE6  65                 	db	101	;'e'
   708  00FDE7  72                 	db	114	;'r'
   709  00FDE8  3A                 	db	58	;':'
   710  00FDE9  00                 	db	0
   711  00FDEA                     STR_94:
   712  00FDEA  49                 	db	73	;'I'
   713  00FDEB  6E                 	db	110	;'n'
   714  00FDEC  70                 	db	112	;'p'
   715  00FDED  75                 	db	117	;'u'
   716  00FDEE  74                 	db	116	;'t'
   717  00FDEF  20                 	db	32
   718  00FDF0  53                 	db	83	;'S'
   719  00FDF1  75                 	db	117	;'u'
   720  00FDF2  6D                 	db	109	;'m'
   721  00FDF3  6D                 	db	109	;'m'
   722  00FDF4  61                 	db	97	;'a'
   723  00FDF5  72                 	db	114	;'r'
   724  00FDF6  79                 	db	121	;'y'
   725  00FDF7  3A                 	db	58	;':'
   726  00FDF8  00                 	db	0
   727  00FDF9                     STR_72:
   728  00FDF9  31                 	db	49	;'1'
   729  00FDFA  20                 	db	32
   730  00FDFB  70                 	db	112	;'p'
   731  00FDFC  72                 	db	114	;'r'
   732  00FDFD  65                 	db	101	;'e'
   733  00FDFE  76                 	db	118	;'v'
   734  00FDFF  69                 	db	105	;'i'
   735  00FE00  6F                 	db	111	;'o'
   736  00FE01  75                 	db	117	;'u'
   737  00FE02  73                 	db	115	;'s'
   738  00FE03  20                 	db	32
   739  00FE04  6C                 	db	108	;'l'
   740  00FE05  6F                 	db	111	;'o'
   741  00FE06  67                 	db	103	;'g'
   742  00FE07  00                 	db	0
   743  00FE08                     STR_91:
   744  00FE08  25                 	db	37
   745  00FE09  69                 	db	105	;'i'
   746  00FE0A  2C                 	db	44
   747  00FE0B  20                 	db	32
   748  00FE0C  25                 	db	37
   749  00FE0D  69                 	db	105	;'i'
   750  00FE0E  2C                 	db	44
   751  00FE0F  20                 	db	32
   752  00FE10  25                 	db	37
   753  00FE11  69                 	db	105	;'i'
   754  00FE12  2C                 	db	44
   755  00FE13  20                 	db	32
   756  00FE14  25                 	db	37
   757  00FE15  69                 	db	105	;'i'
   758  00FE16  00                 	db	0
   759  00FE17                     STR_84:
   760  00FE17  25                 	db	37
   761  00FE18  30                 	db	48	;'0'
   762  00FE19  32                 	db	50	;'2'
   763  00FE1A  69                 	db	105	;'i'
   764  00FE1B  2F                 	db	47
   765  00FE1C  25                 	db	37
   766  00FE1D  30                 	db	48	;'0'
   767  00FE1E  32                 	db	50	;'2'
   768  00FE1F  69                 	db	105	;'i'
   769  00FE20  2F                 	db	47
   770  00FE21  25                 	db	37
   771  00FE22  30                 	db	48	;'0'
   772  00FE23  32                 	db	50	;'2'
   773  00FE24  69                 	db	105	;'i'
   774  00FE25  00                 	db	0
   775  00FE26                     STR_140:
   776  00FE26  4F                 	db	79	;'O'
   777  00FE27  70                 	db	112	;'p'
   778  00FE28  65                 	db	101	;'e'
   779  00FE29  72                 	db	114	;'r'
   780  00FE2A  61                 	db	97	;'a'
   781  00FE2B  74                 	db	116	;'t'
   782  00FE2C  69                 	db	105	;'i'
   783  00FE2D  6F                 	db	111	;'o'
   784  00FE2E  6E                 	db	110	;'n'
   785  00FE2F  20                 	db	32
   786  00FE30  77                 	db	119	;'w'
   787  00FE31  69                 	db	105	;'i'
   788  00FE32  6C                 	db	108	;'l'
   789  00FE33  6C                 	db	108	;'l'
   790  00FE34  00                 	db	0
   791  00FE35                     STR_116:
   792  00FE35  25                 	db	37
   793  00FE36  30                 	db	48	;'0'
   794  00FE37  32                 	db	50	;'2'
   795  00FE38  78                 	db	120	;'x'
   796  00FE39  2F                 	db	47
   797  00FE3A  25                 	db	37
   798  00FE3B  30                 	db	48	;'0'
   799  00FE3C  32                 	db	50	;'2'
   800  00FE3D  78                 	db	120	;'x'
   801  00FE3E  2F                 	db	47
   802  00FE3F  25                 	db	37
   803  00FE40  30                 	db	48	;'0'
   804  00FE41  32                 	db	50	;'2'
   805  00FE42  78                 	db	120	;'x'
   806  00FE43  00                 	db	0
   807  00FE44                     STR_117:
   808  00FE44  25                 	db	37
   809  00FE45  30                 	db	48	;'0'
   810  00FE46  32                 	db	50	;'2'
   811  00FE47  78                 	db	120	;'x'
   812  00FE48  3A                 	db	58	;':'
   813  00FE49  25                 	db	37
   814  00FE4A  30                 	db	48	;'0'
   815  00FE4B  32                 	db	50	;'2'
   816  00FE4C  78                 	db	120	;'x'
   817  00FE4D  3A                 	db	58	;':'
   818  00FE4E  25                 	db	37
   819  00FE4F  30                 	db	48	;'0'
   820  00FE50  32                 	db	50	;'2'
   821  00FE51  78                 	db	120	;'x'
   822  00FE52  00                 	db	0
   823  00FE53                     STR_128:
   824  00FE53  44                 	db	68	;'D'
   825  00FE54  72                 	db	114	;'r'
   826  00FE55  61                 	db	97	;'a'
   827  00FE56  77                 	db	119	;'w'
   828  00FE57  65                 	db	101	;'e'
   829  00FE58  72                 	db	114	;'r'
   830  00FE59  20                 	db	32
   831  00FE5A  61                 	db	97	;'a'
   832  00FE5B  6C                 	db	108	;'l'
   833  00FE5C  72                 	db	114	;'r'
   834  00FE5D  65                 	db	101	;'e'
   835  00FE5E  61                 	db	97	;'a'
   836  00FE5F  64                 	db	100	;'d'
   837  00FE60  79                 	db	121	;'y'
   838  00FE61  00                 	db	0
   839  00FE62                     STR_38:
   840  00FE62  52                 	db	82	;'R'
   841  00FE63  3A                 	db	58	;':'
   842  00FE64  25                 	db	37
   843  00FE65  69                 	db	105	;'i'
   844  00FE66  20                 	db	32
   845  00FE67  46                 	db	70	;'F'
   846  00FE68  3A                 	db	58	;':'
   847  00FE69  25                 	db	37
   848  00FE6A  69                 	db	105	;'i'
   849  00FE6B  20                 	db	32
   850  00FE6C  4C                 	db	76	;'L'
   851  00FE6D  3A                 	db	58	;':'
   852  00FE6E  25                 	db	37
   853  00FE6F  69                 	db	105	;'i'
   854  00FE70  00                 	db	0
   855  00FE71                     STR_101:
   856  00FE71  49                 	db	73	;'I'
   857  00FE72  6E                 	db	110	;'n'
   858  00FE73  76                 	db	118	;'v'
   859  00FE74  61                 	db	97	;'a'
   860  00FE75  6C                 	db	108	;'l'
   861  00FE76  69                 	db	105	;'i'
   862  00FE77  64                 	db	100	;'d'
   863  00FE78  20                 	db	32
   864  00FE79  66                 	db	102	;'f'
   865  00FE7A  6F                 	db	111	;'o'
   866  00FE7B  6F                 	db	111	;'o'
   867  00FE7C  64                 	db	100	;'d'
   868  00FE7D  21                 	db	33
   869  00FE7E  00                 	db	0
   870  00FE7F                     STR_105:
   871  00FE7F  49                 	db	73	;'I'
   872  00FE80  6E                 	db	110	;'n'
   873  00FE81  76                 	db	118	;'v'
   874  00FE82  61                 	db	97	;'a'
   875  00FE83  6C                 	db	108	;'l'
   876  00FE84  69                 	db	105	;'i'
   877  00FE85  64                 	db	100	;'d'
   878  00FE86  20                 	db	32
   879  00FE87  64                 	db	100	;'d'
   880  00FE88  69                 	db	105	;'i'
   881  00FE89  65                 	db	101	;'e'
   882  00FE8A  74                 	db	116	;'t'
   883  00FE8B  21                 	db	33
   884  00FE8C  00                 	db	0
   885  00FE8D                     STR_135:
   886  00FE8D  73                 	db	115	;'s'
   887  00FE8E  75                 	db	117	;'u'
   888  00FE8F  63                 	db	99	;'c'
   889  00FE90  63                 	db	99	;'c'
   890  00FE91  65                 	db	101	;'e'
   891  00FE92  73                 	db	115	;'s'
   892  00FE93  73                 	db	115	;'s'
   893  00FE94  66                 	db	102	;'f'
   894  00FE95  75                 	db	117	;'u'
   895  00FE96  6C                 	db	108	;'l'
   896  00FE97  6C                 	db	108	;'l'
   897  00FE98  79                 	db	121	;'y'
   898  00FE99  21                 	db	33
   899  00FE9A  00                 	db	0
   900  00FE9B                     STR_75:
   901  00FE9B  6D                 	db	109	;'m'
   902  00FE9C  6F                 	db	111	;'o'
   903  00FE9D  76                 	db	118	;'v'
   904  00FE9E  65                 	db	101	;'e'
   905  00FE9F  20                 	db	32
   906  00FEA0  66                 	db	102	;'f'
   907  00FEA1  6F                 	db	111	;'o'
   908  00FEA2  72                 	db	114	;'r'
   909  00FEA3  77                 	db	119	;'w'
   910  00FEA4  61                 	db	97	;'a'
   911  00FEA5  72                 	db	114	;'r'
   912  00FEA6  64                 	db	100	;'d'
   913  00FEA7  2E                 	db	46
   914  00FEA8  00                 	db	0
   915  00FEA9                     STR_120:
   916  00FEA9  6F                 	db	111	;'o'
   917  00FEAA  72                 	db	114	;'r'
   918  00FEAB  20                 	db	32
   919  00FEAC  70                 	db	112	;'p'
   920  00FEAD  72                 	db	114	;'r'
   921  00FEAE  65                 	db	101	;'e'
   922  00FEAF  73                 	db	115	;'s'
   923  00FEB0  73                 	db	115	;'s'
   924  00FEB1  20                 	db	32
   925  00FEB2  44                 	db	68	;'D'
   926  00FEB3  20                 	db	32
   927  00FEB4  74                 	db	116	;'t'
   928  00FEB5  6F                 	db	111	;'o'
   929  00FEB6  00                 	db	0
   930  00FEB7                     STR_143:
   931  00FEB7  49                 	db	73	;'I'
   932  00FEB8  6E                 	db	110	;'n'
   933  00FEB9  76                 	db	118	;'v'
   934  00FEBA  61                 	db	97	;'a'
   935  00FEBB  6C                 	db	108	;'l'
   936  00FEBC  69                 	db	105	;'i'
   937  00FEBD  64                 	db	100	;'d'
   938  00FEBE  20                 	db	32
   939  00FEBF  6B                 	db	107	;'k'
   940  00FEC0  65                 	db	101	;'e'
   941  00FEC1  79                 	db	121	;'y'
   942  00FEC2  21                 	db	33
   943  00FEC3  00                 	db	0
   944  00FEC4                     STR_122:
   945  00FEC4  4D                 	db	77	;'M'
   946  00FEC5  61                 	db	97	;'a'
   947  00FEC6  78                 	db	120	;'x'
   948  00FEC7  69                 	db	105	;'i'
   949  00FEC8  6D                 	db	109	;'m'
   950  00FEC9  75                 	db	117	;'u'
   951  00FECA  6D                 	db	109	;'m'
   952  00FECB  20                 	db	32
   953  00FECC  6F                 	db	111	;'o'
   954  00FECD  66                 	db	102	;'f'
   955  00FECE  20                 	db	32
   956  00FECF  38                 	db	56	;'8'
   957  00FED0  00                 	db	0
   958  00FED1                     STR_97:
   959  00FED1  41                 	db	65	;'A'
   960  00FED2  6E                 	db	110	;'n'
   961  00FED3  6F                 	db	111	;'o'
   962  00FED4  74                 	db	116	;'t'
   963  00FED5  68                 	db	104	;'h'
   964  00FED6  65                 	db	101	;'e'
   965  00FED7  72                 	db	114	;'r'
   966  00FED8  20                 	db	32
   967  00FED9  6C                 	db	108	;'l'
   968  00FEDA  6F                 	db	111	;'o'
   969  00FEDB  67                 	db	103	;'g'
   970  00FEDC  3F                 	db	63	;'?'
   971  00FEDD  00                 	db	0
   972  00FEDE                     STR_114:
   973  00FEDE  43                 	db	67	;'C'
   974  00FEDF  75                 	db	117	;'u'
   975  00FEE0  72                 	db	114	;'r'
   976  00FEE1  72                 	db	114	;'r'
   977  00FEE2  65                 	db	101	;'e'
   978  00FEE3  6E                 	db	110	;'n'
   979  00FEE4  74                 	db	116	;'t'
   980  00FEE5  20                 	db	32
   981  00FEE6  64                 	db	100	;'d'
   982  00FEE7  61                 	db	97	;'a'
   983  00FEE8  74                 	db	116	;'t'
   984  00FEE9  65                 	db	101	;'e'
   985  00FEEA  00                 	db	0
   986  00FEEB                     STR_119:
   987  00FEEB  76                 	db	118	;'v'
   988  00FEEC  69                 	db	105	;'i'
   989  00FEED  65                 	db	101	;'e'
   990  00FEEE  77                 	db	119	;'w'
   991  00FEEF  20                 	db	32
   992  00FEF0  6C                 	db	108	;'l'
   993  00FEF1  6F                 	db	111	;'o'
   994  00FEF2  67                 	db	103	;'g'
   995  00FEF3  73                 	db	115	;'s'
   996  00FEF4  2C                 	db	44
   997  00FEF5  00                 	db	0
   998  00FEF6                     STR_71:
   999  00FEF6  61                 	db	97	;'a'
  1000  00FEF7  76                 	db	118	;'v'
  1001  00FEF8  61                 	db	97	;'a'
  1002  00FEF9  69                 	db	105	;'i'
  1003  00FEFA  6C                 	db	108	;'l'
  1004  00FEFB  61                 	db	97	;'a'
  1005  00FEFC  62                 	db	98	;'b'
  1006  00FEFD  6C                 	db	108	;'l'
  1007  00FEFE  65                 	db	101	;'e'
  1008  00FEFF  2E                 	db	46
  1009  00FF00  00                 	db	0
  1010  00FF01                     STR_142:
  1011  00FF01  52                 	db	82	;'R'
  1012  00FF02  65                 	db	101	;'e'
  1013  00FF03  62                 	db	98	;'b'
  1014  00FF04  6F                 	db	111	;'o'
  1015  00FF05  6F                 	db	111	;'o'
  1016  00FF06  74                 	db	116	;'t'
  1017  00FF07  69                 	db	105	;'i'
  1018  00FF08  6E                 	db	110	;'n'
  1019  00FF09  67                 	db	103	;'g'
  1020  00FF0A  2E                 	db	46
  1021  00FF0B  00                 	db	0
  1022  00FF0C                     STR_102:
  1023  00FF0C  54                 	db	84	;'T'
  1024  00FF0D  72                 	db	114	;'r'
  1025  00FF0E  79                 	db	121	;'y'
  1026  00FF0F  20                 	db	32
  1027  00FF10  61                 	db	97	;'a'
  1028  00FF11  67                 	db	103	;'g'
  1029  00FF12  61                 	db	97	;'a'
  1030  00FF13  69                 	db	105	;'i'
  1031  00FF14  6E                 	db	110	;'n'
  1032  00FF15  2E                 	db	46
  1033  00FF16  00                 	db	0
  1034  00FF17                     STR_95:
  1035  00FF17  44                 	db	68	;'D'
  1036  00FF18  72                 	db	114	;'r'
  1037  00FF19  61                 	db	97	;'a'
  1038  00FF1A  77                 	db	119	;'w'
  1039  00FF1B  65                 	db	101	;'e'
  1040  00FF1C  72                 	db	114	;'r'
  1041  00FF1D  20                 	db	32
  1042  00FF1E  25                 	db	37
  1043  00FF1F  69                 	db	105	;'i'
  1044  00FF20  3A                 	db	58	;':'
  1045  00FF21  00                 	db	0
  1046  00FF22                     STR_136:
  1047  00FF22  53                 	db	83	;'S'
  1048  00FF23  75                 	db	117	;'u'
  1049  00FF24  6D                 	db	109	;'m'
  1050  00FF25  6D                 	db	109	;'m'
  1051  00FF26  61                 	db	97	;'a'
  1052  00FF27  72                 	db	114	;'r'
  1053  00FF28  79                 	db	121	;'y'
  1054  00FF29  20                 	db	32
  1055  00FF2A  6F                 	db	111	;'o'
  1056  00FF2B  66                 	db	102	;'f'
  1057  00FF2C  00                 	db	0
  1058  00FF2D                     STR_118:
  1059  00FF2D  50                 	db	80	;'P'
  1060  00FF2E  72                 	db	114	;'r'
  1061  00FF2F  65                 	db	101	;'e'
  1062  00FF30  73                 	db	115	;'s'
  1063  00FF31  73                 	db	115	;'s'
  1064  00FF32  20                 	db	32
  1065  00FF33  23                 	db	35
  1066  00FF34  20                 	db	32
  1067  00FF35  74                 	db	116	;'t'
  1068  00FF36  6F                 	db	111	;'o'
  1069  00FF37  00                 	db	0
  1070  00FF38                     STR_115:
  1071  00FF38  61                 	db	97	;'a'
  1072  00FF39  6E                 	db	110	;'n'
  1073  00FF3A  64                 	db	100	;'d'
  1074  00FF3B  20                 	db	32
  1075  00FF3C  74                 	db	116	;'t'
  1076  00FF3D  69                 	db	105	;'i'
  1077  00FF3E  6D                 	db	109	;'m'
  1078  00FF3F  65                 	db	101	;'e'
  1079  00FF40  3A                 	db	58	;':'
  1080  00FF41  00                 	db	0
  1081  00FF42                     STR_126:
  1082  00FF42  4E                 	db	78	;'N'
  1083  00FF43  6F                 	db	111	;'o'
  1084  00FF44  20                 	db	32
  1085  00FF45  64                 	db	100	;'d'
  1086  00FF46  72                 	db	114	;'r'
  1087  00FF47  61                 	db	97	;'a'
  1088  00FF48  77                 	db	119	;'w'
  1089  00FF49  65                 	db	101	;'e'
  1090  00FF4A  72                 	db	114	;'r'
  1091  00FF4B  00                 	db	0
  1092  00FF4C                     STR_35:
  1093  00FF4C  64                 	db	100	;'d'
  1094  00FF4D  72                 	db	114	;'r'
  1095  00FF4E  61                 	db	97	;'a'
  1096  00FF4F  77                 	db	119	;'w'
  1097  00FF50  65                 	db	101	;'e'
  1098  00FF51  72                 	db	114	;'r'
  1099  00FF52  20                 	db	32
  1100  00FF53  25                 	db	37
  1101  00FF54  69                 	db	105	;'i'
  1102  00FF55  00                 	db	0
  1103  00FF56                     STR_34:
  1104  00FF56  4D                 	db	77	;'M'
  1105  00FF57  6F                 	db	111	;'o'
  1106  00FF58  76                 	db	118	;'v'
  1107  00FF59  69                 	db	105	;'i'
  1108  00FF5A  6E                 	db	110	;'n'
  1109  00FF5B  67                 	db	103	;'g'
  1110  00FF5C  20                 	db	32
  1111  00FF5D  74                 	db	116	;'t'
  1112  00FF5E  6F                 	db	111	;'o'
  1113  00FF5F  00                 	db	0
  1114  00FF60                     STR_79:
  1115  00FF60  6E                 	db	110	;'n'
  1116  00FF61  75                 	db	117	;'u'
  1117  00FF62  6D                 	db	109	;'m'
  1118  00FF63  62                 	db	98	;'b'
  1119  00FF64  65                 	db	101	;'e'
  1120  00FF65  72                 	db	114	;'r'
  1121  00FF66  3A                 	db	58	;':'
  1122  00FF67  20                 	db	32
  1123  00FF68  00                 	db	0
  1124  00FF69                     STR_37:
  1125  00FF69  66                 	db	102	;'f'
  1126  00FF6A  6F                 	db	111	;'o'
  1127  00FF6B  6F                 	db	111	;'o'
  1128  00FF6C  64                 	db	100	;'d'
  1129  00FF6D  3A                 	db	58	;':'
  1130  00FF6E  20                 	db	32
  1131  00FF6F  25                 	db	37
  1132  00FF70  73                 	db	115	;'s'
  1133  00FF71  00                 	db	0
  1134  00FF72                     STR_36:
  1135  00FF72  64                 	db	100	;'d'
  1136  00FF73  69                 	db	105	;'i'
  1137  00FF74  65                 	db	101	;'e'
  1138  00FF75  74                 	db	116	;'t'
  1139  00FF76  3A                 	db	58	;':'
  1140  00FF77  20                 	db	32
  1141  00FF78  25                 	db	37
  1142  00FF79  73                 	db	115	;'s'
  1143  00FF7A  00                 	db	0
  1144  00FF7B                     STR_129:
  1145  00FF7B  69                 	db	105	;'i'
  1146  00FF7C  6E                 	db	110	;'n'
  1147  00FF7D  20                 	db	32
  1148  00FF7E  75                 	db	117	;'u'
  1149  00FF7F  73                 	db	115	;'s'
  1150  00FF80  65                 	db	101	;'e'
  1151  00FF81  21                 	db	33
  1152  00FF82  00                 	db	0
  1153  00FF83                     STR_137:
  1154  00FF83  69                 	db	105	;'i'
  1155  00FF84  6E                 	db	110	;'n'
  1156  00FF85  70                 	db	112	;'p'
  1157  00FF86  75                 	db	117	;'u'
  1158  00FF87  74                 	db	116	;'t'
  1159  00FF88  73                 	db	115	;'s'
  1160  00FF89  3A                 	db	58	;':'
  1161  00FF8A  00                 	db	0
  1162  00FF8B                     STR_86:
  1163  00FF8B  25                 	db	37
  1164  00FF8C  69                 	db	105	;'i'
  1165  00FF8D  3A                 	db	58	;':'
  1166  00FF8E  25                 	db	37
  1167  00FF8F  30                 	db	48	;'0'
  1168  00FF90  32                 	db	50	;'2'
  1169  00FF91  69                 	db	105	;'i'
  1170  00FF92  00                 	db	0
  1171  00FF93                     STR_70:
  1172  00FF93  4E                 	db	78	;'N'
  1173  00FF94  6F                 	db	111	;'o'
  1174  00FF95  20                 	db	32
  1175  00FF96  6C                 	db	108	;'l'
  1176  00FF97  6F                 	db	111	;'o'
  1177  00FF98  67                 	db	103	;'g'
  1178  00FF99  73                 	db	115	;'s'
  1179  00FF9A  00                 	db	0
  1180  00FF9B                     STR_1:
  1181  00FF9B  53                 	db	83	;'S'
  1182  00FF9C  74                 	db	116	;'t'
  1183  00FF9D  61                 	db	97	;'a'
  1184  00FF9E  6E                 	db	110	;'n'
  1185  00FF9F  64                 	db	100	;'d'
  1186  00FFA0  62                 	db	98	;'b'
  1187  00FFA1  79                 	db	121	;'y'
  1188  00FFA2  00                 	db	0
  1189  00FFA3                     STR_147:
  1190  00FFA3  28                 	db	40
  1191  00FFA4  6E                 	db	110	;'n'
  1192  00FFA5  75                 	db	117	;'u'
  1193  00FFA6  6C                 	db	108	;'l'
  1194  00FFA7  6C                 	db	108	;'l'
  1195  00FFA8  29                 	db	41
  1196  00FFA9  00                 	db	0
  1197  00FFAA                     STR_80:
  1198  00FFAA  47                 	db	71	;'G'
  1199  00FFAB  72                 	db	114	;'r'
  1200  00FFAC  65                 	db	101	;'e'
  1201  00FFAD  61                 	db	97	;'a'
  1202  00FFAE  74                 	db	116	;'t'
  1203  00FFAF  21                 	db	33
  1204  00FFB0  00                 	db	0
  1205  00FFB1                     STR_83:
  1206  00FFB1  44                 	db	68	;'D'
  1207  00FFB2  61                 	db	97	;'a'
  1208  00FFB3  74                 	db	116	;'t'
  1209  00FFB4  65                 	db	101	;'e'
  1210  00FFB5  3A                 	db	58	;':'
  1211  00FFB6  00                 	db	0
  1212  00FFB7                     STR_96:
  1213  00FFB7  25                 	db	37
  1214  00FFB8  73                 	db	115	;'s'
  1215  00FFB9  25                 	db	37
  1216  00FFBA  73                 	db	115	;'s'
  1217  00FFBB  00                 	db	0
  1218  00FFBC                     STR_33:
  1219  00FFBC  31                 	db	49	;'1'
  1220  00FFBD  31                 	db	49	;'1'
  1221  00FFBE  31                 	db	49	;'1'
  1222  00FFBF  31                 	db	49	;'1'
  1223  00FFC0  00                 	db	0
  1224  00FFC1                     STR_17:
  1225  00FFC1  52                 	db	82	;'R'
  1226  00FFC2  46                 	db	70	;'F'
  1227  00FFC3  46                 	db	70	;'F'
  1228  00FFC4  4C                 	db	76	;'L'
  1229  00FFC5  00                 	db	0
  1230  00FFC6                     STR_16:
  1231  00FFC6  52                 	db	82	;'R'
  1232  00FFC7  52                 	db	82	;'R'
  1233  00FFC8  46                 	db	70	;'F'
  1234  00FFC9  4C                 	db	76	;'L'
  1235  00FFCA  00                 	db	0
  1236  00FFCB                     STR_18:
  1237  00FFCB  52                 	db	82	;'R'
  1238  00FFCC  46                 	db	70	;'F'
  1239  00FFCD  4C                 	db	76	;'L'
  1240  00FFCE  4C                 	db	76	;'L'
  1241  00FFCF  00                 	db	0
  1242  00FFD0                     STR_20:
  1243  00FFD0  46                 	db	70	;'F'
  1244  00FFD1  4C                 	db	76	;'L'
  1245  00FFD2  4C                 	db	76	;'L'
  1246  00FFD3  4C                 	db	76	;'L'
  1247  00FFD4  00                 	db	0
  1248  00FFD5                     STR_19:
  1249  00FFD5  52                 	db	82	;'R'
  1250  00FFD6  4C                 	db	76	;'L'
  1251  00FFD7  4C                 	db	76	;'L'
  1252  00FFD8  4C                 	db	76	;'L'
  1253  00FFD9  00                 	db	0
  1254  00FFDA                     STR_32:
  1255  00FFDA  32                 	db	50	;'2'
  1256  00FFDB  31                 	db	49	;'1'
  1257  00FFDC  31                 	db	49	;'1'
  1258  00FFDD  00                 	db	0
  1259  00FFDE                     STR_31:
  1260  00FFDE  31                 	db	49	;'1'
  1261  00FFDF  32                 	db	50	;'2'
  1262  00FFE0  31                 	db	49	;'1'
  1263  00FFE1  00                 	db	0
  1264  00FFE2                     STR_30:
  1265  00FFE2  31                 	db	49	;'1'
  1266  00FFE3  31                 	db	49	;'1'
  1267  00FFE4  32                 	db	50	;'2'
  1268  00FFE5  00                 	db	0
  1269  00FFE6                     STR_11:
  1270  00FFE6  52                 	db	82	;'R'
  1271  00FFE7  46                 	db	70	;'F'
  1272  00FFE8  46                 	db	70	;'F'
  1273  00FFE9  00                 	db	0
  1274  00FFEA                     STR_9:
  1275  00FFEA  52                 	db	82	;'R'
  1276  00FFEB  52                 	db	82	;'R'
  1277  00FFEC  46                 	db	70	;'F'
  1278  00FFED  00                 	db	0
  1279  00FFEE                     STR_12:
  1280  00FFEE  52                 	db	82	;'R'
  1281  00FFEF  4C                 	db	76	;'L'
  1282  00FFF0  4C                 	db	76	;'L'
  1283  00FFF1  00                 	db	0
  1284  00FFF2                     STR_10:
  1285  00FFF2  52                 	db	82	;'R'
  1286  00FFF3  52                 	db	82	;'R'
  1287  00FFF4  4C                 	db	76	;'L'
  1288  00FFF5  00                 	db	0
  1289  00FFF6                     STR_28:
  1290  00FFF6  32                 	db	50	;'2'
  1291  00FFF7  32                 	db	50	;'2'
  1292  00FFF8  00                 	db	0
  1293  00FFF9                     STR_26:
  1294  00FFF9  31                 	db	49	;'1'
  1295  00FFFA  33                 	db	51	;'3'
  1296  00FFFB  00                 	db	0
  1297  00FFFC                     STR_3:
  1298  00FFFC  52                 	db	82	;'R'
  1299  00FFFD  00                 	db	0
  1300  0000                     
  1301                           ; #config settings
  1302  00FFFE  00                 	db	0	; dummy byte at the end
  1303  0000                     
  1304                           	psect	cinit
  1305  00ACC6                     __pcinit:
  1306                           	opt stack 0
  1307  00ACC6                     start_initialization:
  1308                           	opt stack 0
  1309  00ACC6                     __initialization:
  1310                           	opt stack 0
  1311                           
  1312                           ; Initialize objects allocated to BANK2 (62 bytes)
  1313                           ; load TBLPTR registers with __pidataBANK2
  1314  00ACC6  0E9A               	movlw	low __pidataBANK2
  1315  00ACC8  6EF6               	movwf	tblptrl,c
  1316  00ACCA  0EAA               	movlw	high __pidataBANK2
  1317  00ACCC  6EF7               	movwf	tblptrh,c
  1318  00ACCE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1319  00ACD0  6EF8               	movwf	tblptru,c
  1320  00ACD2  EE02  F050         	lfsr	0,__pdataBANK2
  1321  00ACD6  EE10 F03E          	lfsr	1,62
  1322  00ACDA                     copy_data0:
  1323  00ACDA  0009               	tblrd		*+
  1324  00ACDC  CFF5 FFEE          	movff	tablat,postinc0
  1325  00ACE0  50E5               	movf	postdec1,w,c
  1326  00ACE2  50E1               	movf	fsr1l,w,c
  1327  00ACE4  E1FA               	bnz	copy_data0
  1328                           
  1329                           ; Initialize objects allocated to COMRAM (8 bytes)
  1330                           ; load TBLPTR registers with __pidataCOMRAM
  1331  00ACE6  0E82               	movlw	low __pidataCOMRAM
  1332  00ACE8  6EF6               	movwf	tblptrl,c
  1333  00ACEA  0EA9               	movlw	high __pidataCOMRAM
  1334  00ACEC  6EF7               	movwf	tblptrh,c
  1335  00ACEE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1336  00ACF0  6EF8               	movwf	tblptru,c
  1337  00ACF2  EE00  F06E         	lfsr	0,__pdataCOMRAM
  1338  00ACF6  EE10 F008          	lfsr	1,8
  1339  00ACFA                     copy_data1:
  1340  00ACFA  0009               	tblrd		*+
  1341  00ACFC  CFF5 FFEE          	movff	tablat,postinc0
  1342  00AD00  50E5               	movf	postdec1,w,c
  1343  00AD02  50E1               	movf	fsr1l,w,c
  1344  00AD04  E1FA               	bnz	copy_data1
  1345                           
  1346                           ; Clear objects allocated to BANK2 (80 bytes)
  1347  00AD06  EE02  F000         	lfsr	0,__pbssBANK2
  1348  00AD0A  0E50               	movlw	80
  1349  00AD0C                     clear_0:
  1350  00AD0C  6AEE               	clrf	postinc0,c
  1351  00AD0E  06E8               	decf	wreg,f,c
  1352  00AD10  E1FD               	bnz	clear_0
  1353                           
  1354                           ; Clear objects allocated to BANK1 (108 bytes)
  1355  00AD12  EE01  F08A         	lfsr	0,__pbssBANK1
  1356  00AD16  0E6C               	movlw	108
  1357  00AD18                     clear_1:
  1358  00AD18  6AEE               	clrf	postinc0,c
  1359  00AD1A  06E8               	decf	wreg,f,c
  1360  00AD1C  E1FD               	bnz	clear_1
  1361                           
  1362                           ; Clear objects allocated to BANK0 (48 bytes)
  1363  00AD1E  EE00  F0D0         	lfsr	0,__pbssBANK0
  1364  00AD22  0E30               	movlw	48
  1365  00AD24                     clear_2:
  1366  00AD24  6AEE               	clrf	postinc0,c
  1367  00AD26  06E8               	decf	wreg,f,c
  1368  00AD28  E1FD               	bnz	clear_2
  1369                           
  1370                           ; Clear objects allocated to COMRAM (4 bytes)
  1371  00AD2A  6A79               	clrf	(__pbssCOMRAM+3)& (0+255),c
  1372  00AD2C  6A78               	clrf	(__pbssCOMRAM+2)& (0+255),c
  1373  00AD2E  6A77               	clrf	(__pbssCOMRAM+1)& (0+255),c
  1374  00AD30  6A76               	clrf	__pbssCOMRAM& (0+255),c
  1375  00AD32                     end_of_initialization:
  1376                           	opt stack 0
  1377  00AD32                     __end_of__initialization:
  1378                           	opt stack 0
  1379  00AD32  0100               	movlb	0
  1380  00AD34  EFDB  F059         	goto	_main	;jump to C main() function
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	bssCOMRAM
  1391  000076                     __pbssCOMRAM:
  1392                           	opt stack 0
  1393  000076                     _firstIteration:
  1394                           	opt stack 0
  1395  000076                     	ds	2
  1396  000078                     _LCDinterruptState:
  1397                           	opt stack 0
  1398  000078                     	ds	1
  1399  000079                     _UARTinterruptState:
  1400                           	opt stack 0
  1401  000079                     	ds	1
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           postdec1	equ	0xFE5
  1409                           fsr1l	equ	0xFE1
  1410                           
  1411                           	psect	dataCOMRAM
  1412  00006E                     __pdataCOMRAM:
  1413                           	opt stack 0
  1414  00006E                     _UART:
  1415                           	opt stack 0
  1416  00006E                     	ds	2
  1417  000070                     _drawerDown:
  1418                           	opt stack 0
  1419  000070                     	ds	1
  1420  000071                     _drawerUp:
  1421                           	opt stack 0
  1422  000071                     	ds	1
  1423  000072                     _columnRight:
  1424                           	opt stack 0
  1425  000072                     	ds	1
  1426  000073                     _columnLeft:
  1427                           	opt stack 0
  1428  000073                     	ds	1
  1429  000074                     _rowDown:
  1430                           	opt stack 0
  1431  000074                     	ds	1
  1432  000075                     _rowUp:
  1433                           	opt stack 0
  1434  000075                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	bssBANK0
  1445  0000D0                     __pbssBANK0:
  1446                           	opt stack 0
  1447  0000D0                     diet_press@F3132:
  1448                           	opt stack 0
  1449  0000D0                     	ds	8
  1450  0000D8                     food_press@F3117:
  1451                           	opt stack 0
  1452  0000D8                     	ds	8
  1453  0000E0                     sortDrawerList@F3095:
  1454                           	opt stack 0
  1455  0000E0                     	ds	8
  1456  0000E8                     sortDrawerList@F3092:
  1457                           	opt stack 0
  1458  0000E8                     	ds	8
  1459  0000F0                     sortDrawerList@F3089:
  1460                           	opt stack 0
  1461  0000F0                     	ds	8
  1462  0000F8                     sortDrawerList@F3086:
  1463                           	opt stack 0
  1464  0000F8                     	ds	8
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postdec1	equ	0xFE5
  1472                           fsr1l	equ	0xFE1
  1473                           
  1474                           	psect	bssBANK1
  1475  00018A                     __pbssBANK1:
  1476                           	opt stack 0
  1477  00018A                     standbyMode@F3154:
  1478                           	opt stack 0
  1479  00018A                     	ds	16
  1480  00019A                     standbyMode@F3152:
  1481                           	opt stack 0
  1482  00019A                     	ds	16
  1483  0001AA                     mainOperation@F3164:
  1484                           	opt stack 0
  1485  0001AA                     	ds	16
  1486  0001BA                     mainOperation@F3162:
  1487                           	opt stack 0
  1488  0001BA                     	ds	16
  1489  0001CA                     mainOperation@F3160:
  1490                           	opt stack 0
  1491  0001CA                     	ds	16
  1492  0001DA                     mainOperation@F3158:
  1493                           	opt stack 0
  1494  0001DA                     	ds	16
  1495  0001EA                     _uart:
  1496                           	opt stack 0
  1497  0001EA                     	ds	12
  1498                           tblptru	equ	0xFF8
  1499                           tblptrh	equ	0xFF7
  1500                           tblptrl	equ	0xFF6
  1501                           tablat	equ	0xFF5
  1502                           postinc0	equ	0xFEE
  1503                           wreg	equ	0xFE8
  1504                           postdec1	equ	0xFE5
  1505                           fsr1l	equ	0xFE1
  1506                           
  1507                           	psect	bssBANK2
  1508  000200                     __pbssBANK2:
  1509                           	opt stack 0
  1510  000200                     standbyMode@F3162:
  1511                           	opt stack 0
  1512  000200                     	ds	16
  1513  000210                     standbyMode@F3160:
  1514                           	opt stack 0
  1515  000210                     	ds	16
  1516  000220                     standbyMode@F3158:
  1517                           	opt stack 0
  1518  000220                     	ds	16
  1519  000230                     standbyMode@F3156:
  1520                           	opt stack 0
  1521  000230                     	ds	16
  1522  000240                     _arr_dataRX:
  1523                           	opt stack 0
  1524  000240                     	ds	16
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	dataBANK2
  1535  000250                     __pdataBANK2:
  1536                           	opt stack 0
  1537  000250                     _inputs:
  1538                           	opt stack 0
  1539  000250                     	ds	36
  1540  000274                     _foodInputs:
  1541                           	opt stack 0
  1542  000274                     	ds	26
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           fsr1l	equ	0xFE1
  1551                           
  1552                           	psect	cstackBANK1
  1553  000100                     __pcstackBANK1:
  1554                           	opt stack 0
  1555  000100                     standbyMode@roundPieces:
  1556                           	opt stack 0
  1557                           
  1558                           ; 16 bytes @ 0x0
  1559  000100                     	ds	16
  1560  000110                     standbyMode@flatPieces:
  1561                           	opt stack 0
  1562                           
  1563                           ; 16 bytes @ 0x10
  1564  000110                     	ds	16
  1565  000120                     standbyMode@longPieces:
  1566                           	opt stack 0
  1567                           
  1568                           ; 16 bytes @ 0x20
  1569  000120                     	ds	16
  1570  000130                     standbyMode@dietType:
  1571                           	opt stack 0
  1572                           
  1573                           ; 16 bytes @ 0x30
  1574  000130                     	ds	16
  1575  000140                     standbyMode@foodType:
  1576                           	opt stack 0
  1577                           
  1578                           ; 16 bytes @ 0x40
  1579  000140                     	ds	16
  1580  000150                     standbyMode@drawerInformation:
  1581                           	opt stack 0
  1582                           
  1583                           ; 16 bytes @ 0x50
  1584  000150                     	ds	16
  1585  000160                     standbyMode@time:
  1586                           	opt stack 0
  1587                           
  1588                           ; 7 bytes @ 0x60
  1589  000160                     	ds	7
  1590  000167                     standbyMode@firstIteration:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x67
  1594  000167                     	ds	2
  1595  000169                     standbyMode@whichKey:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x69
  1599  000169                     	ds	2
  1600  00016B                     standbyMode@keypress:
  1601                           	opt stack 0
  1602                           
  1603                           ; 1 bytes @ 0x6B
  1604  00016B                     	ds	1
  1605  00016C                     standbyMode@round:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x6C
  1609  00016C                     	ds	2
  1610  00016E                     standbyMode@flat:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x6E
  1614  00016E                     	ds	2
  1615  000170                     standbyMode@lng:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x70
  1619  000170                     	ds	2
  1620  000172                     standbyMode@decodedDiet:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x72
  1624  000172                     	ds	2
  1625  000174                     standbyMode@storedFoodType:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x74
  1629  000174                     	ds	2
  1630  000176                     standbyMode@keypress1:
  1631                           	opt stack 0
  1632                           
  1633                           ; 1 bytes @ 0x76
  1634  000176                     	ds	1
  1635  000177                     standbyMode@validDrawer:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x77
  1639  000177                     	ds	2
  1640  000179                     standbyMode@zero:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x79
  1644  000179                     	ds	2
  1645  00017B                     standbyMode@n:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x7B
  1649  00017B                     	ds	2
  1650  00017D                     standbyMode@x:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x7D
  1654  00017D                     	ds	2
  1655  00017F                     standbyMode@logNumber:
  1656                           	opt stack 0
  1657                           
  1658                           ; 1 bytes @ 0x7F
  1659  00017F                     	ds	1
  1660  000180                     standbyMode@diet:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x80
  1664  000180                     	ds	2
  1665  000182                     standbyMode@drawer:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x82
  1669  000182                     	ds	2
  1670  000184                     standbyMode@food:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x84
  1674  000184                     	ds	2
  1675  000186                     standbyMode@drawerCount:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x86
  1679  000186                     	ds	2
  1680  000188                     standbyMode@i:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0x88
  1684  000188                     	ds	2
  1685                           tblptru	equ	0xFF8
  1686                           tblptrh	equ	0xFF7
  1687                           tblptrl	equ	0xFF6
  1688                           tablat	equ	0xFF5
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           postdec1	equ	0xFE5
  1692                           fsr1l	equ	0xFE1
  1693                           
  1694                           	psect	cstackBANK0
  1695  000080                     __pcstackBANK0:
  1696                           	opt stack 0
  1697  000080                     mainOperation@temp:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x0
  1701  000080                     	ds	2
  1702  000082                     mainOperation@drawerTable:
  1703                           	opt stack 0
  1704                           
  1705                           ; 16 bytes @ 0x2
  1706  000082                     	ds	16
  1707  000092                     mainOperation@nextDrawer:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x12
  1711  000092                     	ds	2
  1712  000094                     mainOperation@dietTable:
  1713                           	opt stack 0
  1714                           
  1715                           ; 16 bytes @ 0x14
  1716  000094                     	ds	16
  1717  0000A4                     mainOperation@foodTable:
  1718                           	opt stack 0
  1719                           
  1720                           ; 16 bytes @ 0x24
  1721  0000A4                     	ds	16
  1722  0000B4                     mainOperation@currentDrawer:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x34
  1726  0000B4                     	ds	2
  1727  0000B6                     mainOperation@roundPieces:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x36
  1731  0000B6                     	ds	2
  1732  0000B8                     mainOperation@flatPieces:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x38
  1736  0000B8                     	ds	2
  1737  0000BA                     mainOperation@longPieces:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x3A
  1741  0000BA                     	ds	2
  1742  0000BC                     mainOperation@sortedDrawerTable:
  1743                           	opt stack 0
  1744                           
  1745                           ; 16 bytes @ 0x3C
  1746  0000BC                     	ds	16
  1747  0000CC                     mainOperation@i:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x4C
  1751  0000CC                     	ds	2
  1752  0000CE                     mainOperation@trueValue:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x4E
  1756  0000CE                     	ds	2
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	cstackCOMRAM
  1767  000001                     __pcstackCOMRAM:
  1768                           	opt stack 0
  1769  000001                     ??_isdigit:
  1770  000001                     ??_I2C_Master_Wait:
  1771  000001                     ?_findDrawerIndex:
  1772                           	opt stack 0
  1773  000001                     ?_getRoundPieces:
  1774                           	opt stack 0
  1775  000001                     ?_getFlatPieces:
  1776                           	opt stack 0
  1777  000001                     ?_getLongPieces:
  1778                           	opt stack 0
  1779  000001                     ?_check_food:
  1780                           	opt stack 0
  1781  000001                     ?_getRound:
  1782                           	opt stack 0
  1783  000001                     ?_getFlat:
  1784                           	opt stack 0
  1785  000001                     ?_getLong:
  1786                           	opt stack 0
  1787  000001                     ?_verifyKeypress:
  1788                           	opt stack 0
  1789  000001                     ?_printFoodInput:
  1790                           	opt stack 0
  1791  000001                     ?_get_digits:
  1792                           	opt stack 0
  1793  000001                     ?_decode_diet:
  1794                           	opt stack 0
  1795  000001                     ?_decode_drawer:
  1796                           	opt stack 0
  1797  000001                     ?___wmul:
  1798                           	opt stack 0
  1799  000001                     ?___lwdiv:
  1800                           	opt stack 0
  1801  000001                     ?___aldiv:
  1802                           	opt stack 0
  1803  000001                     ?___lldiv:
  1804                           	opt stack 0
  1805  000001                     writeEEPROM@data:
  1806                           	opt stack 0
  1807  000001                     readEEPROM@address:
  1808                           	opt stack 0
  1809  000001                     lcdNibble@temp:
  1810                           	opt stack 0
  1811  000001                     sortDrawerList@drawerTable:
  1812                           	opt stack 0
  1813  000001                     findDrawerIndex@drawerTable:
  1814                           	opt stack 0
  1815  000001                     getRoundPieces@dietType:
  1816                           	opt stack 0
  1817  000001                     getFlatPieces@dietType:
  1818                           	opt stack 0
  1819  000001                     getLongPieces@dietType:
  1820                           	opt stack 0
  1821  000001                     check_food@sum:
  1822                           	opt stack 0
  1823  000001                     getRound@code:
  1824                           	opt stack 0
  1825  000001                     getFlat@code:
  1826                           	opt stack 0
  1827  000001                     getLong@code:
  1828                           	opt stack 0
  1829  000001                     verifyKeypress@keypress:
  1830                           	opt stack 0
  1831  000001                     printFoodInput@food:
  1832                           	opt stack 0
  1833  000001                     get_digits@sum:
  1834                           	opt stack 0
  1835  000001                     decode_diet@dietType:
  1836                           	opt stack 0
  1837  000001                     decode_drawer@drawer:
  1838                           	opt stack 0
  1839  000001                     ___wmul@multiplier:
  1840                           	opt stack 0
  1841  000001                     ___lwdiv@dividend:
  1842                           	opt stack 0
  1843  000001                     ___aldiv@dividend:
  1844                           	opt stack 0
  1845  000001                     ___lldiv@dividend:
  1846                           	opt stack 0
  1847                           
  1848                           ; 4 bytes @ 0x0
  1849  000001                     	ds	1
  1850  000002                     writeEEPROM@address:
  1851                           	opt stack 0
  1852  000002                     I2C_Master_Read@ackBit:
  1853                           	opt stack 0
  1854  000002                     lcdNibble@data:
  1855                           	opt stack 0
  1856  000002                     _isdigit$1635:
  1857                           	opt stack 0
  1858  000002                     I2C_Master_Write@byteToWrite:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x1
  1862  000002                     	ds	1
  1863  000003                     ??_shiftEEPROM:
  1864  000003                     ??_getRound:
  1865  000003                     ??_getFlat:
  1866  000003                     ??_getLong:
  1867  000003                     ??_verifyKeypress:
  1868  000003                     ??_get_digits:
  1869  000003                     ??_decode_diet:
  1870  000003                     ??_decode_drawer:
  1871  000003                     I2C_Master_Read@receivedByte:
  1872                           	opt stack 0
  1873  000003                     lcdInst@data:
  1874                           	opt stack 0
  1875  000003                     putch@data:
  1876                           	opt stack 0
  1877  000003                     isdigit@c:
  1878                           	opt stack 0
  1879  000003                     sortDrawerList@sortedDrawerTable:
  1880                           	opt stack 0
  1881  000003                     findDrawerIndex@sortedDrawerValue:
  1882                           	opt stack 0
  1883  000003                     getRoundPieces@foodType:
  1884                           	opt stack 0
  1885  000003                     getFlatPieces@foodType:
  1886                           	opt stack 0
  1887  000003                     getLongPieces@foodType:
  1888                           	opt stack 0
  1889  000003                     check_food@foodInput:
  1890                           	opt stack 0
  1891  000003                     initEEPROM@i:
  1892                           	opt stack 0
  1893  000003                     ___wmul@multiplicand:
  1894                           	opt stack 0
  1895  000003                     ___lwdiv@divisor:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x2
  1899  000003                     	ds	1
  1900  000004                     ??_initLCD:
  1901  000004                     shiftEEPROM@temp:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0x3
  1905  000004                     	ds	1
  1906  000005                     ??_sortDrawerList:
  1907  000005                     ??_getRoundPieces:
  1908  000005                     ??_getFlatPieces:
  1909  000005                     ??_getLongPieces:
  1910  000005                     ??_check_food:
  1911  000005                     verifyKeypress@logNumber:
  1912                           	opt stack 0
  1913  000005                     getRound@returnValue:
  1914                           	opt stack 0
  1915  000005                     getFlat@returnValue:
  1916                           	opt stack 0
  1917  000005                     getLong@returnValue:
  1918                           	opt stack 0
  1919  000005                     get_digits@count:
  1920                           	opt stack 0
  1921  000005                     decode_diet@returnValue:
  1922                           	opt stack 0
  1923  000005                     decode_drawer@returnValue:
  1924                           	opt stack 0
  1925  000005                     ___wmul@product:
  1926                           	opt stack 0
  1927  000005                     ___lwdiv@quotient:
  1928                           	opt stack 0
  1929  000005                     ___aldiv@divisor:
  1930                           	opt stack 0
  1931  000005                     ___lldiv@divisor:
  1932                           	opt stack 0
  1933                           
  1934                           ; 4 bytes @ 0x4
  1935  000005                     	ds	1
  1936  000006                     verifyKeypress@returnVal:
  1937                           	opt stack 0
  1938  000006                     shiftEEPROM@i:
  1939                           	opt stack 0
  1940                           
  1941                           ; 2 bytes @ 0x5
  1942  000006                     	ds	1
  1943  000007                     ___lwdiv@counter:
  1944                           	opt stack 0
  1945  000007                     getUserInputs@drawerTable:
  1946                           	opt stack 0
  1947  000007                     findDrawerIndex@returnValue:
  1948                           	opt stack 0
  1949  000007                     getRoundPieces@returnValue:
  1950                           	opt stack 0
  1951  000007                     getFlatPieces@returnValue:
  1952                           	opt stack 0
  1953  000007                     getLongPieces@returnValue:
  1954                           	opt stack 0
  1955  000007                     check_food@returnValue:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x6
  1959  000007                     	ds	1
  1960  000008                     ?___lwmod:
  1961                           	opt stack 0
  1962  000008                     verifyKeypress@i:
  1963                           	opt stack 0
  1964  000008                     ___lwmod@dividend:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x7
  1968  000008                     	ds	1
  1969  000009                     ___aldiv@counter:
  1970                           	opt stack 0
  1971  000009                     getUserInputs@dietTable:
  1972                           	opt stack 0
  1973  000009                     findDrawerIndex@i:
  1974                           	opt stack 0
  1975  000009                     ___lldiv@quotient:
  1976                           	opt stack 0
  1977                           
  1978                           ; 4 bytes @ 0x8
  1979  000009                     	ds	1
  1980  00000A                     ___aldiv@sign:
  1981                           	opt stack 0
  1982  00000A                     ___lwmod@divisor:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x9
  1986  00000A                     	ds	1
  1987  00000B                     getUserInputs@foodTable:
  1988                           	opt stack 0
  1989  00000B                     ___aldiv@quotient:
  1990                           	opt stack 0
  1991  00000B                     sortDrawerList@sublist1:
  1992                           	opt stack 0
  1993                           
  1994                           ; 8 bytes @ 0xA
  1995  00000B                     	ds	1
  1996  00000C                     ___lwmod@counter:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0xB
  2000  00000C                     	ds	1
  2001  00000D                     ??_getUserInputs:
  2002  00000D                     ?_printf:
  2003                           	opt stack 0
  2004  00000D                     ___lldiv@counter:
  2005                           	opt stack 0
  2006  00000D                     printf@f:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0xC
  2010  00000D                     	ds	1
  2011  00000E                     I2C_Master_Init@clockFreq:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0xD
  2015  00000E                     	ds	1
  2016  00000F                     getUserInputs@logNumber:
  2017                           	opt stack 0
  2018  00000F                     UART_Init@baud:
  2019                           	opt stack 0
  2020                           
  2021                           ; 4 bytes @ 0xE
  2022  00000F                     	ds	2
  2023  000011                     getUserInputs@count:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x10
  2027  000011                     	ds	1
  2028  000012                     ??_I2C_Master_Init:
  2029                           
  2030                           ; 1 bytes @ 0x11
  2031  000012                     	ds	1
  2032  000013                     ??_UART_Init:
  2033  000013                     getUserInputs@n:
  2034                           	opt stack 0
  2035  000013                     sortDrawerList@sublist4:
  2036                           	opt stack 0
  2037                           
  2038                           ; 8 bytes @ 0x12
  2039  000013                     	ds	2
  2040  000015                     getUserInputs@data:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x14
  2044  000015                     	ds	2
  2045  000017                     ??_printf:
  2046  000017                     getUserInputs@i:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x16
  2050  000017                     	ds	4
  2051  00001B                     printf@idx:
  2052                           	opt stack 0
  2053  00001B                     sortDrawerList@sublist2:
  2054                           	opt stack 0
  2055                           
  2056                           ; 8 bytes @ 0x1A
  2057  00001B                     	ds	1
  2058  00001C                     printf@prec:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x1B
  2062  00001C                     	ds	1
  2063  00001D                     printf@cp:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x1C
  2067  00001D                     	ds	2
  2068  00001F                     printf@ap:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x1E
  2072  00001F                     	ds	2
  2073  000021                     printf@len:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x20
  2077  000021                     	ds	2
  2078  000023                     printf@val:
  2079                           	opt stack 0
  2080  000023                     sortDrawerList@sublist3:
  2081                           	opt stack 0
  2082                           
  2083                           ; 8 bytes @ 0x22
  2084  000023                     	ds	2
  2085  000025                     printf@flag:
  2086                           	opt stack 0
  2087                           
  2088                           ; 1 bytes @ 0x24
  2089  000025                     	ds	1
  2090  000026                     printf@width:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x25
  2094  000026                     	ds	2
  2095  000028                     printf@c:
  2096                           	opt stack 0
  2097                           
  2098                           ; 1 bytes @ 0x27
  2099  000028                     	ds	1
  2100  000029                     ?_displayLogs:
  2101                           	opt stack 0
  2102  000029                     ?_food_press:
  2103                           	opt stack 0
  2104  000029                     ?_diet_press:
  2105                           	opt stack 0
  2106  000029                     ?_which_drawer:
  2107                           	opt stack 0
  2108  000029                     displayLogs@logNumber:
  2109                           	opt stack 0
  2110  000029                     food_press@dietSum:
  2111                           	opt stack 0
  2112  000029                     diet_press@drawer:
  2113                           	opt stack 0
  2114                           
  2115                           ; 2 bytes @ 0x28
  2116  000029                     	ds	2
  2117  00002B                     ??_displayLogs:
  2118  00002B                     ??_diet_press:
  2119  00002B                     ??_which_drawer:
  2120  00002B                     sortDrawerList@count4:
  2121                           	opt stack 0
  2122  00002B                     food_press@drawer:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x2A
  2126  00002B                     	ds	1
  2127  00002C                     which_drawer@rand:
  2128                           	opt stack 0
  2129                           
  2130                           ; 2 bytes @ 0x2B
  2131  00002C                     	ds	1
  2132  00002D                     ??_food_press:
  2133  00002D                     sortDrawerList@count2:
  2134                           	opt stack 0
  2135  00002D                     displayLogs@year:
  2136                           	opt stack 0
  2137  00002D                     diet_press@previous:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x2C
  2141  00002D                     	ds	1
  2142  00002E                     which_drawer@sum:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x2D
  2146  00002E                     	ds	1
  2147  00002F                     sortDrawerList@temp:
  2148                           	opt stack 0
  2149  00002F                     displayLogs@month:
  2150                           	opt stack 0
  2151  00002F                     food_press@tally:
  2152                           	opt stack 0
  2153  00002F                     diet_press@i:
  2154                           	opt stack 0
  2155                           
  2156                           ; 2 bytes @ 0x2E
  2157  00002F                     	ds	1
  2158  000030                     which_drawer@backCheck:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x2F
  2162  000030                     	ds	1
  2163  000031                     sortDrawerList@count1:
  2164                           	opt stack 0
  2165  000031                     displayLogs@day:
  2166                           	opt stack 0
  2167  000031                     food_press@backCheck:
  2168                           	opt stack 0
  2169  000031                     diet_press@backCheck:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x30
  2173  000031                     	ds	1
  2174  000032                     which_drawer@count:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x31
  2178  000032                     	ds	1
  2179  000033                     sortDrawerList@count3:
  2180                           	opt stack 0
  2181  000033                     displayLogs@roundPieces:
  2182                           	opt stack 0
  2183  000033                     food_press@isValid:
  2184                           	opt stack 0
  2185  000033                     diet_press@count:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x32
  2189  000033                     	ds	1
  2190  000034                     which_drawer@keypress:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x33
  2194  000034                     	ds	1
  2195  000035                     sortDrawerList@j:
  2196                           	opt stack 0
  2197  000035                     displayLogs@flatPieces:
  2198                           	opt stack 0
  2199  000035                     food_press@count:
  2200                           	opt stack 0
  2201  000035                     diet_press@sum:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x34
  2205  000035                     	ds	2
  2206  000037                     food_press@keypress:
  2207                           	opt stack 0
  2208  000037                     diet_press@keypress:
  2209                           	opt stack 0
  2210  000037                     sortDrawerList@i:
  2211                           	opt stack 0
  2212  000037                     displayLogs@longPieces:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x36
  2216  000037                     	ds	1
  2217  000038                     food_press@foodTable:
  2218                           	opt stack 0
  2219  000038                     diet_press@dietTable:
  2220                           	opt stack 0
  2221                           
  2222                           ; 8 bytes @ 0x37
  2223  000038                     	ds	1
  2224  000039                     ??_mainOperation:
  2225  000039                     displayLogs@minutes:
  2226                           	opt stack 0
  2227                           
  2228                           ; 2 bytes @ 0x38
  2229  000039                     	ds	2
  2230  00003B                     displayLogs@seconds:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x3A
  2234  00003B                     	ds	2
  2235  00003D                     displayLogs@dietType:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x3C
  2239  00003D                     	ds	2
  2240  00003F                     displayLogs@foodType:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x3E
  2244  00003F                     	ds	2
  2245  000041                     displayLogs@keypress3:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x40
  2249  000041                     	ds	1
  2250  000042                     displayLogs@operationTime:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x41
  2254  000042                     	ds	2
  2255  000044                     displayLogs@drawerNumber:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x43
  2259  000044                     	ds	2
  2260  000046                     displayLogs@i:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x45
  2264  000046                     	ds	2
  2265  000048                     displayLogs@markedDrawer1:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x47
  2269  000048                     	ds	2
  2270  00004A                     displayLogs@markedDrawer2:
  2271                           	opt stack 0
  2272                           
  2273                           ; 2 bytes @ 0x49
  2274  00004A                     	ds	2
  2275  00004C                     displayLogs@markedDrawer3:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x4B
  2279  00004C                     	ds	2
  2280  00004E                     displayLogs@markedDrawer4:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x4D
  2284  00004E                     	ds	2
  2285  000050                     displayLogs@n:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x4F
  2289  000050                     	ds	2
  2290  000052                     ?_viewLogs:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x51
  2294  000052                     	ds	2
  2295  000054                     ??_viewLogs:
  2296                           
  2297                           ; 1 bytes @ 0x53
  2298  000054                     	ds	2
  2299  000056                     viewLogs@checkLog:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x55
  2303  000056                     	ds	2
  2304  000058                     viewLogs@returnVal:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x57
  2308  000058                     	ds	2
  2309  00005A                     viewLogs@logView:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x59
  2313  00005A                     	ds	2
  2314  00005C                     viewLogs@logNumber:
  2315                           	opt stack 0
  2316                           
  2317                           ; 1 bytes @ 0x5B
  2318  00005C                     	ds	1
  2319  00005D                     viewLogs@keypress2:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x5C
  2323  00005D                     	ds	1
  2324  00005E                     ?_standbyMode:
  2325                           	opt stack 0
  2326                           
  2327                           ; 2 bytes @ 0x5D
  2328  00005E                     	ds	2
  2329  000060                     ??_standbyMode:
  2330                           
  2331                           ; 1 bytes @ 0x5F
  2332  000060                     	ds	4
  2333  000064                     ??_main:
  2334                           
  2335                           ; 1 bytes @ 0x63
  2336  000064                     	ds	2
  2337  000066                     main@i:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x65
  2341  000066                     	ds	2
  2342  000068                     main@l:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0x67
  2346  000068                     	ds	2
  2347  00006A                     main@operationMode:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x69
  2351  00006A                     	ds	2
  2352  00006C                     main@checkEEPROM:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x6B
  2356  00006C                     	ds	2
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           postdec1	equ	0xFE5
  2364                           fsr1l	equ	0xFE1
  2365                           
  2366 ;;
  2367 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2368 ;;
  2369 ;; *************** function _main *****************
  2370 ;; Defined at:
  2371 ;;		line 19 in file "main.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  checkEEPROM     2  107[COMRAM] unsigned int 
  2376 ;;  operationMod    2  105[COMRAM] unsigned int 
  2377 ;;  l               2  103[COMRAM] unsigned int 
  2378 ;;  i               2  101[COMRAM] unsigned int 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;Total ram usage:       10 bytes
  2393 ;; Hardware stack levels required when called:    6
  2394 ;; This function calls:
  2395 ;;		_UART_Init
  2396 ;;		_initEEPROM
  2397 ;;		_initLCD
  2398 ;;		_lcdInst
  2399 ;;		_mainOperation
  2400 ;;		_printf
  2401 ;;		_readEEPROM
  2402 ;;		_standbyMode
  2403 ;; This function is called by:
  2404 ;;		Startup code after reset
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text0
  2409  00B3B6                     __ptext0:
  2410                           	opt stack 0
  2411  00B3B6                     _main:
  2412                           	opt stack 25
  2413                           
  2414                           ;main.c: 25: LATA = 0x00;
  2415                           
  2416                           ;incstack = 0
  2417  00B3B6  0E00               	movlw	0
  2418  00B3B8  6E89               	movwf	3977,c	;volatile
  2419                           
  2420                           ;main.c: 26: LATB = 0x00;
  2421  00B3BA  0E00               	movlw	0
  2422  00B3BC  6E8A               	movwf	3978,c	;volatile
  2423                           
  2424                           ;main.c: 27: LATC = 0x00;
  2425  00B3BE  0E00               	movlw	0
  2426  00B3C0  6E8B               	movwf	3979,c	;volatile
  2427                           
  2428                           ;main.c: 28: LATD = 0x00;
  2429  00B3C2  0E00               	movlw	0
  2430  00B3C4  6E8C               	movwf	3980,c	;volatile
  2431                           
  2432                           ;main.c: 29: LATE = 0x00;
  2433  00B3C6  0E00               	movlw	0
  2434  00B3C8  6E8D               	movwf	3981,c	;volatile
  2435                           
  2436                           ;main.c: 33: TRISA = 0xFF;
  2437  00B3CA  6892               	setf	3986,c	;volatile
  2438                           
  2439                           ;main.c: 34: TRISB = 0xFF;
  2440  00B3CC  6893               	setf	3987,c	;volatile
  2441                           
  2442                           ;main.c: 35: TRISC = 0x00;
  2443  00B3CE  0E00               	movlw	0
  2444  00B3D0  6E94               	movwf	3988,c	;volatile
  2445                           
  2446                           ;main.c: 36: TRISD = 0x00;
  2447  00B3D2  0E00               	movlw	0
  2448  00B3D4  6E95               	movwf	3989,c	;volatile
  2449                           
  2450                           ;main.c: 37: TRISE = 0x00;
  2451  00B3D6  0E00               	movlw	0
  2452  00B3D8  6E96               	movwf	3990,c	;volatile
  2453                           
  2454                           ;main.c: 40: ADCON0 = 0x00;
  2455  00B3DA  0E00               	movlw	0
  2456  00B3DC  6EC2               	movwf	4034,c	;volatile
  2457                           
  2458                           ;main.c: 41: ADCON1 = 0b00001111;
  2459  00B3DE  0E0F               	movlw	15
  2460  00B3E0  6EC1               	movwf	4033,c	;volatile
  2461                           
  2462                           ;main.c: 44: initLCD();
  2463  00B3E2  EC8D  F055         	call	_initLCD	;wreg free
  2464                           
  2465                           ;main.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2466  00B3E6  0E01               	movlw	1
  2467  00B3E8  ECD3  F054         	call	_lcdInst
  2468  00B3EC  0EC3               	movlw	195
  2469  00B3EE  6E64               	movwf	??_main& (0+255),c
  2470  00B3F0  0ECD               	movlw	205
  2471  00B3F2                     u13497:
  2472  00B3F2  2EE8               	decfsz	wreg,f,c
  2473  00B3F4  D7FE               	bra	u13497
  2474  00B3F6  2E64               	decfsz	??_main& (0+255),f,c
  2475  00B3F8  D7FC               	bra	u13497
  2476  00B3FA  F000               	nop	
  2477                           
  2478                           ;main.c: 46: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2479  00B3FC  0E0C               	movlw	12
  2480  00B3FE  ECD3  F054         	call	_lcdInst
  2481                           
  2482                           ;main.c: 47: printf("Standby");
  2483  00B402  0E9B               	movlw	low STR_1
  2484  00B404  6E0D               	movwf	printf@f,c
  2485  00B406  0EFF               	movlw	high STR_1
  2486  00B408  6E0E               	movwf	printf@f+1,c
  2487  00B40A  EC9A  F064         	call	_printf	;wreg free
  2488                           
  2489                           ;main.c: 50: UART_Init(9600);
  2490  00B40E  0E80               	movlw	128
  2491  00B410  6E0F               	movwf	UART_Init@baud,c
  2492  00B412  0E25               	movlw	37
  2493  00B414  6E10               	movwf	UART_Init@baud+1,c
  2494  00B416  0E00               	movlw	0
  2495  00B418  6E11               	movwf	UART_Init@baud+2,c
  2496  00B41A  0E00               	movlw	0
  2497  00B41C  6E12               	movwf	UART_Init@baud+3,c
  2498  00B41E  EC1C  F057         	call	_UART_Init	;wreg free
  2499                           
  2500                           ;main.c: 54: unsigned int operationMode = 0;
  2501  00B422  0E00               	movlw	0
  2502  00B424  6E6B               	movwf	main@operationMode+1,c
  2503  00B426  0E00               	movlw	0
  2504  00B428  6E6A               	movwf	main@operationMode,c
  2505                           
  2506                           ;main.c: 55: unsigned int i = 0;
  2507  00B42A  0E00               	movlw	0
  2508  00B42C  6E67               	movwf	main@i+1,c
  2509  00B42E  0E00               	movlw	0
  2510  00B430  6E66               	movwf	main@i,c
  2511                           
  2512                           ;main.c: 56: unsigned int l = 0;
  2513  00B432  0E00               	movlw	0
  2514  00B434  6E69               	movwf	main@l+1,c
  2515  00B436  0E00               	movlw	0
  2516  00B438  6E68               	movwf	main@l,c
  2517                           
  2518                           ;main.c: 73: unsigned int checkEEPROM = 0;
  2519  00B43A  0E00               	movlw	0
  2520  00B43C  6E6D               	movwf	main@checkEEPROM+1,c
  2521  00B43E  0E00               	movlw	0
  2522  00B440  6E6C               	movwf	main@checkEEPROM,c
  2523                           
  2524                           ;main.c: 75: checkEEPROM = readEEPROM(251);
  2525  00B442  0EFB               	movlw	251
  2526  00B444  ECDD  F054         	call	_readEEPROM
  2527  00B448  6E64               	movwf	??_main& (0+255),c
  2528  00B44A  5064               	movf	??_main,w,c
  2529  00B44C  6E6C               	movwf	main@checkEEPROM,c
  2530  00B44E  6A6D               	clrf	main@checkEEPROM+1,c
  2531                           
  2532                           ;main.c: 77: if (checkEEPROM == 255){
  2533  00B450  286C               	incf	main@checkEEPROM,w,c
  2534  00B452  106D               	iorwf	main@checkEEPROM+1,w,c
  2535  00B454  A4D8               	btfss	status,2,c
  2536  00B456  D01F               	goto	l67
  2537                           
  2538                           ;main.c: 78: initEEPROM();
  2539  00B458  EC12  F055         	call	_initEEPROM	;wreg free
  2540                           
  2541                           ;main.c: 79: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2542  00B45C  0E01               	movlw	1
  2543  00B45E  ECD3  F054         	call	_lcdInst
  2544  00B462  0EC3               	movlw	195
  2545  00B464  6E64               	movwf	??_main& (0+255),c
  2546  00B466  0ECD               	movlw	205
  2547  00B468                     u13507:
  2548  00B468  2EE8               	decfsz	wreg,f,c
  2549  00B46A  D7FE               	bra	u13507
  2550  00B46C  2E64               	decfsz	??_main& (0+255),f,c
  2551  00B46E  D7FC               	bra	u13507
  2552  00B470  F000               	nop	
  2553                           
  2554                           ;main.c: 80: printf("Clearing EEPROM");
  2555  00B472  0EBC               	movlw	low STR_2
  2556  00B474  6E0D               	movwf	printf@f,c
  2557  00B476  0EFD               	movlw	high STR_2
  2558  00B478  6E0E               	movwf	printf@f+1,c
  2559  00B47A  EC9A  F064         	call	_printf	;wreg free
  2560                           
  2561                           ;main.c: 81: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2562  00B47E  0E66               	movlw	102
  2563  00B480  6E65               	movwf	(??_main+1)& (0+255),c
  2564  00B482  0E76               	movlw	118
  2565  00B484  6E64               	movwf	??_main& (0+255),c
  2566  00B486  0EC1               	movlw	193
  2567  00B488                     u13517:
  2568  00B488  2EE8               	decfsz	wreg,f,c
  2569  00B48A  D7FE               	bra	u13517
  2570  00B48C  2E64               	decfsz	??_main& (0+255),f,c
  2571  00B48E  D7FC               	bra	u13517
  2572  00B490  2E65               	decfsz	(??_main+1)& (0+255),f,c
  2573  00B492  D7FA               	bra	u13517
  2574  00B494  F000               	nop	
  2575  00B496                     l67:
  2576                           
  2577                           ;main.c: 82: }
  2578                           ;main.c: 85: operationMode = standbyMode();
  2579  00B496  ECBE  F076         	call	_standbyMode	;wreg free
  2580  00B49A  C05E  F06A         	movff	?_standbyMode,main@operationMode
  2581  00B49E  C05F  F06B         	movff	?_standbyMode+1,main@operationMode+1
  2582                           
  2583                           ;main.c: 87: if (operationMode == 1){
  2584  00B4A2  046A               	decf	main@operationMode,w,c
  2585  00B4A4  106B               	iorwf	main@operationMode+1,w,c
  2586  00B4A6  B4D8               	btfsc	status,2,c
  2587                           
  2588                           ;main.c: 88: mainOperation();
  2589  00B4A8  ECC2  F062         	call	_mainOperation	;wreg free
  2590                           
  2591                           ;main.c: 89: }
  2592                           ;main.c: 91: firstIteration += 1;
  2593  00B4AC  4A76               	infsnz	_firstIteration,f,c
  2594  00B4AE  2A77               	incf	_firstIteration+1,f,c
  2595                           
  2596                           ;main.c: 92: return;
  2597  00B4B0  EF00  F000         	goto	start
  2598  00B4B4                     __end_of_main:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           postdec1	equ	0xFE5
  2607                           fsr1l	equ	0xFE1
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _standbyMode *****************
  2611 ;; Defined at:
  2612 ;;		line 1605 in file "standbyMode.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2617 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2618 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2619 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2620 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2621 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2622 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2623 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2624 ;;  time            7   96[BANK1 ] unsigned char [7]
  2625 ;;  i               2  136[BANK1 ] unsigned int 
  2626 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2627 ;;  food            2  132[BANK1 ] unsigned int 
  2628 ;;  drawer          2  130[BANK1 ] unsigned int 
  2629 ;;  diet            2  128[BANK1 ] unsigned int 
  2630 ;;  x               2  125[BANK1 ] unsigned int 
  2631 ;;  n               2  123[BANK1 ] unsigned int 
  2632 ;;  zero            2  121[BANK1 ] unsigned int 
  2633 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2634 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2635 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2636 ;;  lng             2  112[BANK1 ] unsigned int 
  2637 ;;  flat            2  110[BANK1 ] unsigned int 
  2638 ;;  round           2  108[BANK1 ] unsigned int 
  2639 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2640 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2641 ;;  keypress        1  107[BANK1 ] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  2   93[COMRAM] unsigned int 
  2644 ;; Registers used:
  2645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         6       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:      144 bytes
  2656 ;; Hardware stack levels used:    1
  2657 ;; Hardware stack levels required when called:    5
  2658 ;; This function calls:
  2659 ;;		_I2C_Master_Init
  2660 ;;		_I2C_Master_Read
  2661 ;;		_I2C_Master_Start
  2662 ;;		_I2C_Master_Stop
  2663 ;;		_I2C_Master_Write
  2664 ;;		___wmul
  2665 ;;		_decode_diet
  2666 ;;		_diet_press
  2667 ;;		_food_press
  2668 ;;		_getFlat
  2669 ;;		_getLong
  2670 ;;		_getRound
  2671 ;;		_lcdInst
  2672 ;;		_printFoodInput
  2673 ;;		_printf
  2674 ;;		_readEEPROM
  2675 ;;		_shiftEEPROM
  2676 ;;		_viewLogs
  2677 ;;		_which_drawer
  2678 ;;		_writeEEPROM
  2679 ;; This function is called by:
  2680 ;;		_main
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text1
  2685  00ED7C                     __ptext1:
  2686                           	opt stack 0
  2687  00ED7C                     _standbyMode:
  2688                           	opt stack 25
  2689                           
  2690                           ;standbyMode.c: 1606: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2691                           
  2692                           ;incstack = 0
  2693  00ED7C  EE21  F09A         	lfsr	2,standbyMode@F3152
  2694  00ED80  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2695  00ED84  0E0F               	movlw	15
  2696  00ED86                     u12121:
  2697  00ED86  CFDB FFE3          	movff	plusw2,plusw1
  2698  00ED8A  06E8               	decf	wreg,f,c
  2699  00ED8C  E2FC               	bc	u12121
  2700                           
  2701                           ;standbyMode.c: 1607: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2702  00ED8E  EE21  F08A         	lfsr	2,standbyMode@F3154
  2703  00ED92  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2704  00ED96  0E0F               	movlw	15
  2705  00ED98                     u12131:
  2706  00ED98  CFDB FFE3          	movff	plusw2,plusw1
  2707  00ED9C  06E8               	decf	wreg,f,c
  2708  00ED9E  E2FC               	bc	u12131
  2709                           
  2710                           ;standbyMode.c: 1608: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2711  00EDA0  EE22  F030         	lfsr	2,standbyMode@F3156
  2712  00EDA4  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2713  00EDA8  0E0F               	movlw	15
  2714  00EDAA                     u12141:
  2715  00EDAA  CFDB FFE3          	movff	plusw2,plusw1
  2716  00EDAE  06E8               	decf	wreg,f,c
  2717  00EDB0  E2FC               	bc	u12141
  2718                           
  2719                           ;standbyMode.c: 1609: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2720  00EDB2  EE22  F020         	lfsr	2,standbyMode@F3158
  2721  00EDB6  EE11  F020         	lfsr	1,standbyMode@longPieces
  2722  00EDBA  0E0F               	movlw	15
  2723  00EDBC                     u12151:
  2724  00EDBC  CFDB FFE3          	movff	plusw2,plusw1
  2725  00EDC0  06E8               	decf	wreg,f,c
  2726  00EDC2  E2FC               	bc	u12151
  2727                           
  2728                           ;standbyMode.c: 1610: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2729  00EDC4  EE22  F010         	lfsr	2,standbyMode@F3160
  2730  00EDC8  EE11  F030         	lfsr	1,standbyMode@dietType
  2731  00EDCC  0E0F               	movlw	15
  2732  00EDCE                     u12161:
  2733  00EDCE  CFDB FFE3          	movff	plusw2,plusw1
  2734  00EDD2  06E8               	decf	wreg,f,c
  2735  00EDD4  E2FC               	bc	u12161
  2736                           
  2737                           ;standbyMode.c: 1611: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  2738  00EDD6  EE22  F000         	lfsr	2,standbyMode@F3162
  2739  00EDDA  EE11  F040         	lfsr	1,standbyMode@foodType
  2740  00EDDE  0E0F               	movlw	15
  2741  00EDE0                     u12171:
  2742  00EDE0  CFDB FFE3          	movff	plusw2,plusw1
  2743  00EDE4  06E8               	decf	wreg,f,c
  2744  00EDE6  E2FC               	bc	u12171
  2745                           
  2746                           ;standbyMode.c: 1612: unsigned int drawerCount = 0;
  2747  00EDE8  0E00               	movlw	0
  2748  00EDEA  0101               	movlb	1	; () banked
  2749  00EDEC  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2750  00EDEE  0E00               	movlw	0
  2751  00EDF0  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  2752                           
  2753                           ; BSR set to: 1
  2754                           ;standbyMode.c: 1613: unsigned int i = 0;
  2755  00EDF2  0E00               	movlw	0
  2756  00EDF4  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  2757  00EDF6  0E00               	movlw	0
  2758  00EDF8  6F88               	movwf	standbyMode@i& (0+255),b
  2759                           
  2760                           ; BSR set to: 1
  2761                           ;standbyMode.c: 1614: unsigned int validDrawer = 0;
  2762  00EDFA  0E00               	movlw	0
  2763  00EDFC  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2764  00EDFE  0E00               	movlw	0
  2765  00EE00  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  2766                           
  2767                           ; BSR set to: 1
  2768                           ;standbyMode.c: 1615: unsigned int zero = 0;
  2769  00EE02  0E00               	movlw	0
  2770  00EE04  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  2771  00EE06  0E00               	movlw	0
  2772  00EE08  6F79               	movwf	standbyMode@zero& (0+255),b
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;standbyMode.c: 1616: unsigned int firstIteration = 0;
  2776  00EE0A  0E00               	movlw	0
  2777  00EE0C  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2778  00EE0E  0E00               	movlw	0
  2779  00EE10  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  2780                           
  2781                           ; BSR set to: 1
  2782                           ;standbyMode.c: 1617: unsigned int drawer = 0;
  2783  00EE12  0E00               	movlw	0
  2784  00EE14  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  2785  00EE16  0E00               	movlw	0
  2786  00EE18  6F82               	movwf	standbyMode@drawer& (0+255),b
  2787                           
  2788                           ; BSR set to: 1
  2789                           ;standbyMode.c: 1618: unsigned int diet = 0;
  2790  00EE1A  0E00               	movlw	0
  2791  00EE1C  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  2792  00EE1E  0E00               	movlw	0
  2793  00EE20  6F80               	movwf	standbyMode@diet& (0+255),b
  2794                           
  2795                           ; BSR set to: 1
  2796                           ;standbyMode.c: 1619: unsigned int food = 0;
  2797  00EE22  0E00               	movlw	0
  2798  00EE24  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  2799  00EE26  0E00               	movlw	0
  2800  00EE28  6F84               	movwf	standbyMode@food& (0+255),b
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;standbyMode.c: 1620: unsigned char logNumber = 0;
  2804  00EE2A  0E00               	movlw	0
  2805  00EE2C  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  2806                           
  2807                           ; BSR set to: 1
  2808                           ;standbyMode.c: 1621: unsigned int n = 0;
  2809  00EE2E  0E00               	movlw	0
  2810  00EE30  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  2811  00EE32  0E00               	movlw	0
  2812  00EE34  6F7B               	movwf	standbyMode@n& (0+255),b
  2813                           
  2814                           ; BSR set to: 1
  2815                           ;standbyMode.c: 1622: unsigned int round = 0;
  2816  00EE36  0E00               	movlw	0
  2817  00EE38  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  2818  00EE3A  0E00               	movlw	0
  2819  00EE3C  6F6C               	movwf	standbyMode@round& (0+255),b
  2820                           
  2821                           ; BSR set to: 1
  2822                           ;standbyMode.c: 1623: unsigned int flat = 0;
  2823  00EE3E  0E00               	movlw	0
  2824  00EE40  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  2825  00EE42  0E00               	movlw	0
  2826  00EE44  6F6E               	movwf	standbyMode@flat& (0+255),b
  2827                           
  2828                           ; BSR set to: 1
  2829                           ;standbyMode.c: 1624: unsigned int lng = 0;
  2830  00EE46  0E00               	movlw	0
  2831  00EE48  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  2832  00EE4A  0E00               	movlw	0
  2833  00EE4C  6F70               	movwf	standbyMode@lng& (0+255),b
  2834                           
  2835                           ; BSR set to: 1
  2836                           ;standbyMode.c: 1625: unsigned int decodedDiet = 0;
  2837  00EE4E  0E00               	movlw	0
  2838  00EE50  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2839  00EE52  0E00               	movlw	0
  2840  00EE54  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  2841                           
  2842                           ; BSR set to: 1
  2843                           ;standbyMode.c: 1626: unsigned int storedFoodType = 0;
  2844  00EE56  0E00               	movlw	0
  2845  00EE58  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  2846  00EE5A  0E00               	movlw	0
  2847  00EE5C  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  2848                           
  2849                           ; BSR set to: 1
  2850                           ;standbyMode.c: 1628: unsigned char time[7];
  2851                           ;standbyMode.c: 1629: unsigned int x = 0;
  2852  00EE5E  0E00               	movlw	0
  2853  00EE60  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2854  00EE62  0E00               	movlw	0
  2855  00EE64  6F7D               	movwf	standbyMode@x& (0+255),b
  2856                           
  2857                           ; BSR set to: 1
  2858                           ;standbyMode.c: 1632: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2859  00EE66  0E01               	movlw	1
  2860  00EE68  ECD3  F054         	call	_lcdInst
  2861  00EE6C  0EC3               	movlw	195
  2862  00EE6E  6E60               	movwf	??_standbyMode& (0+255),c
  2863  00EE70  0ECD               	movlw	205
  2864  00EE72                     u13527:
  2865  00EE72  2EE8               	decfsz	wreg,f,c
  2866  00EE74  D7FE               	bra	u13527
  2867  00EE76  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2868  00EE78  D7FC               	bra	u13527
  2869  00EE7A  F000               	nop	
  2870                           
  2871                           ;standbyMode.c: 1633: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2872  00EE7C  0E0C               	movlw	12
  2873  00EE7E  ECD3  F054         	call	_lcdInst
  2874                           
  2875                           ;standbyMode.c: 1634: printf("Standby");
  2876  00EE82  0E9B               	movlw	low STR_1
  2877  00EE84  6E0D               	movwf	printf@f,c
  2878  00EE86  0EFF               	movlw	high STR_1
  2879  00EE88  6E0E               	movwf	printf@f+1,c
  2880  00EE8A  EC9A  F064         	call	_printf	;wreg free
  2881                           
  2882                           ;standbyMode.c: 1635: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2883  00EE8E  0E66               	movlw	102
  2884  00EE90  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2885  00EE92  0E76               	movlw	118
  2886  00EE94  6E60               	movwf	??_standbyMode& (0+255),c
  2887  00EE96  0EC1               	movlw	193
  2888  00EE98                     u13537:
  2889  00EE98  2EE8               	decfsz	wreg,f,c
  2890  00EE9A  D7FE               	bra	u13537
  2891  00EE9C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2892  00EE9E  D7FC               	bra	u13537
  2893  00EEA0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2894  00EEA2  D7FA               	bra	u13537
  2895  00EEA4  F000               	nop	
  2896                           
  2897                           ;standbyMode.c: 1636: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2898  00EEA6  0E01               	movlw	1
  2899  00EEA8  ECD3  F054         	call	_lcdInst
  2900  00EEAC  0EC3               	movlw	195
  2901  00EEAE  6E60               	movwf	??_standbyMode& (0+255),c
  2902  00EEB0  0ECD               	movlw	205
  2903  00EEB2                     u13547:
  2904  00EEB2  2EE8               	decfsz	wreg,f,c
  2905  00EEB4  D7FE               	bra	u13547
  2906  00EEB6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2907  00EEB8  D7FC               	bra	u13547
  2908  00EEBA  F000               	nop	
  2909                           
  2910                           ;standbyMode.c: 1637: printf("Press any key to");
  2911  00EEBC  0E0A               	movlw	low STR_74
  2912  00EEBE  6E0D               	movwf	printf@f,c
  2913  00EEC0  0EFD               	movlw	high STR_74
  2914  00EEC2  6E0E               	movwf	printf@f+1,c
  2915  00EEC4  EC9A  F064         	call	_printf	;wreg free
  2916                           
  2917                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  2918  00EEC8  0EC0               	movlw	192
  2919  00EECA  ECD3  F054         	call	_lcdInst
  2920                           
  2921                           ;standbyMode.c: 1639: printf("begin operation.");
  2922  00EECE  0EC6               	movlw	low STR_111
  2923  00EED0  6E0D               	movwf	printf@f,c
  2924  00EED2  0EFC               	movlw	high STR_111
  2925  00EED4  6E0E               	movwf	printf@f+1,c
  2926  00EED6  EC9A  F064         	call	_printf	;wreg free
  2927  00EEDA                     
  2928                           ;standbyMode.c: 1642: continue;
  2929  00EEDA  A281               	btfss	3969,1,c	;volatile
  2930  00EEDC  D7FE               	goto	l1160
  2931                           
  2932                           ;standbyMode.c: 1643: }
  2933                           ;standbyMode.c: 1646: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2934  00EEDE  0E01               	movlw	1
  2935  00EEE0  ECD3  F054         	call	_lcdInst
  2936  00EEE4  0EC3               	movlw	195
  2937  00EEE6  6E60               	movwf	??_standbyMode& (0+255),c
  2938  00EEE8  0ECD               	movlw	205
  2939  00EEEA                     u13557:
  2940  00EEEA  2EE8               	decfsz	wreg,f,c
  2941  00EEEC  D7FE               	bra	u13557
  2942  00EEEE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2943  00EEF0  D7FC               	bra	u13557
  2944  00EEF2  F000               	nop	
  2945                           
  2946                           ;standbyMode.c: 1647: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2947  00EEF4  0E0C               	movlw	12
  2948  00EEF6  ECD3  F054         	call	_lcdInst
  2949                           
  2950                           ;standbyMode.c: 1648: printf("Welcome to your");
  2951  00EEFA  0E9C               	movlw	low STR_112
  2952  00EEFC  6E0D               	movwf	printf@f,c
  2953  00EEFE  0EFD               	movlw	high STR_112
  2954  00EF00  6E0E               	movwf	printf@f+1,c
  2955  00EF02  EC9A  F064         	call	_printf	;wreg free
  2956                           
  2957                           ;standbyMode.c: 1649: lcdInst(0xC0);;
  2958  00EF06  0EC0               	movlw	192
  2959  00EF08  ECD3  F054         	call	_lcdInst
  2960                           
  2961                           ;standbyMode.c: 1650: printf("cabinet sorter!");
  2962  00EF0C  0E2C               	movlw	low STR_113
  2963  00EF0E  6E0D               	movwf	printf@f,c
  2964  00EF10  0EFD               	movlw	high STR_113
  2965  00EF12  6E0E               	movwf	printf@f+1,c
  2966  00EF14  EC9A  F064         	call	_printf	;wreg free
  2967                           
  2968                           ;standbyMode.c: 1651: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2969  00EF18  0E33               	movlw	51
  2970  00EF1A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2971  00EF1C  0EBB               	movlw	187
  2972  00EF1E  6E60               	movwf	??_standbyMode& (0+255),c
  2973  00EF20  0EE0               	movlw	224
  2974  00EF22                     u13567:
  2975  00EF22  2EE8               	decfsz	wreg,f,c
  2976  00EF24  D7FE               	bra	u13567
  2977  00EF26  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2978  00EF28  D7FC               	bra	u13567
  2979  00EF2A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2980  00EF2C  D7FA               	bra	u13567
  2981                           
  2982                           ;standbyMode.c: 1654: writeEEPROM(250, 3);
  2983  00EF2E  0E03               	movlw	3
  2984  00EF30  6E01               	movwf	writeEEPROM@data,c
  2985  00EF32  0EFA               	movlw	250
  2986  00EF34  EC38  F055         	call	_writeEEPROM
  2987                           
  2988                           ;standbyMode.c: 1655: writeEEPROM(0, 18);
  2989  00EF38  0E12               	movlw	18
  2990  00EF3A  6E01               	movwf	writeEEPROM@data,c
  2991  00EF3C  0E00               	movlw	0
  2992  00EF3E  EC38  F055         	call	_writeEEPROM
  2993                           
  2994                           ;standbyMode.c: 1656: writeEEPROM(1, 2);
  2995  00EF42  0E02               	movlw	2
  2996  00EF44  6E01               	movwf	writeEEPROM@data,c
  2997  00EF46  0E01               	movlw	1
  2998  00EF48  EC38  F055         	call	_writeEEPROM
  2999                           
  3000                           ;standbyMode.c: 1657: writeEEPROM(2, 28);
  3001  00EF4C  0E1C               	movlw	28
  3002  00EF4E  6E01               	movwf	writeEEPROM@data,c
  3003  00EF50  0E02               	movlw	2
  3004  00EF52  EC38  F055         	call	_writeEEPROM
  3005                           
  3006                           ;standbyMode.c: 1658: writeEEPROM(3, 91);
  3007  00EF56  0E5B               	movlw	91
  3008  00EF58  6E01               	movwf	writeEEPROM@data,c
  3009  00EF5A  0E03               	movlw	3
  3010  00EF5C  EC38  F055         	call	_writeEEPROM
  3011                           
  3012                           ;standbyMode.c: 1659: writeEEPROM(4, 3);
  3013  00EF60  0E03               	movlw	3
  3014  00EF62  6E01               	movwf	writeEEPROM@data,c
  3015  00EF64  0E04               	movlw	4
  3016  00EF66  EC38  F055         	call	_writeEEPROM
  3017                           
  3018                           ;standbyMode.c: 1660: writeEEPROM(5, 15);
  3019  00EF6A  0E0F               	movlw	15
  3020  00EF6C  6E01               	movwf	writeEEPROM@data,c
  3021  00EF6E  0E05               	movlw	5
  3022  00EF70  EC38  F055         	call	_writeEEPROM
  3023                           
  3024                           ;standbyMode.c: 1661: writeEEPROM(6, 8);
  3025  00EF74  0E08               	movlw	8
  3026  00EF76  6E01               	movwf	writeEEPROM@data,c
  3027  00EF78  0E06               	movlw	6
  3028  00EF7A  EC38  F055         	call	_writeEEPROM
  3029                           
  3030                           ;standbyMode.c: 1662: writeEEPROM(7, 12);
  3031  00EF7E  0E0C               	movlw	12
  3032  00EF80  6E01               	movwf	writeEEPROM@data,c
  3033  00EF82  0E07               	movlw	7
  3034  00EF84  EC38  F055         	call	_writeEEPROM
  3035                           
  3036                           ;standbyMode.c: 1663: writeEEPROM(8, 1);
  3037  00EF88  0E01               	movlw	1
  3038  00EF8A  6E01               	movwf	writeEEPROM@data,c
  3039  00EF8C  0E08               	movlw	8
  3040  00EF8E  EC38  F055         	call	_writeEEPROM
  3041                           
  3042                           ;standbyMode.c: 1664: writeEEPROM(9, 13);
  3043  00EF92  0E0D               	movlw	13
  3044  00EF94  6E01               	movwf	writeEEPROM@data,c
  3045  00EF96  0E09               	movlw	9
  3046  00EF98  EC38  F055         	call	_writeEEPROM
  3047                           
  3048                           ;standbyMode.c: 1665: writeEEPROM(10, 0);
  3049  00EF9C  0E00               	movlw	0
  3050  00EF9E  6E01               	movwf	writeEEPROM@data,c
  3051  00EFA0  0E0A               	movlw	10
  3052  00EFA2  EC38  F055         	call	_writeEEPROM
  3053                           
  3054                           ;standbyMode.c: 1675: I2C_Master_Init(100000);
  3055  00EFA6  0EA0               	movlw	160
  3056  00EFA8  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  3057  00EFAA  0E86               	movlw	134
  3058  00EFAC  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  3059  00EFAE  0E01               	movlw	1
  3060  00EFB0  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  3061  00EFB2  0E00               	movlw	0
  3062  00EFB4  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  3063  00EFB6  EC05  F056         	call	_I2C_Master_Init	;wreg free
  3064                           
  3065                           ;standbyMode.c: 1676: I2C_Master_Start();
  3066  00EFBA  ECB9  F054         	call	_I2C_Master_Start	;wreg free
  3067                           
  3068                           ;standbyMode.c: 1677: I2C_Master_Write(0b11010001);
  3069  00EFBE  0E00               	movlw	0
  3070  00EFC0  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3071  00EFC2  0ED1               	movlw	209
  3072  00EFC4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3073  00EFC6  ECC5  F054         	call	_I2C_Master_Write	;wreg free
  3074                           
  3075                           ;standbyMode.c: 1678: for(x = 0; x < 6; x++){
  3076  00EFCA  0E00               	movlw	0
  3077  00EFCC  0101               	movlb	1	; () banked
  3078  00EFCE  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3079  00EFD0  0E00               	movlw	0
  3080  00EFD2  6F7D               	movwf	standbyMode@x& (0+255),b
  3081  00EFD4                     l9338:
  3082                           
  3083                           ; BSR set to: 1
  3084  00EFD4  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  3085  00EFD6  E112               	bnz	l9348
  3086  00EFD8  0E06               	movlw	6
  3087  00EFDA  5D7D               	subwf	standbyMode@x& (0+255),w,b
  3088  00EFDC  B0D8               	btfsc	status,0,c
  3089  00EFDE  D00E               	goto	u12200
  3090                           
  3091                           ; BSR set to: 1
  3092                           ;standbyMode.c: 1679: time[x] = I2C_Master_Read(0);
  3093                           
  3094                           ; BSR set to: 1
  3095                           
  3096                           ; BSR set to: 1
  3097  00EFE0  0E60               	movlw	low standbyMode@time
  3098  00EFE2  257D               	addwf	standbyMode@x& (0+255),w,b
  3099  00EFE4  6ED9               	movwf	fsr2l,c
  3100  00EFE6  0E01               	movlw	high standbyMode@time
  3101  00EFE8  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  3102  00EFEA  6EDA               	movwf	fsr2h,c
  3103  00EFEC  0E00               	movlw	0
  3104  00EFEE  EC00  F055         	call	_I2C_Master_Read
  3105  00EFF2  6EDF               	movwf	indf2,c
  3106  00EFF4  0101               	movlb	1	; () banked
  3107  00EFF6  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  3108  00EFF8  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  3109  00EFFA  D7EC               	goto	l9338
  3110  00EFFC                     u12200:
  3111  00EFFC                     l9348:
  3112                           
  3113                           ; BSR set to: 1
  3114                           ;standbyMode.c: 1680: }
  3115                           ;standbyMode.c: 1681: time[6] = I2C_Master_Read(1);
  3116  00EFFC  0E01               	movlw	1
  3117  00EFFE  EC00  F055         	call	_I2C_Master_Read
  3118  00F002  0101               	movlb	1	; () banked
  3119  00F004  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  3120                           
  3121                           ;standbyMode.c: 1682: I2C_Master_Stop();
  3122  00F006  ECBD  F054         	call	_I2C_Master_Stop	;wreg free
  3123                           
  3124                           ;standbyMode.c: 1684: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3125  00F00A  0E01               	movlw	1
  3126  00F00C  ECD3  F054         	call	_lcdInst
  3127  00F010  0EC3               	movlw	195
  3128  00F012  6E60               	movwf	??_standbyMode& (0+255),c
  3129  00F014  0ECD               	movlw	205
  3130  00F016                     u13577:
  3131  00F016  2EE8               	decfsz	wreg,f,c
  3132  00F018  D7FE               	bra	u13577
  3133  00F01A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3134  00F01C  D7FC               	bra	u13577
  3135  00F01E  F000               	nop	
  3136                           
  3137                           ;standbyMode.c: 1685: printf("Current date");
  3138  00F020  0EDE               	movlw	low STR_114
  3139  00F022  6E0D               	movwf	printf@f,c
  3140  00F024  0EFE               	movlw	high STR_114
  3141  00F026  6E0E               	movwf	printf@f+1,c
  3142  00F028  EC9A  F064         	call	_printf	;wreg free
  3143                           
  3144                           ;standbyMode.c: 1686: lcdInst(0xC0);;
  3145  00F02C  0EC0               	movlw	192
  3146  00F02E  ECD3  F054         	call	_lcdInst
  3147                           
  3148                           ;standbyMode.c: 1687: printf("and time:");
  3149  00F032  0E38               	movlw	low STR_115
  3150  00F034  6E0D               	movwf	printf@f,c
  3151  00F036  0EFF               	movlw	high STR_115
  3152  00F038  6E0E               	movwf	printf@f+1,c
  3153  00F03A  EC9A  F064         	call	_printf	;wreg free
  3154                           
  3155                           ;standbyMode.c: 1688: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3156  00F03E  0E66               	movlw	102
  3157  00F040  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3158  00F042  0E76               	movlw	118
  3159  00F044  6E60               	movwf	??_standbyMode& (0+255),c
  3160  00F046  0EC1               	movlw	193
  3161  00F048                     u13587:
  3162  00F048  2EE8               	decfsz	wreg,f,c
  3163  00F04A  D7FE               	bra	u13587
  3164  00F04C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3165  00F04E  D7FC               	bra	u13587
  3166  00F050  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3167  00F052  D7FA               	bra	u13587
  3168  00F054  F000               	nop	
  3169                           
  3170                           ;standbyMode.c: 1690: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3171  00F056  0E01               	movlw	1
  3172  00F058  ECD3  F054         	call	_lcdInst
  3173  00F05C  0EC3               	movlw	195
  3174  00F05E  6E60               	movwf	??_standbyMode& (0+255),c
  3175  00F060  0ECD               	movlw	205
  3176  00F062                     u13597:
  3177  00F062  2EE8               	decfsz	wreg,f,c
  3178  00F064  D7FE               	bra	u13597
  3179  00F066  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3180  00F068  D7FC               	bra	u13597
  3181  00F06A  F000               	nop	
  3182                           
  3183                           ;standbyMode.c: 1691: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  3184  00F06C  0E35               	movlw	low STR_116
  3185  00F06E  6E0D               	movwf	printf@f,c
  3186  00F070  0EFE               	movlw	high STR_116
  3187  00F072  6E0E               	movwf	printf@f+1,c
  3188  00F074  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  3189  00F078  6A10               	clrf	?_printf+3,c
  3190  00F07A  C165  F011         	movff	standbyMode@time+5,?_printf+4
  3191  00F07E  6A12               	clrf	?_printf+5,c
  3192  00F080  C164  F013         	movff	standbyMode@time+4,?_printf+6
  3193  00F084  6A14               	clrf	?_printf+7,c
  3194  00F086  EC9A  F064         	call	_printf	;wreg free
  3195                           
  3196                           ;standbyMode.c: 1692: lcdInst(0xC0);;
  3197  00F08A  0EC0               	movlw	192
  3198  00F08C  ECD3  F054         	call	_lcdInst
  3199                           
  3200                           ;standbyMode.c: 1693: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3201  00F090  0E44               	movlw	low STR_117
  3202  00F092  6E0D               	movwf	printf@f,c
  3203  00F094  0EFE               	movlw	high STR_117
  3204  00F096  6E0E               	movwf	printf@f+1,c
  3205  00F098  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  3206  00F09C  6A10               	clrf	?_printf+3,c
  3207  00F09E  C161  F011         	movff	standbyMode@time+1,?_printf+4
  3208  00F0A2  6A12               	clrf	?_printf+5,c
  3209  00F0A4  C160  F013         	movff	standbyMode@time,?_printf+6
  3210  00F0A8  6A14               	clrf	?_printf+7,c
  3211  00F0AA  EC9A  F064         	call	_printf	;wreg free
  3212                           
  3213                           ;standbyMode.c: 1694: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3214  00F0AE  0E66               	movlw	102
  3215  00F0B0  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3216  00F0B2  0E76               	movlw	118
  3217  00F0B4  6E60               	movwf	??_standbyMode& (0+255),c
  3218  00F0B6  0EC1               	movlw	193
  3219  00F0B8                     u13607:
  3220  00F0B8  2EE8               	decfsz	wreg,f,c
  3221  00F0BA  D7FE               	bra	u13607
  3222  00F0BC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3223  00F0BE  D7FC               	bra	u13607
  3224  00F0C0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3225  00F0C2  D7FA               	bra	u13607
  3226  00F0C4  F000               	nop	
  3227                           
  3228                           ;standbyMode.c: 1697: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3229  00F0C6  0E01               	movlw	1
  3230  00F0C8  ECD3  F054         	call	_lcdInst
  3231  00F0CC  0EC3               	movlw	195
  3232  00F0CE  6E60               	movwf	??_standbyMode& (0+255),c
  3233  00F0D0  0ECD               	movlw	205
  3234  00F0D2                     u13617:
  3235  00F0D2  2EE8               	decfsz	wreg,f,c
  3236  00F0D4  D7FE               	bra	u13617
  3237  00F0D6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3238  00F0D8  D7FC               	bra	u13617
  3239  00F0DA  F000               	nop	
  3240                           
  3241                           ;standbyMode.c: 1698: printf("Press # to");
  3242  00F0DC  0E2D               	movlw	low STR_118
  3243  00F0DE  6E0D               	movwf	printf@f,c
  3244  00F0E0  0EFF               	movlw	high STR_118
  3245  00F0E2  6E0E               	movwf	printf@f+1,c
  3246  00F0E4  EC9A  F064         	call	_printf	;wreg free
  3247                           
  3248                           ;standbyMode.c: 1699: lcdInst(0xC0);;
  3249  00F0E8  0EC0               	movlw	192
  3250  00F0EA  ECD3  F054         	call	_lcdInst
  3251                           
  3252                           ;standbyMode.c: 1700: printf("view logs,");
  3253  00F0EE  0EEB               	movlw	low STR_119
  3254  00F0F0  6E0D               	movwf	printf@f,c
  3255  00F0F2  0EFE               	movlw	high STR_119
  3256  00F0F4  6E0E               	movwf	printf@f+1,c
  3257  00F0F6  EC9A  F064         	call	_printf	;wreg free
  3258                           
  3259                           ;standbyMode.c: 1701: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3260  00F0FA  0E66               	movlw	102
  3261  00F0FC  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3262  00F0FE  0E76               	movlw	118
  3263  00F100  6E60               	movwf	??_standbyMode& (0+255),c
  3264  00F102  0EC1               	movlw	193
  3265  00F104                     u13627:
  3266  00F104  2EE8               	decfsz	wreg,f,c
  3267  00F106  D7FE               	bra	u13627
  3268  00F108  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3269  00F10A  D7FC               	bra	u13627
  3270  00F10C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3271  00F10E  D7FA               	bra	u13627
  3272  00F110  F000               	nop	
  3273                           
  3274                           ;standbyMode.c: 1702: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3275  00F112  0E01               	movlw	1
  3276  00F114  ECD3  F054         	call	_lcdInst
  3277  00F118  0EC3               	movlw	195
  3278  00F11A  6E60               	movwf	??_standbyMode& (0+255),c
  3279  00F11C  0ECD               	movlw	205
  3280  00F11E                     u13637:
  3281  00F11E  2EE8               	decfsz	wreg,f,c
  3282  00F120  D7FE               	bra	u13637
  3283  00F122  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3284  00F124  D7FC               	bra	u13637
  3285  00F126  F000               	nop	
  3286                           
  3287                           ;standbyMode.c: 1703: printf("or press D to");
  3288  00F128  0EA9               	movlw	low STR_120
  3289  00F12A  6E0D               	movwf	printf@f,c
  3290  00F12C  0EFE               	movlw	high STR_120
  3291  00F12E  6E0E               	movwf	printf@f+1,c
  3292  00F130  EC9A  F064         	call	_printf	;wreg free
  3293                           
  3294                           ;standbyMode.c: 1704: lcdInst(0xC0);;
  3295  00F134  0EC0               	movlw	192
  3296  00F136  ECD3  F054         	call	_lcdInst
  3297                           
  3298                           ;standbyMode.c: 1705: printf("begin operation.");
  3299  00F13A  0EC6               	movlw	low STR_111
  3300  00F13C  6E0D               	movwf	printf@f,c
  3301  00F13E  0EFC               	movlw	high STR_111
  3302  00F140  6E0E               	movwf	printf@f+1,c
  3303  00F142  EC9A  F064         	call	_printf	;wreg free
  3304  00F146  A281               	btfss	3969,1,c	;volatile
  3305  00F148  D7FE               	goto	l1165
  3306                           
  3307                           ;standbyMode.c: 1708: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3308  00F14A  3881               	swapf	3969,w,c	;volatile
  3309  00F14C  0B0F               	andlw	15
  3310  00F14E  0B0F               	andlw	15
  3311  00F150  0101               	movlb	1	; () banked
  3312  00F152  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3313  00F154                     
  3314                           ; BSR set to: 1
  3315  00F154  B281               	btfsc	3969,1,c	;volatile
  3316  00F156  D7FE               	goto	l1168
  3317                           
  3318                           ;standbyMode.c: 1711: if (keypress == 15){
  3319  00F158  0E0F               	movlw	15
  3320  00F15A  0101               	movlb	1	; () banked
  3321  00F15C  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3322  00F15E  A4D8               	btfss	status,2,c
  3323  00F160  EF97  F07D         	goto	l1170
  3324  00F164                     u12230:
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;standbyMode.c: 1755: if (firstIteration == 1){
  3328                           
  3329                           ; BSR set to: 1
  3330                           
  3331                           ;standbyMode.c: 1754: while (1){
  3332  00F164  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3333  00F166  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3334  00F168  A4D8               	btfss	status,2,c
  3335  00F16A  D1D9               	goto	l1172
  3336  00F16C                     u12240:
  3337                           
  3338                           ; BSR set to: 1
  3339                           ;standbyMode.c: 1758: if(drawerCount >= 8){
  3340                           
  3341                           ; BSR set to: 1
  3342                           
  3343                           ;standbyMode.c: 1756: while (1){
  3344  00F16C  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3345  00F16E  E104               	bnz	u12250
  3346  00F170  0E08               	movlw	8
  3347  00F172  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3348  00F174  A0D8               	btfss	status,0,c
  3349  00F176  D02A               	goto	l1174
  3350  00F178                     u12250:
  3351                           
  3352                           ; BSR set to: 1
  3353                           ;standbyMode.c: 1759: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3354  00F178  0E01               	movlw	1
  3355  00F17A  ECD3  F054         	call	_lcdInst
  3356  00F17E  0EC3               	movlw	195
  3357  00F180  6E60               	movwf	??_standbyMode& (0+255),c
  3358  00F182  0ECD               	movlw	205
  3359  00F184                     u13647:
  3360  00F184  2EE8               	decfsz	wreg,f,c
  3361  00F186  D7FE               	bra	u13647
  3362  00F188  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3363  00F18A  D7FC               	bra	u13647
  3364  00F18C  F000               	nop	
  3365                           
  3366                           ;standbyMode.c: 1760: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3367  00F18E  0E0C               	movlw	12
  3368  00F190  ECD3  F054         	call	_lcdInst
  3369                           
  3370                           ;standbyMode.c: 1761: printf("Maximum of 8");
  3371  00F194  0EC4               	movlw	low STR_122
  3372  00F196  6E0D               	movwf	printf@f,c
  3373  00F198  0EFE               	movlw	high STR_122
  3374  00F19A  6E0E               	movwf	printf@f+1,c
  3375  00F19C  EC9A  F064         	call	_printf	;wreg free
  3376                           
  3377                           ;standbyMode.c: 1762: lcdInst(0xC0);;
  3378  00F1A0  0EC0               	movlw	192
  3379  00F1A2  ECD3  F054         	call	_lcdInst
  3380                           
  3381                           ;standbyMode.c: 1763: printf("drawers reached!");
  3382  00F1A6  0EB5               	movlw	low STR_123
  3383  00F1A8  6E0D               	movwf	printf@f,c
  3384  00F1AA  0EFC               	movlw	high STR_123
  3385  00F1AC  6E0E               	movwf	printf@f+1,c
  3386  00F1AE  EC9A  F064         	call	_printf	;wreg free
  3387                           
  3388                           ;standbyMode.c: 1764: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3389  00F1B2  0E66               	movlw	102
  3390  00F1B4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3391  00F1B6  0E76               	movlw	118
  3392  00F1B8  6E60               	movwf	??_standbyMode& (0+255),c
  3393  00F1BA  0EC1               	movlw	193
  3394  00F1BC                     u13657:
  3395  00F1BC  2EE8               	decfsz	wreg,f,c
  3396  00F1BE  D7FE               	bra	u13657
  3397  00F1C0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3398  00F1C2  D7FC               	bra	u13657
  3399  00F1C4  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3400  00F1C6  D7FA               	bra	u13657
  3401  00F1C8  F000               	nop	
  3402                           
  3403                           ;standbyMode.c: 1765: break;
  3404  00F1CA  D328               	goto	l1200
  3405  00F1CC                     l1174:
  3406                           
  3407                           ;standbyMode.c: 1766: }
  3408                           ;standbyMode.c: 1768: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3409  00F1CC  0E01               	movlw	1
  3410  00F1CE  ECD3  F054         	call	_lcdInst
  3411  00F1D2  0EC3               	movlw	195
  3412  00F1D4  6E60               	movwf	??_standbyMode& (0+255),c
  3413  00F1D6  0ECD               	movlw	205
  3414  00F1D8                     u13667:
  3415  00F1D8  2EE8               	decfsz	wreg,f,c
  3416  00F1DA  D7FE               	bra	u13667
  3417  00F1DC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3418  00F1DE  D7FC               	bra	u13667
  3419  00F1E0  F000               	nop	
  3420                           
  3421                           ;standbyMode.c: 1769: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3422  00F1E2  0E0C               	movlw	12
  3423  00F1E4  ECD3  F054         	call	_lcdInst
  3424                           
  3425                           ;standbyMode.c: 1770: printf("Another drawer?");
  3426  00F1E8  0E8C               	movlw	low STR_124
  3427  00F1EA  6E0D               	movwf	printf@f,c
  3428  00F1EC  0EFD               	movlw	high STR_124
  3429  00F1EE  6E0E               	movwf	printf@f+1,c
  3430  00F1F0  EC9A  F064         	call	_printf	;wreg free
  3431                           
  3432                           ;standbyMode.c: 1771: lcdInst(0xC0);;
  3433  00F1F4  0EC0               	movlw	192
  3434  00F1F6  ECD3  F054         	call	_lcdInst
  3435                           
  3436                           ;standbyMode.c: 1772: printf("# = No, D = Yes");
  3437  00F1FA  0EAC               	movlw	low STR_98
  3438  00F1FC  6E0D               	movwf	printf@f,c
  3439  00F1FE  0EFD               	movlw	high STR_98
  3440  00F200  6E0E               	movwf	printf@f+1,c
  3441  00F202  EC9A  F064         	call	_printf	;wreg free
  3442  00F206  A281               	btfss	3969,1,c	;volatile
  3443  00F208  D7FE               	goto	l1178
  3444                           
  3445                           ;standbyMode.c: 1775: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3446  00F20A  3881               	swapf	3969,w,c	;volatile
  3447  00F20C  0B0F               	andlw	15
  3448  00F20E  0B0F               	andlw	15
  3449  00F210  0101               	movlb	1	; () banked
  3450  00F212  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3451  00F214                     
  3452                           ; BSR set to: 1
  3453  00F214  B281               	btfsc	3969,1,c	;volatile
  3454  00F216  D7FE               	goto	l1181
  3455                           
  3456                           ;standbyMode.c: 1778: if (keypress1 == 15){
  3457  00F218  0E0F               	movlw	15
  3458  00F21A  0101               	movlb	1	; () banked
  3459  00F21C  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3460  00F21E  A4D8               	btfss	status,2,c
  3461  00F220  D177               	goto	l1183
  3462  00F222                     u12280:
  3463                           
  3464                           ; BSR set to: 1
  3465                           
  3466                           ; BSR set to: 1
  3467                           
  3468                           ;standbyMode.c: 1779: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3469  00F222  0E01               	movlw	1
  3470  00F224  ECD3  F054         	call	_lcdInst
  3471  00F228  0EC3               	movlw	195
  3472  00F22A  6E60               	movwf	??_standbyMode& (0+255),c
  3473  00F22C  0ECD               	movlw	205
  3474  00F22E                     u13677:
  3475  00F22E  2EE8               	decfsz	wreg,f,c
  3476  00F230  D7FE               	bra	u13677
  3477  00F232  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3478  00F234  D7FC               	bra	u13677
  3479  00F236  F000               	nop	
  3480                           
  3481                           ;standbyMode.c: 1780: drawer = which_drawer();
  3482  00F238  EC16  F05F         	call	_which_drawer	;wreg free
  3483  00F23C  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3484  00F240  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3485                           
  3486                           ;standbyMode.c: 1782: if (drawer == 100){
  3487  00F244  0E64               	movlw	100
  3488  00F246  0101               	movlb	1	; () banked
  3489  00F248  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3490  00F24A  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3491  00F24C  A4D8               	btfss	status,2,c
  3492  00F24E  D005               	goto	l1185
  3493                           
  3494                           ; BSR set to: 1
  3495                           ;standbyMode.c: 1783: drawer = 0;
  3496  00F250  0E00               	movlw	0
  3497  00F252  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3498  00F254  0E00               	movlw	0
  3499  00F256  6F82               	movwf	standbyMode@drawer& (0+255),b
  3500                           
  3501                           ;standbyMode.c: 1784: goto DRAWER_BACK;
  3502  00F258  D7B9               	goto	l1174
  3503  00F25A                     l1185:
  3504                           
  3505                           ; BSR set to: 1
  3506                           ;standbyMode.c: 1785: }
  3507                           ;standbyMode.c: 1787: for (i=0; i<8; i++){
  3508                           
  3509                           ; BSR set to: 1
  3510  00F25A  0E00               	movlw	0
  3511  00F25C  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3512  00F25E  0E00               	movlw	0
  3513  00F260  6F88               	movwf	standbyMode@i& (0+255),b
  3514  00F262                     l9436:
  3515                           
  3516                           ; BSR set to: 1
  3517  00F262  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3518  00F264  E12C               	bnz	l9452
  3519  00F266  0E08               	movlw	8
  3520  00F268  5D88               	subwf	standbyMode@i& (0+255),w,b
  3521  00F26A  B0D8               	btfsc	status,0,c
  3522  00F26C  D028               	goto	u12330
  3523                           
  3524                           ; BSR set to: 1
  3525                           ;standbyMode.c: 1788: if (drawerInformation[i] == drawer){
  3526                           
  3527                           ; BSR set to: 1
  3528                           
  3529                           ; BSR set to: 1
  3530  00F26E  90D8               	bcf	status,0,c
  3531  00F270  3588               	rlcf	standbyMode@i& (0+255),w,b
  3532  00F272  6ED9               	movwf	fsr2l,c
  3533  00F274  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3534  00F276  6EDA               	movwf	fsr2h,c
  3535  00F278  0E50               	movlw	low standbyMode@drawerInformation
  3536  00F27A  26D9               	addwf	fsr2l,f,c
  3537  00F27C  0E01               	movlw	high standbyMode@drawerInformation
  3538  00F27E  22DA               	addwfc	fsr2h,f,c
  3539  00F280  5182               	movf	standbyMode@drawer& (0+255),w,b
  3540  00F282  18DE               	xorwf	postinc2,w,c
  3541  00F284  E119               	bnz	l9448
  3542  00F286  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3543  00F288  18DE               	xorwf	postinc2,w,c
  3544  00F28A  A4D8               	btfss	status,2,c
  3545  00F28C  D015               	goto	l1189
  3546                           
  3547                           ; BSR set to: 1
  3548                           ;standbyMode.c: 1789: validDrawer = 1;
  3549  00F28E  0E00               	movlw	0
  3550  00F290  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3551  00F292  0E01               	movlw	1
  3552  00F294  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3553                           
  3554                           ; BSR set to: 1
  3555                           ;standbyMode.c: 1790: if (drawerInformation[i] == 0){
  3556  00F296  90D8               	bcf	status,0,c
  3557  00F298  3588               	rlcf	standbyMode@i& (0+255),w,b
  3558  00F29A  6ED9               	movwf	fsr2l,c
  3559  00F29C  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3560  00F29E  6EDA               	movwf	fsr2h,c
  3561  00F2A0  0E50               	movlw	low standbyMode@drawerInformation
  3562  00F2A2  26D9               	addwf	fsr2l,f,c
  3563  00F2A4  0E01               	movlw	high standbyMode@drawerInformation
  3564  00F2A6  22DA               	addwfc	fsr2h,f,c
  3565  00F2A8  50DE               	movf	postinc2,w,c
  3566  00F2AA  10DE               	iorwf	postinc2,w,c
  3567  00F2AC  A4D8               	btfss	status,2,c
  3568  00F2AE  D004               	goto	l1189
  3569                           
  3570                           ; BSR set to: 1
  3571                           ;standbyMode.c: 1791: zero = 1;
  3572  00F2B0  0E00               	movlw	0
  3573  00F2B2  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3574  00F2B4  0E01               	movlw	1
  3575  00F2B6  6F79               	movwf	standbyMode@zero& (0+255),b
  3576  00F2B8                     l1189:
  3577  00F2B8                     l9448:
  3578                           
  3579                           ; BSR set to: 1
  3580  00F2B8  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3581  00F2BA  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3582  00F2BC  D7D2               	goto	l9436
  3583  00F2BE                     u12330:
  3584  00F2BE                     l9452:
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;standbyMode.c: 1792: }
  3588                           ;standbyMode.c: 1793: }
  3589                           ;standbyMode.c: 1794: }
  3590                           ;standbyMode.c: 1795: if (validDrawer == 1){
  3591  00F2BE  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3592  00F2C0  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3593  00F2C2  A4D8               	btfss	status,2,c
  3594  00F2C4  D062               	goto	l1190
  3595                           
  3596                           ; BSR set to: 1
  3597                           ;standbyMode.c: 1796: if (zero == 1){
  3598  00F2C6  0579               	decf	standbyMode@zero& (0+255),w,b
  3599  00F2C8  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3600  00F2CA  A4D8               	btfss	status,2,c
  3601  00F2CC  D02F               	goto	l1191
  3602                           
  3603                           ; BSR set to: 1
  3604                           ;standbyMode.c: 1797: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3605  00F2CE  0E01               	movlw	1
  3606  00F2D0  ECD3  F054         	call	_lcdInst
  3607  00F2D4  0EC3               	movlw	195
  3608  00F2D6  6E60               	movwf	??_standbyMode& (0+255),c
  3609  00F2D8  0ECD               	movlw	205
  3610  00F2DA                     u13687:
  3611  00F2DA  2EE8               	decfsz	wreg,f,c
  3612  00F2DC  D7FE               	bra	u13687
  3613  00F2DE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3614  00F2E0  D7FC               	bra	u13687
  3615  00F2E2  F000               	nop	
  3616                           
  3617                           ;standbyMode.c: 1798: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3618  00F2E4  0E0C               	movlw	12
  3619  00F2E6  ECD3  F054         	call	_lcdInst
  3620                           
  3621                           ;standbyMode.c: 1799: printf("No drawer");
  3622  00F2EA  0E42               	movlw	low STR_126
  3623  00F2EC  6E0D               	movwf	printf@f,c
  3624  00F2EE  0EFF               	movlw	high STR_126
  3625  00F2F0  6E0E               	movwf	printf@f+1,c
  3626  00F2F2  EC9A  F064         	call	_printf	;wreg free
  3627                           
  3628                           ;standbyMode.c: 1800: lcdInst(0xC0);;
  3629  00F2F6  0EC0               	movlw	192
  3630  00F2F8  ECD3  F054         	call	_lcdInst
  3631                           
  3632                           ;standbyMode.c: 1801: printf("number pressed.");
  3633  00F2FC  0E3C               	movlw	low STR_127
  3634  00F2FE  6E0D               	movwf	printf@f,c
  3635  00F300  0EFD               	movlw	high STR_127
  3636  00F302  6E0E               	movwf	printf@f+1,c
  3637  00F304  EC9A  F064         	call	_printf	;wreg free
  3638                           
  3639                           ;standbyMode.c: 1802: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3640  00F308  0E66               	movlw	102
  3641  00F30A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3642  00F30C  0E76               	movlw	118
  3643  00F30E  6E60               	movwf	??_standbyMode& (0+255),c
  3644  00F310  0EC1               	movlw	193
  3645  00F312                     u13697:
  3646  00F312  2EE8               	decfsz	wreg,f,c
  3647  00F314  D7FE               	bra	u13697
  3648  00F316  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3649  00F318  D7FC               	bra	u13697
  3650  00F31A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3651  00F31C  D7FA               	bra	u13697
  3652  00F31E  F000               	nop	
  3653                           
  3654                           ;standbyMode.c: 1803: zero = 0;
  3655  00F320  0E00               	movlw	0
  3656  00F322  0101               	movlb	1	; () banked
  3657  00F324  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3658  00F326  0E00               	movlw	0
  3659  00F328  6F79               	movwf	standbyMode@zero& (0+255),b
  3660                           
  3661                           ;standbyMode.c: 1804: }
  3662  00F32A  D029               	goto	l1192
  3663  00F32C                     l1191:
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;standbyMode.c: 1805: else{
  3667                           ;standbyMode.c: 1806: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3668                           
  3669                           ; BSR set to: 1
  3670  00F32C  0E01               	movlw	1
  3671  00F32E  ECD3  F054         	call	_lcdInst
  3672  00F332  0EC3               	movlw	195
  3673  00F334  6E60               	movwf	??_standbyMode& (0+255),c
  3674  00F336  0ECD               	movlw	205
  3675  00F338                     u13707:
  3676  00F338  2EE8               	decfsz	wreg,f,c
  3677  00F33A  D7FE               	bra	u13707
  3678  00F33C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3679  00F33E  D7FC               	bra	u13707
  3680  00F340  F000               	nop	
  3681                           
  3682                           ;standbyMode.c: 1807: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3683  00F342  0E0C               	movlw	12
  3684  00F344  ECD3  F054         	call	_lcdInst
  3685                           
  3686                           ;standbyMode.c: 1808: printf("Drawer already");
  3687  00F348  0E53               	movlw	low STR_128
  3688  00F34A  6E0D               	movwf	printf@f,c
  3689  00F34C  0EFE               	movlw	high STR_128
  3690  00F34E  6E0E               	movwf	printf@f+1,c
  3691  00F350  EC9A  F064         	call	_printf	;wreg free
  3692                           
  3693                           ;standbyMode.c: 1809: lcdInst(0xC0);;
  3694  00F354  0EC0               	movlw	192
  3695  00F356  ECD3  F054         	call	_lcdInst
  3696                           
  3697                           ;standbyMode.c: 1810: printf("in use!");
  3698  00F35A  0E7B               	movlw	low STR_129
  3699  00F35C  6E0D               	movwf	printf@f,c
  3700  00F35E  0EFF               	movlw	high STR_129
  3701  00F360  6E0E               	movwf	printf@f+1,c
  3702  00F362  EC9A  F064         	call	_printf	;wreg free
  3703                           
  3704                           ;standbyMode.c: 1811: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3705  00F366  0E66               	movlw	102
  3706  00F368  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3707  00F36A  0E76               	movlw	118
  3708  00F36C  6E60               	movwf	??_standbyMode& (0+255),c
  3709  00F36E  0EC1               	movlw	193
  3710  00F370                     u13717:
  3711  00F370  2EE8               	decfsz	wreg,f,c
  3712  00F372  D7FE               	bra	u13717
  3713  00F374  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3714  00F376  D7FC               	bra	u13717
  3715  00F378  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3716  00F37A  D7FA               	bra	u13717
  3717  00F37C  F000               	nop	
  3718  00F37E                     l1192:
  3719                           
  3720                           ;standbyMode.c: 1812: }
  3721                           ;standbyMode.c: 1813: validDrawer = 0;
  3722  00F37E  0E00               	movlw	0
  3723  00F380  0101               	movlb	1	; () banked
  3724  00F382  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3725  00F384  0E00               	movlw	0
  3726  00F386  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3727                           
  3728                           ;standbyMode.c: 1814: continue;
  3729  00F388  D6F1               	goto	u12240
  3730  00F38A                     l1190:
  3731                           
  3732                           ; BSR set to: 1
  3733                           
  3734                           ; BSR set to: 1
  3735                           
  3736                           ;standbyMode.c: 1816: else{
  3737                           ;standbyMode.c: 1817: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3738                           
  3739                           ; BSR set to: 1
  3740  00F38A  0E01               	movlw	1
  3741  00F38C  ECD3  F054         	call	_lcdInst
  3742  00F390  0EC3               	movlw	195
  3743  00F392  6E60               	movwf	??_standbyMode& (0+255),c
  3744  00F394  0ECD               	movlw	205
  3745  00F396                     u13727:
  3746  00F396  2EE8               	decfsz	wreg,f,c
  3747  00F398  D7FE               	bra	u13727
  3748  00F39A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3749  00F39C  D7FC               	bra	u13727
  3750  00F39E  F000               	nop	
  3751                           
  3752                           ;standbyMode.c: 1818: diet = diet_press(drawer);
  3753  00F3A0  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3754  00F3A4  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3755  00F3A8  EC93  F066         	call	_diet_press	;wreg free
  3756  00F3AC  C029  F180         	movff	?_diet_press,standbyMode@diet
  3757  00F3B0  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3758                           
  3759                           ;standbyMode.c: 1819: if (diet == 100){
  3760  00F3B4  0E64               	movlw	100
  3761  00F3B6  0101               	movlb	1	; () banked
  3762  00F3B8  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3763  00F3BA  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3764  00F3BC  A4D8               	btfss	status,2,c
  3765  00F3BE  D005               	goto	l1196
  3766                           
  3767                           ; BSR set to: 1
  3768                           ;standbyMode.c: 1820: diet = 0;
  3769  00F3C0  0E00               	movlw	0
  3770  00F3C2  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3771  00F3C4  0E00               	movlw	0
  3772  00F3C6  6F80               	movwf	standbyMode@diet& (0+255),b
  3773                           
  3774                           ;standbyMode.c: 1821: goto DIET_BACK1;
  3775  00F3C8  D72C               	goto	u12280
  3776  00F3CA                     l1196:
  3777                           
  3778                           ; BSR set to: 1
  3779                           ;standbyMode.c: 1822: }
  3780                           ;standbyMode.c: 1824: food = food_press(diet, drawer);
  3781                           
  3782                           ; BSR set to: 1
  3783  00F3CA  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3784  00F3CE  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3785  00F3D2  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3786  00F3D6  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3787  00F3DA  EC19  F05E         	call	_food_press	;wreg free
  3788  00F3DE  C029  F184         	movff	?_food_press,standbyMode@food
  3789  00F3E2  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3790                           
  3791                           ;standbyMode.c: 1825: if (food == 100){
  3792  00F3E6  0E64               	movlw	100
  3793  00F3E8  0101               	movlb	1	; () banked
  3794  00F3EA  1984               	xorwf	standbyMode@food& (0+255),w,b
  3795  00F3EC  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3796  00F3EE  A4D8               	btfss	status,2,c
  3797  00F3F0  D009               	goto	l1197
  3798                           
  3799                           ; BSR set to: 1
  3800                           ;standbyMode.c: 1826: diet = 0;
  3801  00F3F2  0E00               	movlw	0
  3802  00F3F4  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3803  00F3F6  0E00               	movlw	0
  3804  00F3F8  6F80               	movwf	standbyMode@diet& (0+255),b
  3805                           
  3806                           ;standbyMode.c: 1827: food = 0;
  3807  00F3FA  0E00               	movlw	0
  3808  00F3FC  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3809  00F3FE  0E00               	movlw	0
  3810  00F400  6F84               	movwf	standbyMode@food& (0+255),b
  3811                           
  3812                           ;standbyMode.c: 1828: goto FOOD_BACK1;
  3813  00F402  D7C3               	goto	l1190
  3814  00F404                     l1197:
  3815                           
  3816                           ; BSR set to: 1
  3817                           ;standbyMode.c: 1829: }
  3818                           ;standbyMode.c: 1831: drawerInformation[drawerCount] = drawer;
  3819                           
  3820                           ; BSR set to: 1
  3821  00F404  90D8               	bcf	status,0,c
  3822  00F406  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3823  00F408  6ED9               	movwf	fsr2l,c
  3824  00F40A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3825  00F40C  6EDA               	movwf	fsr2h,c
  3826  00F40E  0E50               	movlw	low standbyMode@drawerInformation
  3827  00F410  26D9               	addwf	fsr2l,f,c
  3828  00F412  0E01               	movlw	high standbyMode@drawerInformation
  3829  00F414  22DA               	addwfc	fsr2h,f,c
  3830  00F416  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3831  00F41A  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;standbyMode.c: 1832: decodedDiet = decode_diet(diet);
  3835  00F41E  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3836  00F422  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3837  00F426  EC72  F05B         	call	_decode_diet	;wreg free
  3838  00F42A  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3839  00F42E  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3840                           
  3841                           ;standbyMode.c: 1833: dietType[drawerCount] = decodedDiet;
  3842  00F432  90D8               	bcf	status,0,c
  3843  00F434  0101               	movlb	1	; () banked
  3844  00F436  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3845  00F438  6ED9               	movwf	fsr2l,c
  3846  00F43A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3847  00F43C  6EDA               	movwf	fsr2h,c
  3848  00F43E  0E30               	movlw	low standbyMode@dietType
  3849  00F440  26D9               	addwf	fsr2l,f,c
  3850  00F442  0E01               	movlw	high standbyMode@dietType
  3851  00F444  22DA               	addwfc	fsr2h,f,c
  3852  00F446  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3853  00F44A  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3854                           
  3855                           ;standbyMode.c: 1834: storedFoodType = printFoodInput(food);
  3856  00F44E  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3857  00F452  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3858  00F456  EC21  F060         	call	_printFoodInput	;wreg free
  3859  00F45A  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3860  00F45E  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3861                           
  3862                           ;standbyMode.c: 1835: foodType[drawerCount] = storedFoodType;
  3863  00F462  90D8               	bcf	status,0,c
  3864  00F464  0101               	movlb	1	; () banked
  3865  00F466  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3866  00F468  6ED9               	movwf	fsr2l,c
  3867  00F46A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3868  00F46C  6EDA               	movwf	fsr2h,c
  3869  00F46E  0E40               	movlw	low standbyMode@foodType
  3870  00F470  26D9               	addwf	fsr2l,f,c
  3871  00F472  0E01               	movlw	high standbyMode@foodType
  3872  00F474  22DA               	addwfc	fsr2h,f,c
  3873  00F476  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  3874  00F47A  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  3875                           
  3876                           ; BSR set to: 1
  3877                           ;standbyMode.c: 1838: round = getRound(food);
  3878  00F47E  C184  F001         	movff	standbyMode@food,getRound@code
  3879  00F482  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  3880  00F486  EC63  F059         	call	_getRound	;wreg free
  3881  00F48A  C001  F16C         	movff	?_getRound,standbyMode@round
  3882  00F48E  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  3883                           
  3884                           ;standbyMode.c: 1839: flat = getFlat(food);
  3885  00F492  C184  F001         	movff	standbyMode@food,getFlat@code
  3886  00F496  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  3887  00F49A  ECEB  F058         	call	_getFlat	;wreg free
  3888  00F49E  C001  F16E         	movff	?_getFlat,standbyMode@flat
  3889  00F4A2  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  3890                           
  3891                           ;standbyMode.c: 1840: lng = getLong(food);
  3892  00F4A6  C184  F001         	movff	standbyMode@food,getLong@code
  3893  00F4AA  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  3894  00F4AE  EC5A  F05A         	call	_getLong	;wreg free
  3895  00F4B2  C001  F170         	movff	?_getLong,standbyMode@lng
  3896  00F4B6  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  3897                           
  3898                           ;standbyMode.c: 1841: roundPieces[drawerCount] = round;
  3899  00F4BA  90D8               	bcf	status,0,c
  3900  00F4BC  0101               	movlb	1	; () banked
  3901  00F4BE  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3902  00F4C0  6ED9               	movwf	fsr2l,c
  3903  00F4C2  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3904  00F4C4  6EDA               	movwf	fsr2h,c
  3905  00F4C6  0E00               	movlw	low standbyMode@roundPieces
  3906  00F4C8  26D9               	addwf	fsr2l,f,c
  3907  00F4CA  0E01               	movlw	high standbyMode@roundPieces
  3908  00F4CC  22DA               	addwfc	fsr2h,f,c
  3909  00F4CE  C16C  FFDE         	movff	standbyMode@round,postinc2
  3910  00F4D2  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  3911                           
  3912                           ;standbyMode.c: 1842: flatPieces[drawerCount] = flat;
  3913  00F4D6  90D8               	bcf	status,0,c
  3914  00F4D8  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3915  00F4DA  6ED9               	movwf	fsr2l,c
  3916  00F4DC  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3917  00F4DE  6EDA               	movwf	fsr2h,c
  3918  00F4E0  0E10               	movlw	low standbyMode@flatPieces
  3919  00F4E2  26D9               	addwf	fsr2l,f,c
  3920  00F4E4  0E01               	movlw	high standbyMode@flatPieces
  3921  00F4E6  22DA               	addwfc	fsr2h,f,c
  3922  00F4E8  C16E  FFDE         	movff	standbyMode@flat,postinc2
  3923  00F4EC  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  3924                           
  3925                           ;standbyMode.c: 1843: longPieces[drawerCount] = lng;
  3926  00F4F0  90D8               	bcf	status,0,c
  3927  00F4F2  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3928  00F4F4  6ED9               	movwf	fsr2l,c
  3929  00F4F6  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3930  00F4F8  6EDA               	movwf	fsr2h,c
  3931  00F4FA  0E20               	movlw	low standbyMode@longPieces
  3932  00F4FC  26D9               	addwf	fsr2l,f,c
  3933  00F4FE  0E01               	movlw	high standbyMode@longPieces
  3934  00F500  22DA               	addwfc	fsr2h,f,c
  3935  00F502  C170  FFDE         	movff	standbyMode@lng,postinc2
  3936  00F506  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;standbyMode.c: 1844: drawerCount += 1;
  3940  00F50A  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  3941  00F50C  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  3942                           
  3943                           ; BSR set to: 1
  3944                           ;standbyMode.c: 1845: }
  3945                           ;standbyMode.c: 1846: }
  3946  00F50E  D004               	goto	l1199
  3947  00F510                     l1183:
  3948                           
  3949                           ; BSR set to: 1
  3950                           ;standbyMode.c: 1847: else if (keypress1 == 14){
  3951                           
  3952                           ; BSR set to: 1
  3953  00F510  0E0E               	movlw	14
  3954  00F512  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3955  00F514  B4D8               	btfsc	status,2,c
  3956  00F516  D182               	goto	l1200
  3957  00F518                     l1199:
  3958                           
  3959                           ; BSR set to: 1
  3960                           ;standbyMode.c: 1849: }
  3961                           ;standbyMode.c: 1850: keypress1 = 0;
  3962                           
  3963                           ; BSR set to: 1
  3964                           
  3965                           ; BSR set to: 1
  3966  00F518  0E00               	movlw	0
  3967  00F51A  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3968                           
  3969                           ; BSR set to: 1
  3970  00F51C  D627               	goto	u12240
  3971  00F51E                     l1172:
  3972                           
  3973                           ; BSR set to: 1
  3974                           
  3975                           ; BSR set to: 1
  3976                           
  3977                           ;standbyMode.c: 1854: else{
  3978                           ;standbyMode.c: 1855: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3979                           
  3980                           ; BSR set to: 1
  3981  00F51E  0E01               	movlw	1
  3982  00F520  ECD3  F054         	call	_lcdInst
  3983  00F524  0EC3               	movlw	195
  3984  00F526  6E60               	movwf	??_standbyMode& (0+255),c
  3985  00F528  0ECD               	movlw	205
  3986  00F52A                     u13737:
  3987  00F52A  2EE8               	decfsz	wreg,f,c
  3988  00F52C  D7FE               	bra	u13737
  3989  00F52E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3990  00F530  D7FC               	bra	u13737
  3991  00F532  F000               	nop	
  3992                           
  3993                           ;standbyMode.c: 1856: drawer = which_drawer();
  3994  00F534  EC16  F05F         	call	_which_drawer	;wreg free
  3995  00F538  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3996  00F53C  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3997                           
  3998                           ;standbyMode.c: 1858: if (drawer == 100){
  3999  00F540  0E64               	movlw	100
  4000  00F542  0101               	movlb	1	; () banked
  4001  00F544  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  4002  00F546  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  4003  00F548  A4D8               	btfss	status,2,c
  4004  00F54A  D009               	goto	l1203
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;standbyMode.c: 1859: drawer = 0;
  4008  00F54C  0E00               	movlw	0
  4009  00F54E  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  4010  00F550  0E00               	movlw	0
  4011  00F552  6F82               	movwf	standbyMode@drawer& (0+255),b
  4012                           
  4013                           ;standbyMode.c: 1860: firstIteration = 1;
  4014  00F554  0E00               	movlw	0
  4015  00F556  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4016  00F558  0E01               	movlw	1
  4017  00F55A  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4018                           
  4019                           ;standbyMode.c: 1861: goto DRAWER_BACK;
  4020  00F55C  D637               	goto	l1174
  4021  00F55E                     l1203:
  4022                           
  4023                           ; BSR set to: 1
  4024                           ;standbyMode.c: 1862: }
  4025                           ;standbyMode.c: 1864: firstIteration = 1;
  4026                           
  4027                           ; BSR set to: 1
  4028  00F55E  0E00               	movlw	0
  4029  00F560  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4030  00F562  0E01               	movlw	1
  4031  00F564  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4032                           
  4033                           ;standbyMode.c: 1865: for (i=0; i<8; i++){
  4034  00F566  0E00               	movlw	0
  4035  00F568  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4036  00F56A  0E00               	movlw	0
  4037  00F56C  6F88               	movwf	standbyMode@i& (0+255),b
  4038  00F56E                     l9542:
  4039                           
  4040                           ; BSR set to: 1
  4041  00F56E  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4042  00F570  E12C               	bnz	l9558
  4043  00F572  0E08               	movlw	8
  4044  00F574  5D88               	subwf	standbyMode@i& (0+255),w,b
  4045  00F576  B0D8               	btfsc	status,0,c
  4046  00F578  D028               	goto	u12430
  4047                           
  4048                           ; BSR set to: 1
  4049                           ;standbyMode.c: 1866: if (drawerInformation[i] == drawer){
  4050                           
  4051                           ; BSR set to: 1
  4052                           
  4053                           ; BSR set to: 1
  4054  00F57A  90D8               	bcf	status,0,c
  4055  00F57C  3588               	rlcf	standbyMode@i& (0+255),w,b
  4056  00F57E  6ED9               	movwf	fsr2l,c
  4057  00F580  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4058  00F582  6EDA               	movwf	fsr2h,c
  4059  00F584  0E50               	movlw	low standbyMode@drawerInformation
  4060  00F586  26D9               	addwf	fsr2l,f,c
  4061  00F588  0E01               	movlw	high standbyMode@drawerInformation
  4062  00F58A  22DA               	addwfc	fsr2h,f,c
  4063  00F58C  5182               	movf	standbyMode@drawer& (0+255),w,b
  4064  00F58E  18DE               	xorwf	postinc2,w,c
  4065  00F590  E119               	bnz	l9554
  4066  00F592  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  4067  00F594  18DE               	xorwf	postinc2,w,c
  4068  00F596  A4D8               	btfss	status,2,c
  4069  00F598  D015               	goto	l1207
  4070                           
  4071                           ; BSR set to: 1
  4072                           ;standbyMode.c: 1867: validDrawer = 1;
  4073  00F59A  0E00               	movlw	0
  4074  00F59C  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4075  00F59E  0E01               	movlw	1
  4076  00F5A0  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4077                           
  4078                           ; BSR set to: 1
  4079                           ;standbyMode.c: 1868: if (drawerInformation[i] == 0){
  4080  00F5A2  90D8               	bcf	status,0,c
  4081  00F5A4  3588               	rlcf	standbyMode@i& (0+255),w,b
  4082  00F5A6  6ED9               	movwf	fsr2l,c
  4083  00F5A8  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4084  00F5AA  6EDA               	movwf	fsr2h,c
  4085  00F5AC  0E50               	movlw	low standbyMode@drawerInformation
  4086  00F5AE  26D9               	addwf	fsr2l,f,c
  4087  00F5B0  0E01               	movlw	high standbyMode@drawerInformation
  4088  00F5B2  22DA               	addwfc	fsr2h,f,c
  4089  00F5B4  50DE               	movf	postinc2,w,c
  4090  00F5B6  10DE               	iorwf	postinc2,w,c
  4091  00F5B8  A4D8               	btfss	status,2,c
  4092  00F5BA  D004               	goto	l1207
  4093                           
  4094                           ; BSR set to: 1
  4095                           ;standbyMode.c: 1869: zero = 1;
  4096  00F5BC  0E00               	movlw	0
  4097  00F5BE  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4098  00F5C0  0E01               	movlw	1
  4099  00F5C2  6F79               	movwf	standbyMode@zero& (0+255),b
  4100  00F5C4                     l1207:
  4101  00F5C4                     l9554:
  4102                           
  4103                           ; BSR set to: 1
  4104  00F5C4  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4105  00F5C6  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4106  00F5C8  D7D2               	goto	l9542
  4107  00F5CA                     u12430:
  4108  00F5CA                     l9558:
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;standbyMode.c: 1870: }
  4112                           ;standbyMode.c: 1871: }
  4113                           ;standbyMode.c: 1872: }
  4114                           ;standbyMode.c: 1873: if (validDrawer == 1){
  4115  00F5CA  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  4116  00F5CC  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  4117  00F5CE  A4D8               	btfss	status,2,c
  4118  00F5D0  D062               	goto	l1208
  4119                           
  4120                           ; BSR set to: 1
  4121                           ;standbyMode.c: 1874: if (zero == 1){
  4122  00F5D2  0579               	decf	standbyMode@zero& (0+255),w,b
  4123  00F5D4  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  4124  00F5D6  A4D8               	btfss	status,2,c
  4125  00F5D8  D02F               	goto	l1209
  4126                           
  4127                           ; BSR set to: 1
  4128                           ;standbyMode.c: 1875: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4129  00F5DA  0E01               	movlw	1
  4130  00F5DC  ECD3  F054         	call	_lcdInst
  4131  00F5E0  0EC3               	movlw	195
  4132  00F5E2  6E60               	movwf	??_standbyMode& (0+255),c
  4133  00F5E4  0ECD               	movlw	205
  4134  00F5E6                     u13747:
  4135  00F5E6  2EE8               	decfsz	wreg,f,c
  4136  00F5E8  D7FE               	bra	u13747
  4137  00F5EA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4138  00F5EC  D7FC               	bra	u13747
  4139  00F5EE  F000               	nop	
  4140                           
  4141                           ;standbyMode.c: 1876: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4142  00F5F0  0E0C               	movlw	12
  4143  00F5F2  ECD3  F054         	call	_lcdInst
  4144                           
  4145                           ;standbyMode.c: 1877: printf("No drawer");
  4146  00F5F6  0E42               	movlw	low STR_126
  4147  00F5F8  6E0D               	movwf	printf@f,c
  4148  00F5FA  0EFF               	movlw	high STR_126
  4149  00F5FC  6E0E               	movwf	printf@f+1,c
  4150  00F5FE  EC9A  F064         	call	_printf	;wreg free
  4151                           
  4152                           ;standbyMode.c: 1878: lcdInst(0xC0);;
  4153  00F602  0EC0               	movlw	192
  4154  00F604  ECD3  F054         	call	_lcdInst
  4155                           
  4156                           ;standbyMode.c: 1879: printf("number pressed.");
  4157  00F608  0E3C               	movlw	low STR_127
  4158  00F60A  6E0D               	movwf	printf@f,c
  4159  00F60C  0EFD               	movlw	high STR_127
  4160  00F60E  6E0E               	movwf	printf@f+1,c
  4161  00F610  EC9A  F064         	call	_printf	;wreg free
  4162                           
  4163                           ;standbyMode.c: 1880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4164  00F614  0E66               	movlw	102
  4165  00F616  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4166  00F618  0E76               	movlw	118
  4167  00F61A  6E60               	movwf	??_standbyMode& (0+255),c
  4168  00F61C  0EC1               	movlw	193
  4169  00F61E                     u13757:
  4170  00F61E  2EE8               	decfsz	wreg,f,c
  4171  00F620  D7FE               	bra	u13757
  4172  00F622  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4173  00F624  D7FC               	bra	u13757
  4174  00F626  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4175  00F628  D7FA               	bra	u13757
  4176  00F62A  F000               	nop	
  4177                           
  4178                           ;standbyMode.c: 1881: zero = 0;
  4179  00F62C  0E00               	movlw	0
  4180  00F62E  0101               	movlb	1	; () banked
  4181  00F630  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4182  00F632  0E00               	movlw	0
  4183  00F634  6F79               	movwf	standbyMode@zero& (0+255),b
  4184                           
  4185                           ;standbyMode.c: 1882: }
  4186  00F636  D029               	goto	l1210
  4187  00F638                     l1209:
  4188                           
  4189                           ; BSR set to: 1
  4190                           ;standbyMode.c: 1883: else{
  4191                           ;standbyMode.c: 1884: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4192                           
  4193                           ; BSR set to: 1
  4194  00F638  0E01               	movlw	1
  4195  00F63A  ECD3  F054         	call	_lcdInst
  4196  00F63E  0EC3               	movlw	195
  4197  00F640  6E60               	movwf	??_standbyMode& (0+255),c
  4198  00F642  0ECD               	movlw	205
  4199  00F644                     u13767:
  4200  00F644  2EE8               	decfsz	wreg,f,c
  4201  00F646  D7FE               	bra	u13767
  4202  00F648  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4203  00F64A  D7FC               	bra	u13767
  4204  00F64C  F000               	nop	
  4205                           
  4206                           ;standbyMode.c: 1885: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4207  00F64E  0E0C               	movlw	12
  4208  00F650  ECD3  F054         	call	_lcdInst
  4209                           
  4210                           ;standbyMode.c: 1886: printf("Drawer already");
  4211  00F654  0E53               	movlw	low STR_128
  4212  00F656  6E0D               	movwf	printf@f,c
  4213  00F658  0EFE               	movlw	high STR_128
  4214  00F65A  6E0E               	movwf	printf@f+1,c
  4215  00F65C  EC9A  F064         	call	_printf	;wreg free
  4216                           
  4217                           ;standbyMode.c: 1887: lcdInst(0xC0);;
  4218  00F660  0EC0               	movlw	192
  4219  00F662  ECD3  F054         	call	_lcdInst
  4220                           
  4221                           ;standbyMode.c: 1888: printf("in use!");
  4222  00F666  0E7B               	movlw	low STR_129
  4223  00F668  6E0D               	movwf	printf@f,c
  4224  00F66A  0EFF               	movlw	high STR_129
  4225  00F66C  6E0E               	movwf	printf@f+1,c
  4226  00F66E  EC9A  F064         	call	_printf	;wreg free
  4227                           
  4228                           ;standbyMode.c: 1889: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4229  00F672  0E66               	movlw	102
  4230  00F674  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4231  00F676  0E76               	movlw	118
  4232  00F678  6E60               	movwf	??_standbyMode& (0+255),c
  4233  00F67A  0EC1               	movlw	193
  4234  00F67C                     u13777:
  4235  00F67C  2EE8               	decfsz	wreg,f,c
  4236  00F67E  D7FE               	bra	u13777
  4237  00F680  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4238  00F682  D7FC               	bra	u13777
  4239  00F684  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4240  00F686  D7FA               	bra	u13777
  4241  00F688  F000               	nop	
  4242  00F68A                     l1210:
  4243                           
  4244                           ;standbyMode.c: 1890: }
  4245                           ;standbyMode.c: 1891: validDrawer = 0;
  4246  00F68A  0E00               	movlw	0
  4247  00F68C  0101               	movlb	1	; () banked
  4248  00F68E  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4249  00F690  0E00               	movlw	0
  4250  00F692  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4251                           
  4252                           ; BSR set to: 1
  4253                           ;standbyMode.c: 1893: }
  4254                           
  4255                           ;standbyMode.c: 1892: continue;
  4256  00F694  D567               	goto	u12230
  4257  00F696                     l1208:
  4258                           
  4259                           ; BSR set to: 1
  4260                           
  4261                           ; BSR set to: 1
  4262                           
  4263                           ;standbyMode.c: 1894: else{
  4264                           ;standbyMode.c: 1895: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4265                           
  4266                           ; BSR set to: 1
  4267  00F696  0E01               	movlw	1
  4268  00F698  ECD3  F054         	call	_lcdInst
  4269  00F69C  0EC3               	movlw	195
  4270  00F69E  6E60               	movwf	??_standbyMode& (0+255),c
  4271  00F6A0  0ECD               	movlw	205
  4272  00F6A2                     u13787:
  4273  00F6A2  2EE8               	decfsz	wreg,f,c
  4274  00F6A4  D7FE               	bra	u13787
  4275  00F6A6  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4276  00F6A8  D7FC               	bra	u13787
  4277  00F6AA  F000               	nop	
  4278                           
  4279                           ;standbyMode.c: 1896: diet = diet_press(drawer);
  4280  00F6AC  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4281  00F6B0  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4282  00F6B4  EC93  F066         	call	_diet_press	;wreg free
  4283  00F6B8  C029  F180         	movff	?_diet_press,standbyMode@diet
  4284  00F6BC  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4285                           
  4286                           ;standbyMode.c: 1897: if (diet == 100){
  4287  00F6C0  0E64               	movlw	100
  4288  00F6C2  0101               	movlb	1	; () banked
  4289  00F6C4  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4290  00F6C6  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4291  00F6C8  A4D8               	btfss	status,2,c
  4292  00F6CA  D005               	goto	l1214
  4293                           
  4294                           ; BSR set to: 1
  4295                           ;standbyMode.c: 1898: diet = 0;
  4296  00F6CC  0E00               	movlw	0
  4297  00F6CE  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4298  00F6D0  0E00               	movlw	0
  4299  00F6D2  6F80               	movwf	standbyMode@diet& (0+255),b
  4300                           
  4301                           ;standbyMode.c: 1899: goto DIET_BACK2;
  4302  00F6D4  D724               	goto	l1172
  4303  00F6D6                     l1214:
  4304                           
  4305                           ; BSR set to: 1
  4306                           ;standbyMode.c: 1900: }
  4307                           ;standbyMode.c: 1902: food = food_press(diet, drawer);
  4308                           
  4309                           ; BSR set to: 1
  4310  00F6D6  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4311  00F6DA  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4312  00F6DE  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4313  00F6E2  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4314  00F6E6  EC19  F05E         	call	_food_press	;wreg free
  4315  00F6EA  C029  F184         	movff	?_food_press,standbyMode@food
  4316  00F6EE  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4317                           
  4318                           ;standbyMode.c: 1903: if (food == 100){
  4319  00F6F2  0E64               	movlw	100
  4320  00F6F4  0101               	movlb	1	; () banked
  4321  00F6F6  1984               	xorwf	standbyMode@food& (0+255),w,b
  4322  00F6F8  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4323  00F6FA  A4D8               	btfss	status,2,c
  4324  00F6FC  D009               	goto	l1215
  4325                           
  4326                           ; BSR set to: 1
  4327                           ;standbyMode.c: 1904: diet = 0;
  4328  00F6FE  0E00               	movlw	0
  4329  00F700  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4330  00F702  0E00               	movlw	0
  4331  00F704  6F80               	movwf	standbyMode@diet& (0+255),b
  4332                           
  4333                           ;standbyMode.c: 1905: food = 0;
  4334  00F706  0E00               	movlw	0
  4335  00F708  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4336  00F70A  0E00               	movlw	0
  4337  00F70C  6F84               	movwf	standbyMode@food& (0+255),b
  4338                           
  4339                           ;standbyMode.c: 1906: goto FOOD_BACK2;
  4340  00F70E  D7C3               	goto	l1208
  4341  00F710                     l1215:
  4342                           
  4343                           ; BSR set to: 1
  4344                           ;standbyMode.c: 1907: }
  4345                           ;standbyMode.c: 1909: drawerInformation[drawerCount] = drawer;
  4346                           
  4347                           ; BSR set to: 1
  4348  00F710  90D8               	bcf	status,0,c
  4349  00F712  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4350  00F714  6ED9               	movwf	fsr2l,c
  4351  00F716  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4352  00F718  6EDA               	movwf	fsr2h,c
  4353  00F71A  0E50               	movlw	low standbyMode@drawerInformation
  4354  00F71C  26D9               	addwf	fsr2l,f,c
  4355  00F71E  0E01               	movlw	high standbyMode@drawerInformation
  4356  00F720  22DA               	addwfc	fsr2h,f,c
  4357  00F722  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4358  00F726  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4359                           
  4360                           ; BSR set to: 1
  4361                           ;standbyMode.c: 1910: decodedDiet = decode_diet(diet);
  4362  00F72A  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4363  00F72E  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4364  00F732  EC72  F05B         	call	_decode_diet	;wreg free
  4365  00F736  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4366  00F73A  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4367                           
  4368                           ;standbyMode.c: 1911: dietType[drawerCount] = decodedDiet;
  4369  00F73E  90D8               	bcf	status,0,c
  4370  00F740  0101               	movlb	1	; () banked
  4371  00F742  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4372  00F744  6ED9               	movwf	fsr2l,c
  4373  00F746  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4374  00F748  6EDA               	movwf	fsr2h,c
  4375  00F74A  0E30               	movlw	low standbyMode@dietType
  4376  00F74C  26D9               	addwf	fsr2l,f,c
  4377  00F74E  0E01               	movlw	high standbyMode@dietType
  4378  00F750  22DA               	addwfc	fsr2h,f,c
  4379  00F752  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4380  00F756  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4381                           
  4382                           ;standbyMode.c: 1912: storedFoodType = printFoodInput(food);
  4383  00F75A  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4384  00F75E  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4385  00F762  EC21  F060         	call	_printFoodInput	;wreg free
  4386  00F766  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4387  00F76A  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4388                           
  4389                           ;standbyMode.c: 1913: foodType[drawerCount] = storedFoodType;
  4390  00F76E  90D8               	bcf	status,0,c
  4391  00F770  0101               	movlb	1	; () banked
  4392  00F772  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4393  00F774  6ED9               	movwf	fsr2l,c
  4394  00F776  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4395  00F778  6EDA               	movwf	fsr2h,c
  4396  00F77A  0E40               	movlw	low standbyMode@foodType
  4397  00F77C  26D9               	addwf	fsr2l,f,c
  4398  00F77E  0E01               	movlw	high standbyMode@foodType
  4399  00F780  22DA               	addwfc	fsr2h,f,c
  4400  00F782  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4401  00F786  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4402                           
  4403                           ; BSR set to: 1
  4404                           ;standbyMode.c: 1916: round = getRound(food);
  4405  00F78A  C184  F001         	movff	standbyMode@food,getRound@code
  4406  00F78E  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4407  00F792  EC63  F059         	call	_getRound	;wreg free
  4408  00F796  C001  F16C         	movff	?_getRound,standbyMode@round
  4409  00F79A  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4410                           
  4411                           ;standbyMode.c: 1917: flat = getFlat(food);
  4412  00F79E  C184  F001         	movff	standbyMode@food,getFlat@code
  4413  00F7A2  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4414  00F7A6  ECEB  F058         	call	_getFlat	;wreg free
  4415  00F7AA  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4416  00F7AE  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4417                           
  4418                           ;standbyMode.c: 1918: lng = getLong(food);
  4419  00F7B2  C184  F001         	movff	standbyMode@food,getLong@code
  4420  00F7B6  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4421  00F7BA  EC5A  F05A         	call	_getLong	;wreg free
  4422  00F7BE  C001  F170         	movff	?_getLong,standbyMode@lng
  4423  00F7C2  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4424                           
  4425                           ;standbyMode.c: 1919: roundPieces[drawerCount] = round;
  4426  00F7C6  90D8               	bcf	status,0,c
  4427  00F7C8  0101               	movlb	1	; () banked
  4428  00F7CA  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4429  00F7CC  6ED9               	movwf	fsr2l,c
  4430  00F7CE  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4431  00F7D0  6EDA               	movwf	fsr2h,c
  4432  00F7D2  0E00               	movlw	low standbyMode@roundPieces
  4433  00F7D4  26D9               	addwf	fsr2l,f,c
  4434  00F7D6  0E01               	movlw	high standbyMode@roundPieces
  4435  00F7D8  22DA               	addwfc	fsr2h,f,c
  4436  00F7DA  C16C  FFDE         	movff	standbyMode@round,postinc2
  4437  00F7DE  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4438                           
  4439                           ;standbyMode.c: 1920: flatPieces[drawerCount] = flat;
  4440  00F7E2  90D8               	bcf	status,0,c
  4441  00F7E4  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4442  00F7E6  6ED9               	movwf	fsr2l,c
  4443  00F7E8  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4444  00F7EA  6EDA               	movwf	fsr2h,c
  4445  00F7EC  0E10               	movlw	low standbyMode@flatPieces
  4446  00F7EE  26D9               	addwf	fsr2l,f,c
  4447  00F7F0  0E01               	movlw	high standbyMode@flatPieces
  4448  00F7F2  22DA               	addwfc	fsr2h,f,c
  4449  00F7F4  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4450  00F7F8  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4451                           
  4452                           ;standbyMode.c: 1921: longPieces[drawerCount] = lng;
  4453  00F7FC  90D8               	bcf	status,0,c
  4454  00F7FE  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4455  00F800  6ED9               	movwf	fsr2l,c
  4456  00F802  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4457  00F804  6EDA               	movwf	fsr2h,c
  4458  00F806  0E20               	movlw	low standbyMode@longPieces
  4459  00F808  26D9               	addwf	fsr2l,f,c
  4460  00F80A  0E01               	movlw	high standbyMode@longPieces
  4461  00F80C  22DA               	addwfc	fsr2h,f,c
  4462  00F80E  C170  FFDE         	movff	standbyMode@lng,postinc2
  4463  00F812  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4464                           
  4465                           ; BSR set to: 1
  4466                           ;standbyMode.c: 1922: drawerCount += 1;
  4467  00F816  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4468  00F818  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4469                           
  4470                           ; BSR set to: 1
  4471                           
  4472                           ; BSR set to: 1
  4473                           
  4474                           ; BSR set to: 1
  4475  00F81A  D4A4               	goto	u12230
  4476  00F81C                     l1200:
  4477                           
  4478                           ;standbyMode.c: 1923: }
  4479                           ;standbyMode.c: 1924: }
  4480                           ;standbyMode.c: 1925: }
  4481                           ;standbyMode.c: 1927: if (drawerCount == 0){
  4482                           
  4483                           ; BSR set to: 1
  4484  00F81C  0101               	movlb	1	; () banked
  4485  00F81E  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4486  00F820  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4487  00F822  A4D8               	btfss	status,2,c
  4488  00F824  D005               	goto	l1216
  4489                           
  4490                           ; BSR set to: 1
  4491                           ;standbyMode.c: 1928: return 0;
  4492  00F826  0E00               	movlw	0
  4493  00F828  6E5F               	movwf	?_standbyMode+1,c
  4494  00F82A  0E00               	movlw	0
  4495  00F82C  6E5E               	movwf	?_standbyMode,c
  4496                           
  4497                           ; BSR set to: 1
  4498                           ;standbyMode.c: 1929: }
  4499                           
  4500                           ; BSR set to: 1
  4501  00F82E  0012               	return	
  4502  00F830                     l1216:
  4503                           
  4504                           ; BSR set to: 1
  4505                           ;standbyMode.c: 1930: else{
  4506                           ;standbyMode.c: 1931: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4507                           
  4508                           ; BSR set to: 1
  4509  00F830  0E01               	movlw	1
  4510  00F832  ECD3  F054         	call	_lcdInst
  4511  00F836  0EC3               	movlw	195
  4512  00F838  6E60               	movwf	??_standbyMode& (0+255),c
  4513  00F83A  0ECD               	movlw	205
  4514  00F83C                     u13797:
  4515  00F83C  2EE8               	decfsz	wreg,f,c
  4516  00F83E  D7FE               	bra	u13797
  4517  00F840  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4518  00F842  D7FC               	bra	u13797
  4519  00F844  F000               	nop	
  4520                           
  4521                           ;standbyMode.c: 1932: printf("Inputs submitted");
  4522  00F846  0ED7               	movlw	low STR_134
  4523  00F848  6E0D               	movwf	printf@f,c
  4524  00F84A  0EFC               	movlw	high STR_134
  4525  00F84C  6E0E               	movwf	printf@f+1,c
  4526  00F84E  EC9A  F064         	call	_printf	;wreg free
  4527                           
  4528                           ;standbyMode.c: 1933: lcdInst(0xC0);;
  4529  00F852  0EC0               	movlw	192
  4530  00F854  ECD3  F054         	call	_lcdInst
  4531                           
  4532                           ;standbyMode.c: 1934: printf("successfully!");
  4533  00F858  0E8D               	movlw	low STR_135
  4534  00F85A  6E0D               	movwf	printf@f,c
  4535  00F85C  0EFE               	movlw	high STR_135
  4536  00F85E  6E0E               	movwf	printf@f+1,c
  4537  00F860  EC9A  F064         	call	_printf	;wreg free
  4538                           
  4539                           ;standbyMode.c: 1935: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4540  00F864  0E33               	movlw	51
  4541  00F866  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4542  00F868  0EBB               	movlw	187
  4543  00F86A  6E60               	movwf	??_standbyMode& (0+255),c
  4544  00F86C  0EE0               	movlw	224
  4545  00F86E                     u13807:
  4546  00F86E  2EE8               	decfsz	wreg,f,c
  4547  00F870  D7FE               	bra	u13807
  4548  00F872  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4549  00F874  D7FC               	bra	u13807
  4550  00F876  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4551  00F878  D7FA               	bra	u13807
  4552                           
  4553                           ;standbyMode.c: 1937: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4554  00F87A  0E01               	movlw	1
  4555  00F87C  ECD3  F054         	call	_lcdInst
  4556  00F880  0EC3               	movlw	195
  4557  00F882  6E60               	movwf	??_standbyMode& (0+255),c
  4558  00F884  0ECD               	movlw	205
  4559  00F886                     u13817:
  4560  00F886  2EE8               	decfsz	wreg,f,c
  4561  00F888  D7FE               	bra	u13817
  4562  00F88A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4563  00F88C  D7FC               	bra	u13817
  4564  00F88E  F000               	nop	
  4565                           
  4566                           ;standbyMode.c: 1938: printf("Summary of");
  4567  00F890  0E22               	movlw	low STR_136
  4568  00F892  6E0D               	movwf	printf@f,c
  4569  00F894  0EFF               	movlw	high STR_136
  4570  00F896  6E0E               	movwf	printf@f+1,c
  4571  00F898  EC9A  F064         	call	_printf	;wreg free
  4572                           
  4573                           ;standbyMode.c: 1939: lcdInst(0xC0);;
  4574  00F89C  0EC0               	movlw	192
  4575  00F89E  ECD3  F054         	call	_lcdInst
  4576                           
  4577                           ;standbyMode.c: 1940: printf("inputs:");
  4578  00F8A2  0E83               	movlw	low STR_137
  4579  00F8A4  6E0D               	movwf	printf@f,c
  4580  00F8A6  0EFF               	movlw	high STR_137
  4581  00F8A8  6E0E               	movwf	printf@f+1,c
  4582  00F8AA  EC9A  F064         	call	_printf	;wreg free
  4583                           
  4584                           ;standbyMode.c: 1941: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4585  00F8AE  0E33               	movlw	51
  4586  00F8B0  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4587  00F8B2  0EBB               	movlw	187
  4588  00F8B4  6E60               	movwf	??_standbyMode& (0+255),c
  4589  00F8B6  0EE0               	movlw	224
  4590  00F8B8                     u13827:
  4591  00F8B8  2EE8               	decfsz	wreg,f,c
  4592  00F8BA  D7FE               	bra	u13827
  4593  00F8BC  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4594  00F8BE  D7FC               	bra	u13827
  4595  00F8C0  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4596  00F8C2  D7FA               	bra	u13827
  4597                           
  4598                           ;standbyMode.c: 1943: for (i=0; i<8; i++){
  4599  00F8C4  0E00               	movlw	0
  4600  00F8C6  0101               	movlb	1	; () banked
  4601  00F8C8  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4602  00F8CA  0E00               	movlw	0
  4603  00F8CC  6F88               	movwf	standbyMode@i& (0+255),b
  4604                           
  4605                           ; BSR set to: 1
  4606  00F8CE  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4607  00F8D0  E105               	bnz	u12490
  4608  00F8D2  0E08               	movlw	8
  4609  00F8D4  5D88               	subwf	standbyMode@i& (0+255),w,b
  4610  00F8D6  B0D8               	btfsc	status,0,c
  4611  00F8D8  D07D               	goto	u12510
  4612  00F8DA  D001               	goto	l1219
  4613  00F8DC                     u12490:
  4614                           
  4615                           ; BSR set to: 1
  4616  00F8DC  D07B               	goto	u12510
  4617  00F8DE                     l1219:
  4618                           
  4619                           ; BSR set to: 1
  4620                           ;standbyMode.c: 1944: if (drawerInformation[i] != 0){
  4621                           
  4622                           ; BSR set to: 1
  4623  00F8DE  90D8               	bcf	status,0,c
  4624  00F8E0  3588               	rlcf	standbyMode@i& (0+255),w,b
  4625  00F8E2  6ED9               	movwf	fsr2l,c
  4626  00F8E4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4627  00F8E6  6EDA               	movwf	fsr2h,c
  4628  00F8E8  0E50               	movlw	low standbyMode@drawerInformation
  4629  00F8EA  26D9               	addwf	fsr2l,f,c
  4630  00F8EC  0E01               	movlw	high standbyMode@drawerInformation
  4631  00F8EE  22DA               	addwfc	fsr2h,f,c
  4632  00F8F0  50DE               	movf	postinc2,w,c
  4633  00F8F2  10DE               	iorwf	postinc2,w,c
  4634  00F8F4  B4D8               	btfsc	status,2,c
  4635  00F8F6  D068               	goto	l1221
  4636                           
  4637                           ; BSR set to: 1
  4638                           ;standbyMode.c: 1945: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4639  00F8F8  0E01               	movlw	1
  4640  00F8FA  ECD3  F054         	call	_lcdInst
  4641  00F8FE  0EC3               	movlw	195
  4642  00F900  6E60               	movwf	??_standbyMode& (0+255),c
  4643  00F902  0ECD               	movlw	205
  4644  00F904                     u13837:
  4645  00F904  2EE8               	decfsz	wreg,f,c
  4646  00F906  D7FE               	bra	u13837
  4647  00F908  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4648  00F90A  D7FC               	bra	u13837
  4649  00F90C  F000               	nop	
  4650                           
  4651                           ;standbyMode.c: 1946: printf("Drawer %i:", drawerInformation[i]);
  4652  00F90E  0E17               	movlw	low STR_95
  4653  00F910  6E0D               	movwf	printf@f,c
  4654  00F912  0EFF               	movlw	high STR_95
  4655  00F914  6E0E               	movwf	printf@f+1,c
  4656  00F916  90D8               	bcf	status,0,c
  4657  00F918  0101               	movlb	1	; () banked
  4658  00F91A  3588               	rlcf	standbyMode@i& (0+255),w,b
  4659  00F91C  6ED9               	movwf	fsr2l,c
  4660  00F91E  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4661  00F920  6EDA               	movwf	fsr2h,c
  4662  00F922  0E50               	movlw	low standbyMode@drawerInformation
  4663  00F924  26D9               	addwf	fsr2l,f,c
  4664  00F926  0E01               	movlw	high standbyMode@drawerInformation
  4665  00F928  22DA               	addwfc	fsr2h,f,c
  4666  00F92A  CFDE F00F          	movff	postinc2,?_printf+2
  4667  00F92E  CFDD F010          	movff	postdec2,?_printf+3
  4668  00F932  EC9A  F064         	call	_printf	;wreg free
  4669                           
  4670                           ;standbyMode.c: 1947: lcdInst(0xC0);;
  4671  00F936  0EC0               	movlw	192
  4672  00F938  ECD3  F054         	call	_lcdInst
  4673                           
  4674                           ;standbyMode.c: 1948: printf("%s%s",inputs[dietType[i]], foodInputs[foodType[i]]);
  4675  00F93C  0EB7               	movlw	low STR_96
  4676  00F93E  6E0D               	movwf	printf@f,c
  4677  00F940  0EFF               	movlw	high STR_96
  4678  00F942  6E0E               	movwf	printf@f+1,c
  4679  00F944  90D8               	bcf	status,0,c
  4680  00F946  0101               	movlb	1	; () banked
  4681  00F948  3588               	rlcf	standbyMode@i& (0+255),w,b
  4682  00F94A  6ED9               	movwf	fsr2l,c
  4683  00F94C  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4684  00F94E  6EDA               	movwf	fsr2h,c
  4685  00F950  0E30               	movlw	low standbyMode@dietType
  4686  00F952  26D9               	addwf	fsr2l,f,c
  4687  00F954  0E01               	movlw	high standbyMode@dietType
  4688  00F956  22DA               	addwfc	fsr2h,f,c
  4689  00F958  CFDE F060          	movff	postinc2,??_standbyMode
  4690  00F95C  CFDD F061          	movff	postdec2,??_standbyMode+1
  4691  00F960  90D8               	bcf	status,0,c
  4692  00F962  3660               	rlcf	??_standbyMode,f,c
  4693  00F964  3661               	rlcf	??_standbyMode+1,f,c
  4694  00F966  0E50               	movlw	low _inputs
  4695  00F968  2460               	addwf	??_standbyMode,w,c
  4696  00F96A  6ED9               	movwf	fsr2l,c
  4697  00F96C  0E02               	movlw	high _inputs
  4698  00F96E  2061               	addwfc	??_standbyMode+1,w,c
  4699  00F970  6EDA               	movwf	fsr2h,c
  4700  00F972  CFDE F00F          	movff	postinc2,?_printf+2
  4701  00F976  CFDD F010          	movff	postdec2,?_printf+3
  4702  00F97A  90D8               	bcf	status,0,c
  4703  00F97C  3588               	rlcf	standbyMode@i& (0+255),w,b
  4704  00F97E  6ED9               	movwf	fsr2l,c
  4705  00F980  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4706  00F982  6EDA               	movwf	fsr2h,c
  4707  00F984  0E40               	movlw	low standbyMode@foodType
  4708  00F986  26D9               	addwf	fsr2l,f,c
  4709  00F988  0E01               	movlw	high standbyMode@foodType
  4710  00F98A  22DA               	addwfc	fsr2h,f,c
  4711  00F98C  CFDE F062          	movff	postinc2,??_standbyMode+2
  4712  00F990  CFDD F063          	movff	postdec2,??_standbyMode+3
  4713  00F994  90D8               	bcf	status,0,c
  4714  00F996  3662               	rlcf	??_standbyMode+2,f,c
  4715  00F998  3663               	rlcf	??_standbyMode+3,f,c
  4716  00F99A  0E74               	movlw	low _foodInputs
  4717  00F99C  2462               	addwf	??_standbyMode+2,w,c
  4718  00F99E  6ED9               	movwf	fsr2l,c
  4719  00F9A0  0E02               	movlw	high _foodInputs
  4720  00F9A2  2063               	addwfc	??_standbyMode+3,w,c
  4721  00F9A4  6EDA               	movwf	fsr2h,c
  4722  00F9A6  CFDE F011          	movff	postinc2,?_printf+4
  4723  00F9AA  CFDD F012          	movff	postdec2,?_printf+5
  4724  00F9AE  EC9A  F064         	call	_printf	;wreg free
  4725                           
  4726                           ;standbyMode.c: 1949: _delay((unsigned long)((1500)*(40000000/4000.0)));
  4727  00F9B2  0E4D               	movlw	77
  4728  00F9B4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4729  00F9B6  0E19               	movlw	25
  4730  00F9B8  6E60               	movwf	??_standbyMode& (0+255),c
  4731  00F9BA  0E50               	movlw	80
  4732  00F9BC                     u13847:
  4733  00F9BC  2EE8               	decfsz	wreg,f,c
  4734  00F9BE  D7FE               	bra	u13847
  4735  00F9C0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4736  00F9C2  D7FC               	bra	u13847
  4737  00F9C4  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4738  00F9C6  D7FA               	bra	u13847
  4739  00F9C8                     l1221:
  4740  00F9C8  0101               	movlb	1	; () banked
  4741  00F9CA  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4742  00F9CC  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4743  00F9CE  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4744  00F9D0  E101               	bnz	l9676
  4745  00F9D2  D77F               	goto	L1
  4746  00F9D4                     u12510:
  4747  00F9D4                     l9676:
  4748                           
  4749                           ; BSR set to: 1
  4750                           ;standbyMode.c: 1950: }
  4751                           ;standbyMode.c: 1951: }
  4752                           ;standbyMode.c: 1953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4753  00F9D4  0E01               	movlw	1
  4754  00F9D6  ECD3  F054         	call	_lcdInst
  4755  00F9DA  0EC3               	movlw	195
  4756  00F9DC  6E60               	movwf	??_standbyMode& (0+255),c
  4757  00F9DE  0ECD               	movlw	205
  4758  00F9E0                     u13857:
  4759  00F9E0  2EE8               	decfsz	wreg,f,c
  4760  00F9E2  D7FE               	bra	u13857
  4761  00F9E4  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4762  00F9E6  D7FC               	bra	u13857
  4763  00F9E8  F000               	nop	
  4764                           
  4765                           ;standbyMode.c: 1954: printf("Operation will");
  4766  00F9EA  0E26               	movlw	low STR_140
  4767  00F9EC  6E0D               	movwf	printf@f,c
  4768  00F9EE  0EFE               	movlw	high STR_140
  4769  00F9F0  6E0E               	movwf	printf@f+1,c
  4770  00F9F2  EC9A  F064         	call	_printf	;wreg free
  4771                           
  4772                           ;standbyMode.c: 1955: lcdInst(0xC0);;
  4773  00F9F6  0EC0               	movlw	192
  4774  00F9F8  ECD3  F054         	call	_lcdInst
  4775                           
  4776                           ;standbyMode.c: 1956: printf("begin shortly.");
  4777  00F9FC  0ECC               	movlw	low STR_141
  4778  00F9FE  6E0D               	movwf	printf@f,c
  4779  00FA00  0EFD               	movlw	high STR_141
  4780  00FA02  6E0E               	movwf	printf@f+1,c
  4781  00FA04  EC9A  F064         	call	_printf	;wreg free
  4782                           
  4783                           ;standbyMode.c: 1957: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4784  00FA08  0E33               	movlw	51
  4785  00FA0A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4786  00FA0C  0EBB               	movlw	187
  4787  00FA0E  6E60               	movwf	??_standbyMode& (0+255),c
  4788  00FA10  0EE0               	movlw	224
  4789  00FA12                     u13867:
  4790  00FA12  2EE8               	decfsz	wreg,f,c
  4791  00FA14  D7FE               	bra	u13867
  4792  00FA16  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4793  00FA18  D7FC               	bra	u13867
  4794  00FA1A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4795  00FA1C  D7FA               	bra	u13867
  4796                           
  4797                           ;standbyMode.c: 1959: logNumber = readEEPROM(250);
  4798  00FA1E  0EFA               	movlw	250
  4799  00FA20  ECDD  F054         	call	_readEEPROM
  4800  00FA24  0101               	movlb	1	; () banked
  4801  00FA26  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  4802                           
  4803                           ; BSR set to: 1
  4804                           ;standbyMode.c: 1960: if (logNumber == 4){
  4805  00FA28  0E04               	movlw	4
  4806  00FA2A  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4807  00FA2C  B4D8               	btfsc	status,2,c
  4808                           
  4809                           ; BSR set to: 1
  4810                           ;standbyMode.c: 1961: shiftEEPROM();
  4811  00FA2E  EC5E  F057         	call	_shiftEEPROM	;wreg free
  4812                           
  4813                           ;standbyMode.c: 1962: }
  4814                           ;standbyMode.c: 1963: for (i=0; i<8; i++){
  4815  00FA32  0E00               	movlw	0
  4816  00FA34  0101               	movlb	1	; () banked
  4817  00FA36  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4818  00FA38  0E00               	movlw	0
  4819  00FA3A  6F88               	movwf	standbyMode@i& (0+255),b
  4820                           
  4821                           ; BSR set to: 1
  4822  00FA3C  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4823  00FA3E  E172               	bnz	l1224
  4824  00FA40  0E08               	movlw	8
  4825  00FA42  5D88               	subwf	standbyMode@i& (0+255),w,b
  4826  00FA44  B0D8               	btfsc	status,0,c
  4827  00FA46  D06E               	goto	u12560
  4828                           
  4829                           ; BSR set to: 1
  4830                           ;standbyMode.c: 1964: if (logNumber == 0 || logNumber == 4){
  4831                           
  4832                           ; BSR set to: 1
  4833                           
  4834                           ; BSR set to: 1
  4835  00FA48  517F               	movf	standbyMode@logNumber& (0+255),w,b
  4836  00FA4A  B4D8               	btfsc	status,2,c
  4837  00FA4C  D004               	goto	u12550
  4838                           
  4839                           ; BSR set to: 1
  4840  00FA4E  0E04               	movlw	4
  4841  00FA50  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4842  00FA52  A4D8               	btfss	status,2,c
  4843  00FA54  D00F               	goto	l1225
  4844  00FA56                     u12550:
  4845                           
  4846                           ; BSR set to: 1
  4847                           ;standbyMode.c: 1965: n = 3*i;
  4848                           
  4849                           ; BSR set to: 1
  4850  00FA56  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4851  00FA5A  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4852  00FA5E  0E00               	movlw	0
  4853  00FA60  6E04               	movwf	___wmul@multiplicand+1,c
  4854  00FA62  0E03               	movlw	3
  4855  00FA64  6E03               	movwf	___wmul@multiplicand,c
  4856  00FA66  EC25  F055         	call	___wmul	;wreg free
  4857  00FA6A  C001  F17B         	movff	?___wmul,standbyMode@n
  4858  00FA6E  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  4859                           
  4860                           ;standbyMode.c: 1966: }
  4861  00FA72  D022               	goto	l1228
  4862  00FA74                     l1225:
  4863                           
  4864                           ;standbyMode.c: 1967: else{
  4865                           ;standbyMode.c: 1968: n = (logNumber-1)*35 + 3*i;
  4866  00FA74  0EFF               	movlw	255
  4867  00FA76  0101               	movlb	1	; () banked
  4868  00FA78  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  4869  00FA7A  6E01               	movwf	___wmul@multiplier,c
  4870  00FA7C  6A02               	clrf	___wmul@multiplier+1,c
  4871  00FA7E  0EFF               	movlw	255
  4872  00FA80  2202               	addwfc	___wmul@multiplier+1,f,c
  4873  00FA82  0E00               	movlw	0
  4874  00FA84  6E04               	movwf	___wmul@multiplicand+1,c
  4875  00FA86  0E23               	movlw	35
  4876  00FA88  6E03               	movwf	___wmul@multiplicand,c
  4877  00FA8A  EC25  F055         	call	___wmul	;wreg free
  4878  00FA8E  C001  F060         	movff	?___wmul,??_standbyMode
  4879  00FA92  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  4880  00FA96  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4881  00FA9A  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4882  00FA9E  0E00               	movlw	0
  4883  00FAA0  6E04               	movwf	___wmul@multiplicand+1,c
  4884  00FAA2  0E03               	movlw	3
  4885  00FAA4  6E03               	movwf	___wmul@multiplicand,c
  4886  00FAA6  EC25  F055         	call	___wmul	;wreg free
  4887  00FAAA  5001               	movf	?___wmul,w,c
  4888  00FAAC  2460               	addwf	??_standbyMode,w,c
  4889  00FAAE  0101               	movlb	1	; () banked
  4890  00FAB0  6F7B               	movwf	standbyMode@n& (0+255),b
  4891  00FAB2  5002               	movf	?___wmul+1,w,c
  4892  00FAB4  2061               	addwfc	??_standbyMode+1,w,c
  4893  00FAB6  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  4894  00FAB8                     l1228:
  4895                           
  4896                           ;standbyMode.c: 1969: }
  4897                           ;standbyMode.c: 1970: writeEEPROM(11+n, drawerInformation[i]);
  4898                           
  4899                           ; BSR set to: 1
  4900  00FAB8  90D8               	bcf	status,0,c
  4901  00FABA  0101               	movlb	1	; () banked
  4902  00FABC  3588               	rlcf	standbyMode@i& (0+255),w,b
  4903  00FABE  6ED9               	movwf	fsr2l,c
  4904  00FAC0  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4905  00FAC2  6EDA               	movwf	fsr2h,c
  4906  00FAC4  0E50               	movlw	low standbyMode@drawerInformation
  4907  00FAC6  26D9               	addwf	fsr2l,f,c
  4908  00FAC8  0E01               	movlw	high standbyMode@drawerInformation
  4909  00FACA  22DA               	addwfc	fsr2h,f,c
  4910  00FACC  50DF               	movf	indf2,w,c
  4911  00FACE  6E01               	movwf	writeEEPROM@data,c
  4912  00FAD0  517B               	movf	standbyMode@n& (0+255),w,b
  4913  00FAD2  0F0B               	addlw	11
  4914  00FAD4  EC38  F055         	call	_writeEEPROM
  4915                           
  4916                           ;standbyMode.c: 1971: writeEEPROM(12+n, dietType[i]);
  4917  00FAD8  90D8               	bcf	status,0,c
  4918  00FADA  0101               	movlb	1	; () banked
  4919  00FADC  3588               	rlcf	standbyMode@i& (0+255),w,b
  4920  00FADE  6ED9               	movwf	fsr2l,c
  4921  00FAE0  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4922  00FAE2  6EDA               	movwf	fsr2h,c
  4923  00FAE4  0E30               	movlw	low standbyMode@dietType
  4924  00FAE6  26D9               	addwf	fsr2l,f,c
  4925  00FAE8  0E01               	movlw	high standbyMode@dietType
  4926  00FAEA  22DA               	addwfc	fsr2h,f,c
  4927  00FAEC  50DF               	movf	indf2,w,c
  4928  00FAEE  6E01               	movwf	writeEEPROM@data,c
  4929  00FAF0  517B               	movf	standbyMode@n& (0+255),w,b
  4930  00FAF2  0F0C               	addlw	12
  4931  00FAF4  EC38  F055         	call	_writeEEPROM
  4932                           
  4933                           ;standbyMode.c: 1972: writeEEPROM(13+n, foodType[i]);
  4934  00FAF8  90D8               	bcf	status,0,c
  4935  00FAFA  0101               	movlb	1	; () banked
  4936  00FAFC  3588               	rlcf	standbyMode@i& (0+255),w,b
  4937  00FAFE  6ED9               	movwf	fsr2l,c
  4938  00FB00  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4939  00FB02  6EDA               	movwf	fsr2h,c
  4940  00FB04  0E40               	movlw	low standbyMode@foodType
  4941  00FB06  26D9               	addwf	fsr2l,f,c
  4942  00FB08  0E01               	movlw	high standbyMode@foodType
  4943  00FB0A  22DA               	addwfc	fsr2h,f,c
  4944  00FB0C  50DF               	movf	indf2,w,c
  4945  00FB0E  6E01               	movwf	writeEEPROM@data,c
  4946  00FB10  517B               	movf	standbyMode@n& (0+255),w,b
  4947  00FB12  0F0D               	addlw	13
  4948  00FB14  EC38  F055         	call	_writeEEPROM
  4949  00FB18  0101               	movlb	1	; () banked
  4950  00FB1A  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4951  00FB1C  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4952                           
  4953                           ; BSR set to: 1
  4954  00FB1E  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4955  00FB20  E101               	bnz	l9716
  4956  00FB22  D78E               	goto	L2
  4957  00FB24                     u12560:
  4958  00FB24                     l1224:
  4959  00FB24                     l9716:
  4960                           
  4961                           ; BSR set to: 1
  4962                           ;standbyMode.c: 1973: }
  4963                           ;standbyMode.c: 1974: return 1;
  4964  00FB24  0E00               	movlw	0
  4965  00FB26  6E5F               	movwf	?_standbyMode+1,c
  4966  00FB28  0E01               	movlw	1
  4967  00FB2A  6E5E               	movwf	?_standbyMode,c
  4968                           
  4969                           ; BSR set to: 1
  4970                           ;standbyMode.c: 1975: }
  4971                           ;standbyMode.c: 1976: }
  4972                           
  4973                           ; BSR set to: 1
  4974  00FB2C  0012               	return	
  4975  00FB2E                     l1170:
  4976                           
  4977                           ; BSR set to: 1
  4978                           ;standbyMode.c: 1977: else if (keypress == 14){
  4979                           
  4980                           ; BSR set to: 1
  4981  00FB2E  0E0E               	movlw	14
  4982  00FB30  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  4983  00FB32  A4D8               	btfss	status,2,c
  4984  00FB34  D05F               	goto	l1230
  4985  00FB36                     u12570:
  4986                           
  4987                           ;standbyMode.c: 1979: unsigned int whichKey = viewLogs();
  4988                           
  4989                           ; BSR set to: 1
  4990                           
  4991                           ;standbyMode.c: 1978: while (1){
  4992  00FB36  EC4C  F061         	call	_viewLogs	;wreg free
  4993  00FB3A  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  4994  00FB3E  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4995                           
  4996                           ;standbyMode.c: 1980: if (whichKey == 15){
  4997  00FB42  0E0F               	movlw	15
  4998  00FB44  0101               	movlb	1	; () banked
  4999  00FB46  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5000  00FB48  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5001  00FB4A  B4D8               	btfsc	status,2,c
  5002  00FB4C  D7F4               	goto	u12570
  5003                           
  5004                           ; BSR set to: 1
  5005                           ;standbyMode.c: 1983: else if (whichKey == 14){
  5006                           
  5007                           ; BSR set to: 1
  5008                           
  5009                           ; BSR set to: 1
  5010                           ;standbyMode.c: 1982: }
  5011                           
  5012                           ; BSR set to: 1
  5013                           ;standbyMode.c: 1981: continue;
  5014  00FB4E  0E0E               	movlw	14
  5015  00FB50  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  5016  00FB52  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  5017  00FB54  A4D8               	btfss	status,2,c
  5018  00FB56  D020               	goto	l1235
  5019                           
  5020                           ; BSR set to: 1
  5021                           ;standbyMode.c: 1984: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5022  00FB58  0E01               	movlw	1
  5023  00FB5A  ECD3  F054         	call	_lcdInst
  5024  00FB5E  0EC3               	movlw	195
  5025  00FB60  6E60               	movwf	??_standbyMode& (0+255),c
  5026  00FB62  0ECD               	movlw	205
  5027  00FB64                     u13877:
  5028  00FB64  2EE8               	decfsz	wreg,f,c
  5029  00FB66  D7FE               	bra	u13877
  5030  00FB68  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5031  00FB6A  D7FC               	bra	u13877
  5032  00FB6C  F000               	nop	
  5033                           
  5034                           ;standbyMode.c: 1985: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5035  00FB6E  0E0C               	movlw	12
  5036  00FB70  ECD3  F054         	call	_lcdInst
  5037                           
  5038                           ;standbyMode.c: 1986: printf("Rebooting.");
  5039  00FB74  0E01               	movlw	low STR_142
  5040  00FB76  6E0D               	movwf	printf@f,c
  5041  00FB78  0EFF               	movlw	high STR_142
  5042  00FB7A  6E0E               	movwf	printf@f+1,c
  5043  00FB7C  EC9A  F064         	call	_printf	;wreg free
  5044                           
  5045                           ;standbyMode.c: 1987: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5046  00FB80  0E66               	movlw	102
  5047  00FB82  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5048  00FB84  0E76               	movlw	118
  5049  00FB86  6E60               	movwf	??_standbyMode& (0+255),c
  5050  00FB88  0EC1               	movlw	193
  5051  00FB8A                     u13887:
  5052  00FB8A  2EE8               	decfsz	wreg,f,c
  5053  00FB8C  D7FE               	bra	u13887
  5054  00FB8E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5055  00FB90  D7FC               	bra	u13887
  5056  00FB92  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5057  00FB94  D7FA               	bra	u13887
  5058  00FB96  D028               	goto	L3
  5059  00FB98                     l1235:
  5060                           
  5061                           ;standbyMode.c: 1990: else{
  5062                           ;standbyMode.c: 1991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5063  00FB98  0E01               	movlw	1
  5064  00FB9A  ECD3  F054         	call	_lcdInst
  5065  00FB9E  0EC3               	movlw	195
  5066  00FBA0  6E60               	movwf	??_standbyMode& (0+255),c
  5067  00FBA2  0ECD               	movlw	205
  5068  00FBA4                     u13897:
  5069  00FBA4  2EE8               	decfsz	wreg,f,c
  5070  00FBA6  D7FE               	bra	u13897
  5071  00FBA8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5072  00FBAA  D7FC               	bra	u13897
  5073  00FBAC  F000               	nop	
  5074                           
  5075                           ;standbyMode.c: 1992: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5076  00FBAE  0E0C               	movlw	12
  5077  00FBB0  ECD3  F054         	call	_lcdInst
  5078                           
  5079                           ;standbyMode.c: 1993: printf("Invalid key!");
  5080  00FBB4  0EB7               	movlw	low STR_143
  5081  00FBB6  6E0D               	movwf	printf@f,c
  5082  00FBB8  0EFE               	movlw	high STR_143
  5083  00FBBA  6E0E               	movwf	printf@f+1,c
  5084  00FBBC  EC9A  F064         	call	_printf	;wreg free
  5085                           
  5086                           ;standbyMode.c: 1994: lcdInst(0xC0);;
  5087  00FBC0  0EC0               	movlw	192
  5088  00FBC2  ECD3  F054         	call	_lcdInst
  5089                           
  5090                           ;standbyMode.c: 1995: printf("Rebooting.");
  5091  00FBC6  0E01               	movlw	low STR_142
  5092  00FBC8  6E0D               	movwf	printf@f,c
  5093  00FBCA  0EFF               	movlw	high STR_142
  5094  00FBCC  6E0E               	movwf	printf@f+1,c
  5095  00FBCE  EC9A  F064         	call	_printf	;wreg free
  5096                           
  5097                           ;standbyMode.c: 1996: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5098  00FBD2  0E66               	movlw	102
  5099  00FBD4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5100  00FBD6  0E76               	movlw	118
  5101  00FBD8  6E60               	movwf	??_standbyMode& (0+255),c
  5102  00FBDA  0EC1               	movlw	193
  5103  00FBDC                     u13907:
  5104  00FBDC  2EE8               	decfsz	wreg,f,c
  5105  00FBDE  D7FE               	bra	u13907
  5106  00FBE0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5107  00FBE2  D7FC               	bra	u13907
  5108  00FBE4  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5109  00FBE6  D7FA               	bra	u13907
  5110  00FBE8                     L3:
  5111  00FBE8  F000               	nop	
  5112                           
  5113                           ;standbyMode.c: 1998: }
  5114                           ;standbyMode.c: 1999: }
  5115                           ;standbyMode.c: 2000: return 0;
  5116                           
  5117                           ;standbyMode.c: 1997: break;
  5118  00FBEA  0E00               	movlw	0
  5119  00FBEC  6E5F               	movwf	?_standbyMode+1,c
  5120  00FBEE  0E00               	movlw	0
  5121  00FBF0  6E5E               	movwf	?_standbyMode,c
  5122                           
  5123                           ;standbyMode.c: 2001: }
  5124  00FBF2  0012               	return	
  5125  00FBF4                     l1230:
  5126                           
  5127                           ;standbyMode.c: 2003: else {
  5128                           ;standbyMode.c: 2004: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5129  00FBF4  0E01               	movlw	1
  5130  00FBF6  ECD3  F054         	call	_lcdInst
  5131  00FBFA  0EC3               	movlw	195
  5132  00FBFC  6E60               	movwf	??_standbyMode& (0+255),c
  5133  00FBFE  0ECD               	movlw	205
  5134  00FC00                     u13917:
  5135  00FC00  2EE8               	decfsz	wreg,f,c
  5136  00FC02  D7FE               	bra	u13917
  5137  00FC04  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5138  00FC06  D7FC               	bra	u13917
  5139  00FC08  F000               	nop	
  5140                           
  5141                           ;standbyMode.c: 2005: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5142  00FC0A  0E0C               	movlw	12
  5143  00FC0C  ECD3  F054         	call	_lcdInst
  5144                           
  5145                           ;standbyMode.c: 2006: printf("Invalid key!");
  5146  00FC10  0EB7               	movlw	low STR_143
  5147  00FC12  6E0D               	movwf	printf@f,c
  5148  00FC14  0EFE               	movlw	high STR_143
  5149  00FC16  6E0E               	movwf	printf@f+1,c
  5150  00FC18  EC9A  F064         	call	_printf	;wreg free
  5151                           
  5152                           ;standbyMode.c: 2007: lcdInst(0xC0);;
  5153  00FC1C  0EC0               	movlw	192
  5154  00FC1E  ECD3  F054         	call	_lcdInst
  5155                           
  5156                           ;standbyMode.c: 2008: printf("Rebooting.");
  5157  00FC22  0E01               	movlw	low STR_142
  5158  00FC24  6E0D               	movwf	printf@f,c
  5159  00FC26  0EFF               	movlw	high STR_142
  5160  00FC28  6E0E               	movwf	printf@f+1,c
  5161  00FC2A  EC9A  F064         	call	_printf	;wreg free
  5162                           
  5163                           ;standbyMode.c: 2009: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5164  00FC2E  0E66               	movlw	102
  5165  00FC30  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  5166  00FC32  0E76               	movlw	118
  5167  00FC34  6E60               	movwf	??_standbyMode& (0+255),c
  5168  00FC36  0EC1               	movlw	193
  5169  00FC38                     u13927:
  5170  00FC38  2EE8               	decfsz	wreg,f,c
  5171  00FC3A  D7FE               	bra	u13927
  5172  00FC3C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  5173  00FC3E  D7FC               	bra	u13927
  5174  00FC40  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  5175  00FC42  D7FA               	bra	u13927
  5176  00FC44  F000               	nop	
  5177                           
  5178                           ;standbyMode.c: 2010: return 0;
  5179  00FC46  0E00               	movlw	0
  5180  00FC48  6E5F               	movwf	?_standbyMode+1,c
  5181  00FC4A  0E00               	movlw	0
  5182  00FC4C  6E5E               	movwf	?_standbyMode,c
  5183  00FC4E  0012               	return	
  5184  00FC50                     __end_of_standbyMode:
  5185                           	opt stack 0
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           postinc0	equ	0xFEE
  5191                           wreg	equ	0xFE8
  5192                           postdec1	equ	0xFE5
  5193                           plusw1	equ	0xFE3
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           plusw2	equ	0xFDB
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _which_drawer *****************
  5204 ;; Defined at:
  5205 ;;		line 1539 in file "standbyMode.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  rand            2   43[COMRAM] unsigned int 
  5210 ;;  keypress        1   51[COMRAM] unsigned char 
  5211 ;;  count           2   49[COMRAM] unsigned int 
  5212 ;;  backCheck       2   47[COMRAM] unsigned int 
  5213 ;;  sum             2   45[COMRAM] unsigned int 
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  2   40[COMRAM] unsigned int 
  5216 ;; Registers used:
  5217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;Total ram usage:       12 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    3
  5230 ;; This function calls:
  5231 ;;		_decode_drawer
  5232 ;;		_lcdInst
  5233 ;;		_printf
  5234 ;;		_putch
  5235 ;; This function is called by:
  5236 ;;		_standbyMode
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text2
  5241  00BE2C                     __ptext2:
  5242                           	opt stack 0
  5243  00BE2C                     _which_drawer:
  5244                           	opt stack 26
  5245                           
  5246                           ;standbyMode.c: 1540: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5247                           
  5248                           ;incstack = 0
  5249  00BE2C  0E0C               	movlw	12
  5250  00BE2E  ECD3  F054         	call	_lcdInst
  5251                           
  5252                           ;standbyMode.c: 1541: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5253  00BE32  0E01               	movlw	1
  5254  00BE34  ECD3  F054         	call	_lcdInst
  5255  00BE38  0EC3               	movlw	195
  5256  00BE3A  6E2B               	movwf	??_which_drawer& (0+255),c
  5257  00BE3C  0ECD               	movlw	205
  5258  00BE3E                     u13937:
  5259  00BE3E  2EE8               	decfsz	wreg,f,c
  5260  00BE40  D7FE               	bra	u13937
  5261  00BE42  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5262  00BE44  D7FC               	bra	u13937
  5263  00BE46  F000               	nop	
  5264                           
  5265                           ;standbyMode.c: 1542: printf("Drawer number:");
  5266  00BE48  0EDB               	movlw	low STR_107
  5267  00BE4A  6E0D               	movwf	printf@f,c
  5268  00BE4C  0EFD               	movlw	high STR_107
  5269  00BE4E  6E0E               	movwf	printf@f+1,c
  5270  00BE50  EC9A  F064         	call	_printf	;wreg free
  5271                           
  5272                           ;standbyMode.c: 1543: lcdInst(0xC0);;
  5273  00BE54  0EC0               	movlw	192
  5274  00BE56  ECD3  F054         	call	_lcdInst
  5275                           
  5276                           ;standbyMode.c: 1545: unsigned int count = 0;
  5277  00BE5A  0E00               	movlw	0
  5278  00BE5C  6E33               	movwf	which_drawer@count+1,c
  5279  00BE5E  0E00               	movlw	0
  5280  00BE60  6E32               	movwf	which_drawer@count,c
  5281                           
  5282                           ;standbyMode.c: 1546: unsigned int sum = 0;
  5283  00BE62  0E00               	movlw	0
  5284  00BE64  6E2F               	movwf	which_drawer@sum+1,c
  5285  00BE66  0E00               	movlw	0
  5286  00BE68  6E2E               	movwf	which_drawer@sum,c
  5287                           
  5288                           ;standbyMode.c: 1547: unsigned int backCheck = 0;
  5289  00BE6A  0E00               	movlw	0
  5290  00BE6C  6E31               	movwf	which_drawer@backCheck+1,c
  5291  00BE6E  0E00               	movlw	0
  5292  00BE70  6E30               	movwf	which_drawer@backCheck,c
  5293  00BE72                     
  5294                           ;standbyMode.c: 1550: while(PORTBbits.RB1 == 0){ continue; }
  5295  00BE72  A281               	btfss	3969,1,c	;volatile
  5296  00BE74  D7FE               	goto	l1111
  5297                           
  5298                           ;standbyMode.c: 1551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5299  00BE76  3881               	swapf	3969,w,c	;volatile
  5300  00BE78  0B0F               	andlw	15
  5301  00BE7A  0B0F               	andlw	15
  5302  00BE7C  6E34               	movwf	which_drawer@keypress,c
  5303  00BE7E  B281               	btfsc	3969,1,c	;volatile
  5304  00BE80  D7FE               	goto	l1116
  5305                           
  5306                           ;standbyMode.c: 1554: if(keypress == 15){
  5307  00BE82  0E0F               	movlw	15
  5308  00BE84  1834               	xorwf	which_drawer@keypress,w,c
  5309  00BE86  B4D8               	btfsc	status,2,c
  5310  00BE88  D0C3               	goto	l1119
  5311                           
  5312                           ;standbyMode.c: 1557: else if (keypress == 14){
  5313                           
  5314                           ;standbyMode.c: 1556: }
  5315                           
  5316                           ;standbyMode.c: 1555: break;
  5317  00BE8A  0E0E               	movlw	14
  5318  00BE8C  1834               	xorwf	which_drawer@keypress,w,c
  5319  00BE8E  A4D8               	btfss	status,2,c
  5320  00BE90  D005               	goto	l1121
  5321                           
  5322                           ;standbyMode.c: 1558: backCheck = 100;
  5323  00BE92  0E00               	movlw	0
  5324  00BE94  6E31               	movwf	which_drawer@backCheck+1,c
  5325  00BE96  0E64               	movlw	100
  5326  00BE98  6E30               	movwf	which_drawer@backCheck,c
  5327                           
  5328                           ;standbyMode.c: 1559: break;
  5329  00BE9A  D0BA               	goto	l1119
  5330  00BE9C                     l1121:
  5331                           
  5332                           ;standbyMode.c: 1561: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  5333  00BE9C  5034               	movf	which_drawer@keypress,w,c
  5334  00BE9E  B4D8               	btfsc	status,2,c
  5335  00BEA0  D023               	goto	u11780
  5336  00BEA2  0434               	decf	which_drawer@keypress,w,c
  5337  00BEA4  B4D8               	btfsc	status,2,c
  5338  00BEA6  D020               	goto	u11780
  5339  00BEA8  0E02               	movlw	2
  5340  00BEAA  1834               	xorwf	which_drawer@keypress,w,c
  5341  00BEAC  B4D8               	btfsc	status,2,c
  5342  00BEAE  D01C               	goto	u11780
  5343  00BEB0  0E04               	movlw	4
  5344  00BEB2  1834               	xorwf	which_drawer@keypress,w,c
  5345  00BEB4  B4D8               	btfsc	status,2,c
  5346  00BEB6  D018               	goto	u11780
  5347  00BEB8  0E05               	movlw	5
  5348  00BEBA  1834               	xorwf	which_drawer@keypress,w,c
  5349  00BEBC  B4D8               	btfsc	status,2,c
  5350  00BEBE  D014               	goto	u11780
  5351  00BEC0  0E06               	movlw	6
  5352  00BEC2  1834               	xorwf	which_drawer@keypress,w,c
  5353  00BEC4  B4D8               	btfsc	status,2,c
  5354  00BEC6  D010               	goto	u11780
  5355  00BEC8  0E08               	movlw	8
  5356  00BECA  1834               	xorwf	which_drawer@keypress,w,c
  5357  00BECC  B4D8               	btfsc	status,2,c
  5358  00BECE  D00C               	goto	u11780
  5359  00BED0  0E09               	movlw	9
  5360  00BED2  1834               	xorwf	which_drawer@keypress,w,c
  5361  00BED4  B4D8               	btfsc	status,2,c
  5362  00BED6  D008               	goto	u11780
  5363  00BED8  0E0A               	movlw	10
  5364  00BEDA  1834               	xorwf	which_drawer@keypress,w,c
  5365  00BEDC  B4D8               	btfsc	status,2,c
  5366  00BEDE  D004               	goto	u11780
  5367  00BEE0  0E0D               	movlw	13
  5368  00BEE2  1834               	xorwf	which_drawer@keypress,w,c
  5369  00BEE4  A4D8               	btfss	status,2,c
  5370  00BEE6  D073               	goto	l1123
  5371  00BEE8                     u11780:
  5372                           
  5373                           ;standbyMode.c: 1562: if (count == 0){
  5374  00BEE8  5032               	movf	which_drawer@count,w,c
  5375  00BEEA  1033               	iorwf	which_drawer@count+1,w,c
  5376  00BEEC  A4D8               	btfss	status,2,c
  5377  00BEEE  D04C               	goto	l1126
  5378                           
  5379                           ;standbyMode.c: 1563: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  5380  00BEF0  0434               	decf	which_drawer@keypress,w,c
  5381  00BEF2  B4D8               	btfsc	status,2,c
  5382  00BEF4  D01C               	goto	u11870
  5383  00BEF6  0E02               	movlw	2
  5384  00BEF8  1834               	xorwf	which_drawer@keypress,w,c
  5385  00BEFA  B4D8               	btfsc	status,2,c
  5386  00BEFC  D018               	goto	u11870
  5387  00BEFE  0E04               	movlw	4
  5388  00BF00  1834               	xorwf	which_drawer@keypress,w,c
  5389  00BF02  B4D8               	btfsc	status,2,c
  5390  00BF04  D014               	goto	u11870
  5391  00BF06  0E05               	movlw	5
  5392  00BF08  1834               	xorwf	which_drawer@keypress,w,c
  5393  00BF0A  B4D8               	btfsc	status,2,c
  5394  00BF0C  D010               	goto	u11870
  5395  00BF0E  0E06               	movlw	6
  5396  00BF10  1834               	xorwf	which_drawer@keypress,w,c
  5397  00BF12  B4D8               	btfsc	status,2,c
  5398  00BF14  D00C               	goto	u11870
  5399  00BF16  0E08               	movlw	8
  5400  00BF18  1834               	xorwf	which_drawer@keypress,w,c
  5401  00BF1A  B4D8               	btfsc	status,2,c
  5402  00BF1C  D008               	goto	u11870
  5403  00BF1E  0E09               	movlw	9
  5404  00BF20  1834               	xorwf	which_drawer@keypress,w,c
  5405  00BF22  B4D8               	btfsc	status,2,c
  5406  00BF24  D004               	goto	u11870
  5407  00BF26  0E0A               	movlw	10
  5408  00BF28  1834               	xorwf	which_drawer@keypress,w,c
  5409  00BF2A  A4D8               	btfss	status,2,c
  5410  00BF2C  D014               	goto	l1127
  5411  00BF2E                     u11870:
  5412                           
  5413                           ;standbyMode.c: 1564: count += 2;
  5414  00BF2E  0E02               	movlw	2
  5415  00BF30  2632               	addwf	which_drawer@count,f,c
  5416  00BF32  0E00               	movlw	0
  5417  00BF34  2233               	addwfc	which_drawer@count+1,f,c
  5418                           
  5419                           ;standbyMode.c: 1565: putch(input[keypress]);
  5420  00BF36  5034               	movf	which_drawer@keypress,w,c
  5421  00BF38  0D01               	mullw	1
  5422  00BF3A  0E62               	movlw	low _input
  5423  00BF3C  24F3               	addwf	prodl,w,c
  5424  00BF3E  6EF6               	movwf	tblptrl,c
  5425  00BF40  0EFC               	movlw	high _input
  5426  00BF42  20F4               	addwfc	prodh,w,c
  5427  00BF44  6EF7               	movwf	tblptrh,c
  5428  00BF46                     	if	1	;There are 3 active tblptr bytes
  5429  00BF46  6AF8               	clrf	tblptru,c
  5430  00BF48  0E00               	movlw	low (__mediumconst shr (0+16))
  5431  00BF4A  22F8               	addwfc	tblptru,f,c
  5432  00BF4C                     	endif
  5433  00BF4C  0008               	tblrd		*
  5434  00BF4E  50F5               	movf	tablat,w,c
  5435  00BF50  ECE7  F054         	call	_putch
  5436  00BF54  D03A               	goto	l1137
  5437  00BF56                     l1127:
  5438                           
  5439                           ;standbyMode.c: 1568: else if (keypress == 0){
  5440  00BF56  5034               	movf	which_drawer@keypress,w,c
  5441  00BF58  A4D8               	btfss	status,2,c
  5442  00BF5A  D78B               	goto	l1111
  5443                           
  5444                           ;standbyMode.c: 1569: putch(input[keypress]);
  5445  00BF5C  5034               	movf	which_drawer@keypress,w,c
  5446  00BF5E  0D01               	mullw	1
  5447  00BF60  0E62               	movlw	low _input
  5448  00BF62  24F3               	addwf	prodl,w,c
  5449  00BF64  6EF6               	movwf	tblptrl,c
  5450  00BF66  0EFC               	movlw	high _input
  5451  00BF68  20F4               	addwfc	prodh,w,c
  5452  00BF6A  6EF7               	movwf	tblptrh,c
  5453  00BF6C                     	if	1	;There are 3 active tblptr bytes
  5454  00BF6C  6AF8               	clrf	tblptru,c
  5455  00BF6E  0E00               	movlw	low (__mediumconst shr (0+16))
  5456  00BF70  22F8               	addwfc	tblptru,f,c
  5457  00BF72                     	endif
  5458  00BF72  0008               	tblrd		*
  5459  00BF74  50F5               	movf	tablat,w,c
  5460  00BF76  ECE7  F054         	call	_putch
  5461                           
  5462                           ;standbyMode.c: 1570: count += 1;
  5463  00BF7A  4A32               	infsnz	which_drawer@count,f,c
  5464  00BF7C  2A33               	incf	which_drawer@count+1,f,c
  5465  00BF7E  D023               	goto	u11920
  5466  00BF80                     L4:
  5467  00BF80  262E               	addwf	which_drawer@sum,f,c
  5468  00BF82  0E00               	movlw	0
  5469  00BF84  222F               	addwfc	which_drawer@sum+1,f,c
  5470                           
  5471                           ;standbyMode.c: 1572: }
  5472                           ;standbyMode.c: 1573: }
  5473  00BF86  D775               	goto	l1111
  5474  00BF88                     l1126:
  5475                           
  5476                           ;standbyMode.c: 1574: else if (count == 1){
  5477  00BF88  0432               	decf	which_drawer@count,w,c
  5478  00BF8A  1033               	iorwf	which_drawer@count+1,w,c
  5479  00BF8C  A4D8               	btfss	status,2,c
  5480  00BF8E  D771               	goto	l1111
  5481                           
  5482                           ;standbyMode.c: 1575: if (keypress < 8 || keypress == 13){
  5483  00BF90  0E07               	movlw	7
  5484  00BF92  6434               	cpfsgt	which_drawer@keypress,c
  5485  00BF94  D004               	goto	u11910
  5486  00BF96  0E0D               	movlw	13
  5487  00BF98  1834               	xorwf	which_drawer@keypress,w,c
  5488  00BF9A  A4D8               	btfss	status,2,c
  5489  00BF9C  D76A               	goto	l1111
  5490  00BF9E                     u11910:
  5491                           
  5492                           ;standbyMode.c: 1576: putch(input[keypress]);
  5493  00BF9E  5034               	movf	which_drawer@keypress,w,c
  5494  00BFA0  0D01               	mullw	1
  5495  00BFA2  0E62               	movlw	low _input
  5496  00BFA4  24F3               	addwf	prodl,w,c
  5497  00BFA6  6EF6               	movwf	tblptrl,c
  5498  00BFA8  0EFC               	movlw	high _input
  5499  00BFAA  20F4               	addwfc	prodh,w,c
  5500  00BFAC  6EF7               	movwf	tblptrh,c
  5501  00BFAE                     	if	1	;There are 3 active tblptr bytes
  5502  00BFAE  6AF8               	clrf	tblptru,c
  5503  00BFB0  0E00               	movlw	low (__mediumconst shr (0+16))
  5504  00BFB2  22F8               	addwfc	tblptru,f,c
  5505  00BFB4                     	endif
  5506  00BFB4  0008               	tblrd		*
  5507  00BFB6  50F5               	movf	tablat,w,c
  5508  00BFB8  ECE7  F054         	call	_putch
  5509                           
  5510                           ;standbyMode.c: 1577: count += 1;
  5511  00BFBC  4A32               	infsnz	which_drawer@count,f,c
  5512  00BFBE  2A33               	incf	which_drawer@count+1,f,c
  5513                           
  5514                           ;standbyMode.c: 1578: if(keypress == 0){
  5515  00BFC0  5034               	movf	which_drawer@keypress,w,c
  5516  00BFC2  A4D8               	btfss	status,2,c
  5517  00BFC4  D002               	goto	l1137
  5518  00BFC6                     u11920:
  5519                           
  5520                           ;standbyMode.c: 1579: sum += 20;
  5521  00BFC6  0E14               	movlw	20
  5522  00BFC8  D7DB               	goto	L4
  5523  00BFCA                     l1137:
  5524                           
  5525                           ;standbyMode.c: 1581: else {
  5526                           ;standbyMode.c: 1582: sum += keypress;
  5527  00BFCA  5034               	movf	which_drawer@keypress,w,c
  5528  00BFCC  D7D9               	goto	L4
  5529  00BFCE                     l1123:
  5530                           
  5531                           ;standbyMode.c: 1587: else if (keypress == 12){
  5532  00BFCE  0E0C               	movlw	12
  5533  00BFD0  1834               	xorwf	which_drawer@keypress,w,c
  5534  00BFD2  A4D8               	btfss	status,2,c
  5535  00BFD4  D74E               	goto	l1111
  5536                           
  5537                           ;standbyMode.c: 1588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5538  00BFD6  0E01               	movlw	1
  5539  00BFD8  ECD3  F054         	call	_lcdInst
  5540  00BFDC  0EC3               	movlw	195
  5541  00BFDE  6E2B               	movwf	??_which_drawer& (0+255),c
  5542  00BFE0  0ECD               	movlw	205
  5543  00BFE2                     u13947:
  5544  00BFE2  2EE8               	decfsz	wreg,f,c
  5545  00BFE4  D7FE               	bra	u13947
  5546  00BFE6  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5547  00BFE8  D7FC               	bra	u13947
  5548  00BFEA  F000               	nop	
  5549                           
  5550                           ;standbyMode.c: 1589: printf("Drawer number:");
  5551  00BFEC  0EDB               	movlw	low STR_107
  5552  00BFEE  6E0D               	movwf	printf@f,c
  5553  00BFF0  0EFD               	movlw	high STR_107
  5554  00BFF2  6E0E               	movwf	printf@f+1,c
  5555  00BFF4  EC9A  F064         	call	_printf	;wreg free
  5556                           
  5557                           ;standbyMode.c: 1590: lcdInst(0xC0);;
  5558  00BFF8  0EC0               	movlw	192
  5559  00BFFA  ECD3  F054         	call	_lcdInst
  5560                           
  5561                           ;standbyMode.c: 1591: count = 0;
  5562  00BFFE  0E00               	movlw	0
  5563  00C000  6E33               	movwf	which_drawer@count+1,c
  5564  00C002  0E00               	movlw	0
  5565  00C004  6E32               	movwf	which_drawer@count,c
  5566                           
  5567                           ;standbyMode.c: 1592: sum = 0;
  5568  00C006  0E00               	movlw	0
  5569  00C008  6E2F               	movwf	which_drawer@sum+1,c
  5570  00C00A  0E00               	movlw	0
  5571  00C00C  6E2E               	movwf	which_drawer@sum,c
  5572  00C00E  D731               	goto	l1111
  5573  00C010                     l1119:
  5574                           
  5575                           ;standbyMode.c: 1593: }
  5576                           ;standbyMode.c: 1594: }
  5577                           ;standbyMode.c: 1596: if (backCheck == 100){
  5578  00C010  0E64               	movlw	100
  5579  00C012  1830               	xorwf	which_drawer@backCheck,w,c
  5580  00C014  1031               	iorwf	which_drawer@backCheck+1,w,c
  5581  00C016  A4D8               	btfss	status,2,c
  5582  00C018  D005               	goto	l1142
  5583                           
  5584                           ;standbyMode.c: 1597: return backCheck;
  5585  00C01A  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5586  00C01E  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5587                           
  5588                           ;standbyMode.c: 1598: }
  5589  00C022  0012               	return	
  5590  00C024                     l1142:
  5591                           
  5592                           ;standbyMode.c: 1599: else{
  5593                           ;standbyMode.c: 1600: unsigned int rand = decode_drawer(sum);
  5594  00C024  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5595  00C028  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5596  00C02C  EC7A  F058         	call	_decode_drawer	;wreg free
  5597  00C030  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5598  00C034  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5599                           
  5600                           ;standbyMode.c: 1601: return rand;
  5601  00C038  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5602  00C03C  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5603  00C040  0012               	return	
  5604  00C042                     __end_of_which_drawer:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           postdec1	equ	0xFE5
  5615                           plusw1	equ	0xFE3
  5616                           fsr1l	equ	0xFE1
  5617                           indf2	equ	0xFDF
  5618                           postinc2	equ	0xFDE
  5619                           postdec2	equ	0xFDD
  5620                           plusw2	equ	0xFDB
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _decode_drawer *****************
  5626 ;; Defined at:
  5627 ;;		line 1461 in file "standbyMode.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  drawer          2    0[COMRAM] unsigned int 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  returnValue     2    4[COMRAM] unsigned int 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  2    0[COMRAM] unsigned int 
  5634 ;; Registers used:
  5635 ;;		wreg, status,2, status,0
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:        6 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; This function calls:
  5648 ;;		Nothing
  5649 ;; This function is called by:
  5650 ;;		_which_drawer
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654                           	psect	text3
  5655  00B0F4                     __ptext3:
  5656                           	opt stack 0
  5657  00B0F4                     _decode_drawer:
  5658                           	opt stack 28
  5659                           
  5660                           ;standbyMode.c: 1462: unsigned int returnValue;
  5661                           ;standbyMode.c: 1464: switch(drawer){
  5662                           
  5663                           ;incstack = 0
  5664  00B0F4  D03A               	goto	l1092
  5665  00B0F6                     
  5666                           ;standbyMode.c: 1467: returnValue = 1;
  5667  00B0F6  0E00               	movlw	0
  5668  00B0F8  6E06               	movwf	decode_drawer@returnValue+1,c
  5669  00B0FA  0E01               	movlw	1
  5670  00B0FC  D02F               	goto	L16
  5671  00B0FE                     
  5672                           ;standbyMode.c: 1472: returnValue = 2;
  5673  00B0FE  0E00               	movlw	0
  5674  00B100  6E06               	movwf	decode_drawer@returnValue+1,c
  5675  00B102  0E02               	movlw	2
  5676  00B104  D02B               	goto	L16
  5677  00B106                     
  5678                           ;standbyMode.c: 1477: returnValue = 3;
  5679  00B106  0E00               	movlw	0
  5680  00B108  6E06               	movwf	decode_drawer@returnValue+1,c
  5681  00B10A  0E03               	movlw	3
  5682  00B10C  D027               	goto	L16
  5683  00B10E                     
  5684                           ;standbyMode.c: 1482: returnValue = 7;
  5685  00B10E  0E00               	movlw	0
  5686  00B110  6E06               	movwf	decode_drawer@returnValue+1,c
  5687  00B112  0E07               	movlw	7
  5688  00B114  D023               	goto	L16
  5689  00B116                     
  5690                           ;standbyMode.c: 1487: returnValue = 8;
  5691  00B116  0E00               	movlw	0
  5692  00B118  6E06               	movwf	decode_drawer@returnValue+1,c
  5693  00B11A  0E08               	movlw	8
  5694  00B11C  D01F               	goto	L16
  5695  00B11E                     
  5696                           ;standbyMode.c: 1492: returnValue = 9;
  5697  00B11E  0E00               	movlw	0
  5698  00B120  6E06               	movwf	decode_drawer@returnValue+1,c
  5699  00B122  0E09               	movlw	9
  5700  00B124  D01B               	goto	L16
  5701  00B126                     
  5702                           ;standbyMode.c: 1497: returnValue = 10;
  5703  00B126  0E00               	movlw	0
  5704  00B128  6E06               	movwf	decode_drawer@returnValue+1,c
  5705  00B12A  0E0A               	movlw	10
  5706  00B12C  D017               	goto	L16
  5707  00B12E                     
  5708                           ;standbyMode.c: 1502: returnValue = 11;
  5709  00B12E  0E00               	movlw	0
  5710  00B130  6E06               	movwf	decode_drawer@returnValue+1,c
  5711  00B132  0E0B               	movlw	11
  5712  00B134  D013               	goto	L16
  5713  00B136                     
  5714                           ;standbyMode.c: 1507: returnValue = 12;
  5715  00B136  0E00               	movlw	0
  5716  00B138  6E06               	movwf	decode_drawer@returnValue+1,c
  5717  00B13A  0E0C               	movlw	12
  5718  00B13C  D00F               	goto	L16
  5719  00B13E                     
  5720                           ;standbyMode.c: 1512: returnValue = 13;
  5721  00B13E  0E00               	movlw	0
  5722  00B140  6E06               	movwf	decode_drawer@returnValue+1,c
  5723  00B142  0E0D               	movlw	13
  5724  00B144  D00B               	goto	L16
  5725  00B146                     
  5726                           ;standbyMode.c: 1517: returnValue = 14;
  5727  00B146  0E00               	movlw	0
  5728  00B148  6E06               	movwf	decode_drawer@returnValue+1,c
  5729  00B14A  0E0E               	movlw	14
  5730  00B14C  D007               	goto	L16
  5731  00B14E                     
  5732                           ;standbyMode.c: 1522: returnValue = 15;
  5733  00B14E  0E00               	movlw	0
  5734  00B150  6E06               	movwf	decode_drawer@returnValue+1,c
  5735  00B152  0E0F               	movlw	15
  5736  00B154  D003               	goto	L16
  5737  00B156                     
  5738                           ;standbyMode.c: 1527: returnValue = 16;
  5739  00B156  0E00               	movlw	0
  5740  00B158  6E06               	movwf	decode_drawer@returnValue+1,c
  5741  00B15A  0E10               	movlw	16
  5742  00B15C                     L16:
  5743  00B15C  6E05               	movwf	decode_drawer@returnValue,c
  5744                           
  5745                           ;standbyMode.c: 1528: break;
  5746  00B15E  D036               	goto	l1094
  5747  00B160                     l1107:
  5748                           
  5749                           ;standbyMode.c: 1531: returnValue = drawer;
  5750  00B160  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  5751  00B164  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  5752                           
  5753                           ;standbyMode.c: 1533: }
  5754                           
  5755                           ;standbyMode.c: 1532: break;
  5756  00B168  D031               	goto	l1094
  5757  00B16A                     l1092:
  5758  00B16A  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  5759  00B16E  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  5760                           
  5761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5762                           ; Switch size 1, requested type "space"
  5763                           ; Number of cases is 1, Range of values is 0 to 0
  5764                           ; switch strategies available:
  5765                           ; Name         Instructions Cycles
  5766                           ; simple_byte            4     3 (average)
  5767                           ;	Chosen strategy is simple_byte
  5768  00B172  5004               	movf	??_decode_drawer+1,w,c
  5769  00B174  0A00               	xorlw	0	; case 0
  5770  00B176  A4D8               	btfss	status,2,c
  5771  00B178  D7F3               	goto	l1107
  5772                           
  5773                           ; Switch size 1, requested type "space"
  5774                           ; Number of cases is 13, Range of values is 1 to 40
  5775                           ; switch strategies available:
  5776                           ; Name         Instructions Cycles
  5777                           ; simple_byte           40    21 (average)
  5778                           ;	Chosen strategy is simple_byte
  5779  00B17A  5003               	movf	??_decode_drawer,w,c
  5780  00B17C  0A01               	xorlw	1	; case 1
  5781  00B17E  B4D8               	btfsc	status,2,c
  5782  00B180  D7BE               	goto	l1095
  5783  00B182  0A03               	xorlw	3	; case 2
  5784  00B184  B4D8               	btfsc	status,2,c
  5785  00B186  D7BF               	goto	l1096
  5786  00B188  0A0A               	xorlw	10	; case 8
  5787  00B18A  B4D8               	btfsc	status,2,c
  5788  00B18C  D7C0               	goto	l1097
  5789  00B18E  0A01               	xorlw	1	; case 9
  5790  00B190  B4D8               	btfsc	status,2,c
  5791  00B192  D7C1               	goto	l1098
  5792  00B194  0A03               	xorlw	3	; case 10
  5793  00B196  B4D8               	btfsc	status,2,c
  5794  00B198  D7C2               	goto	l1099
  5795  00B19A  0A1E               	xorlw	30	; case 20
  5796  00B19C  B4D8               	btfsc	status,2,c
  5797  00B19E  D7AB               	goto	l1093
  5798  00B1A0  0A01               	xorlw	1	; case 21
  5799  00B1A2  B4D8               	btfsc	status,2,c
  5800  00B1A4  D7C8               	goto	l1102
  5801  00B1A6  0A03               	xorlw	3	; case 22
  5802  00B1A8  B4D8               	btfsc	status,2,c
  5803  00B1AA  D7C9               	goto	l1103
  5804  00B1AC  0A0E               	xorlw	14	; case 24
  5805  00B1AE  B4D8               	btfsc	status,2,c
  5806  00B1B0  D7CA               	goto	l1104
  5807  00B1B2  0A01               	xorlw	1	; case 25
  5808  00B1B4  B4D8               	btfsc	status,2,c
  5809  00B1B6  D7CB               	goto	l1105
  5810  00B1B8  0A03               	xorlw	3	; case 26
  5811  00B1BA  B4D8               	btfsc	status,2,c
  5812  00B1BC  D7CC               	goto	l1106
  5813  00B1BE  0A3B               	xorlw	59	; case 33
  5814  00B1C0  B4D8               	btfsc	status,2,c
  5815  00B1C2  D7B1               	goto	l1100
  5816  00B1C4  0A09               	xorlw	9	; case 40
  5817  00B1C6  B4D8               	btfsc	status,2,c
  5818  00B1C8  D7B2               	goto	l1101
  5819  00B1CA  D7CA               	goto	l1107
  5820  00B1CC                     l1094:
  5821                           
  5822                           ;standbyMode.c: 1534: return returnValue;
  5823  00B1CC  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  5824  00B1D0  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  5825  00B1D4  0012               	return		;funcret
  5826  00B1D6                     __end_of_decode_drawer:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           postinc0	equ	0xFEE
  5835                           wreg	equ	0xFE8
  5836                           postdec1	equ	0xFE5
  5837                           plusw1	equ	0xFE3
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           plusw2	equ	0xFDB
  5843                           fsr2h	equ	0xFDA
  5844                           fsr2l	equ	0xFD9
  5845                           status	equ	0xFD8
  5846                           
  5847 ;; *************** function _viewLogs *****************
  5848 ;; Defined at:
  5849 ;;		line 753 in file "standbyMode.c"
  5850 ;; Parameters:    Size  Location     Type
  5851 ;;		None
  5852 ;; Auto vars:     Size  Location     Type
  5853 ;;  keypress2       1   92[COMRAM] unsigned char 
  5854 ;;  logView         2   89[COMRAM] unsigned int 
  5855 ;;  returnVal       2   87[COMRAM] unsigned int 
  5856 ;;  checkLog        2   85[COMRAM] unsigned int 
  5857 ;;  logNumber       1   91[COMRAM] unsigned char 
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  2   81[COMRAM] unsigned int 
  5860 ;; Registers used:
  5861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5867 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;Total ram usage:       12 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    4
  5874 ;; This function calls:
  5875 ;;		_displayLogs
  5876 ;;		_lcdInst
  5877 ;;		_printf
  5878 ;;		_putch
  5879 ;;		_readEEPROM
  5880 ;;		_verifyKeypress
  5881 ;; This function is called by:
  5882 ;;		_standbyMode
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text4
  5887  00C298                     __ptext4:
  5888                           	opt stack 0
  5889  00C298                     _viewLogs:
  5890                           	opt stack 25
  5891                           
  5892                           ;standbyMode.c: 755: unsigned char logNumber = readEEPROM(250);
  5893                           
  5894                           ;incstack = 0
  5895  00C298  0EFA               	movlw	250
  5896  00C29A  ECDD  F054         	call	_readEEPROM
  5897  00C29E  6E5C               	movwf	viewLogs@logNumber,c
  5898                           
  5899                           ;standbyMode.c: 756: unsigned int logView = 0;
  5900  00C2A0  0E00               	movlw	0
  5901  00C2A2  6E5B               	movwf	viewLogs@logView+1,c
  5902  00C2A4  0E00               	movlw	0
  5903  00C2A6  6E5A               	movwf	viewLogs@logView,c
  5904                           
  5905                           ;standbyMode.c: 757: unsigned int checkLog = 0;
  5906  00C2A8  0E00               	movlw	0
  5907  00C2AA  6E57               	movwf	viewLogs@checkLog+1,c
  5908  00C2AC  0E00               	movlw	0
  5909  00C2AE  6E56               	movwf	viewLogs@checkLog,c
  5910                           
  5911                           ;standbyMode.c: 758: unsigned int returnVal = 0;
  5912  00C2B0  0E00               	movlw	0
  5913  00C2B2  6E59               	movwf	viewLogs@returnVal+1,c
  5914  00C2B4  0E00               	movlw	0
  5915  00C2B6  6E58               	movwf	viewLogs@returnVal,c
  5916                           
  5917                           ;standbyMode.c: 760: if (logNumber == 0){
  5918  00C2B8  505C               	movf	viewLogs@logNumber,w,c
  5919  00C2BA  A4D8               	btfss	status,2,c
  5920  00C2BC  D02B               	goto	l833
  5921                           
  5922                           ;standbyMode.c: 761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5923  00C2BE  0E01               	movlw	1
  5924  00C2C0  ECD3  F054         	call	_lcdInst
  5925  00C2C4  0EC3               	movlw	195
  5926  00C2C6  6E54               	movwf	??_viewLogs& (0+255),c
  5927  00C2C8  0ECD               	movlw	205
  5928  00C2CA                     u13957:
  5929  00C2CA  2EE8               	decfsz	wreg,f,c
  5930  00C2CC  D7FE               	bra	u13957
  5931  00C2CE  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5932  00C2D0  D7FC               	bra	u13957
  5933  00C2D2  F000               	nop	
  5934                           
  5935                           ;standbyMode.c: 762: printf("No logs");
  5936  00C2D4  0E93               	movlw	low STR_70
  5937  00C2D6  6E0D               	movwf	printf@f,c
  5938  00C2D8  0EFF               	movlw	high STR_70
  5939  00C2DA  6E0E               	movwf	printf@f+1,c
  5940  00C2DC  EC9A  F064         	call	_printf	;wreg free
  5941                           
  5942                           ;standbyMode.c: 763: lcdInst(0xC0);;
  5943  00C2E0  0EC0               	movlw	192
  5944  00C2E2  ECD3  F054         	call	_lcdInst
  5945                           
  5946                           ;standbyMode.c: 764: printf("available.");
  5947  00C2E6  0EF6               	movlw	low STR_71
  5948  00C2E8  6E0D               	movwf	printf@f,c
  5949  00C2EA  0EFE               	movlw	high STR_71
  5950  00C2EC  6E0E               	movwf	printf@f+1,c
  5951  00C2EE  EC9A  F064         	call	_printf	;wreg free
  5952                           
  5953                           ;standbyMode.c: 765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5954  00C2F2  0E66               	movlw	102
  5955  00C2F4  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5956  00C2F6  0E76               	movlw	118
  5957  00C2F8  6E54               	movwf	??_viewLogs& (0+255),c
  5958  00C2FA  0EC1               	movlw	193
  5959  00C2FC                     u13967:
  5960  00C2FC  2EE8               	decfsz	wreg,f,c
  5961  00C2FE  D7FE               	bra	u13967
  5962  00C300  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5963  00C302  D7FC               	bra	u13967
  5964  00C304  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5965  00C306  D7FA               	bra	u13967
  5966  00C308  F000               	nop	
  5967                           
  5968                           ;standbyMode.c: 766: return 14;
  5969  00C30A  0E00               	movlw	0
  5970  00C30C  6E53               	movwf	?_viewLogs+1,c
  5971  00C30E  0E0E               	movlw	14
  5972  00C310  6E52               	movwf	?_viewLogs,c
  5973                           
  5974                           ;standbyMode.c: 767: }
  5975  00C312  0012               	return	
  5976  00C314                     l833:
  5977                           
  5978                           ;standbyMode.c: 768: else {
  5979                           ;standbyMode.c: 769: if (logNumber == 1){
  5980  00C314  045C               	decf	viewLogs@logNumber,w,c
  5981  00C316  A4D8               	btfss	status,2,c
  5982  00C318  D053               	goto	l836
  5983                           
  5984                           ;standbyMode.c: 770: logView = 1;
  5985  00C31A  0E00               	movlw	0
  5986  00C31C  6E5B               	movwf	viewLogs@logView+1,c
  5987  00C31E  0E01               	movlw	1
  5988  00C320  6E5A               	movwf	viewLogs@logView,c
  5989                           
  5990                           ;standbyMode.c: 772: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5991  00C322  0E01               	movlw	1
  5992  00C324  ECD3  F054         	call	_lcdInst
  5993  00C328  0EC3               	movlw	195
  5994  00C32A  6E54               	movwf	??_viewLogs& (0+255),c
  5995  00C32C  0ECD               	movlw	205
  5996  00C32E                     u13977:
  5997  00C32E  2EE8               	decfsz	wreg,f,c
  5998  00C330  D7FE               	bra	u13977
  5999  00C332  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6000  00C334  D7FC               	bra	u13977
  6001  00C336  F000               	nop	
  6002                           
  6003                           ;standbyMode.c: 773: printf("1 previous log");
  6004  00C338  0EF9               	movlw	low STR_72
  6005  00C33A  6E0D               	movwf	printf@f,c
  6006  00C33C  0EFD               	movlw	high STR_72
  6007  00C33E  6E0E               	movwf	printf@f+1,c
  6008  00C340  EC9A  F064         	call	_printf	;wreg free
  6009                           
  6010                           ;standbyMode.c: 774: lcdInst(0xC0);;
  6011  00C344  0EC0               	movlw	192
  6012  00C346  ECD3  F054         	call	_lcdInst
  6013                           
  6014                           ;standbyMode.c: 775: printf("available.");
  6015  00C34A  0EF6               	movlw	low STR_71
  6016  00C34C  6E0D               	movwf	printf@f,c
  6017  00C34E  0EFE               	movlw	high STR_71
  6018  00C350  6E0E               	movwf	printf@f+1,c
  6019  00C352  EC9A  F064         	call	_printf	;wreg free
  6020                           
  6021                           ;standbyMode.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6022  00C356  0E66               	movlw	102
  6023  00C358  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6024  00C35A  0E76               	movlw	118
  6025  00C35C  6E54               	movwf	??_viewLogs& (0+255),c
  6026  00C35E  0EC1               	movlw	193
  6027  00C360                     u13987:
  6028  00C360  2EE8               	decfsz	wreg,f,c
  6029  00C362  D7FE               	bra	u13987
  6030  00C364  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6031  00C366  D7FC               	bra	u13987
  6032  00C368  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6033  00C36A  D7FA               	bra	u13987
  6034  00C36C  F000               	nop	
  6035                           
  6036                           ;standbyMode.c: 778: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6037  00C36E  0E01               	movlw	1
  6038  00C370  ECD3  F054         	call	_lcdInst
  6039  00C374  0EC3               	movlw	195
  6040  00C376  6E54               	movwf	??_viewLogs& (0+255),c
  6041  00C378  0ECD               	movlw	205
  6042  00C37A                     u13997:
  6043  00C37A  2EE8               	decfsz	wreg,f,c
  6044  00C37C  D7FE               	bra	u13997
  6045  00C37E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6046  00C380  D7FC               	bra	u13997
  6047  00C382  F000               	nop	
  6048                           
  6049                           ;standbyMode.c: 779: printf("Press any key to");
  6050  00C384  0E0A               	movlw	low STR_74
  6051  00C386  6E0D               	movwf	printf@f,c
  6052  00C388  0EFD               	movlw	high STR_74
  6053  00C38A  6E0E               	movwf	printf@f+1,c
  6054  00C38C  EC9A  F064         	call	_printf	;wreg free
  6055                           
  6056                           ;standbyMode.c: 780: lcdInst(0xC0);;
  6057  00C390  0EC0               	movlw	192
  6058  00C392  ECD3  F054         	call	_lcdInst
  6059                           
  6060                           ;standbyMode.c: 781: printf("move forward.");
  6061  00C396  0E9B               	movlw	low STR_75
  6062  00C398  6E0D               	movwf	printf@f,c
  6063  00C39A  0EFE               	movlw	high STR_75
  6064  00C39C  6E0E               	movwf	printf@f+1,c
  6065  00C39E  EC9A  F064         	call	_printf	;wreg free
  6066                           
  6067                           ;standbyMode.c: 782: _delay((unsigned long)((500)*(40000000/4000.0)));
  6068  00C3A2  0E1A               	movlw	26
  6069  00C3A4  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6070  00C3A6  0E5E               	movlw	94
  6071  00C3A8  6E54               	movwf	??_viewLogs& (0+255),c
  6072  00C3AA  0E6E               	movlw	110
  6073  00C3AC                     u14007:
  6074  00C3AC  2EE8               	decfsz	wreg,f,c
  6075  00C3AE  D7FE               	bra	u14007
  6076  00C3B0  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6077  00C3B2  D7FC               	bra	u14007
  6078  00C3B4  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6079  00C3B6  D7FA               	bra	u14007
  6080  00C3B8  D000               	nop2	
  6081  00C3BA                     
  6082                           ;standbyMode.c: 785: continue;
  6083  00C3BA  B281               	btfsc	3969,1,c	;volatile
  6084  00C3BC  D0D4               	goto	u10230
  6085  00C3BE  D7FD               	goto	l838
  6086  00C3C0                     l836:
  6087                           
  6088                           ;standbyMode.c: 788: else {
  6089                           ;standbyMode.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6090  00C3C0  0E01               	movlw	1
  6091  00C3C2  ECD3  F054         	call	_lcdInst
  6092  00C3C6  0EC3               	movlw	195
  6093  00C3C8  6E54               	movwf	??_viewLogs& (0+255),c
  6094  00C3CA  0ECD               	movlw	205
  6095  00C3CC                     u14017:
  6096  00C3CC  2EE8               	decfsz	wreg,f,c
  6097  00C3CE  D7FE               	bra	u14017
  6098  00C3D0  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6099  00C3D2  D7FC               	bra	u14017
  6100  00C3D4  F000               	nop	
  6101                           
  6102                           ;standbyMode.c: 790: printf("%i previous logs", logNumber);
  6103  00C3D6  0E1B               	movlw	low STR_76
  6104  00C3D8  6E0D               	movwf	printf@f,c
  6105  00C3DA  0EFD               	movlw	high STR_76
  6106  00C3DC  6E0E               	movwf	printf@f+1,c
  6107  00C3DE  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  6108  00C3E2  6A10               	clrf	?_printf+3,c
  6109  00C3E4  EC9A  F064         	call	_printf	;wreg free
  6110                           
  6111                           ;standbyMode.c: 791: lcdInst(0xC0);;
  6112  00C3E8  0EC0               	movlw	192
  6113  00C3EA  ECD3  F054         	call	_lcdInst
  6114                           
  6115                           ;standbyMode.c: 792: printf("available.");
  6116  00C3EE  0EF6               	movlw	low STR_71
  6117  00C3F0  6E0D               	movwf	printf@f,c
  6118  00C3F2  0EFE               	movlw	high STR_71
  6119  00C3F4  6E0E               	movwf	printf@f+1,c
  6120  00C3F6  EC9A  F064         	call	_printf	;wreg free
  6121                           
  6122                           ;standbyMode.c: 793: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6123  00C3FA  0E66               	movlw	102
  6124  00C3FC  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6125  00C3FE  0E76               	movlw	118
  6126  00C400  6E54               	movwf	??_viewLogs& (0+255),c
  6127  00C402  0EC1               	movlw	193
  6128  00C404                     u14027:
  6129  00C404  2EE8               	decfsz	wreg,f,c
  6130  00C406  D7FE               	bra	u14027
  6131  00C408  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6132  00C40A  D7FC               	bra	u14027
  6133  00C40C  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6134  00C40E  D7FA               	bra	u14027
  6135  00C410  F000               	nop	
  6136                           
  6137                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6138  00C412  0E01               	movlw	1
  6139  00C414  ECD3  F054         	call	_lcdInst
  6140  00C418  0EC3               	movlw	195
  6141  00C41A  6E54               	movwf	??_viewLogs& (0+255),c
  6142  00C41C  0ECD               	movlw	205
  6143  00C41E                     u14037:
  6144  00C41E  2EE8               	decfsz	wreg,f,c
  6145  00C420  D7FE               	bra	u14037
  6146  00C422  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6147  00C424  D7FC               	bra	u14037
  6148  00C426  F000               	nop	
  6149                           
  6150                           ;standbyMode.c: 795: printf("Please input log");
  6151  00C428  0EE8               	movlw	low STR_78
  6152  00C42A  6E0D               	movwf	printf@f,c
  6153  00C42C  0EFC               	movlw	high STR_78
  6154  00C42E  6E0E               	movwf	printf@f+1,c
  6155  00C430  EC9A  F064         	call	_printf	;wreg free
  6156                           
  6157                           ;standbyMode.c: 796: lcdInst(0xC0);;
  6158  00C434  0EC0               	movlw	192
  6159  00C436  ECD3  F054         	call	_lcdInst
  6160                           
  6161                           ;standbyMode.c: 797: printf("number: ");
  6162  00C43A  0E60               	movlw	low STR_79
  6163  00C43C  6E0D               	movwf	printf@f,c
  6164  00C43E  0EFF               	movlw	high STR_79
  6165  00C440  6E0E               	movwf	printf@f+1,c
  6166  00C442  EC9A  F064         	call	_printf	;wreg free
  6167  00C446                     
  6168                           ;standbyMode.c: 800: while(PORTBbits.RB1 == 0){ continue; }
  6169  00C446  A281               	btfss	3969,1,c	;volatile
  6170  00C448  D7FE               	goto	l841
  6171                           
  6172                           ;standbyMode.c: 801: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  6173  00C44A  3881               	swapf	3969,w,c	;volatile
  6174  00C44C  0B0F               	andlw	15
  6175  00C44E  0B0F               	andlw	15
  6176  00C450  6E5D               	movwf	viewLogs@keypress2,c
  6177  00C452  B281               	btfsc	3969,1,c	;volatile
  6178  00C454  D7FE               	goto	l846
  6179                           
  6180                           ;standbyMode.c: 804: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  6181  00C456  505D               	movf	viewLogs@keypress2,w,c
  6182  00C458  B4D8               	btfsc	status,2,c
  6183  00C45A  D00B               	goto	u10200
  6184  00C45C  045D               	decf	viewLogs@keypress2,w,c
  6185  00C45E  B4D8               	btfsc	status,2,c
  6186  00C460  D008               	goto	u10200
  6187  00C462  0E02               	movlw	2
  6188  00C464  185D               	xorwf	viewLogs@keypress2,w,c
  6189  00C466  B4D8               	btfsc	status,2,c
  6190  00C468  D004               	goto	u10200
  6191  00C46A  0E04               	movlw	4
  6192  00C46C  185D               	xorwf	viewLogs@keypress2,w,c
  6193  00C46E  A4D8               	btfss	status,2,c
  6194  00C470  D7EA               	goto	l841
  6195  00C472                     u10200:
  6196                           
  6197                           ;standbyMode.c: 805: checkLog = verifyKeypress(logNumber, keypress2);
  6198  00C472  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  6199  00C476  6A02               	clrf	verifyKeypress@keypress+1,c
  6200  00C478  505C               	movf	viewLogs@logNumber,w,c
  6201  00C47A  ECDC  F055         	call	_verifyKeypress
  6202  00C47E  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  6203  00C482  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  6204                           
  6205                           ;standbyMode.c: 806: if (checkLog == 1){
  6206  00C486  0456               	decf	viewLogs@checkLog,w,c
  6207  00C488  1057               	iorwf	viewLogs@checkLog+1,w,c
  6208  00C48A  A4D8               	btfss	status,2,c
  6209  00C48C  D7DC               	goto	l841
  6210                           
  6211                           ;standbyMode.c: 807: putch(keys[keypress2]);
  6212  00C48E  505D               	movf	viewLogs@keypress2,w,c
  6213  00C490  0D01               	mullw	1
  6214  00C492  0E51               	movlw	low _keys
  6215  00C494  24F3               	addwf	prodl,w,c
  6216  00C496  6EF6               	movwf	tblptrl,c
  6217  00C498  0EFC               	movlw	high _keys
  6218  00C49A  20F4               	addwfc	prodh,w,c
  6219  00C49C  6EF7               	movwf	tblptrh,c
  6220  00C49E                     	if	1	;There are 3 active tblptr bytes
  6221  00C49E  6AF8               	clrf	tblptru,c
  6222  00C4A0  0E00               	movlw	low (__mediumconst shr (0+16))
  6223  00C4A2  22F8               	addwfc	tblptru,f,c
  6224  00C4A4                     	endif
  6225  00C4A4  0008               	tblrd		*
  6226  00C4A6  50F5               	movf	tablat,w,c
  6227  00C4A8  ECE7  F054         	call	_putch
  6228                           
  6229                           ;standbyMode.c: 808: if (keypress2 == 4){
  6230  00C4AC  0E04               	movlw	4
  6231  00C4AE  185D               	xorwf	viewLogs@keypress2,w,c
  6232  00C4B0  A4D8               	btfss	status,2,c
  6233  00C4B2  D004               	goto	l852
  6234                           
  6235                           ;standbyMode.c: 809: logView = keypress2;
  6236  00C4B4  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  6237  00C4B8  6A5B               	clrf	viewLogs@logView+1,c
  6238                           
  6239                           ;standbyMode.c: 810: }
  6240  00C4BA  D006               	goto	l853
  6241  00C4BC                     l852:
  6242                           
  6243                           ;standbyMode.c: 811: else{
  6244                           ;standbyMode.c: 812: logView = keypress2 + 1;
  6245  00C4BC  0E01               	movlw	1
  6246  00C4BE  245D               	addwf	viewLogs@keypress2,w,c
  6247  00C4C0  6E5A               	movwf	viewLogs@logView,c
  6248  00C4C2  6A5B               	clrf	viewLogs@logView+1,c
  6249  00C4C4  0E00               	movlw	0
  6250  00C4C6  225B               	addwfc	viewLogs@logView+1,f,c
  6251  00C4C8                     l853:
  6252                           
  6253                           ;standbyMode.c: 813: }
  6254                           ;standbyMode.c: 814: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6255  00C4C8  0E33               	movlw	51
  6256  00C4CA  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6257  00C4CC  0EBB               	movlw	187
  6258  00C4CE  6E54               	movwf	??_viewLogs& (0+255),c
  6259  00C4D0  0EE0               	movlw	224
  6260  00C4D2                     u14047:
  6261  00C4D2  2EE8               	decfsz	wreg,f,c
  6262  00C4D4  D7FE               	bra	u14047
  6263  00C4D6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6264  00C4D8  D7FC               	bra	u14047
  6265  00C4DA  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6266  00C4DC  D7FA               	bra	u14047
  6267                           
  6268                           ;standbyMode.c: 816: }
  6269                           ;standbyMode.c: 817: }
  6270                           ;standbyMode.c: 818: }
  6271                           ;standbyMode.c: 820: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6272                           
  6273                           ;standbyMode.c: 815: break;
  6274  00C4DE  0E01               	movlw	1
  6275  00C4E0  ECD3  F054         	call	_lcdInst
  6276  00C4E4  0EC3               	movlw	195
  6277  00C4E6  6E54               	movwf	??_viewLogs& (0+255),c
  6278  00C4E8  0ECD               	movlw	205
  6279  00C4EA                     u14057:
  6280  00C4EA  2EE8               	decfsz	wreg,f,c
  6281  00C4EC  D7FE               	bra	u14057
  6282  00C4EE  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6283  00C4F0  D7FC               	bra	u14057
  6284  00C4F2  F000               	nop	
  6285                           
  6286                           ;standbyMode.c: 821: printf("Great!");
  6287  00C4F4  0EAA               	movlw	low STR_80
  6288  00C4F6  6E0D               	movwf	printf@f,c
  6289  00C4F8  0EFF               	movlw	high STR_80
  6290  00C4FA  6E0E               	movwf	printf@f+1,c
  6291  00C4FC  EC9A  F064         	call	_printf	;wreg free
  6292                           
  6293                           ;standbyMode.c: 822: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6294  00C500  0E33               	movlw	51
  6295  00C502  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6296  00C504  0EBB               	movlw	187
  6297  00C506  6E54               	movwf	??_viewLogs& (0+255),c
  6298  00C508  0EE0               	movlw	224
  6299  00C50A                     u14067:
  6300  00C50A  2EE8               	decfsz	wreg,f,c
  6301  00C50C  D7FE               	bra	u14067
  6302  00C50E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6303  00C510  D7FC               	bra	u14067
  6304  00C512  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6305  00C514  D7FA               	bra	u14067
  6306                           
  6307                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6308  00C516  0E01               	movlw	1
  6309  00C518  ECD3  F054         	call	_lcdInst
  6310  00C51C  0EC3               	movlw	195
  6311  00C51E  6E54               	movwf	??_viewLogs& (0+255),c
  6312  00C520  0ECD               	movlw	205
  6313  00C522                     u14077:
  6314  00C522  2EE8               	decfsz	wreg,f,c
  6315  00C524  D7FE               	bra	u14077
  6316  00C526  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6317  00C528  D7FC               	bra	u14077
  6318  00C52A  F000               	nop	
  6319                           
  6320                           ;standbyMode.c: 824: printf("Press any key to");
  6321  00C52C  0E0A               	movlw	low STR_74
  6322  00C52E  6E0D               	movwf	printf@f,c
  6323  00C530  0EFD               	movlw	high STR_74
  6324  00C532  6E0E               	movwf	printf@f+1,c
  6325  00C534  EC9A  F064         	call	_printf	;wreg free
  6326                           
  6327                           ;standbyMode.c: 825: lcdInst(0xC0);;
  6328  00C538  0EC0               	movlw	192
  6329  00C53A  ECD3  F054         	call	_lcdInst
  6330                           
  6331                           ;standbyMode.c: 826: printf("move forward.");
  6332  00C53E  0E9B               	movlw	low STR_75
  6333  00C540  6E0D               	movwf	printf@f,c
  6334  00C542  0EFE               	movlw	high STR_75
  6335  00C544  6E0E               	movwf	printf@f+1,c
  6336  00C546  EC9A  F064         	call	_printf	;wreg free
  6337                           
  6338                           ;standbyMode.c: 827: _delay((unsigned long)((500)*(40000000/4000.0)));
  6339  00C54A  0E1A               	movlw	26
  6340  00C54C  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6341  00C54E  0E5E               	movlw	94
  6342  00C550  6E54               	movwf	??_viewLogs& (0+255),c
  6343  00C552  0E6E               	movlw	110
  6344  00C554                     u14087:
  6345  00C554  2EE8               	decfsz	wreg,f,c
  6346  00C556  D7FE               	bra	u14087
  6347  00C558  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6348  00C55A  D7FC               	bra	u14087
  6349  00C55C  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6350  00C55E  D7FA               	bra	u14087
  6351  00C560  D000               	nop2	
  6352  00C562                     
  6353                           ;standbyMode.c: 830: continue;
  6354  00C562  A281               	btfss	3969,1,c	;volatile
  6355  00C564  D7FE               	goto	l857
  6356  00C566                     u10230:
  6357                           
  6358                           ;standbyMode.c: 831: }
  6359                           ;standbyMode.c: 832: }
  6360                           ;standbyMode.c: 833: returnVal = displayLogs(logView);
  6361  00C566  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  6362  00C56A  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  6363  00C56E  EC2C  F069         	call	_displayLogs	;wreg free
  6364  00C572  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  6365  00C576  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  6366                           
  6367                           ;standbyMode.c: 834: return returnVal;
  6368  00C57A  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  6369  00C57E  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  6370  00C582  0012               	return	
  6371  00C584                     __end_of_viewLogs:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           postinc0	equ	0xFEE
  6380                           wreg	equ	0xFE8
  6381                           postdec1	equ	0xFE5
  6382                           plusw1	equ	0xFE3
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           plusw2	equ	0xFDB
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _verifyKeypress *****************
  6393 ;; Defined at:
  6394 ;;		line 739 in file "standbyMode.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;  logNumber       1    wreg     unsigned char 
  6397 ;;  keypress        2    0[COMRAM] unsigned int 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  logNumber       1    4[COMRAM] unsigned char 
  6400 ;;  i               2    7[COMRAM] unsigned int 
  6401 ;;  returnVal       2    5[COMRAM] unsigned int 
  6402 ;; Return value:  Size  Location     Type
  6403 ;;                  2    0[COMRAM] unsigned int 
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6411 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;Total ram usage:        9 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; This function calls:
  6418 ;;		Nothing
  6419 ;; This function is called by:
  6420 ;;		_viewLogs
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text5
  6425  00ABB8                     __ptext5:
  6426                           	opt stack 0
  6427  00ABB8                     _verifyKeypress:
  6428                           	opt stack 28
  6429                           
  6430                           ;incstack = 0
  6431                           ;verifyKeypress@logNumber stored from wreg
  6432  00ABB8  6E05               	movwf	verifyKeypress@logNumber,c
  6433                           
  6434                           ;standbyMode.c: 740: unsigned int i = 0;
  6435  00ABBA  0E00               	movlw	0
  6436  00ABBC  6E09               	movwf	verifyKeypress@i+1,c
  6437  00ABBE  0E00               	movlw	0
  6438  00ABC0  6E08               	movwf	verifyKeypress@i,c
  6439                           
  6440                           ;standbyMode.c: 741: unsigned int returnVal = 0;
  6441  00ABC2  0E00               	movlw	0
  6442  00ABC4  6E07               	movwf	verifyKeypress@returnVal+1,c
  6443  00ABC6  0E00               	movlw	0
  6444  00ABC8  6E06               	movwf	verifyKeypress@returnVal,c
  6445                           
  6446                           ;standbyMode.c: 743: for (i=0; i<logNumber; i++){
  6447  00ABCA  0E00               	movlw	0
  6448  00ABCC  6E09               	movwf	verifyKeypress@i+1,c
  6449  00ABCE  0E00               	movlw	0
  6450  00ABD0  6E08               	movwf	verifyKeypress@i,c
  6451  00ABD2  D00D               	goto	l826
  6452  00ABD4                     
  6453                           ;standbyMode.c: 744: if (keypress == i){
  6454  00ABD4  5008               	movf	verifyKeypress@i,w,c
  6455  00ABD6  1801               	xorwf	verifyKeypress@keypress,w,c
  6456  00ABD8  E108               	bnz	l7028
  6457  00ABDA  5009               	movf	verifyKeypress@i+1,w,c
  6458  00ABDC  1802               	xorwf	verifyKeypress@keypress+1,w,c
  6459  00ABDE  A4D8               	btfss	status,2,c
  6460  00ABE0  D004               	goto	l828
  6461                           
  6462                           ;standbyMode.c: 745: returnVal = 1;
  6463  00ABE2  0E00               	movlw	0
  6464  00ABE4  6E07               	movwf	verifyKeypress@returnVal+1,c
  6465  00ABE6  0E01               	movlw	1
  6466  00ABE8  6E06               	movwf	verifyKeypress@returnVal,c
  6467  00ABEA                     l828:
  6468  00ABEA                     l7028:
  6469  00ABEA  4A08               	infsnz	verifyKeypress@i,f,c
  6470  00ABEC  2A09               	incf	verifyKeypress@i+1,f,c
  6471  00ABEE                     l826:
  6472  00ABEE  5005               	movf	verifyKeypress@logNumber,w,c
  6473  00ABF0  6E03               	movwf	??_verifyKeypress& (0+255),c
  6474  00ABF2  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  6475  00ABF4  5003               	movf	??_verifyKeypress,w,c
  6476  00ABF6  5C08               	subwf	verifyKeypress@i,w,c
  6477  00ABF8  5004               	movf	??_verifyKeypress+1,w,c
  6478  00ABFA  5809               	subwfb	verifyKeypress@i+1,w,c
  6479  00ABFC  A0D8               	btfss	status,0,c
  6480  00ABFE  D7EA               	goto	l827
  6481                           
  6482                           ;standbyMode.c: 746: }
  6483                           ;standbyMode.c: 747: }
  6484                           ;standbyMode.c: 748: return returnVal;
  6485  00AC00  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  6486  00AC04  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  6487  00AC08  0012               	return		;funcret
  6488  00AC0A                     __end_of_verifyKeypress:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           postdec1	equ	0xFE5
  6499                           plusw1	equ	0xFE3
  6500                           fsr1l	equ	0xFE1
  6501                           indf2	equ	0xFDF
  6502                           postinc2	equ	0xFDE
  6503                           postdec2	equ	0xFDD
  6504                           plusw2	equ	0xFDB
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function _displayLogs *****************
  6510 ;; Defined at:
  6511 ;;		line 914 in file "standbyMode.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  logNumber       2   40[COMRAM] unsigned int 
  6514 ;; Auto vars:     Size  Location     Type
  6515 ;;  n               2   79[COMRAM] unsigned int 
  6516 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  6517 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  6518 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  6519 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  6520 ;;  i               2   69[COMRAM] unsigned int 
  6521 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  6522 ;;  operationTim    2   65[COMRAM] unsigned int 
  6523 ;;  foodType        2   62[COMRAM] unsigned int 
  6524 ;;  dietType        2   60[COMRAM] unsigned int 
  6525 ;;  seconds         2   58[COMRAM] unsigned int 
  6526 ;;  minutes         2   56[COMRAM] unsigned int 
  6527 ;;  longPieces      2   54[COMRAM] unsigned int 
  6528 ;;  flatPieces      2   52[COMRAM] unsigned int 
  6529 ;;  roundPieces     2   50[COMRAM] unsigned int 
  6530 ;;  day             2   48[COMRAM] unsigned int 
  6531 ;;  month           2   46[COMRAM] unsigned int 
  6532 ;;  year            2   44[COMRAM] unsigned int 
  6533 ;;  keypress3       1   64[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  2   40[COMRAM] unsigned int 
  6536 ;; Registers used:
  6537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:       41 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    3
  6550 ;; This function calls:
  6551 ;;		___lwdiv
  6552 ;;		___lwmod
  6553 ;;		___wmul
  6554 ;;		_lcdInst
  6555 ;;		_printf
  6556 ;;		_readEEPROM
  6557 ;; This function is called by:
  6558 ;;		_viewLogs
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text6
  6563  00D258                     __ptext6:
  6564                           	opt stack 0
  6565  00D258                     _displayLogs:
  6566                           	opt stack 25
  6567                           
  6568                           ;standbyMode.c: 915: unsigned int n = (logNumber-1)*35;
  6569                           
  6570                           ;incstack = 0
  6571  00D258  0EFF               	movlw	255
  6572  00D25A  2429               	addwf	displayLogs@logNumber,w,c
  6573  00D25C  6E01               	movwf	___wmul@multiplier,c
  6574  00D25E  0EFF               	movlw	255
  6575  00D260  202A               	addwfc	displayLogs@logNumber+1,w,c
  6576  00D262  6E02               	movwf	___wmul@multiplier+1,c
  6577  00D264  0E00               	movlw	0
  6578  00D266  6E04               	movwf	___wmul@multiplicand+1,c
  6579  00D268  0E23               	movlw	35
  6580  00D26A  6E03               	movwf	___wmul@multiplicand,c
  6581  00D26C  EC25  F055         	call	___wmul	;wreg free
  6582  00D270  C001  F050         	movff	?___wmul,displayLogs@n
  6583  00D274  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6584                           
  6585                           ;standbyMode.c: 916: unsigned int year = readEEPROM(n);
  6586  00D278  5050               	movf	displayLogs@n,w,c
  6587  00D27A  ECDD  F054         	call	_readEEPROM
  6588  00D27E  6E2B               	movwf	??_displayLogs& (0+255),c
  6589  00D280  502B               	movf	??_displayLogs,w,c
  6590  00D282  6E2D               	movwf	displayLogs@year,c
  6591  00D284  6A2E               	clrf	displayLogs@year+1,c
  6592                           
  6593                           ;standbyMode.c: 917: unsigned int month = readEEPROM(1+n);
  6594  00D286  2850               	incf	displayLogs@n,w,c
  6595  00D288  ECDD  F054         	call	_readEEPROM
  6596  00D28C  6E2B               	movwf	??_displayLogs& (0+255),c
  6597  00D28E  502B               	movf	??_displayLogs,w,c
  6598  00D290  6E2F               	movwf	displayLogs@month,c
  6599  00D292  6A30               	clrf	displayLogs@month+1,c
  6600                           
  6601                           ;standbyMode.c: 918: unsigned int day = readEEPROM(2+n);
  6602  00D294  5050               	movf	displayLogs@n,w,c
  6603  00D296  0F02               	addlw	2
  6604  00D298  ECDD  F054         	call	_readEEPROM
  6605  00D29C  6E2B               	movwf	??_displayLogs& (0+255),c
  6606  00D29E  502B               	movf	??_displayLogs,w,c
  6607  00D2A0  6E31               	movwf	displayLogs@day,c
  6608  00D2A2  6A32               	clrf	displayLogs@day+1,c
  6609                           
  6610                           ;standbyMode.c: 919: unsigned int operationTime = readEEPROM(3+n);
  6611  00D2A4  5050               	movf	displayLogs@n,w,c
  6612  00D2A6  0F03               	addlw	3
  6613  00D2A8  ECDD  F054         	call	_readEEPROM
  6614  00D2AC  6E2B               	movwf	??_displayLogs& (0+255),c
  6615  00D2AE  502B               	movf	??_displayLogs,w,c
  6616  00D2B0  6E42               	movwf	displayLogs@operationTime,c
  6617  00D2B2  6A43               	clrf	displayLogs@operationTime+1,c
  6618                           
  6619                           ;standbyMode.c: 920: unsigned int roundPieces = readEEPROM(4+n);
  6620  00D2B4  5050               	movf	displayLogs@n,w,c
  6621  00D2B6  0F04               	addlw	4
  6622  00D2B8  ECDD  F054         	call	_readEEPROM
  6623  00D2BC  6E2B               	movwf	??_displayLogs& (0+255),c
  6624  00D2BE  502B               	movf	??_displayLogs,w,c
  6625  00D2C0  6E33               	movwf	displayLogs@roundPieces,c
  6626  00D2C2  6A34               	clrf	displayLogs@roundPieces+1,c
  6627                           
  6628                           ;standbyMode.c: 921: unsigned int flatPieces = readEEPROM(5+n);
  6629  00D2C4  5050               	movf	displayLogs@n,w,c
  6630  00D2C6  0F05               	addlw	5
  6631  00D2C8  ECDD  F054         	call	_readEEPROM
  6632  00D2CC  6E2B               	movwf	??_displayLogs& (0+255),c
  6633  00D2CE  502B               	movf	??_displayLogs,w,c
  6634  00D2D0  6E35               	movwf	displayLogs@flatPieces,c
  6635  00D2D2  6A36               	clrf	displayLogs@flatPieces+1,c
  6636                           
  6637                           ;standbyMode.c: 922: unsigned int longPieces = readEEPROM(6+n);
  6638  00D2D4  5050               	movf	displayLogs@n,w,c
  6639  00D2D6  0F06               	addlw	6
  6640  00D2D8  ECDD  F054         	call	_readEEPROM
  6641  00D2DC  6E2B               	movwf	??_displayLogs& (0+255),c
  6642  00D2DE  502B               	movf	??_displayLogs,w,c
  6643  00D2E0  6E37               	movwf	displayLogs@longPieces,c
  6644  00D2E2  6A38               	clrf	displayLogs@longPieces+1,c
  6645                           
  6646                           ;standbyMode.c: 923: unsigned int markedDrawer1 = readEEPROM(7+n);
  6647  00D2E4  5050               	movf	displayLogs@n,w,c
  6648  00D2E6  0F07               	addlw	7
  6649  00D2E8  ECDD  F054         	call	_readEEPROM
  6650  00D2EC  6E2B               	movwf	??_displayLogs& (0+255),c
  6651  00D2EE  502B               	movf	??_displayLogs,w,c
  6652  00D2F0  6E48               	movwf	displayLogs@markedDrawer1,c
  6653  00D2F2  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6654                           
  6655                           ;standbyMode.c: 924: unsigned int markedDrawer2 = readEEPROM(8+n);
  6656  00D2F4  5050               	movf	displayLogs@n,w,c
  6657  00D2F6  0F08               	addlw	8
  6658  00D2F8  ECDD  F054         	call	_readEEPROM
  6659  00D2FC  6E2B               	movwf	??_displayLogs& (0+255),c
  6660  00D2FE  502B               	movf	??_displayLogs,w,c
  6661  00D300  6E4A               	movwf	displayLogs@markedDrawer2,c
  6662  00D302  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6663                           
  6664                           ;standbyMode.c: 925: unsigned int markedDrawer3 = readEEPROM(9+n);
  6665  00D304  5050               	movf	displayLogs@n,w,c
  6666  00D306  0F09               	addlw	9
  6667  00D308  ECDD  F054         	call	_readEEPROM
  6668  00D30C  6E2B               	movwf	??_displayLogs& (0+255),c
  6669  00D30E  502B               	movf	??_displayLogs,w,c
  6670  00D310  6E4C               	movwf	displayLogs@markedDrawer3,c
  6671  00D312  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6672                           
  6673                           ;standbyMode.c: 926: unsigned int markedDrawer4 = readEEPROM(10+n);
  6674  00D314  5050               	movf	displayLogs@n,w,c
  6675  00D316  0F0A               	addlw	10
  6676  00D318  ECDD  F054         	call	_readEEPROM
  6677  00D31C  6E2B               	movwf	??_displayLogs& (0+255),c
  6678  00D31E  502B               	movf	??_displayLogs,w,c
  6679  00D320  6E4E               	movwf	displayLogs@markedDrawer4,c
  6680  00D322  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6681                           
  6682                           ;standbyMode.c: 927: unsigned int drawerNumber = readEEPROM(11+n);
  6683  00D324  5050               	movf	displayLogs@n,w,c
  6684  00D326  0F0B               	addlw	11
  6685  00D328  ECDD  F054         	call	_readEEPROM
  6686  00D32C  6E2B               	movwf	??_displayLogs& (0+255),c
  6687  00D32E  502B               	movf	??_displayLogs,w,c
  6688  00D330  6E44               	movwf	displayLogs@drawerNumber,c
  6689  00D332  6A45               	clrf	displayLogs@drawerNumber+1,c
  6690                           
  6691                           ;standbyMode.c: 928: unsigned int dietType = readEEPROM(12+n);
  6692  00D334  5050               	movf	displayLogs@n,w,c
  6693  00D336  0F0C               	addlw	12
  6694  00D338  ECDD  F054         	call	_readEEPROM
  6695  00D33C  6E2B               	movwf	??_displayLogs& (0+255),c
  6696  00D33E  502B               	movf	??_displayLogs,w,c
  6697  00D340  6E3D               	movwf	displayLogs@dietType,c
  6698  00D342  6A3E               	clrf	displayLogs@dietType+1,c
  6699                           
  6700                           ;standbyMode.c: 929: unsigned int foodType = readEEPROM(13+n);
  6701  00D344  5050               	movf	displayLogs@n,w,c
  6702  00D346  0F0D               	addlw	13
  6703  00D348  ECDD  F054         	call	_readEEPROM
  6704  00D34C  6E2B               	movwf	??_displayLogs& (0+255),c
  6705  00D34E  502B               	movf	??_displayLogs,w,c
  6706  00D350  6E3F               	movwf	displayLogs@foodType,c
  6707  00D352  6A40               	clrf	displayLogs@foodType+1,c
  6708                           
  6709                           ;standbyMode.c: 930: unsigned int i = 0;
  6710  00D354  0E00               	movlw	0
  6711  00D356  6E47               	movwf	displayLogs@i+1,c
  6712  00D358  0E00               	movlw	0
  6713  00D35A  6E46               	movwf	displayLogs@i,c
  6714                           
  6715                           ;standbyMode.c: 932: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6716  00D35C  0E01               	movlw	1
  6717  00D35E  ECD3  F054         	call	_lcdInst
  6718  00D362  0EC3               	movlw	195
  6719  00D364  6E2B               	movwf	??_displayLogs& (0+255),c
  6720  00D366  0ECD               	movlw	205
  6721  00D368                     u14097:
  6722  00D368  2EE8               	decfsz	wreg,f,c
  6723  00D36A  D7FE               	bra	u14097
  6724  00D36C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6725  00D36E  D7FC               	bra	u14097
  6726  00D370  F000               	nop	
  6727                           
  6728                           ;standbyMode.c: 933: printf("Date:");
  6729  00D372  0EB1               	movlw	low STR_83
  6730  00D374  6E0D               	movwf	printf@f,c
  6731  00D376  0EFF               	movlw	high STR_83
  6732  00D378  6E0E               	movwf	printf@f+1,c
  6733  00D37A  EC9A  F064         	call	_printf	;wreg free
  6734                           
  6735                           ;standbyMode.c: 934: lcdInst(0xC0);;
  6736  00D37E  0EC0               	movlw	192
  6737  00D380  ECD3  F054         	call	_lcdInst
  6738                           
  6739                           ;standbyMode.c: 935: printf("%02i/%02i/%02i", year, month, day);
  6740  00D384  0E17               	movlw	low STR_84
  6741  00D386  6E0D               	movwf	printf@f,c
  6742  00D388  0EFE               	movlw	high STR_84
  6743  00D38A  6E0E               	movwf	printf@f+1,c
  6744  00D38C  C02D  F00F         	movff	displayLogs@year,?_printf+2
  6745  00D390  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  6746  00D394  C02F  F011         	movff	displayLogs@month,?_printf+4
  6747  00D398  C030  F012         	movff	displayLogs@month+1,?_printf+5
  6748  00D39C  C031  F013         	movff	displayLogs@day,?_printf+6
  6749  00D3A0  C032  F014         	movff	displayLogs@day+1,?_printf+7
  6750  00D3A4  EC9A  F064         	call	_printf	;wreg free
  6751                           
  6752                           ;standbyMode.c: 936: _delay((unsigned long)((700)*(40000000/4000.0)));
  6753  00D3A8  0E24               	movlw	36
  6754  00D3AA  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6755  00D3AC  0E83               	movlw	131
  6756  00D3AE  6E2B               	movwf	??_displayLogs& (0+255),c
  6757  00D3B0  0ECF               	movlw	207
  6758  00D3B2                     u14107:
  6759  00D3B2  2EE8               	decfsz	wreg,f,c
  6760  00D3B4  D7FE               	bra	u14107
  6761  00D3B6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6762  00D3B8  D7FC               	bra	u14107
  6763  00D3BA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6764  00D3BC  D7FA               	bra	u14107
  6765  00D3BE  F000               	nop	
  6766  00D3C0                     
  6767                           ;standbyMode.c: 938: continue;
  6768  00D3C0  A281               	btfss	3969,1,c	;volatile
  6769  00D3C2  D7FE               	goto	l915
  6770                           
  6771                           ;standbyMode.c: 939: }
  6772                           ;standbyMode.c: 941: unsigned int minutes = operationTime/60;
  6773  00D3C4  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  6774  00D3C8  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  6775  00D3CC  0E00               	movlw	0
  6776  00D3CE  6E04               	movwf	___lwdiv@divisor+1,c
  6777  00D3D0  0E3C               	movlw	60
  6778  00D3D2  6E03               	movwf	___lwdiv@divisor,c
  6779  00D3D4  ECB3  F055         	call	___lwdiv	;wreg free
  6780  00D3D8  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  6781  00D3DC  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  6782                           
  6783                           ;standbyMode.c: 942: unsigned int seconds = operationTime%60;
  6784  00D3E0  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  6785  00D3E4  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  6786  00D3E8  0E00               	movlw	0
  6787  00D3EA  6E0B               	movwf	___lwmod@divisor+1,c
  6788  00D3EC  0E3C               	movlw	60
  6789  00D3EE  6E0A               	movwf	___lwmod@divisor,c
  6790  00D3F0  EC6C  F055         	call	___lwmod	;wreg free
  6791  00D3F4  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  6792  00D3F8  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  6793                           
  6794                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6795  00D3FC  0E01               	movlw	1
  6796  00D3FE  ECD3  F054         	call	_lcdInst
  6797  00D402  0EC3               	movlw	195
  6798  00D404  6E2B               	movwf	??_displayLogs& (0+255),c
  6799  00D406  0ECD               	movlw	205
  6800  00D408                     u14117:
  6801  00D408  2EE8               	decfsz	wreg,f,c
  6802  00D40A  D7FE               	bra	u14117
  6803  00D40C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6804  00D40E  D7FC               	bra	u14117
  6805  00D410  F000               	nop	
  6806                           
  6807                           ;standbyMode.c: 944: printf("Operation time:");
  6808  00D412  0E5C               	movlw	low STR_85
  6809  00D414  6E0D               	movwf	printf@f,c
  6810  00D416  0EFD               	movlw	high STR_85
  6811  00D418  6E0E               	movwf	printf@f+1,c
  6812  00D41A  EC9A  F064         	call	_printf	;wreg free
  6813                           
  6814                           ;standbyMode.c: 945: lcdInst(0xC0);;
  6815  00D41E  0EC0               	movlw	192
  6816  00D420  ECD3  F054         	call	_lcdInst
  6817                           
  6818                           ;standbyMode.c: 946: printf("%i:%02i", minutes, seconds);
  6819  00D424  0E8B               	movlw	low STR_86
  6820  00D426  6E0D               	movwf	printf@f,c
  6821  00D428  0EFF               	movlw	high STR_86
  6822  00D42A  6E0E               	movwf	printf@f+1,c
  6823  00D42C  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  6824  00D430  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  6825  00D434  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  6826  00D438  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  6827  00D43C  EC9A  F064         	call	_printf	;wreg free
  6828                           
  6829                           ;standbyMode.c: 947: _delay((unsigned long)((700)*(40000000/4000.0)));
  6830  00D440  0E24               	movlw	36
  6831  00D442  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6832  00D444  0E83               	movlw	131
  6833  00D446  6E2B               	movwf	??_displayLogs& (0+255),c
  6834  00D448  0ECF               	movlw	207
  6835  00D44A                     u14127:
  6836  00D44A  2EE8               	decfsz	wreg,f,c
  6837  00D44C  D7FE               	bra	u14127
  6838  00D44E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6839  00D450  D7FC               	bra	u14127
  6840  00D452  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6841  00D454  D7FA               	bra	u14127
  6842  00D456  F000               	nop	
  6843  00D458                     
  6844                           ;standbyMode.c: 950: continue;
  6845  00D458  A281               	btfss	3969,1,c	;volatile
  6846  00D45A  D7FE               	goto	l918
  6847                           
  6848                           ;standbyMode.c: 951: }
  6849                           ;standbyMode.c: 953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6850  00D45C  0E01               	movlw	1
  6851  00D45E  ECD3  F054         	call	_lcdInst
  6852  00D462  0EC3               	movlw	195
  6853  00D464  6E2B               	movwf	??_displayLogs& (0+255),c
  6854  00D466  0ECD               	movlw	205
  6855  00D468                     u14137:
  6856  00D468  2EE8               	decfsz	wreg,f,c
  6857  00D46A  D7FE               	bra	u14137
  6858  00D46C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6859  00D46E  D7FC               	bra	u14137
  6860  00D470  F000               	nop	
  6861                           
  6862                           ;standbyMode.c: 954: printf("Marked drawers:");
  6863  00D472  0E6C               	movlw	low STR_87
  6864  00D474  6E0D               	movwf	printf@f,c
  6865  00D476  0EFD               	movlw	high STR_87
  6866  00D478  6E0E               	movwf	printf@f+1,c
  6867  00D47A  EC9A  F064         	call	_printf	;wreg free
  6868                           
  6869                           ;standbyMode.c: 955: lcdInst(0xC0);;
  6870  00D47E  0EC0               	movlw	192
  6871  00D480  ECD3  F054         	call	_lcdInst
  6872                           
  6873                           ;standbyMode.c: 957: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  6874  00D484  504E               	movf	displayLogs@markedDrawer4,w,c
  6875  00D486  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6876  00D488  A4D8               	btfss	status,2,c
  6877  00D48A  D01E               	goto	l920
  6878  00D48C  504C               	movf	displayLogs@markedDrawer3,w,c
  6879  00D48E  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6880  00D490  A4D8               	btfss	status,2,c
  6881  00D492  D01A               	goto	l920
  6882  00D494  504A               	movf	displayLogs@markedDrawer2,w,c
  6883  00D496  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  6884  00D498  A4D8               	btfss	status,2,c
  6885  00D49A  D016               	goto	l920
  6886                           
  6887                           ;standbyMode.c: 958: printf("%i", markedDrawer1);
  6888  00D49C  0E14               	movlw	low (STR_91+12)
  6889  00D49E  6E0D               	movwf	printf@f,c
  6890  00D4A0  0EFE               	movlw	high (STR_91+12)
  6891  00D4A2  6E0E               	movwf	printf@f+1,c
  6892  00D4A4  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6893  00D4A8  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6894  00D4AC  EC9A  F064         	call	_printf	;wreg free
  6895                           
  6896                           ;standbyMode.c: 959: _delay((unsigned long)((700)*(40000000/4000.0)));
  6897  00D4B0  0E24               	movlw	36
  6898  00D4B2  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6899  00D4B4  0E83               	movlw	131
  6900  00D4B6  6E2B               	movwf	??_displayLogs& (0+255),c
  6901  00D4B8  0ECF               	movlw	207
  6902  00D4BA                     u14147:
  6903  00D4BA  2EE8               	decfsz	wreg,f,c
  6904  00D4BC  D7FE               	bra	u14147
  6905  00D4BE  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6906  00D4C0  D7FC               	bra	u14147
  6907  00D4C2  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6908  00D4C4  D7FA               	bra	u14147
  6909  00D4C6  D065               	goto	L19
  6910  00D4C8                     l920:
  6911                           
  6912                           ;standbyMode.c: 962: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6913  00D4C8  504E               	movf	displayLogs@markedDrawer4,w,c
  6914  00D4CA  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6915  00D4CC  A4D8               	btfss	status,2,c
  6916  00D4CE  D01E               	goto	l922
  6917  00D4D0  504C               	movf	displayLogs@markedDrawer3,w,c
  6918  00D4D2  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6919  00D4D4  A4D8               	btfss	status,2,c
  6920  00D4D6  D01A               	goto	l922
  6921                           
  6922                           ;standbyMode.c: 963: printf("%i, %i", markedDrawer1, markedDrawer2);
  6923  00D4D8  0E10               	movlw	low (STR_91+8)
  6924  00D4DA  6E0D               	movwf	printf@f,c
  6925  00D4DC  0EFE               	movlw	high (STR_91+8)
  6926  00D4DE  6E0E               	movwf	printf@f+1,c
  6927  00D4E0  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6928  00D4E4  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6929  00D4E8  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6930  00D4EC  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6931  00D4F0  EC9A  F064         	call	_printf	;wreg free
  6932                           
  6933                           ;standbyMode.c: 964: _delay((unsigned long)((700)*(40000000/4000.0)));
  6934  00D4F4  0E24               	movlw	36
  6935  00D4F6  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6936  00D4F8  0E83               	movlw	131
  6937  00D4FA  6E2B               	movwf	??_displayLogs& (0+255),c
  6938  00D4FC  0ECF               	movlw	207
  6939  00D4FE                     u14157:
  6940  00D4FE  2EE8               	decfsz	wreg,f,c
  6941  00D500  D7FE               	bra	u14157
  6942  00D502  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6943  00D504  D7FC               	bra	u14157
  6944  00D506  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6945  00D508  D7FA               	bra	u14157
  6946  00D50A  D043               	goto	L19
  6947  00D50C                     l922:
  6948                           
  6949                           ;standbyMode.c: 967: else if (markedDrawer4 == 0){
  6950  00D50C  504E               	movf	displayLogs@markedDrawer4,w,c
  6951  00D50E  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6952  00D510  A4D8               	btfss	status,2,c
  6953  00D512  D01E               	goto	l924
  6954                           
  6955                           ;standbyMode.c: 968: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6956  00D514  0E0C               	movlw	low (STR_91+4)
  6957  00D516  6E0D               	movwf	printf@f,c
  6958  00D518  0EFE               	movlw	high (STR_91+4)
  6959  00D51A  6E0E               	movwf	printf@f+1,c
  6960  00D51C  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6961  00D520  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6962  00D524  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6963  00D528  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6964  00D52C  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6965  00D530  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6966  00D534  EC9A  F064         	call	_printf	;wreg free
  6967                           
  6968                           ;standbyMode.c: 969: _delay((unsigned long)((700)*(40000000/4000.0)));
  6969  00D538  0E24               	movlw	36
  6970  00D53A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6971  00D53C  0E83               	movlw	131
  6972  00D53E  6E2B               	movwf	??_displayLogs& (0+255),c
  6973  00D540  0ECF               	movlw	207
  6974  00D542                     u14167:
  6975  00D542  2EE8               	decfsz	wreg,f,c
  6976  00D544  D7FE               	bra	u14167
  6977  00D546  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6978  00D548  D7FC               	bra	u14167
  6979  00D54A  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6980  00D54C  D7FA               	bra	u14167
  6981  00D54E  D021               	goto	L19
  6982  00D550                     l924:
  6983                           
  6984                           ;standbyMode.c: 972: else {
  6985                           ;standbyMode.c: 973: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  6986  00D550  0E08               	movlw	low STR_91
  6987  00D552  6E0D               	movwf	printf@f,c
  6988  00D554  0EFE               	movlw	high STR_91
  6989  00D556  6E0E               	movwf	printf@f+1,c
  6990  00D558  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6991  00D55C  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6992  00D560  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6993  00D564  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6994  00D568  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6995  00D56C  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6996  00D570  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6997  00D574  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6998  00D578  EC9A  F064         	call	_printf	;wreg free
  6999                           
  7000                           ;standbyMode.c: 974: _delay((unsigned long)((700)*(40000000/4000.0)));
  7001  00D57C  0E24               	movlw	36
  7002  00D57E  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7003  00D580  0E83               	movlw	131
  7004  00D582  6E2B               	movwf	??_displayLogs& (0+255),c
  7005  00D584  0ECF               	movlw	207
  7006  00D586                     u14177:
  7007  00D586  2EE8               	decfsz	wreg,f,c
  7008  00D588  D7FE               	bra	u14177
  7009  00D58A  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7010  00D58C  D7FC               	bra	u14177
  7011  00D58E  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7012  00D590  D7FA               	bra	u14177
  7013  00D592                     L19:
  7014  00D592  F000               	nop	
  7015  00D594                     
  7016                           ;standbyMode.c: 978: continue;
  7017                           
  7018                           ;standbyMode.c: 975: }
  7019                           ;standbyMode.c: 977: while(PORTBbits.RB1 == 0){
  7020  00D594  A281               	btfss	3969,1,c	;volatile
  7021  00D596  D7FE               	goto	l925
  7022                           
  7023                           ;standbyMode.c: 979: }
  7024                           ;standbyMode.c: 981: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7025  00D598  0E01               	movlw	1
  7026  00D59A  ECD3  F054         	call	_lcdInst
  7027  00D59E  0EC3               	movlw	195
  7028  00D5A0  6E2B               	movwf	??_displayLogs& (0+255),c
  7029  00D5A2  0ECD               	movlw	205
  7030  00D5A4                     u14187:
  7031  00D5A4  2EE8               	decfsz	wreg,f,c
  7032  00D5A6  D7FE               	bra	u14187
  7033  00D5A8  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7034  00D5AA  D7FC               	bra	u14187
  7035  00D5AC  F000               	nop	
  7036                           
  7037                           ;standbyMode.c: 982: printf("Remaining pieces:");
  7038  00D5AE  0E92               	movlw	low STR_92
  7039  00D5B0  6E0D               	movwf	printf@f,c
  7040  00D5B2  0EFC               	movlw	high STR_92
  7041  00D5B4  6E0E               	movwf	printf@f+1,c
  7042  00D5B6  EC9A  F064         	call	_printf	;wreg free
  7043                           
  7044                           ;standbyMode.c: 983: lcdInst(0xC0);;
  7045  00D5BA  0EC0               	movlw	192
  7046  00D5BC  ECD3  F054         	call	_lcdInst
  7047                           
  7048                           ;standbyMode.c: 984: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  7049  00D5C0  0EF9               	movlw	low STR_93
  7050  00D5C2  6E0D               	movwf	printf@f,c
  7051  00D5C4  0EFC               	movlw	high STR_93
  7052  00D5C6  6E0E               	movwf	printf@f+1,c
  7053  00D5C8  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  7054  00D5CC  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  7055  00D5D0  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  7056  00D5D4  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  7057  00D5D8  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  7058  00D5DC  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  7059  00D5E0  EC9A  F064         	call	_printf	;wreg free
  7060                           
  7061                           ;standbyMode.c: 985: _delay((unsigned long)((700)*(40000000/4000.0)));
  7062  00D5E4  0E24               	movlw	36
  7063  00D5E6  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7064  00D5E8  0E83               	movlw	131
  7065  00D5EA  6E2B               	movwf	??_displayLogs& (0+255),c
  7066  00D5EC  0ECF               	movlw	207
  7067  00D5EE                     u14197:
  7068  00D5EE  2EE8               	decfsz	wreg,f,c
  7069  00D5F0  D7FE               	bra	u14197
  7070  00D5F2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7071  00D5F4  D7FC               	bra	u14197
  7072  00D5F6  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7073  00D5F8  D7FA               	bra	u14197
  7074  00D5FA  F000               	nop	
  7075  00D5FC                     
  7076                           ;standbyMode.c: 988: continue;
  7077  00D5FC  A281               	btfss	3969,1,c	;volatile
  7078  00D5FE  D7FE               	goto	l930
  7079                           
  7080                           ;standbyMode.c: 989: }
  7081                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7082  00D600  0E01               	movlw	1
  7083  00D602  ECD3  F054         	call	_lcdInst
  7084  00D606  0EC3               	movlw	195
  7085  00D608  6E2B               	movwf	??_displayLogs& (0+255),c
  7086  00D60A  0ECD               	movlw	205
  7087  00D60C                     u14207:
  7088  00D60C  2EE8               	decfsz	wreg,f,c
  7089  00D60E  D7FE               	bra	u14207
  7090  00D610  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7091  00D612  D7FC               	bra	u14207
  7092  00D614  F000               	nop	
  7093                           
  7094                           ;standbyMode.c: 992: printf("Input Summary:");
  7095  00D616  0EEA               	movlw	low STR_94
  7096  00D618  6E0D               	movwf	printf@f,c
  7097  00D61A  0EFD               	movlw	high STR_94
  7098  00D61C  6E0E               	movwf	printf@f+1,c
  7099  00D61E  EC9A  F064         	call	_printf	;wreg free
  7100                           
  7101                           ;standbyMode.c: 993: _delay((unsigned long)((700)*(40000000/4000.0)));
  7102  00D622  0E24               	movlw	36
  7103  00D624  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7104  00D626  0E83               	movlw	131
  7105  00D628  6E2B               	movwf	??_displayLogs& (0+255),c
  7106  00D62A  0ECF               	movlw	207
  7107  00D62C                     u14217:
  7108  00D62C  2EE8               	decfsz	wreg,f,c
  7109  00D62E  D7FE               	bra	u14217
  7110  00D630  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7111  00D632  D7FC               	bra	u14217
  7112  00D634  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7113  00D636  D7FA               	bra	u14217
  7114  00D638  F000               	nop	
  7115  00D63A                     
  7116                           ;standbyMode.c: 996: continue;
  7117  00D63A  A281               	btfss	3969,1,c	;volatile
  7118  00D63C  D7FE               	goto	l933
  7119                           
  7120                           ;standbyMode.c: 997: }
  7121                           ;standbyMode.c: 999: for (i=0; i<8; i++){
  7122  00D63E  0E00               	movlw	0
  7123  00D640  6E47               	movwf	displayLogs@i+1,c
  7124  00D642  0E00               	movlw	0
  7125  00D644  6E46               	movwf	displayLogs@i,c
  7126  00D646  5047               	movf	displayLogs@i+1,w,c
  7127  00D648  E105               	bnz	u8450
  7128  00D64A  0E08               	movlw	8
  7129  00D64C  5C46               	subwf	displayLogs@i,w,c
  7130  00D64E  B0D8               	btfsc	status,0,c
  7131  00D650  D089               	goto	u8480
  7132  00D652  D001               	goto	l935
  7133  00D654                     u8450:
  7134  00D654  D087               	goto	u8480
  7135  00D656                     l935:
  7136                           
  7137                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7138  00D656  0E01               	movlw	1
  7139  00D658  ECD3  F054         	call	_lcdInst
  7140  00D65C  0EC3               	movlw	195
  7141  00D65E  6E2B               	movwf	??_displayLogs& (0+255),c
  7142  00D660  0ECD               	movlw	205
  7143  00D662                     u14227:
  7144  00D662  2EE8               	decfsz	wreg,f,c
  7145  00D664  D7FE               	bra	u14227
  7146  00D666  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7147  00D668  D7FC               	bra	u14227
  7148  00D66A  F000               	nop	
  7149                           
  7150                           ;standbyMode.c: 1001: n = (logNumber-1)*35 + 3*i;
  7151  00D66C  0EFF               	movlw	255
  7152  00D66E  2429               	addwf	displayLogs@logNumber,w,c
  7153  00D670  6E01               	movwf	___wmul@multiplier,c
  7154  00D672  0EFF               	movlw	255
  7155  00D674  202A               	addwfc	displayLogs@logNumber+1,w,c
  7156  00D676  6E02               	movwf	___wmul@multiplier+1,c
  7157  00D678  0E00               	movlw	0
  7158  00D67A  6E04               	movwf	___wmul@multiplicand+1,c
  7159  00D67C  0E23               	movlw	35
  7160  00D67E  6E03               	movwf	___wmul@multiplicand,c
  7161  00D680  EC25  F055         	call	___wmul	;wreg free
  7162  00D684  C001  F02B         	movff	?___wmul,??_displayLogs
  7163  00D688  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  7164  00D68C  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  7165  00D690  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  7166  00D694  0E00               	movlw	0
  7167  00D696  6E04               	movwf	___wmul@multiplicand+1,c
  7168  00D698  0E03               	movlw	3
  7169  00D69A  6E03               	movwf	___wmul@multiplicand,c
  7170  00D69C  EC25  F055         	call	___wmul	;wreg free
  7171  00D6A0  5001               	movf	?___wmul,w,c
  7172  00D6A2  242B               	addwf	??_displayLogs,w,c
  7173  00D6A4  6E50               	movwf	displayLogs@n,c
  7174  00D6A6  5002               	movf	?___wmul+1,w,c
  7175  00D6A8  202C               	addwfc	??_displayLogs+1,w,c
  7176  00D6AA  6E51               	movwf	displayLogs@n+1,c
  7177                           
  7178                           ;standbyMode.c: 1002: drawerNumber = readEEPROM(11+n);
  7179  00D6AC  5050               	movf	displayLogs@n,w,c
  7180  00D6AE  0F0B               	addlw	11
  7181  00D6B0  ECDD  F054         	call	_readEEPROM
  7182  00D6B4  6E2B               	movwf	??_displayLogs& (0+255),c
  7183  00D6B6  502B               	movf	??_displayLogs,w,c
  7184  00D6B8  6E44               	movwf	displayLogs@drawerNumber,c
  7185  00D6BA  6A45               	clrf	displayLogs@drawerNumber+1,c
  7186                           
  7187                           ;standbyMode.c: 1003: dietType = readEEPROM(12+n);
  7188  00D6BC  5050               	movf	displayLogs@n,w,c
  7189  00D6BE  0F0C               	addlw	12
  7190  00D6C0  ECDD  F054         	call	_readEEPROM
  7191  00D6C4  6E2B               	movwf	??_displayLogs& (0+255),c
  7192  00D6C6  502B               	movf	??_displayLogs,w,c
  7193  00D6C8  6E3D               	movwf	displayLogs@dietType,c
  7194  00D6CA  6A3E               	clrf	displayLogs@dietType+1,c
  7195                           
  7196                           ;standbyMode.c: 1004: foodType = readEEPROM(13+n);
  7197  00D6CC  5050               	movf	displayLogs@n,w,c
  7198  00D6CE  0F0D               	addlw	13
  7199  00D6D0  ECDD  F054         	call	_readEEPROM
  7200  00D6D4  6E2B               	movwf	??_displayLogs& (0+255),c
  7201  00D6D6  502B               	movf	??_displayLogs,w,c
  7202  00D6D8  6E3F               	movwf	displayLogs@foodType,c
  7203  00D6DA  6A40               	clrf	displayLogs@foodType+1,c
  7204                           
  7205                           ;standbyMode.c: 1005: if (drawerNumber != 0){
  7206  00D6DC  5044               	movf	displayLogs@drawerNumber,w,c
  7207  00D6DE  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  7208  00D6E0  B4D8               	btfsc	status,2,c
  7209  00D6E2  D03B               	goto	u8470
  7210                           
  7211                           ;standbyMode.c: 1006: printf("Drawer %i:", drawerNumber);
  7212  00D6E4  0E17               	movlw	low STR_95
  7213  00D6E6  6E0D               	movwf	printf@f,c
  7214  00D6E8  0EFF               	movlw	high STR_95
  7215  00D6EA  6E0E               	movwf	printf@f+1,c
  7216  00D6EC  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  7217  00D6F0  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  7218  00D6F4  EC9A  F064         	call	_printf	;wreg free
  7219                           
  7220                           ;standbyMode.c: 1007: lcdInst(0xC0);;
  7221  00D6F8  0EC0               	movlw	192
  7222  00D6FA  ECD3  F054         	call	_lcdInst
  7223                           
  7224                           ;standbyMode.c: 1008: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  7225  00D6FE  0EB7               	movlw	low STR_96
  7226  00D700  6E0D               	movwf	printf@f,c
  7227  00D702  0EFF               	movlw	high STR_96
  7228  00D704  6E0E               	movwf	printf@f+1,c
  7229  00D706  90D8               	bcf	status,0,c
  7230  00D708  343D               	rlcf	displayLogs@dietType,w,c
  7231  00D70A  6ED9               	movwf	fsr2l,c
  7232  00D70C  343E               	rlcf	displayLogs@dietType+1,w,c
  7233  00D70E  6EDA               	movwf	fsr2h,c
  7234  00D710  0E50               	movlw	low _inputs
  7235  00D712  26D9               	addwf	fsr2l,f,c
  7236  00D714  0E02               	movlw	high _inputs
  7237  00D716  22DA               	addwfc	fsr2h,f,c
  7238  00D718  CFDE F00F          	movff	postinc2,?_printf+2
  7239  00D71C  CFDD F010          	movff	postdec2,?_printf+3
  7240  00D720  90D8               	bcf	status,0,c
  7241  00D722  343F               	rlcf	displayLogs@foodType,w,c
  7242  00D724  6ED9               	movwf	fsr2l,c
  7243  00D726  3440               	rlcf	displayLogs@foodType+1,w,c
  7244  00D728  6EDA               	movwf	fsr2h,c
  7245  00D72A  0E74               	movlw	low _foodInputs
  7246  00D72C  26D9               	addwf	fsr2l,f,c
  7247  00D72E  0E02               	movlw	high _foodInputs
  7248  00D730  22DA               	addwfc	fsr2h,f,c
  7249  00D732  CFDE F011          	movff	postinc2,?_printf+4
  7250  00D736  CFDD F012          	movff	postdec2,?_printf+5
  7251  00D73A  EC9A  F064         	call	_printf	;wreg free
  7252                           
  7253                           ;standbyMode.c: 1009: _delay((unsigned long)((700)*(40000000/4000.0)));
  7254  00D73E  0E24               	movlw	36
  7255  00D740  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7256  00D742  0E83               	movlw	131
  7257  00D744  6E2B               	movwf	??_displayLogs& (0+255),c
  7258  00D746  0ECF               	movlw	207
  7259  00D748                     u14237:
  7260  00D748  2EE8               	decfsz	wreg,f,c
  7261  00D74A  D7FE               	bra	u14237
  7262  00D74C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7263  00D74E  D7FC               	bra	u14237
  7264  00D750  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7265  00D752  D7FA               	bra	u14237
  7266  00D754  F000               	nop	
  7267  00D756                     
  7268                           ;standbyMode.c: 1011: continue;
  7269  00D756  A281               	btfss	3969,1,c	;volatile
  7270  00D758  D7FE               	goto	l939
  7271  00D75A                     u8470:
  7272  00D75A  4A46               	infsnz	displayLogs@i,f,c
  7273  00D75C  2A47               	incf	displayLogs@i+1,f,c
  7274  00D75E  5047               	movf	displayLogs@i+1,w,c
  7275  00D760  E101               	bnz	l7172
  7276  00D762  D773               	goto	L20
  7277  00D764                     u8480:
  7278  00D764                     l7172:
  7279                           
  7280                           ;standbyMode.c: 1012: }
  7281                           ;standbyMode.c: 1013: }
  7282                           ;standbyMode.c: 1014: }
  7283                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7284  00D764  0E01               	movlw	1
  7285  00D766  ECD3  F054         	call	_lcdInst
  7286  00D76A  0EC3               	movlw	195
  7287  00D76C  6E2B               	movwf	??_displayLogs& (0+255),c
  7288  00D76E  0ECD               	movlw	205
  7289  00D770                     u14247:
  7290  00D770  2EE8               	decfsz	wreg,f,c
  7291  00D772  D7FE               	bra	u14247
  7292  00D774  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7293  00D776  D7FC               	bra	u14247
  7294  00D778  F000               	nop	
  7295                           
  7296                           ;standbyMode.c: 1017: printf("Another log?");
  7297  00D77A  0ED1               	movlw	low STR_97
  7298  00D77C  6E0D               	movwf	printf@f,c
  7299  00D77E  0EFE               	movlw	high STR_97
  7300  00D780  6E0E               	movwf	printf@f+1,c
  7301  00D782  EC9A  F064         	call	_printf	;wreg free
  7302                           
  7303                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  7304  00D786  0EC0               	movlw	192
  7305  00D788  ECD3  F054         	call	_lcdInst
  7306                           
  7307                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  7308  00D78C  0EAC               	movlw	low STR_98
  7309  00D78E  6E0D               	movwf	printf@f,c
  7310  00D790  0EFD               	movlw	high STR_98
  7311  00D792  6E0E               	movwf	printf@f+1,c
  7312  00D794  EC9A  F064         	call	_printf	;wreg free
  7313                           
  7314                           ;standbyMode.c: 1020: _delay((unsigned long)((700)*(40000000/4000.0)));
  7315  00D798  0E24               	movlw	36
  7316  00D79A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7317  00D79C  0E83               	movlw	131
  7318  00D79E  6E2B               	movwf	??_displayLogs& (0+255),c
  7319  00D7A0  0ECF               	movlw	207
  7320  00D7A2                     u14257:
  7321  00D7A2  2EE8               	decfsz	wreg,f,c
  7322  00D7A4  D7FE               	bra	u14257
  7323  00D7A6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7324  00D7A8  D7FC               	bra	u14257
  7325  00D7AA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7326  00D7AC  D7FA               	bra	u14257
  7327  00D7AE  F000               	nop	
  7328  00D7B0  A281               	btfss	3969,1,c	;volatile
  7329  00D7B2  D7FE               	goto	l942
  7330                           
  7331                           ;standbyMode.c: 1023: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  7332  00D7B4  3881               	swapf	3969,w,c	;volatile
  7333  00D7B6  0B0F               	andlw	15
  7334  00D7B8  0B0F               	andlw	15
  7335  00D7BA  6E41               	movwf	displayLogs@keypress3,c
  7336  00D7BC  B281               	btfsc	3969,1,c	;volatile
  7337  00D7BE  D7FE               	goto	l945
  7338                           
  7339                           ;standbyMode.c: 1025: return keypress3;
  7340  00D7C0  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  7341  00D7C4  6A2A               	clrf	?_displayLogs+1,c
  7342  00D7C6  0012               	return		;funcret
  7343  00D7C8                     __end_of_displayLogs:
  7344                           	opt stack 0
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           postinc0	equ	0xFEE
  7352                           wreg	equ	0xFE8
  7353                           postdec1	equ	0xFE5
  7354                           plusw1	equ	0xFE3
  7355                           fsr1l	equ	0xFE1
  7356                           indf2	equ	0xFDF
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           plusw2	equ	0xFDB
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function _shiftEEPROM *****************
  7365 ;; Defined at:
  7366 ;;		line 68 in file "EEPROMstorage.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  i               2    5[COMRAM] unsigned int 
  7371 ;;  temp            2    3[COMRAM] unsigned int 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      void 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0, cstack
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;Total ram usage:        5 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    1
  7388 ;; This function calls:
  7389 ;;		_readEEPROM
  7390 ;;		_writeEEPROM
  7391 ;; This function is called by:
  7392 ;;		_standbyMode
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text7
  7397  00AEBC                     __ptext7:
  7398                           	opt stack 0
  7399  00AEBC                     _shiftEEPROM:
  7400                           	opt stack 28
  7401                           
  7402                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  7403                           
  7404                           ;incstack = 0
  7405  00AEBC  0E00               	movlw	0
  7406  00AEBE  6E07               	movwf	shiftEEPROM@i+1,c
  7407  00AEC0  0E00               	movlw	0
  7408  00AEC2  6E06               	movwf	shiftEEPROM@i,c
  7409                           
  7410                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  7411  00AEC4  0E00               	movlw	0
  7412  00AEC6  6E05               	movwf	shiftEEPROM@temp+1,c
  7413  00AEC8  0E00               	movlw	0
  7414  00AECA  6E04               	movwf	shiftEEPROM@temp,c
  7415                           
  7416                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  7417  00AECC  0E00               	movlw	0
  7418  00AECE  6E07               	movwf	shiftEEPROM@i+1,c
  7419  00AED0  0E46               	movlw	70
  7420  00AED2  6E06               	movwf	shiftEEPROM@i,c
  7421  00AED4                     l9114:
  7422  00AED4  5007               	movf	shiftEEPROM@i+1,w,c
  7423  00AED6  E114               	bnz	l9124
  7424  00AED8  0E69               	movlw	105
  7425  00AEDA  5C06               	subwf	shiftEEPROM@i,w,c
  7426  00AEDC  B0D8               	btfsc	status,0,c
  7427  00AEDE  D010               	goto	u11980
  7428                           
  7429                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  7430  00AEE0  5006               	movf	shiftEEPROM@i,w,c
  7431  00AEE2  ECDD  F054         	call	_readEEPROM
  7432  00AEE6  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7433  00AEE8  5003               	movf	??_shiftEEPROM,w,c
  7434  00AEEA  6E04               	movwf	shiftEEPROM@temp,c
  7435  00AEEC  6A05               	clrf	shiftEEPROM@temp+1,c
  7436                           
  7437                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  7438  00AEEE  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7439  00AEF2  5006               	movf	shiftEEPROM@i,w,c
  7440  00AEF4  0F23               	addlw	35
  7441  00AEF6  EC38  F055         	call	_writeEEPROM
  7442  00AEFA  4A06               	infsnz	shiftEEPROM@i,f,c
  7443  00AEFC  2A07               	incf	shiftEEPROM@i+1,f,c
  7444  00AEFE  D7EA               	goto	l9114
  7445  00AF00                     u11980:
  7446  00AF00                     l9124:
  7447                           
  7448                           ;EEPROMstorage.c: 74: }
  7449                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  7450  00AF00  0E00               	movlw	0
  7451  00AF02  6E07               	movwf	shiftEEPROM@i+1,c
  7452  00AF04  0E23               	movlw	35
  7453  00AF06  6E06               	movwf	shiftEEPROM@i,c
  7454  00AF08                     l9126:
  7455  00AF08  5007               	movf	shiftEEPROM@i+1,w,c
  7456  00AF0A  E114               	bnz	l9136
  7457  00AF0C  0E46               	movlw	70
  7458  00AF0E  5C06               	subwf	shiftEEPROM@i,w,c
  7459  00AF10  B0D8               	btfsc	status,0,c
  7460  00AF12  D010               	goto	u12000
  7461                           
  7462                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  7463  00AF14  5006               	movf	shiftEEPROM@i,w,c
  7464  00AF16  ECDD  F054         	call	_readEEPROM
  7465  00AF1A  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7466  00AF1C  5003               	movf	??_shiftEEPROM,w,c
  7467  00AF1E  6E04               	movwf	shiftEEPROM@temp,c
  7468  00AF20  6A05               	clrf	shiftEEPROM@temp+1,c
  7469                           
  7470                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  7471  00AF22  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7472  00AF26  5006               	movf	shiftEEPROM@i,w,c
  7473  00AF28  0F23               	addlw	35
  7474  00AF2A  EC38  F055         	call	_writeEEPROM
  7475  00AF2E  4A06               	infsnz	shiftEEPROM@i,f,c
  7476  00AF30  2A07               	incf	shiftEEPROM@i+1,f,c
  7477  00AF32  D7EA               	goto	l9126
  7478  00AF34                     u12000:
  7479  00AF34                     l9136:
  7480                           
  7481                           ;EEPROMstorage.c: 79: }
  7482                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  7483  00AF34  0E00               	movlw	0
  7484  00AF36  6E07               	movwf	shiftEEPROM@i+1,c
  7485  00AF38  0E00               	movlw	0
  7486  00AF3A  6E06               	movwf	shiftEEPROM@i,c
  7487  00AF3C                     l9138:
  7488  00AF3C  5007               	movf	shiftEEPROM@i+1,w,c
  7489  00AF3E  E114               	bnz	l1277
  7490  00AF40  0E23               	movlw	35
  7491  00AF42  5C06               	subwf	shiftEEPROM@i,w,c
  7492  00AF44  B0D8               	btfsc	status,0,c
  7493  00AF46  0012               	return	
  7494                           
  7495                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  7496  00AF48  5006               	movf	shiftEEPROM@i,w,c
  7497  00AF4A  ECDD  F054         	call	_readEEPROM
  7498  00AF4E  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7499  00AF50  5003               	movf	??_shiftEEPROM,w,c
  7500  00AF52  6E04               	movwf	shiftEEPROM@temp,c
  7501  00AF54  6A05               	clrf	shiftEEPROM@temp+1,c
  7502                           
  7503                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  7504  00AF56  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7505  00AF5A  5006               	movf	shiftEEPROM@i,w,c
  7506  00AF5C  0F23               	addlw	35
  7507  00AF5E  EC38  F055         	call	_writeEEPROM
  7508  00AF62  4A06               	infsnz	shiftEEPROM@i,f,c
  7509  00AF64  2A07               	incf	shiftEEPROM@i+1,f,c
  7510  00AF66  D7EA               	goto	l9138
  7511  00AF68                     l1277:
  7512  00AF68  0012               	return		;funcret
  7513  00AF6A                     __end_of_shiftEEPROM:
  7514                           	opt stack 0
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           postdec1	equ	0xFE5
  7524                           plusw1	equ	0xFE3
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           plusw2	equ	0xFDB
  7530                           fsr2h	equ	0xFDA
  7531                           fsr2l	equ	0xFD9
  7532                           status	equ	0xFD8
  7533                           
  7534 ;; *************** function _printFoodInput *****************
  7535 ;; Defined at:
  7536 ;;		line 839 in file "standbyMode.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;  food            2    0[COMRAM] unsigned int 
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  2    0[COMRAM] unsigned int 
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7550 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;Total ram usage:        2 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_standbyMode
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text8
  7564  00C042                     __ptext8:
  7565                           	opt stack 0
  7566  00C042                     _printFoodInput:
  7567                           	opt stack 29
  7568                           
  7569                           ;standbyMode.c: 842: if (food == 1 || food == 3 || food == 5){
  7570                           
  7571                           ;incstack = 0
  7572  00C042  0401               	decf	printFoodInput@food,w,c
  7573  00C044  1002               	iorwf	printFoodInput@food+1,w,c
  7574  00C046  B4D8               	btfsc	status,2,c
  7575  00C048  D00A               	goto	u10260
  7576  00C04A  0E03               	movlw	3
  7577  00C04C  1801               	xorwf	printFoodInput@food,w,c
  7578  00C04E  1002               	iorwf	printFoodInput@food+1,w,c
  7579  00C050  B4D8               	btfsc	status,2,c
  7580  00C052  D005               	goto	u10260
  7581  00C054  0E05               	movlw	5
  7582  00C056  1801               	xorwf	printFoodInput@food,w,c
  7583  00C058  1002               	iorwf	printFoodInput@food+1,w,c
  7584  00C05A  A4D8               	btfss	status,2,c
  7585  00C05C  D005               	goto	l861
  7586  00C05E                     u10260:
  7587                           
  7588                           ;standbyMode.c: 843: return 0;
  7589  00C05E  0E00               	movlw	0
  7590  00C060  6E02               	movwf	?_printFoodInput+1,c
  7591  00C062  0E00               	movlw	0
  7592  00C064  6E01               	movwf	?_printFoodInput,c
  7593                           
  7594                           ;standbyMode.c: 844: }
  7595  00C066  0012               	return	
  7596  00C068                     l861:
  7597                           
  7598                           ;standbyMode.c: 847: else if (food == 2 || food == 4 || food == 6){
  7599  00C068  0E02               	movlw	2
  7600  00C06A  1801               	xorwf	printFoodInput@food,w,c
  7601  00C06C  1002               	iorwf	printFoodInput@food+1,w,c
  7602  00C06E  B4D8               	btfsc	status,2,c
  7603  00C070  D00A               	goto	u10290
  7604  00C072  0E04               	movlw	4
  7605  00C074  1801               	xorwf	printFoodInput@food,w,c
  7606  00C076  1002               	iorwf	printFoodInput@food+1,w,c
  7607  00C078  B4D8               	btfsc	status,2,c
  7608  00C07A  D005               	goto	u10290
  7609  00C07C  0E06               	movlw	6
  7610  00C07E  1801               	xorwf	printFoodInput@food,w,c
  7611  00C080  1002               	iorwf	printFoodInput@food+1,w,c
  7612  00C082  A4D8               	btfss	status,2,c
  7613  00C084  D005               	goto	l866
  7614  00C086                     u10290:
  7615                           
  7616                           ;standbyMode.c: 848: return 1;
  7617  00C086  0E00               	movlw	0
  7618  00C088  6E02               	movwf	?_printFoodInput+1,c
  7619  00C08A  0E01               	movlw	1
  7620  00C08C  6E01               	movwf	?_printFoodInput,c
  7621                           
  7622                           ;standbyMode.c: 849: }
  7623  00C08E  0012               	return	
  7624  00C090                     l866:
  7625                           
  7626                           ;standbyMode.c: 852: else if (food == 7){
  7627  00C090  0E07               	movlw	7
  7628  00C092  1801               	xorwf	printFoodInput@food,w,c
  7629  00C094  1002               	iorwf	printFoodInput@food+1,w,c
  7630  00C096  A4D8               	btfss	status,2,c
  7631  00C098  D005               	goto	l870
  7632                           
  7633                           ;standbyMode.c: 853: return 2;
  7634  00C09A  0E00               	movlw	0
  7635  00C09C  6E02               	movwf	?_printFoodInput+1,c
  7636  00C09E  0E02               	movlw	2
  7637  00C0A0  6E01               	movwf	?_printFoodInput,c
  7638                           
  7639                           ;standbyMode.c: 854: }
  7640  00C0A2  0012               	return	
  7641  00C0A4                     l870:
  7642                           
  7643                           ;standbyMode.c: 857: else if (food == 8 || food == 12 || food == 17){
  7644  00C0A4  0E08               	movlw	8
  7645  00C0A6  1801               	xorwf	printFoodInput@food,w,c
  7646  00C0A8  1002               	iorwf	printFoodInput@food+1,w,c
  7647  00C0AA  B4D8               	btfsc	status,2,c
  7648  00C0AC  D00A               	goto	u10330
  7649  00C0AE  0E0C               	movlw	12
  7650  00C0B0  1801               	xorwf	printFoodInput@food,w,c
  7651  00C0B2  1002               	iorwf	printFoodInput@food+1,w,c
  7652  00C0B4  B4D8               	btfsc	status,2,c
  7653  00C0B6  D005               	goto	u10330
  7654  00C0B8  0E11               	movlw	17
  7655  00C0BA  1801               	xorwf	printFoodInput@food,w,c
  7656  00C0BC  1002               	iorwf	printFoodInput@food+1,w,c
  7657  00C0BE  A4D8               	btfss	status,2,c
  7658  00C0C0  D005               	goto	l872
  7659  00C0C2                     u10330:
  7660                           
  7661                           ;standbyMode.c: 858: return 3;
  7662  00C0C2  0E00               	movlw	0
  7663  00C0C4  6E02               	movwf	?_printFoodInput+1,c
  7664  00C0C6  0E03               	movlw	3
  7665  00C0C8  6E01               	movwf	?_printFoodInput,c
  7666                           
  7667                           ;standbyMode.c: 859: }
  7668  00C0CA  0012               	return	
  7669  00C0CC                     l872:
  7670                           
  7671                           ;standbyMode.c: 862: else if (food == 9 || food == 13 || food == 18){
  7672  00C0CC  0E09               	movlw	9
  7673  00C0CE  1801               	xorwf	printFoodInput@food,w,c
  7674  00C0D0  1002               	iorwf	printFoodInput@food+1,w,c
  7675  00C0D2  B4D8               	btfsc	status,2,c
  7676  00C0D4  D00A               	goto	u10360
  7677  00C0D6  0E0D               	movlw	13
  7678  00C0D8  1801               	xorwf	printFoodInput@food,w,c
  7679  00C0DA  1002               	iorwf	printFoodInput@food+1,w,c
  7680  00C0DC  B4D8               	btfsc	status,2,c
  7681  00C0DE  D005               	goto	u10360
  7682  00C0E0  0E12               	movlw	18
  7683  00C0E2  1801               	xorwf	printFoodInput@food,w,c
  7684  00C0E4  1002               	iorwf	printFoodInput@food+1,w,c
  7685  00C0E6  A4D8               	btfss	status,2,c
  7686  00C0E8  D005               	goto	l876
  7687  00C0EA                     u10360:
  7688                           
  7689                           ;standbyMode.c: 863: return 4;
  7690  00C0EA  0E00               	movlw	0
  7691  00C0EC  6E02               	movwf	?_printFoodInput+1,c
  7692  00C0EE  0E04               	movlw	4
  7693  00C0F0  6E01               	movwf	?_printFoodInput,c
  7694                           
  7695                           ;standbyMode.c: 864: }
  7696  00C0F2  0012               	return	
  7697  00C0F4                     l876:
  7698                           
  7699                           ;standbyMode.c: 867: else if (food == 14 || food == 19){
  7700  00C0F4  0E0E               	movlw	14
  7701  00C0F6  1801               	xorwf	printFoodInput@food,w,c
  7702  00C0F8  1002               	iorwf	printFoodInput@food+1,w,c
  7703  00C0FA  B4D8               	btfsc	status,2,c
  7704  00C0FC  D005               	goto	u10380
  7705  00C0FE  0E13               	movlw	19
  7706  00C100  1801               	xorwf	printFoodInput@food,w,c
  7707  00C102  1002               	iorwf	printFoodInput@food+1,w,c
  7708  00C104  A4D8               	btfss	status,2,c
  7709  00C106  D005               	goto	l880
  7710  00C108                     u10380:
  7711                           
  7712                           ;standbyMode.c: 868: return 5;
  7713  00C108  0E00               	movlw	0
  7714  00C10A  6E02               	movwf	?_printFoodInput+1,c
  7715  00C10C  0E05               	movlw	5
  7716  00C10E  6E01               	movwf	?_printFoodInput,c
  7717                           
  7718                           ;standbyMode.c: 869: }
  7719  00C110  0012               	return	
  7720  00C112                     l880:
  7721                           
  7722                           ;standbyMode.c: 872: else if (food == 10 || food == 15 || food == 20){
  7723  00C112  0E0A               	movlw	10
  7724  00C114  1801               	xorwf	printFoodInput@food,w,c
  7725  00C116  1002               	iorwf	printFoodInput@food+1,w,c
  7726  00C118  B4D8               	btfsc	status,2,c
  7727  00C11A  D00A               	goto	u10410
  7728  00C11C  0E0F               	movlw	15
  7729  00C11E  1801               	xorwf	printFoodInput@food,w,c
  7730  00C120  1002               	iorwf	printFoodInput@food+1,w,c
  7731  00C122  B4D8               	btfsc	status,2,c
  7732  00C124  D005               	goto	u10410
  7733  00C126  0E14               	movlw	20
  7734  00C128  1801               	xorwf	printFoodInput@food,w,c
  7735  00C12A  1002               	iorwf	printFoodInput@food+1,w,c
  7736  00C12C  A4D8               	btfss	status,2,c
  7737  00C12E  D005               	goto	l884
  7738  00C130                     u10410:
  7739                           
  7740                           ;standbyMode.c: 873: return 6;
  7741  00C130  0E00               	movlw	0
  7742  00C132  6E02               	movwf	?_printFoodInput+1,c
  7743  00C134  0E06               	movlw	6
  7744  00C136  6E01               	movwf	?_printFoodInput,c
  7745                           
  7746                           ;standbyMode.c: 874: }
  7747  00C138  0012               	return	
  7748  00C13A                     l884:
  7749                           
  7750                           ;standbyMode.c: 877: else if (food == 11 || food == 16 || food == 21){
  7751  00C13A  0E0B               	movlw	11
  7752  00C13C  1801               	xorwf	printFoodInput@food,w,c
  7753  00C13E  1002               	iorwf	printFoodInput@food+1,w,c
  7754  00C140  B4D8               	btfsc	status,2,c
  7755  00C142  D00A               	goto	u10440
  7756  00C144  0E10               	movlw	16
  7757  00C146  1801               	xorwf	printFoodInput@food,w,c
  7758  00C148  1002               	iorwf	printFoodInput@food+1,w,c
  7759  00C14A  B4D8               	btfsc	status,2,c
  7760  00C14C  D005               	goto	u10440
  7761  00C14E  0E15               	movlw	21
  7762  00C150  1801               	xorwf	printFoodInput@food,w,c
  7763  00C152  1002               	iorwf	printFoodInput@food+1,w,c
  7764  00C154  A4D8               	btfss	status,2,c
  7765  00C156  D005               	goto	l888
  7766  00C158                     u10440:
  7767                           
  7768                           ;standbyMode.c: 878: return 7;
  7769  00C158  0E00               	movlw	0
  7770  00C15A  6E02               	movwf	?_printFoodInput+1,c
  7771  00C15C  0E07               	movlw	7
  7772  00C15E  6E01               	movwf	?_printFoodInput,c
  7773                           
  7774                           ;standbyMode.c: 879: }
  7775  00C160  0012               	return	
  7776  00C162                     l888:
  7777                           
  7778                           ;standbyMode.c: 882: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  7779  00C162  0E16               	movlw	22
  7780  00C164  1801               	xorwf	printFoodInput@food,w,c
  7781  00C166  1002               	iorwf	printFoodInput@food+1,w,c
  7782  00C168  B4D8               	btfsc	status,2,c
  7783  00C16A  D01E               	goto	u10510
  7784  00C16C  0E18               	movlw	24
  7785  00C16E  1801               	xorwf	printFoodInput@food,w,c
  7786  00C170  1002               	iorwf	printFoodInput@food+1,w,c
  7787  00C172  B4D8               	btfsc	status,2,c
  7788  00C174  D019               	goto	u10510
  7789  00C176  0E1A               	movlw	26
  7790  00C178  1801               	xorwf	printFoodInput@food,w,c
  7791  00C17A  1002               	iorwf	printFoodInput@food+1,w,c
  7792  00C17C  B4D8               	btfsc	status,2,c
  7793  00C17E  D014               	goto	u10510
  7794  00C180  0E1C               	movlw	28
  7795  00C182  1801               	xorwf	printFoodInput@food,w,c
  7796  00C184  1002               	iorwf	printFoodInput@food+1,w,c
  7797  00C186  B4D8               	btfsc	status,2,c
  7798  00C188  D00F               	goto	u10510
  7799  00C18A  0E20               	movlw	32
  7800  00C18C  1801               	xorwf	printFoodInput@food,w,c
  7801  00C18E  1002               	iorwf	printFoodInput@food+1,w,c
  7802  00C190  B4D8               	btfsc	status,2,c
  7803  00C192  D00A               	goto	u10510
  7804  00C194  0E24               	movlw	36
  7805  00C196  1801               	xorwf	printFoodInput@food,w,c
  7806  00C198  1002               	iorwf	printFoodInput@food+1,w,c
  7807  00C19A  B4D8               	btfsc	status,2,c
  7808  00C19C  D005               	goto	u10510
  7809  00C19E  0E26               	movlw	38
  7810  00C1A0  1801               	xorwf	printFoodInput@food,w,c
  7811  00C1A2  1002               	iorwf	printFoodInput@food+1,w,c
  7812  00C1A4  A4D8               	btfss	status,2,c
  7813  00C1A6  D005               	goto	l892
  7814  00C1A8                     u10510:
  7815                           
  7816                           ;standbyMode.c: 883: return 8;
  7817  00C1A8  0E00               	movlw	0
  7818  00C1AA  6E02               	movwf	?_printFoodInput+1,c
  7819  00C1AC  0E08               	movlw	8
  7820  00C1AE  6E01               	movwf	?_printFoodInput,c
  7821                           
  7822                           ;standbyMode.c: 884: }
  7823  00C1B0  0012               	return	
  7824  00C1B2                     l892:
  7825                           
  7826                           ;standbyMode.c: 887: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  7827  00C1B2  0E17               	movlw	23
  7828  00C1B4  1801               	xorwf	printFoodInput@food,w,c
  7829  00C1B6  1002               	iorwf	printFoodInput@food+1,w,c
  7830  00C1B8  B4D8               	btfsc	status,2,c
  7831  00C1BA  D019               	goto	u10570
  7832  00C1BC  0E19               	movlw	25
  7833  00C1BE  1801               	xorwf	printFoodInput@food,w,c
  7834  00C1C0  1002               	iorwf	printFoodInput@food+1,w,c
  7835  00C1C2  B4D8               	btfsc	status,2,c
  7836  00C1C4  D014               	goto	u10570
  7837  00C1C6  0E1D               	movlw	29
  7838  00C1C8  1801               	xorwf	printFoodInput@food,w,c
  7839  00C1CA  1002               	iorwf	printFoodInput@food+1,w,c
  7840  00C1CC  B4D8               	btfsc	status,2,c
  7841  00C1CE  D00F               	goto	u10570
  7842  00C1D0  0E21               	movlw	33
  7843  00C1D2  1801               	xorwf	printFoodInput@food,w,c
  7844  00C1D4  1002               	iorwf	printFoodInput@food+1,w,c
  7845  00C1D6  B4D8               	btfsc	status,2,c
  7846  00C1D8  D00A               	goto	u10570
  7847  00C1DA  0E25               	movlw	37
  7848  00C1DC  1801               	xorwf	printFoodInput@food,w,c
  7849  00C1DE  1002               	iorwf	printFoodInput@food+1,w,c
  7850  00C1E0  B4D8               	btfsc	status,2,c
  7851  00C1E2  D005               	goto	u10570
  7852  00C1E4  0E27               	movlw	39
  7853  00C1E6  1801               	xorwf	printFoodInput@food,w,c
  7854  00C1E8  1002               	iorwf	printFoodInput@food+1,w,c
  7855  00C1EA  A4D8               	btfss	status,2,c
  7856  00C1EC  D005               	goto	l896
  7857  00C1EE                     u10570:
  7858                           
  7859                           ;standbyMode.c: 888: return 9;
  7860  00C1EE  0E00               	movlw	0
  7861  00C1F0  6E02               	movwf	?_printFoodInput+1,c
  7862  00C1F2  0E09               	movlw	9
  7863  00C1F4  6E01               	movwf	?_printFoodInput,c
  7864                           
  7865                           ;standbyMode.c: 889: }
  7866  00C1F6  0012               	return	
  7867  00C1F8                     l896:
  7868                           
  7869                           ;standbyMode.c: 892: else if (food == 30 || food == 34 || food == 40){
  7870  00C1F8  0E1E               	movlw	30
  7871  00C1FA  1801               	xorwf	printFoodInput@food,w,c
  7872  00C1FC  1002               	iorwf	printFoodInput@food+1,w,c
  7873  00C1FE  B4D8               	btfsc	status,2,c
  7874  00C200  D00A               	goto	u10600
  7875  00C202  0E22               	movlw	34
  7876  00C204  1801               	xorwf	printFoodInput@food,w,c
  7877  00C206  1002               	iorwf	printFoodInput@food+1,w,c
  7878  00C208  B4D8               	btfsc	status,2,c
  7879  00C20A  D005               	goto	u10600
  7880  00C20C  0E28               	movlw	40
  7881  00C20E  1801               	xorwf	printFoodInput@food,w,c
  7882  00C210  1002               	iorwf	printFoodInput@food+1,w,c
  7883  00C212  A4D8               	btfss	status,2,c
  7884  00C214  D005               	goto	l900
  7885  00C216                     u10600:
  7886                           
  7887                           ;standbyMode.c: 893: return 10;
  7888  00C216  0E00               	movlw	0
  7889  00C218  6E02               	movwf	?_printFoodInput+1,c
  7890  00C21A  0E0A               	movlw	10
  7891  00C21C  6E01               	movwf	?_printFoodInput,c
  7892                           
  7893                           ;standbyMode.c: 894: }
  7894  00C21E  0012               	return	
  7895  00C220                     l900:
  7896                           
  7897                           ;standbyMode.c: 897: else if (food == 27 || food == 31 || food == 35 || food == 41){
  7898  00C220  0E1B               	movlw	27
  7899  00C222  1801               	xorwf	printFoodInput@food,w,c
  7900  00C224  1002               	iorwf	printFoodInput@food+1,w,c
  7901  00C226  B4D8               	btfsc	status,2,c
  7902  00C228  D00F               	goto	u10640
  7903  00C22A  0E1F               	movlw	31
  7904  00C22C  1801               	xorwf	printFoodInput@food,w,c
  7905  00C22E  1002               	iorwf	printFoodInput@food+1,w,c
  7906  00C230  B4D8               	btfsc	status,2,c
  7907  00C232  D00A               	goto	u10640
  7908  00C234  0E23               	movlw	35
  7909  00C236  1801               	xorwf	printFoodInput@food,w,c
  7910  00C238  1002               	iorwf	printFoodInput@food+1,w,c
  7911  00C23A  B4D8               	btfsc	status,2,c
  7912  00C23C  D005               	goto	u10640
  7913  00C23E  0E29               	movlw	41
  7914  00C240  1801               	xorwf	printFoodInput@food,w,c
  7915  00C242  1002               	iorwf	printFoodInput@food+1,w,c
  7916  00C244  A4D8               	btfss	status,2,c
  7917  00C246  D005               	goto	l904
  7918  00C248                     u10640:
  7919                           
  7920                           ;standbyMode.c: 898: return 11;
  7921  00C248  0E00               	movlw	0
  7922  00C24A  6E02               	movwf	?_printFoodInput+1,c
  7923  00C24C  0E0B               	movlw	11
  7924  00C24E  6E01               	movwf	?_printFoodInput,c
  7925                           
  7926                           ;standbyMode.c: 899: }
  7927  00C250  0012               	return	
  7928  00C252                     l904:
  7929                           
  7930                           ;standbyMode.c: 903: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  7931  00C252  0E2A               	movlw	42
  7932  00C254  1801               	xorwf	printFoodInput@food,w,c
  7933  00C256  1002               	iorwf	printFoodInput@food+1,w,c
  7934  00C258  B4D8               	btfsc	status,2,c
  7935  00C25A  D014               	goto	u10690
  7936  00C25C  0E2B               	movlw	43
  7937  00C25E  1801               	xorwf	printFoodInput@food,w,c
  7938  00C260  1002               	iorwf	printFoodInput@food+1,w,c
  7939  00C262  B4D8               	btfsc	status,2,c
  7940  00C264  D00F               	goto	u10690
  7941  00C266  0E2C               	movlw	44
  7942  00C268  1801               	xorwf	printFoodInput@food,w,c
  7943  00C26A  1002               	iorwf	printFoodInput@food+1,w,c
  7944  00C26C  B4D8               	btfsc	status,2,c
  7945  00C26E  D00A               	goto	u10690
  7946  00C270  0E2D               	movlw	45
  7947  00C272  1801               	xorwf	printFoodInput@food,w,c
  7948  00C274  1002               	iorwf	printFoodInput@food+1,w,c
  7949  00C276  B4D8               	btfsc	status,2,c
  7950  00C278  D005               	goto	u10690
  7951  00C27A  0E2E               	movlw	46
  7952  00C27C  1801               	xorwf	printFoodInput@food,w,c
  7953  00C27E  1002               	iorwf	printFoodInput@food+1,w,c
  7954  00C280  A4D8               	btfss	status,2,c
  7955  00C282  D005               	goto	l908
  7956  00C284                     u10690:
  7957                           
  7958                           ;standbyMode.c: 904: return 12;
  7959  00C284  0E00               	movlw	0
  7960  00C286  6E02               	movwf	?_printFoodInput+1,c
  7961  00C288  0E0C               	movlw	12
  7962  00C28A  6E01               	movwf	?_printFoodInput,c
  7963                           
  7964                           ;standbyMode.c: 905: }
  7965  00C28C  0012               	return	
  7966  00C28E                     l908:
  7967                           
  7968                           ;standbyMode.c: 907: else{
  7969                           ;standbyMode.c: 908: return 0;
  7970  00C28E  0E00               	movlw	0
  7971  00C290  6E02               	movwf	?_printFoodInput+1,c
  7972  00C292  0E00               	movlw	0
  7973  00C294  6E01               	movwf	?_printFoodInput,c
  7974  00C296  0012               	return	
  7975  00C298                     __end_of_printFoodInput:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           postinc0	equ	0xFEE
  7984                           wreg	equ	0xFE8
  7985                           postdec1	equ	0xFE5
  7986                           plusw1	equ	0xFE3
  7987                           fsr1l	equ	0xFE1
  7988                           indf2	equ	0xFDF
  7989                           postinc2	equ	0xFDE
  7990                           postdec2	equ	0xFDD
  7991                           plusw2	equ	0xFDB
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _getRound *****************
  7997 ;; Defined at:
  7998 ;;		line 243 in file "standbyMode.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  code            2    0[COMRAM] unsigned int 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  returnValue     2    4[COMRAM] unsigned int 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  2    0[COMRAM] unsigned int 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        6 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; This function calls:
  8019 ;;		Nothing
  8020 ;; This function is called by:
  8021 ;;		_standbyMode
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           	psect	text9
  8026  00B2C6                     __ptext9:
  8027                           	opt stack 0
  8028  00B2C6                     _getRound:
  8029                           	opt stack 29
  8030                           
  8031                           ;standbyMode.c: 244: unsigned int returnValue = 0;
  8032                           
  8033                           ;incstack = 0
  8034  00B2C6  0E00               	movlw	0
  8035  00B2C8  6E06               	movwf	getRound@returnValue+1,c
  8036  00B2CA  0E00               	movlw	0
  8037  00B2CC  6E05               	movwf	getRound@returnValue,c
  8038                           
  8039                           ;standbyMode.c: 245: switch(code){
  8040  00B2CE  D00D               	goto	l716
  8041  00B2D0                     
  8042                           ;standbyMode.c: 253: returnValue = 2;
  8043  00B2D0  0E00               	movlw	0
  8044  00B2D2  6E06               	movwf	getRound@returnValue+1,c
  8045  00B2D4  0E02               	movlw	2
  8046  00B2D6                     L22:
  8047  00B2D6  6E05               	movwf	getRound@returnValue,c
  8048                           
  8049                           ;standbyMode.c: 259: break;
  8050  00B2D8  D069               	goto	l718
  8051  00B2DA                     
  8052                           ;standbyMode.c: 388: returnValue = 1;
  8053                           
  8054                           ;standbyMode.c: 387: case 45:
  8055                           
  8056                           ;standbyMode.c: 384: break;
  8057                           
  8058                           ;standbyMode.c: 383: returnValue = 1;
  8059                           
  8060                           ;standbyMode.c: 382: case 44:
  8061                           
  8062                           ;standbyMode.c: 379: break;
  8063                           
  8064                           ;standbyMode.c: 378: returnValue = 1;
  8065  00B2DA  0E00               	movlw	0
  8066  00B2DC  6E06               	movwf	getRound@returnValue+1,c
  8067  00B2DE  0E01               	movlw	1
  8068  00B2E0  D7FA               	goto	L22
  8069  00B2E2                     
  8070                           ;standbyMode.c: 392: returnValue = 0;
  8071  00B2E2  0E00               	movlw	0
  8072  00B2E4  6E06               	movwf	getRound@returnValue+1,c
  8073  00B2E6  0E00               	movlw	0
  8074  00B2E8  D7F6               	goto	L22
  8075  00B2EA                     l716:
  8076  00B2EA  C001  F003         	movff	getRound@code,??_getRound
  8077  00B2EE  C002  F004         	movff	getRound@code+1,??_getRound+1
  8078                           
  8079                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8080                           ; Switch size 1, requested type "space"
  8081                           ; Number of cases is 1, Range of values is 0 to 0
  8082                           ; switch strategies available:
  8083                           ; Name         Instructions Cycles
  8084                           ; simple_byte            4     3 (average)
  8085                           ;	Chosen strategy is simple_byte
  8086  00B2F2  5004               	movf	??_getRound+1,w,c
  8087  00B2F4  0A00               	xorlw	0	; case 0
  8088  00B2F6  A4D8               	btfss	status,2,c
  8089  00B2F8  D7F4               	goto	l747
  8090                           
  8091                           ; Switch size 1, requested type "space"
  8092                           ; Number of cases is 29, Range of values is 1 to 45
  8093                           ; switch strategies available:
  8094                           ; Name         Instructions Cycles
  8095                           ; simple_byte           88    45 (average)
  8096                           ;	Chosen strategy is simple_byte
  8097  00B2FA  5003               	movf	??_getRound,w,c
  8098  00B2FC  0A01               	xorlw	1	; case 1
  8099  00B2FE  B4D8               	btfsc	status,2,c
  8100  00B300  D7EC               	goto	l744
  8101  00B302  0A03               	xorlw	3	; case 2
  8102  00B304  B4D8               	btfsc	status,2,c
  8103  00B306  D7E4               	goto	l719
  8104  00B308  0A0A               	xorlw	10	; case 8
  8105  00B30A  B4D8               	btfsc	status,2,c
  8106  00B30C  D7E6               	goto	l744
  8107  00B30E  0A01               	xorlw	1	; case 9
  8108  00B310  B4D8               	btfsc	status,2,c
  8109  00B312  D7E3               	goto	l744
  8110  00B314  0A03               	xorlw	3	; case 10
  8111  00B316  B4D8               	btfsc	status,2,c
  8112  00B318  D7DB               	goto	l719
  8113  00B31A  0A01               	xorlw	1	; case 11
  8114  00B31C  B4D8               	btfsc	status,2,c
  8115  00B31E  D7D8               	goto	l719
  8116  00B320  0A07               	xorlw	7	; case 12
  8117  00B322  B4D8               	btfsc	status,2,c
  8118  00B324  D7DA               	goto	l744
  8119  00B326  0A01               	xorlw	1	; case 13
  8120  00B328  B4D8               	btfsc	status,2,c
  8121  00B32A  D7D7               	goto	l744
  8122  00B32C  0A03               	xorlw	3	; case 14
  8123  00B32E  B4D8               	btfsc	status,2,c
  8124  00B330  D7D4               	goto	l744
  8125  00B332  0A01               	xorlw	1	; case 15
  8126  00B334  B4D8               	btfsc	status,2,c
  8127  00B336  D7CC               	goto	l719
  8128  00B338  0A1F               	xorlw	31	; case 16
  8129  00B33A  B4D8               	btfsc	status,2,c
  8130  00B33C  D7C9               	goto	l719
  8131  00B33E  0A06               	xorlw	6	; case 22
  8132  00B340  B4D8               	btfsc	status,2,c
  8133  00B342  D7C6               	goto	l719
  8134  00B344  0A01               	xorlw	1	; case 23
  8135  00B346  B4D8               	btfsc	status,2,c
  8136  00B348  D7C3               	goto	l719
  8137  00B34A  0A0F               	xorlw	15	; case 24
  8138  00B34C  B4D8               	btfsc	status,2,c
  8139  00B34E  D7C0               	goto	l719
  8140  00B350  0A01               	xorlw	1	; case 25
  8141  00B352  B4D8               	btfsc	status,2,c
  8142  00B354  D7BD               	goto	l719
  8143  00B356  0A03               	xorlw	3	; case 26
  8144  00B358  B4D8               	btfsc	status,2,c
  8145  00B35A  D7BF               	goto	l744
  8146  00B35C  0A01               	xorlw	1	; case 27
  8147  00B35E  B4D8               	btfsc	status,2,c
  8148  00B360  D7B7               	goto	l719
  8149  00B362  0A07               	xorlw	7	; case 28
  8150  00B364  B4D8               	btfsc	status,2,c
  8151  00B366  D7B9               	goto	l744
  8152  00B368  0A01               	xorlw	1	; case 29
  8153  00B36A  B4D8               	btfsc	status,2,c
  8154  00B36C  D7B6               	goto	l744
  8155  00B36E  0A03               	xorlw	3	; case 30
  8156  00B370  B4D8               	btfsc	status,2,c
  8157  00B372  D7B3               	goto	l744
  8158  00B374  0A01               	xorlw	1	; case 31
  8159  00B376  B4D8               	btfsc	status,2,c
  8160  00B378  D7AB               	goto	l719
  8161  00B37A  0A3F               	xorlw	63	; case 32
  8162  00B37C  B4D8               	btfsc	status,2,c
  8163  00B37E  D7AD               	goto	l744
  8164  00B380  0A01               	xorlw	1	; case 33
  8165  00B382  B4D8               	btfsc	status,2,c
  8166  00B384  D7AA               	goto	l744
  8167  00B386  0A03               	xorlw	3	; case 34
  8168  00B388  B4D8               	btfsc	status,2,c
  8169  00B38A  D7A7               	goto	l744
  8170  00B38C  0A01               	xorlw	1	; case 35
  8171  00B38E  B4D8               	btfsc	status,2,c
  8172  00B390  D79F               	goto	l719
  8173  00B392  0A09               	xorlw	9	; case 42
  8174  00B394  B4D8               	btfsc	status,2,c
  8175  00B396  D79C               	goto	l719
  8176  00B398  0A01               	xorlw	1	; case 43
  8177  00B39A  B4D8               	btfsc	status,2,c
  8178  00B39C  D79E               	goto	l744
  8179  00B39E  0A07               	xorlw	7	; case 44
  8180  00B3A0  B4D8               	btfsc	status,2,c
  8181  00B3A2  D79B               	goto	l744
  8182  00B3A4  0A01               	xorlw	1	; case 45
  8183  00B3A6  B4D8               	btfsc	status,2,c
  8184  00B3A8  D798               	goto	l744
  8185  00B3AA  D79B               	goto	l747
  8186  00B3AC                     l718:
  8187                           
  8188                           ;standbyMode.c: 395: return returnValue;
  8189  00B3AC  C005  F001         	movff	getRound@returnValue,?_getRound
  8190  00B3B0  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  8191  00B3B4  0012               	return		;funcret
  8192  00B3B6                     __end_of_getRound:
  8193                           	opt stack 0
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           postinc0	equ	0xFEE
  8201                           wreg	equ	0xFE8
  8202                           postdec1	equ	0xFE5
  8203                           plusw1	equ	0xFE3
  8204                           fsr1l	equ	0xFE1
  8205                           indf2	equ	0xFDF
  8206                           postinc2	equ	0xFDE
  8207                           postdec2	equ	0xFDD
  8208                           plusw2	equ	0xFDB
  8209                           fsr2h	equ	0xFDA
  8210                           fsr2l	equ	0xFD9
  8211                           status	equ	0xFD8
  8212                           
  8213 ;; *************** function _getLong *****************
  8214 ;; Defined at:
  8215 ;;		line 556 in file "standbyMode.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  code            2    0[COMRAM] unsigned int 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  returnValue     2    4[COMRAM] unsigned int 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  2    0[COMRAM] unsigned int 
  8222 ;; Registers used:
  8223 ;;		wreg, status,2, status,0
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8229 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;Total ram usage:        6 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; This function calls:
  8236 ;;		Nothing
  8237 ;; This function is called by:
  8238 ;;		_standbyMode
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text10
  8243  00B4B4                     __ptext10:
  8244                           	opt stack 0
  8245  00B4B4                     _getLong:
  8246                           	opt stack 29
  8247                           
  8248                           ;standbyMode.c: 557: unsigned int returnValue = 0;
  8249                           
  8250                           ;incstack = 0
  8251  00B4B4  0E00               	movlw	0
  8252  00B4B6  6E06               	movwf	getLong@returnValue+1,c
  8253  00B4B8  0E00               	movlw	0
  8254  00B4BA  6E05               	movwf	getLong@returnValue,c
  8255                           
  8256                           ;standbyMode.c: 559: switch(code){
  8257  00B4BC  D011               	goto	l786
  8258  00B4BE                     
  8259                           ;standbyMode.c: 577: returnValue = 1;
  8260  00B4BE  0E00               	movlw	0
  8261  00B4C0  6E06               	movwf	getLong@returnValue+1,c
  8262  00B4C2  0E01               	movlw	1
  8263  00B4C4  D007               	goto	L36
  8264  00B4C6                     l795:
  8265                           
  8266                           ;standbyMode.c: 607: returnValue = 2;
  8267                           
  8268                           ;standbyMode.c: 606: case 18:
  8269                           
  8270                           ;standbyMode.c: 603: break;
  8271                           
  8272                           ;standbyMode.c: 602: returnValue = 1;
  8273                           
  8274                           ;standbyMode.c: 601: case 17:
  8275                           
  8276                           ;standbyMode.c: 598: break;
  8277                           
  8278                           ;standbyMode.c: 597: returnValue = 2;
  8279  00B4C6  0E00               	movlw	0
  8280  00B4C8  6E06               	movwf	getLong@returnValue+1,c
  8281  00B4CA  0E02               	movlw	2
  8282  00B4CC  D003               	goto	L36
  8283  00B4CE                     l798:
  8284                           
  8285                           ;standbyMode.c: 612: returnValue = 3;
  8286  00B4CE  0E00               	movlw	0
  8287  00B4D0  6E06               	movwf	getLong@returnValue+1,c
  8288  00B4D2  0E03               	movlw	3
  8289  00B4D4                     L36:
  8290  00B4D4  6E05               	movwf	getLong@returnValue,c
  8291                           
  8292                           ;standbyMode.c: 633: break;
  8293  00B4D6  D074               	goto	l788
  8294  00B4D8                     
  8295                           ;standbyMode.c: 731: returnValue = 0;
  8296  00B4D8  0E00               	movlw	0
  8297  00B4DA  6E06               	movwf	getLong@returnValue+1,c
  8298  00B4DC  0E00               	movlw	0
  8299  00B4DE  D7FA               	goto	L36
  8300  00B4E0                     l786:
  8301  00B4E0  C001  F003         	movff	getLong@code,??_getLong
  8302  00B4E4  C002  F004         	movff	getLong@code+1,??_getLong+1
  8303                           
  8304                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8305                           ; Switch size 1, requested type "space"
  8306                           ; Number of cases is 1, Range of values is 0 to 0
  8307                           ; switch strategies available:
  8308                           ; Name         Instructions Cycles
  8309                           ; simple_byte            4     3 (average)
  8310                           ;	Chosen strategy is simple_byte
  8311  00B4E8  5004               	movf	??_getLong+1,w,c
  8312  00B4EA  0A00               	xorlw	0	; case 0
  8313  00B4EC  A4D8               	btfss	status,2,c
  8314  00B4EE  D7F4               	goto	l822
  8315                           
  8316                           ; Switch size 1, requested type "space"
  8317                           ; Number of cases is 34, Range of values is 5 to 46
  8318                           ; switch strategies available:
  8319                           ; Name         Instructions Cycles
  8320                           ; simple_byte          103    52 (average)
  8321                           ;	Chosen strategy is simple_byte
  8322  00B4F0  5003               	movf	??_getLong,w,c
  8323  00B4F2  0A05               	xorlw	5	; case 5
  8324  00B4F4  B4D8               	btfsc	status,2,c
  8325  00B4F6  D7E3               	goto	l791
  8326  00B4F8  0A03               	xorlw	3	; case 6
  8327  00B4FA  B4D8               	btfsc	status,2,c
  8328  00B4FC  D7E4               	goto	l795
  8329  00B4FE  0A01               	xorlw	1	; case 7
  8330  00B500  B4D8               	btfsc	status,2,c
  8331  00B502  D7E5               	goto	l798
  8332  00B504  0A0B               	xorlw	11	; case 12
  8333  00B506  B4D8               	btfsc	status,2,c
  8334  00B508  D7DA               	goto	l791
  8335  00B50A  0A01               	xorlw	1	; case 13
  8336  00B50C  B4D8               	btfsc	status,2,c
  8337  00B50E  D7DB               	goto	l795
  8338  00B510  0A03               	xorlw	3	; case 14
  8339  00B512  B4D8               	btfsc	status,2,c
  8340  00B514  D7DC               	goto	l798
  8341  00B516  0A01               	xorlw	1	; case 15
  8342  00B518  B4D8               	btfsc	status,2,c
  8343  00B51A  D7D1               	goto	l791
  8344  00B51C  0A1F               	xorlw	31	; case 16
  8345  00B51E  B4D8               	btfsc	status,2,c
  8346  00B520  D7D2               	goto	l795
  8347  00B522  0A01               	xorlw	1	; case 17
  8348  00B524  B4D8               	btfsc	status,2,c
  8349  00B526  D7CB               	goto	l791
  8350  00B528  0A03               	xorlw	3	; case 18
  8351  00B52A  B4D8               	btfsc	status,2,c
  8352  00B52C  D7CC               	goto	l795
  8353  00B52E  0A01               	xorlw	1	; case 19
  8354  00B530  B4D8               	btfsc	status,2,c
  8355  00B532  D7CD               	goto	l798
  8356  00B534  0A07               	xorlw	7	; case 20
  8357  00B536  B4D8               	btfsc	status,2,c
  8358  00B538  D7C2               	goto	l791
  8359  00B53A  0A01               	xorlw	1	; case 21
  8360  00B53C  B4D8               	btfsc	status,2,c
  8361  00B53E  D7C3               	goto	l795
  8362  00B540  0A0D               	xorlw	13	; case 24
  8363  00B542  B4D8               	btfsc	status,2,c
  8364  00B544  D7BC               	goto	l791
  8365  00B546  0A01               	xorlw	1	; case 25
  8366  00B548  B4D8               	btfsc	status,2,c
  8367  00B54A  D7BD               	goto	l795
  8368  00B54C  0A05               	xorlw	5	; case 28
  8369  00B54E  B4D8               	btfsc	status,2,c
  8370  00B550  D7BA               	goto	l795
  8371  00B552  0A01               	xorlw	1	; case 29
  8372  00B554  B4D8               	btfsc	status,2,c
  8373  00B556  D7BB               	goto	l798
  8374  00B558  0A03               	xorlw	3	; case 30
  8375  00B55A  B4D8               	btfsc	status,2,c
  8376  00B55C  D7B8               	goto	l798
  8377  00B55E  0A01               	xorlw	1	; case 31
  8378  00B560  B4D8               	btfsc	status,2,c
  8379  00B562  D7B1               	goto	l795
  8380  00B564  0A3F               	xorlw	63	; case 32
  8381  00B566  B4D8               	btfsc	status,2,c
  8382  00B568  D7AA               	goto	l791
  8383  00B56A  0A01               	xorlw	1	; case 33
  8384  00B56C  B4D8               	btfsc	status,2,c
  8385  00B56E  D7AB               	goto	l795
  8386  00B570  0A03               	xorlw	3	; case 34
  8387  00B572  B4D8               	btfsc	status,2,c
  8388  00B574  D7A4               	goto	l791
  8389  00B576  0A01               	xorlw	1	; case 35
  8390  00B578  B4D8               	btfsc	status,2,c
  8391  00B57A  D7A1               	goto	l791
  8392  00B57C  0A07               	xorlw	7	; case 36
  8393  00B57E  B4D8               	btfsc	status,2,c
  8394  00B580  D79E               	goto	l791
  8395  00B582  0A01               	xorlw	1	; case 37
  8396  00B584  B4D8               	btfsc	status,2,c
  8397  00B586  D79F               	goto	l795
  8398  00B588  0A03               	xorlw	3	; case 38
  8399  00B58A  B4D8               	btfsc	status,2,c
  8400  00B58C  D79C               	goto	l795
  8401  00B58E  0A01               	xorlw	1	; case 39
  8402  00B590  B4D8               	btfsc	status,2,c
  8403  00B592  D79D               	goto	l798
  8404  00B594  0A0F               	xorlw	15	; case 40
  8405  00B596  B4D8               	btfsc	status,2,c
  8406  00B598  D79A               	goto	l798
  8407  00B59A  0A01               	xorlw	1	; case 41
  8408  00B59C  B4D8               	btfsc	status,2,c
  8409  00B59E  D793               	goto	l795
  8410  00B5A0  0A03               	xorlw	3	; case 42
  8411  00B5A2  B4D8               	btfsc	status,2,c
  8412  00B5A4  D78C               	goto	l791
  8413  00B5A6  0A01               	xorlw	1	; case 43
  8414  00B5A8  B4D8               	btfsc	status,2,c
  8415  00B5AA  D789               	goto	l791
  8416  00B5AC  0A07               	xorlw	7	; case 44
  8417  00B5AE  B4D8               	btfsc	status,2,c
  8418  00B5B0  D78A               	goto	l795
  8419  00B5B2  0A01               	xorlw	1	; case 45
  8420  00B5B4  B4D8               	btfsc	status,2,c
  8421  00B5B6  D78B               	goto	l798
  8422  00B5B8  0A03               	xorlw	3	; case 46
  8423  00B5BA  B4D8               	btfsc	status,2,c
  8424  00B5BC  D788               	goto	l798
  8425  00B5BE  D78C               	goto	l822
  8426  00B5C0                     l788:
  8427                           
  8428                           ;standbyMode.c: 734: return returnValue;
  8429  00B5C0  C005  F001         	movff	getLong@returnValue,?_getLong
  8430  00B5C4  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  8431  00B5C8  0012               	return		;funcret
  8432  00B5CA                     __end_of_getLong:
  8433                           	opt stack 0
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodh	equ	0xFF4
  8439                           prodl	equ	0xFF3
  8440                           postinc0	equ	0xFEE
  8441                           wreg	equ	0xFE8
  8442                           postdec1	equ	0xFE5
  8443                           plusw1	equ	0xFE3
  8444                           fsr1l	equ	0xFE1
  8445                           indf2	equ	0xFDF
  8446                           postinc2	equ	0xFDE
  8447                           postdec2	equ	0xFDD
  8448                           plusw2	equ	0xFDB
  8449                           fsr2h	equ	0xFDA
  8450                           fsr2l	equ	0xFD9
  8451                           status	equ	0xFD8
  8452                           
  8453 ;; *************** function _getFlat *****************
  8454 ;; Defined at:
  8455 ;;		line 399 in file "standbyMode.c"
  8456 ;; Parameters:    Size  Location     Type
  8457 ;;  code            2    0[COMRAM] unsigned int 
  8458 ;; Auto vars:     Size  Location     Type
  8459 ;;  returnValue     2    4[COMRAM] unsigned int 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  2    0[COMRAM] unsigned int 
  8462 ;; Registers used:
  8463 ;;		wreg, status,2, status,0
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;Total ram usage:        6 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; This function calls:
  8476 ;;		Nothing
  8477 ;; This function is called by:
  8478 ;;		_standbyMode
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           	psect	text11
  8483  00B1D6                     __ptext11:
  8484                           	opt stack 0
  8485  00B1D6                     _getFlat:
  8486                           	opt stack 29
  8487                           
  8488                           ;standbyMode.c: 400: unsigned int returnValue = 0;
  8489                           
  8490                           ;incstack = 0
  8491  00B1D6  0E00               	movlw	0
  8492  00B1D8  6E06               	movwf	getFlat@returnValue+1,c
  8493  00B1DA  0E00               	movlw	0
  8494  00B1DC  6E05               	movwf	getFlat@returnValue,c
  8495                           
  8496                           ;standbyMode.c: 402: switch(code){
  8497  00B1DE  D00D               	goto	l751
  8498  00B1E0                     
  8499                           ;standbyMode.c: 405: returnValue = 1;
  8500  00B1E0  0E00               	movlw	0
  8501  00B1E2  6E06               	movwf	getFlat@returnValue+1,c
  8502  00B1E4  0E01               	movlw	1
  8503  00B1E6  D003               	goto	L42
  8504  00B1E8                     
  8505                           ;standbyMode.c: 430: returnValue = 2;
  8506                           
  8507                           ;standbyMode.c: 429: case 11:
  8508                           
  8509                           ;standbyMode.c: 426: break;
  8510                           
  8511                           ;standbyMode.c: 425: returnValue = 1;
  8512                           
  8513                           ;standbyMode.c: 424: case 10:
  8514                           
  8515                           ;standbyMode.c: 421: break;
  8516                           
  8517                           ;standbyMode.c: 420: returnValue = 2;
  8518                           
  8519                           ;standbyMode.c: 419: case 9:
  8520                           
  8521                           ;standbyMode.c: 416: break;
  8522                           
  8523                           ;standbyMode.c: 415: returnValue = 1;
  8524                           
  8525                           ;standbyMode.c: 414: case 8:
  8526                           
  8527                           ;standbyMode.c: 411: break;
  8528                           
  8529                           ;standbyMode.c: 410: returnValue = 2;
  8530  00B1E8  0E00               	movlw	0
  8531  00B1EA  6E06               	movwf	getFlat@returnValue+1,c
  8532  00B1EC  0E02               	movlw	2
  8533  00B1EE                     L42:
  8534  00B1EE  6E05               	movwf	getFlat@returnValue,c
  8535                           
  8536                           ;standbyMode.c: 436: break;
  8537  00B1F0  D065               	goto	l753
  8538  00B1F2                     
  8539                           ;standbyMode.c: 549: returnValue = 0;
  8540  00B1F2  0E00               	movlw	0
  8541  00B1F4  6E06               	movwf	getFlat@returnValue+1,c
  8542  00B1F6  0E00               	movlw	0
  8543  00B1F8  D7FA               	goto	L42
  8544  00B1FA                     l751:
  8545  00B1FA  C001  F003         	movff	getFlat@code,??_getFlat
  8546  00B1FE  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  8547                           
  8548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8549                           ; Switch size 1, requested type "space"
  8550                           ; Number of cases is 1, Range of values is 0 to 0
  8551                           ; switch strategies available:
  8552                           ; Name         Instructions Cycles
  8553                           ; simple_byte            4     3 (average)
  8554                           ;	Chosen strategy is simple_byte
  8555  00B202  5004               	movf	??_getFlat+1,w,c
  8556  00B204  0A00               	xorlw	0	; case 0
  8557  00B206  A4D8               	btfss	status,2,c
  8558  00B208  D7F4               	goto	l782
  8559                           
  8560                           ; Switch size 1, requested type "space"
  8561                           ; Number of cases is 29, Range of values is 3 to 46
  8562                           ; switch strategies available:
  8563                           ; Name         Instructions Cycles
  8564                           ; simple_byte           88    45 (average)
  8565                           ;	Chosen strategy is simple_byte
  8566  00B20A  5003               	movf	??_getFlat,w,c
  8567  00B20C  0A03               	xorlw	3	; case 3
  8568  00B20E  B4D8               	btfsc	status,2,c
  8569  00B210  D7E7               	goto	l752
  8570  00B212  0A07               	xorlw	7	; case 4
  8571  00B214  B4D8               	btfsc	status,2,c
  8572  00B216  D7E8               	goto	l754
  8573  00B218  0A0C               	xorlw	12	; case 8
  8574  00B21A  B4D8               	btfsc	status,2,c
  8575  00B21C  D7E1               	goto	l752
  8576  00B21E  0A01               	xorlw	1	; case 9
  8577  00B220  B4D8               	btfsc	status,2,c
  8578  00B222  D7E2               	goto	l754
  8579  00B224  0A03               	xorlw	3	; case 10
  8580  00B226  B4D8               	btfsc	status,2,c
  8581  00B228  D7DB               	goto	l752
  8582  00B22A  0A01               	xorlw	1	; case 11
  8583  00B22C  B4D8               	btfsc	status,2,c
  8584  00B22E  D7DC               	goto	l754
  8585  00B230  0A1A               	xorlw	26	; case 17
  8586  00B232  B4D8               	btfsc	status,2,c
  8587  00B234  D7D5               	goto	l752
  8588  00B236  0A03               	xorlw	3	; case 18
  8589  00B238  B4D8               	btfsc	status,2,c
  8590  00B23A  D7D2               	goto	l752
  8591  00B23C  0A01               	xorlw	1	; case 19
  8592  00B23E  B4D8               	btfsc	status,2,c
  8593  00B240  D7CF               	goto	l752
  8594  00B242  0A07               	xorlw	7	; case 20
  8595  00B244  B4D8               	btfsc	status,2,c
  8596  00B246  D7D0               	goto	l754
  8597  00B248  0A01               	xorlw	1	; case 21
  8598  00B24A  B4D8               	btfsc	status,2,c
  8599  00B24C  D7CD               	goto	l754
  8600  00B24E  0A03               	xorlw	3	; case 22
  8601  00B250  B4D8               	btfsc	status,2,c
  8602  00B252  D7C6               	goto	l752
  8603  00B254  0A01               	xorlw	1	; case 23
  8604  00B256  B4D8               	btfsc	status,2,c
  8605  00B258  D7C7               	goto	l754
  8606  00B25A  0A0D               	xorlw	13	; case 26
  8607  00B25C  B4D8               	btfsc	status,2,c
  8608  00B25E  D7C4               	goto	l754
  8609  00B260  0A01               	xorlw	1	; case 27
  8610  00B262  B4D8               	btfsc	status,2,c
  8611  00B264  D7C1               	goto	l754
  8612  00B266  0A3B               	xorlw	59	; case 32
  8613  00B268  B4D8               	btfsc	status,2,c
  8614  00B26A  D7BA               	goto	l752
  8615  00B26C  0A01               	xorlw	1	; case 33
  8616  00B26E  B4D8               	btfsc	status,2,c
  8617  00B270  D7B7               	goto	l752
  8618  00B272  0A03               	xorlw	3	; case 34
  8619  00B274  B4D8               	btfsc	status,2,c
  8620  00B276  D7B8               	goto	l754
  8621  00B278  0A01               	xorlw	1	; case 35
  8622  00B27A  B4D8               	btfsc	status,2,c
  8623  00B27C  D7B1               	goto	l752
  8624  00B27E  0A07               	xorlw	7	; case 36
  8625  00B280  B4D8               	btfsc	status,2,c
  8626  00B282  D7B2               	goto	l754
  8627  00B284  0A01               	xorlw	1	; case 37
  8628  00B286  B4D8               	btfsc	status,2,c
  8629  00B288  D7AF               	goto	l754
  8630  00B28A  0A03               	xorlw	3	; case 38
  8631  00B28C  B4D8               	btfsc	status,2,c
  8632  00B28E  D7A8               	goto	l752
  8633  00B290  0A01               	xorlw	1	; case 39
  8634  00B292  B4D8               	btfsc	status,2,c
  8635  00B294  D7A5               	goto	l752
  8636  00B296  0A0F               	xorlw	15	; case 40
  8637  00B298  B4D8               	btfsc	status,2,c
  8638  00B29A  D7A2               	goto	l752
  8639  00B29C  0A01               	xorlw	1	; case 41
  8640  00B29E  B4D8               	btfsc	status,2,c
  8641  00B2A0  D7A3               	goto	l754
  8642  00B2A2  0A03               	xorlw	3	; case 42
  8643  00B2A4  B4D8               	btfsc	status,2,c
  8644  00B2A6  D79C               	goto	l752
  8645  00B2A8  0A01               	xorlw	1	; case 43
  8646  00B2AA  B4D8               	btfsc	status,2,c
  8647  00B2AC  D79D               	goto	l754
  8648  00B2AE  0A07               	xorlw	7	; case 44
  8649  00B2B0  B4D8               	btfsc	status,2,c
  8650  00B2B2  D796               	goto	l752
  8651  00B2B4  0A02               	xorlw	2	; case 46
  8652  00B2B6  B4D8               	btfsc	status,2,c
  8653  00B2B8  D793               	goto	l752
  8654  00B2BA  D79B               	goto	l782
  8655  00B2BC                     l753:
  8656                           
  8657                           ;standbyMode.c: 552: return returnValue;
  8658  00B2BC  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8659  00B2C0  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8660  00B2C4  0012               	return		;funcret
  8661  00B2C6                     __end_of_getFlat:
  8662                           	opt stack 0
  8663                           tblptru	equ	0xFF8
  8664                           tblptrh	equ	0xFF7
  8665                           tblptrl	equ	0xFF6
  8666                           tablat	equ	0xFF5
  8667                           prodh	equ	0xFF4
  8668                           prodl	equ	0xFF3
  8669                           postinc0	equ	0xFEE
  8670                           wreg	equ	0xFE8
  8671                           postdec1	equ	0xFE5
  8672                           plusw1	equ	0xFE3
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           plusw2	equ	0xFDB
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function _food_press *****************
  8683 ;; Defined at:
  8684 ;;		line 1135 in file "standbyMode.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  dietSum         2   40[COMRAM] unsigned int 
  8687 ;;  drawer          2   42[COMRAM] unsigned int 
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;  keypress        1   54[COMRAM] unsigned char 
  8690 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8691 ;;  count           2   52[COMRAM] unsigned int 
  8692 ;;  isValid         2   50[COMRAM] unsigned int 
  8693 ;;  backCheck       2   48[COMRAM] unsigned int 
  8694 ;;  tally           2   46[COMRAM] unsigned int 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  2   40[COMRAM] unsigned int 
  8697 ;; Registers used:
  8698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8707 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8708 ;;Total ram usage:       23 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    3
  8711 ;; This function calls:
  8712 ;;		_check_food
  8713 ;;		_get_digits
  8714 ;;		_lcdInst
  8715 ;;		_printf
  8716 ;;		_putch
  8717 ;; This function is called by:
  8718 ;;		_standbyMode
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text12
  8723  00BC32                     __ptext12:
  8724                           	opt stack 0
  8725  00BC32                     _food_press:
  8726                           	opt stack 26
  8727                           
  8728                           ;incstack = 0
  8729                           ;standbyMode.c: 1137: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8730  00BC32  0E01               	movlw	1
  8731  00BC34  ECD3  F054         	call	_lcdInst
  8732  00BC38  0EC3               	movlw	195
  8733  00BC3A  6E2D               	movwf	??_food_press& (0+255),c
  8734  00BC3C  0ECD               	movlw	205
  8735  00BC3E                     u14267:
  8736  00BC3E  2EE8               	decfsz	wreg,f,c
  8737  00BC40  D7FE               	bra	u14267
  8738  00BC42  2E2D               	decfsz	??_food_press& (0+255),f,c
  8739  00BC44  D7FC               	bra	u14267
  8740  00BC46  F000               	nop	
  8741                           
  8742                           ;standbyMode.c: 1138: printf("Drawer %i food:", drawer);
  8743  00BC48  0E4C               	movlw	low STR_99
  8744  00BC4A  6E0D               	movwf	printf@f,c
  8745  00BC4C  0EFD               	movlw	high STR_99
  8746  00BC4E  6E0E               	movwf	printf@f+1,c
  8747  00BC50  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8748  00BC54  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8749  00BC58  EC9A  F064         	call	_printf	;wreg free
  8750                           
  8751                           ;standbyMode.c: 1139: lcdInst(0xC0);;
  8752  00BC5C  0EC0               	movlw	192
  8753  00BC5E  ECD3  F054         	call	_lcdInst
  8754                           
  8755                           ;standbyMode.c: 1141: unsigned int tally = 0;
  8756  00BC62  0E00               	movlw	0
  8757  00BC64  6E30               	movwf	food_press@tally+1,c
  8758  00BC66  0E00               	movlw	0
  8759  00BC68  6E2F               	movwf	food_press@tally,c
  8760                           
  8761                           ;standbyMode.c: 1142: unsigned int count = 0;
  8762  00BC6A  0E00               	movlw	0
  8763  00BC6C  6E36               	movwf	food_press@count+1,c
  8764  00BC6E  0E00               	movlw	0
  8765  00BC70  6E35               	movwf	food_press@count,c
  8766                           
  8767                           ;standbyMode.c: 1143: unsigned int foodTable[4] = {0, 0, 0, 0};
  8768  00BC72  EE20  F0D8         	lfsr	2,food_press@F3117
  8769  00BC76  EE10  F038         	lfsr	1,food_press@foodTable
  8770  00BC7A  0E07               	movlw	7
  8771  00BC7C                     u10701:
  8772  00BC7C  CFDB FFE3          	movff	plusw2,plusw1
  8773  00BC80  06E8               	decf	wreg,f,c
  8774  00BC82  E2FC               	bc	u10701
  8775                           
  8776                           ;standbyMode.c: 1144: unsigned int isValid = 0;
  8777  00BC84  0E00               	movlw	0
  8778  00BC86  6E34               	movwf	food_press@isValid+1,c
  8779  00BC88  0E00               	movlw	0
  8780  00BC8A  6E33               	movwf	food_press@isValid,c
  8781                           
  8782                           ;standbyMode.c: 1145: unsigned int backCheck = 0;
  8783  00BC8C  0E00               	movlw	0
  8784  00BC8E  6E32               	movwf	food_press@backCheck+1,c
  8785  00BC90  0E00               	movlw	0
  8786  00BC92  6E31               	movwf	food_press@backCheck,c
  8787                           
  8788                           ;standbyMode.c: 1146: tally = get_digits(dietSum);
  8789  00BC94  C029  F001         	movff	food_press@dietSum,get_digits@sum
  8790  00BC98  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  8791  00BC9C  ECB5  F057         	call	_get_digits	;wreg free
  8792  00BCA0  C001  F02F         	movff	?_get_digits,food_press@tally
  8793  00BCA4  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  8794  00BCA8                     
  8795                           ;standbyMode.c: 1149: while(PORTBbits.RB1 == 0){ continue; }
  8796  00BCA8  A281               	btfss	3969,1,c	;volatile
  8797  00BCAA  D7FE               	goto	l977
  8798                           
  8799                           ;standbyMode.c: 1150: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8800  00BCAC  3881               	swapf	3969,w,c	;volatile
  8801  00BCAE  0B0F               	andlw	15
  8802  00BCB0  0B0F               	andlw	15
  8803  00BCB2  6E37               	movwf	food_press@keypress,c
  8804  00BCB4  B281               	btfsc	3969,1,c	;volatile
  8805  00BCB6  D7FE               	goto	l982
  8806                           
  8807                           ;standbyMode.c: 1153: if(keypress == 15){
  8808  00BCB8  0E0F               	movlw	15
  8809  00BCBA  1837               	xorwf	food_press@keypress,w,c
  8810  00BCBC  B4D8               	btfsc	status,2,c
  8811  00BCBE  D070               	goto	l985
  8812                           
  8813                           ;standbyMode.c: 1156: else if (keypress == 14){
  8814                           
  8815                           ;standbyMode.c: 1155: }
  8816                           
  8817                           ;standbyMode.c: 1154: break;
  8818  00BCC0  0E0E               	movlw	14
  8819  00BCC2  1837               	xorwf	food_press@keypress,w,c
  8820  00BCC4  A4D8               	btfss	status,2,c
  8821  00BCC6  D005               	goto	l987
  8822                           
  8823                           ;standbyMode.c: 1157: backCheck = 1;
  8824  00BCC8  0E00               	movlw	0
  8825  00BCCA  6E32               	movwf	food_press@backCheck+1,c
  8826  00BCCC  0E01               	movlw	1
  8827  00BCCE  6E31               	movwf	food_press@backCheck,c
  8828                           
  8829                           ;standbyMode.c: 1158: break;
  8830  00BCD0  D067               	goto	l985
  8831  00BCD2                     l987:
  8832                           
  8833                           ;standbyMode.c: 1160: else if (keypress == 0 || keypress == 1 || keypress == 2){
  8834  00BCD2  5037               	movf	food_press@keypress,w,c
  8835  00BCD4  B4D8               	btfsc	status,2,c
  8836  00BCD6  D007               	goto	u10770
  8837  00BCD8  0437               	decf	food_press@keypress,w,c
  8838  00BCDA  B4D8               	btfsc	status,2,c
  8839  00BCDC  D004               	goto	u10770
  8840  00BCDE  0E02               	movlw	2
  8841  00BCE0  1837               	xorwf	food_press@keypress,w,c
  8842  00BCE2  A4D8               	btfss	status,2,c
  8843  00BCE4  D02C               	goto	l989
  8844  00BCE6                     u10770:
  8845                           
  8846                           ;standbyMode.c: 1161: if (count < tally){
  8847  00BCE6  502F               	movf	food_press@tally,w,c
  8848  00BCE8  5C35               	subwf	food_press@count,w,c
  8849  00BCEA  5030               	movf	food_press@tally+1,w,c
  8850  00BCEC  5836               	subwfb	food_press@count+1,w,c
  8851  00BCEE  B0D8               	btfsc	status,0,c
  8852  00BCF0  D7DB               	goto	l977
  8853                           
  8854                           ;standbyMode.c: 1162: putch(input[keypress]);
  8855  00BCF2  5037               	movf	food_press@keypress,w,c
  8856  00BCF4  0D01               	mullw	1
  8857  00BCF6  0E62               	movlw	low _input
  8858  00BCF8  24F3               	addwf	prodl,w,c
  8859  00BCFA  6EF6               	movwf	tblptrl,c
  8860  00BCFC  0EFC               	movlw	high _input
  8861  00BCFE  20F4               	addwfc	prodh,w,c
  8862  00BD00  6EF7               	movwf	tblptrh,c
  8863  00BD02                     	if	1	;There are 3 active tblptr bytes
  8864  00BD02  6AF8               	clrf	tblptru,c
  8865  00BD04  0E00               	movlw	low (__mediumconst shr (0+16))
  8866  00BD06  22F8               	addwfc	tblptru,f,c
  8867  00BD08                     	endif
  8868  00BD08  0008               	tblrd		*
  8869  00BD0A  50F5               	movf	tablat,w,c
  8870  00BD0C  ECE7  F054         	call	_putch
  8871                           
  8872                           ;standbyMode.c: 1163: foodTable[count] = keypress + 1;
  8873  00BD10  5037               	movf	food_press@keypress,w,c
  8874  00BD12  6E2D               	movwf	??_food_press& (0+255),c
  8875  00BD14  6A2E               	clrf	(??_food_press+1)& (0+255),c
  8876  00BD16  0E01               	movlw	1
  8877  00BD18  262D               	addwf	??_food_press,f,c
  8878  00BD1A  0E00               	movlw	0
  8879  00BD1C  222E               	addwfc	??_food_press+1,f,c
  8880  00BD1E  90D8               	bcf	status,0,c
  8881  00BD20  3435               	rlcf	food_press@count,w,c
  8882  00BD22  6ED9               	movwf	fsr2l,c
  8883  00BD24  3436               	rlcf	food_press@count+1,w,c
  8884  00BD26  6EDA               	movwf	fsr2h,c
  8885  00BD28  0E38               	movlw	low food_press@foodTable
  8886  00BD2A  26D9               	addwf	fsr2l,f,c
  8887  00BD2C  0E00               	movlw	high food_press@foodTable
  8888  00BD2E  22DA               	addwfc	fsr2h,f,c
  8889  00BD30  C02D  FFDE         	movff	??_food_press,postinc2
  8890  00BD34  C02E  FFDD         	movff	??_food_press+1,postdec2
  8891                           
  8892                           ;standbyMode.c: 1164: count += 1;
  8893  00BD38  4A35               	infsnz	food_press@count,f,c
  8894  00BD3A  2A36               	incf	food_press@count+1,f,c
  8895                           
  8896                           ;standbyMode.c: 1165: }
  8897                           ;standbyMode.c: 1166: }
  8898  00BD3C  D7B5               	goto	l977
  8899  00BD3E                     l989:
  8900                           
  8901                           ;standbyMode.c: 1167: else if (keypress == 12){
  8902  00BD3E  0E0C               	movlw	12
  8903  00BD40  1837               	xorwf	food_press@keypress,w,c
  8904  00BD42  A4D8               	btfss	status,2,c
  8905  00BD44  D7B1               	goto	l977
  8906                           
  8907                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8908  00BD46  0E01               	movlw	1
  8909  00BD48  ECD3  F054         	call	_lcdInst
  8910  00BD4C  0EC3               	movlw	195
  8911  00BD4E  6E2D               	movwf	??_food_press& (0+255),c
  8912  00BD50  0ECD               	movlw	205
  8913  00BD52                     u14277:
  8914  00BD52  2EE8               	decfsz	wreg,f,c
  8915  00BD54  D7FE               	bra	u14277
  8916  00BD56  2E2D               	decfsz	??_food_press& (0+255),f,c
  8917  00BD58  D7FC               	bra	u14277
  8918  00BD5A  F000               	nop	
  8919                           
  8920                           ;standbyMode.c: 1169: printf("Drawer %i food:", drawer);
  8921  00BD5C  0E4C               	movlw	low STR_99
  8922  00BD5E  6E0D               	movwf	printf@f,c
  8923  00BD60  0EFD               	movlw	high STR_99
  8924  00BD62  6E0E               	movwf	printf@f+1,c
  8925  00BD64  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8926  00BD68  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8927  00BD6C  EC9A  F064         	call	_printf	;wreg free
  8928                           
  8929                           ;standbyMode.c: 1170: lcdInst(0xC0);;
  8930  00BD70  0EC0               	movlw	192
  8931  00BD72  ECD3  F054         	call	_lcdInst
  8932                           
  8933                           ;standbyMode.c: 1171: count = 0;
  8934  00BD76  0E00               	movlw	0
  8935  00BD78  6E36               	movwf	food_press@count+1,c
  8936  00BD7A  0E00               	movlw	0
  8937  00BD7C  6E35               	movwf	food_press@count,c
  8938                           
  8939                           ;standbyMode.c: 1172: foodTable[0] = 0;
  8940  00BD7E  0E00               	movlw	0
  8941  00BD80  6E39               	movwf	food_press@foodTable+1,c
  8942  00BD82  0E00               	movlw	0
  8943  00BD84  6E38               	movwf	food_press@foodTable,c
  8944                           
  8945                           ;standbyMode.c: 1173: foodTable[1] = 0;
  8946  00BD86  0E00               	movlw	0
  8947  00BD88  6E3B               	movwf	food_press@foodTable+3,c
  8948  00BD8A  0E00               	movlw	0
  8949  00BD8C  6E3A               	movwf	food_press@foodTable+2,c
  8950                           
  8951                           ;standbyMode.c: 1174: foodTable[2] = 0;
  8952  00BD8E  0E00               	movlw	0
  8953  00BD90  6E3D               	movwf	food_press@foodTable+5,c
  8954  00BD92  0E00               	movlw	0
  8955  00BD94  6E3C               	movwf	food_press@foodTable+4,c
  8956                           
  8957                           ;standbyMode.c: 1175: foodTable[3] = 0;
  8958  00BD96  0E00               	movlw	0
  8959  00BD98  6E3F               	movwf	food_press@foodTable+7,c
  8960  00BD9A  0E00               	movlw	0
  8961  00BD9C  6E3E               	movwf	food_press@foodTable+6,c
  8962  00BD9E  D784               	goto	l977
  8963  00BDA0                     l985:
  8964                           
  8965                           ;standbyMode.c: 1176: }
  8966                           ;standbyMode.c: 1177: }
  8967                           ;standbyMode.c: 1179: if (backCheck == 1){
  8968  00BDA0  0431               	decf	food_press@backCheck,w,c
  8969  00BDA2  1032               	iorwf	food_press@backCheck+1,w,c
  8970  00BDA4  A4D8               	btfss	status,2,c
  8971  00BDA6  D005               	goto	l996
  8972                           
  8973                           ;standbyMode.c: 1180: return 100;
  8974  00BDA8  0E00               	movlw	0
  8975  00BDAA  6E2A               	movwf	?_food_press+1,c
  8976  00BDAC  0E64               	movlw	100
  8977  00BDAE  6E29               	movwf	?_food_press,c
  8978                           
  8979                           ;standbyMode.c: 1181: }
  8980  00BDB0  0012               	return	
  8981  00BDB2                     l996:
  8982                           
  8983                           ;standbyMode.c: 1182: else {
  8984                           ;standbyMode.c: 1183: isValid = check_food(dietSum, foodTable);
  8985  00BDB2  C029  F001         	movff	food_press@dietSum,check_food@sum
  8986  00BDB6  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  8987  00BDBA  0E38               	movlw	low food_press@foodTable
  8988  00BDBC  6E03               	movwf	check_food@foodInput,c
  8989  00BDBE  0E00               	movlw	high food_press@foodTable
  8990  00BDC0  6E04               	movwf	check_food@foodInput+1,c
  8991  00BDC2  ECE4  F06B         	call	_check_food	;wreg free
  8992  00BDC6  C001  F033         	movff	?_check_food,food_press@isValid
  8993  00BDCA  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  8994                           
  8995                           ;standbyMode.c: 1185: if (isValid == 0){
  8996  00BDCE  5033               	movf	food_press@isValid,w,c
  8997  00BDD0  1034               	iorwf	food_press@isValid+1,w,c
  8998  00BDD2  A4D8               	btfss	status,2,c
  8999  00BDD4  D026               	goto	l999
  9000                           
  9001                           ;standbyMode.c: 1186: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9002  00BDD6  0E01               	movlw	1
  9003  00BDD8  ECD3  F054         	call	_lcdInst
  9004  00BDDC  0EC3               	movlw	195
  9005  00BDDE  6E2D               	movwf	??_food_press& (0+255),c
  9006  00BDE0  0ECD               	movlw	205
  9007  00BDE2                     u14287:
  9008  00BDE2  2EE8               	decfsz	wreg,f,c
  9009  00BDE4  D7FE               	bra	u14287
  9010  00BDE6  2E2D               	decfsz	??_food_press& (0+255),f,c
  9011  00BDE8  D7FC               	bra	u14287
  9012  00BDEA  F000               	nop	
  9013                           
  9014                           ;standbyMode.c: 1187: printf("Invalid food!");
  9015  00BDEC  0E71               	movlw	low STR_101
  9016  00BDEE  6E0D               	movwf	printf@f,c
  9017  00BDF0  0EFE               	movlw	high STR_101
  9018  00BDF2  6E0E               	movwf	printf@f+1,c
  9019  00BDF4  EC9A  F064         	call	_printf	;wreg free
  9020                           
  9021                           ;standbyMode.c: 1188: lcdInst(0xC0);;
  9022  00BDF8  0EC0               	movlw	192
  9023  00BDFA  ECD3  F054         	call	_lcdInst
  9024                           
  9025                           ;standbyMode.c: 1189: printf("Try again.");
  9026  00BDFE  0E0C               	movlw	low STR_102
  9027  00BE00  6E0D               	movwf	printf@f,c
  9028  00BE02  0EFF               	movlw	high STR_102
  9029  00BE04  6E0E               	movwf	printf@f+1,c
  9030  00BE06  EC9A  F064         	call	_printf	;wreg free
  9031                           
  9032                           ;standbyMode.c: 1190: _delay((unsigned long)((1000)*(40000000/4000.0)));
  9033  00BE0A  0E33               	movlw	51
  9034  00BE0C  6E2E               	movwf	(??_food_press+1)& (0+255),c
  9035  00BE0E  0EBB               	movlw	187
  9036  00BE10  6E2D               	movwf	??_food_press& (0+255),c
  9037  00BE12  0EE0               	movlw	224
  9038  00BE14                     u14297:
  9039  00BE14  2EE8               	decfsz	wreg,f,c
  9040  00BE16  D7FE               	bra	u14297
  9041  00BE18  2E2D               	decfsz	??_food_press& (0+255),f,c
  9042  00BE1A  D7FC               	bra	u14297
  9043  00BE1C  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  9044  00BE1E  D7FA               	bra	u14297
  9045                           
  9046                           ;standbyMode.c: 1191: goto START;
  9047  00BE20  D708               	goto	_food_press
  9048  00BE22                     l999:
  9049                           
  9050                           ;standbyMode.c: 1193: else {
  9051                           ;standbyMode.c: 1194: return isValid;
  9052  00BE22  C033  F029         	movff	food_press@isValid,?_food_press
  9053  00BE26  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  9054  00BE2A  0012               	return	
  9055  00BE2C                     __end_of_food_press:
  9056                           	opt stack 0
  9057                           tblptru	equ	0xFF8
  9058                           tblptrh	equ	0xFF7
  9059                           tblptrl	equ	0xFF6
  9060                           tablat	equ	0xFF5
  9061                           prodh	equ	0xFF4
  9062                           prodl	equ	0xFF3
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           plusw1	equ	0xFE3
  9067                           fsr1l	equ	0xFE1
  9068                           indf2	equ	0xFDF
  9069                           postinc2	equ	0xFDE
  9070                           postdec2	equ	0xFDD
  9071                           plusw2	equ	0xFDB
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function _get_digits *****************
  9077 ;; Defined at:
  9078 ;;		line 1030 in file "standbyMode.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  sum             2    0[COMRAM] unsigned int 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  count           2    4[COMRAM] unsigned int 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  2    0[COMRAM] unsigned int 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9092 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;Total ram usage:        6 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; This function calls:
  9099 ;;		Nothing
  9100 ;; This function is called by:
  9101 ;;		_food_press
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text13
  9106  00AF6A                     __ptext13:
  9107                           	opt stack 0
  9108  00AF6A                     _get_digits:
  9109                           	opt stack 28
  9110                           
  9111                           ;standbyMode.c: 1032: unsigned int count = 0;
  9112                           
  9113                           ;incstack = 0
  9114  00AF6A  0E00               	movlw	0
  9115  00AF6C  6E06               	movwf	get_digits@count+1,c
  9116  00AF6E  0E00               	movlw	0
  9117  00AF70  6E05               	movwf	get_digits@count,c
  9118                           
  9119                           ;standbyMode.c: 1034: switch(sum){
  9120  00AF72  D015               	goto	l950
  9121  00AF74                     
  9122                           ;standbyMode.c: 1047: count = 1;
  9123                           
  9124                           ;standbyMode.c: 1046: case 12:
  9125                           
  9126                           ;standbyMode.c: 1043: break;
  9127                           
  9128                           ;standbyMode.c: 1042: count = 1;
  9129                           
  9130                           ;standbyMode.c: 1041: case 7:
  9131                           
  9132                           ;standbyMode.c: 1038: break;
  9133                           
  9134                           ;standbyMode.c: 1037: count = 1;
  9135  00AF74  0E00               	movlw	0
  9136  00AF76  6E06               	movwf	get_digits@count+1,c
  9137  00AF78  0E01               	movlw	1
  9138  00AF7A                     L43:
  9139  00AF7A  6E05               	movwf	get_digits@count,c
  9140                           
  9141                           ;standbyMode.c: 1053: break;
  9142  00AF7C  D050               	goto	l952
  9143  00AF7E                     
  9144                           ;standbyMode.c: 1062: count = 2;
  9145                           
  9146                           ;standbyMode.c: 1061: case 19:
  9147                           
  9148                           ;standbyMode.c: 1058: break;
  9149                           
  9150                           ;standbyMode.c: 1057: count = 2;
  9151  00AF7E  0E00               	movlw	0
  9152  00AF80  6E06               	movwf	get_digits@count+1,c
  9153  00AF82  0E02               	movlw	2
  9154  00AF84  D7FA               	goto	L43
  9155  00AF86                     
  9156                           ;standbyMode.c: 1097: count = 3;
  9157                           
  9158                           ;standbyMode.c: 1096: case 31:
  9159                           
  9160                           ;standbyMode.c: 1093: break;
  9161                           
  9162                           ;standbyMode.c: 1092: count = 3;
  9163                           
  9164                           ;standbyMode.c: 1091: case 26:
  9165                           
  9166                           ;standbyMode.c: 1088: break;
  9167                           
  9168                           ;standbyMode.c: 1087: count = 3;
  9169                           
  9170                           ;standbyMode.c: 1086: case 22:
  9171                           
  9172                           ;standbyMode.c: 1083: break;
  9173                           
  9174                           ;standbyMode.c: 1082: count = 3;
  9175                           
  9176                           ;standbyMode.c: 1081: case 27:
  9177                           
  9178                           ;standbyMode.c: 1078: break;
  9179                           
  9180                           ;standbyMode.c: 1077: count = 3;
  9181                           
  9182                           ;standbyMode.c: 1076: case 17:
  9183                           
  9184                           ;standbyMode.c: 1073: break;
  9185                           
  9186                           ;standbyMode.c: 1072: count = 3;
  9187                           
  9188                           ;standbyMode.c: 1071: case 18:
  9189                           
  9190                           ;standbyMode.c: 1068: break;
  9191                           
  9192                           ;standbyMode.c: 1067: count = 3;
  9193  00AF86  0E00               	movlw	0
  9194  00AF88  6E06               	movwf	get_digits@count+1,c
  9195  00AF8A  0E03               	movlw	3
  9196  00AF8C  D7F6               	goto	L43
  9197  00AF8E                     
  9198                           ;standbyMode.c: 1122: count = 4;
  9199                           
  9200                           ;standbyMode.c: 1121: case 43:
  9201                           
  9202                           ;standbyMode.c: 1118: break;
  9203                           
  9204                           ;standbyMode.c: 1117: count = 4;
  9205                           
  9206                           ;standbyMode.c: 1116: case 39:
  9207                           
  9208                           ;standbyMode.c: 1113: break;
  9209                           
  9210                           ;standbyMode.c: 1112: count = 4;
  9211                           
  9212                           ;standbyMode.c: 1111: case 34:
  9213                           
  9214                           ;standbyMode.c: 1108: break;
  9215                           
  9216                           ;standbyMode.c: 1107: count = 4;
  9217                           
  9218                           ;standbyMode.c: 1106: case 29:
  9219                           
  9220                           ;standbyMode.c: 1103: break;
  9221                           
  9222                           ;standbyMode.c: 1102: count = 4;
  9223  00AF8E  0E00               	movlw	0
  9224  00AF90  6E06               	movwf	get_digits@count+1,c
  9225  00AF92  0E04               	movlw	4
  9226  00AF94  D7F2               	goto	L43
  9227  00AF96                     
  9228                           ;standbyMode.c: 1127: count = 0;
  9229  00AF96  0E00               	movlw	0
  9230  00AF98  6E06               	movwf	get_digits@count+1,c
  9231  00AF9A  0E00               	movlw	0
  9232  00AF9C  D7EE               	goto	L43
  9233  00AF9E                     l950:
  9234  00AF9E  C001  F003         	movff	get_digits@sum,??_get_digits
  9235  00AFA2  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  9236                           
  9237                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9238                           ; Switch size 1, requested type "space"
  9239                           ; Number of cases is 1, Range of values is 0 to 0
  9240                           ; switch strategies available:
  9241                           ; Name         Instructions Cycles
  9242                           ; simple_byte            4     3 (average)
  9243                           ;	Chosen strategy is simple_byte
  9244  00AFA6  5004               	movf	??_get_digits+1,w,c
  9245  00AFA8  0A00               	xorlw	0	; case 0
  9246  00AFAA  A4D8               	btfss	status,2,c
  9247  00AFAC  D7F4               	goto	l970
  9248                           
  9249                           ; Switch size 1, requested type "space"
  9250                           ; Number of cases is 18, Range of values is 3 to 43
  9251                           ; switch strategies available:
  9252                           ; Name         Instructions Cycles
  9253                           ; simple_byte           55    28 (average)
  9254                           ;	Chosen strategy is simple_byte
  9255  00AFAE  5003               	movf	??_get_digits,w,c
  9256  00AFB0  0A03               	xorlw	3	; case 3
  9257  00AFB2  B4D8               	btfsc	status,2,c
  9258  00AFB4  D7DF               	goto	l951
  9259  00AFB6  0A04               	xorlw	4	; case 7
  9260  00AFB8  B4D8               	btfsc	status,2,c
  9261  00AFBA  D7DC               	goto	l951
  9262  00AFBC  0A0D               	xorlw	13	; case 10
  9263  00AFBE  B4D8               	btfsc	status,2,c
  9264  00AFC0  D7DE               	goto	l956
  9265  00AFC2  0A06               	xorlw	6	; case 12
  9266  00AFC4  B4D8               	btfsc	status,2,c
  9267  00AFC6  D7D6               	goto	l951
  9268  00AFC8  0A01               	xorlw	1	; case 13
  9269  00AFCA  B4D8               	btfsc	status,2,c
  9270  00AFCC  D7DC               	goto	l958
  9271  00AFCE  0A02               	xorlw	2	; case 15
  9272  00AFD0  B4D8               	btfsc	status,2,c
  9273  00AFD2  D7D5               	goto	l956
  9274  00AFD4  0A1E               	xorlw	30	; case 17
  9275  00AFD6  B4D8               	btfsc	status,2,c
  9276  00AFD8  D7D6               	goto	l958
  9277  00AFDA  0A03               	xorlw	3	; case 18
  9278  00AFDC  B4D8               	btfsc	status,2,c
  9279  00AFDE  D7D3               	goto	l958
  9280  00AFE0  0A01               	xorlw	1	; case 19
  9281  00AFE2  B4D8               	btfsc	status,2,c
  9282  00AFE4  D7CC               	goto	l956
  9283  00AFE6  0A05               	xorlw	5	; case 22
  9284  00AFE8  B4D8               	btfsc	status,2,c
  9285  00AFEA  D7CD               	goto	l958
  9286  00AFEC  0A0F               	xorlw	15	; case 25
  9287  00AFEE  B4D8               	btfsc	status,2,c
  9288  00AFF0  D7CE               	goto	l965
  9289  00AFF2  0A03               	xorlw	3	; case 26
  9290  00AFF4  B4D8               	btfsc	status,2,c
  9291  00AFF6  D7C7               	goto	l958
  9292  00AFF8  0A01               	xorlw	1	; case 27
  9293  00AFFA  B4D8               	btfsc	status,2,c
  9294  00AFFC  D7C4               	goto	l958
  9295  00AFFE  0A06               	xorlw	6	; case 29
  9296  00B000  B4D8               	btfsc	status,2,c
  9297  00B002  D7C5               	goto	l965
  9298  00B004  0A02               	xorlw	2	; case 31
  9299  00B006  B4D8               	btfsc	status,2,c
  9300  00B008  D7BE               	goto	l958
  9301  00B00A  0A3D               	xorlw	61	; case 34
  9302  00B00C  B4D8               	btfsc	status,2,c
  9303  00B00E  D7BF               	goto	l965
  9304  00B010  0A05               	xorlw	5	; case 39
  9305  00B012  B4D8               	btfsc	status,2,c
  9306  00B014  D7BC               	goto	l965
  9307  00B016  0A0C               	xorlw	12	; case 43
  9308  00B018  B4D8               	btfsc	status,2,c
  9309  00B01A  D7B9               	goto	l965
  9310  00B01C  D7BC               	goto	l970
  9311  00B01E                     l952:
  9312                           
  9313                           ;standbyMode.c: 1130: return count;
  9314  00B01E  C005  F001         	movff	get_digits@count,?_get_digits
  9315  00B022  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  9316  00B026  0012               	return		;funcret
  9317  00B028                     __end_of_get_digits:
  9318                           	opt stack 0
  9319                           tblptru	equ	0xFF8
  9320                           tblptrh	equ	0xFF7
  9321                           tblptrl	equ	0xFF6
  9322                           tablat	equ	0xFF5
  9323                           prodh	equ	0xFF4
  9324                           prodl	equ	0xFF3
  9325                           postinc0	equ	0xFEE
  9326                           wreg	equ	0xFE8
  9327                           postdec1	equ	0xFE5
  9328                           plusw1	equ	0xFE3
  9329                           fsr1l	equ	0xFE1
  9330                           indf2	equ	0xFDF
  9331                           postinc2	equ	0xFDE
  9332                           postdec2	equ	0xFDD
  9333                           plusw2	equ	0xFDB
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _check_food *****************
  9339 ;; Defined at:
  9340 ;;		line 21 in file "standbyMode.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  sum             2    0[COMRAM] unsigned int 
  9343 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  9344 ;;		 -> food_press@foodTable(8), 
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;  returnValue     2    6[COMRAM] unsigned int 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  2    0[COMRAM] unsigned int 
  9349 ;; Registers used:
  9350 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9359 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;Total ram usage:        8 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; This function calls:
  9363 ;;		Nothing
  9364 ;; This function is called by:
  9365 ;;		_food_press
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           	psect	text14
  9370  00D7C8                     __ptext14:
  9371                           	opt stack 0
  9372  00D7C8                     _check_food:
  9373                           	opt stack 28
  9374                           
  9375                           ;standbyMode.c: 22: unsigned int returnValue = 0;
  9376                           
  9377                           ;incstack = 0
  9378  00D7C8  0E00               	movlw	0
  9379  00D7CA  6E08               	movwf	check_food@returnValue+1,c
  9380  00D7CC  0E00               	movlw	0
  9381  00D7CE  6E07               	movwf	check_food@returnValue,c
  9382                           
  9383                           ;standbyMode.c: 24: switch(sum){
  9384  00D7D0  EFF9  F070         	goto	l618
  9385  00D7D4                     
  9386                           ;standbyMode.c: 27: if (foodInput[0] == 1){
  9387  00D7D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9388  00D7D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9389  00D7DC  04DE               	decf	postinc2,w,c
  9390  00D7DE  10DE               	iorwf	postinc2,w,c
  9391  00D7E0  A4D8               	btfss	status,2,c
  9392  00D7E2  D005               	goto	l620
  9393                           
  9394                           ;standbyMode.c: 28: returnValue = 1;
  9395  00D7E4  0E00               	movlw	0
  9396  00D7E6  6E08               	movwf	check_food@returnValue+1,c
  9397  00D7E8  0E01               	movlw	1
  9398  00D7EA  EFF7  F070         	goto	L88
  9399  00D7EE                     l620:
  9400                           
  9401                           ;standbyMode.c: 30: else if (foodInput[0] == 2){
  9402  00D7EE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9403  00D7F2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9404  00D7F6  0E02               	movlw	2
  9405  00D7F8  18DE               	xorwf	postinc2,w,c
  9406  00D7FA  10DE               	iorwf	postinc2,w,c
  9407  00D7FC  A4D8               	btfss	status,2,c
  9408  00D7FE  EF3D  F071         	goto	l623
  9409                           
  9410                           ;standbyMode.c: 31: returnValue = 2;
  9411  00D802  0E00               	movlw	0
  9412  00D804  6E08               	movwf	check_food@returnValue+1,c
  9413  00D806  0E02               	movlw	2
  9414  00D808  EFF7  F070         	goto	L88
  9415  00D80C                     
  9416                           ;standbyMode.c: 37: if (foodInput[0] == 1){
  9417  00D80C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9418  00D810  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9419  00D814  04DE               	decf	postinc2,w,c
  9420  00D816  10DE               	iorwf	postinc2,w,c
  9421  00D818  A4D8               	btfss	status,2,c
  9422  00D81A  D005               	goto	l625
  9423                           
  9424                           ;standbyMode.c: 38: returnValue = 3;
  9425  00D81C  0E00               	movlw	0
  9426  00D81E  6E08               	movwf	check_food@returnValue+1,c
  9427  00D820  0E03               	movlw	3
  9428  00D822  EFF7  F070         	goto	L88
  9429  00D826                     l625:
  9430                           
  9431                           ;standbyMode.c: 40: else if (foodInput[0] == 2){
  9432  00D826  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9433  00D82A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9434  00D82E  0E02               	movlw	2
  9435  00D830  18DE               	xorwf	postinc2,w,c
  9436  00D832  10DE               	iorwf	postinc2,w,c
  9437  00D834  A4D8               	btfss	status,2,c
  9438  00D836  EF3D  F071         	goto	l623
  9439                           
  9440                           ;standbyMode.c: 41: returnValue = 4;
  9441  00D83A  0E00               	movlw	0
  9442  00D83C  6E08               	movwf	check_food@returnValue+1,c
  9443  00D83E  0E04               	movlw	4
  9444  00D840  EFF7  F070         	goto	L88
  9445  00D844                     
  9446                           ;standbyMode.c: 47: if (foodInput[0] == 1){
  9447  00D844  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9448  00D848  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9449  00D84C  04DE               	decf	postinc2,w,c
  9450  00D84E  10DE               	iorwf	postinc2,w,c
  9451  00D850  A4D8               	btfss	status,2,c
  9452  00D852  D005               	goto	l629
  9453                           
  9454                           ;standbyMode.c: 48: returnValue = 5;
  9455  00D854  0E00               	movlw	0
  9456  00D856  6E08               	movwf	check_food@returnValue+1,c
  9457  00D858  0E05               	movlw	5
  9458  00D85A  EFF7  F070         	goto	L88
  9459  00D85E                     l629:
  9460                           
  9461                           ;standbyMode.c: 50: else if (foodInput[0] == 2){
  9462  00D85E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9463  00D862  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9464  00D866  0E02               	movlw	2
  9465  00D868  18DE               	xorwf	postinc2,w,c
  9466  00D86A  10DE               	iorwf	postinc2,w,c
  9467  00D86C  A4D8               	btfss	status,2,c
  9468  00D86E  D005               	goto	l631
  9469                           
  9470                           ;standbyMode.c: 51: returnValue = 6;
  9471  00D870  0E00               	movlw	0
  9472  00D872  6E08               	movwf	check_food@returnValue+1,c
  9473  00D874  0E06               	movlw	6
  9474  00D876  EFF7  F070         	goto	L88
  9475  00D87A                     l631:
  9476                           
  9477                           ;standbyMode.c: 53: else if (foodInput[0] == 3){
  9478  00D87A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9479  00D87E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9480  00D882  0E03               	movlw	3
  9481  00D884  18DE               	xorwf	postinc2,w,c
  9482  00D886  10DE               	iorwf	postinc2,w,c
  9483  00D888  A4D8               	btfss	status,2,c
  9484  00D88A  EF3D  F071         	goto	l623
  9485                           
  9486                           ;standbyMode.c: 54: returnValue = 7;
  9487  00D88E  0E00               	movlw	0
  9488  00D890  6E08               	movwf	check_food@returnValue+1,c
  9489  00D892  0E07               	movlw	7
  9490  00D894  EFF7  F070         	goto	L88
  9491  00D898                     
  9492                           ;standbyMode.c: 60: if (foodInput[0] == 1 && foodInput[1] == 1){
  9493  00D898  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9494  00D89C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9495  00D8A0  04DE               	decf	postinc2,w,c
  9496  00D8A2  10DE               	iorwf	postinc2,w,c
  9497  00D8A4  A4D8               	btfss	status,2,c
  9498  00D8A6  D00F               	goto	l635
  9499  00D8A8  EE20 F002          	lfsr	2,2
  9500  00D8AC  5003               	movf	check_food@foodInput,w,c
  9501  00D8AE  26D9               	addwf	fsr2l,f,c
  9502  00D8B0  5004               	movf	check_food@foodInput+1,w,c
  9503  00D8B2  22DA               	addwfc	fsr2h,f,c
  9504  00D8B4  04DE               	decf	postinc2,w,c
  9505  00D8B6  10DE               	iorwf	postinc2,w,c
  9506  00D8B8  A4D8               	btfss	status,2,c
  9507  00D8BA  D005               	goto	l635
  9508                           
  9509                           ;standbyMode.c: 61: returnValue = 8;
  9510  00D8BC  0E00               	movlw	0
  9511  00D8BE  6E08               	movwf	check_food@returnValue+1,c
  9512  00D8C0  0E08               	movlw	8
  9513  00D8C2  EFF7  F070         	goto	L88
  9514  00D8C6                     l635:
  9515                           
  9516                           ;standbyMode.c: 63: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9517  00D8C6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9518  00D8CA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9519  00D8CE  04DE               	decf	postinc2,w,c
  9520  00D8D0  10DE               	iorwf	postinc2,w,c
  9521  00D8D2  A4D8               	btfss	status,2,c
  9522  00D8D4  D010               	goto	l637
  9523  00D8D6  EE20 F002          	lfsr	2,2
  9524  00D8DA  5003               	movf	check_food@foodInput,w,c
  9525  00D8DC  26D9               	addwf	fsr2l,f,c
  9526  00D8DE  5004               	movf	check_food@foodInput+1,w,c
  9527  00D8E0  22DA               	addwfc	fsr2h,f,c
  9528  00D8E2  0E02               	movlw	2
  9529  00D8E4  18DE               	xorwf	postinc2,w,c
  9530  00D8E6  10DE               	iorwf	postinc2,w,c
  9531  00D8E8  A4D8               	btfss	status,2,c
  9532  00D8EA  D005               	goto	l637
  9533                           
  9534                           ;standbyMode.c: 64: returnValue = 9;
  9535  00D8EC  0E00               	movlw	0
  9536  00D8EE  6E08               	movwf	check_food@returnValue+1,c
  9537  00D8F0  0E09               	movlw	9
  9538  00D8F2  EFF7  F070         	goto	L88
  9539  00D8F6                     l637:
  9540                           
  9541                           ;standbyMode.c: 66: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9542  00D8F6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9543  00D8FA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9544  00D8FE  0E02               	movlw	2
  9545  00D900  18DE               	xorwf	postinc2,w,c
  9546  00D902  10DE               	iorwf	postinc2,w,c
  9547  00D904  A4D8               	btfss	status,2,c
  9548  00D906  D00F               	goto	l639
  9549  00D908  EE20 F002          	lfsr	2,2
  9550  00D90C  5003               	movf	check_food@foodInput,w,c
  9551  00D90E  26D9               	addwf	fsr2l,f,c
  9552  00D910  5004               	movf	check_food@foodInput+1,w,c
  9553  00D912  22DA               	addwfc	fsr2h,f,c
  9554  00D914  04DE               	decf	postinc2,w,c
  9555  00D916  10DE               	iorwf	postinc2,w,c
  9556  00D918  A4D8               	btfss	status,2,c
  9557  00D91A  D005               	goto	l639
  9558                           
  9559                           ;standbyMode.c: 67: returnValue = 10;
  9560  00D91C  0E00               	movlw	0
  9561  00D91E  6E08               	movwf	check_food@returnValue+1,c
  9562  00D920  0E0A               	movlw	10
  9563  00D922  EFF7  F070         	goto	L88
  9564  00D926                     l639:
  9565                           
  9566                           ;standbyMode.c: 69: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9567  00D926  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9568  00D92A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9569  00D92E  0E02               	movlw	2
  9570  00D930  18DE               	xorwf	postinc2,w,c
  9571  00D932  10DE               	iorwf	postinc2,w,c
  9572  00D934  A4D8               	btfss	status,2,c
  9573  00D936  EF3D  F071         	goto	l623
  9574  00D93A  EE20 F002          	lfsr	2,2
  9575  00D93E  5003               	movf	check_food@foodInput,w,c
  9576  00D940  26D9               	addwf	fsr2l,f,c
  9577  00D942  5004               	movf	check_food@foodInput+1,w,c
  9578  00D944  22DA               	addwfc	fsr2h,f,c
  9579  00D946  0E02               	movlw	2
  9580  00D948  18DE               	xorwf	postinc2,w,c
  9581  00D94A  10DE               	iorwf	postinc2,w,c
  9582  00D94C  A4D8               	btfss	status,2,c
  9583  00D94E  EF3D  F071         	goto	l623
  9584                           
  9585                           ;standbyMode.c: 70: returnValue = 11;
  9586  00D952  0E00               	movlw	0
  9587  00D954  6E08               	movwf	check_food@returnValue+1,c
  9588  00D956  0E0B               	movlw	11
  9589  00D958  EFF7  F070         	goto	L88
  9590  00D95C                     
  9591                           ;standbyMode.c: 76: if (foodInput[0] == 1 && foodInput[1] == 1){
  9592  00D95C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9593  00D960  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9594  00D964  04DE               	decf	postinc2,w,c
  9595  00D966  10DE               	iorwf	postinc2,w,c
  9596  00D968  A4D8               	btfss	status,2,c
  9597  00D96A  D00F               	goto	l643
  9598  00D96C  EE20 F002          	lfsr	2,2
  9599  00D970  5003               	movf	check_food@foodInput,w,c
  9600  00D972  26D9               	addwf	fsr2l,f,c
  9601  00D974  5004               	movf	check_food@foodInput+1,w,c
  9602  00D976  22DA               	addwfc	fsr2h,f,c
  9603  00D978  04DE               	decf	postinc2,w,c
  9604  00D97A  10DE               	iorwf	postinc2,w,c
  9605  00D97C  A4D8               	btfss	status,2,c
  9606  00D97E  D005               	goto	l643
  9607                           
  9608                           ;standbyMode.c: 77: returnValue = 12;
  9609  00D980  0E00               	movlw	0
  9610  00D982  6E08               	movwf	check_food@returnValue+1,c
  9611  00D984  0E0C               	movlw	12
  9612  00D986  EFF7  F070         	goto	L88
  9613  00D98A                     l643:
  9614                           
  9615                           ;standbyMode.c: 79: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9616  00D98A  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9617  00D98E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9618  00D992  04DE               	decf	postinc2,w,c
  9619  00D994  10DE               	iorwf	postinc2,w,c
  9620  00D996  A4D8               	btfss	status,2,c
  9621  00D998  D010               	goto	l645
  9622  00D99A  EE20 F002          	lfsr	2,2
  9623  00D99E  5003               	movf	check_food@foodInput,w,c
  9624  00D9A0  26D9               	addwf	fsr2l,f,c
  9625  00D9A2  5004               	movf	check_food@foodInput+1,w,c
  9626  00D9A4  22DA               	addwfc	fsr2h,f,c
  9627  00D9A6  0E02               	movlw	2
  9628  00D9A8  18DE               	xorwf	postinc2,w,c
  9629  00D9AA  10DE               	iorwf	postinc2,w,c
  9630  00D9AC  A4D8               	btfss	status,2,c
  9631  00D9AE  D005               	goto	l645
  9632                           
  9633                           ;standbyMode.c: 80: returnValue = 13;
  9634  00D9B0  0E00               	movlw	0
  9635  00D9B2  6E08               	movwf	check_food@returnValue+1,c
  9636  00D9B4  0E0D               	movlw	13
  9637  00D9B6  EFF7  F070         	goto	L88
  9638  00D9BA                     l645:
  9639                           
  9640                           ;standbyMode.c: 82: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9641  00D9BA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9642  00D9BE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9643  00D9C2  04DE               	decf	postinc2,w,c
  9644  00D9C4  10DE               	iorwf	postinc2,w,c
  9645  00D9C6  A4D8               	btfss	status,2,c
  9646  00D9C8  D010               	goto	l647
  9647  00D9CA  EE20 F002          	lfsr	2,2
  9648  00D9CE  5003               	movf	check_food@foodInput,w,c
  9649  00D9D0  26D9               	addwf	fsr2l,f,c
  9650  00D9D2  5004               	movf	check_food@foodInput+1,w,c
  9651  00D9D4  22DA               	addwfc	fsr2h,f,c
  9652  00D9D6  0E03               	movlw	3
  9653  00D9D8  18DE               	xorwf	postinc2,w,c
  9654  00D9DA  10DE               	iorwf	postinc2,w,c
  9655  00D9DC  A4D8               	btfss	status,2,c
  9656  00D9DE  D005               	goto	l647
  9657                           
  9658                           ;standbyMode.c: 83: returnValue = 14;
  9659  00D9E0  0E00               	movlw	0
  9660  00D9E2  6E08               	movwf	check_food@returnValue+1,c
  9661  00D9E4  0E0E               	movlw	14
  9662  00D9E6  EFF7  F070         	goto	L88
  9663  00D9EA                     l647:
  9664                           
  9665                           ;standbyMode.c: 85: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9666  00D9EA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9667  00D9EE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9668  00D9F2  0E02               	movlw	2
  9669  00D9F4  18DE               	xorwf	postinc2,w,c
  9670  00D9F6  10DE               	iorwf	postinc2,w,c
  9671  00D9F8  A4D8               	btfss	status,2,c
  9672  00D9FA  D00E               	goto	l649
  9673  00D9FC  EE20 F002          	lfsr	2,2
  9674  00DA00  5003               	movf	check_food@foodInput,w,c
  9675  00DA02  26D9               	addwf	fsr2l,f,c
  9676  00DA04  5004               	movf	check_food@foodInput+1,w,c
  9677  00DA06  22DA               	addwfc	fsr2h,f,c
  9678  00DA08  04DE               	decf	postinc2,w,c
  9679  00DA0A  10DE               	iorwf	postinc2,w,c
  9680  00DA0C  A4D8               	btfss	status,2,c
  9681  00DA0E  D004               	goto	l649
  9682                           
  9683                           ;standbyMode.c: 86: returnValue = 15;
  9684  00DA10  0E00               	movlw	0
  9685  00DA12  6E08               	movwf	check_food@returnValue+1,c
  9686  00DA14  0E0F               	movlw	15
  9687  00DA16  D3EB               	goto	L88
  9688  00DA18                     l649:
  9689                           
  9690                           ;standbyMode.c: 88: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9691  00DA18  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9692  00DA1C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9693  00DA20  0E02               	movlw	2
  9694  00DA22  18DE               	xorwf	postinc2,w,c
  9695  00DA24  10DE               	iorwf	postinc2,w,c
  9696  00DA26  A4D8               	btfss	status,2,c
  9697  00DA28  EF3D  F071         	goto	l623
  9698  00DA2C  EE20 F002          	lfsr	2,2
  9699  00DA30  5003               	movf	check_food@foodInput,w,c
  9700  00DA32  26D9               	addwf	fsr2l,f,c
  9701  00DA34  5004               	movf	check_food@foodInput+1,w,c
  9702  00DA36  22DA               	addwfc	fsr2h,f,c
  9703  00DA38  0E02               	movlw	2
  9704  00DA3A  18DE               	xorwf	postinc2,w,c
  9705  00DA3C  10DE               	iorwf	postinc2,w,c
  9706  00DA3E  A4D8               	btfss	status,2,c
  9707  00DA40  EF3D  F071         	goto	l623
  9708                           
  9709                           ;standbyMode.c: 89: returnValue = 16;
  9710  00DA44  0E00               	movlw	0
  9711  00DA46  6E08               	movwf	check_food@returnValue+1,c
  9712  00DA48  0E10               	movlw	16
  9713  00DA4A  D3D1               	goto	L88
  9714  00DA4C                     
  9715                           ;standbyMode.c: 95: if (foodInput[0] == 1 && foodInput[1] == 1){
  9716  00DA4C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9717  00DA50  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9718  00DA54  04DE               	decf	postinc2,w,c
  9719  00DA56  10DE               	iorwf	postinc2,w,c
  9720  00DA58  A4D8               	btfss	status,2,c
  9721  00DA5A  D00E               	goto	l653
  9722  00DA5C  EE20 F002          	lfsr	2,2
  9723  00DA60  5003               	movf	check_food@foodInput,w,c
  9724  00DA62  26D9               	addwf	fsr2l,f,c
  9725  00DA64  5004               	movf	check_food@foodInput+1,w,c
  9726  00DA66  22DA               	addwfc	fsr2h,f,c
  9727  00DA68  04DE               	decf	postinc2,w,c
  9728  00DA6A  10DE               	iorwf	postinc2,w,c
  9729  00DA6C  A4D8               	btfss	status,2,c
  9730  00DA6E  D004               	goto	l653
  9731                           
  9732                           ;standbyMode.c: 96: returnValue = 17;
  9733  00DA70  0E00               	movlw	0
  9734  00DA72  6E08               	movwf	check_food@returnValue+1,c
  9735  00DA74  0E11               	movlw	17
  9736  00DA76  D3BB               	goto	L88
  9737  00DA78                     l653:
  9738                           
  9739                           ;standbyMode.c: 98: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9740  00DA78  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9741  00DA7C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9742  00DA80  04DE               	decf	postinc2,w,c
  9743  00DA82  10DE               	iorwf	postinc2,w,c
  9744  00DA84  A4D8               	btfss	status,2,c
  9745  00DA86  D00F               	goto	l655
  9746  00DA88  EE20 F002          	lfsr	2,2
  9747  00DA8C  5003               	movf	check_food@foodInput,w,c
  9748  00DA8E  26D9               	addwf	fsr2l,f,c
  9749  00DA90  5004               	movf	check_food@foodInput+1,w,c
  9750  00DA92  22DA               	addwfc	fsr2h,f,c
  9751  00DA94  0E02               	movlw	2
  9752  00DA96  18DE               	xorwf	postinc2,w,c
  9753  00DA98  10DE               	iorwf	postinc2,w,c
  9754  00DA9A  A4D8               	btfss	status,2,c
  9755  00DA9C  D004               	goto	l655
  9756                           
  9757                           ;standbyMode.c: 99: returnValue = 18;
  9758  00DA9E  0E00               	movlw	0
  9759  00DAA0  6E08               	movwf	check_food@returnValue+1,c
  9760  00DAA2  0E12               	movlw	18
  9761  00DAA4  D3A4               	goto	L88
  9762  00DAA6                     l655:
  9763                           
  9764                           ;standbyMode.c: 101: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9765  00DAA6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9766  00DAAA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9767  00DAAE  04DE               	decf	postinc2,w,c
  9768  00DAB0  10DE               	iorwf	postinc2,w,c
  9769  00DAB2  A4D8               	btfss	status,2,c
  9770  00DAB4  D00F               	goto	l657
  9771  00DAB6  EE20 F002          	lfsr	2,2
  9772  00DABA  5003               	movf	check_food@foodInput,w,c
  9773  00DABC  26D9               	addwf	fsr2l,f,c
  9774  00DABE  5004               	movf	check_food@foodInput+1,w,c
  9775  00DAC0  22DA               	addwfc	fsr2h,f,c
  9776  00DAC2  0E03               	movlw	3
  9777  00DAC4  18DE               	xorwf	postinc2,w,c
  9778  00DAC6  10DE               	iorwf	postinc2,w,c
  9779  00DAC8  A4D8               	btfss	status,2,c
  9780  00DACA  D004               	goto	l657
  9781                           
  9782                           ;standbyMode.c: 102: returnValue = 19;
  9783  00DACC  0E00               	movlw	0
  9784  00DACE  6E08               	movwf	check_food@returnValue+1,c
  9785  00DAD0  0E13               	movlw	19
  9786  00DAD2  D38D               	goto	L88
  9787  00DAD4                     l657:
  9788                           
  9789                           ;standbyMode.c: 104: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9790  00DAD4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9791  00DAD8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9792  00DADC  0E02               	movlw	2
  9793  00DADE  18DE               	xorwf	postinc2,w,c
  9794  00DAE0  10DE               	iorwf	postinc2,w,c
  9795  00DAE2  A4D8               	btfss	status,2,c
  9796  00DAE4  D00E               	goto	l659
  9797  00DAE6  EE20 F002          	lfsr	2,2
  9798  00DAEA  5003               	movf	check_food@foodInput,w,c
  9799  00DAEC  26D9               	addwf	fsr2l,f,c
  9800  00DAEE  5004               	movf	check_food@foodInput+1,w,c
  9801  00DAF0  22DA               	addwfc	fsr2h,f,c
  9802  00DAF2  04DE               	decf	postinc2,w,c
  9803  00DAF4  10DE               	iorwf	postinc2,w,c
  9804  00DAF6  A4D8               	btfss	status,2,c
  9805  00DAF8  D004               	goto	l659
  9806                           
  9807                           ;standbyMode.c: 105: returnValue = 20;
  9808  00DAFA  0E00               	movlw	0
  9809  00DAFC  6E08               	movwf	check_food@returnValue+1,c
  9810  00DAFE  0E14               	movlw	20
  9811  00DB00  D376               	goto	L88
  9812  00DB02                     l659:
  9813                           
  9814                           ;standbyMode.c: 107: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9815  00DB02  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9816  00DB06  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9817  00DB0A  0E02               	movlw	2
  9818  00DB0C  18DE               	xorwf	postinc2,w,c
  9819  00DB0E  10DE               	iorwf	postinc2,w,c
  9820  00DB10  A4D8               	btfss	status,2,c
  9821  00DB12  D3B3               	goto	l623
  9822  00DB14  EE20 F002          	lfsr	2,2
  9823  00DB18  5003               	movf	check_food@foodInput,w,c
  9824  00DB1A  26D9               	addwf	fsr2l,f,c
  9825  00DB1C  5004               	movf	check_food@foodInput+1,w,c
  9826  00DB1E  22DA               	addwfc	fsr2h,f,c
  9827  00DB20  0E02               	movlw	2
  9828  00DB22  18DE               	xorwf	postinc2,w,c
  9829  00DB24  10DE               	iorwf	postinc2,w,c
  9830  00DB26  A4D8               	btfss	status,2,c
  9831  00DB28  D3A8               	goto	l623
  9832                           
  9833                           ;standbyMode.c: 108: returnValue = 21;
  9834  00DB2A  0E00               	movlw	0
  9835  00DB2C  6E08               	movwf	check_food@returnValue+1,c
  9836  00DB2E  0E15               	movlw	21
  9837  00DB30  D35E               	goto	L88
  9838  00DB32                     
  9839                           ;standbyMode.c: 114: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9840  00DB32  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9841  00DB36  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9842  00DB3A  04DE               	decf	postinc2,w,c
  9843  00DB3C  10DE               	iorwf	postinc2,w,c
  9844  00DB3E  A4D8               	btfss	status,2,c
  9845  00DB40  D018               	goto	l663
  9846  00DB42  EE20 F002          	lfsr	2,2
  9847  00DB46  5003               	movf	check_food@foodInput,w,c
  9848  00DB48  26D9               	addwf	fsr2l,f,c
  9849  00DB4A  5004               	movf	check_food@foodInput+1,w,c
  9850  00DB4C  22DA               	addwfc	fsr2h,f,c
  9851  00DB4E  04DE               	decf	postinc2,w,c
  9852  00DB50  10DE               	iorwf	postinc2,w,c
  9853  00DB52  A4D8               	btfss	status,2,c
  9854  00DB54  D00E               	goto	l663
  9855  00DB56  EE20 F004          	lfsr	2,4
  9856  00DB5A  5003               	movf	check_food@foodInput,w,c
  9857  00DB5C  26D9               	addwf	fsr2l,f,c
  9858  00DB5E  5004               	movf	check_food@foodInput+1,w,c
  9859  00DB60  22DA               	addwfc	fsr2h,f,c
  9860  00DB62  04DE               	decf	postinc2,w,c
  9861  00DB64  10DE               	iorwf	postinc2,w,c
  9862  00DB66  A4D8               	btfss	status,2,c
  9863  00DB68  D004               	goto	l663
  9864                           
  9865                           ;standbyMode.c: 115: returnValue = 22;
  9866  00DB6A  0E00               	movlw	0
  9867  00DB6C  6E08               	movwf	check_food@returnValue+1,c
  9868  00DB6E  0E16               	movlw	22
  9869  00DB70  D33E               	goto	L88
  9870  00DB72                     l663:
  9871                           
  9872                           ;standbyMode.c: 117: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9873  00DB72  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9874  00DB76  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9875  00DB7A  04DE               	decf	postinc2,w,c
  9876  00DB7C  10DE               	iorwf	postinc2,w,c
  9877  00DB7E  A4D8               	btfss	status,2,c
  9878  00DB80  D37C               	goto	l623
  9879  00DB82  EE20 F002          	lfsr	2,2
  9880  00DB86  5003               	movf	check_food@foodInput,w,c
  9881  00DB88  26D9               	addwf	fsr2l,f,c
  9882  00DB8A  5004               	movf	check_food@foodInput+1,w,c
  9883  00DB8C  22DA               	addwfc	fsr2h,f,c
  9884  00DB8E  04DE               	decf	postinc2,w,c
  9885  00DB90  10DE               	iorwf	postinc2,w,c
  9886  00DB92  A4D8               	btfss	status,2,c
  9887  00DB94  D372               	goto	l623
  9888  00DB96  EE20 F004          	lfsr	2,4
  9889  00DB9A  5003               	movf	check_food@foodInput,w,c
  9890  00DB9C  26D9               	addwf	fsr2l,f,c
  9891  00DB9E  5004               	movf	check_food@foodInput+1,w,c
  9892  00DBA0  22DA               	addwfc	fsr2h,f,c
  9893  00DBA2  0E02               	movlw	2
  9894  00DBA4  18DE               	xorwf	postinc2,w,c
  9895  00DBA6  10DE               	iorwf	postinc2,w,c
  9896  00DBA8  A4D8               	btfss	status,2,c
  9897  00DBAA  D367               	goto	l623
  9898                           
  9899                           ;standbyMode.c: 118: returnValue = 23;
  9900  00DBAC  0E00               	movlw	0
  9901  00DBAE  6E08               	movwf	check_food@returnValue+1,c
  9902  00DBB0  0E17               	movlw	23
  9903  00DBB2  D31D               	goto	L88
  9904  00DBB4                     
  9905                           ;standbyMode.c: 124: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9906  00DBB4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9907  00DBB8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9908  00DBBC  04DE               	decf	postinc2,w,c
  9909  00DBBE  10DE               	iorwf	postinc2,w,c
  9910  00DBC0  A4D8               	btfss	status,2,c
  9911  00DBC2  D018               	goto	l667
  9912  00DBC4  EE20 F002          	lfsr	2,2
  9913  00DBC8  5003               	movf	check_food@foodInput,w,c
  9914  00DBCA  26D9               	addwf	fsr2l,f,c
  9915  00DBCC  5004               	movf	check_food@foodInput+1,w,c
  9916  00DBCE  22DA               	addwfc	fsr2h,f,c
  9917  00DBD0  04DE               	decf	postinc2,w,c
  9918  00DBD2  10DE               	iorwf	postinc2,w,c
  9919  00DBD4  A4D8               	btfss	status,2,c
  9920  00DBD6  D00E               	goto	l667
  9921  00DBD8  EE20 F004          	lfsr	2,4
  9922  00DBDC  5003               	movf	check_food@foodInput,w,c
  9923  00DBDE  26D9               	addwf	fsr2l,f,c
  9924  00DBE0  5004               	movf	check_food@foodInput+1,w,c
  9925  00DBE2  22DA               	addwfc	fsr2h,f,c
  9926  00DBE4  04DE               	decf	postinc2,w,c
  9927  00DBE6  10DE               	iorwf	postinc2,w,c
  9928  00DBE8  A4D8               	btfss	status,2,c
  9929  00DBEA  D004               	goto	l667
  9930                           
  9931                           ;standbyMode.c: 125: returnValue = 24;
  9932  00DBEC  0E00               	movlw	0
  9933  00DBEE  6E08               	movwf	check_food@returnValue+1,c
  9934  00DBF0  0E18               	movlw	24
  9935  00DBF2  D2FD               	goto	L88
  9936  00DBF4                     l667:
  9937                           
  9938                           ;standbyMode.c: 127: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9939  00DBF4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9940  00DBF8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9941  00DBFC  04DE               	decf	postinc2,w,c
  9942  00DBFE  10DE               	iorwf	postinc2,w,c
  9943  00DC00  A4D8               	btfss	status,2,c
  9944  00DC02  D33B               	goto	l623
  9945  00DC04  EE20 F002          	lfsr	2,2
  9946  00DC08  5003               	movf	check_food@foodInput,w,c
  9947  00DC0A  26D9               	addwf	fsr2l,f,c
  9948  00DC0C  5004               	movf	check_food@foodInput+1,w,c
  9949  00DC0E  22DA               	addwfc	fsr2h,f,c
  9950  00DC10  04DE               	decf	postinc2,w,c
  9951  00DC12  10DE               	iorwf	postinc2,w,c
  9952  00DC14  A4D8               	btfss	status,2,c
  9953  00DC16  D331               	goto	l623
  9954  00DC18  EE20 F004          	lfsr	2,4
  9955  00DC1C  5003               	movf	check_food@foodInput,w,c
  9956  00DC1E  26D9               	addwf	fsr2l,f,c
  9957  00DC20  5004               	movf	check_food@foodInput+1,w,c
  9958  00DC22  22DA               	addwfc	fsr2h,f,c
  9959  00DC24  0E02               	movlw	2
  9960  00DC26  18DE               	xorwf	postinc2,w,c
  9961  00DC28  10DE               	iorwf	postinc2,w,c
  9962  00DC2A  A4D8               	btfss	status,2,c
  9963  00DC2C  D326               	goto	l623
  9964                           
  9965                           ;standbyMode.c: 128: returnValue = 25;
  9966  00DC2E  0E00               	movlw	0
  9967  00DC30  6E08               	movwf	check_food@returnValue+1,c
  9968  00DC32  0E19               	movlw	25
  9969  00DC34  D2DC               	goto	L88
  9970  00DC36                     
  9971                           ;standbyMode.c: 134: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9972  00DC36  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9973  00DC3A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9974  00DC3E  04DE               	decf	postinc2,w,c
  9975  00DC40  10DE               	iorwf	postinc2,w,c
  9976  00DC42  A4D8               	btfss	status,2,c
  9977  00DC44  D018               	goto	l671
  9978  00DC46  EE20 F002          	lfsr	2,2
  9979  00DC4A  5003               	movf	check_food@foodInput,w,c
  9980  00DC4C  26D9               	addwf	fsr2l,f,c
  9981  00DC4E  5004               	movf	check_food@foodInput+1,w,c
  9982  00DC50  22DA               	addwfc	fsr2h,f,c
  9983  00DC52  04DE               	decf	postinc2,w,c
  9984  00DC54  10DE               	iorwf	postinc2,w,c
  9985  00DC56  A4D8               	btfss	status,2,c
  9986  00DC58  D00E               	goto	l671
  9987  00DC5A  EE20 F004          	lfsr	2,4
  9988  00DC5E  5003               	movf	check_food@foodInput,w,c
  9989  00DC60  26D9               	addwf	fsr2l,f,c
  9990  00DC62  5004               	movf	check_food@foodInput+1,w,c
  9991  00DC64  22DA               	addwfc	fsr2h,f,c
  9992  00DC66  04DE               	decf	postinc2,w,c
  9993  00DC68  10DE               	iorwf	postinc2,w,c
  9994  00DC6A  A4D8               	btfss	status,2,c
  9995  00DC6C  D004               	goto	l671
  9996                           
  9997                           ;standbyMode.c: 135: returnValue = 26;
  9998  00DC6E  0E00               	movlw	0
  9999  00DC70  6E08               	movwf	check_food@returnValue+1,c
 10000  00DC72  0E1A               	movlw	26
 10001  00DC74  D2BC               	goto	L88
 10002  00DC76                     l671:
 10003                           
 10004                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10005  00DC76  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10006  00DC7A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10007  00DC7E  0E02               	movlw	2
 10008  00DC80  18DE               	xorwf	postinc2,w,c
 10009  00DC82  10DE               	iorwf	postinc2,w,c
 10010  00DC84  A4D8               	btfss	status,2,c
 10011  00DC86  D2F9               	goto	l623
 10012  00DC88  EE20 F002          	lfsr	2,2
 10013  00DC8C  5003               	movf	check_food@foodInput,w,c
 10014  00DC8E  26D9               	addwf	fsr2l,f,c
 10015  00DC90  5004               	movf	check_food@foodInput+1,w,c
 10016  00DC92  22DA               	addwfc	fsr2h,f,c
 10017  00DC94  04DE               	decf	postinc2,w,c
 10018  00DC96  10DE               	iorwf	postinc2,w,c
 10019  00DC98  A4D8               	btfss	status,2,c
 10020  00DC9A  D2EF               	goto	l623
 10021  00DC9C  EE20 F004          	lfsr	2,4
 10022  00DCA0  5003               	movf	check_food@foodInput,w,c
 10023  00DCA2  26D9               	addwf	fsr2l,f,c
 10024  00DCA4  5004               	movf	check_food@foodInput+1,w,c
 10025  00DCA6  22DA               	addwfc	fsr2h,f,c
 10026  00DCA8  04DE               	decf	postinc2,w,c
 10027  00DCAA  10DE               	iorwf	postinc2,w,c
 10028  00DCAC  A4D8               	btfss	status,2,c
 10029  00DCAE  D2E5               	goto	l623
 10030                           
 10031                           ;standbyMode.c: 138: returnValue = 27;
 10032  00DCB0  0E00               	movlw	0
 10033  00DCB2  6E08               	movwf	check_food@returnValue+1,c
 10034  00DCB4  0E1B               	movlw	27
 10035  00DCB6  D29B               	goto	L88
 10036  00DCB8                     
 10037                           ;standbyMode.c: 144: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10038  00DCB8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10039  00DCBC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10040  00DCC0  04DE               	decf	postinc2,w,c
 10041  00DCC2  10DE               	iorwf	postinc2,w,c
 10042  00DCC4  A4D8               	btfss	status,2,c
 10043  00DCC6  D018               	goto	l675
 10044  00DCC8  EE20 F002          	lfsr	2,2
 10045  00DCCC  5003               	movf	check_food@foodInput,w,c
 10046  00DCCE  26D9               	addwf	fsr2l,f,c
 10047  00DCD0  5004               	movf	check_food@foodInput+1,w,c
 10048  00DCD2  22DA               	addwfc	fsr2h,f,c
 10049  00DCD4  04DE               	decf	postinc2,w,c
 10050  00DCD6  10DE               	iorwf	postinc2,w,c
 10051  00DCD8  A4D8               	btfss	status,2,c
 10052  00DCDA  D00E               	goto	l675
 10053  00DCDC  EE20 F004          	lfsr	2,4
 10054  00DCE0  5003               	movf	check_food@foodInput,w,c
 10055  00DCE2  26D9               	addwf	fsr2l,f,c
 10056  00DCE4  5004               	movf	check_food@foodInput+1,w,c
 10057  00DCE6  22DA               	addwfc	fsr2h,f,c
 10058  00DCE8  04DE               	decf	postinc2,w,c
 10059  00DCEA  10DE               	iorwf	postinc2,w,c
 10060  00DCEC  A4D8               	btfss	status,2,c
 10061  00DCEE  D004               	goto	l675
 10062                           
 10063                           ;standbyMode.c: 145: returnValue = 28;
 10064  00DCF0  0E00               	movlw	0
 10065  00DCF2  6E08               	movwf	check_food@returnValue+1,c
 10066  00DCF4  0E1C               	movlw	28
 10067  00DCF6  D27B               	goto	L88
 10068  00DCF8                     l675:
 10069                           
 10070                           ;standbyMode.c: 147: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10071  00DCF8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10072  00DCFC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10073  00DD00  04DE               	decf	postinc2,w,c
 10074  00DD02  10DE               	iorwf	postinc2,w,c
 10075  00DD04  A4D8               	btfss	status,2,c
 10076  00DD06  D019               	goto	l677
 10077  00DD08  EE20 F002          	lfsr	2,2
 10078  00DD0C  5003               	movf	check_food@foodInput,w,c
 10079  00DD0E  26D9               	addwf	fsr2l,f,c
 10080  00DD10  5004               	movf	check_food@foodInput+1,w,c
 10081  00DD12  22DA               	addwfc	fsr2h,f,c
 10082  00DD14  04DE               	decf	postinc2,w,c
 10083  00DD16  10DE               	iorwf	postinc2,w,c
 10084  00DD18  A4D8               	btfss	status,2,c
 10085  00DD1A  D00F               	goto	l677
 10086  00DD1C  EE20 F004          	lfsr	2,4
 10087  00DD20  5003               	movf	check_food@foodInput,w,c
 10088  00DD22  26D9               	addwf	fsr2l,f,c
 10089  00DD24  5004               	movf	check_food@foodInput+1,w,c
 10090  00DD26  22DA               	addwfc	fsr2h,f,c
 10091  00DD28  0E02               	movlw	2
 10092  00DD2A  18DE               	xorwf	postinc2,w,c
 10093  00DD2C  10DE               	iorwf	postinc2,w,c
 10094  00DD2E  A4D8               	btfss	status,2,c
 10095  00DD30  D004               	goto	l677
 10096                           
 10097                           ;standbyMode.c: 148: returnValue = 29;
 10098  00DD32  0E00               	movlw	0
 10099  00DD34  6E08               	movwf	check_food@returnValue+1,c
 10100  00DD36  0E1D               	movlw	29
 10101  00DD38  D25A               	goto	L88
 10102  00DD3A                     l677:
 10103                           
 10104                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10105  00DD3A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10106  00DD3E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10107  00DD42  04DE               	decf	postinc2,w,c
 10108  00DD44  10DE               	iorwf	postinc2,w,c
 10109  00DD46  A4D8               	btfss	status,2,c
 10110  00DD48  D019               	goto	l679
 10111  00DD4A  EE20 F002          	lfsr	2,2
 10112  00DD4E  5003               	movf	check_food@foodInput,w,c
 10113  00DD50  26D9               	addwf	fsr2l,f,c
 10114  00DD52  5004               	movf	check_food@foodInput+1,w,c
 10115  00DD54  22DA               	addwfc	fsr2h,f,c
 10116  00DD56  0E02               	movlw	2
 10117  00DD58  18DE               	xorwf	postinc2,w,c
 10118  00DD5A  10DE               	iorwf	postinc2,w,c
 10119  00DD5C  A4D8               	btfss	status,2,c
 10120  00DD5E  D00E               	goto	l679
 10121  00DD60  EE20 F004          	lfsr	2,4
 10122  00DD64  5003               	movf	check_food@foodInput,w,c
 10123  00DD66  26D9               	addwf	fsr2l,f,c
 10124  00DD68  5004               	movf	check_food@foodInput+1,w,c
 10125  00DD6A  22DA               	addwfc	fsr2h,f,c
 10126  00DD6C  04DE               	decf	postinc2,w,c
 10127  00DD6E  10DE               	iorwf	postinc2,w,c
 10128  00DD70  A4D8               	btfss	status,2,c
 10129  00DD72  D004               	goto	l679
 10130                           
 10131                           ;standbyMode.c: 151: returnValue = 30;
 10132  00DD74  0E00               	movlw	0
 10133  00DD76  6E08               	movwf	check_food@returnValue+1,c
 10134  00DD78  0E1E               	movlw	30
 10135  00DD7A  D239               	goto	L88
 10136  00DD7C                     l679:
 10137                           
 10138                           ;standbyMode.c: 153: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10139  00DD7C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10140  00DD80  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10141  00DD84  0E02               	movlw	2
 10142  00DD86  18DE               	xorwf	postinc2,w,c
 10143  00DD88  10DE               	iorwf	postinc2,w,c
 10144  00DD8A  A4D8               	btfss	status,2,c
 10145  00DD8C  D276               	goto	l623
 10146  00DD8E  EE20 F002          	lfsr	2,2
 10147  00DD92  5003               	movf	check_food@foodInput,w,c
 10148  00DD94  26D9               	addwf	fsr2l,f,c
 10149  00DD96  5004               	movf	check_food@foodInput+1,w,c
 10150  00DD98  22DA               	addwfc	fsr2h,f,c
 10151  00DD9A  04DE               	decf	postinc2,w,c
 10152  00DD9C  10DE               	iorwf	postinc2,w,c
 10153  00DD9E  A4D8               	btfss	status,2,c
 10154  00DDA0  D26C               	goto	l623
 10155  00DDA2  EE20 F004          	lfsr	2,4
 10156  00DDA6  5003               	movf	check_food@foodInput,w,c
 10157  00DDA8  26D9               	addwf	fsr2l,f,c
 10158  00DDAA  5004               	movf	check_food@foodInput+1,w,c
 10159  00DDAC  22DA               	addwfc	fsr2h,f,c
 10160  00DDAE  04DE               	decf	postinc2,w,c
 10161  00DDB0  10DE               	iorwf	postinc2,w,c
 10162  00DDB2  A4D8               	btfss	status,2,c
 10163  00DDB4  D262               	goto	l623
 10164                           
 10165                           ;standbyMode.c: 154: returnValue = 31;
 10166  00DDB6  0E00               	movlw	0
 10167  00DDB8  6E08               	movwf	check_food@returnValue+1,c
 10168  00DDBA  0E1F               	movlw	31
 10169  00DDBC  D218               	goto	L88
 10170  00DDBE                     
 10171                           ;standbyMode.c: 160: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10172  00DDBE  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10173  00DDC2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10174  00DDC6  04DE               	decf	postinc2,w,c
 10175  00DDC8  10DE               	iorwf	postinc2,w,c
 10176  00DDCA  A4D8               	btfss	status,2,c
 10177  00DDCC  D018               	goto	l683
 10178  00DDCE  EE20 F002          	lfsr	2,2
 10179  00DDD2  5003               	movf	check_food@foodInput,w,c
 10180  00DDD4  26D9               	addwf	fsr2l,f,c
 10181  00DDD6  5004               	movf	check_food@foodInput+1,w,c
 10182  00DDD8  22DA               	addwfc	fsr2h,f,c
 10183  00DDDA  04DE               	decf	postinc2,w,c
 10184  00DDDC  10DE               	iorwf	postinc2,w,c
 10185  00DDDE  A4D8               	btfss	status,2,c
 10186  00DDE0  D00E               	goto	l683
 10187  00DDE2  EE20 F004          	lfsr	2,4
 10188  00DDE6  5003               	movf	check_food@foodInput,w,c
 10189  00DDE8  26D9               	addwf	fsr2l,f,c
 10190  00DDEA  5004               	movf	check_food@foodInput+1,w,c
 10191  00DDEC  22DA               	addwfc	fsr2h,f,c
 10192  00DDEE  04DE               	decf	postinc2,w,c
 10193  00DDF0  10DE               	iorwf	postinc2,w,c
 10194  00DDF2  A4D8               	btfss	status,2,c
 10195  00DDF4  D004               	goto	l683
 10196                           
 10197                           ;standbyMode.c: 161: returnValue = 32;
 10198  00DDF6  0E00               	movlw	0
 10199  00DDF8  6E08               	movwf	check_food@returnValue+1,c
 10200  00DDFA  0E20               	movlw	32
 10201  00DDFC  D1F8               	goto	L88
 10202  00DDFE                     l683:
 10203                           
 10204                           ;standbyMode.c: 163: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10205  00DDFE  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10206  00DE02  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10207  00DE06  04DE               	decf	postinc2,w,c
 10208  00DE08  10DE               	iorwf	postinc2,w,c
 10209  00DE0A  A4D8               	btfss	status,2,c
 10210  00DE0C  D019               	goto	l685
 10211  00DE0E  EE20 F002          	lfsr	2,2
 10212  00DE12  5003               	movf	check_food@foodInput,w,c
 10213  00DE14  26D9               	addwf	fsr2l,f,c
 10214  00DE16  5004               	movf	check_food@foodInput+1,w,c
 10215  00DE18  22DA               	addwfc	fsr2h,f,c
 10216  00DE1A  04DE               	decf	postinc2,w,c
 10217  00DE1C  10DE               	iorwf	postinc2,w,c
 10218  00DE1E  A4D8               	btfss	status,2,c
 10219  00DE20  D00F               	goto	l685
 10220  00DE22  EE20 F004          	lfsr	2,4
 10221  00DE26  5003               	movf	check_food@foodInput,w,c
 10222  00DE28  26D9               	addwf	fsr2l,f,c
 10223  00DE2A  5004               	movf	check_food@foodInput+1,w,c
 10224  00DE2C  22DA               	addwfc	fsr2h,f,c
 10225  00DE2E  0E02               	movlw	2
 10226  00DE30  18DE               	xorwf	postinc2,w,c
 10227  00DE32  10DE               	iorwf	postinc2,w,c
 10228  00DE34  A4D8               	btfss	status,2,c
 10229  00DE36  D004               	goto	l685
 10230                           
 10231                           ;standbyMode.c: 164: returnValue = 33;
 10232  00DE38  0E00               	movlw	0
 10233  00DE3A  6E08               	movwf	check_food@returnValue+1,c
 10234  00DE3C  0E21               	movlw	33
 10235  00DE3E  D1D7               	goto	L88
 10236  00DE40                     l685:
 10237                           
 10238                           ;standbyMode.c: 166: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10239  00DE40  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10240  00DE44  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10241  00DE48  04DE               	decf	postinc2,w,c
 10242  00DE4A  10DE               	iorwf	postinc2,w,c
 10243  00DE4C  A4D8               	btfss	status,2,c
 10244  00DE4E  D019               	goto	l687
 10245  00DE50  EE20 F002          	lfsr	2,2
 10246  00DE54  5003               	movf	check_food@foodInput,w,c
 10247  00DE56  26D9               	addwf	fsr2l,f,c
 10248  00DE58  5004               	movf	check_food@foodInput+1,w,c
 10249  00DE5A  22DA               	addwfc	fsr2h,f,c
 10250  00DE5C  0E02               	movlw	2
 10251  00DE5E  18DE               	xorwf	postinc2,w,c
 10252  00DE60  10DE               	iorwf	postinc2,w,c
 10253  00DE62  A4D8               	btfss	status,2,c
 10254  00DE64  D00E               	goto	l687
 10255  00DE66  EE20 F004          	lfsr	2,4
 10256  00DE6A  5003               	movf	check_food@foodInput,w,c
 10257  00DE6C  26D9               	addwf	fsr2l,f,c
 10258  00DE6E  5004               	movf	check_food@foodInput+1,w,c
 10259  00DE70  22DA               	addwfc	fsr2h,f,c
 10260  00DE72  04DE               	decf	postinc2,w,c
 10261  00DE74  10DE               	iorwf	postinc2,w,c
 10262  00DE76  A4D8               	btfss	status,2,c
 10263  00DE78  D004               	goto	l687
 10264                           
 10265                           ;standbyMode.c: 167: returnValue = 34;
 10266  00DE7A  0E00               	movlw	0
 10267  00DE7C  6E08               	movwf	check_food@returnValue+1,c
 10268  00DE7E  0E22               	movlw	34
 10269  00DE80  D1B6               	goto	L88
 10270  00DE82                     l687:
 10271                           
 10272                           ;standbyMode.c: 169: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10273  00DE82  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10274  00DE86  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10275  00DE8A  0E02               	movlw	2
 10276  00DE8C  18DE               	xorwf	postinc2,w,c
 10277  00DE8E  10DE               	iorwf	postinc2,w,c
 10278  00DE90  A4D8               	btfss	status,2,c
 10279  00DE92  D1F3               	goto	l623
 10280  00DE94  EE20 F002          	lfsr	2,2
 10281  00DE98  5003               	movf	check_food@foodInput,w,c
 10282  00DE9A  26D9               	addwf	fsr2l,f,c
 10283  00DE9C  5004               	movf	check_food@foodInput+1,w,c
 10284  00DE9E  22DA               	addwfc	fsr2h,f,c
 10285  00DEA0  04DE               	decf	postinc2,w,c
 10286  00DEA2  10DE               	iorwf	postinc2,w,c
 10287  00DEA4  A4D8               	btfss	status,2,c
 10288  00DEA6  D1E9               	goto	l623
 10289  00DEA8  EE20 F004          	lfsr	2,4
 10290  00DEAC  5003               	movf	check_food@foodInput,w,c
 10291  00DEAE  26D9               	addwf	fsr2l,f,c
 10292  00DEB0  5004               	movf	check_food@foodInput+1,w,c
 10293  00DEB2  22DA               	addwfc	fsr2h,f,c
 10294  00DEB4  04DE               	decf	postinc2,w,c
 10295  00DEB6  10DE               	iorwf	postinc2,w,c
 10296  00DEB8  A4D8               	btfss	status,2,c
 10297  00DEBA  D1DF               	goto	l623
 10298                           
 10299                           ;standbyMode.c: 170: returnValue = 35;
 10300  00DEBC  0E00               	movlw	0
 10301  00DEBE  6E08               	movwf	check_food@returnValue+1,c
 10302  00DEC0  0E23               	movlw	35
 10303  00DEC2  D195               	goto	L88
 10304  00DEC4                     
 10305                           ;standbyMode.c: 176: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10306  00DEC4  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10307  00DEC8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10308  00DECC  04DE               	decf	postinc2,w,c
 10309  00DECE  10DE               	iorwf	postinc2,w,c
 10310  00DED0  A4D8               	btfss	status,2,c
 10311  00DED2  D018               	goto	l691
 10312  00DED4  EE20 F002          	lfsr	2,2
 10313  00DED8  5003               	movf	check_food@foodInput,w,c
 10314  00DEDA  26D9               	addwf	fsr2l,f,c
 10315  00DEDC  5004               	movf	check_food@foodInput+1,w,c
 10316  00DEDE  22DA               	addwfc	fsr2h,f,c
 10317  00DEE0  04DE               	decf	postinc2,w,c
 10318  00DEE2  10DE               	iorwf	postinc2,w,c
 10319  00DEE4  A4D8               	btfss	status,2,c
 10320  00DEE6  D00E               	goto	l691
 10321  00DEE8  EE20 F004          	lfsr	2,4
 10322  00DEEC  5003               	movf	check_food@foodInput,w,c
 10323  00DEEE  26D9               	addwf	fsr2l,f,c
 10324  00DEF0  5004               	movf	check_food@foodInput+1,w,c
 10325  00DEF2  22DA               	addwfc	fsr2h,f,c
 10326  00DEF4  04DE               	decf	postinc2,w,c
 10327  00DEF6  10DE               	iorwf	postinc2,w,c
 10328  00DEF8  A4D8               	btfss	status,2,c
 10329  00DEFA  D004               	goto	l691
 10330                           
 10331                           ;standbyMode.c: 177: returnValue = 36;
 10332  00DEFC  0E00               	movlw	0
 10333  00DEFE  6E08               	movwf	check_food@returnValue+1,c
 10334  00DF00  0E24               	movlw	36
 10335  00DF02  D175               	goto	L88
 10336  00DF04                     l691:
 10337                           
 10338                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10339  00DF04  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10340  00DF08  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10341  00DF0C  04DE               	decf	postinc2,w,c
 10342  00DF0E  10DE               	iorwf	postinc2,w,c
 10343  00DF10  A4D8               	btfss	status,2,c
 10344  00DF12  D1B3               	goto	l623
 10345  00DF14  EE20 F002          	lfsr	2,2
 10346  00DF18  5003               	movf	check_food@foodInput,w,c
 10347  00DF1A  26D9               	addwf	fsr2l,f,c
 10348  00DF1C  5004               	movf	check_food@foodInput+1,w,c
 10349  00DF1E  22DA               	addwfc	fsr2h,f,c
 10350  00DF20  04DE               	decf	postinc2,w,c
 10351  00DF22  10DE               	iorwf	postinc2,w,c
 10352  00DF24  A4D8               	btfss	status,2,c
 10353  00DF26  D1A9               	goto	l623
 10354  00DF28  EE20 F004          	lfsr	2,4
 10355  00DF2C  5003               	movf	check_food@foodInput,w,c
 10356  00DF2E  26D9               	addwf	fsr2l,f,c
 10357  00DF30  5004               	movf	check_food@foodInput+1,w,c
 10358  00DF32  22DA               	addwfc	fsr2h,f,c
 10359  00DF34  0E02               	movlw	2
 10360  00DF36  18DE               	xorwf	postinc2,w,c
 10361  00DF38  10DE               	iorwf	postinc2,w,c
 10362  00DF3A  A4D8               	btfss	status,2,c
 10363  00DF3C  D19E               	goto	l623
 10364                           
 10365                           ;standbyMode.c: 180: returnValue = 37;
 10366  00DF3E  0E00               	movlw	0
 10367  00DF40  6E08               	movwf	check_food@returnValue+1,c
 10368  00DF42  0E25               	movlw	37
 10369  00DF44  D154               	goto	L88
 10370  00DF46                     
 10371                           ;standbyMode.c: 186: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10372  00DF46  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10373  00DF4A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10374  00DF4E  04DE               	decf	postinc2,w,c
 10375  00DF50  10DE               	iorwf	postinc2,w,c
 10376  00DF52  A4D8               	btfss	status,2,c
 10377  00DF54  D018               	goto	l695
 10378  00DF56  EE20 F002          	lfsr	2,2
 10379  00DF5A  5003               	movf	check_food@foodInput,w,c
 10380  00DF5C  26D9               	addwf	fsr2l,f,c
 10381  00DF5E  5004               	movf	check_food@foodInput+1,w,c
 10382  00DF60  22DA               	addwfc	fsr2h,f,c
 10383  00DF62  04DE               	decf	postinc2,w,c
 10384  00DF64  10DE               	iorwf	postinc2,w,c
 10385  00DF66  A4D8               	btfss	status,2,c
 10386  00DF68  D00E               	goto	l695
 10387  00DF6A  EE20 F004          	lfsr	2,4
 10388  00DF6E  5003               	movf	check_food@foodInput,w,c
 10389  00DF70  26D9               	addwf	fsr2l,f,c
 10390  00DF72  5004               	movf	check_food@foodInput+1,w,c
 10391  00DF74  22DA               	addwfc	fsr2h,f,c
 10392  00DF76  04DE               	decf	postinc2,w,c
 10393  00DF78  10DE               	iorwf	postinc2,w,c
 10394  00DF7A  A4D8               	btfss	status,2,c
 10395  00DF7C  D004               	goto	l695
 10396                           
 10397                           ;standbyMode.c: 187: returnValue = 38;
 10398  00DF7E  0E00               	movlw	0
 10399  00DF80  6E08               	movwf	check_food@returnValue+1,c
 10400  00DF82  0E26               	movlw	38
 10401  00DF84  D134               	goto	L88
 10402  00DF86                     l695:
 10403                           
 10404                           ;standbyMode.c: 189: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10405  00DF86  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10406  00DF8A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10407  00DF8E  04DE               	decf	postinc2,w,c
 10408  00DF90  10DE               	iorwf	postinc2,w,c
 10409  00DF92  A4D8               	btfss	status,2,c
 10410  00DF94  D019               	goto	l697
 10411  00DF96  EE20 F002          	lfsr	2,2
 10412  00DF9A  5003               	movf	check_food@foodInput,w,c
 10413  00DF9C  26D9               	addwf	fsr2l,f,c
 10414  00DF9E  5004               	movf	check_food@foodInput+1,w,c
 10415  00DFA0  22DA               	addwfc	fsr2h,f,c
 10416  00DFA2  04DE               	decf	postinc2,w,c
 10417  00DFA4  10DE               	iorwf	postinc2,w,c
 10418  00DFA6  A4D8               	btfss	status,2,c
 10419  00DFA8  D00F               	goto	l697
 10420  00DFAA  EE20 F004          	lfsr	2,4
 10421  00DFAE  5003               	movf	check_food@foodInput,w,c
 10422  00DFB0  26D9               	addwf	fsr2l,f,c
 10423  00DFB2  5004               	movf	check_food@foodInput+1,w,c
 10424  00DFB4  22DA               	addwfc	fsr2h,f,c
 10425  00DFB6  0E02               	movlw	2
 10426  00DFB8  18DE               	xorwf	postinc2,w,c
 10427  00DFBA  10DE               	iorwf	postinc2,w,c
 10428  00DFBC  A4D8               	btfss	status,2,c
 10429  00DFBE  D004               	goto	l697
 10430                           
 10431                           ;standbyMode.c: 190: returnValue = 39;
 10432  00DFC0  0E00               	movlw	0
 10433  00DFC2  6E08               	movwf	check_food@returnValue+1,c
 10434  00DFC4  0E27               	movlw	39
 10435  00DFC6  D113               	goto	L88
 10436  00DFC8                     l697:
 10437                           
 10438                           ;standbyMode.c: 192: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10439  00DFC8  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10440  00DFCC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10441  00DFD0  04DE               	decf	postinc2,w,c
 10442  00DFD2  10DE               	iorwf	postinc2,w,c
 10443  00DFD4  A4D8               	btfss	status,2,c
 10444  00DFD6  D019               	goto	l699
 10445  00DFD8  EE20 F002          	lfsr	2,2
 10446  00DFDC  5003               	movf	check_food@foodInput,w,c
 10447  00DFDE  26D9               	addwf	fsr2l,f,c
 10448  00DFE0  5004               	movf	check_food@foodInput+1,w,c
 10449  00DFE2  22DA               	addwfc	fsr2h,f,c
 10450  00DFE4  0E02               	movlw	2
 10451  00DFE6  18DE               	xorwf	postinc2,w,c
 10452  00DFE8  10DE               	iorwf	postinc2,w,c
 10453  00DFEA  A4D8               	btfss	status,2,c
 10454  00DFEC  D00E               	goto	l699
 10455  00DFEE  EE20 F004          	lfsr	2,4
 10456  00DFF2  5003               	movf	check_food@foodInput,w,c
 10457  00DFF4  26D9               	addwf	fsr2l,f,c
 10458  00DFF6  5004               	movf	check_food@foodInput+1,w,c
 10459  00DFF8  22DA               	addwfc	fsr2h,f,c
 10460  00DFFA  04DE               	decf	postinc2,w,c
 10461  00DFFC  10DE               	iorwf	postinc2,w,c
 10462  00DFFE  A4D8               	btfss	status,2,c
 10463  00E000  D004               	goto	l699
 10464                           
 10465                           ;standbyMode.c: 193: returnValue = 40;
 10466  00E002  0E00               	movlw	0
 10467  00E004  6E08               	movwf	check_food@returnValue+1,c
 10468  00E006  0E28               	movlw	40
 10469  00E008  D0F2               	goto	L88
 10470  00E00A                     l699:
 10471                           
 10472                           ;standbyMode.c: 195: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10473  00E00A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10474  00E00E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10475  00E012  0E02               	movlw	2
 10476  00E014  18DE               	xorwf	postinc2,w,c
 10477  00E016  10DE               	iorwf	postinc2,w,c
 10478  00E018  A4D8               	btfss	status,2,c
 10479  00E01A  D12F               	goto	l623
 10480  00E01C  EE20 F002          	lfsr	2,2
 10481  00E020  5003               	movf	check_food@foodInput,w,c
 10482  00E022  26D9               	addwf	fsr2l,f,c
 10483  00E024  5004               	movf	check_food@foodInput+1,w,c
 10484  00E026  22DA               	addwfc	fsr2h,f,c
 10485  00E028  04DE               	decf	postinc2,w,c
 10486  00E02A  10DE               	iorwf	postinc2,w,c
 10487  00E02C  A4D8               	btfss	status,2,c
 10488  00E02E  D125               	goto	l623
 10489  00E030  EE20 F004          	lfsr	2,4
 10490  00E034  5003               	movf	check_food@foodInput,w,c
 10491  00E036  26D9               	addwf	fsr2l,f,c
 10492  00E038  5004               	movf	check_food@foodInput+1,w,c
 10493  00E03A  22DA               	addwfc	fsr2h,f,c
 10494  00E03C  04DE               	decf	postinc2,w,c
 10495  00E03E  10DE               	iorwf	postinc2,w,c
 10496  00E040  A4D8               	btfss	status,2,c
 10497  00E042  D11B               	goto	l623
 10498                           
 10499                           ;standbyMode.c: 196: returnValue = 41;
 10500  00E044  0E00               	movlw	0
 10501  00E046  6E08               	movwf	check_food@returnValue+1,c
 10502  00E048  0E29               	movlw	41
 10503  00E04A  D0D1               	goto	L88
 10504  00E04C                     
 10505                           ;standbyMode.c: 202: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10506  00E04C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10507  00E050  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10508  00E054  04DE               	decf	postinc2,w,c
 10509  00E056  10DE               	iorwf	postinc2,w,c
 10510  00E058  A4D8               	btfss	status,2,c
 10511  00E05A  D10F               	goto	l623
 10512  00E05C  EE20 F002          	lfsr	2,2
 10513  00E060  5003               	movf	check_food@foodInput,w,c
 10514  00E062  26D9               	addwf	fsr2l,f,c
 10515  00E064  5004               	movf	check_food@foodInput+1,w,c
 10516  00E066  22DA               	addwfc	fsr2h,f,c
 10517  00E068  04DE               	decf	postinc2,w,c
 10518  00E06A  10DE               	iorwf	postinc2,w,c
 10519  00E06C  A4D8               	btfss	status,2,c
 10520  00E06E  D105               	goto	l623
 10521  00E070  EE20 F004          	lfsr	2,4
 10522  00E074  5003               	movf	check_food@foodInput,w,c
 10523  00E076  26D9               	addwf	fsr2l,f,c
 10524  00E078  5004               	movf	check_food@foodInput+1,w,c
 10525  00E07A  22DA               	addwfc	fsr2h,f,c
 10526  00E07C  04DE               	decf	postinc2,w,c
 10527  00E07E  10DE               	iorwf	postinc2,w,c
 10528  00E080  A4D8               	btfss	status,2,c
 10529  00E082  D0FB               	goto	l623
 10530  00E084  EE20 F006          	lfsr	2,6
 10531  00E088  5003               	movf	check_food@foodInput,w,c
 10532  00E08A  26D9               	addwf	fsr2l,f,c
 10533  00E08C  5004               	movf	check_food@foodInput+1,w,c
 10534  00E08E  22DA               	addwfc	fsr2h,f,c
 10535  00E090  04DE               	decf	postinc2,w,c
 10536  00E092  10DE               	iorwf	postinc2,w,c
 10537  00E094  A4D8               	btfss	status,2,c
 10538  00E096  D0F1               	goto	l623
 10539                           
 10540                           ;standbyMode.c: 203: returnValue = 42;
 10541  00E098  0E00               	movlw	0
 10542  00E09A  6E08               	movwf	check_food@returnValue+1,c
 10543  00E09C  0E2A               	movlw	42
 10544  00E09E  D0A7               	goto	L88
 10545  00E0A0                     
 10546                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10547  00E0A0  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10548  00E0A4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10549  00E0A8  04DE               	decf	postinc2,w,c
 10550  00E0AA  10DE               	iorwf	postinc2,w,c
 10551  00E0AC  A4D8               	btfss	status,2,c
 10552  00E0AE  D0E5               	goto	l623
 10553  00E0B0  EE20 F002          	lfsr	2,2
 10554  00E0B4  5003               	movf	check_food@foodInput,w,c
 10555  00E0B6  26D9               	addwf	fsr2l,f,c
 10556  00E0B8  5004               	movf	check_food@foodInput+1,w,c
 10557  00E0BA  22DA               	addwfc	fsr2h,f,c
 10558  00E0BC  04DE               	decf	postinc2,w,c
 10559  00E0BE  10DE               	iorwf	postinc2,w,c
 10560  00E0C0  A4D8               	btfss	status,2,c
 10561  00E0C2  D0DB               	goto	l623
 10562  00E0C4  EE20 F004          	lfsr	2,4
 10563  00E0C8  5003               	movf	check_food@foodInput,w,c
 10564  00E0CA  26D9               	addwf	fsr2l,f,c
 10565  00E0CC  5004               	movf	check_food@foodInput+1,w,c
 10566  00E0CE  22DA               	addwfc	fsr2h,f,c
 10567  00E0D0  04DE               	decf	postinc2,w,c
 10568  00E0D2  10DE               	iorwf	postinc2,w,c
 10569  00E0D4  A4D8               	btfss	status,2,c
 10570  00E0D6  D0D1               	goto	l623
 10571  00E0D8  EE20 F006          	lfsr	2,6
 10572  00E0DC  5003               	movf	check_food@foodInput,w,c
 10573  00E0DE  26D9               	addwf	fsr2l,f,c
 10574  00E0E0  5004               	movf	check_food@foodInput+1,w,c
 10575  00E0E2  22DA               	addwfc	fsr2h,f,c
 10576  00E0E4  04DE               	decf	postinc2,w,c
 10577  00E0E6  10DE               	iorwf	postinc2,w,c
 10578  00E0E8  A4D8               	btfss	status,2,c
 10579  00E0EA  D0C7               	goto	l623
 10580                           
 10581                           ;standbyMode.c: 210: returnValue = 43;
 10582  00E0EC  0E00               	movlw	0
 10583  00E0EE  6E08               	movwf	check_food@returnValue+1,c
 10584  00E0F0  0E2B               	movlw	43
 10585  00E0F2  D07D               	goto	L88
 10586  00E0F4                     
 10587                           ;standbyMode.c: 216: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10588  00E0F4  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10589  00E0F8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10590  00E0FC  04DE               	decf	postinc2,w,c
 10591  00E0FE  10DE               	iorwf	postinc2,w,c
 10592  00E100  A4D8               	btfss	status,2,c
 10593  00E102  D0BB               	goto	l623
 10594  00E104  EE20 F002          	lfsr	2,2
 10595  00E108  5003               	movf	check_food@foodInput,w,c
 10596  00E10A  26D9               	addwf	fsr2l,f,c
 10597  00E10C  5004               	movf	check_food@foodInput+1,w,c
 10598  00E10E  22DA               	addwfc	fsr2h,f,c
 10599  00E110  04DE               	decf	postinc2,w,c
 10600  00E112  10DE               	iorwf	postinc2,w,c
 10601  00E114  A4D8               	btfss	status,2,c
 10602  00E116  D0B1               	goto	l623
 10603  00E118  EE20 F004          	lfsr	2,4
 10604  00E11C  5003               	movf	check_food@foodInput,w,c
 10605  00E11E  26D9               	addwf	fsr2l,f,c
 10606  00E120  5004               	movf	check_food@foodInput+1,w,c
 10607  00E122  22DA               	addwfc	fsr2h,f,c
 10608  00E124  04DE               	decf	postinc2,w,c
 10609  00E126  10DE               	iorwf	postinc2,w,c
 10610  00E128  A4D8               	btfss	status,2,c
 10611  00E12A  D0A7               	goto	l623
 10612  00E12C  EE20 F006          	lfsr	2,6
 10613  00E130  5003               	movf	check_food@foodInput,w,c
 10614  00E132  26D9               	addwf	fsr2l,f,c
 10615  00E134  5004               	movf	check_food@foodInput+1,w,c
 10616  00E136  22DA               	addwfc	fsr2h,f,c
 10617  00E138  04DE               	decf	postinc2,w,c
 10618  00E13A  10DE               	iorwf	postinc2,w,c
 10619  00E13C  A4D8               	btfss	status,2,c
 10620  00E13E  D09D               	goto	l623
 10621                           
 10622                           ;standbyMode.c: 217: returnValue = 44;
 10623  00E140  0E00               	movlw	0
 10624  00E142  6E08               	movwf	check_food@returnValue+1,c
 10625  00E144  0E2C               	movlw	44
 10626  00E146  D053               	goto	L88
 10627  00E148                     
 10628                           ;standbyMode.c: 223: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10629  00E148  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10630  00E14C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10631  00E150  04DE               	decf	postinc2,w,c
 10632  00E152  10DE               	iorwf	postinc2,w,c
 10633  00E154  A4D8               	btfss	status,2,c
 10634  00E156  D091               	goto	l623
 10635  00E158  EE20 F002          	lfsr	2,2
 10636  00E15C  5003               	movf	check_food@foodInput,w,c
 10637  00E15E  26D9               	addwf	fsr2l,f,c
 10638  00E160  5004               	movf	check_food@foodInput+1,w,c
 10639  00E162  22DA               	addwfc	fsr2h,f,c
 10640  00E164  04DE               	decf	postinc2,w,c
 10641  00E166  10DE               	iorwf	postinc2,w,c
 10642  00E168  A4D8               	btfss	status,2,c
 10643  00E16A  D087               	goto	l623
 10644  00E16C  EE20 F004          	lfsr	2,4
 10645  00E170  5003               	movf	check_food@foodInput,w,c
 10646  00E172  26D9               	addwf	fsr2l,f,c
 10647  00E174  5004               	movf	check_food@foodInput+1,w,c
 10648  00E176  22DA               	addwfc	fsr2h,f,c
 10649  00E178  04DE               	decf	postinc2,w,c
 10650  00E17A  10DE               	iorwf	postinc2,w,c
 10651  00E17C  A4D8               	btfss	status,2,c
 10652  00E17E  D07D               	goto	l623
 10653  00E180  EE20 F006          	lfsr	2,6
 10654  00E184  5003               	movf	check_food@foodInput,w,c
 10655  00E186  26D9               	addwf	fsr2l,f,c
 10656  00E188  5004               	movf	check_food@foodInput+1,w,c
 10657  00E18A  22DA               	addwfc	fsr2h,f,c
 10658  00E18C  04DE               	decf	postinc2,w,c
 10659  00E18E  10DE               	iorwf	postinc2,w,c
 10660  00E190  A4D8               	btfss	status,2,c
 10661  00E192  D073               	goto	l623
 10662                           
 10663                           ;standbyMode.c: 224: returnValue = 45;
 10664  00E194  0E00               	movlw	0
 10665  00E196  6E08               	movwf	check_food@returnValue+1,c
 10666  00E198  0E2D               	movlw	45
 10667  00E19A  D029               	goto	L88
 10668  00E19C                     
 10669                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10670  00E19C  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10671  00E1A0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10672  00E1A4  04DE               	decf	postinc2,w,c
 10673  00E1A6  10DE               	iorwf	postinc2,w,c
 10674  00E1A8  A4D8               	btfss	status,2,c
 10675  00E1AA  D067               	goto	l623
 10676  00E1AC  EE20 F002          	lfsr	2,2
 10677  00E1B0  5003               	movf	check_food@foodInput,w,c
 10678  00E1B2  26D9               	addwf	fsr2l,f,c
 10679  00E1B4  5004               	movf	check_food@foodInput+1,w,c
 10680  00E1B6  22DA               	addwfc	fsr2h,f,c
 10681  00E1B8  04DE               	decf	postinc2,w,c
 10682  00E1BA  10DE               	iorwf	postinc2,w,c
 10683  00E1BC  A4D8               	btfss	status,2,c
 10684  00E1BE  D05D               	goto	l623
 10685  00E1C0  EE20 F004          	lfsr	2,4
 10686  00E1C4  5003               	movf	check_food@foodInput,w,c
 10687  00E1C6  26D9               	addwf	fsr2l,f,c
 10688  00E1C8  5004               	movf	check_food@foodInput+1,w,c
 10689  00E1CA  22DA               	addwfc	fsr2h,f,c
 10690  00E1CC  04DE               	decf	postinc2,w,c
 10691  00E1CE  10DE               	iorwf	postinc2,w,c
 10692  00E1D0  A4D8               	btfss	status,2,c
 10693  00E1D2  D053               	goto	l623
 10694  00E1D4  EE20 F006          	lfsr	2,6
 10695  00E1D8  5003               	movf	check_food@foodInput,w,c
 10696  00E1DA  26D9               	addwf	fsr2l,f,c
 10697  00E1DC  5004               	movf	check_food@foodInput+1,w,c
 10698  00E1DE  22DA               	addwfc	fsr2h,f,c
 10699  00E1E0  04DE               	decf	postinc2,w,c
 10700  00E1E2  10DE               	iorwf	postinc2,w,c
 10701  00E1E4  A4D8               	btfss	status,2,c
 10702  00E1E6  D049               	goto	l623
 10703                           
 10704                           ;standbyMode.c: 231: returnValue = 46;
 10705  00E1E8  0E00               	movlw	0
 10706  00E1EA  6E08               	movwf	check_food@returnValue+1,c
 10707  00E1EC  0E2E               	movlw	46
 10708  00E1EE                     L88:
 10709  00E1EE  6E07               	movwf	check_food@returnValue,c
 10710                           
 10711                           ;standbyMode.c: 238: }
 10712                           
 10713                           ;standbyMode.c: 237: break;
 10714                           
 10715                           ;standbyMode.c: 236: default:
 10716                           
 10717                           ;standbyMode.c: 232: }
 10718                           ;standbyMode.c: 233: break;
 10719  00E1F0  D044               	goto	l623
 10720  00E1F2                     l618:
 10721  00E1F2  C001  F005         	movff	check_food@sum,??_check_food
 10722  00E1F6  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10723                           
 10724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10725                           ; Switch size 1, requested type "space"
 10726                           ; Number of cases is 1, Range of values is 0 to 0
 10727                           ; switch strategies available:
 10728                           ; Name         Instructions Cycles
 10729                           ; simple_byte            4     3 (average)
 10730                           ;	Chosen strategy is simple_byte
 10731  00E1FA  5006               	movf	??_check_food+1,w,c
 10732  00E1FC  0A00               	xorlw	0	; case 0
 10733  00E1FE  A4D8               	btfss	status,2,c
 10734  00E200  D03C               	goto	l623
 10735                           
 10736                           ; Switch size 1, requested type "space"
 10737                           ; Number of cases is 18, Range of values is 3 to 43
 10738                           ; switch strategies available:
 10739                           ; Name         Instructions Cycles
 10740                           ; simple_byte           55    28 (average)
 10741                           ;	Chosen strategy is simple_byte
 10742  00E202  5005               	movf	??_check_food,w,c
 10743  00E204  0A03               	xorlw	3	; case 3
 10744  00E206  B4D8               	btfsc	status,2,c
 10745  00E208  EFEA  F06B         	goto	l619
 10746  00E20C  0A04               	xorlw	4	; case 7
 10747  00E20E  B4D8               	btfsc	status,2,c
 10748  00E210  EF06  F06C         	goto	l624
 10749  00E214  0A0D               	xorlw	13	; case 10
 10750  00E216  B4D8               	btfsc	status,2,c
 10751  00E218  EF4C  F06C         	goto	l634
 10752  00E21C  0A06               	xorlw	6	; case 12
 10753  00E21E  B4D8               	btfsc	status,2,c
 10754  00E220  EF22  F06C         	goto	l628
 10755  00E224  0A01               	xorlw	1	; case 13
 10756  00E226  B4D8               	btfsc	status,2,c
 10757  00E228  D484               	goto	l662
 10758  00E22A  0A02               	xorlw	2	; case 15
 10759  00E22C  B4D8               	btfsc	status,2,c
 10760  00E22E  EFAE  F06C         	goto	l642
 10761  00E232  0A1E               	xorlw	30	; case 17
 10762  00E234  B4D8               	btfsc	status,2,c
 10763  00E236  D4FF               	goto	l670
 10764  00E238  0A03               	xorlw	3	; case 18
 10765  00E23A  B4D8               	btfsc	status,2,c
 10766  00E23C  D4BB               	goto	l666
 10767  00E23E  0A01               	xorlw	1	; case 19
 10768  00E240  B4D8               	btfsc	status,2,c
 10769  00E242  D404               	goto	l652
 10770  00E244  0A05               	xorlw	5	; case 22
 10771  00E246  B4D8               	btfsc	status,2,c
 10772  00E248  D5BA               	goto	l682
 10773  00E24A  0A0F               	xorlw	15	; case 25
 10774  00E24C  B4D8               	btfsc	status,2,c
 10775  00E24E  D6FE               	goto	l702
 10776  00E250  0A03               	xorlw	3	; case 26
 10777  00E252  B4D8               	btfsc	status,2,c
 10778  00E254  D637               	goto	l690
 10779  00E256  0A01               	xorlw	1	; case 27
 10780  00E258  B4D8               	btfsc	status,2,c
 10781  00E25A  D52E               	goto	l674
 10782  00E25C  0A06               	xorlw	6	; case 29
 10783  00E25E  B4D8               	btfsc	status,2,c
 10784  00E260  D71F               	goto	l704
 10785  00E262  0A02               	xorlw	2	; case 31
 10786  00E264  B4D8               	btfsc	status,2,c
 10787  00E266  D66F               	goto	l694
 10788  00E268  0A3D               	xorlw	61	; case 34
 10789  00E26A  B4D8               	btfsc	status,2,c
 10790  00E26C  D743               	goto	l706
 10791  00E26E  0A05               	xorlw	5	; case 39
 10792  00E270  B4D8               	btfsc	status,2,c
 10793  00E272  D76A               	goto	l708
 10794  00E274  0A0C               	xorlw	12	; case 43
 10795  00E276  B4D8               	btfsc	status,2,c
 10796  00E278  D791               	goto	l710
 10797  00E27A                     l623:
 10798                           
 10799                           ;standbyMode.c: 239: return returnValue;
 10800  00E27A  C007  F001         	movff	check_food@returnValue,?_check_food
 10801  00E27E  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 10802  00E282  0012               	return		;funcret
 10803  00E284                     __end_of_check_food:
 10804                           	opt stack 0
 10805                           tblptru	equ	0xFF8
 10806                           tblptrh	equ	0xFF7
 10807                           tblptrl	equ	0xFF6
 10808                           tablat	equ	0xFF5
 10809                           prodh	equ	0xFF4
 10810                           prodl	equ	0xFF3
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           postdec1	equ	0xFE5
 10814                           plusw1	equ	0xFE3
 10815                           fsr1l	equ	0xFE1
 10816                           indf2	equ	0xFDF
 10817                           postinc2	equ	0xFDE
 10818                           postdec2	equ	0xFDD
 10819                           plusw2	equ	0xFDB
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824 ;; *************** function _diet_press *****************
 10825 ;; Defined at:
 10826 ;;		line 1201 in file "standbyMode.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;  drawer          2   40[COMRAM] unsigned int 
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;  keypress        1   54[COMRAM] unsigned char 
 10831 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 10832 ;;  sum             2   52[COMRAM] unsigned int 
 10833 ;;  count           2   50[COMRAM] unsigned int 
 10834 ;;  backCheck       2   48[COMRAM] unsigned int 
 10835 ;;  i               2   46[COMRAM] unsigned int 
 10836 ;;  previous        2   44[COMRAM] unsigned int 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  2   40[COMRAM] unsigned int 
 10839 ;; Registers used:
 10840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:       23 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    3
 10853 ;; This function calls:
 10854 ;;		_lcdInst
 10855 ;;		_printf
 10856 ;;		_putch
 10857 ;; This function is called by:
 10858 ;;		_standbyMode
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           	psect	text15
 10863  00CD26                     __ptext15:
 10864                           	opt stack 0
 10865  00CD26                     _diet_press:
 10866                           	opt stack 26
 10867                           
 10868                           ;incstack = 0
 10869                           ;standbyMode.c: 1204: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 10870  00CD26  0E01               	movlw	1
 10871  00CD28  ECD3  F054         	call	_lcdInst
 10872  00CD2C  0EC3               	movlw	195
 10873  00CD2E  6E2B               	movwf	??_diet_press& (0+255),c
 10874  00CD30  0ECD               	movlw	205
 10875  00CD32                     u14307:
 10876  00CD32  2EE8               	decfsz	wreg,f,c
 10877  00CD34  D7FE               	bra	u14307
 10878  00CD36  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10879  00CD38  D7FC               	bra	u14307
 10880  00CD3A  F000               	nop	
 10881                           
 10882                           ;standbyMode.c: 1205: printf("Drawer %i diet:", drawer);
 10883  00CD3C  0E7C               	movlw	low STR_103
 10884  00CD3E  6E0D               	movwf	printf@f,c
 10885  00CD40  0EFD               	movlw	high STR_103
 10886  00CD42  6E0E               	movwf	printf@f+1,c
 10887  00CD44  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10888  00CD48  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10889  00CD4C  EC9A  F064         	call	_printf	;wreg free
 10890                           
 10891                           ;standbyMode.c: 1206: lcdInst(0xC0);;
 10892  00CD50  0EC0               	movlw	192
 10893  00CD52  ECD3  F054         	call	_lcdInst
 10894                           
 10895                           ;standbyMode.c: 1208: unsigned int count = 0;
 10896  00CD56  0E00               	movlw	0
 10897  00CD58  6E34               	movwf	diet_press@count+1,c
 10898  00CD5A  0E00               	movlw	0
 10899  00CD5C  6E33               	movwf	diet_press@count,c
 10900                           
 10901                           ;standbyMode.c: 1209: unsigned int previous = 0;
 10902  00CD5E  0E00               	movlw	0
 10903  00CD60  6E2E               	movwf	diet_press@previous+1,c
 10904  00CD62  0E00               	movlw	0
 10905  00CD64  6E2D               	movwf	diet_press@previous,c
 10906                           
 10907                           ;standbyMode.c: 1210: unsigned int sum = 0;
 10908  00CD66  0E00               	movlw	0
 10909  00CD68  6E36               	movwf	diet_press@sum+1,c
 10910  00CD6A  0E00               	movlw	0
 10911  00CD6C  6E35               	movwf	diet_press@sum,c
 10912                           
 10913                           ;standbyMode.c: 1211: unsigned int i = 0;
 10914  00CD6E  0E00               	movlw	0
 10915  00CD70  6E30               	movwf	diet_press@i+1,c
 10916  00CD72  0E00               	movlw	0
 10917  00CD74  6E2F               	movwf	diet_press@i,c
 10918                           
 10919                           ;standbyMode.c: 1212: unsigned int dietTable[4] = {0, 0, 0, 0};
 10920  00CD76  EE20  F0D0         	lfsr	2,diet_press@F3132
 10921  00CD7A  EE10  F038         	lfsr	1,diet_press@dietTable
 10922  00CD7E  0E07               	movlw	7
 10923  00CD80                     u10821:
 10924  00CD80  CFDB FFE3          	movff	plusw2,plusw1
 10925  00CD84  06E8               	decf	wreg,f,c
 10926  00CD86  E2FC               	bc	u10821
 10927                           
 10928                           ;standbyMode.c: 1213: unsigned int backCheck = 0;
 10929  00CD88  0E00               	movlw	0
 10930  00CD8A  6E32               	movwf	diet_press@backCheck+1,c
 10931  00CD8C  0E00               	movlw	0
 10932  00CD8E  6E31               	movwf	diet_press@backCheck,c
 10933  00CD90                     l1007:
 10934  00CD90  A281               	btfss	3969,1,c	;volatile
 10935  00CD92  D7FE               	goto	l1006
 10936                           
 10937                           ;standbyMode.c: 1217: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10938  00CD94  3881               	swapf	3969,w,c	;volatile
 10939  00CD96  0B0F               	andlw	15
 10940  00CD98  0B0F               	andlw	15
 10941  00CD9A  6E37               	movwf	diet_press@keypress,c
 10942  00CD9C  B281               	btfsc	3969,1,c	;volatile
 10943  00CD9E  D7FE               	goto	l1011
 10944                           
 10945                           ;standbyMode.c: 1220: if(keypress == 15){
 10946  00CDA0  0E0F               	movlw	15
 10947  00CDA2  1837               	xorwf	diet_press@keypress,w,c
 10948  00CDA4  B4D8               	btfsc	status,2,c
 10949  00CDA6  D086               	goto	l1014
 10950                           
 10951                           ;standbyMode.c: 1223: else if (keypress == 14){
 10952                           
 10953                           ;standbyMode.c: 1222: }
 10954                           
 10955                           ;standbyMode.c: 1221: break;
 10956  00CDA8  0E0E               	movlw	14
 10957  00CDAA  1837               	xorwf	diet_press@keypress,w,c
 10958  00CDAC  A4D8               	btfss	status,2,c
 10959  00CDAE  D005               	goto	l1016
 10960                           
 10961                           ;standbyMode.c: 1224: backCheck = 1;
 10962  00CDB0  0E00               	movlw	0
 10963  00CDB2  6E32               	movwf	diet_press@backCheck+1,c
 10964  00CDB4  0E01               	movlw	1
 10965  00CDB6  6E31               	movwf	diet_press@backCheck,c
 10966                           
 10967                           ;standbyMode.c: 1225: break;
 10968  00CDB8  D07D               	goto	l1014
 10969  00CDBA                     l1016:
 10970                           
 10971                           ;standbyMode.c: 1227: else if (keypress == 12){
 10972  00CDBA  0E0C               	movlw	12
 10973  00CDBC  1837               	xorwf	diet_press@keypress,w,c
 10974  00CDBE  A4D8               	btfss	status,2,c
 10975  00CDC0  D02D               	goto	l1018
 10976                           
 10977                           ;standbyMode.c: 1228: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10978  00CDC2  0E01               	movlw	1
 10979  00CDC4  ECD3  F054         	call	_lcdInst
 10980  00CDC8  0EC3               	movlw	195
 10981  00CDCA  6E2B               	movwf	??_diet_press& (0+255),c
 10982  00CDCC  0ECD               	movlw	205
 10983  00CDCE                     u14317:
 10984  00CDCE  2EE8               	decfsz	wreg,f,c
 10985  00CDD0  D7FE               	bra	u14317
 10986  00CDD2  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10987  00CDD4  D7FC               	bra	u14317
 10988  00CDD6  F000               	nop	
 10989                           
 10990                           ;standbyMode.c: 1229: printf("Drawer %i diet:", drawer);
 10991  00CDD8  0E7C               	movlw	low STR_103
 10992  00CDDA  6E0D               	movwf	printf@f,c
 10993  00CDDC  0EFD               	movlw	high STR_103
 10994  00CDDE  6E0E               	movwf	printf@f+1,c
 10995  00CDE0  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10996  00CDE4  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10997  00CDE8  EC9A  F064         	call	_printf	;wreg free
 10998                           
 10999                           ;standbyMode.c: 1230: lcdInst(0xC0);;
 11000  00CDEC  0EC0               	movlw	192
 11001  00CDEE  ECD3  F054         	call	_lcdInst
 11002                           
 11003                           ;standbyMode.c: 1231: count = 0;
 11004  00CDF2  0E00               	movlw	0
 11005  00CDF4  6E34               	movwf	diet_press@count+1,c
 11006  00CDF6  0E00               	movlw	0
 11007  00CDF8  6E33               	movwf	diet_press@count,c
 11008                           
 11009                           ;standbyMode.c: 1232: dietTable[0] = 0;
 11010  00CDFA  0E00               	movlw	0
 11011  00CDFC  6E39               	movwf	diet_press@dietTable+1,c
 11012  00CDFE  0E00               	movlw	0
 11013  00CE00  6E38               	movwf	diet_press@dietTable,c
 11014                           
 11015                           ;standbyMode.c: 1233: dietTable[1] = 0;
 11016  00CE02  0E00               	movlw	0
 11017  00CE04  6E3B               	movwf	diet_press@dietTable+3,c
 11018  00CE06  0E00               	movlw	0
 11019  00CE08  6E3A               	movwf	diet_press@dietTable+2,c
 11020                           
 11021                           ;standbyMode.c: 1234: dietTable[2] = 0;
 11022  00CE0A  0E00               	movlw	0
 11023  00CE0C  6E3D               	movwf	diet_press@dietTable+5,c
 11024  00CE0E  0E00               	movlw	0
 11025  00CE10  6E3C               	movwf	diet_press@dietTable+4,c
 11026                           
 11027                           ;standbyMode.c: 1235: dietTable[3] = 0;
 11028  00CE12  0E00               	movlw	0
 11029  00CE14  6E3F               	movwf	diet_press@dietTable+7,c
 11030  00CE16  0E00               	movlw	0
 11031  00CE18  6E3E               	movwf	diet_press@dietTable+6,c
 11032                           
 11033                           ;standbyMode.c: 1236: }
 11034  00CE1A  D7BA               	goto	l1006
 11035  00CE1C                     l1018:
 11036                           
 11037                           ;standbyMode.c: 1237: else if (count <= 3){
 11038  00CE1C  5034               	movf	diet_press@count+1,w,c
 11039  00CE1E  E1B8               	bnz	l1007
 11040  00CE20  0E04               	movlw	4
 11041  00CE22  5C33               	subwf	diet_press@count,w,c
 11042  00CE24  B0D8               	btfsc	status,0,c
 11043  00CE26  D7B4               	goto	l1006
 11044                           
 11045                           ;standbyMode.c: 1238: if (keypress == 3 || keypress == 7){
 11046  00CE28  0E03               	movlw	3
 11047  00CE2A  1837               	xorwf	diet_press@keypress,w,c
 11048  00CE2C  B4D8               	btfsc	status,2,c
 11049  00CE2E  D004               	goto	u10900
 11050  00CE30  0E07               	movlw	7
 11051  00CE32  1837               	xorwf	diet_press@keypress,w,c
 11052  00CE34  A4D8               	btfss	status,2,c
 11053  00CE36  D016               	goto	l1021
 11054  00CE38                     u10900:
 11055                           
 11056                           ;standbyMode.c: 1239: putch(input[keypress]);
 11057  00CE38  5037               	movf	diet_press@keypress,w,c
 11058  00CE3A  0D01               	mullw	1
 11059  00CE3C  0E62               	movlw	low _input
 11060  00CE3E  24F3               	addwf	prodl,w,c
 11061  00CE40  6EF6               	movwf	tblptrl,c
 11062  00CE42  0EFC               	movlw	high _input
 11063  00CE44  20F4               	addwfc	prodh,w,c
 11064  00CE46  6EF7               	movwf	tblptrh,c
 11065  00CE48                     	if	1	;There are 3 active tblptr bytes
 11066  00CE48  6AF8               	clrf	tblptru,c
 11067  00CE4A  0E00               	movlw	low (__mediumconst shr (0+16))
 11068  00CE4C  22F8               	addwfc	tblptru,f,c
 11069  00CE4E                     	endif
 11070  00CE4E  0008               	tblrd		*
 11071  00CE50  50F5               	movf	tablat,w,c
 11072  00CE52  ECE7  F054         	call	_putch
 11073                           
 11074                           ;standbyMode.c: 1240: dietTable[count] = keypress;
 11075  00CE56  5037               	movf	diet_press@keypress,w,c
 11076  00CE58  6E2B               	movwf	??_diet_press& (0+255),c
 11077  00CE5A  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11078  00CE5C  D01D               	goto	L107
 11079  00CE5E                     l8706:
 11080                           
 11081                           ;standbyMode.c: 1241: count += 1;
 11082  00CE5E  4A33               	infsnz	diet_press@count,f,c
 11083  00CE60  2A34               	incf	diet_press@count+1,f,c
 11084                           
 11085                           ;standbyMode.c: 1242: }
 11086  00CE62  D796               	goto	l1006
 11087  00CE64                     l1021:
 11088                           
 11089                           ;standbyMode.c: 1243: else if (keypress == 11){
 11090  00CE64  0E0B               	movlw	11
 11091  00CE66  1837               	xorwf	diet_press@keypress,w,c
 11092  00CE68  A4D8               	btfss	status,2,c
 11093  00CE6A  D792               	goto	l1006
 11094                           
 11095                           ;standbyMode.c: 1244: putch(input[keypress]);
 11096  00CE6C  5037               	movf	diet_press@keypress,w,c
 11097  00CE6E  0D01               	mullw	1
 11098  00CE70  0E62               	movlw	low _input
 11099  00CE72  24F3               	addwf	prodl,w,c
 11100  00CE74  6EF6               	movwf	tblptrl,c
 11101  00CE76  0EFC               	movlw	high _input
 11102  00CE78  20F4               	addwfc	prodh,w,c
 11103  00CE7A  6EF7               	movwf	tblptrh,c
 11104  00CE7C                     	if	1	;There are 3 active tblptr bytes
 11105  00CE7C  6AF8               	clrf	tblptru,c
 11106  00CE7E  0E00               	movlw	low (__mediumconst shr (0+16))
 11107  00CE80  22F8               	addwfc	tblptru,f,c
 11108  00CE82                     	endif
 11109  00CE82  0008               	tblrd		*
 11110  00CE84  50F5               	movf	tablat,w,c
 11111  00CE86  ECE7  F054         	call	_putch
 11112                           
 11113                           ;standbyMode.c: 1245: dietTable[count] = keypress + 1;
 11114  00CE8A  5037               	movf	diet_press@keypress,w,c
 11115  00CE8C  6E2B               	movwf	??_diet_press& (0+255),c
 11116  00CE8E  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 11117  00CE90  0E01               	movlw	1
 11118  00CE92  262B               	addwf	??_diet_press,f,c
 11119  00CE94  0E00               	movlw	0
 11120  00CE96  222C               	addwfc	??_diet_press+1,f,c
 11121  00CE98                     L107:
 11122  00CE98  90D8               	bcf	status,0,c
 11123  00CE9A  3433               	rlcf	diet_press@count,w,c
 11124  00CE9C  6ED9               	movwf	fsr2l,c
 11125  00CE9E  3434               	rlcf	diet_press@count+1,w,c
 11126  00CEA0  6EDA               	movwf	fsr2h,c
 11127  00CEA2  0E38               	movlw	low diet_press@dietTable
 11128  00CEA4  26D9               	addwf	fsr2l,f,c
 11129  00CEA6  0E00               	movlw	high diet_press@dietTable
 11130  00CEA8  22DA               	addwfc	fsr2h,f,c
 11131  00CEAA  C02B  FFDE         	movff	??_diet_press,postinc2
 11132  00CEAE  C02C  FFDD         	movff	??_diet_press+1,postdec2
 11133  00CEB2  D7D5               	goto	l8706
 11134  00CEB4                     l1014:
 11135                           
 11136                           ;standbyMode.c: 1247: }
 11137                           ;standbyMode.c: 1248: }
 11138                           ;standbyMode.c: 1249: }
 11139                           ;standbyMode.c: 1251: if (backCheck == 1){
 11140  00CEB4  0431               	decf	diet_press@backCheck,w,c
 11141  00CEB6  1032               	iorwf	diet_press@backCheck+1,w,c
 11142  00CEB8  A4D8               	btfss	status,2,c
 11143  00CEBA  D004               	goto	l1027
 11144                           
 11145                           ;standbyMode.c: 1252: sum = 100;
 11146  00CEBC  0E00               	movlw	0
 11147  00CEBE  6E36               	movwf	diet_press@sum+1,c
 11148  00CEC0  0E64               	movlw	100
 11149  00CEC2  D199               	goto	L106
 11150  00CEC4                     l1027:
 11151                           
 11152                           ;standbyMode.c: 1256: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11153  00CEC4  0E0C               	movlw	12
 11154  00CEC6  1838               	xorwf	diet_press@dietTable,w,c
 11155  00CEC8  1039               	iorwf	diet_press@dietTable+1,w,c
 11156  00CECA  A4D8               	btfss	status,2,c
 11157  00CECC  D010               	goto	l1029
 11158  00CECE  503A               	movf	diet_press@dietTable+2,w,c
 11159  00CED0  103B               	iorwf	diet_press@dietTable+3,w,c
 11160  00CED2  A4D8               	btfss	status,2,c
 11161  00CED4  D00C               	goto	l1029
 11162  00CED6  503C               	movf	diet_press@dietTable+4,w,c
 11163  00CED8  103D               	iorwf	diet_press@dietTable+5,w,c
 11164  00CEDA  A4D8               	btfss	status,2,c
 11165  00CEDC  D008               	goto	l1029
 11166  00CEDE  503E               	movf	diet_press@dietTable+6,w,c
 11167  00CEE0  103F               	iorwf	diet_press@dietTable+7,w,c
 11168  00CEE2  A4D8               	btfss	status,2,c
 11169  00CEE4  D004               	goto	l1029
 11170                           
 11171                           ;standbyMode.c: 1257: sum = 12;
 11172  00CEE6  0E00               	movlw	0
 11173  00CEE8  6E36               	movwf	diet_press@sum+1,c
 11174  00CEEA  0E0C               	movlw	12
 11175  00CEEC  D184               	goto	L106
 11176  00CEEE                     l1029:
 11177                           
 11178                           ;standbyMode.c: 1261: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11179  00CEEE  0E03               	movlw	3
 11180  00CEF0  1838               	xorwf	diet_press@dietTable,w,c
 11181  00CEF2  1039               	iorwf	diet_press@dietTable+1,w,c
 11182  00CEF4  A4D8               	btfss	status,2,c
 11183  00CEF6  D010               	goto	l1031
 11184  00CEF8  503A               	movf	diet_press@dietTable+2,w,c
 11185  00CEFA  103B               	iorwf	diet_press@dietTable+3,w,c
 11186  00CEFC  A4D8               	btfss	status,2,c
 11187  00CEFE  D00C               	goto	l1031
 11188  00CF00  503C               	movf	diet_press@dietTable+4,w,c
 11189  00CF02  103D               	iorwf	diet_press@dietTable+5,w,c
 11190  00CF04  A4D8               	btfss	status,2,c
 11191  00CF06  D008               	goto	l1031
 11192  00CF08  503E               	movf	diet_press@dietTable+6,w,c
 11193  00CF0A  103F               	iorwf	diet_press@dietTable+7,w,c
 11194  00CF0C  A4D8               	btfss	status,2,c
 11195  00CF0E  D004               	goto	l1031
 11196                           
 11197                           ;standbyMode.c: 1262: sum = 3;
 11198  00CF10  0E00               	movlw	0
 11199  00CF12  6E36               	movwf	diet_press@sum+1,c
 11200  00CF14  0E03               	movlw	3
 11201  00CF16  D16F               	goto	L106
 11202  00CF18                     l1031:
 11203                           
 11204                           ;standbyMode.c: 1266: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11205  00CF18  0E07               	movlw	7
 11206  00CF1A  1838               	xorwf	diet_press@dietTable,w,c
 11207  00CF1C  1039               	iorwf	diet_press@dietTable+1,w,c
 11208  00CF1E  A4D8               	btfss	status,2,c
 11209  00CF20  D010               	goto	l1033
 11210  00CF22  503A               	movf	diet_press@dietTable+2,w,c
 11211  00CF24  103B               	iorwf	diet_press@dietTable+3,w,c
 11212  00CF26  A4D8               	btfss	status,2,c
 11213  00CF28  D00C               	goto	l1033
 11214  00CF2A  503C               	movf	diet_press@dietTable+4,w,c
 11215  00CF2C  103D               	iorwf	diet_press@dietTable+5,w,c
 11216  00CF2E  A4D8               	btfss	status,2,c
 11217  00CF30  D008               	goto	l1033
 11218  00CF32  503E               	movf	diet_press@dietTable+6,w,c
 11219  00CF34  103F               	iorwf	diet_press@dietTable+7,w,c
 11220  00CF36  A4D8               	btfss	status,2,c
 11221  00CF38  D004               	goto	l1033
 11222                           
 11223                           ;standbyMode.c: 1267: sum = 7;
 11224  00CF3A  0E00               	movlw	0
 11225  00CF3C  6E36               	movwf	diet_press@sum+1,c
 11226  00CF3E  0E07               	movlw	7
 11227  00CF40  D15A               	goto	L106
 11228  00CF42                     l1033:
 11229                           
 11230                           ;standbyMode.c: 1271: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11231  00CF42  0E03               	movlw	3
 11232  00CF44  1838               	xorwf	diet_press@dietTable,w,c
 11233  00CF46  1039               	iorwf	diet_press@dietTable+1,w,c
 11234  00CF48  A4D8               	btfss	status,2,c
 11235  00CF4A  D011               	goto	l1035
 11236  00CF4C  0E07               	movlw	7
 11237  00CF4E  183A               	xorwf	diet_press@dietTable+2,w,c
 11238  00CF50  103B               	iorwf	diet_press@dietTable+3,w,c
 11239  00CF52  A4D8               	btfss	status,2,c
 11240  00CF54  D00C               	goto	l1035
 11241  00CF56  503C               	movf	diet_press@dietTable+4,w,c
 11242  00CF58  103D               	iorwf	diet_press@dietTable+5,w,c
 11243  00CF5A  A4D8               	btfss	status,2,c
 11244  00CF5C  D008               	goto	l1035
 11245  00CF5E  503E               	movf	diet_press@dietTable+6,w,c
 11246  00CF60  103F               	iorwf	diet_press@dietTable+7,w,c
 11247  00CF62  A4D8               	btfss	status,2,c
 11248  00CF64  D004               	goto	l1035
 11249                           
 11250                           ;standbyMode.c: 1272: sum = 10;
 11251  00CF66  0E00               	movlw	0
 11252  00CF68  6E36               	movwf	diet_press@sum+1,c
 11253  00CF6A  0E0A               	movlw	10
 11254  00CF6C  D144               	goto	L106
 11255  00CF6E                     l1035:
 11256                           
 11257                           ;standbyMode.c: 1276: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11258  00CF6E  0E03               	movlw	3
 11259  00CF70  1838               	xorwf	diet_press@dietTable,w,c
 11260  00CF72  1039               	iorwf	diet_press@dietTable+1,w,c
 11261  00CF74  A4D8               	btfss	status,2,c
 11262  00CF76  D011               	goto	l1037
 11263  00CF78  0E0C               	movlw	12
 11264  00CF7A  183A               	xorwf	diet_press@dietTable+2,w,c
 11265  00CF7C  103B               	iorwf	diet_press@dietTable+3,w,c
 11266  00CF7E  A4D8               	btfss	status,2,c
 11267  00CF80  D00C               	goto	l1037
 11268  00CF82  503C               	movf	diet_press@dietTable+4,w,c
 11269  00CF84  103D               	iorwf	diet_press@dietTable+5,w,c
 11270  00CF86  A4D8               	btfss	status,2,c
 11271  00CF88  D008               	goto	l1037
 11272  00CF8A  503E               	movf	diet_press@dietTable+6,w,c
 11273  00CF8C  103F               	iorwf	diet_press@dietTable+7,w,c
 11274  00CF8E  A4D8               	btfss	status,2,c
 11275  00CF90  D004               	goto	l1037
 11276                           
 11277                           ;standbyMode.c: 1277: sum = 15;
 11278  00CF92  0E00               	movlw	0
 11279  00CF94  6E36               	movwf	diet_press@sum+1,c
 11280  00CF96  0E0F               	movlw	15
 11281  00CF98  D12E               	goto	L106
 11282  00CF9A                     l1037:
 11283                           
 11284                           ;standbyMode.c: 1281: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11285  00CF9A  0E07               	movlw	7
 11286  00CF9C  1838               	xorwf	diet_press@dietTable,w,c
 11287  00CF9E  1039               	iorwf	diet_press@dietTable+1,w,c
 11288  00CFA0  A4D8               	btfss	status,2,c
 11289  00CFA2  D011               	goto	l1039
 11290  00CFA4  0E0C               	movlw	12
 11291  00CFA6  183A               	xorwf	diet_press@dietTable+2,w,c
 11292  00CFA8  103B               	iorwf	diet_press@dietTable+3,w,c
 11293  00CFAA  A4D8               	btfss	status,2,c
 11294  00CFAC  D00C               	goto	l1039
 11295  00CFAE  503C               	movf	diet_press@dietTable+4,w,c
 11296  00CFB0  103D               	iorwf	diet_press@dietTable+5,w,c
 11297  00CFB2  A4D8               	btfss	status,2,c
 11298  00CFB4  D008               	goto	l1039
 11299  00CFB6  503E               	movf	diet_press@dietTable+6,w,c
 11300  00CFB8  103F               	iorwf	diet_press@dietTable+7,w,c
 11301  00CFBA  A4D8               	btfss	status,2,c
 11302  00CFBC  D004               	goto	l1039
 11303                           
 11304                           ;standbyMode.c: 1282: sum = 19;
 11305  00CFBE  0E00               	movlw	0
 11306  00CFC0  6E36               	movwf	diet_press@sum+1,c
 11307  00CFC2  0E13               	movlw	19
 11308  00CFC4  D118               	goto	L106
 11309  00CFC6                     l1039:
 11310                           
 11311                           ;standbyMode.c: 1286: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11312  00CFC6  0E03               	movlw	3
 11313  00CFC8  1838               	xorwf	diet_press@dietTable,w,c
 11314  00CFCA  1039               	iorwf	diet_press@dietTable+1,w,c
 11315  00CFCC  A4D8               	btfss	status,2,c
 11316  00CFCE  D012               	goto	l1041
 11317  00CFD0  0E03               	movlw	3
 11318  00CFD2  183A               	xorwf	diet_press@dietTable+2,w,c
 11319  00CFD4  103B               	iorwf	diet_press@dietTable+3,w,c
 11320  00CFD6  A4D8               	btfss	status,2,c
 11321  00CFD8  D00D               	goto	l1041
 11322  00CFDA  0E07               	movlw	7
 11323  00CFDC  183C               	xorwf	diet_press@dietTable+4,w,c
 11324  00CFDE  103D               	iorwf	diet_press@dietTable+5,w,c
 11325  00CFE0  A4D8               	btfss	status,2,c
 11326  00CFE2  D008               	goto	l1041
 11327  00CFE4  503E               	movf	diet_press@dietTable+6,w,c
 11328  00CFE6  103F               	iorwf	diet_press@dietTable+7,w,c
 11329  00CFE8  A4D8               	btfss	status,2,c
 11330  00CFEA  D004               	goto	l1041
 11331                           
 11332                           ;standbyMode.c: 1287: sum = 13;
 11333  00CFEC  0E00               	movlw	0
 11334  00CFEE  6E36               	movwf	diet_press@sum+1,c
 11335  00CFF0  0E0D               	movlw	13
 11336  00CFF2  D101               	goto	L106
 11337  00CFF4                     l1041:
 11338                           
 11339                           ;standbyMode.c: 1291: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11340  00CFF4  0E03               	movlw	3
 11341  00CFF6  1838               	xorwf	diet_press@dietTable,w,c
 11342  00CFF8  1039               	iorwf	diet_press@dietTable+1,w,c
 11343  00CFFA  A4D8               	btfss	status,2,c
 11344  00CFFC  D012               	goto	l1043
 11345  00CFFE  0E03               	movlw	3
 11346  00D000  183A               	xorwf	diet_press@dietTable+2,w,c
 11347  00D002  103B               	iorwf	diet_press@dietTable+3,w,c
 11348  00D004  A4D8               	btfss	status,2,c
 11349  00D006  D00D               	goto	l1043
 11350  00D008  0E0C               	movlw	12
 11351  00D00A  183C               	xorwf	diet_press@dietTable+4,w,c
 11352  00D00C  103D               	iorwf	diet_press@dietTable+5,w,c
 11353  00D00E  A4D8               	btfss	status,2,c
 11354  00D010  D008               	goto	l1043
 11355  00D012  503E               	movf	diet_press@dietTable+6,w,c
 11356  00D014  103F               	iorwf	diet_press@dietTable+7,w,c
 11357  00D016  A4D8               	btfss	status,2,c
 11358  00D018  D004               	goto	l1043
 11359                           
 11360                           ;standbyMode.c: 1292: sum = 18;
 11361  00D01A  0E00               	movlw	0
 11362  00D01C  6E36               	movwf	diet_press@sum+1,c
 11363  00D01E  0E12               	movlw	18
 11364  00D020  D0EA               	goto	L106
 11365  00D022                     l1043:
 11366                           
 11367                           ;standbyMode.c: 1296: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11368  00D022  0E03               	movlw	3
 11369  00D024  1838               	xorwf	diet_press@dietTable,w,c
 11370  00D026  1039               	iorwf	diet_press@dietTable+1,w,c
 11371  00D028  A4D8               	btfss	status,2,c
 11372  00D02A  D012               	goto	l1045
 11373  00D02C  0E07               	movlw	7
 11374  00D02E  183A               	xorwf	diet_press@dietTable+2,w,c
 11375  00D030  103B               	iorwf	diet_press@dietTable+3,w,c
 11376  00D032  A4D8               	btfss	status,2,c
 11377  00D034  D00D               	goto	l1045
 11378  00D036  0E07               	movlw	7
 11379  00D038  183C               	xorwf	diet_press@dietTable+4,w,c
 11380  00D03A  103D               	iorwf	diet_press@dietTable+5,w,c
 11381  00D03C  A4D8               	btfss	status,2,c
 11382  00D03E  D008               	goto	l1045
 11383  00D040  503E               	movf	diet_press@dietTable+6,w,c
 11384  00D042  103F               	iorwf	diet_press@dietTable+7,w,c
 11385  00D044  A4D8               	btfss	status,2,c
 11386  00D046  D004               	goto	l1045
 11387                           
 11388                           ;standbyMode.c: 1297: sum = 17;
 11389  00D048  0E00               	movlw	0
 11390  00D04A  6E36               	movwf	diet_press@sum+1,c
 11391  00D04C  0E11               	movlw	17
 11392  00D04E  D0D3               	goto	L106
 11393  00D050                     l1045:
 11394                           
 11395                           ;standbyMode.c: 1301: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11396  00D050  0E03               	movlw	3
 11397  00D052  1838               	xorwf	diet_press@dietTable,w,c
 11398  00D054  1039               	iorwf	diet_press@dietTable+1,w,c
 11399  00D056  A4D8               	btfss	status,2,c
 11400  00D058  D012               	goto	l1047
 11401  00D05A  0E0C               	movlw	12
 11402  00D05C  183A               	xorwf	diet_press@dietTable+2,w,c
 11403  00D05E  103B               	iorwf	diet_press@dietTable+3,w,c
 11404  00D060  A4D8               	btfss	status,2,c
 11405  00D062  D00D               	goto	l1047
 11406  00D064  0E0C               	movlw	12
 11407  00D066  183C               	xorwf	diet_press@dietTable+4,w,c
 11408  00D068  103D               	iorwf	diet_press@dietTable+5,w,c
 11409  00D06A  A4D8               	btfss	status,2,c
 11410  00D06C  D008               	goto	l1047
 11411  00D06E  503E               	movf	diet_press@dietTable+6,w,c
 11412  00D070  103F               	iorwf	diet_press@dietTable+7,w,c
 11413  00D072  A4D8               	btfss	status,2,c
 11414  00D074  D004               	goto	l1047
 11415                           
 11416                           ;standbyMode.c: 1302: sum = 27;
 11417  00D076  0E00               	movlw	0
 11418  00D078  6E36               	movwf	diet_press@sum+1,c
 11419  00D07A  0E1B               	movlw	27
 11420  00D07C  D0BC               	goto	L106
 11421  00D07E                     l1047:
 11422                           
 11423                           ;standbyMode.c: 1306: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11424  00D07E  0E03               	movlw	3
 11425  00D080  1838               	xorwf	diet_press@dietTable,w,c
 11426  00D082  1039               	iorwf	diet_press@dietTable+1,w,c
 11427  00D084  A4D8               	btfss	status,2,c
 11428  00D086  D012               	goto	l1049
 11429  00D088  0E07               	movlw	7
 11430  00D08A  183A               	xorwf	diet_press@dietTable+2,w,c
 11431  00D08C  103B               	iorwf	diet_press@dietTable+3,w,c
 11432  00D08E  A4D8               	btfss	status,2,c
 11433  00D090  D00D               	goto	l1049
 11434  00D092  0E0C               	movlw	12
 11435  00D094  183C               	xorwf	diet_press@dietTable+4,w,c
 11436  00D096  103D               	iorwf	diet_press@dietTable+5,w,c
 11437  00D098  A4D8               	btfss	status,2,c
 11438  00D09A  D008               	goto	l1049
 11439  00D09C  503E               	movf	diet_press@dietTable+6,w,c
 11440  00D09E  103F               	iorwf	diet_press@dietTable+7,w,c
 11441  00D0A0  A4D8               	btfss	status,2,c
 11442  00D0A2  D004               	goto	l1049
 11443                           
 11444                           ;standbyMode.c: 1307: sum = 22;
 11445  00D0A4  0E00               	movlw	0
 11446  00D0A6  6E36               	movwf	diet_press@sum+1,c
 11447  00D0A8  0E16               	movlw	22
 11448  00D0AA  D0A5               	goto	L106
 11449  00D0AC                     l1049:
 11450                           
 11451                           ;standbyMode.c: 1311: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11452  00D0AC  0E07               	movlw	7
 11453  00D0AE  1838               	xorwf	diet_press@dietTable,w,c
 11454  00D0B0  1039               	iorwf	diet_press@dietTable+1,w,c
 11455  00D0B2  A4D8               	btfss	status,2,c
 11456  00D0B4  D012               	goto	l1051
 11457  00D0B6  0E07               	movlw	7
 11458  00D0B8  183A               	xorwf	diet_press@dietTable+2,w,c
 11459  00D0BA  103B               	iorwf	diet_press@dietTable+3,w,c
 11460  00D0BC  A4D8               	btfss	status,2,c
 11461  00D0BE  D00D               	goto	l1051
 11462  00D0C0  0E0C               	movlw	12
 11463  00D0C2  183C               	xorwf	diet_press@dietTable+4,w,c
 11464  00D0C4  103D               	iorwf	diet_press@dietTable+5,w,c
 11465  00D0C6  A4D8               	btfss	status,2,c
 11466  00D0C8  D008               	goto	l1051
 11467  00D0CA  503E               	movf	diet_press@dietTable+6,w,c
 11468  00D0CC  103F               	iorwf	diet_press@dietTable+7,w,c
 11469  00D0CE  A4D8               	btfss	status,2,c
 11470  00D0D0  D004               	goto	l1051
 11471                           
 11472                           ;standbyMode.c: 1312: sum = 26;
 11473  00D0D2  0E00               	movlw	0
 11474  00D0D4  6E36               	movwf	diet_press@sum+1,c
 11475  00D0D6  0E1A               	movlw	26
 11476  00D0D8  D08E               	goto	L106
 11477  00D0DA                     l1051:
 11478                           
 11479                           ;standbyMode.c: 1316: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11480  00D0DA  0E07               	movlw	7
 11481  00D0DC  1838               	xorwf	diet_press@dietTable,w,c
 11482  00D0DE  1039               	iorwf	diet_press@dietTable+1,w,c
 11483  00D0E0  A4D8               	btfss	status,2,c
 11484  00D0E2  D012               	goto	l1053
 11485  00D0E4  0E0C               	movlw	12
 11486  00D0E6  183A               	xorwf	diet_press@dietTable+2,w,c
 11487  00D0E8  103B               	iorwf	diet_press@dietTable+3,w,c
 11488  00D0EA  A4D8               	btfss	status,2,c
 11489  00D0EC  D00D               	goto	l1053
 11490  00D0EE  0E0C               	movlw	12
 11491  00D0F0  183C               	xorwf	diet_press@dietTable+4,w,c
 11492  00D0F2  103D               	iorwf	diet_press@dietTable+5,w,c
 11493  00D0F4  A4D8               	btfss	status,2,c
 11494  00D0F6  D008               	goto	l1053
 11495  00D0F8  503E               	movf	diet_press@dietTable+6,w,c
 11496  00D0FA  103F               	iorwf	diet_press@dietTable+7,w,c
 11497  00D0FC  A4D8               	btfss	status,2,c
 11498  00D0FE  D004               	goto	l1053
 11499                           
 11500                           ;standbyMode.c: 1317: sum = 31;
 11501  00D100  0E00               	movlw	0
 11502  00D102  6E36               	movwf	diet_press@sum+1,c
 11503  00D104  0E1F               	movlw	31
 11504  00D106  D077               	goto	L106
 11505  00D108                     l1053:
 11506                           
 11507                           ;standbyMode.c: 1321: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11508  00D108  0E03               	movlw	3
 11509  00D10A  1838               	xorwf	diet_press@dietTable,w,c
 11510  00D10C  1039               	iorwf	diet_press@dietTable+1,w,c
 11511  00D10E  A4D8               	btfss	status,2,c
 11512  00D110  D013               	goto	l1055
 11513  00D112  0E03               	movlw	3
 11514  00D114  183A               	xorwf	diet_press@dietTable+2,w,c
 11515  00D116  103B               	iorwf	diet_press@dietTable+3,w,c
 11516  00D118  A4D8               	btfss	status,2,c
 11517  00D11A  D00E               	goto	l1055
 11518  00D11C  0E07               	movlw	7
 11519  00D11E  183C               	xorwf	diet_press@dietTable+4,w,c
 11520  00D120  103D               	iorwf	diet_press@dietTable+5,w,c
 11521  00D122  A4D8               	btfss	status,2,c
 11522  00D124  D009               	goto	l1055
 11523  00D126  0E0C               	movlw	12
 11524  00D128  183E               	xorwf	diet_press@dietTable+6,w,c
 11525  00D12A  103F               	iorwf	diet_press@dietTable+7,w,c
 11526  00D12C  A4D8               	btfss	status,2,c
 11527  00D12E  D004               	goto	l1055
 11528                           
 11529                           ;standbyMode.c: 1322: sum = 25;
 11530  00D130  0E00               	movlw	0
 11531  00D132  6E36               	movwf	diet_press@sum+1,c
 11532  00D134  0E19               	movlw	25
 11533  00D136  D05F               	goto	L106
 11534  00D138                     l1055:
 11535                           
 11536                           ;standbyMode.c: 1326: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11537  00D138  0E03               	movlw	3
 11538  00D13A  1838               	xorwf	diet_press@dietTable,w,c
 11539  00D13C  1039               	iorwf	diet_press@dietTable+1,w,c
 11540  00D13E  A4D8               	btfss	status,2,c
 11541  00D140  D013               	goto	l1057
 11542  00D142  0E07               	movlw	7
 11543  00D144  183A               	xorwf	diet_press@dietTable+2,w,c
 11544  00D146  103B               	iorwf	diet_press@dietTable+3,w,c
 11545  00D148  A4D8               	btfss	status,2,c
 11546  00D14A  D00E               	goto	l1057
 11547  00D14C  0E07               	movlw	7
 11548  00D14E  183C               	xorwf	diet_press@dietTable+4,w,c
 11549  00D150  103D               	iorwf	diet_press@dietTable+5,w,c
 11550  00D152  A4D8               	btfss	status,2,c
 11551  00D154  D009               	goto	l1057
 11552  00D156  0E0C               	movlw	12
 11553  00D158  183E               	xorwf	diet_press@dietTable+6,w,c
 11554  00D15A  103F               	iorwf	diet_press@dietTable+7,w,c
 11555  00D15C  A4D8               	btfss	status,2,c
 11556  00D15E  D004               	goto	l1057
 11557                           
 11558                           ;standbyMode.c: 1327: sum = 29;
 11559  00D160  0E00               	movlw	0
 11560  00D162  6E36               	movwf	diet_press@sum+1,c
 11561  00D164  0E1D               	movlw	29
 11562  00D166  D047               	goto	L106
 11563  00D168                     l1057:
 11564                           
 11565                           ;standbyMode.c: 1331: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 11566  00D168  0E03               	movlw	3
 11567  00D16A  1838               	xorwf	diet_press@dietTable,w,c
 11568  00D16C  1039               	iorwf	diet_press@dietTable+1,w,c
 11569  00D16E  A4D8               	btfss	status,2,c
 11570  00D170  D013               	goto	l1059
 11571  00D172  0E07               	movlw	7
 11572  00D174  183A               	xorwf	diet_press@dietTable+2,w,c
 11573  00D176  103B               	iorwf	diet_press@dietTable+3,w,c
 11574  00D178  A4D8               	btfss	status,2,c
 11575  00D17A  D00E               	goto	l1059
 11576  00D17C  0E0C               	movlw	12
 11577  00D17E  183C               	xorwf	diet_press@dietTable+4,w,c
 11578  00D180  103D               	iorwf	diet_press@dietTable+5,w,c
 11579  00D182  A4D8               	btfss	status,2,c
 11580  00D184  D009               	goto	l1059
 11581  00D186  0E0C               	movlw	12
 11582  00D188  183E               	xorwf	diet_press@dietTable+6,w,c
 11583  00D18A  103F               	iorwf	diet_press@dietTable+7,w,c
 11584  00D18C  A4D8               	btfss	status,2,c
 11585  00D18E  D004               	goto	l1059
 11586                           
 11587                           ;standbyMode.c: 1332: sum = 34;
 11588  00D190  0E00               	movlw	0
 11589  00D192  6E36               	movwf	diet_press@sum+1,c
 11590  00D194  0E22               	movlw	34
 11591  00D196  D02F               	goto	L106
 11592  00D198                     l1059:
 11593                           
 11594                           ;standbyMode.c: 1336: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11595  00D198  0E03               	movlw	3
 11596  00D19A  1838               	xorwf	diet_press@dietTable,w,c
 11597  00D19C  1039               	iorwf	diet_press@dietTable+1,w,c
 11598  00D19E  A4D8               	btfss	status,2,c
 11599  00D1A0  D013               	goto	l1061
 11600  00D1A2  0E0C               	movlw	12
 11601  00D1A4  183A               	xorwf	diet_press@dietTable+2,w,c
 11602  00D1A6  103B               	iorwf	diet_press@dietTable+3,w,c
 11603  00D1A8  A4D8               	btfss	status,2,c
 11604  00D1AA  D00E               	goto	l1061
 11605  00D1AC  0E0C               	movlw	12
 11606  00D1AE  183C               	xorwf	diet_press@dietTable+4,w,c
 11607  00D1B0  103D               	iorwf	diet_press@dietTable+5,w,c
 11608  00D1B2  A4D8               	btfss	status,2,c
 11609  00D1B4  D009               	goto	l1061
 11610  00D1B6  0E0C               	movlw	12
 11611  00D1B8  183E               	xorwf	diet_press@dietTable+6,w,c
 11612  00D1BA  103F               	iorwf	diet_press@dietTable+7,w,c
 11613  00D1BC  A4D8               	btfss	status,2,c
 11614  00D1BE  D004               	goto	l1061
 11615                           
 11616                           ;standbyMode.c: 1337: sum = 39;
 11617  00D1C0  0E00               	movlw	0
 11618  00D1C2  6E36               	movwf	diet_press@sum+1,c
 11619  00D1C4  0E27               	movlw	39
 11620  00D1C6  D017               	goto	L106
 11621  00D1C8                     l1061:
 11622                           
 11623                           ;standbyMode.c: 1341: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11624  00D1C8  0E07               	movlw	7
 11625  00D1CA  1838               	xorwf	diet_press@dietTable,w,c
 11626  00D1CC  1039               	iorwf	diet_press@dietTable+1,w,c
 11627  00D1CE  A4D8               	btfss	status,2,c
 11628  00D1D0  D014               	goto	l1063
 11629  00D1D2  0E0C               	movlw	12
 11630  00D1D4  183A               	xorwf	diet_press@dietTable+2,w,c
 11631  00D1D6  103B               	iorwf	diet_press@dietTable+3,w,c
 11632  00D1D8  A4D8               	btfss	status,2,c
 11633  00D1DA  D00F               	goto	l1063
 11634  00D1DC  0E0C               	movlw	12
 11635  00D1DE  183C               	xorwf	diet_press@dietTable+4,w,c
 11636  00D1E0  103D               	iorwf	diet_press@dietTable+5,w,c
 11637  00D1E2  A4D8               	btfss	status,2,c
 11638  00D1E4  D00A               	goto	l1063
 11639  00D1E6  0E0C               	movlw	12
 11640  00D1E8  183E               	xorwf	diet_press@dietTable+6,w,c
 11641  00D1EA  103F               	iorwf	diet_press@dietTable+7,w,c
 11642  00D1EC  A4D8               	btfss	status,2,c
 11643  00D1EE  D005               	goto	l1063
 11644                           
 11645                           ;standbyMode.c: 1342: sum = 43;
 11646  00D1F0  0E00               	movlw	0
 11647  00D1F2  6E36               	movwf	diet_press@sum+1,c
 11648  00D1F4  0E2B               	movlw	43
 11649  00D1F6                     L106:
 11650  00D1F6  6E35               	movwf	diet_press@sum,c
 11651                           
 11652                           ;standbyMode.c: 1343: }
 11653  00D1F8  D02A               	goto	l1064
 11654  00D1FA                     l1063:
 11655                           
 11656                           ;standbyMode.c: 1346: else{
 11657                           ;standbyMode.c: 1347: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11658  00D1FA  0E01               	movlw	1
 11659  00D1FC  ECD3  F054         	call	_lcdInst
 11660  00D200  0EC3               	movlw	195
 11661  00D202  6E2B               	movwf	??_diet_press& (0+255),c
 11662  00D204  0ECD               	movlw	205
 11663  00D206                     u14327:
 11664  00D206  2EE8               	decfsz	wreg,f,c
 11665  00D208  D7FE               	bra	u14327
 11666  00D20A  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11667  00D20C  D7FC               	bra	u14327
 11668  00D20E  F000               	nop	
 11669                           
 11670                           ;standbyMode.c: 1348: printf("Invalid diet!");
 11671  00D210  0E7F               	movlw	low STR_105
 11672  00D212  6E0D               	movwf	printf@f,c
 11673  00D214  0EFE               	movlw	high STR_105
 11674  00D216  6E0E               	movwf	printf@f+1,c
 11675  00D218  EC9A  F064         	call	_printf	;wreg free
 11676                           
 11677                           ;standbyMode.c: 1349: lcdInst(0xC0);;
 11678  00D21C  0EC0               	movlw	192
 11679  00D21E  ECD3  F054         	call	_lcdInst
 11680                           
 11681                           ;standbyMode.c: 1350: printf("Try again.");
 11682  00D222  0E0C               	movlw	low STR_102
 11683  00D224  6E0D               	movwf	printf@f,c
 11684  00D226  0EFF               	movlw	high STR_102
 11685  00D228  6E0E               	movwf	printf@f+1,c
 11686  00D22A  EC9A  F064         	call	_printf	;wreg free
 11687                           
 11688                           ;standbyMode.c: 1351: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11689  00D22E  0E33               	movlw	51
 11690  00D230  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11691  00D232  0EBB               	movlw	187
 11692  00D234  6E2B               	movwf	??_diet_press& (0+255),c
 11693  00D236  0EE0               	movlw	224
 11694  00D238                     u14337:
 11695  00D238  2EE8               	decfsz	wreg,f,c
 11696  00D23A  D7FE               	bra	u14337
 11697  00D23C  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11698  00D23E  D7FC               	bra	u14337
 11699  00D240  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11700  00D242  D7FA               	bra	u14337
 11701                           
 11702                           ;standbyMode.c: 1352: sum = 0;
 11703  00D244  0E00               	movlw	0
 11704  00D246  6E36               	movwf	diet_press@sum+1,c
 11705  00D248  0E00               	movlw	0
 11706  00D24A  6E35               	movwf	diet_press@sum,c
 11707                           
 11708                           ;standbyMode.c: 1353: goto START;
 11709  00D24C  D56C               	goto	_diet_press
 11710  00D24E                     l1064:
 11711                           
 11712                           ;standbyMode.c: 1354: }
 11713                           ;standbyMode.c: 1355: return sum;
 11714  00D24E  C035  F029         	movff	diet_press@sum,?_diet_press
 11715  00D252  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11716  00D256  0012               	return		;funcret
 11717  00D258                     __end_of_diet_press:
 11718                           	opt stack 0
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           postinc0	equ	0xFEE
 11726                           wreg	equ	0xFE8
 11727                           postdec1	equ	0xFE5
 11728                           plusw1	equ	0xFE3
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           plusw2	equ	0xFDB
 11734                           fsr2h	equ	0xFDA
 11735                           fsr2l	equ	0xFD9
 11736                           status	equ	0xFD8
 11737                           
 11738 ;; *************** function _decode_diet *****************
 11739 ;; Defined at:
 11740 ;;		line 1359 in file "standbyMode.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  dietType        2    0[COMRAM] unsigned int 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;  returnValue     2    4[COMRAM] unsigned int 
 11745 ;; Return value:  Size  Location     Type
 11746 ;;                  2    0[COMRAM] unsigned int 
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;Total ram usage:        6 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_standbyMode
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text16
 11768  00B6E4                     __ptext16:
 11769                           	opt stack 0
 11770  00B6E4                     _decode_diet:
 11771                           	opt stack 29
 11772                           
 11773                           ;standbyMode.c: 1360: unsigned int returnValue = 100;
 11774                           
 11775                           ;incstack = 0
 11776  00B6E4  0E00               	movlw	0
 11777  00B6E6  6E06               	movwf	decode_diet@returnValue+1,c
 11778  00B6E8  0E64               	movlw	100
 11779  00B6EA  6E05               	movwf	decode_diet@returnValue,c
 11780                           
 11781                           ;standbyMode.c: 1362: switch(dietType){
 11782  00B6EC  D049               	goto	l1068
 11783  00B6EE                     
 11784                           ;standbyMode.c: 1365: returnValue = 2;
 11785  00B6EE  0E00               	movlw	0
 11786  00B6F0  6E06               	movwf	decode_diet@returnValue+1,c
 11787  00B6F2  0E02               	movlw	2
 11788  00B6F4  D043               	goto	L124
 11789  00B6F6                     
 11790                           ;standbyMode.c: 1370: returnValue = 0;
 11791  00B6F6  0E00               	movlw	0
 11792  00B6F8  6E06               	movwf	decode_diet@returnValue+1,c
 11793  00B6FA  0E00               	movlw	0
 11794  00B6FC  D03F               	goto	L124
 11795  00B6FE                     
 11796                           ;standbyMode.c: 1375: returnValue = 1;
 11797  00B6FE  0E00               	movlw	0
 11798  00B700  6E06               	movwf	decode_diet@returnValue+1,c
 11799  00B702  0E01               	movlw	1
 11800  00B704  D03B               	goto	L124
 11801  00B706                     
 11802                           ;standbyMode.c: 1380: returnValue = 3;
 11803  00B706  0E00               	movlw	0
 11804  00B708  6E06               	movwf	decode_diet@returnValue+1,c
 11805  00B70A  0E03               	movlw	3
 11806  00B70C  D037               	goto	L124
 11807  00B70E                     
 11808                           ;standbyMode.c: 1385: returnValue = 4;
 11809  00B70E  0E00               	movlw	0
 11810  00B710  6E06               	movwf	decode_diet@returnValue+1,c
 11811  00B712  0E04               	movlw	4
 11812  00B714  D033               	goto	L124
 11813  00B716                     
 11814                           ;standbyMode.c: 1390: returnValue = 5;
 11815  00B716  0E00               	movlw	0
 11816  00B718  6E06               	movwf	decode_diet@returnValue+1,c
 11817  00B71A  0E05               	movlw	5
 11818  00B71C  D02F               	goto	L124
 11819  00B71E                     
 11820                           ;standbyMode.c: 1395: returnValue = 6;
 11821  00B71E  0E00               	movlw	0
 11822  00B720  6E06               	movwf	decode_diet@returnValue+1,c
 11823  00B722  0E06               	movlw	6
 11824  00B724  D02B               	goto	L124
 11825  00B726                     
 11826                           ;standbyMode.c: 1400: returnValue = 7;
 11827  00B726  0E00               	movlw	0
 11828  00B728  6E06               	movwf	decode_diet@returnValue+1,c
 11829  00B72A  0E07               	movlw	7
 11830  00B72C  D027               	goto	L124
 11831  00B72E                     
 11832                           ;standbyMode.c: 1405: returnValue = 8;
 11833  00B72E  0E00               	movlw	0
 11834  00B730  6E06               	movwf	decode_diet@returnValue+1,c
 11835  00B732  0E08               	movlw	8
 11836  00B734  D023               	goto	L124
 11837  00B736                     
 11838                           ;standbyMode.c: 1410: returnValue = 9;
 11839  00B736  0E00               	movlw	0
 11840  00B738  6E06               	movwf	decode_diet@returnValue+1,c
 11841  00B73A  0E09               	movlw	9
 11842  00B73C  D01F               	goto	L124
 11843  00B73E                     
 11844                           ;standbyMode.c: 1415: returnValue = 10;
 11845  00B73E  0E00               	movlw	0
 11846  00B740  6E06               	movwf	decode_diet@returnValue+1,c
 11847  00B742  0E0A               	movlw	10
 11848  00B744  D01B               	goto	L124
 11849  00B746                     
 11850                           ;standbyMode.c: 1420: returnValue = 11;
 11851  00B746  0E00               	movlw	0
 11852  00B748  6E06               	movwf	decode_diet@returnValue+1,c
 11853  00B74A  0E0B               	movlw	11
 11854  00B74C  D017               	goto	L124
 11855  00B74E                     
 11856                           ;standbyMode.c: 1425: returnValue = 12;
 11857  00B74E  0E00               	movlw	0
 11858  00B750  6E06               	movwf	decode_diet@returnValue+1,c
 11859  00B752  0E0C               	movlw	12
 11860  00B754  D013               	goto	L124
 11861  00B756                     
 11862                           ;standbyMode.c: 1430: returnValue = 13;
 11863  00B756  0E00               	movlw	0
 11864  00B758  6E06               	movwf	decode_diet@returnValue+1,c
 11865  00B75A  0E0D               	movlw	13
 11866  00B75C  D00F               	goto	L124
 11867  00B75E                     
 11868                           ;standbyMode.c: 1435: returnValue = 14;
 11869  00B75E  0E00               	movlw	0
 11870  00B760  6E06               	movwf	decode_diet@returnValue+1,c
 11871  00B762  0E0E               	movlw	14
 11872  00B764  D00B               	goto	L124
 11873  00B766                     
 11874                           ;standbyMode.c: 1440: returnValue = 15;
 11875  00B766  0E00               	movlw	0
 11876  00B768  6E06               	movwf	decode_diet@returnValue+1,c
 11877  00B76A  0E0F               	movlw	15
 11878  00B76C  D007               	goto	L124
 11879  00B76E                     
 11880                           ;standbyMode.c: 1445: returnValue = 16;
 11881  00B76E  0E00               	movlw	0
 11882  00B770  6E06               	movwf	decode_diet@returnValue+1,c
 11883  00B772  0E10               	movlw	16
 11884  00B774  D003               	goto	L124
 11885  00B776                     
 11886                           ;standbyMode.c: 1450: returnValue = 17;
 11887  00B776  0E00               	movlw	0
 11888  00B778  6E06               	movwf	decode_diet@returnValue+1,c
 11889  00B77A  0E11               	movlw	17
 11890  00B77C                     L124:
 11891  00B77C  6E05               	movwf	decode_diet@returnValue,c
 11892                           
 11893                           ;standbyMode.c: 1455: }
 11894                           
 11895                           ;standbyMode.c: 1454: break;
 11896                           
 11897                           ;standbyMode.c: 1453: default:
 11898                           
 11899                           ;standbyMode.c: 1451: break;
 11900  00B77E  D03F               	goto	l1070
 11901  00B780                     l1068:
 11902  00B780  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 11903  00B784  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 11904                           
 11905                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11906                           ; Switch size 1, requested type "space"
 11907                           ; Number of cases is 1, Range of values is 0 to 0
 11908                           ; switch strategies available:
 11909                           ; Name         Instructions Cycles
 11910                           ; simple_byte            4     3 (average)
 11911                           ;	Chosen strategy is simple_byte
 11912  00B788  5004               	movf	??_decode_diet+1,w,c
 11913  00B78A  0A00               	xorlw	0	; case 0
 11914  00B78C  A4D8               	btfss	status,2,c
 11915  00B78E  D037               	goto	l1070
 11916                           
 11917                           ; Switch size 1, requested type "space"
 11918                           ; Number of cases is 18, Range of values is 3 to 43
 11919                           ; switch strategies available:
 11920                           ; Name         Instructions Cycles
 11921                           ; simple_byte           55    28 (average)
 11922                           ;	Chosen strategy is simple_byte
 11923  00B790  5003               	movf	??_decode_diet,w,c
 11924  00B792  0A03               	xorlw	3	; case 3
 11925  00B794  B4D8               	btfsc	status,2,c
 11926  00B796  D7AF               	goto	l1071
 11927  00B798  0A04               	xorlw	4	; case 7
 11928  00B79A  B4D8               	btfsc	status,2,c
 11929  00B79C  D7B0               	goto	l1072
 11930  00B79E  0A0D               	xorlw	13	; case 10
 11931  00B7A0  B4D8               	btfsc	status,2,c
 11932  00B7A2  D7B1               	goto	l1073
 11933  00B7A4  0A06               	xorlw	6	; case 12
 11934  00B7A6  B4D8               	btfsc	status,2,c
 11935  00B7A8  D7A2               	goto	l1069
 11936  00B7AA  0A01               	xorlw	1	; case 13
 11937  00B7AC  B4D8               	btfsc	status,2,c
 11938  00B7AE  D7B7               	goto	l1076
 11939  00B7B0  0A02               	xorlw	2	; case 15
 11940  00B7B2  B4D8               	btfsc	status,2,c
 11941  00B7B4  D7AC               	goto	l1074
 11942  00B7B6  0A1E               	xorlw	30	; case 17
 11943  00B7B8  B4D8               	btfsc	status,2,c
 11944  00B7BA  D7B9               	goto	l1078
 11945  00B7BC  0A03               	xorlw	3	; case 18
 11946  00B7BE  B4D8               	btfsc	status,2,c
 11947  00B7C0  D7B2               	goto	l1077
 11948  00B7C2  0A01               	xorlw	1	; case 19
 11949  00B7C4  B4D8               	btfsc	status,2,c
 11950  00B7C6  D7A7               	goto	l1075
 11951  00B7C8  0A05               	xorlw	5	; case 22
 11952  00B7CA  B4D8               	btfsc	status,2,c
 11953  00B7CC  D7B8               	goto	l1080
 11954  00B7CE  0A0F               	xorlw	15	; case 25
 11955  00B7D0  B4D8               	btfsc	status,2,c
 11956  00B7D2  D7C1               	goto	l1083
 11957  00B7D4  0A03               	xorlw	3	; case 26
 11958  00B7D6  B4D8               	btfsc	status,2,c
 11959  00B7D8  D7B6               	goto	l1081
 11960  00B7DA  0A01               	xorlw	1	; case 27
 11961  00B7DC  B4D8               	btfsc	status,2,c
 11962  00B7DE  D7AB               	goto	l1079
 11963  00B7E0  0A06               	xorlw	6	; case 29
 11964  00B7E2  B4D8               	btfsc	status,2,c
 11965  00B7E4  D7BC               	goto	l1084
 11966  00B7E6  0A02               	xorlw	2	; case 31
 11967  00B7E8  B4D8               	btfsc	status,2,c
 11968  00B7EA  D7B1               	goto	l1082
 11969  00B7EC  0A3D               	xorlw	61	; case 34
 11970  00B7EE  B4D8               	btfsc	status,2,c
 11971  00B7F0  D7BA               	goto	l1085
 11972  00B7F2  0A05               	xorlw	5	; case 39
 11973  00B7F4  B4D8               	btfsc	status,2,c
 11974  00B7F6  D7BB               	goto	l1086
 11975  00B7F8  0A0C               	xorlw	12	; case 43
 11976  00B7FA  B4D8               	btfsc	status,2,c
 11977  00B7FC  D7BC               	goto	l1087
 11978  00B7FE                     l1070:
 11979                           
 11980                           ;standbyMode.c: 1456: return returnValue;
 11981  00B7FE  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 11982  00B802  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 11983  00B806  0012               	return		;funcret
 11984  00B808                     __end_of_decode_diet:
 11985                           	opt stack 0
 11986                           tblptru	equ	0xFF8
 11987                           tblptrh	equ	0xFF7
 11988                           tblptrl	equ	0xFF6
 11989                           tablat	equ	0xFF5
 11990                           prodh	equ	0xFF4
 11991                           prodl	equ	0xFF3
 11992                           postinc0	equ	0xFEE
 11993                           wreg	equ	0xFE8
 11994                           postdec1	equ	0xFE5
 11995                           plusw1	equ	0xFE3
 11996                           fsr1l	equ	0xFE1
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           postdec2	equ	0xFDD
 12000                           plusw2	equ	0xFDB
 12001                           fsr2h	equ	0xFDA
 12002                           fsr2l	equ	0xFD9
 12003                           status	equ	0xFD8
 12004                           
 12005 ;; *************** function _I2C_Master_Write *****************
 12006 ;; Defined at:
 12007 ;;		line 108 in file "I2C.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 12010 ;; Auto vars:     Size  Location     Type
 12011 ;;		None
 12012 ;; Return value:  Size  Location     Type
 12013 ;;                  1    wreg      void 
 12014 ;; Registers used:
 12015 ;;		wreg, status,2, status,0, cstack
 12016 ;; Tracked objects:
 12017 ;;		On entry : 0/0
 12018 ;;		On exit  : 0/0
 12019 ;;		Unchanged: 0/0
 12020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12021 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12025 ;;Total ram usage:        2 bytes
 12026 ;; Hardware stack levels used:    1
 12027 ;; Hardware stack levels required when called:    1
 12028 ;; This function calls:
 12029 ;;		_I2C_Master_Wait
 12030 ;; This function is called by:
 12031 ;;		_standbyMode
 12032 ;;		_RTC_setTime
 12033 ;;		_tick
 12034 ;;		_tock
 12035 ;;		_sendByteToArduino
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	text17
 12040  00A98A                     __ptext17:
 12041                           	opt stack 0
 12042  00A98A                     _I2C_Master_Write:
 12043                           	opt stack 28
 12044                           
 12045                           ;I2C.c: 116: I2C_Master_Wait();
 12046                           
 12047                           ;incstack = 0
 12048  00A98A  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12049                           
 12050                           ;I2C.c: 117: SSPBUF = byteToWrite;
 12051  00A98E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 12052  00A992  0012               	return		;funcret
 12053  00A994                     __end_of_I2C_Master_Write:
 12054                           	opt stack 0
 12055                           tblptru	equ	0xFF8
 12056                           tblptrh	equ	0xFF7
 12057                           tblptrl	equ	0xFF6
 12058                           tablat	equ	0xFF5
 12059                           prodh	equ	0xFF4
 12060                           prodl	equ	0xFF3
 12061                           postinc0	equ	0xFEE
 12062                           wreg	equ	0xFE8
 12063                           postdec1	equ	0xFE5
 12064                           plusw1	equ	0xFE3
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           plusw2	equ	0xFDB
 12070                           fsr2h	equ	0xFDA
 12071                           fsr2l	equ	0xFD9
 12072                           status	equ	0xFD8
 12073                           
 12074 ;; *************** function _I2C_Master_Stop *****************
 12075 ;; Defined at:
 12076 ;;		line 95 in file "I2C.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;		None
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;		None
 12081 ;; Return value:  Size  Location     Type
 12082 ;;                  1    wreg      void 
 12083 ;; Registers used:
 12084 ;;		wreg, status,2, status,0, cstack
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;Total ram usage:        0 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; Hardware stack levels required when called:    1
 12097 ;; This function calls:
 12098 ;;		_I2C_Master_Wait
 12099 ;; This function is called by:
 12100 ;;		_standbyMode
 12101 ;;		_RTC_setTime
 12102 ;;		_tick
 12103 ;;		_tock
 12104 ;;		_sendByteToArduino
 12105 ;; This function uses a non-reentrant model
 12106 ;;
 12107                           
 12108                           	psect	text18
 12109  00A97A                     __ptext18:
 12110                           	opt stack 0
 12111  00A97A                     _I2C_Master_Stop:
 12112                           	opt stack 28
 12113                           
 12114                           ;I2C.c: 104: I2C_Master_Wait();
 12115                           
 12116                           ;incstack = 0
 12117  00A97A  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12118                           
 12119                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 12120  00A97E  84C5               	bsf	4037,2,c	;volatile
 12121  00A980  0012               	return		;funcret
 12122  00A982                     __end_of_I2C_Master_Stop:
 12123                           	opt stack 0
 12124                           tblptru	equ	0xFF8
 12125                           tblptrh	equ	0xFF7
 12126                           tblptrl	equ	0xFF6
 12127                           tablat	equ	0xFF5
 12128                           prodh	equ	0xFF4
 12129                           prodl	equ	0xFF3
 12130                           postinc0	equ	0xFEE
 12131                           wreg	equ	0xFE8
 12132                           postdec1	equ	0xFE5
 12133                           plusw1	equ	0xFE3
 12134                           fsr1l	equ	0xFE1
 12135                           indf2	equ	0xFDF
 12136                           postinc2	equ	0xFDE
 12137                           postdec2	equ	0xFDD
 12138                           plusw2	equ	0xFDB
 12139                           fsr2h	equ	0xFDA
 12140                           fsr2l	equ	0xFD9
 12141                           status	equ	0xFD8
 12142                           
 12143 ;; *************** function _I2C_Master_Start *****************
 12144 ;; Defined at:
 12145 ;;		line 69 in file "I2C.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;		None
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;		None
 12150 ;; Return value:  Size  Location     Type
 12151 ;;                  1    wreg      void 
 12152 ;; Registers used:
 12153 ;;		wreg, status,2, status,0, cstack
 12154 ;; Tracked objects:
 12155 ;;		On entry : 0/0
 12156 ;;		On exit  : 0/0
 12157 ;;		Unchanged: 0/0
 12158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12163 ;;Total ram usage:        0 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:    1
 12166 ;; This function calls:
 12167 ;;		_I2C_Master_Wait
 12168 ;; This function is called by:
 12169 ;;		_standbyMode
 12170 ;;		_RTC_setTime
 12171 ;;		_tick
 12172 ;;		_tock
 12173 ;;		_sendByteToArduino
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           	psect	text19
 12178  00A972                     __ptext19:
 12179                           	opt stack 0
 12180  00A972                     _I2C_Master_Start:
 12181                           	opt stack 28
 12182                           
 12183                           ;I2C.c: 78: I2C_Master_Wait();
 12184                           
 12185                           ;incstack = 0
 12186  00A972  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12187                           
 12188                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 12189  00A976  80C5               	bsf	4037,0,c	;volatile
 12190  00A978  0012               	return		;funcret
 12191  00A97A                     __end_of_I2C_Master_Start:
 12192                           	opt stack 0
 12193                           tblptru	equ	0xFF8
 12194                           tblptrh	equ	0xFF7
 12195                           tblptrl	equ	0xFF6
 12196                           tablat	equ	0xFF5
 12197                           prodh	equ	0xFF4
 12198                           prodl	equ	0xFF3
 12199                           postinc0	equ	0xFEE
 12200                           wreg	equ	0xFE8
 12201                           postdec1	equ	0xFE5
 12202                           plusw1	equ	0xFE3
 12203                           fsr1l	equ	0xFE1
 12204                           indf2	equ	0xFDF
 12205                           postinc2	equ	0xFDE
 12206                           postdec2	equ	0xFDD
 12207                           plusw2	equ	0xFDB
 12208                           fsr2h	equ	0xFDA
 12209                           fsr2l	equ	0xFD9
 12210                           status	equ	0xFD8
 12211                           
 12212 ;; *************** function _I2C_Master_Read *****************
 12213 ;; Defined at:
 12214 ;;		line 120 in file "I2C.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;  ackBit          1    wreg     unsigned char 
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;  ackBit          1    1[COMRAM] unsigned char 
 12219 ;;  receivedByte    1    2[COMRAM] unsigned char 
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  1    wreg      unsigned char 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, status,0, cstack
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        2 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    1
 12236 ;; This function calls:
 12237 ;;		_I2C_Master_Wait
 12238 ;; This function is called by:
 12239 ;;		_standbyMode
 12240 ;;		_tick
 12241 ;;		_tock
 12242 ;; This function uses a non-reentrant model
 12243 ;;
 12244                           
 12245                           	psect	text20
 12246  00AA00                     __ptext20:
 12247                           	opt stack 0
 12248  00AA00                     _I2C_Master_Read:
 12249                           	opt stack 28
 12250                           
 12251                           ;incstack = 0
 12252                           ;I2C_Master_Read@ackBit stored from wreg
 12253  00AA00  6E02               	movwf	I2C_Master_Read@ackBit,c
 12254                           
 12255                           ;I2C.c: 130: unsigned char receivedByte;
 12256                           ;I2C.c: 132: I2C_Master_Wait();
 12257  00AA02  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12258                           
 12259                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12260  00AA06  86C5               	bsf	4037,3,c	;volatile
 12261                           
 12262                           ;I2C.c: 135: I2C_Master_Wait();
 12263  00AA08  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12264                           
 12265                           ;I2C.c: 136: receivedByte = SSPBUF;
 12266  00AA0C  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12267                           
 12268                           ;I2C.c: 138: I2C_Master_Wait();
 12269  00AA10  ECCA  F054         	call	_I2C_Master_Wait	;wreg free
 12270                           
 12271                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12272  00AA14  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12273  00AA16  D002               	bra	u11965
 12274  00AA18  9AC5               	bcf	4037,5,c	;volatile
 12275  00AA1A  D001               	bra	u11966
 12276  00AA1C                     u11965:
 12277  00AA1C  8AC5               	bsf	4037,5,c	;volatile
 12278  00AA1E                     u11966:
 12279                           
 12280                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12281  00AA1E  88C5               	bsf	4037,4,c	;volatile
 12282                           
 12283                           ;I2C.c: 142: return receivedByte;
 12284  00AA20  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12285  00AA22  0012               	return	
 12286  00AA24                     __end_of_I2C_Master_Read:
 12287                           	opt stack 0
 12288                           tblptru	equ	0xFF8
 12289                           tblptrh	equ	0xFF7
 12290                           tblptrl	equ	0xFF6
 12291                           tablat	equ	0xFF5
 12292                           prodh	equ	0xFF4
 12293                           prodl	equ	0xFF3
 12294                           postinc0	equ	0xFEE
 12295                           wreg	equ	0xFE8
 12296                           postdec1	equ	0xFE5
 12297                           plusw1	equ	0xFE3
 12298                           fsr1l	equ	0xFE1
 12299                           indf2	equ	0xFDF
 12300                           postinc2	equ	0xFDE
 12301                           postdec2	equ	0xFDD
 12302                           plusw2	equ	0xFDB
 12303                           fsr2h	equ	0xFDA
 12304                           fsr2l	equ	0xFD9
 12305                           status	equ	0xFD8
 12306                           
 12307 ;; *************** function _I2C_Master_Wait *****************
 12308 ;; Defined at:
 12309 ;;		line 51 in file "I2C.c"
 12310 ;; Parameters:    Size  Location     Type
 12311 ;;		None
 12312 ;; Auto vars:     Size  Location     Type
 12313 ;;		None
 12314 ;; Return value:  Size  Location     Type
 12315 ;;                  1    wreg      void 
 12316 ;; Registers used:
 12317 ;;		wreg, status,2, status,0
 12318 ;; Tracked objects:
 12319 ;;		On entry : 0/0
 12320 ;;		On exit  : 0/0
 12321 ;;		Unchanged: 0/0
 12322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12325 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12327 ;;Total ram usage:        1 bytes
 12328 ;; Hardware stack levels used:    1
 12329 ;; This function calls:
 12330 ;;		Nothing
 12331 ;; This function is called by:
 12332 ;;		_I2C_Master_Start
 12333 ;;		_I2C_Master_Stop
 12334 ;;		_I2C_Master_Write
 12335 ;;		_I2C_Master_Read
 12336 ;;		_I2C_Master_RepeatedStart
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           	psect	text21
 12341  00A994                     __ptext21:
 12342                           	opt stack 0
 12343  00A994                     _I2C_Master_Wait:
 12344                           	opt stack 28
 12345                           
 12346                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12347                           
 12348                           ;incstack = 0
 12349  00A994  B4C7               	btfsc	4039,2,c	;volatile
 12350  00A996  D7FE               	goto	_I2C_Master_Wait
 12351  00A998  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12352  00A99C  0E1F               	movlw	31
 12353  00A99E  1601               	andwf	??_I2C_Master_Wait,f,c
 12354  00A9A0  B4D8               	btfsc	status,2,c
 12355  00A9A2  0012               	return	
 12356  00A9A4  D7F7               	goto	_I2C_Master_Wait
 12357  00A9A6                     __end_of_I2C_Master_Wait:
 12358                           	opt stack 0
 12359                           tblptru	equ	0xFF8
 12360                           tblptrh	equ	0xFF7
 12361                           tblptrl	equ	0xFF6
 12362                           tablat	equ	0xFF5
 12363                           prodh	equ	0xFF4
 12364                           prodl	equ	0xFF3
 12365                           postinc0	equ	0xFEE
 12366                           wreg	equ	0xFE8
 12367                           postdec1	equ	0xFE5
 12368                           plusw1	equ	0xFE3
 12369                           fsr1l	equ	0xFE1
 12370                           indf2	equ	0xFDF
 12371                           postinc2	equ	0xFDE
 12372                           postdec2	equ	0xFDD
 12373                           plusw2	equ	0xFDB
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function _I2C_Master_Init *****************
 12379 ;; Defined at:
 12380 ;;		line 14 in file "I2C.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      void 
 12387 ;; Registers used:
 12388 ;;		wreg, status,2, status,0, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;Total ram usage:        8 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    1
 12401 ;; This function calls:
 12402 ;;		___lldiv
 12403 ;; This function is called by:
 12404 ;;		_standbyMode
 12405 ;;		_tick
 12406 ;;		_tock
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           	psect	text22
 12411  00AC0A                     __ptext22:
 12412                           	opt stack 0
 12413  00AC0A                     _I2C_Master_Init:
 12414                           	opt stack 28
 12415                           
 12416                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12417                           
 12418                           ;incstack = 0
 12419  00AC0A  9AC6               	bcf	4038,5,c	;volatile
 12420                           
 12421                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12422  00AC0C  8694               	bsf	3988,3,c	;volatile
 12423                           
 12424                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12425  00AC0E  8894               	bsf	3988,4,c	;volatile
 12426                           
 12427                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12428  00AC10  0E80               	movlw	128
 12429  00AC12  6EC7               	movwf	4039,c	;volatile
 12430                           
 12431                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12432  00AC14  0E28               	movlw	40
 12433  00AC16  6EC6               	movwf	4038,c	;volatile
 12434                           
 12435                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12436  00AC18  0E00               	movlw	0
 12437  00AC1A  6EC5               	movwf	4037,c	;volatile
 12438                           
 12439                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12440  00AC1C  0E00               	movlw	0
 12441  00AC1E  6E01               	movwf	___lldiv@dividend,c
 12442  00AC20  0E5A               	movlw	90
 12443  00AC22  6E02               	movwf	___lldiv@dividend+1,c
 12444  00AC24  0E62               	movlw	98
 12445  00AC26  6E03               	movwf	___lldiv@dividend+2,c
 12446  00AC28  0E02               	movlw	2
 12447  00AC2A  6E04               	movwf	___lldiv@dividend+3,c
 12448  00AC2C  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12449  00AC30  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12450  00AC34  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12451  00AC38  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12452  00AC3C  0E02               	movlw	2
 12453  00AC3E                     u11955:
 12454  00AC3E  90D8               	bcf	status,0,c
 12455  00AC40  3612               	rlcf	??_I2C_Master_Init,f,c
 12456  00AC42  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12457  00AC44  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12458  00AC46  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12459  00AC48  2EE8               	decfsz	wreg,f,c
 12460  00AC4A  D7F9               	goto	u11955
 12461  00AC4C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12462  00AC50  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12463  00AC54  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12464  00AC58  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12465  00AC5C  ECDB  F056         	call	___lldiv	;wreg free
 12466  00AC60  0401               	decf	?___lldiv,w,c
 12467  00AC62  6EC8               	movwf	4040,c	;volatile
 12468  00AC64  0012               	return		;funcret
 12469  00AC66                     __end_of_I2C_Master_Init:
 12470                           	opt stack 0
 12471                           tblptru	equ	0xFF8
 12472                           tblptrh	equ	0xFF7
 12473                           tblptrl	equ	0xFF6
 12474                           tablat	equ	0xFF5
 12475                           prodh	equ	0xFF4
 12476                           prodl	equ	0xFF3
 12477                           postinc0	equ	0xFEE
 12478                           wreg	equ	0xFE8
 12479                           postdec1	equ	0xFE5
 12480                           plusw1	equ	0xFE3
 12481                           fsr1l	equ	0xFE1
 12482                           indf2	equ	0xFDF
 12483                           postinc2	equ	0xFDE
 12484                           postdec2	equ	0xFDD
 12485                           plusw2	equ	0xFDB
 12486                           fsr2h	equ	0xFDA
 12487                           fsr2l	equ	0xFD9
 12488                           status	equ	0xFD8
 12489                           
 12490 ;; *************** function ___lldiv *****************
 12491 ;; Defined at:
 12492 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12493 ;; Parameters:    Size  Location     Type
 12494 ;;  dividend        4    0[COMRAM] unsigned long 
 12495 ;;  divisor         4    4[COMRAM] unsigned long 
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;  quotient        4    8[COMRAM] unsigned long 
 12498 ;;  counter         1   12[COMRAM] unsigned char 
 12499 ;; Return value:  Size  Location     Type
 12500 ;;                  4    0[COMRAM] unsigned long 
 12501 ;; Registers used:
 12502 ;;		wreg, status,2, status,0
 12503 ;; Tracked objects:
 12504 ;;		On entry : 0/0
 12505 ;;		On exit  : 0/0
 12506 ;;		Unchanged: 0/0
 12507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12508 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12512 ;;Total ram usage:       13 bytes
 12513 ;; Hardware stack levels used:    1
 12514 ;; This function calls:
 12515 ;;		Nothing
 12516 ;; This function is called by:
 12517 ;;		_I2C_Master_Init
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           	psect	text23
 12522  00ADB6                     __ptext23:
 12523                           	opt stack 0
 12524  00ADB6                     ___lldiv:
 12525                           	opt stack 28
 12526                           
 12527                           ;incstack = 0
 12528  00ADB6  0E00               	movlw	0
 12529  00ADB8  6E09               	movwf	___lldiv@quotient,c
 12530  00ADBA  0E00               	movlw	0
 12531  00ADBC  6E0A               	movwf	___lldiv@quotient+1,c
 12532  00ADBE  0E00               	movlw	0
 12533  00ADC0  6E0B               	movwf	___lldiv@quotient+2,c
 12534  00ADC2  0E00               	movlw	0
 12535  00ADC4  6E0C               	movwf	___lldiv@quotient+3,c
 12536  00ADC6  5005               	movf	___lldiv@divisor,w,c
 12537  00ADC8  1006               	iorwf	___lldiv@divisor+1,w,c
 12538  00ADCA  1007               	iorwf	___lldiv@divisor+2,w,c
 12539  00ADCC  1008               	iorwf	___lldiv@divisor+3,w,c
 12540  00ADCE  B4D8               	btfsc	status,2,c
 12541  00ADD0  D02A               	goto	l1928
 12542  00ADD2  0E01               	movlw	1
 12543  00ADD4  6E0D               	movwf	___lldiv@counter,c
 12544  00ADD6  D006               	goto	l1923
 12545  00ADD8  90D8               	bcf	status,0,c
 12546  00ADDA  3605               	rlcf	___lldiv@divisor,f,c
 12547  00ADDC  3606               	rlcf	___lldiv@divisor+1,f,c
 12548  00ADDE  3607               	rlcf	___lldiv@divisor+2,f,c
 12549  00ADE0  3608               	rlcf	___lldiv@divisor+3,f,c
 12550  00ADE2  2A0D               	incf	___lldiv@counter,f,c
 12551  00ADE4                     l1923:
 12552  00ADE4  AE08               	btfss	___lldiv@divisor+3,7,c
 12553  00ADE6  D7F8               	goto	l1924
 12554  00ADE8                     u8560:
 12555  00ADE8  90D8               	bcf	status,0,c
 12556  00ADEA  3609               	rlcf	___lldiv@quotient,f,c
 12557  00ADEC  360A               	rlcf	___lldiv@quotient+1,f,c
 12558  00ADEE  360B               	rlcf	___lldiv@quotient+2,f,c
 12559  00ADF0  360C               	rlcf	___lldiv@quotient+3,f,c
 12560  00ADF2  5005               	movf	___lldiv@divisor,w,c
 12561  00ADF4  5C01               	subwf	___lldiv@dividend,w,c
 12562  00ADF6  5006               	movf	___lldiv@divisor+1,w,c
 12563  00ADF8  5802               	subwfb	___lldiv@dividend+1,w,c
 12564  00ADFA  5007               	movf	___lldiv@divisor+2,w,c
 12565  00ADFC  5803               	subwfb	___lldiv@dividend+2,w,c
 12566  00ADFE  5008               	movf	___lldiv@divisor+3,w,c
 12567  00AE00  5804               	subwfb	___lldiv@dividend+3,w,c
 12568  00AE02  A0D8               	btfss	status,0,c
 12569  00AE04  D009               	goto	l1927
 12570  00AE06  5005               	movf	___lldiv@divisor,w,c
 12571  00AE08  5E01               	subwf	___lldiv@dividend,f,c
 12572  00AE0A  5006               	movf	___lldiv@divisor+1,w,c
 12573  00AE0C  5A02               	subwfb	___lldiv@dividend+1,f,c
 12574  00AE0E  5007               	movf	___lldiv@divisor+2,w,c
 12575  00AE10  5A03               	subwfb	___lldiv@dividend+2,f,c
 12576  00AE12  5008               	movf	___lldiv@divisor+3,w,c
 12577  00AE14  5A04               	subwfb	___lldiv@dividend+3,f,c
 12578  00AE16  8009               	bsf	___lldiv@quotient,0,c
 12579  00AE18                     l1927:
 12580  00AE18  90D8               	bcf	status,0,c
 12581  00AE1A  3208               	rrcf	___lldiv@divisor+3,f,c
 12582  00AE1C  3207               	rrcf	___lldiv@divisor+2,f,c
 12583  00AE1E  3206               	rrcf	___lldiv@divisor+1,f,c
 12584  00AE20  3205               	rrcf	___lldiv@divisor,f,c
 12585  00AE22  2E0D               	decfsz	___lldiv@counter,f,c
 12586  00AE24  D7E1               	goto	u8560
 12587  00AE26                     l1928:
 12588  00AE26  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12589  00AE2A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12590  00AE2E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12591  00AE32  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12592  00AE36  0012               	return		;funcret
 12593  00AE38                     __end_of___lldiv:
 12594                           	opt stack 0
 12595                           tblptru	equ	0xFF8
 12596                           tblptrh	equ	0xFF7
 12597                           tblptrl	equ	0xFF6
 12598                           tablat	equ	0xFF5
 12599                           prodh	equ	0xFF4
 12600                           prodl	equ	0xFF3
 12601                           postinc0	equ	0xFEE
 12602                           wreg	equ	0xFE8
 12603                           postdec1	equ	0xFE5
 12604                           plusw1	equ	0xFE3
 12605                           fsr1l	equ	0xFE1
 12606                           indf2	equ	0xFDF
 12607                           postinc2	equ	0xFDE
 12608                           postdec2	equ	0xFDD
 12609                           plusw2	equ	0xFDB
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _mainOperation *****************
 12615 ;; Defined at:
 12616 ;;		line 932 in file "operationMode.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;		None
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  sortedDrawer   16   60[BANK0 ] unsigned int [8]
 12621 ;;  foodTable      16   36[BANK0 ] unsigned int [8]
 12622 ;;  dietTable      16   20[BANK0 ] unsigned int [8]
 12623 ;;  drawerTable    16    2[BANK0 ] unsigned int [8]
 12624 ;;  trueValue       2   78[BANK0 ] unsigned int 
 12625 ;;  i               2   76[BANK0 ] unsigned int 
 12626 ;;  longPieces      2   58[BANK0 ] unsigned int 
 12627 ;;  flatPieces      2   56[BANK0 ] unsigned int 
 12628 ;;  roundPieces     2   54[BANK0 ] unsigned int 
 12629 ;;  currentDrawe    2   52[BANK0 ] unsigned int 
 12630 ;;  nextDrawer      2   18[BANK0 ] unsigned int 
 12631 ;;  temp            2    0[BANK0 ] unsigned int 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;                  1    wreg      void 
 12634 ;; Registers used:
 12635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Totals:         2      80       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;Total ram usage:       82 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    3
 12648 ;; This function calls:
 12649 ;;		_findDrawerIndex
 12650 ;;		_getFlatPieces
 12651 ;;		_getLongPieces
 12652 ;;		_getRoundPieces
 12653 ;;		_getUserInputs
 12654 ;;		_lcdInst
 12655 ;;		_printf
 12656 ;;		_sortDrawerList
 12657 ;; This function is called by:
 12658 ;;		_main
 12659 ;; This function uses a non-reentrant model
 12660 ;;
 12661                           
 12662                           	psect	text24
 12663  00C584                     __ptext24:
 12664                           	opt stack 0
 12665  00C584                     _mainOperation:
 12666                           	opt stack 27
 12667                           
 12668                           ;operationMode.c: 933: unsigned int i = 0;
 12669                           
 12670                           ;incstack = 0
 12671  00C584  0E00               	movlw	0
 12672  00C586  0100               	movlb	0	; () banked
 12673  00C588  6FCD               	movwf	(mainOperation@i+1)& (0+255),b
 12674  00C58A  0E00               	movlw	0
 12675  00C58C  6FCC               	movwf	mainOperation@i& (0+255),b
 12676                           
 12677                           ;operationMode.c: 934: unsigned int currentDrawer = 0;
 12678  00C58E  0E00               	movlw	0
 12679  00C590  6FB5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12680  00C592  0E00               	movlw	0
 12681  00C594  6FB4               	movwf	mainOperation@currentDrawer& (0+255),b
 12682                           
 12683                           ;operationMode.c: 935: unsigned int temp = 0;
 12684  00C596  0E00               	movlw	0
 12685  00C598  6F81               	movwf	(mainOperation@temp+1)& (0+255),b
 12686  00C59A  0E00               	movlw	0
 12687  00C59C  6F80               	movwf	mainOperation@temp& (0+255),b
 12688                           
 12689                           ;operationMode.c: 936: unsigned int nextDrawer = 0;
 12690  00C59E  0E00               	movlw	0
 12691  00C5A0  6F93               	movwf	(mainOperation@nextDrawer+1)& (0+255),b
 12692  00C5A2  0E00               	movlw	0
 12693  00C5A4  6F92               	movwf	mainOperation@nextDrawer& (0+255),b
 12694                           
 12695                           ;operationMode.c: 937: unsigned int trueValue = 0;
 12696  00C5A6  0E00               	movlw	0
 12697  00C5A8  6FCF               	movwf	(mainOperation@trueValue+1)& (0+255),b
 12698  00C5AA  0E00               	movlw	0
 12699  00C5AC  6FCE               	movwf	mainOperation@trueValue& (0+255),b
 12700                           
 12701                           ;operationMode.c: 938: unsigned int roundPieces = 0;
 12702  00C5AE  0E00               	movlw	0
 12703  00C5B0  6FB7               	movwf	(mainOperation@roundPieces+1)& (0+255),b
 12704  00C5B2  0E00               	movlw	0
 12705  00C5B4  6FB6               	movwf	mainOperation@roundPieces& (0+255),b
 12706                           
 12707                           ;operationMode.c: 939: unsigned int flatPieces = 0;
 12708  00C5B6  0E00               	movlw	0
 12709  00C5B8  6FB9               	movwf	(mainOperation@flatPieces+1)& (0+255),b
 12710  00C5BA  0E00               	movlw	0
 12711  00C5BC  6FB8               	movwf	mainOperation@flatPieces& (0+255),b
 12712                           
 12713                           ;operationMode.c: 940: unsigned int longPieces = 0;
 12714  00C5BE  0E00               	movlw	0
 12715  00C5C0  6FBB               	movwf	(mainOperation@longPieces+1)& (0+255),b
 12716  00C5C2  0E00               	movlw	0
 12717  00C5C4  6FBA               	movwf	mainOperation@longPieces& (0+255),b
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;operationMode.c: 942: unsigned int drawerTable[8] = {0,0,0,0,0,0,0,0};
 12721  00C5C6  EE21  F0DA         	lfsr	2,mainOperation@F3158
 12722  00C5CA  EE10  F082         	lfsr	1,mainOperation@drawerTable
 12723  00C5CE  0E0F               	movlw	15
 12724  00C5D0                     u12601:
 12725  00C5D0  CFDB FFE3          	movff	plusw2,plusw1
 12726  00C5D4  06E8               	decf	wreg,f,c
 12727  00C5D6  E2FC               	bc	u12601
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;operationMode.c: 943: unsigned int sortedDrawerTable[8] = {0,0,0,0,0,0,0,0};
 12731  00C5D8  EE21  F0CA         	lfsr	2,mainOperation@F3160
 12732  00C5DC  EE10  F0BC         	lfsr	1,mainOperation@sortedDrawerTable
 12733  00C5E0  0E0F               	movlw	15
 12734  00C5E2                     u12611:
 12735  00C5E2  CFDB FFE3          	movff	plusw2,plusw1
 12736  00C5E6  06E8               	decf	wreg,f,c
 12737  00C5E8  E2FC               	bc	u12611
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;operationMode.c: 944: unsigned int dietTable[8] = {0,0,0,0,0,0,0,0};
 12741  00C5EA  EE21  F0BA         	lfsr	2,mainOperation@F3162
 12742  00C5EE  EE10  F094         	lfsr	1,mainOperation@dietTable
 12743  00C5F2  0E0F               	movlw	15
 12744  00C5F4                     u12621:
 12745  00C5F4  CFDB FFE3          	movff	plusw2,plusw1
 12746  00C5F8  06E8               	decf	wreg,f,c
 12747  00C5FA  E2FC               	bc	u12621
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;operationMode.c: 945: unsigned int foodTable[8] = {0,0,0,0,0,0,0,0};
 12751  00C5FC  EE21  F0AA         	lfsr	2,mainOperation@F3164
 12752  00C600  EE10  F0A4         	lfsr	1,mainOperation@foodTable
 12753  00C604  0E0F               	movlw	15
 12754  00C606                     u12631:
 12755  00C606  CFDB FFE3          	movff	plusw2,plusw1
 12756  00C60A  06E8               	decf	wreg,f,c
 12757  00C60C  E2FC               	bc	u12631
 12758                           
 12759                           ;operationMode.c: 948: currentDrawer = 1;
 12760  00C60E  0E00               	movlw	0
 12761  00C610  6FB5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12762  00C612  0E01               	movlw	1
 12763  00C614  6FB4               	movwf	mainOperation@currentDrawer& (0+255),b
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;operationMode.c: 950: getUserInputs(drawerTable, dietTable, foodTable);
 12767  00C616  0E82               	movlw	low mainOperation@drawerTable
 12768  00C618  6E07               	movwf	getUserInputs@drawerTable,c
 12769  00C61A  0E00               	movlw	high mainOperation@drawerTable
 12770  00C61C  6E08               	movwf	getUserInputs@drawerTable+1,c
 12771  00C61E  0E94               	movlw	low mainOperation@dietTable
 12772  00C620  6E09               	movwf	getUserInputs@dietTable,c
 12773  00C622  0E00               	movlw	high mainOperation@dietTable
 12774  00C624  6E0A               	movwf	getUserInputs@dietTable+1,c
 12775  00C626  0EA4               	movlw	low mainOperation@foodTable
 12776  00C628  6E0B               	movwf	getUserInputs@foodTable,c
 12777  00C62A  0E00               	movlw	high mainOperation@foodTable
 12778  00C62C  6E0C               	movwf	getUserInputs@foodTable+1,c
 12779  00C62E  ECE5  F05A         	call	_getUserInputs	;wreg free
 12780                           
 12781                           ;operationMode.c: 951: sortDrawerList(drawerTable, sortedDrawerTable);
 12782  00C632  0E82               	movlw	low mainOperation@drawerTable
 12783  00C634  6E01               	movwf	sortDrawerList@drawerTable,c
 12784  00C636  0E00               	movlw	high mainOperation@drawerTable
 12785  00C638  6E02               	movwf	sortDrawerList@drawerTable+1,c
 12786  00C63A  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12787  00C63C  6E03               	movwf	sortDrawerList@sortedDrawerTable,c
 12788  00C63E  0E00               	movlw	high mainOperation@sortedDrawerTable
 12789  00C640  6E04               	movwf	sortDrawerList@sortedDrawerTable+1,c
 12790  00C642  EC42  F071         	call	_sortDrawerList	;wreg free
 12791                           
 12792                           ;operationMode.c: 953: for (i=0; i<8; i++){
 12793  00C646  0E00               	movlw	0
 12794  00C648  0100               	movlb	0	; () banked
 12795  00C64A  6FCD               	movwf	(mainOperation@i+1)& (0+255),b
 12796  00C64C  0E00               	movlw	0
 12797  00C64E  6FCC               	movwf	mainOperation@i& (0+255),b
 12798                           
 12799                           ; BSR set to: 0
 12800  00C650  51CD               	movf	(mainOperation@i+1)& (0+255),w,b
 12801  00C652  E105               	bnz	u12640
 12802  00C654  0E08               	movlw	8
 12803  00C656  5DCC               	subwf	mainOperation@i& (0+255),w,b
 12804  00C658  B0D8               	btfsc	status,0,c
 12805  00C65A  0012               	return	
 12806  00C65C  D001               	goto	l562
 12807  00C65E                     u12640:
 12808                           
 12809                           ; BSR set to: 0
 12810  00C65E  0012               	return	
 12811  00C660                     l562:
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;operationMode.c: 954: if (sortedDrawerTable[i] != 0){
 12815                           
 12816                           ; BSR set to: 0
 12817  00C660  90D8               	bcf	status,0,c
 12818  00C662  35CC               	rlcf	mainOperation@i& (0+255),w,b
 12819  00C664  6ED9               	movwf	fsr2l,c
 12820  00C666  35CD               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12821  00C668  6EDA               	movwf	fsr2h,c
 12822  00C66A  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12823  00C66C  26D9               	addwf	fsr2l,f,c
 12824  00C66E  0E00               	movlw	high mainOperation@sortedDrawerTable
 12825  00C670  22DA               	addwfc	fsr2h,f,c
 12826  00C672  50DE               	movf	postinc2,w,c
 12827  00C674  10DE               	iorwf	postinc2,w,c
 12828  00C676  B4D8               	btfsc	status,2,c
 12829  00C678  D156               	goto	l564
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;operationMode.c: 955: currentDrawer = sortedDrawerTable[i];
 12833  00C67A  90D8               	bcf	status,0,c
 12834  00C67C  35CC               	rlcf	mainOperation@i& (0+255),w,b
 12835  00C67E  6ED9               	movwf	fsr2l,c
 12836  00C680  35CD               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12837  00C682  6EDA               	movwf	fsr2h,c
 12838  00C684  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12839  00C686  26D9               	addwf	fsr2l,f,c
 12840  00C688  0E00               	movlw	high mainOperation@sortedDrawerTable
 12841  00C68A  22DA               	addwfc	fsr2h,f,c
 12842  00C68C  CFDE F0B4          	movff	postinc2,mainOperation@currentDrawer
 12843  00C690  CFDD F0B5          	movff	postdec2,mainOperation@currentDrawer+1
 12844                           
 12845                           ;operationMode.c: 956: nextDrawer = sortedDrawerTable[i+1];
 12846  00C694  C0CC  F039         	movff	mainOperation@i,??_mainOperation
 12847  00C698  C0CD  F03A         	movff	mainOperation@i+1,??_mainOperation+1
 12848  00C69C  90D8               	bcf	status,0,c
 12849  00C69E  3639               	rlcf	??_mainOperation,f,c
 12850  00C6A0  363A               	rlcf	??_mainOperation+1,f,c
 12851  00C6A2  0E02               	movlw	2
 12852  00C6A4  2639               	addwf	??_mainOperation,f,c
 12853  00C6A6  0E00               	movlw	0
 12854  00C6A8  223A               	addwfc	??_mainOperation+1,f,c
 12855  00C6AA  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12856  00C6AC  2439               	addwf	??_mainOperation,w,c
 12857  00C6AE  6ED9               	movwf	fsr2l,c
 12858  00C6B0  0E00               	movlw	high mainOperation@sortedDrawerTable
 12859  00C6B2  203A               	addwfc	??_mainOperation+1,w,c
 12860  00C6B4  6EDA               	movwf	fsr2h,c
 12861  00C6B6  CFDE F092          	movff	postinc2,mainOperation@nextDrawer
 12862  00C6BA  CFDD F093          	movff	postdec2,mainOperation@nextDrawer+1
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;operationMode.c: 957: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12866  00C6BE  0E01               	movlw	1
 12867  00C6C0  ECD3  F054         	call	_lcdInst
 12868  00C6C4  0EC3               	movlw	195
 12869  00C6C6  6E39               	movwf	??_mainOperation& (0+255),c
 12870  00C6C8  0ECD               	movlw	205
 12871  00C6CA                     u14347:
 12872  00C6CA  2EE8               	decfsz	wreg,f,c
 12873  00C6CC  D7FE               	bra	u14347
 12874  00C6CE  2E39               	decfsz	??_mainOperation& (0+255),f,c
 12875  00C6D0  D7FC               	bra	u14347
 12876  00C6D2  F000               	nop	
 12877                           
 12878                           ;operationMode.c: 958: printf("Moving to");
 12879  00C6D4  0E56               	movlw	low STR_34
 12880  00C6D6  6E0D               	movwf	printf@f,c
 12881  00C6D8  0EFF               	movlw	high STR_34
 12882  00C6DA  6E0E               	movwf	printf@f+1,c
 12883  00C6DC  EC9A  F064         	call	_printf	;wreg free
 12884                           
 12885                           ;operationMode.c: 959: lcdInst(0xC0);;
 12886  00C6E0  0EC0               	movlw	192
 12887  00C6E2  ECD3  F054         	call	_lcdInst
 12888                           
 12889                           ;operationMode.c: 960: printf("drawer %i", sortedDrawerTable[i]);
 12890  00C6E6  0E4C               	movlw	low STR_35
 12891  00C6E8  6E0D               	movwf	printf@f,c
 12892  00C6EA  0EFF               	movlw	high STR_35
 12893  00C6EC  6E0E               	movwf	printf@f+1,c
 12894  00C6EE  90D8               	bcf	status,0,c
 12895  00C6F0  0100               	movlb	0	; () banked
 12896  00C6F2  35CC               	rlcf	mainOperation@i& (0+255),w,b
 12897  00C6F4  6ED9               	movwf	fsr2l,c
 12898  00C6F6  35CD               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12899  00C6F8  6EDA               	movwf	fsr2h,c
 12900  00C6FA  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12901  00C6FC  26D9               	addwf	fsr2l,f,c
 12902  00C6FE  0E00               	movlw	high mainOperation@sortedDrawerTable
 12903  00C700  22DA               	addwfc	fsr2h,f,c
 12904  00C702  CFDE F00F          	movff	postinc2,?_printf+2
 12905  00C706  CFDD F010          	movff	postdec2,?_printf+3
 12906  00C70A  EC9A  F064         	call	_printf	;wreg free
 12907                           
 12908                           ;operationMode.c: 961: _delay((unsigned long)((2000)*(40000000/4000.0)));
 12909  00C70E  0E66               	movlw	102
 12910  00C710  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 12911  00C712  0E76               	movlw	118
 12912  00C714  6E39               	movwf	??_mainOperation& (0+255),c
 12913  00C716  0EC1               	movlw	193
 12914  00C718                     u14357:
 12915  00C718  2EE8               	decfsz	wreg,f,c
 12916  00C71A  D7FE               	bra	u14357
 12917  00C71C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 12918  00C71E  D7FC               	bra	u14357
 12919  00C720  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 12920  00C722  D7FA               	bra	u14357
 12921  00C724  F000               	nop	
 12922                           
 12923                           ;operationMode.c: 962: trueValue = findDrawerIndex(drawerTable, sortedDrawerTable[i]);
 12924  00C726  0E82               	movlw	low mainOperation@drawerTable
 12925  00C728  6E01               	movwf	findDrawerIndex@drawerTable,c
 12926  00C72A  0E00               	movlw	high mainOperation@drawerTable
 12927  00C72C  6E02               	movwf	findDrawerIndex@drawerTable+1,c
 12928  00C72E  90D8               	bcf	status,0,c
 12929  00C730  0100               	movlb	0	; () banked
 12930  00C732  35CC               	rlcf	mainOperation@i& (0+255),w,b
 12931  00C734  6ED9               	movwf	fsr2l,c
 12932  00C736  35CD               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12933  00C738  6EDA               	movwf	fsr2h,c
 12934  00C73A  0EBC               	movlw	low mainOperation@sortedDrawerTable
 12935  00C73C  26D9               	addwf	fsr2l,f,c
 12936  00C73E  0E00               	movlw	high mainOperation@sortedDrawerTable
 12937  00C740  22DA               	addwfc	fsr2h,f,c
 12938  00C742  CFDE F003          	movff	postinc2,findDrawerIndex@sortedDrawerValue
 12939  00C746  CFDD F004          	movff	postdec2,findDrawerIndex@sortedDrawerValue+1
 12940  00C74A  EC33  F056         	call	_findDrawerIndex	;wreg free
 12941  00C74E  C001  F0CE         	movff	?_findDrawerIndex,mainOperation@trueValue
 12942  00C752  C002  F0CF         	movff	?_findDrawerIndex+1,mainOperation@trueValue+1
 12943                           
 12944                           ;operationMode.c: 963: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12945  00C756  0E01               	movlw	1
 12946  00C758  ECD3  F054         	call	_lcdInst
 12947  00C75C  0EC3               	movlw	195
 12948  00C75E  6E39               	movwf	??_mainOperation& (0+255),c
 12949  00C760  0ECD               	movlw	205
 12950  00C762                     u14367:
 12951  00C762  2EE8               	decfsz	wreg,f,c
 12952  00C764  D7FE               	bra	u14367
 12953  00C766  2E39               	decfsz	??_mainOperation& (0+255),f,c
 12954  00C768  D7FC               	bra	u14367
 12955  00C76A  F000               	nop	
 12956                           
 12957                           ;operationMode.c: 964: printf("diet: %s", inputs[dietTable[trueValue]]);
 12958  00C76C  0E72               	movlw	low STR_36
 12959  00C76E  6E0D               	movwf	printf@f,c
 12960  00C770  0EFF               	movlw	high STR_36
 12961  00C772  6E0E               	movwf	printf@f+1,c
 12962  00C774  90D8               	bcf	status,0,c
 12963  00C776  0100               	movlb	0	; () banked
 12964  00C778  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 12965  00C77A  6ED9               	movwf	fsr2l,c
 12966  00C77C  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 12967  00C77E  6EDA               	movwf	fsr2h,c
 12968  00C780  0E94               	movlw	low mainOperation@dietTable
 12969  00C782  26D9               	addwf	fsr2l,f,c
 12970  00C784  0E00               	movlw	high mainOperation@dietTable
 12971  00C786  22DA               	addwfc	fsr2h,f,c
 12972  00C788  CFDE F039          	movff	postinc2,??_mainOperation
 12973  00C78C  CFDD F03A          	movff	postdec2,??_mainOperation+1
 12974  00C790  90D8               	bcf	status,0,c
 12975  00C792  3639               	rlcf	??_mainOperation,f,c
 12976  00C794  363A               	rlcf	??_mainOperation+1,f,c
 12977  00C796  0E50               	movlw	low _inputs
 12978  00C798  2439               	addwf	??_mainOperation,w,c
 12979  00C79A  6ED9               	movwf	fsr2l,c
 12980  00C79C  0E02               	movlw	high _inputs
 12981  00C79E  203A               	addwfc	??_mainOperation+1,w,c
 12982  00C7A0  6EDA               	movwf	fsr2h,c
 12983  00C7A2  CFDE F00F          	movff	postinc2,?_printf+2
 12984  00C7A6  CFDD F010          	movff	postdec2,?_printf+3
 12985  00C7AA  EC9A  F064         	call	_printf	;wreg free
 12986                           
 12987                           ;operationMode.c: 965: lcdInst(0xC0);;
 12988  00C7AE  0EC0               	movlw	192
 12989  00C7B0  ECD3  F054         	call	_lcdInst
 12990                           
 12991                           ;operationMode.c: 966: printf("food: %s", foodInputs[foodTable[trueValue]]);
 12992  00C7B4  0E69               	movlw	low STR_37
 12993  00C7B6  6E0D               	movwf	printf@f,c
 12994  00C7B8  0EFF               	movlw	high STR_37
 12995  00C7BA  6E0E               	movwf	printf@f+1,c
 12996  00C7BC  90D8               	bcf	status,0,c
 12997  00C7BE  0100               	movlb	0	; () banked
 12998  00C7C0  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 12999  00C7C2  6ED9               	movwf	fsr2l,c
 13000  00C7C4  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13001  00C7C6  6EDA               	movwf	fsr2h,c
 13002  00C7C8  0EA4               	movlw	low mainOperation@foodTable
 13003  00C7CA  26D9               	addwf	fsr2l,f,c
 13004  00C7CC  0E00               	movlw	high mainOperation@foodTable
 13005  00C7CE  22DA               	addwfc	fsr2h,f,c
 13006  00C7D0  CFDE F039          	movff	postinc2,??_mainOperation
 13007  00C7D4  CFDD F03A          	movff	postdec2,??_mainOperation+1
 13008  00C7D8  90D8               	bcf	status,0,c
 13009  00C7DA  3639               	rlcf	??_mainOperation,f,c
 13010  00C7DC  363A               	rlcf	??_mainOperation+1,f,c
 13011  00C7DE  0E74               	movlw	low _foodInputs
 13012  00C7E0  2439               	addwf	??_mainOperation,w,c
 13013  00C7E2  6ED9               	movwf	fsr2l,c
 13014  00C7E4  0E02               	movlw	high _foodInputs
 13015  00C7E6  203A               	addwfc	??_mainOperation+1,w,c
 13016  00C7E8  6EDA               	movwf	fsr2h,c
 13017  00C7EA  CFDE F00F          	movff	postinc2,?_printf+2
 13018  00C7EE  CFDD F010          	movff	postdec2,?_printf+3
 13019  00C7F2  EC9A  F064         	call	_printf	;wreg free
 13020                           
 13021                           ;operationMode.c: 967: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13022  00C7F6  0E66               	movlw	102
 13023  00C7F8  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13024  00C7FA  0E76               	movlw	118
 13025  00C7FC  6E39               	movwf	??_mainOperation& (0+255),c
 13026  00C7FE  0EC1               	movlw	193
 13027  00C800                     u14377:
 13028  00C800  2EE8               	decfsz	wreg,f,c
 13029  00C802  D7FE               	bra	u14377
 13030  00C804  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13031  00C806  D7FC               	bra	u14377
 13032  00C808  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13033  00C80A  D7FA               	bra	u14377
 13034  00C80C  F000               	nop	
 13035                           
 13036                           ;operationMode.c: 968: roundPieces = getRoundPieces(dietTable[trueValue], foodTable[true
      +                          Value]);
 13037  00C80E  90D8               	bcf	status,0,c
 13038  00C810  0100               	movlb	0	; () banked
 13039  00C812  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13040  00C814  6ED9               	movwf	fsr2l,c
 13041  00C816  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13042  00C818  6EDA               	movwf	fsr2h,c
 13043  00C81A  0E94               	movlw	low mainOperation@dietTable
 13044  00C81C  26D9               	addwf	fsr2l,f,c
 13045  00C81E  0E00               	movlw	high mainOperation@dietTable
 13046  00C820  22DA               	addwfc	fsr2h,f,c
 13047  00C822  CFDE F001          	movff	postinc2,getRoundPieces@dietType
 13048  00C826  CFDD F002          	movff	postdec2,getRoundPieces@dietType+1
 13049  00C82A  90D8               	bcf	status,0,c
 13050  00C82C  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13051  00C82E  6ED9               	movwf	fsr2l,c
 13052  00C830  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13053  00C832  6EDA               	movwf	fsr2h,c
 13054  00C834  0EA4               	movlw	low mainOperation@foodTable
 13055  00C836  26D9               	addwf	fsr2l,f,c
 13056  00C838  0E00               	movlw	high mainOperation@foodTable
 13057  00C83A  22DA               	addwfc	fsr2h,f,c
 13058  00C83C  CFDE F003          	movff	postinc2,getRoundPieces@foodType
 13059  00C840  CFDD F004          	movff	postdec2,getRoundPieces@foodType+1
 13060  00C844  EC04  F05C         	call	_getRoundPieces	;wreg free
 13061  00C848  C001  F0B6         	movff	?_getRoundPieces,mainOperation@roundPieces
 13062  00C84C  C002  F0B7         	movff	?_getRoundPieces+1,mainOperation@roundPieces+1
 13063                           
 13064                           ;operationMode.c: 969: flatPieces = getFlatPieces(dietTable[trueValue], foodTable[trueVa
      +                          lue]);
 13065  00C850  90D8               	bcf	status,0,c
 13066  00C852  0100               	movlb	0	; () banked
 13067  00C854  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13068  00C856  6ED9               	movwf	fsr2l,c
 13069  00C858  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13070  00C85A  6EDA               	movwf	fsr2h,c
 13071  00C85C  0E94               	movlw	low mainOperation@dietTable
 13072  00C85E  26D9               	addwf	fsr2l,f,c
 13073  00C860  0E00               	movlw	high mainOperation@dietTable
 13074  00C862  22DA               	addwfc	fsr2h,f,c
 13075  00C864  CFDE F001          	movff	postinc2,getFlatPieces@dietType
 13076  00C868  CFDD F002          	movff	postdec2,getFlatPieces@dietType+1
 13077  00C86C  90D8               	bcf	status,0,c
 13078  00C86E  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13079  00C870  6ED9               	movwf	fsr2l,c
 13080  00C872  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13081  00C874  6EDA               	movwf	fsr2h,c
 13082  00C876  0EA4               	movlw	low mainOperation@foodTable
 13083  00C878  26D9               	addwf	fsr2l,f,c
 13084  00C87A  0E00               	movlw	high mainOperation@foodTable
 13085  00C87C  22DA               	addwfc	fsr2h,f,c
 13086  00C87E  CFDE F003          	movff	postinc2,getFlatPieces@foodType
 13087  00C882  CFDD F004          	movff	postdec2,getFlatPieces@foodType+1
 13088  00C886  EC9C  F05C         	call	_getFlatPieces	;wreg free
 13089  00C88A  C001  F0B8         	movff	?_getFlatPieces,mainOperation@flatPieces
 13090  00C88E  C002  F0B9         	movff	?_getFlatPieces+1,mainOperation@flatPieces+1
 13091                           
 13092                           ;operationMode.c: 970: longPieces = getLongPieces(dietTable[trueValue], foodTable[trueVa
      +                          lue]);
 13093  00C892  90D8               	bcf	status,0,c
 13094  00C894  0100               	movlb	0	; () banked
 13095  00C896  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13096  00C898  6ED9               	movwf	fsr2l,c
 13097  00C89A  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13098  00C89C  6EDA               	movwf	fsr2h,c
 13099  00C89E  0E94               	movlw	low mainOperation@dietTable
 13100  00C8A0  26D9               	addwf	fsr2l,f,c
 13101  00C8A2  0E00               	movlw	high mainOperation@dietTable
 13102  00C8A4  22DA               	addwfc	fsr2h,f,c
 13103  00C8A6  CFDE F001          	movff	postinc2,getLongPieces@dietType
 13104  00C8AA  CFDD F002          	movff	postdec2,getLongPieces@dietType+1
 13105  00C8AE  90D8               	bcf	status,0,c
 13106  00C8B0  35CE               	rlcf	mainOperation@trueValue& (0+255),w,b
 13107  00C8B2  6ED9               	movwf	fsr2l,c
 13108  00C8B4  35CF               	rlcf	(mainOperation@trueValue+1)& (0+255),w,b
 13109  00C8B6  6EDA               	movwf	fsr2h,c
 13110  00C8B8  0EA4               	movlw	low mainOperation@foodTable
 13111  00C8BA  26D9               	addwf	fsr2l,f,c
 13112  00C8BC  0E00               	movlw	high mainOperation@foodTable
 13113  00C8BE  22DA               	addwfc	fsr2h,f,c
 13114  00C8C0  CFDE F003          	movff	postinc2,getLongPieces@foodType
 13115  00C8C4  CFDD F004          	movff	postdec2,getLongPieces@foodType+1
 13116  00C8C8  EC4F  F05D         	call	_getLongPieces	;wreg free
 13117  00C8CC  C001  F0BA         	movff	?_getLongPieces,mainOperation@longPieces
 13118  00C8D0  C002  F0BB         	movff	?_getLongPieces+1,mainOperation@longPieces+1
 13119                           
 13120                           ;operationMode.c: 971: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 13121  00C8D4  0E01               	movlw	1
 13122  00C8D6  ECD3  F054         	call	_lcdInst
 13123  00C8DA  0EC3               	movlw	195
 13124  00C8DC  6E39               	movwf	??_mainOperation& (0+255),c
 13125  00C8DE  0ECD               	movlw	205
 13126  00C8E0                     u14387:
 13127  00C8E0  2EE8               	decfsz	wreg,f,c
 13128  00C8E2  D7FE               	bra	u14387
 13129  00C8E4  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13130  00C8E6  D7FC               	bra	u14387
 13131  00C8E8  F000               	nop	
 13132                           
 13133                           ;operationMode.c: 972: printf("R:%i F:%i L:%i", roundPieces, flatPieces, longPieces);
 13134  00C8EA  0E62               	movlw	low STR_38
 13135  00C8EC  6E0D               	movwf	printf@f,c
 13136  00C8EE  0EFE               	movlw	high STR_38
 13137  00C8F0  6E0E               	movwf	printf@f+1,c
 13138  00C8F2  C0B6  F00F         	movff	mainOperation@roundPieces,?_printf+2
 13139  00C8F6  C0B7  F010         	movff	mainOperation@roundPieces+1,?_printf+3
 13140  00C8FA  C0B8  F011         	movff	mainOperation@flatPieces,?_printf+4
 13141  00C8FE  C0B9  F012         	movff	mainOperation@flatPieces+1,?_printf+5
 13142  00C902  C0BA  F013         	movff	mainOperation@longPieces,?_printf+6
 13143  00C906  C0BB  F014         	movff	mainOperation@longPieces+1,?_printf+7
 13144  00C90A  EC9A  F064         	call	_printf	;wreg free
 13145                           
 13146                           ;operationMode.c: 973: _delay((unsigned long)((2000)*(40000000/4000.0)));
 13147  00C90E  0E66               	movlw	102
 13148  00C910  6E3A               	movwf	(??_mainOperation+1)& (0+255),c
 13149  00C912  0E76               	movlw	118
 13150  00C914  6E39               	movwf	??_mainOperation& (0+255),c
 13151  00C916  0EC1               	movlw	193
 13152  00C918                     u14397:
 13153  00C918  2EE8               	decfsz	wreg,f,c
 13154  00C91A  D7FE               	bra	u14397
 13155  00C91C  2E39               	decfsz	??_mainOperation& (0+255),f,c
 13156  00C91E  D7FC               	bra	u14397
 13157  00C920  2E3A               	decfsz	(??_mainOperation+1)& (0+255),f,c
 13158  00C922  D7FA               	bra	u14397
 13159  00C924  F000               	nop	
 13160  00C926                     l564:
 13161  00C926  0100               	movlb	0	; () banked
 13162  00C928  4BCC               	infsnz	mainOperation@i& (0+255),f,b
 13163  00C92A  2BCD               	incf	(mainOperation@i+1)& (0+255),f,b
 13164                           
 13165                           ; BSR set to: 0
 13166  00C92C  51CD               	movf	(mainOperation@i+1)& (0+255),w,b
 13167  00C92E  E101               	bnz	l565
 13168  00C930  D691               	goto	L125
 13169  00C932                     l565:
 13170                           
 13171                           ; BSR set to: 0
 13172  00C932  0012               	return		;funcret
 13173  00C934                     __end_of_mainOperation:
 13174                           	opt stack 0
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           postinc0	equ	0xFEE
 13182                           wreg	equ	0xFE8
 13183                           postdec1	equ	0xFE5
 13184                           plusw1	equ	0xFE3
 13185                           fsr1l	equ	0xFE1
 13186                           indf2	equ	0xFDF
 13187                           postinc2	equ	0xFDE
 13188                           postdec2	equ	0xFDD
 13189                           plusw2	equ	0xFDB
 13190                           fsr2h	equ	0xFDA
 13191                           fsr2l	equ	0xFD9
 13192                           status	equ	0xFD8
 13193                           
 13194 ;; *************** function _sortDrawerList *****************
 13195 ;; Defined at:
 13196 ;;		line 57 in file "operationMode.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 13199 ;;		 -> mainOperation@drawerTable(16), 
 13200 ;;  sortedDrawer    2    2[COMRAM] PTR unsigned int 
 13201 ;;		 -> mainOperation@sortedDrawerTable(16), 
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  sublist3        8   34[COMRAM] unsigned int [4]
 13204 ;;  sublist2        8   26[COMRAM] unsigned int [4]
 13205 ;;  sublist4        8   18[COMRAM] unsigned int [4]
 13206 ;;  sublist1        8   10[COMRAM] unsigned int [4]
 13207 ;;  i               2   54[COMRAM] unsigned int 
 13208 ;;  j               2   52[COMRAM] unsigned int 
 13209 ;;  count3          2   50[COMRAM] unsigned int 
 13210 ;;  count1          2   48[COMRAM] unsigned int 
 13211 ;;  temp            2   46[COMRAM] unsigned int 
 13212 ;;  count2          2   44[COMRAM] unsigned int 
 13213 ;;  count4          2   42[COMRAM] unsigned int 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      void 
 13216 ;; Registers used:
 13217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Locals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Totals:        56       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;Total ram usage:       56 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; This function calls:
 13230 ;;		Nothing
 13231 ;; This function is called by:
 13232 ;;		_mainOperation
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           	psect	text25
 13237  00E284                     __ptext25:
 13238                           	opt stack 0
 13239  00E284                     _sortDrawerList:
 13240                           	opt stack 29
 13241                           
 13242                           ;operationMode.c: 58: unsigned int i = 0;
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;incstack = 0
 13246  00E284  0E00               	movlw	0
 13247  00E286  6E38               	movwf	sortDrawerList@i+1,c
 13248  00E288  0E00               	movlw	0
 13249  00E28A  6E37               	movwf	sortDrawerList@i,c
 13250                           
 13251                           ;operationMode.c: 59: unsigned int j = 0;
 13252  00E28C  0E00               	movlw	0
 13253  00E28E  6E36               	movwf	sortDrawerList@j+1,c
 13254  00E290  0E00               	movlw	0
 13255  00E292  6E35               	movwf	sortDrawerList@j,c
 13256                           
 13257                           ;operationMode.c: 60: unsigned int sublist1[] = {0,0,0,0};
 13258  00E294  EE20  F0F8         	lfsr	2,sortDrawerList@F3086
 13259  00E298  EE10  F00B         	lfsr	1,sortDrawerList@sublist1
 13260  00E29C  0E07               	movlw	7
 13261  00E29E                     u8621:
 13262  00E29E  CFDB FFE3          	movff	plusw2,plusw1
 13263  00E2A2  06E8               	decf	wreg,f,c
 13264  00E2A4  E2FC               	bc	u8621
 13265                           
 13266                           ;operationMode.c: 61: unsigned int count1 = 0;
 13267  00E2A6  0E00               	movlw	0
 13268  00E2A8  6E32               	movwf	sortDrawerList@count1+1,c
 13269  00E2AA  0E00               	movlw	0
 13270  00E2AC  6E31               	movwf	sortDrawerList@count1,c
 13271                           
 13272                           ;operationMode.c: 62: unsigned int sublist2[] = {0,0,0,0};
 13273  00E2AE  EE20  F0F0         	lfsr	2,sortDrawerList@F3089
 13274  00E2B2  EE10  F01B         	lfsr	1,sortDrawerList@sublist2
 13275  00E2B6  0E07               	movlw	7
 13276  00E2B8                     u8631:
 13277  00E2B8  CFDB FFE3          	movff	plusw2,plusw1
 13278  00E2BC  06E8               	decf	wreg,f,c
 13279  00E2BE  E2FC               	bc	u8631
 13280                           
 13281                           ;operationMode.c: 63: unsigned int count2 = 0;
 13282  00E2C0  0E00               	movlw	0
 13283  00E2C2  6E2E               	movwf	sortDrawerList@count2+1,c
 13284  00E2C4  0E00               	movlw	0
 13285  00E2C6  6E2D               	movwf	sortDrawerList@count2,c
 13286                           
 13287                           ;operationMode.c: 64: unsigned int sublist3[] = {0,0,0,0};
 13288  00E2C8  EE20  F0E8         	lfsr	2,sortDrawerList@F3092
 13289  00E2CC  EE10  F023         	lfsr	1,sortDrawerList@sublist3
 13290  00E2D0  0E07               	movlw	7
 13291  00E2D2                     u8641:
 13292  00E2D2  CFDB FFE3          	movff	plusw2,plusw1
 13293  00E2D6  06E8               	decf	wreg,f,c
 13294  00E2D8  E2FC               	bc	u8641
 13295                           
 13296                           ;operationMode.c: 65: unsigned int count3 = 0;
 13297  00E2DA  0E00               	movlw	0
 13298  00E2DC  6E34               	movwf	sortDrawerList@count3+1,c
 13299  00E2DE  0E00               	movlw	0
 13300  00E2E0  6E33               	movwf	sortDrawerList@count3,c
 13301                           
 13302                           ;operationMode.c: 66: unsigned int sublist4[] = {0,0,0,0};
 13303  00E2E2  EE20  F0E0         	lfsr	2,sortDrawerList@F3095
 13304  00E2E6  EE10  F013         	lfsr	1,sortDrawerList@sublist4
 13305  00E2EA  0E07               	movlw	7
 13306  00E2EC                     u8651:
 13307  00E2EC  CFDB FFE3          	movff	plusw2,plusw1
 13308  00E2F0  06E8               	decf	wreg,f,c
 13309  00E2F2  E2FC               	bc	u8651
 13310                           
 13311                           ;operationMode.c: 67: unsigned int count4 = 0;
 13312  00E2F4  0E00               	movlw	0
 13313  00E2F6  6E2C               	movwf	sortDrawerList@count4+1,c
 13314  00E2F8  0E00               	movlw	0
 13315  00E2FA  6E2B               	movwf	sortDrawerList@count4,c
 13316                           
 13317                           ;operationMode.c: 68: unsigned int temp;
 13318                           ;operationMode.c: 70: for (i=0; i<8; i++){
 13319  00E2FC  0E00               	movlw	0
 13320  00E2FE  6E38               	movwf	sortDrawerList@i+1,c
 13321  00E300  0E00               	movlw	0
 13322  00E302  6E37               	movwf	sortDrawerList@i,c
 13323  00E304                     l7364:
 13324  00E304  5038               	movf	sortDrawerList@i+1,w,c
 13325  00E306  E11D               	bnz	l7374
 13326  00E308  0E08               	movlw	8
 13327  00E30A  5C37               	subwf	sortDrawerList@i,w,c
 13328  00E30C  B0D8               	btfsc	status,0,c
 13329  00E30E  D019               	goto	u8670
 13330                           
 13331                           ;operationMode.c: 71: sortedDrawerTable[i] = drawerTable[i];
 13332  00E310  90D8               	bcf	status,0,c
 13333  00E312  3437               	rlcf	sortDrawerList@i,w,c
 13334  00E314  6ED9               	movwf	fsr2l,c
 13335  00E316  3438               	rlcf	sortDrawerList@i+1,w,c
 13336  00E318  6EDA               	movwf	fsr2h,c
 13337  00E31A  5001               	movf	sortDrawerList@drawerTable,w,c
 13338  00E31C  26D9               	addwf	fsr2l,f,c
 13339  00E31E  5002               	movf	sortDrawerList@drawerTable+1,w,c
 13340  00E320  22DA               	addwfc	fsr2h,f,c
 13341  00E322  90D8               	bcf	status,0,c
 13342  00E324  3437               	rlcf	sortDrawerList@i,w,c
 13343  00E326  6EE1               	movwf	fsr1l,c
 13344  00E328  3438               	rlcf	sortDrawerList@i+1,w,c
 13345  00E32A  6EE2               	movwf	fsr1h,c
 13346  00E32C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13347  00E32E  26E1               	addwf	fsr1l,f,c
 13348  00E330  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13349  00E332  22E2               	addwfc	fsr1h,f,c
 13350  00E334  CFDE FFE6          	movff	postinc2,postinc1
 13351  00E338  CFDD FFE5          	movff	postdec2,postdec1
 13352  00E33C  4A37               	infsnz	sortDrawerList@i,f,c
 13353  00E33E  2A38               	incf	sortDrawerList@i+1,f,c
 13354  00E340  D7E1               	goto	l7364
 13355  00E342                     u8670:
 13356  00E342                     l7374:
 13357                           
 13358                           ;operationMode.c: 72: }
 13359                           ;operationMode.c: 74: for(i=0; i<8; i++){
 13360  00E342  0E00               	movlw	0
 13361  00E344  6E38               	movwf	sortDrawerList@i+1,c
 13362  00E346  0E00               	movlw	0
 13363  00E348  6E37               	movwf	sortDrawerList@i,c
 13364  00E34A  5038               	movf	sortDrawerList@i+1,w,c
 13365  00E34C  E105               	bnz	u8680
 13366  00E34E  0E08               	movlw	8
 13367  00E350  5C37               	subwf	sortDrawerList@i,w,c
 13368  00E352  B0D8               	btfsc	status,0,c
 13369  00E354  D149               	goto	u8850
 13370  00E356  D001               	goto	l139
 13371  00E358                     u8680:
 13372  00E358  D147               	goto	u8850
 13373  00E35A                     l139:
 13374                           
 13375                           ;operationMode.c: 75: if (sortedDrawerTable[i] == 1 || sortedDrawerTable[i] == 2 || sort
      +                          edDrawerTable[i] == 3 || sortedDrawerTable[i] == 4){
 13376  00E35A  90D8               	bcf	status,0,c
 13377  00E35C  3437               	rlcf	sortDrawerList@i,w,c
 13378  00E35E  6ED9               	movwf	fsr2l,c
 13379  00E360  3438               	rlcf	sortDrawerList@i+1,w,c
 13380  00E362  6EDA               	movwf	fsr2h,c
 13381  00E364  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13382  00E366  26D9               	addwf	fsr2l,f,c
 13383  00E368  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13384  00E36A  22DA               	addwfc	fsr2h,f,c
 13385  00E36C  04DE               	decf	postinc2,w,c
 13386  00E36E  10DE               	iorwf	postinc2,w,c
 13387  00E370  B4D8               	btfsc	status,2,c
 13388  00E372  D02A               	goto	u8720
 13389  00E374  90D8               	bcf	status,0,c
 13390  00E376  3437               	rlcf	sortDrawerList@i,w,c
 13391  00E378  6ED9               	movwf	fsr2l,c
 13392  00E37A  3438               	rlcf	sortDrawerList@i+1,w,c
 13393  00E37C  6EDA               	movwf	fsr2h,c
 13394  00E37E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13395  00E380  26D9               	addwf	fsr2l,f,c
 13396  00E382  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13397  00E384  22DA               	addwfc	fsr2h,f,c
 13398  00E386  0E02               	movlw	2
 13399  00E388  18DE               	xorwf	postinc2,w,c
 13400  00E38A  10DE               	iorwf	postinc2,w,c
 13401  00E38C  B4D8               	btfsc	status,2,c
 13402  00E38E  D01C               	goto	u8720
 13403  00E390  90D8               	bcf	status,0,c
 13404  00E392  3437               	rlcf	sortDrawerList@i,w,c
 13405  00E394  6ED9               	movwf	fsr2l,c
 13406  00E396  3438               	rlcf	sortDrawerList@i+1,w,c
 13407  00E398  6EDA               	movwf	fsr2h,c
 13408  00E39A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13409  00E39C  26D9               	addwf	fsr2l,f,c
 13410  00E39E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13411  00E3A0  22DA               	addwfc	fsr2h,f,c
 13412  00E3A2  0E03               	movlw	3
 13413  00E3A4  18DE               	xorwf	postinc2,w,c
 13414  00E3A6  10DE               	iorwf	postinc2,w,c
 13415  00E3A8  B4D8               	btfsc	status,2,c
 13416  00E3AA  D00E               	goto	u8720
 13417  00E3AC  90D8               	bcf	status,0,c
 13418  00E3AE  3437               	rlcf	sortDrawerList@i,w,c
 13419  00E3B0  6ED9               	movwf	fsr2l,c
 13420  00E3B2  3438               	rlcf	sortDrawerList@i+1,w,c
 13421  00E3B4  6EDA               	movwf	fsr2h,c
 13422  00E3B6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13423  00E3B8  26D9               	addwf	fsr2l,f,c
 13424  00E3BA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13425  00E3BC  22DA               	addwfc	fsr2h,f,c
 13426  00E3BE  0E04               	movlw	4
 13427  00E3C0  18DE               	xorwf	postinc2,w,c
 13428  00E3C2  10DE               	iorwf	postinc2,w,c
 13429  00E3C4  A4D8               	btfss	status,2,c
 13430  00E3C6  D019               	goto	l141
 13431  00E3C8                     u8720:
 13432                           
 13433                           ;operationMode.c: 76: sublist1[count1]=sortedDrawerTable[i];
 13434  00E3C8  90D8               	bcf	status,0,c
 13435  00E3CA  3437               	rlcf	sortDrawerList@i,w,c
 13436  00E3CC  6ED9               	movwf	fsr2l,c
 13437  00E3CE  3438               	rlcf	sortDrawerList@i+1,w,c
 13438  00E3D0  6EDA               	movwf	fsr2h,c
 13439  00E3D2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13440  00E3D4  26D9               	addwf	fsr2l,f,c
 13441  00E3D6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13442  00E3D8  22DA               	addwfc	fsr2h,f,c
 13443  00E3DA  90D8               	bcf	status,0,c
 13444  00E3DC  3431               	rlcf	sortDrawerList@count1,w,c
 13445  00E3DE  6EE1               	movwf	fsr1l,c
 13446  00E3E0  3432               	rlcf	sortDrawerList@count1+1,w,c
 13447  00E3E2  6EE2               	movwf	fsr1h,c
 13448  00E3E4  0E0B               	movlw	low sortDrawerList@sublist1
 13449  00E3E6  26E1               	addwf	fsr1l,f,c
 13450  00E3E8  0E00               	movlw	high sortDrawerList@sublist1
 13451  00E3EA  22E2               	addwfc	fsr1h,f,c
 13452  00E3EC  CFDE FFE6          	movff	postinc2,postinc1
 13453  00E3F0  CFDD FFE5          	movff	postdec2,postdec1
 13454                           
 13455                           ;operationMode.c: 77: count1 += 1;
 13456  00E3F4  4A31               	infsnz	sortDrawerList@count1,f,c
 13457  00E3F6  2A32               	incf	sortDrawerList@count1+1,f,c
 13458                           
 13459                           ;operationMode.c: 78: }
 13460  00E3F8  D0F2               	goto	l153
 13461  00E3FA                     l141:
 13462                           
 13463                           ;operationMode.c: 79: else if (sortedDrawerTable[i] == 5 || sortedDrawerTable[i] == 6 ||
      +                           sortedDrawerTable[i] == 7 || sortedDrawerTable[i] == 8){
 13464  00E3FA  90D8               	bcf	status,0,c
 13465  00E3FC  3437               	rlcf	sortDrawerList@i,w,c
 13466  00E3FE  6ED9               	movwf	fsr2l,c
 13467  00E400  3438               	rlcf	sortDrawerList@i+1,w,c
 13468  00E402  6EDA               	movwf	fsr2h,c
 13469  00E404  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13470  00E406  26D9               	addwf	fsr2l,f,c
 13471  00E408  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13472  00E40A  22DA               	addwfc	fsr2h,f,c
 13473  00E40C  0E05               	movlw	5
 13474  00E40E  18DE               	xorwf	postinc2,w,c
 13475  00E410  10DE               	iorwf	postinc2,w,c
 13476  00E412  B4D8               	btfsc	status,2,c
 13477  00E414  D02A               	goto	u8760
 13478  00E416  90D8               	bcf	status,0,c
 13479  00E418  3437               	rlcf	sortDrawerList@i,w,c
 13480  00E41A  6ED9               	movwf	fsr2l,c
 13481  00E41C  3438               	rlcf	sortDrawerList@i+1,w,c
 13482  00E41E  6EDA               	movwf	fsr2h,c
 13483  00E420  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13484  00E422  26D9               	addwf	fsr2l,f,c
 13485  00E424  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13486  00E426  22DA               	addwfc	fsr2h,f,c
 13487  00E428  0E06               	movlw	6
 13488  00E42A  18DE               	xorwf	postinc2,w,c
 13489  00E42C  10DE               	iorwf	postinc2,w,c
 13490  00E42E  B4D8               	btfsc	status,2,c
 13491  00E430  D01C               	goto	u8760
 13492  00E432  90D8               	bcf	status,0,c
 13493  00E434  3437               	rlcf	sortDrawerList@i,w,c
 13494  00E436  6ED9               	movwf	fsr2l,c
 13495  00E438  3438               	rlcf	sortDrawerList@i+1,w,c
 13496  00E43A  6EDA               	movwf	fsr2h,c
 13497  00E43C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13498  00E43E  26D9               	addwf	fsr2l,f,c
 13499  00E440  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13500  00E442  22DA               	addwfc	fsr2h,f,c
 13501  00E444  0E07               	movlw	7
 13502  00E446  18DE               	xorwf	postinc2,w,c
 13503  00E448  10DE               	iorwf	postinc2,w,c
 13504  00E44A  B4D8               	btfsc	status,2,c
 13505  00E44C  D00E               	goto	u8760
 13506  00E44E  90D8               	bcf	status,0,c
 13507  00E450  3437               	rlcf	sortDrawerList@i,w,c
 13508  00E452  6ED9               	movwf	fsr2l,c
 13509  00E454  3438               	rlcf	sortDrawerList@i+1,w,c
 13510  00E456  6EDA               	movwf	fsr2h,c
 13511  00E458  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13512  00E45A  26D9               	addwf	fsr2l,f,c
 13513  00E45C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13514  00E45E  22DA               	addwfc	fsr2h,f,c
 13515  00E460  0E08               	movlw	8
 13516  00E462  18DE               	xorwf	postinc2,w,c
 13517  00E464  10DE               	iorwf	postinc2,w,c
 13518  00E466  A4D8               	btfss	status,2,c
 13519  00E468  D019               	goto	l145
 13520  00E46A                     u8760:
 13521                           
 13522                           ;operationMode.c: 80: sublist2[count2]=sortedDrawerTable[i];
 13523  00E46A  90D8               	bcf	status,0,c
 13524  00E46C  3437               	rlcf	sortDrawerList@i,w,c
 13525  00E46E  6ED9               	movwf	fsr2l,c
 13526  00E470  3438               	rlcf	sortDrawerList@i+1,w,c
 13527  00E472  6EDA               	movwf	fsr2h,c
 13528  00E474  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13529  00E476  26D9               	addwf	fsr2l,f,c
 13530  00E478  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13531  00E47A  22DA               	addwfc	fsr2h,f,c
 13532  00E47C  90D8               	bcf	status,0,c
 13533  00E47E  342D               	rlcf	sortDrawerList@count2,w,c
 13534  00E480  6EE1               	movwf	fsr1l,c
 13535  00E482  342E               	rlcf	sortDrawerList@count2+1,w,c
 13536  00E484  6EE2               	movwf	fsr1h,c
 13537  00E486  0E1B               	movlw	low sortDrawerList@sublist2
 13538  00E488  26E1               	addwf	fsr1l,f,c
 13539  00E48A  0E00               	movlw	high sortDrawerList@sublist2
 13540  00E48C  22E2               	addwfc	fsr1h,f,c
 13541  00E48E  CFDE FFE6          	movff	postinc2,postinc1
 13542  00E492  CFDD FFE5          	movff	postdec2,postdec1
 13543                           
 13544                           ;operationMode.c: 81: count2 += 1;
 13545  00E496  4A2D               	infsnz	sortDrawerList@count2,f,c
 13546  00E498  2A2E               	incf	sortDrawerList@count2+1,f,c
 13547                           
 13548                           ;operationMode.c: 82: }
 13549  00E49A  D0A1               	goto	l153
 13550  00E49C                     l145:
 13551                           
 13552                           ;operationMode.c: 83: else if (sortedDrawerTable[i] == 9 || sortedDrawerTable[i] == 10 |
      +                          | sortedDrawerTable[i] == 11 || sortedDrawerTable[i] == 12){
 13553  00E49C  90D8               	bcf	status,0,c
 13554  00E49E  3437               	rlcf	sortDrawerList@i,w,c
 13555  00E4A0  6ED9               	movwf	fsr2l,c
 13556  00E4A2  3438               	rlcf	sortDrawerList@i+1,w,c
 13557  00E4A4  6EDA               	movwf	fsr2h,c
 13558  00E4A6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13559  00E4A8  26D9               	addwf	fsr2l,f,c
 13560  00E4AA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13561  00E4AC  22DA               	addwfc	fsr2h,f,c
 13562  00E4AE  0E09               	movlw	9
 13563  00E4B0  18DE               	xorwf	postinc2,w,c
 13564  00E4B2  10DE               	iorwf	postinc2,w,c
 13565  00E4B4  B4D8               	btfsc	status,2,c
 13566  00E4B6  D02A               	goto	u8800
 13567  00E4B8  90D8               	bcf	status,0,c
 13568  00E4BA  3437               	rlcf	sortDrawerList@i,w,c
 13569  00E4BC  6ED9               	movwf	fsr2l,c
 13570  00E4BE  3438               	rlcf	sortDrawerList@i+1,w,c
 13571  00E4C0  6EDA               	movwf	fsr2h,c
 13572  00E4C2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13573  00E4C4  26D9               	addwf	fsr2l,f,c
 13574  00E4C6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13575  00E4C8  22DA               	addwfc	fsr2h,f,c
 13576  00E4CA  0E0A               	movlw	10
 13577  00E4CC  18DE               	xorwf	postinc2,w,c
 13578  00E4CE  10DE               	iorwf	postinc2,w,c
 13579  00E4D0  B4D8               	btfsc	status,2,c
 13580  00E4D2  D01C               	goto	u8800
 13581  00E4D4  90D8               	bcf	status,0,c
 13582  00E4D6  3437               	rlcf	sortDrawerList@i,w,c
 13583  00E4D8  6ED9               	movwf	fsr2l,c
 13584  00E4DA  3438               	rlcf	sortDrawerList@i+1,w,c
 13585  00E4DC  6EDA               	movwf	fsr2h,c
 13586  00E4DE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13587  00E4E0  26D9               	addwf	fsr2l,f,c
 13588  00E4E2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13589  00E4E4  22DA               	addwfc	fsr2h,f,c
 13590  00E4E6  0E0B               	movlw	11
 13591  00E4E8  18DE               	xorwf	postinc2,w,c
 13592  00E4EA  10DE               	iorwf	postinc2,w,c
 13593  00E4EC  B4D8               	btfsc	status,2,c
 13594  00E4EE  D00E               	goto	u8800
 13595  00E4F0  90D8               	bcf	status,0,c
 13596  00E4F2  3437               	rlcf	sortDrawerList@i,w,c
 13597  00E4F4  6ED9               	movwf	fsr2l,c
 13598  00E4F6  3438               	rlcf	sortDrawerList@i+1,w,c
 13599  00E4F8  6EDA               	movwf	fsr2h,c
 13600  00E4FA  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13601  00E4FC  26D9               	addwf	fsr2l,f,c
 13602  00E4FE  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13603  00E500  22DA               	addwfc	fsr2h,f,c
 13604  00E502  0E0C               	movlw	12
 13605  00E504  18DE               	xorwf	postinc2,w,c
 13606  00E506  10DE               	iorwf	postinc2,w,c
 13607  00E508  A4D8               	btfss	status,2,c
 13608  00E50A  D019               	goto	l149
 13609  00E50C                     u8800:
 13610                           
 13611                           ;operationMode.c: 84: sublist3[count3]=sortedDrawerTable[i];
 13612  00E50C  90D8               	bcf	status,0,c
 13613  00E50E  3437               	rlcf	sortDrawerList@i,w,c
 13614  00E510  6ED9               	movwf	fsr2l,c
 13615  00E512  3438               	rlcf	sortDrawerList@i+1,w,c
 13616  00E514  6EDA               	movwf	fsr2h,c
 13617  00E516  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13618  00E518  26D9               	addwf	fsr2l,f,c
 13619  00E51A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13620  00E51C  22DA               	addwfc	fsr2h,f,c
 13621  00E51E  90D8               	bcf	status,0,c
 13622  00E520  3433               	rlcf	sortDrawerList@count3,w,c
 13623  00E522  6EE1               	movwf	fsr1l,c
 13624  00E524  3434               	rlcf	sortDrawerList@count3+1,w,c
 13625  00E526  6EE2               	movwf	fsr1h,c
 13626  00E528  0E23               	movlw	low sortDrawerList@sublist3
 13627  00E52A  26E1               	addwf	fsr1l,f,c
 13628  00E52C  0E00               	movlw	high sortDrawerList@sublist3
 13629  00E52E  22E2               	addwfc	fsr1h,f,c
 13630  00E530  CFDE FFE6          	movff	postinc2,postinc1
 13631  00E534  CFDD FFE5          	movff	postdec2,postdec1
 13632                           
 13633                           ;operationMode.c: 85: count3 += 1;
 13634  00E538  4A33               	infsnz	sortDrawerList@count3,f,c
 13635  00E53A  2A34               	incf	sortDrawerList@count3+1,f,c
 13636                           
 13637                           ;operationMode.c: 86: }
 13638  00E53C  D050               	goto	l153
 13639  00E53E                     l149:
 13640                           
 13641                           ;operationMode.c: 87: else if (sortedDrawerTable[i] == 13 || sortedDrawerTable[i] == 14 
      +                          || sortedDrawerTable[i] == 15 || sortedDrawerTable[i] == 16){
 13642  00E53E  90D8               	bcf	status,0,c
 13643  00E540  3437               	rlcf	sortDrawerList@i,w,c
 13644  00E542  6ED9               	movwf	fsr2l,c
 13645  00E544  3438               	rlcf	sortDrawerList@i+1,w,c
 13646  00E546  6EDA               	movwf	fsr2h,c
 13647  00E548  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13648  00E54A  26D9               	addwf	fsr2l,f,c
 13649  00E54C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13650  00E54E  22DA               	addwfc	fsr2h,f,c
 13651  00E550  0E0D               	movlw	13
 13652  00E552  18DE               	xorwf	postinc2,w,c
 13653  00E554  10DE               	iorwf	postinc2,w,c
 13654  00E556  B4D8               	btfsc	status,2,c
 13655  00E558  D02A               	goto	u8840
 13656  00E55A  90D8               	bcf	status,0,c
 13657  00E55C  3437               	rlcf	sortDrawerList@i,w,c
 13658  00E55E  6ED9               	movwf	fsr2l,c
 13659  00E560  3438               	rlcf	sortDrawerList@i+1,w,c
 13660  00E562  6EDA               	movwf	fsr2h,c
 13661  00E564  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13662  00E566  26D9               	addwf	fsr2l,f,c
 13663  00E568  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13664  00E56A  22DA               	addwfc	fsr2h,f,c
 13665  00E56C  0E0E               	movlw	14
 13666  00E56E  18DE               	xorwf	postinc2,w,c
 13667  00E570  10DE               	iorwf	postinc2,w,c
 13668  00E572  B4D8               	btfsc	status,2,c
 13669  00E574  D01C               	goto	u8840
 13670  00E576  90D8               	bcf	status,0,c
 13671  00E578  3437               	rlcf	sortDrawerList@i,w,c
 13672  00E57A  6ED9               	movwf	fsr2l,c
 13673  00E57C  3438               	rlcf	sortDrawerList@i+1,w,c
 13674  00E57E  6EDA               	movwf	fsr2h,c
 13675  00E580  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13676  00E582  26D9               	addwf	fsr2l,f,c
 13677  00E584  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13678  00E586  22DA               	addwfc	fsr2h,f,c
 13679  00E588  0E0F               	movlw	15
 13680  00E58A  18DE               	xorwf	postinc2,w,c
 13681  00E58C  10DE               	iorwf	postinc2,w,c
 13682  00E58E  B4D8               	btfsc	status,2,c
 13683  00E590  D00E               	goto	u8840
 13684  00E592  90D8               	bcf	status,0,c
 13685  00E594  3437               	rlcf	sortDrawerList@i,w,c
 13686  00E596  6ED9               	movwf	fsr2l,c
 13687  00E598  3438               	rlcf	sortDrawerList@i+1,w,c
 13688  00E59A  6EDA               	movwf	fsr2h,c
 13689  00E59C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13690  00E59E  26D9               	addwf	fsr2l,f,c
 13691  00E5A0  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13692  00E5A2  22DA               	addwfc	fsr2h,f,c
 13693  00E5A4  0E10               	movlw	16
 13694  00E5A6  18DE               	xorwf	postinc2,w,c
 13695  00E5A8  10DE               	iorwf	postinc2,w,c
 13696  00E5AA  A4D8               	btfss	status,2,c
 13697  00E5AC  D018               	goto	l153
 13698  00E5AE                     u8840:
 13699                           
 13700                           ;operationMode.c: 88: sublist4[count4]=sortedDrawerTable[i];
 13701  00E5AE  90D8               	bcf	status,0,c
 13702  00E5B0  3437               	rlcf	sortDrawerList@i,w,c
 13703  00E5B2  6ED9               	movwf	fsr2l,c
 13704  00E5B4  3438               	rlcf	sortDrawerList@i+1,w,c
 13705  00E5B6  6EDA               	movwf	fsr2h,c
 13706  00E5B8  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13707  00E5BA  26D9               	addwf	fsr2l,f,c
 13708  00E5BC  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13709  00E5BE  22DA               	addwfc	fsr2h,f,c
 13710  00E5C0  90D8               	bcf	status,0,c
 13711  00E5C2  342B               	rlcf	sortDrawerList@count4,w,c
 13712  00E5C4  6EE1               	movwf	fsr1l,c
 13713  00E5C6  342C               	rlcf	sortDrawerList@count4+1,w,c
 13714  00E5C8  6EE2               	movwf	fsr1h,c
 13715  00E5CA  0E13               	movlw	low sortDrawerList@sublist4
 13716  00E5CC  26E1               	addwf	fsr1l,f,c
 13717  00E5CE  0E00               	movlw	high sortDrawerList@sublist4
 13718  00E5D0  22E2               	addwfc	fsr1h,f,c
 13719  00E5D2  CFDE FFE6          	movff	postinc2,postinc1
 13720  00E5D6  CFDD FFE5          	movff	postdec2,postdec1
 13721                           
 13722                           ;operationMode.c: 89: count4 += 1;
 13723  00E5DA  4A2B               	infsnz	sortDrawerList@count4,f,c
 13724  00E5DC  2A2C               	incf	sortDrawerList@count4+1,f,c
 13725  00E5DE                     l153:
 13726  00E5DE  4A37               	infsnz	sortDrawerList@i,f,c
 13727  00E5E0  2A38               	incf	sortDrawerList@i+1,f,c
 13728  00E5E2  5038               	movf	sortDrawerList@i+1,w,c
 13729  00E5E4  E101               	bnz	l7432
 13730  00E5E6  D6B3               	goto	L126
 13731  00E5E8                     u8850:
 13732  00E5E8                     l7432:
 13733                           
 13734                           ;operationMode.c: 90: }
 13735                           ;operationMode.c: 91: }
 13736                           ;operationMode.c: 93: for (i=0; i<count1; i++){
 13737  00E5E8  0E00               	movlw	0
 13738  00E5EA  6E38               	movwf	sortDrawerList@i+1,c
 13739  00E5EC  0E00               	movlw	0
 13740  00E5EE  6E37               	movwf	sortDrawerList@i,c
 13741  00E5F0  D057               	goto	l156
 13742  00E5F2                     
 13743                           ;operationMode.c: 94: for (j=0; j<count1; j++){
 13744  00E5F2  0E00               	movlw	0
 13745  00E5F4  6E36               	movwf	sortDrawerList@j+1,c
 13746  00E5F6  0E00               	movlw	0
 13747  00E5F8  6E35               	movwf	sortDrawerList@j,c
 13748  00E5FA  D04A               	goto	l158
 13749  00E5FC                     
 13750                           ;operationMode.c: 95: if (sublist1[j] > sublist1[i]){
 13751  00E5FC  90D8               	bcf	status,0,c
 13752  00E5FE  3435               	rlcf	sortDrawerList@j,w,c
 13753  00E600  6ED9               	movwf	fsr2l,c
 13754  00E602  3436               	rlcf	sortDrawerList@j+1,w,c
 13755  00E604  6EDA               	movwf	fsr2h,c
 13756  00E606  0E0B               	movlw	low sortDrawerList@sublist1
 13757  00E608  26D9               	addwf	fsr2l,f,c
 13758  00E60A  0E00               	movlw	high sortDrawerList@sublist1
 13759  00E60C  22DA               	addwfc	fsr2h,f,c
 13760  00E60E  90D8               	bcf	status,0,c
 13761  00E610  3437               	rlcf	sortDrawerList@i,w,c
 13762  00E612  6EE1               	movwf	fsr1l,c
 13763  00E614  3438               	rlcf	sortDrawerList@i+1,w,c
 13764  00E616  6EE2               	movwf	fsr1h,c
 13765  00E618  0E0B               	movlw	low sortDrawerList@sublist1
 13766  00E61A  26E1               	addwf	fsr1l,f,c
 13767  00E61C  0E00               	movlw	high sortDrawerList@sublist1
 13768  00E61E  22E2               	addwfc	fsr1h,f,c
 13769  00E620  50DE               	movf	postinc2,w,c
 13770  00E622  5CE6               	subwf	postinc1,w,c
 13771  00E624  50DE               	movf	postinc2,w,c
 13772  00E626  58E6               	subwfb	postinc1,w,c
 13773  00E628  B0D8               	btfsc	status,0,c
 13774  00E62A  D030               	goto	l160
 13775                           
 13776                           ;operationMode.c: 96: temp = sublist1[i];
 13777  00E62C  90D8               	bcf	status,0,c
 13778  00E62E  3437               	rlcf	sortDrawerList@i,w,c
 13779  00E630  6ED9               	movwf	fsr2l,c
 13780  00E632  3438               	rlcf	sortDrawerList@i+1,w,c
 13781  00E634  6EDA               	movwf	fsr2h,c
 13782  00E636  0E0B               	movlw	low sortDrawerList@sublist1
 13783  00E638  26D9               	addwf	fsr2l,f,c
 13784  00E63A  0E00               	movlw	high sortDrawerList@sublist1
 13785  00E63C  22DA               	addwfc	fsr2h,f,c
 13786  00E63E  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 13787  00E642  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 13788                           
 13789                           ;operationMode.c: 97: sublist1[i] = sublist1[j];
 13790  00E646  90D8               	bcf	status,0,c
 13791  00E648  3435               	rlcf	sortDrawerList@j,w,c
 13792  00E64A  6ED9               	movwf	fsr2l,c
 13793  00E64C  3436               	rlcf	sortDrawerList@j+1,w,c
 13794  00E64E  6EDA               	movwf	fsr2h,c
 13795  00E650  0E0B               	movlw	low sortDrawerList@sublist1
 13796  00E652  26D9               	addwf	fsr2l,f,c
 13797  00E654  0E00               	movlw	high sortDrawerList@sublist1
 13798  00E656  22DA               	addwfc	fsr2h,f,c
 13799  00E658  90D8               	bcf	status,0,c
 13800  00E65A  3437               	rlcf	sortDrawerList@i,w,c
 13801  00E65C  6EE1               	movwf	fsr1l,c
 13802  00E65E  3438               	rlcf	sortDrawerList@i+1,w,c
 13803  00E660  6EE2               	movwf	fsr1h,c
 13804  00E662  0E0B               	movlw	low sortDrawerList@sublist1
 13805  00E664  26E1               	addwf	fsr1l,f,c
 13806  00E666  0E00               	movlw	high sortDrawerList@sublist1
 13807  00E668  22E2               	addwfc	fsr1h,f,c
 13808  00E66A  CFDE FFE6          	movff	postinc2,postinc1
 13809  00E66E  CFDD FFE5          	movff	postdec2,postdec1
 13810                           
 13811                           ;operationMode.c: 98: sublist1[j] = temp;
 13812  00E672  90D8               	bcf	status,0,c
 13813  00E674  3435               	rlcf	sortDrawerList@j,w,c
 13814  00E676  6ED9               	movwf	fsr2l,c
 13815  00E678  3436               	rlcf	sortDrawerList@j+1,w,c
 13816  00E67A  6EDA               	movwf	fsr2h,c
 13817  00E67C  0E0B               	movlw	low sortDrawerList@sublist1
 13818  00E67E  26D9               	addwf	fsr2l,f,c
 13819  00E680  0E00               	movlw	high sortDrawerList@sublist1
 13820  00E682  22DA               	addwfc	fsr2h,f,c
 13821  00E684  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 13822  00E688  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13823  00E68C                     l160:
 13824  00E68C  4A35               	infsnz	sortDrawerList@j,f,c
 13825  00E68E  2A36               	incf	sortDrawerList@j+1,f,c
 13826  00E690                     l158:
 13827  00E690  5031               	movf	sortDrawerList@count1,w,c
 13828  00E692  5C35               	subwf	sortDrawerList@j,w,c
 13829  00E694  5032               	movf	sortDrawerList@count1+1,w,c
 13830  00E696  5836               	subwfb	sortDrawerList@j+1,w,c
 13831  00E698  A0D8               	btfss	status,0,c
 13832  00E69A  D7B0               	goto	l159
 13833  00E69C  4A37               	infsnz	sortDrawerList@i,f,c
 13834  00E69E  2A38               	incf	sortDrawerList@i+1,f,c
 13835  00E6A0                     l156:
 13836  00E6A0  5031               	movf	sortDrawerList@count1,w,c
 13837  00E6A2  5C37               	subwf	sortDrawerList@i,w,c
 13838  00E6A4  5032               	movf	sortDrawerList@count1+1,w,c
 13839  00E6A6  5838               	subwfb	sortDrawerList@i+1,w,c
 13840  00E6A8  A0D8               	btfss	status,0,c
 13841  00E6AA  D7A3               	goto	l157
 13842                           
 13843                           ;operationMode.c: 99: }
 13844                           ;operationMode.c: 100: }
 13845                           ;operationMode.c: 101: }
 13846                           ;operationMode.c: 103: for (i=0; i<count3; i++){
 13847  00E6AC  0E00               	movlw	0
 13848  00E6AE  6E38               	movwf	sortDrawerList@i+1,c
 13849  00E6B0  0E00               	movlw	0
 13850  00E6B2  6E37               	movwf	sortDrawerList@i,c
 13851  00E6B4  D057               	goto	l163
 13852  00E6B6                     
 13853                           ;operationMode.c: 104: for (j=0; j<count3; j++){
 13854  00E6B6  0E00               	movlw	0
 13855  00E6B8  6E36               	movwf	sortDrawerList@j+1,c
 13856  00E6BA  0E00               	movlw	0
 13857  00E6BC  6E35               	movwf	sortDrawerList@j,c
 13858  00E6BE  D04A               	goto	l165
 13859  00E6C0                     
 13860                           ;operationMode.c: 105: if (sublist3[j] > sublist3[i]){
 13861  00E6C0  90D8               	bcf	status,0,c
 13862  00E6C2  3435               	rlcf	sortDrawerList@j,w,c
 13863  00E6C4  6ED9               	movwf	fsr2l,c
 13864  00E6C6  3436               	rlcf	sortDrawerList@j+1,w,c
 13865  00E6C8  6EDA               	movwf	fsr2h,c
 13866  00E6CA  0E23               	movlw	low sortDrawerList@sublist3
 13867  00E6CC  26D9               	addwf	fsr2l,f,c
 13868  00E6CE  0E00               	movlw	high sortDrawerList@sublist3
 13869  00E6D0  22DA               	addwfc	fsr2h,f,c
 13870  00E6D2  90D8               	bcf	status,0,c
 13871  00E6D4  3437               	rlcf	sortDrawerList@i,w,c
 13872  00E6D6  6EE1               	movwf	fsr1l,c
 13873  00E6D8  3438               	rlcf	sortDrawerList@i+1,w,c
 13874  00E6DA  6EE2               	movwf	fsr1h,c
 13875  00E6DC  0E23               	movlw	low sortDrawerList@sublist3
 13876  00E6DE  26E1               	addwf	fsr1l,f,c
 13877  00E6E0  0E00               	movlw	high sortDrawerList@sublist3
 13878  00E6E2  22E2               	addwfc	fsr1h,f,c
 13879  00E6E4  50DE               	movf	postinc2,w,c
 13880  00E6E6  5CE6               	subwf	postinc1,w,c
 13881  00E6E8  50DE               	movf	postinc2,w,c
 13882  00E6EA  58E6               	subwfb	postinc1,w,c
 13883  00E6EC  B0D8               	btfsc	status,0,c
 13884  00E6EE  D030               	goto	l167
 13885                           
 13886                           ;operationMode.c: 106: temp = sublist3[i];
 13887  00E6F0  90D8               	bcf	status,0,c
 13888  00E6F2  3437               	rlcf	sortDrawerList@i,w,c
 13889  00E6F4  6ED9               	movwf	fsr2l,c
 13890  00E6F6  3438               	rlcf	sortDrawerList@i+1,w,c
 13891  00E6F8  6EDA               	movwf	fsr2h,c
 13892  00E6FA  0E23               	movlw	low sortDrawerList@sublist3
 13893  00E6FC  26D9               	addwf	fsr2l,f,c
 13894  00E6FE  0E00               	movlw	high sortDrawerList@sublist3
 13895  00E700  22DA               	addwfc	fsr2h,f,c
 13896  00E702  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 13897  00E706  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 13898                           
 13899                           ;operationMode.c: 107: sublist3[i] = sublist3[j];
 13900  00E70A  90D8               	bcf	status,0,c
 13901  00E70C  3435               	rlcf	sortDrawerList@j,w,c
 13902  00E70E  6ED9               	movwf	fsr2l,c
 13903  00E710  3436               	rlcf	sortDrawerList@j+1,w,c
 13904  00E712  6EDA               	movwf	fsr2h,c
 13905  00E714  0E23               	movlw	low sortDrawerList@sublist3
 13906  00E716  26D9               	addwf	fsr2l,f,c
 13907  00E718  0E00               	movlw	high sortDrawerList@sublist3
 13908  00E71A  22DA               	addwfc	fsr2h,f,c
 13909  00E71C  90D8               	bcf	status,0,c
 13910  00E71E  3437               	rlcf	sortDrawerList@i,w,c
 13911  00E720  6EE1               	movwf	fsr1l,c
 13912  00E722  3438               	rlcf	sortDrawerList@i+1,w,c
 13913  00E724  6EE2               	movwf	fsr1h,c
 13914  00E726  0E23               	movlw	low sortDrawerList@sublist3
 13915  00E728  26E1               	addwf	fsr1l,f,c
 13916  00E72A  0E00               	movlw	high sortDrawerList@sublist3
 13917  00E72C  22E2               	addwfc	fsr1h,f,c
 13918  00E72E  CFDE FFE6          	movff	postinc2,postinc1
 13919  00E732  CFDD FFE5          	movff	postdec2,postdec1
 13920                           
 13921                           ;operationMode.c: 108: sublist3[j] = temp;
 13922  00E736  90D8               	bcf	status,0,c
 13923  00E738  3435               	rlcf	sortDrawerList@j,w,c
 13924  00E73A  6ED9               	movwf	fsr2l,c
 13925  00E73C  3436               	rlcf	sortDrawerList@j+1,w,c
 13926  00E73E  6EDA               	movwf	fsr2h,c
 13927  00E740  0E23               	movlw	low sortDrawerList@sublist3
 13928  00E742  26D9               	addwf	fsr2l,f,c
 13929  00E744  0E00               	movlw	high sortDrawerList@sublist3
 13930  00E746  22DA               	addwfc	fsr2h,f,c
 13931  00E748  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 13932  00E74C  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13933  00E750                     l167:
 13934  00E750  4A35               	infsnz	sortDrawerList@j,f,c
 13935  00E752  2A36               	incf	sortDrawerList@j+1,f,c
 13936  00E754                     l165:
 13937  00E754  5033               	movf	sortDrawerList@count3,w,c
 13938  00E756  5C35               	subwf	sortDrawerList@j,w,c
 13939  00E758  5034               	movf	sortDrawerList@count3+1,w,c
 13940  00E75A  5836               	subwfb	sortDrawerList@j+1,w,c
 13941  00E75C  A0D8               	btfss	status,0,c
 13942  00E75E  D7B0               	goto	l166
 13943  00E760  4A37               	infsnz	sortDrawerList@i,f,c
 13944  00E762  2A38               	incf	sortDrawerList@i+1,f,c
 13945  00E764                     l163:
 13946  00E764  5033               	movf	sortDrawerList@count3,w,c
 13947  00E766  5C37               	subwf	sortDrawerList@i,w,c
 13948  00E768  5034               	movf	sortDrawerList@count3+1,w,c
 13949  00E76A  5838               	subwfb	sortDrawerList@i+1,w,c
 13950  00E76C  A0D8               	btfss	status,0,c
 13951  00E76E  D7A3               	goto	l164
 13952                           
 13953                           ;operationMode.c: 109: }
 13954                           ;operationMode.c: 110: }
 13955                           ;operationMode.c: 111: }
 13956                           ;operationMode.c: 113: for (i=0; i<count2; i++){
 13957  00E770  0E00               	movlw	0
 13958  00E772  6E38               	movwf	sortDrawerList@i+1,c
 13959  00E774  0E00               	movlw	0
 13960  00E776  6E37               	movwf	sortDrawerList@i,c
 13961  00E778  D057               	goto	l170
 13962  00E77A                     
 13963                           ;operationMode.c: 114: for (j=0; j<count2; j++){
 13964  00E77A  0E00               	movlw	0
 13965  00E77C  6E36               	movwf	sortDrawerList@j+1,c
 13966  00E77E  0E00               	movlw	0
 13967  00E780  6E35               	movwf	sortDrawerList@j,c
 13968  00E782  D04A               	goto	l172
 13969  00E784                     
 13970                           ;operationMode.c: 115: if (sublist2[j] < sublist2[i]){
 13971  00E784  90D8               	bcf	status,0,c
 13972  00E786  3437               	rlcf	sortDrawerList@i,w,c
 13973  00E788  6ED9               	movwf	fsr2l,c
 13974  00E78A  3438               	rlcf	sortDrawerList@i+1,w,c
 13975  00E78C  6EDA               	movwf	fsr2h,c
 13976  00E78E  0E1B               	movlw	low sortDrawerList@sublist2
 13977  00E790  26D9               	addwf	fsr2l,f,c
 13978  00E792  0E00               	movlw	high sortDrawerList@sublist2
 13979  00E794  22DA               	addwfc	fsr2h,f,c
 13980  00E796  90D8               	bcf	status,0,c
 13981  00E798  3435               	rlcf	sortDrawerList@j,w,c
 13982  00E79A  6EE1               	movwf	fsr1l,c
 13983  00E79C  3436               	rlcf	sortDrawerList@j+1,w,c
 13984  00E79E  6EE2               	movwf	fsr1h,c
 13985  00E7A0  0E1B               	movlw	low sortDrawerList@sublist2
 13986  00E7A2  26E1               	addwf	fsr1l,f,c
 13987  00E7A4  0E00               	movlw	high sortDrawerList@sublist2
 13988  00E7A6  22E2               	addwfc	fsr1h,f,c
 13989  00E7A8  50DE               	movf	postinc2,w,c
 13990  00E7AA  5CE6               	subwf	postinc1,w,c
 13991  00E7AC  50DE               	movf	postinc2,w,c
 13992  00E7AE  58E6               	subwfb	postinc1,w,c
 13993  00E7B0  B0D8               	btfsc	status,0,c
 13994  00E7B2  D030               	goto	l174
 13995                           
 13996                           ;operationMode.c: 116: temp = sublist2[i];
 13997  00E7B4  90D8               	bcf	status,0,c
 13998  00E7B6  3437               	rlcf	sortDrawerList@i,w,c
 13999  00E7B8  6ED9               	movwf	fsr2l,c
 14000  00E7BA  3438               	rlcf	sortDrawerList@i+1,w,c
 14001  00E7BC  6EDA               	movwf	fsr2h,c
 14002  00E7BE  0E1B               	movlw	low sortDrawerList@sublist2
 14003  00E7C0  26D9               	addwf	fsr2l,f,c
 14004  00E7C2  0E00               	movlw	high sortDrawerList@sublist2
 14005  00E7C4  22DA               	addwfc	fsr2h,f,c
 14006  00E7C6  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14007  00E7CA  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14008                           
 14009                           ;operationMode.c: 117: sublist2[i] = sublist2[j];
 14010  00E7CE  90D8               	bcf	status,0,c
 14011  00E7D0  3435               	rlcf	sortDrawerList@j,w,c
 14012  00E7D2  6ED9               	movwf	fsr2l,c
 14013  00E7D4  3436               	rlcf	sortDrawerList@j+1,w,c
 14014  00E7D6  6EDA               	movwf	fsr2h,c
 14015  00E7D8  0E1B               	movlw	low sortDrawerList@sublist2
 14016  00E7DA  26D9               	addwf	fsr2l,f,c
 14017  00E7DC  0E00               	movlw	high sortDrawerList@sublist2
 14018  00E7DE  22DA               	addwfc	fsr2h,f,c
 14019  00E7E0  90D8               	bcf	status,0,c
 14020  00E7E2  3437               	rlcf	sortDrawerList@i,w,c
 14021  00E7E4  6EE1               	movwf	fsr1l,c
 14022  00E7E6  3438               	rlcf	sortDrawerList@i+1,w,c
 14023  00E7E8  6EE2               	movwf	fsr1h,c
 14024  00E7EA  0E1B               	movlw	low sortDrawerList@sublist2
 14025  00E7EC  26E1               	addwf	fsr1l,f,c
 14026  00E7EE  0E00               	movlw	high sortDrawerList@sublist2
 14027  00E7F0  22E2               	addwfc	fsr1h,f,c
 14028  00E7F2  CFDE FFE6          	movff	postinc2,postinc1
 14029  00E7F6  CFDD FFE5          	movff	postdec2,postdec1
 14030                           
 14031                           ;operationMode.c: 118: sublist2[j] = temp;
 14032  00E7FA  90D8               	bcf	status,0,c
 14033  00E7FC  3435               	rlcf	sortDrawerList@j,w,c
 14034  00E7FE  6ED9               	movwf	fsr2l,c
 14035  00E800  3436               	rlcf	sortDrawerList@j+1,w,c
 14036  00E802  6EDA               	movwf	fsr2h,c
 14037  00E804  0E1B               	movlw	low sortDrawerList@sublist2
 14038  00E806  26D9               	addwf	fsr2l,f,c
 14039  00E808  0E00               	movlw	high sortDrawerList@sublist2
 14040  00E80A  22DA               	addwfc	fsr2h,f,c
 14041  00E80C  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14042  00E810  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14043  00E814                     l174:
 14044  00E814  4A35               	infsnz	sortDrawerList@j,f,c
 14045  00E816  2A36               	incf	sortDrawerList@j+1,f,c
 14046  00E818                     l172:
 14047  00E818  502D               	movf	sortDrawerList@count2,w,c
 14048  00E81A  5C35               	subwf	sortDrawerList@j,w,c
 14049  00E81C  502E               	movf	sortDrawerList@count2+1,w,c
 14050  00E81E  5836               	subwfb	sortDrawerList@j+1,w,c
 14051  00E820  A0D8               	btfss	status,0,c
 14052  00E822  D7B0               	goto	l173
 14053  00E824  4A37               	infsnz	sortDrawerList@i,f,c
 14054  00E826  2A38               	incf	sortDrawerList@i+1,f,c
 14055  00E828                     l170:
 14056  00E828  502D               	movf	sortDrawerList@count2,w,c
 14057  00E82A  5C37               	subwf	sortDrawerList@i,w,c
 14058  00E82C  502E               	movf	sortDrawerList@count2+1,w,c
 14059  00E82E  5838               	subwfb	sortDrawerList@i+1,w,c
 14060  00E830  A0D8               	btfss	status,0,c
 14061  00E832  D7A3               	goto	l171
 14062                           
 14063                           ;operationMode.c: 119: }
 14064                           ;operationMode.c: 120: }
 14065                           ;operationMode.c: 121: }
 14066                           ;operationMode.c: 123: for (i=0; i<count4; i++){
 14067  00E834  0E00               	movlw	0
 14068  00E836  6E38               	movwf	sortDrawerList@i+1,c
 14069  00E838  0E00               	movlw	0
 14070  00E83A  6E37               	movwf	sortDrawerList@i,c
 14071  00E83C  D057               	goto	l177
 14072  00E83E                     
 14073                           ;operationMode.c: 124: for (j=0; j<count4; j++){
 14074  00E83E  0E00               	movlw	0
 14075  00E840  6E36               	movwf	sortDrawerList@j+1,c
 14076  00E842  0E00               	movlw	0
 14077  00E844  6E35               	movwf	sortDrawerList@j,c
 14078  00E846  D04A               	goto	l179
 14079  00E848                     
 14080                           ;operationMode.c: 125: if (sublist4[j] < sublist4[i]){
 14081  00E848  90D8               	bcf	status,0,c
 14082  00E84A  3437               	rlcf	sortDrawerList@i,w,c
 14083  00E84C  6ED9               	movwf	fsr2l,c
 14084  00E84E  3438               	rlcf	sortDrawerList@i+1,w,c
 14085  00E850  6EDA               	movwf	fsr2h,c
 14086  00E852  0E13               	movlw	low sortDrawerList@sublist4
 14087  00E854  26D9               	addwf	fsr2l,f,c
 14088  00E856  0E00               	movlw	high sortDrawerList@sublist4
 14089  00E858  22DA               	addwfc	fsr2h,f,c
 14090  00E85A  90D8               	bcf	status,0,c
 14091  00E85C  3435               	rlcf	sortDrawerList@j,w,c
 14092  00E85E  6EE1               	movwf	fsr1l,c
 14093  00E860  3436               	rlcf	sortDrawerList@j+1,w,c
 14094  00E862  6EE2               	movwf	fsr1h,c
 14095  00E864  0E13               	movlw	low sortDrawerList@sublist4
 14096  00E866  26E1               	addwf	fsr1l,f,c
 14097  00E868  0E00               	movlw	high sortDrawerList@sublist4
 14098  00E86A  22E2               	addwfc	fsr1h,f,c
 14099  00E86C  50DE               	movf	postinc2,w,c
 14100  00E86E  5CE6               	subwf	postinc1,w,c
 14101  00E870  50DE               	movf	postinc2,w,c
 14102  00E872  58E6               	subwfb	postinc1,w,c
 14103  00E874  B0D8               	btfsc	status,0,c
 14104  00E876  D030               	goto	l181
 14105                           
 14106                           ;operationMode.c: 126: temp = sublist4[i];
 14107  00E878  90D8               	bcf	status,0,c
 14108  00E87A  3437               	rlcf	sortDrawerList@i,w,c
 14109  00E87C  6ED9               	movwf	fsr2l,c
 14110  00E87E  3438               	rlcf	sortDrawerList@i+1,w,c
 14111  00E880  6EDA               	movwf	fsr2h,c
 14112  00E882  0E13               	movlw	low sortDrawerList@sublist4
 14113  00E884  26D9               	addwf	fsr2l,f,c
 14114  00E886  0E00               	movlw	high sortDrawerList@sublist4
 14115  00E888  22DA               	addwfc	fsr2h,f,c
 14116  00E88A  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14117  00E88E  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14118                           
 14119                           ;operationMode.c: 127: sublist4[i] = sublist4[j];
 14120  00E892  90D8               	bcf	status,0,c
 14121  00E894  3435               	rlcf	sortDrawerList@j,w,c
 14122  00E896  6ED9               	movwf	fsr2l,c
 14123  00E898  3436               	rlcf	sortDrawerList@j+1,w,c
 14124  00E89A  6EDA               	movwf	fsr2h,c
 14125  00E89C  0E13               	movlw	low sortDrawerList@sublist4
 14126  00E89E  26D9               	addwf	fsr2l,f,c
 14127  00E8A0  0E00               	movlw	high sortDrawerList@sublist4
 14128  00E8A2  22DA               	addwfc	fsr2h,f,c
 14129  00E8A4  90D8               	bcf	status,0,c
 14130  00E8A6  3437               	rlcf	sortDrawerList@i,w,c
 14131  00E8A8  6EE1               	movwf	fsr1l,c
 14132  00E8AA  3438               	rlcf	sortDrawerList@i+1,w,c
 14133  00E8AC  6EE2               	movwf	fsr1h,c
 14134  00E8AE  0E13               	movlw	low sortDrawerList@sublist4
 14135  00E8B0  26E1               	addwf	fsr1l,f,c
 14136  00E8B2  0E00               	movlw	high sortDrawerList@sublist4
 14137  00E8B4  22E2               	addwfc	fsr1h,f,c
 14138  00E8B6  CFDE FFE6          	movff	postinc2,postinc1
 14139  00E8BA  CFDD FFE5          	movff	postdec2,postdec1
 14140                           
 14141                           ;operationMode.c: 128: sublist4[j] = temp;
 14142  00E8BE  90D8               	bcf	status,0,c
 14143  00E8C0  3435               	rlcf	sortDrawerList@j,w,c
 14144  00E8C2  6ED9               	movwf	fsr2l,c
 14145  00E8C4  3436               	rlcf	sortDrawerList@j+1,w,c
 14146  00E8C6  6EDA               	movwf	fsr2h,c
 14147  00E8C8  0E13               	movlw	low sortDrawerList@sublist4
 14148  00E8CA  26D9               	addwf	fsr2l,f,c
 14149  00E8CC  0E00               	movlw	high sortDrawerList@sublist4
 14150  00E8CE  22DA               	addwfc	fsr2h,f,c
 14151  00E8D0  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14152  00E8D4  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14153  00E8D8                     l181:
 14154  00E8D8  4A35               	infsnz	sortDrawerList@j,f,c
 14155  00E8DA  2A36               	incf	sortDrawerList@j+1,f,c
 14156  00E8DC                     l179:
 14157  00E8DC  502B               	movf	sortDrawerList@count4,w,c
 14158  00E8DE  5C35               	subwf	sortDrawerList@j,w,c
 14159  00E8E0  502C               	movf	sortDrawerList@count4+1,w,c
 14160  00E8E2  5836               	subwfb	sortDrawerList@j+1,w,c
 14161  00E8E4  A0D8               	btfss	status,0,c
 14162  00E8E6  D7B0               	goto	l180
 14163  00E8E8  4A37               	infsnz	sortDrawerList@i,f,c
 14164  00E8EA  2A38               	incf	sortDrawerList@i+1,f,c
 14165  00E8EC                     l177:
 14166  00E8EC  502B               	movf	sortDrawerList@count4,w,c
 14167  00E8EE  5C37               	subwf	sortDrawerList@i,w,c
 14168  00E8F0  502C               	movf	sortDrawerList@count4+1,w,c
 14169  00E8F2  5838               	subwfb	sortDrawerList@i+1,w,c
 14170  00E8F4  A0D8               	btfss	status,0,c
 14171  00E8F6  D7A3               	goto	l178
 14172                           
 14173                           ;operationMode.c: 129: }
 14174                           ;operationMode.c: 130: }
 14175                           ;operationMode.c: 131: }
 14176                           ;operationMode.c: 133: if (sublist3[count3 - 1] == 10 || sublist3[count3 - 1] == 9){
 14177  00E8F8  0EFE               	movlw	254
 14178  00E8FA  6E05               	movwf	??_sortDrawerList& (0+255),c
 14179  00E8FC  0EFF               	movlw	255
 14180  00E8FE  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14181  00E900  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 14182  00E904  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 14183  00E908  90D8               	bcf	status,0,c
 14184  00E90A  3607               	rlcf	??_sortDrawerList+2,f,c
 14185  00E90C  3608               	rlcf	??_sortDrawerList+3,f,c
 14186  00E90E  5005               	movf	??_sortDrawerList,w,c
 14187  00E910  2607               	addwf	??_sortDrawerList+2,f,c
 14188  00E912  5006               	movf	??_sortDrawerList+1,w,c
 14189  00E914  2208               	addwfc	??_sortDrawerList+3,f,c
 14190  00E916  0E23               	movlw	low sortDrawerList@sublist3
 14191  00E918  2407               	addwf	??_sortDrawerList+2,w,c
 14192  00E91A  6ED9               	movwf	fsr2l,c
 14193  00E91C  0E00               	movlw	high sortDrawerList@sublist3
 14194  00E91E  2008               	addwfc	??_sortDrawerList+3,w,c
 14195  00E920  6EDA               	movwf	fsr2h,c
 14196  00E922  0E0A               	movlw	10
 14197  00E924  18DE               	xorwf	postinc2,w,c
 14198  00E926  10DE               	iorwf	postinc2,w,c
 14199  00E928  B4D8               	btfsc	status,2,c
 14200  00E92A  D01A               	goto	u8990
 14201  00E92C  0EFE               	movlw	254
 14202  00E92E  6E05               	movwf	??_sortDrawerList& (0+255),c
 14203  00E930  0EFF               	movlw	255
 14204  00E932  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14205  00E934  C033  F007         	movff	sortDrawerList@count3,??_sortDrawerList+2
 14206  00E938  C034  F008         	movff	sortDrawerList@count3+1,??_sortDrawerList+3
 14207  00E93C  90D8               	bcf	status,0,c
 14208  00E93E  3607               	rlcf	??_sortDrawerList+2,f,c
 14209  00E940  3608               	rlcf	??_sortDrawerList+3,f,c
 14210  00E942  5005               	movf	??_sortDrawerList,w,c
 14211  00E944  2607               	addwf	??_sortDrawerList+2,f,c
 14212  00E946  5006               	movf	??_sortDrawerList+1,w,c
 14213  00E948  2208               	addwfc	??_sortDrawerList+3,f,c
 14214  00E94A  0E23               	movlw	low sortDrawerList@sublist3
 14215  00E94C  2407               	addwf	??_sortDrawerList+2,w,c
 14216  00E94E  6ED9               	movwf	fsr2l,c
 14217  00E950  0E00               	movlw	high sortDrawerList@sublist3
 14218  00E952  2008               	addwfc	??_sortDrawerList+3,w,c
 14219  00E954  6EDA               	movwf	fsr2h,c
 14220  00E956  0E09               	movlw	9
 14221  00E958  18DE               	xorwf	postinc2,w,c
 14222  00E95A  10DE               	iorwf	postinc2,w,c
 14223  00E95C  A4D8               	btfss	status,2,c
 14224  00E95E  D062               	goto	u9020
 14225  00E960                     u8990:
 14226                           
 14227                           ;operationMode.c: 134: for (i=0; i<count4; i++){
 14228  00E960  0E00               	movlw	0
 14229  00E962  6E38               	movwf	sortDrawerList@i+1,c
 14230  00E964  0E00               	movlw	0
 14231  00E966  6E37               	movwf	sortDrawerList@i,c
 14232  00E968  D057               	goto	l187
 14233  00E96A                     
 14234                           ;operationMode.c: 135: for (j=0; j<count4; j++){
 14235  00E96A  0E00               	movlw	0
 14236  00E96C  6E36               	movwf	sortDrawerList@j+1,c
 14237  00E96E  0E00               	movlw	0
 14238  00E970  6E35               	movwf	sortDrawerList@j,c
 14239  00E972  D04A               	goto	l189
 14240  00E974                     
 14241                           ;operationMode.c: 136: if (sublist4[j] > sublist4[i]){
 14242  00E974  90D8               	bcf	status,0,c
 14243  00E976  3435               	rlcf	sortDrawerList@j,w,c
 14244  00E978  6ED9               	movwf	fsr2l,c
 14245  00E97A  3436               	rlcf	sortDrawerList@j+1,w,c
 14246  00E97C  6EDA               	movwf	fsr2h,c
 14247  00E97E  0E13               	movlw	low sortDrawerList@sublist4
 14248  00E980  26D9               	addwf	fsr2l,f,c
 14249  00E982  0E00               	movlw	high sortDrawerList@sublist4
 14250  00E984  22DA               	addwfc	fsr2h,f,c
 14251  00E986  90D8               	bcf	status,0,c
 14252  00E988  3437               	rlcf	sortDrawerList@i,w,c
 14253  00E98A  6EE1               	movwf	fsr1l,c
 14254  00E98C  3438               	rlcf	sortDrawerList@i+1,w,c
 14255  00E98E  6EE2               	movwf	fsr1h,c
 14256  00E990  0E13               	movlw	low sortDrawerList@sublist4
 14257  00E992  26E1               	addwf	fsr1l,f,c
 14258  00E994  0E00               	movlw	high sortDrawerList@sublist4
 14259  00E996  22E2               	addwfc	fsr1h,f,c
 14260  00E998  50DE               	movf	postinc2,w,c
 14261  00E99A  5CE6               	subwf	postinc1,w,c
 14262  00E99C  50DE               	movf	postinc2,w,c
 14263  00E99E  58E6               	subwfb	postinc1,w,c
 14264  00E9A0  B0D8               	btfsc	status,0,c
 14265  00E9A2  D030               	goto	l191
 14266                           
 14267                           ;operationMode.c: 137: temp = sublist4[i];
 14268  00E9A4  90D8               	bcf	status,0,c
 14269  00E9A6  3437               	rlcf	sortDrawerList@i,w,c
 14270  00E9A8  6ED9               	movwf	fsr2l,c
 14271  00E9AA  3438               	rlcf	sortDrawerList@i+1,w,c
 14272  00E9AC  6EDA               	movwf	fsr2h,c
 14273  00E9AE  0E13               	movlw	low sortDrawerList@sublist4
 14274  00E9B0  26D9               	addwf	fsr2l,f,c
 14275  00E9B2  0E00               	movlw	high sortDrawerList@sublist4
 14276  00E9B4  22DA               	addwfc	fsr2h,f,c
 14277  00E9B6  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14278  00E9BA  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14279                           
 14280                           ;operationMode.c: 138: sublist4[i] = sublist4[j];
 14281  00E9BE  90D8               	bcf	status,0,c
 14282  00E9C0  3435               	rlcf	sortDrawerList@j,w,c
 14283  00E9C2  6ED9               	movwf	fsr2l,c
 14284  00E9C4  3436               	rlcf	sortDrawerList@j+1,w,c
 14285  00E9C6  6EDA               	movwf	fsr2h,c
 14286  00E9C8  0E13               	movlw	low sortDrawerList@sublist4
 14287  00E9CA  26D9               	addwf	fsr2l,f,c
 14288  00E9CC  0E00               	movlw	high sortDrawerList@sublist4
 14289  00E9CE  22DA               	addwfc	fsr2h,f,c
 14290  00E9D0  90D8               	bcf	status,0,c
 14291  00E9D2  3437               	rlcf	sortDrawerList@i,w,c
 14292  00E9D4  6EE1               	movwf	fsr1l,c
 14293  00E9D6  3438               	rlcf	sortDrawerList@i+1,w,c
 14294  00E9D8  6EE2               	movwf	fsr1h,c
 14295  00E9DA  0E13               	movlw	low sortDrawerList@sublist4
 14296  00E9DC  26E1               	addwf	fsr1l,f,c
 14297  00E9DE  0E00               	movlw	high sortDrawerList@sublist4
 14298  00E9E0  22E2               	addwfc	fsr1h,f,c
 14299  00E9E2  CFDE FFE6          	movff	postinc2,postinc1
 14300  00E9E6  CFDD FFE5          	movff	postdec2,postdec1
 14301                           
 14302                           ;operationMode.c: 139: sublist4[j] = temp;
 14303  00E9EA  90D8               	bcf	status,0,c
 14304  00E9EC  3435               	rlcf	sortDrawerList@j,w,c
 14305  00E9EE  6ED9               	movwf	fsr2l,c
 14306  00E9F0  3436               	rlcf	sortDrawerList@j+1,w,c
 14307  00E9F2  6EDA               	movwf	fsr2h,c
 14308  00E9F4  0E13               	movlw	low sortDrawerList@sublist4
 14309  00E9F6  26D9               	addwf	fsr2l,f,c
 14310  00E9F8  0E00               	movlw	high sortDrawerList@sublist4
 14311  00E9FA  22DA               	addwfc	fsr2h,f,c
 14312  00E9FC  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14313  00EA00  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14314  00EA04                     l191:
 14315  00EA04  4A35               	infsnz	sortDrawerList@j,f,c
 14316  00EA06  2A36               	incf	sortDrawerList@j+1,f,c
 14317  00EA08                     l189:
 14318  00EA08  502B               	movf	sortDrawerList@count4,w,c
 14319  00EA0A  5C35               	subwf	sortDrawerList@j,w,c
 14320  00EA0C  502C               	movf	sortDrawerList@count4+1,w,c
 14321  00EA0E  5836               	subwfb	sortDrawerList@j+1,w,c
 14322  00EA10  A0D8               	btfss	status,0,c
 14323  00EA12  D7B0               	goto	l190
 14324  00EA14  4A37               	infsnz	sortDrawerList@i,f,c
 14325  00EA16  2A38               	incf	sortDrawerList@i+1,f,c
 14326  00EA18                     l187:
 14327  00EA18  502B               	movf	sortDrawerList@count4,w,c
 14328  00EA1A  5C37               	subwf	sortDrawerList@i,w,c
 14329  00EA1C  502C               	movf	sortDrawerList@count4+1,w,c
 14330  00EA1E  5838               	subwfb	sortDrawerList@i+1,w,c
 14331  00EA20  A0D8               	btfss	status,0,c
 14332  00EA22  D7A3               	goto	l188
 14333  00EA24                     u9020:
 14334                           
 14335                           ;operationMode.c: 140: }
 14336                           ;operationMode.c: 141: }
 14337                           ;operationMode.c: 142: }
 14338                           ;operationMode.c: 143: }
 14339                           ;operationMode.c: 145: if (sublist2[0] == 7 || sublist2[0] == 8){
 14340  00EA24  0E07               	movlw	7
 14341  00EA26  181B               	xorwf	sortDrawerList@sublist2,w,c
 14342  00EA28  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 14343  00EA2A  B4D8               	btfsc	status,2,c
 14344  00EA2C  D005               	goto	u9040
 14345  00EA2E  0E08               	movlw	8
 14346  00EA30  181B               	xorwf	sortDrawerList@sublist2,w,c
 14347  00EA32  101C               	iorwf	sortDrawerList@sublist2+1,w,c
 14348  00EA34  A4D8               	btfss	status,2,c
 14349  00EA36  D062               	goto	u9070
 14350  00EA38                     u9040:
 14351                           
 14352                           ;operationMode.c: 146: for (i=0; i<count3; i++){
 14353  00EA38  0E00               	movlw	0
 14354  00EA3A  6E38               	movwf	sortDrawerList@i+1,c
 14355  00EA3C  0E00               	movlw	0
 14356  00EA3E  6E37               	movwf	sortDrawerList@i,c
 14357  00EA40  D057               	goto	l197
 14358  00EA42                     
 14359                           ;operationMode.c: 147: for (j=0; j<count3; j++){
 14360  00EA42  0E00               	movlw	0
 14361  00EA44  6E36               	movwf	sortDrawerList@j+1,c
 14362  00EA46  0E00               	movlw	0
 14363  00EA48  6E35               	movwf	sortDrawerList@j,c
 14364  00EA4A  D04A               	goto	l199
 14365  00EA4C                     
 14366                           ;operationMode.c: 148: if (sublist3[j] < sublist3[i]){
 14367  00EA4C  90D8               	bcf	status,0,c
 14368  00EA4E  3437               	rlcf	sortDrawerList@i,w,c
 14369  00EA50  6ED9               	movwf	fsr2l,c
 14370  00EA52  3438               	rlcf	sortDrawerList@i+1,w,c
 14371  00EA54  6EDA               	movwf	fsr2h,c
 14372  00EA56  0E23               	movlw	low sortDrawerList@sublist3
 14373  00EA58  26D9               	addwf	fsr2l,f,c
 14374  00EA5A  0E00               	movlw	high sortDrawerList@sublist3
 14375  00EA5C  22DA               	addwfc	fsr2h,f,c
 14376  00EA5E  90D8               	bcf	status,0,c
 14377  00EA60  3435               	rlcf	sortDrawerList@j,w,c
 14378  00EA62  6EE1               	movwf	fsr1l,c
 14379  00EA64  3436               	rlcf	sortDrawerList@j+1,w,c
 14380  00EA66  6EE2               	movwf	fsr1h,c
 14381  00EA68  0E23               	movlw	low sortDrawerList@sublist3
 14382  00EA6A  26E1               	addwf	fsr1l,f,c
 14383  00EA6C  0E00               	movlw	high sortDrawerList@sublist3
 14384  00EA6E  22E2               	addwfc	fsr1h,f,c
 14385  00EA70  50DE               	movf	postinc2,w,c
 14386  00EA72  5CE6               	subwf	postinc1,w,c
 14387  00EA74  50DE               	movf	postinc2,w,c
 14388  00EA76  58E6               	subwfb	postinc1,w,c
 14389  00EA78  B0D8               	btfsc	status,0,c
 14390  00EA7A  D030               	goto	l201
 14391                           
 14392                           ;operationMode.c: 149: temp = sublist3[i];
 14393  00EA7C  90D8               	bcf	status,0,c
 14394  00EA7E  3437               	rlcf	sortDrawerList@i,w,c
 14395  00EA80  6ED9               	movwf	fsr2l,c
 14396  00EA82  3438               	rlcf	sortDrawerList@i+1,w,c
 14397  00EA84  6EDA               	movwf	fsr2h,c
 14398  00EA86  0E23               	movlw	low sortDrawerList@sublist3
 14399  00EA88  26D9               	addwf	fsr2l,f,c
 14400  00EA8A  0E00               	movlw	high sortDrawerList@sublist3
 14401  00EA8C  22DA               	addwfc	fsr2h,f,c
 14402  00EA8E  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14403  00EA92  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14404                           
 14405                           ;operationMode.c: 150: sublist3[i] = sublist3[j];
 14406  00EA96  90D8               	bcf	status,0,c
 14407  00EA98  3435               	rlcf	sortDrawerList@j,w,c
 14408  00EA9A  6ED9               	movwf	fsr2l,c
 14409  00EA9C  3436               	rlcf	sortDrawerList@j+1,w,c
 14410  00EA9E  6EDA               	movwf	fsr2h,c
 14411  00EAA0  0E23               	movlw	low sortDrawerList@sublist3
 14412  00EAA2  26D9               	addwf	fsr2l,f,c
 14413  00EAA4  0E00               	movlw	high sortDrawerList@sublist3
 14414  00EAA6  22DA               	addwfc	fsr2h,f,c
 14415  00EAA8  90D8               	bcf	status,0,c
 14416  00EAAA  3437               	rlcf	sortDrawerList@i,w,c
 14417  00EAAC  6EE1               	movwf	fsr1l,c
 14418  00EAAE  3438               	rlcf	sortDrawerList@i+1,w,c
 14419  00EAB0  6EE2               	movwf	fsr1h,c
 14420  00EAB2  0E23               	movlw	low sortDrawerList@sublist3
 14421  00EAB4  26E1               	addwf	fsr1l,f,c
 14422  00EAB6  0E00               	movlw	high sortDrawerList@sublist3
 14423  00EAB8  22E2               	addwfc	fsr1h,f,c
 14424  00EABA  CFDE FFE6          	movff	postinc2,postinc1
 14425  00EABE  CFDD FFE5          	movff	postdec2,postdec1
 14426                           
 14427                           ;operationMode.c: 151: sublist3[j] = temp;
 14428  00EAC2  90D8               	bcf	status,0,c
 14429  00EAC4  3435               	rlcf	sortDrawerList@j,w,c
 14430  00EAC6  6ED9               	movwf	fsr2l,c
 14431  00EAC8  3436               	rlcf	sortDrawerList@j+1,w,c
 14432  00EACA  6EDA               	movwf	fsr2h,c
 14433  00EACC  0E23               	movlw	low sortDrawerList@sublist3
 14434  00EACE  26D9               	addwf	fsr2l,f,c
 14435  00EAD0  0E00               	movlw	high sortDrawerList@sublist3
 14436  00EAD2  22DA               	addwfc	fsr2h,f,c
 14437  00EAD4  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14438  00EAD8  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14439  00EADC                     l201:
 14440  00EADC  4A35               	infsnz	sortDrawerList@j,f,c
 14441  00EADE  2A36               	incf	sortDrawerList@j+1,f,c
 14442  00EAE0                     l199:
 14443  00EAE0  5033               	movf	sortDrawerList@count3,w,c
 14444  00EAE2  5C35               	subwf	sortDrawerList@j,w,c
 14445  00EAE4  5034               	movf	sortDrawerList@count3+1,w,c
 14446  00EAE6  5836               	subwfb	sortDrawerList@j+1,w,c
 14447  00EAE8  A0D8               	btfss	status,0,c
 14448  00EAEA  D7B0               	goto	l200
 14449  00EAEC  4A37               	infsnz	sortDrawerList@i,f,c
 14450  00EAEE  2A38               	incf	sortDrawerList@i+1,f,c
 14451  00EAF0                     l197:
 14452  00EAF0  5033               	movf	sortDrawerList@count3,w,c
 14453  00EAF2  5C37               	subwf	sortDrawerList@i,w,c
 14454  00EAF4  5034               	movf	sortDrawerList@count3+1,w,c
 14455  00EAF6  5838               	subwfb	sortDrawerList@i+1,w,c
 14456  00EAF8  A0D8               	btfss	status,0,c
 14457  00EAFA  D7A3               	goto	l198
 14458  00EAFC                     u9070:
 14459                           
 14460                           ;operationMode.c: 152: }
 14461                           ;operationMode.c: 153: }
 14462                           ;operationMode.c: 154: }
 14463                           ;operationMode.c: 155: }
 14464                           ;operationMode.c: 157: if (sublist1[count1 - 1] == 1 || sublist1[count1 - 1] == 2){
 14465  00EAFC  0EFE               	movlw	254
 14466  00EAFE  6E05               	movwf	??_sortDrawerList& (0+255),c
 14467  00EB00  0EFF               	movlw	255
 14468  00EB02  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14469  00EB04  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 14470  00EB08  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 14471  00EB0C  90D8               	bcf	status,0,c
 14472  00EB0E  3607               	rlcf	??_sortDrawerList+2,f,c
 14473  00EB10  3608               	rlcf	??_sortDrawerList+3,f,c
 14474  00EB12  5005               	movf	??_sortDrawerList,w,c
 14475  00EB14  2607               	addwf	??_sortDrawerList+2,f,c
 14476  00EB16  5006               	movf	??_sortDrawerList+1,w,c
 14477  00EB18  2208               	addwfc	??_sortDrawerList+3,f,c
 14478  00EB1A  0E0B               	movlw	low sortDrawerList@sublist1
 14479  00EB1C  2407               	addwf	??_sortDrawerList+2,w,c
 14480  00EB1E  6ED9               	movwf	fsr2l,c
 14481  00EB20  0E00               	movlw	high sortDrawerList@sublist1
 14482  00EB22  2008               	addwfc	??_sortDrawerList+3,w,c
 14483  00EB24  6EDA               	movwf	fsr2h,c
 14484  00EB26  04DE               	decf	postinc2,w,c
 14485  00EB28  10DE               	iorwf	postinc2,w,c
 14486  00EB2A  B4D8               	btfsc	status,2,c
 14487  00EB2C  D01A               	goto	u9090
 14488  00EB2E  0EFE               	movlw	254
 14489  00EB30  6E05               	movwf	??_sortDrawerList& (0+255),c
 14490  00EB32  0EFF               	movlw	255
 14491  00EB34  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14492  00EB36  C031  F007         	movff	sortDrawerList@count1,??_sortDrawerList+2
 14493  00EB3A  C032  F008         	movff	sortDrawerList@count1+1,??_sortDrawerList+3
 14494  00EB3E  90D8               	bcf	status,0,c
 14495  00EB40  3607               	rlcf	??_sortDrawerList+2,f,c
 14496  00EB42  3608               	rlcf	??_sortDrawerList+3,f,c
 14497  00EB44  5005               	movf	??_sortDrawerList,w,c
 14498  00EB46  2607               	addwf	??_sortDrawerList+2,f,c
 14499  00EB48  5006               	movf	??_sortDrawerList+1,w,c
 14500  00EB4A  2208               	addwfc	??_sortDrawerList+3,f,c
 14501  00EB4C  0E0B               	movlw	low sortDrawerList@sublist1
 14502  00EB4E  2407               	addwf	??_sortDrawerList+2,w,c
 14503  00EB50  6ED9               	movwf	fsr2l,c
 14504  00EB52  0E00               	movlw	high sortDrawerList@sublist1
 14505  00EB54  2008               	addwfc	??_sortDrawerList+3,w,c
 14506  00EB56  6EDA               	movwf	fsr2h,c
 14507  00EB58  0E02               	movlw	2
 14508  00EB5A  18DE               	xorwf	postinc2,w,c
 14509  00EB5C  10DE               	iorwf	postinc2,w,c
 14510  00EB5E  A4D8               	btfss	status,2,c
 14511  00EB60  D062               	goto	u9120
 14512  00EB62                     u9090:
 14513                           
 14514                           ;operationMode.c: 158: for (i=0; i<count2; i++){
 14515  00EB62  0E00               	movlw	0
 14516  00EB64  6E38               	movwf	sortDrawerList@i+1,c
 14517  00EB66  0E00               	movlw	0
 14518  00EB68  6E37               	movwf	sortDrawerList@i,c
 14519  00EB6A  D057               	goto	l207
 14520  00EB6C                     
 14521                           ;operationMode.c: 159: for (j=0; j<count2; j++){
 14522  00EB6C  0E00               	movlw	0
 14523  00EB6E  6E36               	movwf	sortDrawerList@j+1,c
 14524  00EB70  0E00               	movlw	0
 14525  00EB72  6E35               	movwf	sortDrawerList@j,c
 14526  00EB74  D04A               	goto	l209
 14527  00EB76                     
 14528                           ;operationMode.c: 160: if (sublist2[j] > sublist2[i]){
 14529  00EB76  90D8               	bcf	status,0,c
 14530  00EB78  3435               	rlcf	sortDrawerList@j,w,c
 14531  00EB7A  6ED9               	movwf	fsr2l,c
 14532  00EB7C  3436               	rlcf	sortDrawerList@j+1,w,c
 14533  00EB7E  6EDA               	movwf	fsr2h,c
 14534  00EB80  0E1B               	movlw	low sortDrawerList@sublist2
 14535  00EB82  26D9               	addwf	fsr2l,f,c
 14536  00EB84  0E00               	movlw	high sortDrawerList@sublist2
 14537  00EB86  22DA               	addwfc	fsr2h,f,c
 14538  00EB88  90D8               	bcf	status,0,c
 14539  00EB8A  3437               	rlcf	sortDrawerList@i,w,c
 14540  00EB8C  6EE1               	movwf	fsr1l,c
 14541  00EB8E  3438               	rlcf	sortDrawerList@i+1,w,c
 14542  00EB90  6EE2               	movwf	fsr1h,c
 14543  00EB92  0E1B               	movlw	low sortDrawerList@sublist2
 14544  00EB94  26E1               	addwf	fsr1l,f,c
 14545  00EB96  0E00               	movlw	high sortDrawerList@sublist2
 14546  00EB98  22E2               	addwfc	fsr1h,f,c
 14547  00EB9A  50DE               	movf	postinc2,w,c
 14548  00EB9C  5CE6               	subwf	postinc1,w,c
 14549  00EB9E  50DE               	movf	postinc2,w,c
 14550  00EBA0  58E6               	subwfb	postinc1,w,c
 14551  00EBA2  B0D8               	btfsc	status,0,c
 14552  00EBA4  D030               	goto	l211
 14553                           
 14554                           ;operationMode.c: 161: temp = sublist2[i];
 14555  00EBA6  90D8               	bcf	status,0,c
 14556  00EBA8  3437               	rlcf	sortDrawerList@i,w,c
 14557  00EBAA  6ED9               	movwf	fsr2l,c
 14558  00EBAC  3438               	rlcf	sortDrawerList@i+1,w,c
 14559  00EBAE  6EDA               	movwf	fsr2h,c
 14560  00EBB0  0E1B               	movlw	low sortDrawerList@sublist2
 14561  00EBB2  26D9               	addwf	fsr2l,f,c
 14562  00EBB4  0E00               	movlw	high sortDrawerList@sublist2
 14563  00EBB6  22DA               	addwfc	fsr2h,f,c
 14564  00EBB8  CFDE F02F          	movff	postinc2,sortDrawerList@temp
 14565  00EBBC  CFDD F030          	movff	postdec2,sortDrawerList@temp+1
 14566                           
 14567                           ;operationMode.c: 162: sublist2[i] = sublist2[j];
 14568  00EBC0  90D8               	bcf	status,0,c
 14569  00EBC2  3435               	rlcf	sortDrawerList@j,w,c
 14570  00EBC4  6ED9               	movwf	fsr2l,c
 14571  00EBC6  3436               	rlcf	sortDrawerList@j+1,w,c
 14572  00EBC8  6EDA               	movwf	fsr2h,c
 14573  00EBCA  0E1B               	movlw	low sortDrawerList@sublist2
 14574  00EBCC  26D9               	addwf	fsr2l,f,c
 14575  00EBCE  0E00               	movlw	high sortDrawerList@sublist2
 14576  00EBD0  22DA               	addwfc	fsr2h,f,c
 14577  00EBD2  90D8               	bcf	status,0,c
 14578  00EBD4  3437               	rlcf	sortDrawerList@i,w,c
 14579  00EBD6  6EE1               	movwf	fsr1l,c
 14580  00EBD8  3438               	rlcf	sortDrawerList@i+1,w,c
 14581  00EBDA  6EE2               	movwf	fsr1h,c
 14582  00EBDC  0E1B               	movlw	low sortDrawerList@sublist2
 14583  00EBDE  26E1               	addwf	fsr1l,f,c
 14584  00EBE0  0E00               	movlw	high sortDrawerList@sublist2
 14585  00EBE2  22E2               	addwfc	fsr1h,f,c
 14586  00EBE4  CFDE FFE6          	movff	postinc2,postinc1
 14587  00EBE8  CFDD FFE5          	movff	postdec2,postdec1
 14588                           
 14589                           ;operationMode.c: 163: sublist2[j] = temp;
 14590  00EBEC  90D8               	bcf	status,0,c
 14591  00EBEE  3435               	rlcf	sortDrawerList@j,w,c
 14592  00EBF0  6ED9               	movwf	fsr2l,c
 14593  00EBF2  3436               	rlcf	sortDrawerList@j+1,w,c
 14594  00EBF4  6EDA               	movwf	fsr2h,c
 14595  00EBF6  0E1B               	movlw	low sortDrawerList@sublist2
 14596  00EBF8  26D9               	addwf	fsr2l,f,c
 14597  00EBFA  0E00               	movlw	high sortDrawerList@sublist2
 14598  00EBFC  22DA               	addwfc	fsr2h,f,c
 14599  00EBFE  C02F  FFDE         	movff	sortDrawerList@temp,postinc2
 14600  00EC02  C030  FFDD         	movff	sortDrawerList@temp+1,postdec2
 14601  00EC06                     l211:
 14602  00EC06  4A35               	infsnz	sortDrawerList@j,f,c
 14603  00EC08  2A36               	incf	sortDrawerList@j+1,f,c
 14604  00EC0A                     l209:
 14605  00EC0A  502D               	movf	sortDrawerList@count2,w,c
 14606  00EC0C  5C35               	subwf	sortDrawerList@j,w,c
 14607  00EC0E  502E               	movf	sortDrawerList@count2+1,w,c
 14608  00EC10  5836               	subwfb	sortDrawerList@j+1,w,c
 14609  00EC12  A0D8               	btfss	status,0,c
 14610  00EC14  D7B0               	goto	l210
 14611  00EC16  4A37               	infsnz	sortDrawerList@i,f,c
 14612  00EC18  2A38               	incf	sortDrawerList@i+1,f,c
 14613  00EC1A                     l207:
 14614  00EC1A  502D               	movf	sortDrawerList@count2,w,c
 14615  00EC1C  5C37               	subwf	sortDrawerList@i,w,c
 14616  00EC1E  502E               	movf	sortDrawerList@count2+1,w,c
 14617  00EC20  5838               	subwfb	sortDrawerList@i+1,w,c
 14618  00EC22  A0D8               	btfss	status,0,c
 14619  00EC24  D7A3               	goto	l208
 14620  00EC26                     u9120:
 14621                           
 14622                           ;operationMode.c: 164: }
 14623                           ;operationMode.c: 165: }
 14624                           ;operationMode.c: 166: }
 14625                           ;operationMode.c: 167: }
 14626                           ;operationMode.c: 169: for (i=0; i<count1; i++){
 14627  00EC26  0E00               	movlw	0
 14628  00EC28  6E38               	movwf	sortDrawerList@i+1,c
 14629  00EC2A  0E00               	movlw	0
 14630  00EC2C  6E37               	movwf	sortDrawerList@i,c
 14631  00EC2E  D018               	goto	l214
 14632  00EC30                     
 14633                           ;operationMode.c: 170: sortedDrawerTable[i] = sublist1[i];
 14634  00EC30  90D8               	bcf	status,0,c
 14635  00EC32  3437               	rlcf	sortDrawerList@i,w,c
 14636  00EC34  6ED9               	movwf	fsr2l,c
 14637  00EC36  3438               	rlcf	sortDrawerList@i+1,w,c
 14638  00EC38  6EDA               	movwf	fsr2h,c
 14639  00EC3A  0E0B               	movlw	low sortDrawerList@sublist1
 14640  00EC3C  26D9               	addwf	fsr2l,f,c
 14641  00EC3E  0E00               	movlw	high sortDrawerList@sublist1
 14642  00EC40  22DA               	addwfc	fsr2h,f,c
 14643  00EC42  90D8               	bcf	status,0,c
 14644  00EC44  3437               	rlcf	sortDrawerList@i,w,c
 14645  00EC46  6EE1               	movwf	fsr1l,c
 14646  00EC48  3438               	rlcf	sortDrawerList@i+1,w,c
 14647  00EC4A  6EE2               	movwf	fsr1h,c
 14648  00EC4C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 14649  00EC4E  26E1               	addwf	fsr1l,f,c
 14650  00EC50  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 14651  00EC52  22E2               	addwfc	fsr1h,f,c
 14652  00EC54  CFDE FFE6          	movff	postinc2,postinc1
 14653  00EC58  CFDD FFE5          	movff	postdec2,postdec1
 14654  00EC5C  4A37               	infsnz	sortDrawerList@i,f,c
 14655  00EC5E  2A38               	incf	sortDrawerList@i+1,f,c
 14656  00EC60                     l214:
 14657  00EC60  5031               	movf	sortDrawerList@count1,w,c
 14658  00EC62  5C37               	subwf	sortDrawerList@i,w,c
 14659  00EC64  5032               	movf	sortDrawerList@count1+1,w,c
 14660  00EC66  5838               	subwfb	sortDrawerList@i+1,w,c
 14661  00EC68  A0D8               	btfss	status,0,c
 14662  00EC6A  D7E2               	goto	l215
 14663                           
 14664                           ;operationMode.c: 171: }
 14665                           ;operationMode.c: 172: for (i=0; i<count2; i++){
 14666  00EC6C  0E00               	movlw	0
 14667  00EC6E  6E38               	movwf	sortDrawerList@i+1,c
 14668  00EC70  0E00               	movlw	0
 14669  00EC72  6E37               	movwf	sortDrawerList@i,c
 14670  00EC74  D01E               	goto	l217
 14671  00EC76                     
 14672                           ;operationMode.c: 173: sortedDrawerTable[i+count1] = sublist2[i];
 14673  00EC76  90D8               	bcf	status,0,c
 14674  00EC78  3437               	rlcf	sortDrawerList@i,w,c
 14675  00EC7A  6ED9               	movwf	fsr2l,c
 14676  00EC7C  3438               	rlcf	sortDrawerList@i+1,w,c
 14677  00EC7E  6EDA               	movwf	fsr2h,c
 14678  00EC80  0E1B               	movlw	low sortDrawerList@sublist2
 14679  00EC82  26D9               	addwf	fsr2l,f,c
 14680  00EC84  0E00               	movlw	high sortDrawerList@sublist2
 14681  00EC86  22DA               	addwfc	fsr2h,f,c
 14682  00EC88  5031               	movf	sortDrawerList@count1,w,c
 14683  00EC8A  2437               	addwf	sortDrawerList@i,w,c
 14684  00EC8C  6E05               	movwf	??_sortDrawerList& (0+255),c
 14685  00EC8E  5032               	movf	sortDrawerList@count1+1,w,c
 14686  00EC90  2038               	addwfc	sortDrawerList@i+1,w,c
 14687  00EC92  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14688  00EC94  90D8               	bcf	status,0,c
 14689  00EC96  3605               	rlcf	??_sortDrawerList,f,c
 14690  00EC98  3606               	rlcf	??_sortDrawerList+1,f,c
 14691  00EC9A  5005               	movf	??_sortDrawerList,w,c
 14692  00EC9C  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14693  00EC9E  6EE1               	movwf	fsr1l,c
 14694  00ECA0  5006               	movf	??_sortDrawerList+1,w,c
 14695  00ECA2  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14696  00ECA4  6EE2               	movwf	fsr1h,c
 14697  00ECA6  CFDE FFE6          	movff	postinc2,postinc1
 14698  00ECAA  CFDD FFE5          	movff	postdec2,postdec1
 14699  00ECAE  4A37               	infsnz	sortDrawerList@i,f,c
 14700  00ECB0  2A38               	incf	sortDrawerList@i+1,f,c
 14701  00ECB2                     l217:
 14702  00ECB2  502D               	movf	sortDrawerList@count2,w,c
 14703  00ECB4  5C37               	subwf	sortDrawerList@i,w,c
 14704  00ECB6  502E               	movf	sortDrawerList@count2+1,w,c
 14705  00ECB8  5838               	subwfb	sortDrawerList@i+1,w,c
 14706  00ECBA  A0D8               	btfss	status,0,c
 14707  00ECBC  D7DC               	goto	l218
 14708                           
 14709                           ;operationMode.c: 174: }
 14710                           ;operationMode.c: 175: for (i=0; i<count3; i++){
 14711  00ECBE  0E00               	movlw	0
 14712  00ECC0  6E38               	movwf	sortDrawerList@i+1,c
 14713  00ECC2  0E00               	movlw	0
 14714  00ECC4  6E37               	movwf	sortDrawerList@i,c
 14715  00ECC6  D022               	goto	l220
 14716  00ECC8                     
 14717                           ;operationMode.c: 176: sortedDrawerTable[i+count1+count2] = sublist3[i];
 14718  00ECC8  90D8               	bcf	status,0,c
 14719  00ECCA  3437               	rlcf	sortDrawerList@i,w,c
 14720  00ECCC  6ED9               	movwf	fsr2l,c
 14721  00ECCE  3438               	rlcf	sortDrawerList@i+1,w,c
 14722  00ECD0  6EDA               	movwf	fsr2h,c
 14723  00ECD2  0E23               	movlw	low sortDrawerList@sublist3
 14724  00ECD4  26D9               	addwf	fsr2l,f,c
 14725  00ECD6  0E00               	movlw	high sortDrawerList@sublist3
 14726  00ECD8  22DA               	addwfc	fsr2h,f,c
 14727  00ECDA  5031               	movf	sortDrawerList@count1,w,c
 14728  00ECDC  2437               	addwf	sortDrawerList@i,w,c
 14729  00ECDE  6E05               	movwf	??_sortDrawerList& (0+255),c
 14730  00ECE0  5032               	movf	sortDrawerList@count1+1,w,c
 14731  00ECE2  2038               	addwfc	sortDrawerList@i+1,w,c
 14732  00ECE4  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14733  00ECE6  502D               	movf	sortDrawerList@count2,w,c
 14734  00ECE8  2605               	addwf	??_sortDrawerList,f,c
 14735  00ECEA  502E               	movf	sortDrawerList@count2+1,w,c
 14736  00ECEC  2206               	addwfc	??_sortDrawerList+1,f,c
 14737  00ECEE  90D8               	bcf	status,0,c
 14738  00ECF0  3605               	rlcf	??_sortDrawerList,f,c
 14739  00ECF2  3606               	rlcf	??_sortDrawerList+1,f,c
 14740  00ECF4  5005               	movf	??_sortDrawerList,w,c
 14741  00ECF6  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14742  00ECF8  6EE1               	movwf	fsr1l,c
 14743  00ECFA  5006               	movf	??_sortDrawerList+1,w,c
 14744  00ECFC  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14745  00ECFE  6EE2               	movwf	fsr1h,c
 14746  00ED00  CFDE FFE6          	movff	postinc2,postinc1
 14747  00ED04  CFDD FFE5          	movff	postdec2,postdec1
 14748  00ED08  4A37               	infsnz	sortDrawerList@i,f,c
 14749  00ED0A  2A38               	incf	sortDrawerList@i+1,f,c
 14750  00ED0C                     l220:
 14751  00ED0C  5033               	movf	sortDrawerList@count3,w,c
 14752  00ED0E  5C37               	subwf	sortDrawerList@i,w,c
 14753  00ED10  5034               	movf	sortDrawerList@count3+1,w,c
 14754  00ED12  5838               	subwfb	sortDrawerList@i+1,w,c
 14755  00ED14  A0D8               	btfss	status,0,c
 14756  00ED16  D7D8               	goto	l221
 14757                           
 14758                           ;operationMode.c: 177: }
 14759                           ;operationMode.c: 178: for (i=0; i<count4; i++){
 14760  00ED18  0E00               	movlw	0
 14761  00ED1A  6E38               	movwf	sortDrawerList@i+1,c
 14762  00ED1C  0E00               	movlw	0
 14763  00ED1E  6E37               	movwf	sortDrawerList@i,c
 14764  00ED20  D026               	goto	l223
 14765  00ED22                     
 14766                           ;operationMode.c: 179: sortedDrawerTable[i+count1+count2+count3] = sublist4[i];
 14767  00ED22  90D8               	bcf	status,0,c
 14768  00ED24  3437               	rlcf	sortDrawerList@i,w,c
 14769  00ED26  6ED9               	movwf	fsr2l,c
 14770  00ED28  3438               	rlcf	sortDrawerList@i+1,w,c
 14771  00ED2A  6EDA               	movwf	fsr2h,c
 14772  00ED2C  0E13               	movlw	low sortDrawerList@sublist4
 14773  00ED2E  26D9               	addwf	fsr2l,f,c
 14774  00ED30  0E00               	movlw	high sortDrawerList@sublist4
 14775  00ED32  22DA               	addwfc	fsr2h,f,c
 14776  00ED34  5031               	movf	sortDrawerList@count1,w,c
 14777  00ED36  2437               	addwf	sortDrawerList@i,w,c
 14778  00ED38  6E05               	movwf	??_sortDrawerList& (0+255),c
 14779  00ED3A  5032               	movf	sortDrawerList@count1+1,w,c
 14780  00ED3C  2038               	addwfc	sortDrawerList@i+1,w,c
 14781  00ED3E  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 14782  00ED40  502D               	movf	sortDrawerList@count2,w,c
 14783  00ED42  2605               	addwf	??_sortDrawerList,f,c
 14784  00ED44  502E               	movf	sortDrawerList@count2+1,w,c
 14785  00ED46  2206               	addwfc	??_sortDrawerList+1,f,c
 14786  00ED48  5033               	movf	sortDrawerList@count3,w,c
 14787  00ED4A  2605               	addwf	??_sortDrawerList,f,c
 14788  00ED4C  5034               	movf	sortDrawerList@count3+1,w,c
 14789  00ED4E  2206               	addwfc	??_sortDrawerList+1,f,c
 14790  00ED50  90D8               	bcf	status,0,c
 14791  00ED52  3605               	rlcf	??_sortDrawerList,f,c
 14792  00ED54  3606               	rlcf	??_sortDrawerList+1,f,c
 14793  00ED56  5005               	movf	??_sortDrawerList,w,c
 14794  00ED58  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 14795  00ED5A  6EE1               	movwf	fsr1l,c
 14796  00ED5C  5006               	movf	??_sortDrawerList+1,w,c
 14797  00ED5E  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 14798  00ED60  6EE2               	movwf	fsr1h,c
 14799  00ED62  CFDE FFE6          	movff	postinc2,postinc1
 14800  00ED66  CFDD FFE5          	movff	postdec2,postdec1
 14801  00ED6A  4A37               	infsnz	sortDrawerList@i,f,c
 14802  00ED6C  2A38               	incf	sortDrawerList@i+1,f,c
 14803  00ED6E                     l223:
 14804  00ED6E  502B               	movf	sortDrawerList@count4,w,c
 14805  00ED70  5C37               	subwf	sortDrawerList@i,w,c
 14806  00ED72  502C               	movf	sortDrawerList@count4+1,w,c
 14807  00ED74  5838               	subwfb	sortDrawerList@i+1,w,c
 14808  00ED76  B0D8               	btfsc	status,0,c
 14809  00ED78  0012               	return	
 14810  00ED7A  D7D3               	goto	l224
 14811  00ED7C                     __end_of_sortDrawerList:
 14812                           	opt stack 0
 14813                           tblptru	equ	0xFF8
 14814                           tblptrh	equ	0xFF7
 14815                           tblptrl	equ	0xFF6
 14816                           tablat	equ	0xFF5
 14817                           prodh	equ	0xFF4
 14818                           prodl	equ	0xFF3
 14819                           postinc0	equ	0xFEE
 14820                           wreg	equ	0xFE8
 14821                           postinc1	equ	0xFE6
 14822                           postdec1	equ	0xFE5
 14823                           plusw1	equ	0xFE3
 14824                           fsr1h	equ	0xFE2
 14825                           fsr1l	equ	0xFE1
 14826                           indf2	equ	0xFDF
 14827                           postinc2	equ	0xFDE
 14828                           postdec2	equ	0xFDD
 14829                           plusw2	equ	0xFDB
 14830                           fsr2h	equ	0xFDA
 14831                           fsr2l	equ	0xFD9
 14832                           status	equ	0xFD8
 14833                           
 14834 ;; *************** function _printf *****************
 14835 ;; Defined at:
 14836 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 14837 ;; Parameters:    Size  Location     Type
 14838 ;;  f               2   12[COMRAM] PTR const unsigned char 
 14839 ;;		 -> STR_146(11), STR_145(13), STR_144(11), STR_143(13), 
 14840 ;;		 -> STR_142(11), STR_141(15), STR_140(15), STR_139(5), 
 14841 ;;		 -> STR_138(11), STR_137(8), STR_136(11), STR_135(14), 
 14842 ;;		 -> STR_134(17), STR_133(8), STR_132(15), STR_131(16), 
 14843 ;;		 -> STR_130(10), STR_129(8), STR_128(15), STR_127(16), 
 14844 ;;		 -> STR_126(10), STR_125(16), STR_124(16), STR_123(17), 
 14845 ;;		 -> STR_122(13), STR_121(17), STR_120(14), STR_119(11), 
 14846 ;;		 -> STR_118(11), STR_117(15), STR_116(15), STR_115(10), 
 14847 ;;		 -> STR_114(13), STR_113(16), STR_112(16), STR_111(17), 
 14848 ;;		 -> STR_110(17), STR_109(8), STR_108(15), STR_107(15), 
 14849 ;;		 -> STR_106(11), STR_105(14), STR_104(16), STR_103(16), 
 14850 ;;		 -> STR_102(11), STR_101(14), STR_100(16), STR_99(16), 
 14851 ;;		 -> STR_98(16), STR_97(13), STR_96(5), STR_95(11), 
 14852 ;;		 -> STR_94(15), STR_93(17), STR_92(18), STR_91(15), 
 14853 ;;		 -> STR_90(11), STR_89(7), STR_88(3), STR_87(16), 
 14854 ;;		 -> STR_86(8), STR_85(16), STR_84(15), STR_83(6), 
 14855 ;;		 -> STR_82(14), STR_81(17), STR_80(7), STR_79(9), 
 14856 ;;		 -> STR_78(17), STR_77(11), STR_76(17), STR_75(14), 
 14857 ;;		 -> STR_74(17), STR_73(11), STR_72(15), STR_71(11), 
 14858 ;;		 -> STR_70(8), STR_38(15), STR_37(9), STR_36(9), 
 14859 ;;		 -> STR_35(10), STR_34(10), STR_2(16), STR_1(8), 
 14860 ;; Auto vars:     Size  Location     Type
 14861 ;;  idx             1   26[COMRAM] unsigned char 
 14862 ;;  tmpval          4    0        struct .
 14863 ;;  width           2   37[COMRAM] int 
 14864 ;;  val             2   34[COMRAM] unsigned int 
 14865 ;;  len             2   32[COMRAM] unsigned int 
 14866 ;;  ap              2   30[COMRAM] PTR void [1]
 14867 ;;		 -> ?_printf(2), 
 14868 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 14869 ;;		 -> STR_147(7), STR_69(5), STR_68(4), STR_67(4), 
 14870 ;;		 -> STR_66(4), STR_65(4), STR_64(3), STR_63(3), 
 14871 ;;		 -> STR_62(3), STR_61(3), STR_60(3), STR_59(2), 
 14872 ;;		 -> STR_58(2), STR_57(2), STR_56(5), STR_55(5), 
 14873 ;;		 -> STR_54(5), STR_53(5), STR_52(5), STR_51(4), 
 14874 ;;		 -> STR_50(4), STR_49(4), STR_48(4), STR_47(4), 
 14875 ;;		 -> STR_46(4), STR_45(4), STR_44(3), STR_43(3), 
 14876 ;;		 -> STR_42(3), STR_41(2), STR_40(2), STR_39(2), 
 14877 ;;		 -> STR_33(5), STR_32(4), STR_31(4), STR_30(4), 
 14878 ;;		 -> STR_29(4), STR_28(3), STR_27(3), STR_26(3), 
 14879 ;;		 -> STR_25(3), STR_24(3), STR_23(2), STR_22(2), 
 14880 ;;		 -> STR_21(2), STR_20(5), STR_19(5), STR_18(5), 
 14881 ;;		 -> STR_17(5), STR_16(5), STR_15(4), STR_14(4), 
 14882 ;;		 -> STR_13(4), STR_12(4), STR_11(4), STR_10(4), 
 14883 ;;		 -> STR_9(4), STR_8(3), STR_7(3), STR_6(3), 
 14884 ;;		 -> STR_5(2), STR_4(2), STR_3(2), 
 14885 ;;  c               1   39[COMRAM] char 
 14886 ;;  flag            1   36[COMRAM] unsigned char 
 14887 ;;  prec            1   27[COMRAM] char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  2   12[COMRAM] int 
 14890 ;; Registers used:
 14891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14897 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14898 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14899 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14900 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14901 ;;Total ram usage:       28 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    2
 14904 ;; This function calls:
 14905 ;;		___lwdiv
 14906 ;;		___lwmod
 14907 ;;		___wmul
 14908 ;;		_isdigit
 14909 ;;		_putch
 14910 ;; This function is called by:
 14911 ;;		_main
 14912 ;;		_mainOperation
 14913 ;;		_viewLogs
 14914 ;;		_displayLogs
 14915 ;;		_food_press
 14916 ;;		_diet_press
 14917 ;;		_which_drawer
 14918 ;;		_standbyMode
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           	psect	text26
 14923  00C934                     __ptext26:
 14924                           	opt stack 0
 14925  00C934                     _printf:
 14926                           	opt stack 26
 14927                           
 14928                           ;doprnt.c: 466: va_list ap;
 14929                           ;doprnt.c: 499: signed char c;
 14930                           ;doprnt.c: 501: int width;
 14931                           ;doprnt.c: 506: signed char prec;
 14932                           ;doprnt.c: 508: unsigned char flag;
 14933                           ;doprnt.c: 523: union {
 14934                           ;doprnt.c: 524: unsigned long vd;
 14935                           ;doprnt.c: 525: double integ;
 14936                           ;doprnt.c: 526: } tmpval;
 14937                           ;doprnt.c: 528: unsigned int val;
 14938                           ;doprnt.c: 529: unsigned len;
 14939                           ;doprnt.c: 530: const char * cp;
 14940                           ;doprnt.c: 533: *ap = __va_start();
 14941                           
 14942                           ;incstack = 0
 14943  00C934  0E0F               	movlw	low (?_printf+2)
 14944  00C936  6E1F               	movwf	printf@ap,c
 14945  00C938  0E00               	movlw	high (?_printf+2)
 14946  00C93A  6E20               	movwf	printf@ap+1,c
 14947                           
 14948                           ;doprnt.c: 536: while(c = *f++) {
 14949  00C93C  D1E6               	goto	u7140
 14950  00C93E                     
 14951                           ;doprnt.c: 538: if(c != '%')
 14952  00C93E  0E25               	movlw	37
 14953  00C940  1828               	xorwf	printf@c,w,c
 14954  00C942  B4D8               	btfsc	status,2,c
 14955  00C944  D004               	goto	l1502
 14956                           
 14957                           ;doprnt.c: 540: {
 14958                           ;doprnt.c: 541: (putch(c) );
 14959  00C946  5028               	movf	printf@c,w,c
 14960  00C948  ECE7  F054         	call	_putch
 14961                           
 14962                           ;doprnt.c: 542: continue;
 14963  00C94C  D1DE               	goto	u7140
 14964  00C94E                     l1502:
 14965                           
 14966                           ;doprnt.c: 543: }
 14967                           ;doprnt.c: 546: width = 0;
 14968  00C94E  0E00               	movlw	0
 14969  00C950  6E27               	movwf	printf@width+1,c
 14970  00C952  0E00               	movlw	0
 14971  00C954  6E26               	movwf	printf@width,c
 14972                           
 14973                           ;doprnt.c: 548: flag = 0;
 14974  00C956  0E00               	movlw	0
 14975  00C958  6E25               	movwf	printf@flag,c
 14976                           
 14977                           ;doprnt.c: 551: switch(*f) {
 14978                           
 14979                           ;doprnt.c: 550: for(;;) {
 14980  00C95A  D003               	goto	l1504
 14981  00C95C                     
 14982                           ;doprnt.c: 580: flag |= 0x04;
 14983  00C95C  8425               	bsf	printf@flag,2,c
 14984                           
 14985                           ;doprnt.c: 581: f++;
 14986  00C95E  4A0D               	infsnz	printf@f,f,c
 14987  00C960  2A0E               	incf	printf@f+1,f,c
 14988  00C962                     l1504:
 14989  00C962  C00D  FFF6         	movff	printf@f,tblptrl
 14990  00C966  C00E  FFF7         	movff	printf@f+1,tblptrh
 14991  00C96A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14992  00C96A  6AF8               	clrf	tblptru,c
 14993  00C96C                     	endif
 14994  00C96C                     	if	0	;tblptru may be non-zero
 14995  00C96C                     	endif
 14996  00C96C  0008               	tblrd		*
 14997  00C96E  50F5               	movf	tablat,w,c
 14998                           
 14999                           ; Switch size 1, requested type "space"
 15000                           ; Number of cases is 1, Range of values is 48 to 48
 15001                           ; switch strategies available:
 15002                           ; Name         Instructions Cycles
 15003                           ; simple_byte            4     3 (average)
 15004                           ;	Chosen strategy is simple_byte
 15005  00C970  0A30               	xorlw	48	; case 48
 15006  00C972  B4D8               	btfsc	status,2,c
 15007  00C974  D7F3               	goto	l1505
 15008                           
 15009                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 15010                           
 15011                           ;doprnt.c: 586: }
 15012                           
 15013                           ;doprnt.c: 585: break;
 15014  00C976  C00D  FFF6         	movff	printf@f,tblptrl
 15015  00C97A  C00E  FFF7         	movff	printf@f+1,tblptrh
 15016  00C97E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15017  00C97E  6AF8               	clrf	tblptru,c
 15018  00C980                     	endif
 15019  00C980                     	if	0	;tblptru may be non-zero
 15020  00C980                     	endif
 15021  00C980  0008               	tblrd		*
 15022  00C982  50F5               	movf	tablat,w,c
 15023  00C984  ECF1  F054         	call	_isdigit
 15024  00C988  A0D8               	btfss	status,0,c
 15025  00C98A  D092               	goto	l1512
 15026                           
 15027                           ;doprnt.c: 598: width = 0;
 15028  00C98C  0E00               	movlw	0
 15029  00C98E  6E27               	movwf	printf@width+1,c
 15030  00C990  0E00               	movlw	0
 15031  00C992  6E26               	movwf	printf@width,c
 15032  00C994                     
 15033                           ;doprnt.c: 600: width *= 10;
 15034  00C994  C026  F001         	movff	printf@width,___wmul@multiplier
 15035  00C998  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 15036  00C99C  0E00               	movlw	0
 15037  00C99E  6E04               	movwf	___wmul@multiplicand+1,c
 15038  00C9A0  0E0A               	movlw	10
 15039  00C9A2  6E03               	movwf	___wmul@multiplicand,c
 15040  00C9A4  EC25  F055         	call	___wmul	;wreg free
 15041  00C9A8  C001  F026         	movff	?___wmul,printf@width
 15042  00C9AC  C002  F027         	movff	?___wmul+1,printf@width+1
 15043                           
 15044                           ;doprnt.c: 601: width += *f++ - '0';
 15045  00C9B0  0ED0               	movlw	208
 15046  00C9B2  6E17               	movwf	??_printf& (0+255),c
 15047  00C9B4  0EFF               	movlw	255
 15048  00C9B6  6E18               	movwf	(??_printf+1)& (0+255),c
 15049  00C9B8  C00D  FFF6         	movff	printf@f,tblptrl
 15050  00C9BC  C00E  FFF7         	movff	printf@f+1,tblptrh
 15051  00C9C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15052  00C9C0  6AF8               	clrf	tblptru,c
 15053  00C9C2                     	endif
 15054  00C9C2                     	if	0	;tblptru may be non-zero
 15055  00C9C2                     	endif
 15056  00C9C2  0008               	tblrd		*
 15057  00C9C4  50F5               	movf	tablat,w,c
 15058  00C9C6  6E19               	movwf	(??_printf+2)& (0+255),c
 15059  00C9C8  6A1A               	clrf	(??_printf+3)& (0+255),c
 15060  00C9CA  5017               	movf	??_printf,w,c
 15061  00C9CC  2619               	addwf	??_printf+2,f,c
 15062  00C9CE  5018               	movf	??_printf+1,w,c
 15063  00C9D0  221A               	addwfc	??_printf+3,f,c
 15064  00C9D2  5019               	movf	??_printf+2,w,c
 15065  00C9D4  2626               	addwf	printf@width,f,c
 15066  00C9D6  501A               	movf	??_printf+3,w,c
 15067  00C9D8  2227               	addwfc	printf@width+1,f,c
 15068  00C9DA  4A0D               	infsnz	printf@f,f,c
 15069  00C9DC  2A0E               	incf	printf@f+1,f,c
 15070                           
 15071                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 15072  00C9DE  C00D  FFF6         	movff	printf@f,tblptrl
 15073  00C9E2  C00E  FFF7         	movff	printf@f+1,tblptrh
 15074  00C9E6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15075  00C9E6  6AF8               	clrf	tblptru,c
 15076  00C9E8                     	endif
 15077  00C9E8                     	if	0	;tblptru may be non-zero
 15078  00C9E8                     	endif
 15079  00C9E8  0008               	tblrd		*
 15080  00C9EA  50F5               	movf	tablat,w,c
 15081  00C9EC  ECF1  F054         	call	_isdigit
 15082  00C9F0  A0D8               	btfss	status,0,c
 15083  00C9F2  D05E               	goto	l1512
 15084  00C9F4  D7CF               	goto	l1510
 15085  00C9F6                     
 15086                           ;doprnt.c: 721: flag |= 0x80;
 15087  00C9F6  8E25               	bsf	printf@flag,7,c
 15088                           
 15089                           ;doprnt.c: 723: break;
 15090  00C9F8  D076               	goto	l1517
 15091  00C9FA                     
 15092                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 15093  00C9FA  C01F  FFD9         	movff	printf@ap,fsr2l
 15094  00C9FE  C020  FFDA         	movff	printf@ap+1,fsr2h
 15095  00CA02  CFDE F01D          	movff	postinc2,printf@cp
 15096  00CA06  CFDD F01E          	movff	postdec2,printf@cp+1
 15097  00CA0A  0E02               	movlw	2
 15098  00CA0C  261F               	addwf	printf@ap,f,c
 15099  00CA0E  0E00               	movlw	0
 15100  00CA10  2220               	addwfc	printf@ap+1,f,c
 15101                           
 15102                           ;doprnt.c: 740: if(!cp)
 15103  00CA12  501D               	movf	printf@cp,w,c
 15104  00CA14  101E               	iorwf	printf@cp+1,w,c
 15105  00CA16  A4D8               	btfss	status,2,c
 15106  00CA18  D004               	goto	l1520
 15107                           
 15108                           ;doprnt.c: 741: cp = "(null)";
 15109  00CA1A  0EA3               	movlw	low STR_147
 15110  00CA1C  6E1D               	movwf	printf@cp,c
 15111  00CA1E  0EFF               	movlw	high STR_147
 15112  00CA20  6E1E               	movwf	printf@cp+1,c
 15113  00CA22                     l1520:
 15114                           
 15115                           ;doprnt.c: 745: len = 0;
 15116  00CA22  0E00               	movlw	0
 15117  00CA24  6E22               	movwf	printf@len+1,c
 15118  00CA26  0E00               	movlw	0
 15119  00CA28  6E21               	movwf	printf@len,c
 15120                           
 15121                           ;doprnt.c: 746: while(cp[len])
 15122  00CA2A  D002               	goto	l1521
 15123  00CA2C                     
 15124                           ;doprnt.c: 747: len++;
 15125  00CA2C  4A21               	infsnz	printf@len,f,c
 15126  00CA2E  2A22               	incf	printf@len+1,f,c
 15127  00CA30                     l1521:
 15128  00CA30  5021               	movf	printf@len,w,c
 15129  00CA32  241D               	addwf	printf@cp,w,c
 15130  00CA34  6E17               	movwf	??_printf& (0+255),c
 15131  00CA36  5022               	movf	printf@len+1,w,c
 15132  00CA38  201E               	addwfc	printf@cp+1,w,c
 15133  00CA3A  6E18               	movwf	(??_printf+1)& (0+255),c
 15134  00CA3C  C017  FFF6         	movff	??_printf,tblptrl
 15135  00CA40  C018  FFF7         	movff	??_printf+1,tblptrh
 15136  00CA44                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15137  00CA44  6AF8               	clrf	tblptru,c
 15138  00CA46                     	endif
 15139  00CA46                     	if	0	;tblptru may be non-zero
 15140  00CA46                     	endif
 15141  00CA46  0008               	tblrd		*
 15142  00CA48  50F5               	movf	tablat,w,c
 15143  00CA4A  0900               	iorlw	0
 15144  00CA4C  A4D8               	btfss	status,2,c
 15145  00CA4E  D7EE               	goto	l1522
 15146                           
 15147                           ;doprnt.c: 757: if(width > len)
 15148  00CA50  5026               	movf	printf@width,w,c
 15149  00CA52  5C21               	subwf	printf@len,w,c
 15150  00CA54  5027               	movf	printf@width+1,w,c
 15151  00CA56  5822               	subwfb	printf@len+1,w,c
 15152  00CA58  B0D8               	btfsc	status,0,c
 15153  00CA5A  D005               	goto	l1524
 15154                           
 15155                           ;doprnt.c: 758: width -= len;
 15156  00CA5C  5021               	movf	printf@len,w,c
 15157  00CA5E  5E26               	subwf	printf@width,f,c
 15158  00CA60  5022               	movf	printf@len+1,w,c
 15159  00CA62  5A27               	subwfb	printf@width+1,f,c
 15160  00CA64  D008               	goto	l1526
 15161  00CA66                     l1524:
 15162                           
 15163                           ;doprnt.c: 759: else
 15164                           ;doprnt.c: 760: width = 0;
 15165  00CA66  0E00               	movlw	0
 15166  00CA68  6E27               	movwf	printf@width+1,c
 15167  00CA6A  0E00               	movlw	0
 15168  00CA6C  6E26               	movwf	printf@width,c
 15169                           
 15170                           ;doprnt.c: 764: while(width--)
 15171  00CA6E  D003               	goto	l1526
 15172  00CA70                     l6564:
 15173                           
 15174                           ;doprnt.c: 765: (putch(' ') );
 15175  00CA70  0E20               	movlw	32
 15176  00CA72  ECE7  F054         	call	_putch
 15177  00CA76                     l1526:
 15178  00CA76  0626               	decf	printf@width,f,c
 15179  00CA78  A0D8               	btfss	status,0,c
 15180  00CA7A  0627               	decf	printf@width+1,f,c
 15181  00CA7C  2826               	incf	printf@width,w,c
 15182  00CA7E  E1F8               	bnz	l6564
 15183  00CA80  2827               	incf	printf@width+1,w,c
 15184  00CA82  B4D8               	btfsc	status,2,c
 15185  00CA84  D00C               	goto	l1529
 15186  00CA86  D7F4               	goto	l1527
 15187  00CA88                     l6568:
 15188                           
 15189                           ;doprnt.c: 768: (putch(*cp++) );
 15190  00CA88  C01D  FFF6         	movff	printf@cp,tblptrl
 15191  00CA8C  C01E  FFF7         	movff	printf@cp+1,tblptrh
 15192  00CA90                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15193  00CA90  6AF8               	clrf	tblptru,c
 15194  00CA92                     	endif
 15195  00CA92                     	if	0	;tblptru may be non-zero
 15196  00CA92                     	endif
 15197  00CA92  0008               	tblrd		*
 15198  00CA94  50F5               	movf	tablat,w,c
 15199  00CA96  ECE7  F054         	call	_putch
 15200  00CA9A  4A1D               	infsnz	printf@cp,f,c
 15201  00CA9C  2A1E               	incf	printf@cp+1,f,c
 15202  00CA9E                     l1529:
 15203  00CA9E  0621               	decf	printf@len,f,c
 15204  00CAA0  A0D8               	btfss	status,0,c
 15205  00CAA2  0622               	decf	printf@len+1,f,c
 15206  00CAA4  2821               	incf	printf@len,w,c
 15207  00CAA6  E1F0               	bnz	l6568
 15208  00CAA8  2822               	incf	printf@len+1,w,c
 15209  00CAAA  B4D8               	btfsc	status,2,c
 15210  00CAAC  D12E               	goto	u7140
 15211  00CAAE  D7EC               	goto	l1530
 15212  00CAB0                     l1512:
 15213  00CAB0  C00D  FFF6         	movff	printf@f,tblptrl
 15214  00CAB4  C00E  FFF7         	movff	printf@f+1,tblptrh
 15215  00CAB8  4A0D               	infsnz	printf@f,f,c
 15216  00CABA  2A0E               	incf	printf@f+1,f,c
 15217  00CABC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15218  00CABC  6AF8               	clrf	tblptru,c
 15219  00CABE                     	endif
 15220  00CABE                     	if	0	;tblptru may be non-zero
 15221  00CABE                     	endif
 15222  00CABE  0008               	tblrd		*
 15223  00CAC0  CFF5 F028          	movff	tablat,printf@c
 15224  00CAC4  5028               	movf	printf@c,w,c
 15225                           
 15226                           ; Switch size 1, requested type "space"
 15227                           ; Number of cases is 5, Range of values is 0 to 120
 15228                           ; switch strategies available:
 15229                           ; Name         Instructions Cycles
 15230                           ; simple_byte           16     9 (average)
 15231                           ;	Chosen strategy is simple_byte
 15232  00CAC6  0A00               	xorlw	0	; case 0
 15233  00CAC8  B4D8               	btfsc	status,2,c
 15234  00CACA  0012               	return	
 15235  00CACC  0A64               	xorlw	100	; case 100
 15236  00CACE  B4D8               	btfsc	status,2,c
 15237  00CAD0  D00A               	goto	l1517
 15238  00CAD2  0A0D               	xorlw	13	; case 105
 15239  00CAD4  B4D8               	btfsc	status,2,c
 15240  00CAD6  D007               	goto	l1517
 15241  00CAD8  0A1A               	xorlw	26	; case 115
 15242  00CADA  B4D8               	btfsc	status,2,c
 15243  00CADC  D78E               	goto	l1519
 15244  00CADE  0A0B               	xorlw	11	; case 120
 15245  00CAE0  B4D8               	btfsc	status,2,c
 15246  00CAE2  D789               	goto	l1518
 15247  00CAE4  D112               	goto	u7140
 15248  00CAE6                     l1517:
 15249                           
 15250                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 15251  00CAE6  BE25               	btfsc	printf@flag,7,c
 15252  00CAE8  D015               	goto	l1533
 15253                           
 15254                           ;doprnt.c: 1253: {
 15255                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15256  00CAEA  C01F  FFD9         	movff	printf@ap,fsr2l
 15257  00CAEE  C020  FFDA         	movff	printf@ap+1,fsr2h
 15258  00CAF2  CFDE F023          	movff	postinc2,printf@val
 15259  00CAF6  CFDD F024          	movff	postdec2,printf@val+1
 15260  00CAFA  0E02               	movlw	2
 15261  00CAFC  261F               	addwf	printf@ap,f,c
 15262  00CAFE  0E00               	movlw	0
 15263  00CB00  2220               	addwfc	printf@ap+1,f,c
 15264                           
 15265                           ;doprnt.c: 1261: if((int)val < 0) {
 15266  00CB02  AE24               	btfss	printf@val+1,7,c
 15267  00CB04  D04A               	goto	l1536
 15268                           
 15269                           ;doprnt.c: 1262: flag |= 0x03;
 15270  00CB06  0E03               	movlw	3
 15271  00CB08  1225               	iorwf	printf@flag,f,c
 15272                           
 15273                           ;doprnt.c: 1263: val = -val;
 15274  00CB0A  6C23               	negf	printf@val,c
 15275  00CB0C  1E24               	comf	printf@val+1,f,c
 15276  00CB0E  B0D8               	btfsc	status,0,c
 15277  00CB10  2A24               	incf	printf@val+1,f,c
 15278                           
 15279                           ;doprnt.c: 1264: }
 15280                           ;doprnt.c: 1266: }
 15281  00CB12  D043               	goto	l1536
 15282  00CB14                     l1533:
 15283                           
 15284                           ;doprnt.c: 1268: else
 15285                           ;doprnt.c: 1273: {
 15286                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15287  00CB14  C01F  FFD9         	movff	printf@ap,fsr2l
 15288  00CB18  C020  FFDA         	movff	printf@ap+1,fsr2h
 15289  00CB1C  CFDE F023          	movff	postinc2,printf@val
 15290  00CB20  CFDD F024          	movff	postdec2,printf@val+1
 15291  00CB24  0E02               	movlw	2
 15292  00CB26  261F               	addwf	printf@ap,f,c
 15293  00CB28  0E00               	movlw	0
 15294  00CB2A  2220               	addwfc	printf@ap+1,f,c
 15295                           
 15296                           ;doprnt.c: 1287: }
 15297                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 15298  00CB2C  D036               	goto	l1536
 15299  00CB2E                     
 15300                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15301  00CB2E  0E01               	movlw	1
 15302  00CB30  6E28               	movwf	printf@c,c
 15303  00CB32                     l6594:
 15304  00CB32  0E05               	movlw	5
 15305  00CB34  1828               	xorwf	printf@c,w,c
 15306  00CB36  B4D8               	btfsc	status,2,c
 15307  00CB38  D038               	goto	l1541
 15308                           
 15309                           ;doprnt.c: 1306: if(val < dpowers[c])
 15310  00CB3A  5028               	movf	printf@c,w,c
 15311  00CB3C  0D02               	mullw	2
 15312  00CB3E  0E73               	movlw	low _dpowers
 15313  00CB40  24F3               	addwf	prodl,w,c
 15314  00CB42  6EF6               	movwf	tblptrl,c
 15315  00CB44  0EFC               	movlw	high _dpowers
 15316  00CB46  20F4               	addwfc	prodh,w,c
 15317  00CB48  6EF7               	movwf	tblptrh,c
 15318  00CB4A                     	if	1	;There are 3 active tblptr bytes
 15319  00CB4A  6AF8               	clrf	tblptru,c
 15320  00CB4C  0E00               	movlw	low (__mediumconst shr (0+16))
 15321  00CB4E  22F8               	addwfc	tblptru,f,c
 15322  00CB50                     	endif
 15323  00CB50  0009               	tblrd		*+
 15324  00CB52  50F5               	movf	tablat,w,c
 15325  00CB54  5C23               	subwf	printf@val,w,c
 15326  00CB56  0009               	tblrd		*+
 15327  00CB58  50F5               	movf	tablat,w,c
 15328  00CB5A  5824               	subwfb	printf@val+1,w,c
 15329  00CB5C  A0D8               	btfss	status,0,c
 15330  00CB5E  D025               	goto	l1541
 15331                           
 15332                           ;doprnt.c: 1307: break;
 15333  00CB60  2A28               	incf	printf@c,f,c
 15334  00CB62  D7E7               	goto	l6594
 15335  00CB64                     
 15336                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15337  00CB64  0E01               	movlw	1
 15338  00CB66  6E28               	movwf	printf@c,c
 15339  00CB68                     l6608:
 15340  00CB68  0E04               	movlw	4
 15341  00CB6A  1828               	xorwf	printf@c,w,c
 15342  00CB6C  B4D8               	btfsc	status,2,c
 15343  00CB6E  D01D               	goto	l1541
 15344                           
 15345                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15346  00CB70  5028               	movf	printf@c,w,c
 15347  00CB72  0D02               	mullw	2
 15348  00CB74  0E7D               	movlw	low _hexpowers
 15349  00CB76  24F3               	addwf	prodl,w,c
 15350  00CB78  6EF6               	movwf	tblptrl,c
 15351  00CB7A  0EFC               	movlw	high _hexpowers
 15352  00CB7C  20F4               	addwfc	prodh,w,c
 15353  00CB7E  6EF7               	movwf	tblptrh,c
 15354  00CB80                     	if	1	;There are 3 active tblptr bytes
 15355  00CB80  6AF8               	clrf	tblptru,c
 15356  00CB82  0E00               	movlw	low (__mediumconst shr (0+16))
 15357  00CB84  22F8               	addwfc	tblptru,f,c
 15358  00CB86                     	endif
 15359  00CB86  0009               	tblrd		*+
 15360  00CB88  50F5               	movf	tablat,w,c
 15361  00CB8A  5C23               	subwf	printf@val,w,c
 15362  00CB8C  0009               	tblrd		*+
 15363  00CB8E  50F5               	movf	tablat,w,c
 15364  00CB90  5824               	subwfb	printf@val+1,w,c
 15365  00CB92  A0D8               	btfss	status,0,c
 15366  00CB94  D00A               	goto	l1541
 15367                           
 15368                           ;doprnt.c: 1318: break;
 15369  00CB96  2A28               	incf	printf@c,f,c
 15370  00CB98  D7E7               	goto	l6608
 15371  00CB9A                     l1536:
 15372  00CB9A  5025               	movf	printf@flag,w,c
 15373  00CB9C  0B80               	andlw	128
 15374                           
 15375                           ; Switch size 1, requested type "space"
 15376                           ; Number of cases is 2, Range of values is 0 to 128
 15377                           ; switch strategies available:
 15378                           ; Name         Instructions Cycles
 15379                           ; simple_byte            7     4 (average)
 15380                           ;	Chosen strategy is simple_byte
 15381  00CB9E  0A00               	xorlw	0	; case 0
 15382  00CBA0  B4D8               	btfsc	status,2,c
 15383  00CBA2  D7C5               	goto	l1537
 15384  00CBA4  0A80               	xorlw	128	; case 128
 15385  00CBA6  B4D8               	btfsc	status,2,c
 15386  00CBA8  D7DD               	goto	l1542
 15387  00CBAA                     l1541:
 15388                           
 15389                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15390  00CBAA  5026               	movf	printf@width,w,c
 15391  00CBAC  1027               	iorwf	printf@width+1,w,c
 15392  00CBAE  B4D8               	btfsc	status,2,c
 15393  00CBB0  D009               	goto	l1546
 15394  00CBB2  C025  F017         	movff	printf@flag,??_printf
 15395  00CBB6  0E03               	movlw	3
 15396  00CBB8  1617               	andwf	??_printf,f,c
 15397  00CBBA  B4D8               	btfsc	status,2,c
 15398  00CBBC  D003               	goto	l1546
 15399                           
 15400                           ;doprnt.c: 1346: width--;
 15401  00CBBE  0626               	decf	printf@width,f,c
 15402  00CBC0  A0D8               	btfss	status,0,c
 15403  00CBC2  0627               	decf	printf@width+1,f,c
 15404  00CBC4                     l1546:
 15405                           
 15406                           ;doprnt.c: 1381: if(width > c)
 15407  00CBC4  0E80               	movlw	128
 15408  00CBC6  BE28               	btfsc	printf@c,7,c
 15409  00CBC8  0E7F               	movlw	127
 15410  00CBCA  6E17               	movwf	??_printf& (0+255),c
 15411  00CBCC  5026               	movf	printf@width,w,c
 15412  00CBCE  5C28               	subwf	printf@c,w,c
 15413  00CBD0  5027               	movf	printf@width+1,w,c
 15414  00CBD2  0A80               	xorlw	128
 15415  00CBD4  5817               	subwfb	??_printf& (0+255),w,c
 15416  00CBD6  B0D8               	btfsc	status,0,c
 15417  00CBD8  D007               	goto	l1547
 15418                           
 15419                           ;doprnt.c: 1382: width -= c;
 15420  00CBDA  5028               	movf	printf@c,w,c
 15421  00CBDC  5E26               	subwf	printf@width,f,c
 15422  00CBDE  0E00               	movlw	0
 15423  00CBE0  BE28               	btfsc	printf@c,7,c
 15424  00CBE2  0EFF               	movlw	255
 15425  00CBE4  5A27               	subwfb	printf@width+1,f,c
 15426  00CBE6  D004               	goto	l1548
 15427  00CBE8                     l1547:
 15428                           
 15429                           ;doprnt.c: 1383: else
 15430                           ;doprnt.c: 1384: width = 0;
 15431  00CBE8  0E00               	movlw	0
 15432  00CBEA  6E27               	movwf	printf@width+1,c
 15433  00CBEC  0E00               	movlw	0
 15434  00CBEE  6E26               	movwf	printf@width,c
 15435  00CBF0                     l1548:
 15436                           
 15437                           ;doprnt.c: 1387: if(flag & 0x04) {
 15438  00CBF0  A425               	btfss	printf@flag,2,c
 15439  00CBF2  D014               	goto	l1549
 15440                           
 15441                           ;doprnt.c: 1392: if(flag & 0x03)
 15442  00CBF4  C025  F017         	movff	printf@flag,??_printf
 15443  00CBF8  0E03               	movlw	3
 15444  00CBFA  1617               	andwf	??_printf,f,c
 15445  00CBFC  B4D8               	btfsc	status,2,c
 15446  00CBFE  D003               	goto	l1550
 15447                           
 15448                           ;doprnt.c: 1393: (putch('-') );
 15449  00CC00  0E2D               	movlw	45
 15450  00CC02  ECE7  F054         	call	_putch
 15451  00CC06                     l1550:
 15452                           
 15453                           ;doprnt.c: 1415: if(width)
 15454  00CC06  5026               	movf	printf@width,w,c
 15455  00CC08  1027               	iorwf	printf@width+1,w,c
 15456  00CC0A  B4D8               	btfsc	status,2,c
 15457  00CC0C  D01E               	goto	l1558
 15458                           
 15459                           ;doprnt.c: 1417: (putch('0') );
 15460                           
 15461                           ;doprnt.c: 1416: do
 15462  00CC0E  0E30               	movlw	48
 15463  00CC10  ECE7  F054         	call	_putch
 15464                           
 15465                           ;doprnt.c: 1418: while(--width);
 15466  00CC14  0626               	decf	printf@width,f,c
 15467  00CC16  A0D8               	btfss	status,0,c
 15468  00CC18  0627               	decf	printf@width+1,f,c
 15469  00CC1A  D7F5               	goto	l1550
 15470  00CC1C                     l1549:
 15471                           
 15472                           ;doprnt.c: 1422: {
 15473                           ;doprnt.c: 1424: if(width
 15474                           ;doprnt.c: 1428: )
 15475  00CC1C  5026               	movf	printf@width,w,c
 15476  00CC1E  1027               	iorwf	printf@width+1,w,c
 15477  00CC20  B4D8               	btfsc	status,2,c
 15478  00CC22  D00A               	goto	u7120
 15479  00CC24                     u7110:
 15480                           
 15481                           ;doprnt.c: 1430: (putch(' ') );
 15482                           
 15483                           ;doprnt.c: 1429: do
 15484  00CC24  0E20               	movlw	32
 15485  00CC26  ECE7  F054         	call	_putch
 15486                           
 15487                           ;doprnt.c: 1431: while(--width);
 15488  00CC2A  0626               	decf	printf@width,f,c
 15489  00CC2C  A0D8               	btfss	status,0,c
 15490  00CC2E  0627               	decf	printf@width+1,f,c
 15491  00CC30  5026               	movf	printf@width,w,c
 15492  00CC32  1027               	iorwf	printf@width+1,w,c
 15493  00CC34  A4D8               	btfss	status,2,c
 15494  00CC36  D7F6               	goto	u7110
 15495  00CC38                     u7120:
 15496                           
 15497                           ;doprnt.c: 1438: if(flag & 0x03)
 15498  00CC38  C025  F017         	movff	printf@flag,??_printf
 15499  00CC3C  0E03               	movlw	3
 15500  00CC3E  1617               	andwf	??_printf,f,c
 15501  00CC40  B4D8               	btfsc	status,2,c
 15502  00CC42  D003               	goto	l1558
 15503                           
 15504                           ;doprnt.c: 1439: (putch('-') );
 15505  00CC44  0E2D               	movlw	45
 15506  00CC46  ECE7  F054         	call	_putch
 15507  00CC4A                     l1558:
 15508                           
 15509                           ;doprnt.c: 1469: }
 15510                           ;doprnt.c: 1472: prec = c;
 15511  00CC4A  C028  F01C         	movff	printf@c,printf@prec
 15512                           
 15513                           ;doprnt.c: 1474: while(prec--) {
 15514  00CC4E  D059               	goto	l1559
 15515  00CC50                     
 15516                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15517  00CC50  501C               	movf	printf@prec,w,c
 15518  00CC52  0D02               	mullw	2
 15519  00CC54  0E73               	movlw	low _dpowers
 15520  00CC56  24F3               	addwf	prodl,w,c
 15521  00CC58  6EF6               	movwf	tblptrl,c
 15522  00CC5A  0EFC               	movlw	high _dpowers
 15523  00CC5C  20F4               	addwfc	prodh,w,c
 15524  00CC5E  6EF7               	movwf	tblptrh,c
 15525  00CC60                     	if	1	;There are 3 active tblptr bytes
 15526  00CC60  6AF8               	clrf	tblptru,c
 15527  00CC62  0E00               	movlw	low (__mediumconst shr (0+16))
 15528  00CC64  22F8               	addwfc	tblptru,f,c
 15529  00CC66                     	endif
 15530  00CC66  0009               	tblrd		*+
 15531  00CC68  CFF5 F003          	movff	tablat,___lwdiv@divisor
 15532  00CC6C  000A               	tblrd		*-
 15533  00CC6E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 15534  00CC72  C023  F001         	movff	printf@val,___lwdiv@dividend
 15535  00CC76  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 15536  00CC7A  ECB3  F055         	call	___lwdiv	;wreg free
 15537  00CC7E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 15538  00CC82  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 15539  00CC86  0E00               	movlw	0
 15540  00CC88  6E0B               	movwf	___lwmod@divisor+1,c
 15541  00CC8A  0E0A               	movlw	10
 15542  00CC8C  6E0A               	movwf	___lwmod@divisor,c
 15543  00CC8E  EC6C  F055         	call	___lwmod	;wreg free
 15544  00CC92  5008               	movf	?___lwmod,w,c
 15545  00CC94  0F30               	addlw	48
 15546  00CC96  6E28               	movwf	printf@c,c
 15547                           
 15548                           ;doprnt.c: 1491: break;
 15549  00CC98  D031               	goto	l1563
 15550  00CC9A                     
 15551                           ;doprnt.c: 1499: {
 15552                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15553  00CC9A  C023  F001         	movff	printf@val,___lwdiv@dividend
 15554  00CC9E  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 15555  00CCA2  501C               	movf	printf@prec,w,c
 15556  00CCA4  0D02               	mullw	2
 15557  00CCA6  0E7D               	movlw	low _hexpowers
 15558  00CCA8  24F3               	addwf	prodl,w,c
 15559  00CCAA  6EF6               	movwf	tblptrl,c
 15560  00CCAC  0EFC               	movlw	high _hexpowers
 15561  00CCAE  20F4               	addwfc	prodh,w,c
 15562  00CCB0  6EF7               	movwf	tblptrh,c
 15563  00CCB2                     	if	1	;There are 3 active tblptr bytes
 15564  00CCB2  6AF8               	clrf	tblptru,c
 15565  00CCB4  0E00               	movlw	low (__mediumconst shr (0+16))
 15566  00CCB6  22F8               	addwfc	tblptru,f,c
 15567  00CCB8                     	endif
 15568  00CCB8  0009               	tblrd		*+
 15569  00CCBA  CFF5 F003          	movff	tablat,___lwdiv@divisor
 15570  00CCBE  000A               	tblrd		*-
 15571  00CCC0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 15572  00CCC4  ECB3  F055         	call	___lwdiv	;wreg free
 15573  00CCC8  5001               	movf	?___lwdiv,w,c
 15574  00CCCA  0B0F               	andlw	15
 15575  00CCCC  6E1B               	movwf	printf@idx,c
 15576                           
 15577                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15578  00CCCE  501B               	movf	printf@idx,w,c
 15579  00CCD0  0D01               	mullw	1
 15580  00CCD2  0EA4               	movlw	low STR_148
 15581  00CCD4  24F3               	addwf	prodl,w,c
 15582  00CCD6  6EF6               	movwf	tblptrl,c
 15583  00CCD8  0EFC               	movlw	high STR_148
 15584  00CCDA  20F4               	addwfc	prodh,w,c
 15585  00CCDC  6EF7               	movwf	tblptrh,c
 15586  00CCDE                     	if	1	;There are 3 active tblptr bytes
 15587  00CCDE  6AF8               	clrf	tblptru,c
 15588  00CCE0  0E00               	movlw	low (__mediumconst shr (0+16))
 15589  00CCE2  22F8               	addwfc	tblptru,f,c
 15590  00CCE4                     	endif
 15591  00CCE4  0008               	tblrd		*
 15592  00CCE6  CFF5 F028          	movff	tablat,printf@c
 15593                           
 15594                           ;doprnt.c: 1523: }
 15595                           
 15596                           ;doprnt.c: 1508: }
 15597                           ;doprnt.c: 1510: break;
 15598  00CCEA  D008               	goto	l1563
 15599  00CCEC  5025               	movf	printf@flag,w,c
 15600  00CCEE  0B80               	andlw	128
 15601                           
 15602                           ; Switch size 1, requested type "space"
 15603                           ; Number of cases is 2, Range of values is 0 to 128
 15604                           ; switch strategies available:
 15605                           ; Name         Instructions Cycles
 15606                           ; simple_byte            7     4 (average)
 15607                           ;	Chosen strategy is simple_byte
 15608  00CCF0  0A00               	xorlw	0	; case 0
 15609  00CCF2  B4D8               	btfsc	status,2,c
 15610  00CCF4  D7AD               	goto	l1562
 15611  00CCF6  0A80               	xorlw	128	; case 128
 15612  00CCF8  B4D8               	btfsc	status,2,c
 15613  00CCFA  D7CF               	goto	l1564
 15614  00CCFC                     l1563:
 15615                           
 15616                           ;doprnt.c: 1524: (putch(c) );
 15617  00CCFC  5028               	movf	printf@c,w,c
 15618  00CCFE  ECE7  F054         	call	_putch
 15619  00CD02                     l1559:
 15620  00CD02  061C               	decf	printf@prec,f,c
 15621  00CD04  281C               	incf	printf@prec,w,c
 15622  00CD06  A4D8               	btfss	status,2,c
 15623  00CD08  D7F1               	goto	l1561
 15624  00CD0A                     u7140:
 15625  00CD0A  C00D  FFF6         	movff	printf@f,tblptrl
 15626  00CD0E  C00E  FFF7         	movff	printf@f+1,tblptrh
 15627  00CD12  4A0D               	infsnz	printf@f,f,c
 15628  00CD14  2A0E               	incf	printf@f+1,f,c
 15629  00CD16                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15630  00CD16  6AF8               	clrf	tblptru,c
 15631  00CD18                     	endif
 15632  00CD18                     	if	0	;tblptru may be non-zero
 15633  00CD18                     	endif
 15634  00CD18  0008               	tblrd		*
 15635  00CD1A  CFF5 F028          	movff	tablat,printf@c
 15636  00CD1E  5028               	movf	printf@c,w,c
 15637  00CD20  B4D8               	btfsc	status,2,c
 15638  00CD22  0012               	return	
 15639  00CD24  D60C               	goto	l1501
 15640  00CD26                     __end_of_printf:
 15641                           	opt stack 0
 15642                           tblptru	equ	0xFF8
 15643                           tblptrh	equ	0xFF7
 15644                           tblptrl	equ	0xFF6
 15645                           tablat	equ	0xFF5
 15646                           prodh	equ	0xFF4
 15647                           prodl	equ	0xFF3
 15648                           postinc0	equ	0xFEE
 15649                           wreg	equ	0xFE8
 15650                           postinc1	equ	0xFE6
 15651                           postdec1	equ	0xFE5
 15652                           plusw1	equ	0xFE3
 15653                           fsr1h	equ	0xFE2
 15654                           fsr1l	equ	0xFE1
 15655                           indf2	equ	0xFDF
 15656                           postinc2	equ	0xFDE
 15657                           postdec2	equ	0xFDD
 15658                           plusw2	equ	0xFDB
 15659                           fsr2h	equ	0xFDA
 15660                           fsr2l	equ	0xFD9
 15661                           status	equ	0xFD8
 15662                           
 15663 ;; *************** function _putch *****************
 15664 ;; Defined at:
 15665 ;;		line 72 in file "LCD.c"
 15666 ;; Parameters:    Size  Location     Type
 15667 ;;  data            1    wreg     unsigned char 
 15668 ;; Auto vars:     Size  Location     Type
 15669 ;;  data            1    2[COMRAM] unsigned char 
 15670 ;; Return value:  Size  Location     Type
 15671 ;;                  1    wreg      void 
 15672 ;; Registers used:
 15673 ;;		wreg, status,2, status,0, cstack
 15674 ;; Tracked objects:
 15675 ;;		On entry : 0/0
 15676 ;;		On exit  : 0/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;Total ram usage:        1 bytes
 15684 ;; Hardware stack levels used:    1
 15685 ;; Hardware stack levels required when called:    1
 15686 ;; This function calls:
 15687 ;;		_lcdNibble
 15688 ;; This function is called by:
 15689 ;;		_viewLogs
 15690 ;;		_food_press
 15691 ;;		_diet_press
 15692 ;;		_which_drawer
 15693 ;;		_printf
 15694 ;; This function uses a non-reentrant model
 15695 ;;
 15696                           
 15697                           	psect	text27
 15698  00A9CE                     __ptext27:
 15699                           	opt stack 0
 15700  00A9CE                     _putch:
 15701                           	opt stack 27
 15702                           
 15703                           ;incstack = 0
 15704                           ;putch@data stored from wreg
 15705  00A9CE  6E03               	movwf	putch@data,c
 15706                           
 15707                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 15708  00A9D0  848C               	bsf	3980,2,c	;volatile
 15709                           
 15710                           ;LCD.c: 81: lcdNibble(data);
 15711  00A9D2  5003               	movf	putch@data,w,c
 15712  00A9D4  EC9C  F056         	call	_lcdNibble
 15713                           
 15714                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 15715  00A9D8  0EC8               	movlw	200
 15716  00A9DA                     u14407:
 15717  00A9DA  D000               	nop2	
 15718  00A9DC  2EE8               	decfsz	wreg,f,c
 15719  00A9DE  D7FD               	bra	u14407
 15720  00A9E0  0012               	return		;funcret
 15721  00A9E2                     __end_of_putch:
 15722                           	opt stack 0
 15723                           tblptru	equ	0xFF8
 15724                           tblptrh	equ	0xFF7
 15725                           tblptrl	equ	0xFF6
 15726                           tablat	equ	0xFF5
 15727                           prodh	equ	0xFF4
 15728                           prodl	equ	0xFF3
 15729                           postinc0	equ	0xFEE
 15730                           wreg	equ	0xFE8
 15731                           postinc1	equ	0xFE6
 15732                           postdec1	equ	0xFE5
 15733                           plusw1	equ	0xFE3
 15734                           fsr1h	equ	0xFE2
 15735                           fsr1l	equ	0xFE1
 15736                           indf2	equ	0xFDF
 15737                           postinc2	equ	0xFDE
 15738                           postdec2	equ	0xFDD
 15739                           plusw2	equ	0xFDB
 15740                           fsr2h	equ	0xFDA
 15741                           fsr2l	equ	0xFD9
 15742                           status	equ	0xFD8
 15743                           
 15744 ;; *************** function _isdigit *****************
 15745 ;; Defined at:
 15746 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 15747 ;; Parameters:    Size  Location     Type
 15748 ;;  c               1    wreg     unsigned char 
 15749 ;; Auto vars:     Size  Location     Type
 15750 ;;  c               1    2[COMRAM] unsigned char 
 15751 ;; Return value:  Size  Location     Type
 15752 ;;		None               void
 15753 ;; Registers used:
 15754 ;;		wreg, status,2, status,0
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15764 ;;Total ram usage:        3 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; This function calls:
 15767 ;;		Nothing
 15768 ;; This function is called by:
 15769 ;;		_printf
 15770 ;; This function uses a non-reentrant model
 15771 ;;
 15772                           
 15773                           	psect	text28
 15774  00A9E2                     __ptext28:
 15775                           	opt stack 0
 15776  00A9E2                     _isdigit:
 15777                           	opt stack 27
 15778                           
 15779                           ;incstack = 0
 15780                           ;isdigit@c stored from wreg
 15781  00A9E2  6E03               	movwf	isdigit@c,c
 15782  00A9E4  0E00               	movlw	0
 15783  00A9E6  6E02               	movwf	_isdigit$1635,c
 15784  00A9E8  0E3A               	movlw	58
 15785  00A9EA  6003               	cpfslt	isdigit@c,c
 15786  00A9EC  D005               	goto	l1897
 15787  00A9EE  0E2F               	movlw	47
 15788  00A9F0  6403               	cpfsgt	isdigit@c,c
 15789  00A9F2  D002               	goto	l1897
 15790  00A9F4  0E01               	movlw	1
 15791  00A9F6  6E02               	movwf	_isdigit$1635,c
 15792  00A9F8                     l1897:
 15793  00A9F8  C002  F001         	movff	_isdigit$1635,??_isdigit
 15794  00A9FC  3001               	rrcf	??_isdigit,w,c
 15795  00A9FE  0012               	return	
 15796  00AA00                     __end_of_isdigit:
 15797                           	opt stack 0
 15798                           tblptru	equ	0xFF8
 15799                           tblptrh	equ	0xFF7
 15800                           tblptrl	equ	0xFF6
 15801                           tablat	equ	0xFF5
 15802                           prodh	equ	0xFF4
 15803                           prodl	equ	0xFF3
 15804                           postinc0	equ	0xFEE
 15805                           wreg	equ	0xFE8
 15806                           postinc1	equ	0xFE6
 15807                           postdec1	equ	0xFE5
 15808                           plusw1	equ	0xFE3
 15809                           fsr1h	equ	0xFE2
 15810                           fsr1l	equ	0xFE1
 15811                           indf2	equ	0xFDF
 15812                           postinc2	equ	0xFDE
 15813                           postdec2	equ	0xFDD
 15814                           plusw2	equ	0xFDB
 15815                           fsr2h	equ	0xFDA
 15816                           fsr2l	equ	0xFD9
 15817                           status	equ	0xFD8
 15818                           
 15819 ;; *************** function ___lwmod *****************
 15820 ;; Defined at:
 15821 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;  dividend        2    7[COMRAM] unsigned int 
 15824 ;;  divisor         2    9[COMRAM] unsigned int 
 15825 ;; Auto vars:     Size  Location     Type
 15826 ;;  counter         1   11[COMRAM] unsigned char 
 15827 ;; Return value:  Size  Location     Type
 15828 ;;                  2    7[COMRAM] unsigned int 
 15829 ;; Registers used:
 15830 ;;		wreg, status,2, status,0
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15839 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15840 ;;Total ram usage:        5 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; This function calls:
 15843 ;;		Nothing
 15844 ;; This function is called by:
 15845 ;;		_displayLogs
 15846 ;;		_printf
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           	psect	text29
 15851  00AAD8                     __ptext29:
 15852                           	opt stack 0
 15853  00AAD8                     ___lwmod:
 15854                           	opt stack 27
 15855                           
 15856                           ;incstack = 0
 15857  00AAD8  500A               	movf	___lwmod@divisor,w,c
 15858  00AADA  100B               	iorwf	___lwmod@divisor+1,w,c
 15859  00AADC  B4D8               	btfsc	status,2,c
 15860  00AADE  D018               	goto	l1991
 15861  00AAE0  0E01               	movlw	1
 15862  00AAE2  6E0C               	movwf	___lwmod@counter,c
 15863  00AAE4  D004               	goto	l1986
 15864  00AAE6  90D8               	bcf	status,0,c
 15865  00AAE8  360A               	rlcf	___lwmod@divisor,f,c
 15866  00AAEA  360B               	rlcf	___lwmod@divisor+1,f,c
 15867  00AAEC  2A0C               	incf	___lwmod@counter,f,c
 15868  00AAEE                     l1986:
 15869  00AAEE  AE0B               	btfss	___lwmod@divisor+1,7,c
 15870  00AAF0  D7FA               	goto	l1987
 15871  00AAF2                     u6860:
 15872  00AAF2  500A               	movf	___lwmod@divisor,w,c
 15873  00AAF4  5C08               	subwf	___lwmod@dividend,w,c
 15874  00AAF6  500B               	movf	___lwmod@divisor+1,w,c
 15875  00AAF8  5809               	subwfb	___lwmod@dividend+1,w,c
 15876  00AAFA  A0D8               	btfss	status,0,c
 15877  00AAFC  D004               	goto	l1990
 15878  00AAFE  500A               	movf	___lwmod@divisor,w,c
 15879  00AB00  5E08               	subwf	___lwmod@dividend,f,c
 15880  00AB02  500B               	movf	___lwmod@divisor+1,w,c
 15881  00AB04  5A09               	subwfb	___lwmod@dividend+1,f,c
 15882  00AB06                     l1990:
 15883  00AB06  90D8               	bcf	status,0,c
 15884  00AB08  320B               	rrcf	___lwmod@divisor+1,f,c
 15885  00AB0A  320A               	rrcf	___lwmod@divisor,f,c
 15886  00AB0C  2E0C               	decfsz	___lwmod@counter,f,c
 15887  00AB0E  D7F1               	goto	u6860
 15888  00AB10                     l1991:
 15889  00AB10  C008  F008         	movff	___lwmod@dividend,?___lwmod
 15890  00AB14  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 15891  00AB18  0012               	return		;funcret
 15892  00AB1A                     __end_of___lwmod:
 15893                           	opt stack 0
 15894                           tblptru	equ	0xFF8
 15895                           tblptrh	equ	0xFF7
 15896                           tblptrl	equ	0xFF6
 15897                           tablat	equ	0xFF5
 15898                           prodh	equ	0xFF4
 15899                           prodl	equ	0xFF3
 15900                           postinc0	equ	0xFEE
 15901                           wreg	equ	0xFE8
 15902                           postinc1	equ	0xFE6
 15903                           postdec1	equ	0xFE5
 15904                           plusw1	equ	0xFE3
 15905                           fsr1h	equ	0xFE2
 15906                           fsr1l	equ	0xFE1
 15907                           indf2	equ	0xFDF
 15908                           postinc2	equ	0xFDE
 15909                           postdec2	equ	0xFDD
 15910                           plusw2	equ	0xFDB
 15911                           fsr2h	equ	0xFDA
 15912                           fsr2l	equ	0xFD9
 15913                           status	equ	0xFD8
 15914                           
 15915 ;; *************** function ___lwdiv *****************
 15916 ;; Defined at:
 15917 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 15918 ;; Parameters:    Size  Location     Type
 15919 ;;  dividend        2    0[COMRAM] unsigned int 
 15920 ;;  divisor         2    2[COMRAM] unsigned int 
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;  quotient        2    4[COMRAM] unsigned int 
 15923 ;;  counter         1    6[COMRAM] unsigned char 
 15924 ;; Return value:  Size  Location     Type
 15925 ;;                  2    0[COMRAM] unsigned int 
 15926 ;; Registers used:
 15927 ;;		wreg, status,2, status,0
 15928 ;; Tracked objects:
 15929 ;;		On entry : 0/0
 15930 ;;		On exit  : 0/0
 15931 ;;		Unchanged: 0/0
 15932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15933 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15934 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;Total ram usage:        7 bytes
 15938 ;; Hardware stack levels used:    1
 15939 ;; This function calls:
 15940 ;;		Nothing
 15941 ;; This function is called by:
 15942 ;;		_displayLogs
 15943 ;;		_printf
 15944 ;; This function uses a non-reentrant model
 15945 ;;
 15946                           
 15947                           	psect	text30
 15948  00AB66                     __ptext30:
 15949                           	opt stack 0
 15950  00AB66                     ___lwdiv:
 15951                           	opt stack 27
 15952                           
 15953                           ;incstack = 0
 15954  00AB66  0E00               	movlw	0
 15955  00AB68  6E06               	movwf	___lwdiv@quotient+1,c
 15956  00AB6A  0E00               	movlw	0
 15957  00AB6C  6E05               	movwf	___lwdiv@quotient,c
 15958  00AB6E  5003               	movf	___lwdiv@divisor,w,c
 15959  00AB70  1004               	iorwf	___lwdiv@divisor+1,w,c
 15960  00AB72  B4D8               	btfsc	status,2,c
 15961  00AB74  D01C               	goto	l1981
 15962  00AB76  0E01               	movlw	1
 15963  00AB78  6E07               	movwf	___lwdiv@counter,c
 15964  00AB7A  D004               	goto	l1976
 15965  00AB7C  90D8               	bcf	status,0,c
 15966  00AB7E  3603               	rlcf	___lwdiv@divisor,f,c
 15967  00AB80  3604               	rlcf	___lwdiv@divisor+1,f,c
 15968  00AB82  2A07               	incf	___lwdiv@counter,f,c
 15969  00AB84                     l1976:
 15970  00AB84  AE04               	btfss	___lwdiv@divisor+1,7,c
 15971  00AB86  D7FA               	goto	l1977
 15972  00AB88                     u6830:
 15973  00AB88  90D8               	bcf	status,0,c
 15974  00AB8A  3605               	rlcf	___lwdiv@quotient,f,c
 15975  00AB8C  3606               	rlcf	___lwdiv@quotient+1,f,c
 15976  00AB8E  5003               	movf	___lwdiv@divisor,w,c
 15977  00AB90  5C01               	subwf	___lwdiv@dividend,w,c
 15978  00AB92  5004               	movf	___lwdiv@divisor+1,w,c
 15979  00AB94  5802               	subwfb	___lwdiv@dividend+1,w,c
 15980  00AB96  A0D8               	btfss	status,0,c
 15981  00AB98  D005               	goto	l1980
 15982  00AB9A  5003               	movf	___lwdiv@divisor,w,c
 15983  00AB9C  5E01               	subwf	___lwdiv@dividend,f,c
 15984  00AB9E  5004               	movf	___lwdiv@divisor+1,w,c
 15985  00ABA0  5A02               	subwfb	___lwdiv@dividend+1,f,c
 15986  00ABA2  8005               	bsf	___lwdiv@quotient,0,c
 15987  00ABA4                     l1980:
 15988  00ABA4  90D8               	bcf	status,0,c
 15989  00ABA6  3204               	rrcf	___lwdiv@divisor+1,f,c
 15990  00ABA8  3203               	rrcf	___lwdiv@divisor,f,c
 15991  00ABAA  2E07               	decfsz	___lwdiv@counter,f,c
 15992  00ABAC  D7ED               	goto	u6830
 15993  00ABAE                     l1981:
 15994  00ABAE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 15995  00ABB2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15996  00ABB6  0012               	return		;funcret
 15997  00ABB8                     __end_of___lwdiv:
 15998                           	opt stack 0
 15999                           tblptru	equ	0xFF8
 16000                           tblptrh	equ	0xFF7
 16001                           tblptrl	equ	0xFF6
 16002                           tablat	equ	0xFF5
 16003                           prodh	equ	0xFF4
 16004                           prodl	equ	0xFF3
 16005                           postinc0	equ	0xFEE
 16006                           wreg	equ	0xFE8
 16007                           postinc1	equ	0xFE6
 16008                           postdec1	equ	0xFE5
 16009                           plusw1	equ	0xFE3
 16010                           fsr1h	equ	0xFE2
 16011                           fsr1l	equ	0xFE1
 16012                           indf2	equ	0xFDF
 16013                           postinc2	equ	0xFDE
 16014                           postdec2	equ	0xFDD
 16015                           plusw2	equ	0xFDB
 16016                           fsr2h	equ	0xFDA
 16017                           fsr2l	equ	0xFD9
 16018                           status	equ	0xFD8
 16019                           
 16020 ;; *************** function _getUserInputs *****************
 16021 ;; Defined at:
 16022 ;;		line 28 in file "operationMode.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  drawerTable     2    6[COMRAM] PTR unsigned int 
 16025 ;;		 -> mainOperation@drawerTable(16), 
 16026 ;;  dietTable       2    8[COMRAM] PTR unsigned int 
 16027 ;;		 -> mainOperation@dietTable(16), 
 16028 ;;  foodTable       2   10[COMRAM] PTR unsigned int 
 16029 ;;		 -> mainOperation@foodTable(16), 
 16030 ;; Auto vars:     Size  Location     Type
 16031 ;;  i               2   22[COMRAM] unsigned int 
 16032 ;;  data            2   20[COMRAM] unsigned int 
 16033 ;;  n               2   18[COMRAM] unsigned int 
 16034 ;;  count           2   16[COMRAM] unsigned int 
 16035 ;;  logNumber       2   14[COMRAM] unsigned int 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      void 
 16038 ;; Registers used:
 16039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16045 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16046 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16048 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16049 ;;Total ram usage:       18 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    1
 16052 ;; This function calls:
 16053 ;;		___wmul
 16054 ;;		_readEEPROM
 16055 ;; This function is called by:
 16056 ;;		_mainOperation
 16057 ;; This function uses a non-reentrant model
 16058 ;;
 16059                           
 16060                           	psect	text31
 16061  00B5CA                     __ptext31:
 16062                           	opt stack 0
 16063  00B5CA                     _getUserInputs:
 16064                           	opt stack 28
 16065                           
 16066                           ;operationMode.c: 29: unsigned int data = 0;
 16067                           
 16068                           ;incstack = 0
 16069  00B5CA  0E00               	movlw	0
 16070  00B5CC  6E16               	movwf	getUserInputs@data+1,c
 16071  00B5CE  0E00               	movlw	0
 16072  00B5D0  6E15               	movwf	getUserInputs@data,c
 16073                           
 16074                           ;operationMode.c: 30: unsigned int i = 0;
 16075  00B5D2  0E00               	movlw	0
 16076  00B5D4  6E18               	movwf	getUserInputs@i+1,c
 16077  00B5D6  0E00               	movlw	0
 16078  00B5D8  6E17               	movwf	getUserInputs@i,c
 16079                           
 16080                           ;operationMode.c: 31: unsigned int logNumber = 0;
 16081  00B5DA  0E00               	movlw	0
 16082  00B5DC  6E10               	movwf	getUserInputs@logNumber+1,c
 16083  00B5DE  0E00               	movlw	0
 16084  00B5E0  6E0F               	movwf	getUserInputs@logNumber,c
 16085                           
 16086                           ;operationMode.c: 32: unsigned int n = 0;
 16087  00B5E2  0E00               	movlw	0
 16088  00B5E4  6E14               	movwf	getUserInputs@n+1,c
 16089  00B5E6  0E00               	movlw	0
 16090  00B5E8  6E13               	movwf	getUserInputs@n,c
 16091                           
 16092                           ;operationMode.c: 33: unsigned int count = 0;
 16093  00B5EA  0E00               	movlw	0
 16094  00B5EC  6E12               	movwf	getUserInputs@count+1,c
 16095  00B5EE  0E00               	movlw	0
 16096  00B5F0  6E11               	movwf	getUserInputs@count,c
 16097                           
 16098                           ;operationMode.c: 35: logNumber = readEEPROM(250);
 16099  00B5F2  0EFA               	movlw	250
 16100  00B5F4  ECDD  F054         	call	_readEEPROM
 16101  00B5F8  6E0D               	movwf	??_getUserInputs& (0+255),c
 16102  00B5FA  500D               	movf	??_getUserInputs,w,c
 16103  00B5FC  6E0F               	movwf	getUserInputs@logNumber,c
 16104  00B5FE  6A10               	clrf	getUserInputs@logNumber+1,c
 16105                           
 16106                           ;operationMode.c: 37: if (logNumber == 0 || logNumber == 4){
 16107  00B600  500F               	movf	getUserInputs@logNumber,w,c
 16108  00B602  1010               	iorwf	getUserInputs@logNumber+1,w,c
 16109  00B604  B4D8               	btfsc	status,2,c
 16110  00B606  D005               	goto	u8590
 16111  00B608  0E04               	movlw	4
 16112  00B60A  180F               	xorwf	getUserInputs@logNumber,w,c
 16113  00B60C  1010               	iorwf	getUserInputs@logNumber+1,w,c
 16114  00B60E  A4D8               	btfss	status,2,c
 16115  00B610  D005               	goto	l120
 16116  00B612                     u8590:
 16117                           
 16118                           ;operationMode.c: 38: n = 0;
 16119  00B612  0E00               	movlw	0
 16120  00B614  6E14               	movwf	getUserInputs@n+1,c
 16121  00B616  0E00               	movlw	0
 16122  00B618  6E13               	movwf	getUserInputs@n,c
 16123                           
 16124                           ;operationMode.c: 39: }
 16125  00B61A  D010               	goto	l123
 16126  00B61C                     l120:
 16127                           
 16128                           ;operationMode.c: 40: else{
 16129                           ;operationMode.c: 41: n = (logNumber-1)*35;
 16130  00B61C  0EFF               	movlw	255
 16131  00B61E  240F               	addwf	getUserInputs@logNumber,w,c
 16132  00B620  6E01               	movwf	___wmul@multiplier,c
 16133  00B622  0EFF               	movlw	255
 16134  00B624  2010               	addwfc	getUserInputs@logNumber+1,w,c
 16135  00B626  6E02               	movwf	___wmul@multiplier+1,c
 16136  00B628  0E00               	movlw	0
 16137  00B62A  6E04               	movwf	___wmul@multiplicand+1,c
 16138  00B62C  0E23               	movlw	35
 16139  00B62E  6E03               	movwf	___wmul@multiplicand,c
 16140  00B630  EC25  F055         	call	___wmul	;wreg free
 16141  00B634  C001  F013         	movff	?___wmul,getUserInputs@n
 16142  00B638  C002  F014         	movff	?___wmul+1,getUserInputs@n+1
 16143  00B63C                     l123:
 16144                           
 16145                           ;operationMode.c: 42: }
 16146                           ;operationMode.c: 44: for (i=11; i<35; i+=3){
 16147  00B63C  0E00               	movlw	0
 16148  00B63E  6E18               	movwf	getUserInputs@i+1,c
 16149  00B640  0E0B               	movlw	11
 16150  00B642  6E17               	movwf	getUserInputs@i,c
 16151  00B644                     l7328:
 16152  00B644  5018               	movf	getUserInputs@i+1,w,c
 16153  00B646  E14D               	bnz	l126
 16154  00B648  0E23               	movlw	35
 16155  00B64A  5C17               	subwf	getUserInputs@i,w,c
 16156  00B64C  B0D8               	btfsc	status,0,c
 16157  00B64E  0012               	return	
 16158                           
 16159                           ;operationMode.c: 45: data = readEEPROM(i+n);
 16160  00B650  5017               	movf	getUserInputs@i,w,c
 16161  00B652  2413               	addwf	getUserInputs@n,w,c
 16162  00B654  ECDD  F054         	call	_readEEPROM
 16163  00B658  6E0D               	movwf	??_getUserInputs& (0+255),c
 16164  00B65A  500D               	movf	??_getUserInputs,w,c
 16165  00B65C  6E15               	movwf	getUserInputs@data,c
 16166  00B65E  6A16               	clrf	getUserInputs@data+1,c
 16167                           
 16168                           ;operationMode.c: 46: drawerTable[count] = data;
 16169  00B660  90D8               	bcf	status,0,c
 16170  00B662  3411               	rlcf	getUserInputs@count,w,c
 16171  00B664  6ED9               	movwf	fsr2l,c
 16172  00B666  3412               	rlcf	getUserInputs@count+1,w,c
 16173  00B668  6EDA               	movwf	fsr2h,c
 16174  00B66A  5007               	movf	getUserInputs@drawerTable,w,c
 16175  00B66C  26D9               	addwf	fsr2l,f,c
 16176  00B66E  5008               	movf	getUserInputs@drawerTable+1,w,c
 16177  00B670  22DA               	addwfc	fsr2h,f,c
 16178  00B672  C015  FFDE         	movff	getUserInputs@data,postinc2
 16179  00B676  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16180                           
 16181                           ;operationMode.c: 47: data = readEEPROM(i+1+n);
 16182  00B67A  5017               	movf	getUserInputs@i,w,c
 16183  00B67C  2413               	addwf	getUserInputs@n,w,c
 16184  00B67E  6E0D               	movwf	??_getUserInputs& (0+255),c
 16185  00B680  280D               	incf	??_getUserInputs,w,c
 16186  00B682  ECDD  F054         	call	_readEEPROM
 16187  00B686  6E0E               	movwf	(??_getUserInputs+1)& (0+255),c
 16188  00B688  500E               	movf	??_getUserInputs+1,w,c
 16189  00B68A  6E15               	movwf	getUserInputs@data,c
 16190  00B68C  6A16               	clrf	getUserInputs@data+1,c
 16191                           
 16192                           ;operationMode.c: 48: dietTable[count] = data;
 16193  00B68E  90D8               	bcf	status,0,c
 16194  00B690  3411               	rlcf	getUserInputs@count,w,c
 16195  00B692  6ED9               	movwf	fsr2l,c
 16196  00B694  3412               	rlcf	getUserInputs@count+1,w,c
 16197  00B696  6EDA               	movwf	fsr2h,c
 16198  00B698  5009               	movf	getUserInputs@dietTable,w,c
 16199  00B69A  26D9               	addwf	fsr2l,f,c
 16200  00B69C  500A               	movf	getUserInputs@dietTable+1,w,c
 16201  00B69E  22DA               	addwfc	fsr2h,f,c
 16202  00B6A0  C015  FFDE         	movff	getUserInputs@data,postinc2
 16203  00B6A4  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16204                           
 16205                           ;operationMode.c: 49: data = readEEPROM(i+2+n);
 16206  00B6A8  5017               	movf	getUserInputs@i,w,c
 16207  00B6AA  2413               	addwf	getUserInputs@n,w,c
 16208  00B6AC  0F02               	addlw	2
 16209  00B6AE  ECDD  F054         	call	_readEEPROM
 16210  00B6B2  6E0D               	movwf	??_getUserInputs& (0+255),c
 16211  00B6B4  500D               	movf	??_getUserInputs,w,c
 16212  00B6B6  6E15               	movwf	getUserInputs@data,c
 16213  00B6B8  6A16               	clrf	getUserInputs@data+1,c
 16214                           
 16215                           ;operationMode.c: 50: foodTable[count] = data;
 16216  00B6BA  90D8               	bcf	status,0,c
 16217  00B6BC  3411               	rlcf	getUserInputs@count,w,c
 16218  00B6BE  6ED9               	movwf	fsr2l,c
 16219  00B6C0  3412               	rlcf	getUserInputs@count+1,w,c
 16220  00B6C2  6EDA               	movwf	fsr2h,c
 16221  00B6C4  500B               	movf	getUserInputs@foodTable,w,c
 16222  00B6C6  26D9               	addwf	fsr2l,f,c
 16223  00B6C8  500C               	movf	getUserInputs@foodTable+1,w,c
 16224  00B6CA  22DA               	addwfc	fsr2h,f,c
 16225  00B6CC  C015  FFDE         	movff	getUserInputs@data,postinc2
 16226  00B6D0  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16227                           
 16228                           ;operationMode.c: 51: count += 1;
 16229  00B6D4  4A11               	infsnz	getUserInputs@count,f,c
 16230  00B6D6  2A12               	incf	getUserInputs@count+1,f,c
 16231  00B6D8  0E03               	movlw	3
 16232  00B6DA  2617               	addwf	getUserInputs@i,f,c
 16233  00B6DC  0E00               	movlw	0
 16234  00B6DE  2218               	addwfc	getUserInputs@i+1,f,c
 16235  00B6E0  D7B1               	goto	l7328
 16236  00B6E2                     l126:
 16237  00B6E2  0012               	return		;funcret
 16238  00B6E4                     __end_of_getUserInputs:
 16239                           	opt stack 0
 16240                           tblptru	equ	0xFF8
 16241                           tblptrh	equ	0xFF7
 16242                           tblptrl	equ	0xFF6
 16243                           tablat	equ	0xFF5
 16244                           prodh	equ	0xFF4
 16245                           prodl	equ	0xFF3
 16246                           postinc0	equ	0xFEE
 16247                           wreg	equ	0xFE8
 16248                           postinc1	equ	0xFE6
 16249                           postdec1	equ	0xFE5
 16250                           plusw1	equ	0xFE3
 16251                           fsr1h	equ	0xFE2
 16252                           fsr1l	equ	0xFE1
 16253                           indf2	equ	0xFDF
 16254                           postinc2	equ	0xFDE
 16255                           postdec2	equ	0xFDD
 16256                           plusw2	equ	0xFDB
 16257                           fsr2h	equ	0xFDA
 16258                           fsr2l	equ	0xFD9
 16259                           status	equ	0xFD8
 16260                           
 16261 ;; *************** function _readEEPROM *****************
 16262 ;; Defined at:
 16263 ;;		line 29 in file "EEPROMstorage.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;  address         1    wreg     unsigned char 
 16266 ;; Auto vars:     Size  Location     Type
 16267 ;;  address         1    0[COMRAM] unsigned char 
 16268 ;; Return value:  Size  Location     Type
 16269 ;;                  1    wreg      unsigned char 
 16270 ;; Registers used:
 16271 ;;		wreg, status,2
 16272 ;; Tracked objects:
 16273 ;;		On entry : 0/0
 16274 ;;		On exit  : 0/0
 16275 ;;		Unchanged: 0/0
 16276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16281 ;;Total ram usage:        1 bytes
 16282 ;; Hardware stack levels used:    1
 16283 ;; This function calls:
 16284 ;;		Nothing
 16285 ;; This function is called by:
 16286 ;;		_main
 16287 ;;		_getUserInputs
 16288 ;;		_viewLogs
 16289 ;;		_displayLogs
 16290 ;;		_standbyMode
 16291 ;;		_shiftEEPROM
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           	psect	text32
 16296  00A9BA                     __ptext32:
 16297                           	opt stack 0
 16298  00A9BA                     _readEEPROM:
 16299                           	opt stack 28
 16300                           
 16301                           ;incstack = 0
 16302                           ;readEEPROM@address stored from wreg
 16303  00A9BA  6E01               	movwf	readEEPROM@address,c
 16304  00A9BC                     
 16305                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 16306  00A9BC  B2A6               	btfsc	4006,1,c	;volsfr
 16307  00A9BE  D7FE               	goto	l6676
 16308                           
 16309                           ;EEPROMstorage.c: 32: EEADR = address;
 16310  00A9C0  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 16311                           
 16312                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 16313  00A9C4  9EA6               	bcf	4006,7,c	;volsfr
 16314                           
 16315                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 16316  00A9C6  9CA6               	bcf	4006,6,c	;volsfr
 16317                           
 16318                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 16319  00A9C8  80A6               	bsf	4006,0,c	;volsfr
 16320                           
 16321                           ;EEPROMstorage.c: 36: return( EEDATA );
 16322  00A9CA  50A8               	movf	4008,w,c	;volatile
 16323  00A9CC  0012               	return	
 16324  00A9CE                     __end_of_readEEPROM:
 16325                           	opt stack 0
 16326                           tblptru	equ	0xFF8
 16327                           tblptrh	equ	0xFF7
 16328                           tblptrl	equ	0xFF6
 16329                           tablat	equ	0xFF5
 16330                           prodh	equ	0xFF4
 16331                           prodl	equ	0xFF3
 16332                           postinc0	equ	0xFEE
 16333                           wreg	equ	0xFE8
 16334                           postinc1	equ	0xFE6
 16335                           postdec1	equ	0xFE5
 16336                           plusw1	equ	0xFE3
 16337                           fsr1h	equ	0xFE2
 16338                           fsr1l	equ	0xFE1
 16339                           indf2	equ	0xFDF
 16340                           postinc2	equ	0xFDE
 16341                           postdec2	equ	0xFDD
 16342                           plusw2	equ	0xFDB
 16343                           fsr2h	equ	0xFDA
 16344                           fsr2l	equ	0xFD9
 16345                           status	equ	0xFD8
 16346                           
 16347 ;; *************** function ___wmul *****************
 16348 ;; Defined at:
 16349 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;  multiplier      2    0[COMRAM] unsigned int 
 16352 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16353 ;; Auto vars:     Size  Location     Type
 16354 ;;  product         2    4[COMRAM] unsigned int 
 16355 ;; Return value:  Size  Location     Type
 16356 ;;                  2    0[COMRAM] unsigned int 
 16357 ;; Registers used:
 16358 ;;		wreg, status,2, status,0, prodl, prodh
 16359 ;; Tracked objects:
 16360 ;;		On entry : 0/0
 16361 ;;		On exit  : 0/0
 16362 ;;		Unchanged: 0/0
 16363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;Total ram usage:        6 bytes
 16369 ;; Hardware stack levels used:    1
 16370 ;; This function calls:
 16371 ;;		Nothing
 16372 ;; This function is called by:
 16373 ;;		_getUserInputs
 16374 ;;		_displayLogs
 16375 ;;		_standbyMode
 16376 ;;		_printf
 16377 ;;		_tock
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           	psect	text33
 16382  00AA4A                     __ptext33:
 16383                           	opt stack 0
 16384  00AA4A                     ___wmul:
 16385                           	opt stack 27
 16386                           
 16387                           ;incstack = 0
 16388  00AA4A  5001               	movf	___wmul@multiplier,w,c
 16389  00AA4C  0203               	mulwf	___wmul@multiplicand,c
 16390  00AA4E  CFF3 F005          	movff	prodl,___wmul@product
 16391  00AA52  CFF4 F006          	movff	prodh,___wmul@product+1
 16392  00AA56  5001               	movf	___wmul@multiplier,w,c
 16393  00AA58  0204               	mulwf	___wmul@multiplicand+1,c
 16394  00AA5A  50F3               	movf	prodl,w,c
 16395  00AA5C  2606               	addwf	___wmul@product+1,f,c
 16396  00AA5E  5002               	movf	___wmul@multiplier+1,w,c
 16397  00AA60  0203               	mulwf	___wmul@multiplicand,c
 16398  00AA62  50F3               	movf	prodl,w,c
 16399  00AA64  2606               	addwf	___wmul@product+1,f,c
 16400  00AA66  C005  F001         	movff	___wmul@product,?___wmul
 16401  00AA6A  C006  F002         	movff	___wmul@product+1,?___wmul+1
 16402  00AA6E  0012               	return	
 16403  00AA70                     __end_of___wmul:
 16404                           	opt stack 0
 16405                           tblptru	equ	0xFF8
 16406                           tblptrh	equ	0xFF7
 16407                           tblptrl	equ	0xFF6
 16408                           tablat	equ	0xFF5
 16409                           prodh	equ	0xFF4
 16410                           prodl	equ	0xFF3
 16411                           postinc0	equ	0xFEE
 16412                           wreg	equ	0xFE8
 16413                           postinc1	equ	0xFE6
 16414                           postdec1	equ	0xFE5
 16415                           plusw1	equ	0xFE3
 16416                           fsr1h	equ	0xFE2
 16417                           fsr1l	equ	0xFE1
 16418                           indf2	equ	0xFDF
 16419                           postinc2	equ	0xFDE
 16420                           postdec2	equ	0xFDD
 16421                           plusw2	equ	0xFDB
 16422                           fsr2h	equ	0xFDA
 16423                           fsr2l	equ	0xFD9
 16424                           status	equ	0xFD8
 16425                           
 16426 ;; *************** function _getRoundPieces *****************
 16427 ;; Defined at:
 16428 ;;		line 198 in file "operationMode.c"
 16429 ;; Parameters:    Size  Location     Type
 16430 ;;  dietType        2    0[COMRAM] unsigned int 
 16431 ;;  foodType        2    2[COMRAM] unsigned int 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  returnValue     2    6[COMRAM] unsigned int 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  2    0[COMRAM] unsigned int 
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16443 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;Total ram usage:        8 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; This function calls:
 16450 ;;		Nothing
 16451 ;; This function is called by:
 16452 ;;		_mainOperation
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text34
 16457  00B808                     __ptext34:
 16458                           	opt stack 0
 16459  00B808                     _getRoundPieces:
 16460                           	opt stack 29
 16461                           
 16462                           ;operationMode.c: 199: unsigned int returnValue = 0;
 16463                           
 16464                           ;incstack = 0
 16465  00B808  0E00               	movlw	0
 16466  00B80A  6E08               	movwf	getRoundPieces@returnValue+1,c
 16467  00B80C  0E00               	movlw	0
 16468  00B80E  6E07               	movwf	getRoundPieces@returnValue,c
 16469                           
 16470                           ;operationMode.c: 201: switch(dietType){
 16471  00B810  D060               	goto	l235
 16472  00B812                     
 16473                           ;operationMode.c: 204: if (foodType == 0){
 16474  00B812  5003               	movf	getRoundPieces@foodType,w,c
 16475  00B814  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16476  00B816  A4D8               	btfss	status,2,c
 16477  00B818  D004               	goto	l237
 16478  00B81A                     u9200:
 16479                           
 16480                           ;operationMode.c: 205: returnValue = 1;
 16481  00B81A  0E00               	movlw	0
 16482  00B81C  6E08               	movwf	getRoundPieces@returnValue+1,c
 16483  00B81E  0E01               	movlw	1
 16484  00B820  D008               	goto	L128
 16485  00B822                     l237:
 16486                           
 16487                           ;operationMode.c: 207: else if (foodType == 1){
 16488  00B822  0403               	decf	getRoundPieces@foodType,w,c
 16489  00B824  D045               	goto	L165
 16490  00B826                     
 16491                           ;operationMode.c: 213: if (foodType == 3){
 16492  00B826  0E03               	movlw	3
 16493  00B828  1803               	xorwf	getRoundPieces@foodType,w,c
 16494  00B82A  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16495  00B82C  A4D8               	btfss	status,2,c
 16496  00B82E  D003               	goto	l242
 16497  00B830  D7F4               	goto	u9200
 16498  00B832                     L128:
 16499  00B832  6E07               	movwf	getRoundPieces@returnValue,c
 16500                           
 16501                           ;operationMode.c: 215: }
 16502  00B834  D07C               	goto	l240
 16503  00B836                     l242:
 16504                           
 16505                           ;operationMode.c: 216: else if (foodType == 4){
 16506  00B836  0E04               	movlw	4
 16507  00B838  1803               	xorwf	getRoundPieces@foodType,w,c
 16508  00B83A  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16509  00B83C  B4D8               	btfsc	status,2,c
 16510  00B83E  D7ED               	goto	u9200
 16511                           
 16512                           ;operationMode.c: 219: else if (foodType == 6){
 16513                           
 16514                           ;operationMode.c: 218: }
 16515                           
 16516                           ;operationMode.c: 217: returnValue = 1;
 16517  00B840  0E06               	movlw	6
 16518  00B842  1803               	xorwf	getRoundPieces@foodType,w,c
 16519  00B844  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16520  00B846  B4D8               	btfsc	status,2,c
 16521  00B848  D036               	goto	u9450
 16522  00B84A                     
 16523                           ;operationMode.c: 222: else if (foodType == 7){
 16524  00B84A  0E07               	movlw	7
 16525  00B84C  D030               	goto	L167
 16526  00B84E                     
 16527                           ;operationMode.c: 228: if (foodType == 3){
 16528  00B84E  0E03               	movlw	3
 16529  00B850  1803               	xorwf	getRoundPieces@foodType,w,c
 16530  00B852  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16531  00B854  B4D8               	btfsc	status,2,c
 16532  00B856  D7E1               	goto	u9200
 16533                           
 16534                           ;operationMode.c: 231: else if (foodType == 4){
 16535                           
 16536                           ;operationMode.c: 230: }
 16537                           
 16538                           ;operationMode.c: 229: returnValue = 1;
 16539  00B858  0E04               	movlw	4
 16540  00B85A  1803               	xorwf	getRoundPieces@foodType,w,c
 16541  00B85C  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16542  00B85E  B4D8               	btfsc	status,2,c
 16543  00B860  D7DC               	goto	u9200
 16544                           
 16545                           ;operationMode.c: 234: else if (foodType == 5){
 16546                           
 16547                           ;operationMode.c: 233: }
 16548                           
 16549                           ;operationMode.c: 232: returnValue = 1;
 16550  00B862  0E05               	movlw	5
 16551  00B864  1803               	xorwf	getRoundPieces@foodType,w,c
 16552  00B866  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16553  00B868  B4D8               	btfsc	status,2,c
 16554  00B86A  D7D7               	goto	u9200
 16555                           
 16556                           ;operationMode.c: 237: else if (foodType == 6){
 16557                           
 16558                           ;operationMode.c: 236: }
 16559                           
 16560                           ;operationMode.c: 235: returnValue = 1;
 16561  00B86C  0E06               	movlw	6
 16562  00B86E  1803               	xorwf	getRoundPieces@foodType,w,c
 16563  00B870  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16564  00B872  A4D8               	btfss	status,2,c
 16565  00B874  D7EA               	goto	l246
 16566  00B876  D01F               	goto	u9450
 16567  00B878                     
 16568                           ;operationMode.c: 255: if (foodType == 8){
 16569                           
 16570                           ;operationMode.c: 254: case 7:
 16571                           
 16572                           ;operationMode.c: 251: }
 16573                           ;operationMode.c: 252: break;
 16574                           
 16575                           ;operationMode.c: 250: returnValue = 2;
 16576                           
 16577                           ;operationMode.c: 249: else if (foodType == 9){
 16578                           
 16579                           ;operationMode.c: 248: }
 16580                           
 16581                           ;operationMode.c: 247: returnValue = 2;
 16582                           
 16583                           ;operationMode.c: 246: if (foodType == 8){
 16584  00B878  0E08               	movlw	8
 16585  00B87A  1803               	xorwf	getRoundPieces@foodType,w,c
 16586  00B87C  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16587  00B87E  B4D8               	btfsc	status,2,c
 16588  00B880  D01A               	goto	u9450
 16589                           
 16590                           ;operationMode.c: 258: else if (foodType == 9){
 16591                           
 16592                           ;operationMode.c: 257: }
 16593                           
 16594                           ;operationMode.c: 256: returnValue = 2;
 16595  00B882  0E09               	movlw	9
 16596  00B884  D014               	goto	L167
 16597  00B886                     
 16598                           ;operationMode.c: 264: if (foodType == 8){
 16599  00B886  0E08               	movlw	8
 16600  00B888  D00B               	goto	L169
 16601  00B88A                     
 16602                           ;operationMode.c: 288: if (foodType == 8){
 16603                           
 16604                           ;operationMode.c: 287: case 10:
 16605                           
 16606                           ;operationMode.c: 284: }
 16607                           ;operationMode.c: 285: break;
 16608                           
 16609                           ;operationMode.c: 283: returnValue = 2;
 16610                           
 16611                           ;operationMode.c: 282: else if (foodType == 11){
 16612                           
 16613                           ;operationMode.c: 281: }
 16614                           
 16615                           ;operationMode.c: 280: returnValue = 1;
 16616                           
 16617                           ;operationMode.c: 279: else if (foodType == 10){
 16618                           
 16619                           ;operationMode.c: 278: }
 16620                           
 16621                           ;operationMode.c: 277: returnValue = 1;
 16622                           
 16623                           ;operationMode.c: 276: else if (foodType == 9){
 16624                           
 16625                           ;operationMode.c: 275: }
 16626                           
 16627                           ;operationMode.c: 274: returnValue = 1;
 16628                           
 16629                           ;operationMode.c: 273: if (foodType == 8){
 16630  00B88A  0E08               	movlw	8
 16631  00B88C  1803               	xorwf	getRoundPieces@foodType,w,c
 16632  00B88E  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16633  00B890  B4D8               	btfsc	status,2,c
 16634  00B892  D7C3               	goto	u9200
 16635                           
 16636                           ;operationMode.c: 291: else if (foodType == 9){
 16637                           
 16638                           ;operationMode.c: 290: }
 16639                           
 16640                           ;operationMode.c: 289: returnValue = 1;
 16641  00B894  0E09               	movlw	9
 16642  00B896  1803               	xorwf	getRoundPieces@foodType,w,c
 16643  00B898  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16644  00B89A  B4D8               	btfsc	status,2,c
 16645  00B89C  D7BE               	goto	u9200
 16646                           
 16647                           ;operationMode.c: 294: else if (foodType == 10){
 16648                           
 16649                           ;operationMode.c: 293: }
 16650                           
 16651                           ;operationMode.c: 292: returnValue = 1;
 16652  00B89E  0E0A               	movlw	10
 16653  00B8A0                     L169:
 16654  00B8A0  1803               	xorwf	getRoundPieces@foodType,w,c
 16655  00B8A2  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16656  00B8A4  B4D8               	btfsc	status,2,c
 16657  00B8A6  D7B9               	goto	u9200
 16658                           
 16659                           ;operationMode.c: 297: else if (foodType == 11){
 16660                           
 16661                           ;operationMode.c: 296: }
 16662                           
 16663                           ;operationMode.c: 295: returnValue = 1;
 16664  00B8A8  0E0B               	movlw	11
 16665  00B8AA  D001               	goto	L167
 16666  00B8AC                     
 16667                           ;operationMode.c: 303: if (foodType == 12){
 16668  00B8AC  0E0C               	movlw	12
 16669  00B8AE                     L167:
 16670  00B8AE  1803               	xorwf	getRoundPieces@foodType,w,c
 16671  00B8B0                     L165:
 16672  00B8B0  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16673  00B8B2  A4D8               	btfss	status,2,c
 16674  00B8B4  D03C               	goto	l240
 16675  00B8B6                     u9450:
 16676                           
 16677                           ;operationMode.c: 304: returnValue = 2;
 16678  00B8B6  0E00               	movlw	0
 16679  00B8B8  6E08               	movwf	getRoundPieces@returnValue+1,c
 16680  00B8BA  0E02               	movlw	2
 16681  00B8BC  D7BA               	goto	L128
 16682  00B8BE                     
 16683                           ;operationMode.c: 321: if (foodType == 12){
 16684                           
 16685                           ;operationMode.c: 320: case 16:
 16686                           
 16687                           ;operationMode.c: 317: }
 16688                           ;operationMode.c: 318: break;
 16689                           
 16690                           ;operationMode.c: 316: returnValue = 1;
 16691                           
 16692                           ;operationMode.c: 315: if (foodType == 12){
 16693                           
 16694                           ;operationMode.c: 314: case 15:
 16695                           
 16696                           ;operationMode.c: 311: }
 16697                           ;operationMode.c: 312: break;
 16698                           
 16699                           ;operationMode.c: 310: returnValue = 1;
 16700                           
 16701                           ;operationMode.c: 309: if (foodType == 12){
 16702  00B8BE  0E0C               	movlw	12
 16703  00B8C0  1803               	xorwf	getRoundPieces@foodType,w,c
 16704  00B8C2  1004               	iorwf	getRoundPieces@foodType+1,w,c
 16705  00B8C4  A4D8               	btfss	status,2,c
 16706  00B8C6  D033               	goto	l240
 16707  00B8C8  D7A8               	goto	u9200
 16708  00B8CA                     
 16709                           ;operationMode.c: 326: returnValue = 0;
 16710  00B8CA  0E00               	movlw	0
 16711  00B8CC  6E08               	movwf	getRoundPieces@returnValue+1,c
 16712  00B8CE  0E00               	movlw	0
 16713  00B8D0  D7B0               	goto	L128
 16714  00B8D2                     l235:
 16715  00B8D2  C001  F005         	movff	getRoundPieces@dietType,??_getRoundPieces
 16716  00B8D6  C002  F006         	movff	getRoundPieces@dietType+1,??_getRoundPieces+1
 16717                           
 16718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16719                           ; Switch size 1, requested type "space"
 16720                           ; Number of cases is 1, Range of values is 0 to 0
 16721                           ; switch strategies available:
 16722                           ; Name         Instructions Cycles
 16723                           ; simple_byte            4     3 (average)
 16724                           ;	Chosen strategy is simple_byte
 16725  00B8DA  5006               	movf	??_getRoundPieces+1,w,c
 16726  00B8DC  0A00               	xorlw	0	; case 0
 16727  00B8DE  A4D8               	btfss	status,2,c
 16728  00B8E0  D7F4               	goto	l295
 16729                           
 16730                           ; Switch size 1, requested type "space"
 16731                           ; Number of cases is 12, Range of values is 0 to 16
 16732                           ; switch strategies available:
 16733                           ; Name         Instructions Cycles
 16734                           ; simple_byte           37    19 (average)
 16735                           ;	Chosen strategy is simple_byte
 16736  00B8E2  5005               	movf	??_getRoundPieces,w,c
 16737  00B8E4  0A00               	xorlw	0	; case 0
 16738  00B8E6  B4D8               	btfsc	status,2,c
 16739  00B8E8  D794               	goto	l236
 16740  00B8EA  0A03               	xorlw	3	; case 3
 16741  00B8EC  B4D8               	btfsc	status,2,c
 16742  00B8EE  D79B               	goto	l241
 16743  00B8F0  0A07               	xorlw	7	; case 4
 16744  00B8F2  B4D8               	btfsc	status,2,c
 16745  00B8F4  D7AC               	goto	l249
 16746  00B8F6  0A02               	xorlw	2	; case 6
 16747  00B8F8  B4D8               	btfsc	status,2,c
 16748  00B8FA  D7BE               	goto	l259
 16749  00B8FC  0A01               	xorlw	1	; case 7
 16750  00B8FE  B4D8               	btfsc	status,2,c
 16751  00B900  D7BB               	goto	l259
 16752  00B902  0A0F               	xorlw	15	; case 8
 16753  00B904  B4D8               	btfsc	status,2,c
 16754  00B906  D7BF               	goto	l267
 16755  00B908  0A01               	xorlw	1	; case 9
 16756  00B90A  B4D8               	btfsc	status,2,c
 16757  00B90C  D7BE               	goto	l271
 16758  00B90E  0A03               	xorlw	3	; case 10
 16759  00B910  B4D8               	btfsc	status,2,c
 16760  00B912  D7BB               	goto	l271
 16761  00B914  0A07               	xorlw	7	; case 13
 16762  00B916  B4D8               	btfsc	status,2,c
 16763  00B918  D7C9               	goto	l287
 16764  00B91A  0A03               	xorlw	3	; case 14
 16765  00B91C  B4D8               	btfsc	status,2,c
 16766  00B91E  D7CF               	goto	l289
 16767  00B920  0A01               	xorlw	1	; case 15
 16768  00B922  B4D8               	btfsc	status,2,c
 16769  00B924  D7CC               	goto	l289
 16770  00B926  0A1F               	xorlw	31	; case 16
 16771  00B928  B4D8               	btfsc	status,2,c
 16772  00B92A  D7C9               	goto	l289
 16773  00B92C  D7CE               	goto	l295
 16774  00B92E                     l240:
 16775                           
 16776                           ;operationMode.c: 329: return returnValue;
 16777  00B92E  C007  F001         	movff	getRoundPieces@returnValue,?_getRoundPieces
 16778  00B932  C008  F002         	movff	getRoundPieces@returnValue+1,?_getRoundPieces+1
 16779  00B936  0012               	return		;funcret
 16780  00B938                     __end_of_getRoundPieces:
 16781                           	opt stack 0
 16782                           tblptru	equ	0xFF8
 16783                           tblptrh	equ	0xFF7
 16784                           tblptrl	equ	0xFF6
 16785                           tablat	equ	0xFF5
 16786                           prodh	equ	0xFF4
 16787                           prodl	equ	0xFF3
 16788                           postinc0	equ	0xFEE
 16789                           wreg	equ	0xFE8
 16790                           postinc1	equ	0xFE6
 16791                           postdec1	equ	0xFE5
 16792                           plusw1	equ	0xFE3
 16793                           fsr1h	equ	0xFE2
 16794                           fsr1l	equ	0xFE1
 16795                           indf2	equ	0xFDF
 16796                           postinc2	equ	0xFDE
 16797                           postdec2	equ	0xFDD
 16798                           plusw2	equ	0xFDB
 16799                           fsr2h	equ	0xFDA
 16800                           fsr2l	equ	0xFD9
 16801                           status	equ	0xFD8
 16802                           
 16803 ;; *************** function _getLongPieces *****************
 16804 ;; Defined at:
 16805 ;;		line 470 in file "operationMode.c"
 16806 ;; Parameters:    Size  Location     Type
 16807 ;;  dietType        2    0[COMRAM] unsigned int 
 16808 ;;  foodType        2    2[COMRAM] unsigned int 
 16809 ;; Auto vars:     Size  Location     Type
 16810 ;;  returnValue     2    6[COMRAM] unsigned int 
 16811 ;; Return value:  Size  Location     Type
 16812 ;;                  2    0[COMRAM] unsigned int 
 16813 ;; Registers used:
 16814 ;;		wreg, status,2, status,0
 16815 ;; Tracked objects:
 16816 ;;		On entry : 0/0
 16817 ;;		On exit  : 0/0
 16818 ;;		Unchanged: 0/0
 16819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;Total ram usage:        8 bytes
 16825 ;; Hardware stack levels used:    1
 16826 ;; This function calls:
 16827 ;;		Nothing
 16828 ;; This function is called by:
 16829 ;;		_mainOperation
 16830 ;; This function uses a non-reentrant model
 16831 ;;
 16832                           
 16833                           	psect	text35
 16834  00BA9E                     __ptext35:
 16835                           	opt stack 0
 16836  00BA9E                     _getLongPieces:
 16837                           	opt stack 29
 16838                           
 16839                           ;operationMode.c: 471: unsigned int returnValue = 0;
 16840                           
 16841                           ;incstack = 0
 16842  00BA9E  0E00               	movlw	0
 16843  00BAA0  6E08               	movwf	getLongPieces@returnValue+1,c
 16844  00BAA2  0E00               	movlw	0
 16845  00BAA4  6E07               	movwf	getLongPieces@returnValue,c
 16846                           
 16847                           ;operationMode.c: 472: switch(dietType){
 16848  00BAA6  D08F               	goto	l363
 16849  00BAA8                     
 16850                           ;operationMode.c: 475: if (foodType == 0){
 16851  00BAA8  5003               	movf	getLongPieces@foodType,w,c
 16852  00BAAA  1004               	iorwf	getLongPieces@foodType+1,w,c
 16853  00BAAC  B4D8               	btfsc	status,2,c
 16854  00BAAE  D00B               	goto	u9810
 16855                           
 16856                           ;operationMode.c: 478: else if (foodType == 1){
 16857                           
 16858                           ;operationMode.c: 477: }
 16859                           
 16860                           ;operationMode.c: 476: returnValue = 1;
 16861  00BAB0  0403               	decf	getLongPieces@foodType,w,c
 16862  00BAB2  1004               	iorwf	getLongPieces@foodType+1,w,c
 16863  00BAB4  B4D8               	btfsc	status,2,c
 16864  00BAB6  D010               	goto	u9820
 16865                           
 16866                           ;operationMode.c: 481: else if (foodType == 2){
 16867                           
 16868                           ;operationMode.c: 480: }
 16869                           
 16870                           ;operationMode.c: 479: returnValue = 2;
 16871  00BAB8  0E02               	movlw	2
 16872  00BABA  D07A               	goto	L150
 16873  00BABC                     
 16874                           ;operationMode.c: 487: if (foodType == 3){
 16875  00BABC  0E03               	movlw	3
 16876  00BABE  1803               	xorwf	getLongPieces@foodType,w,c
 16877  00BAC0  1004               	iorwf	getLongPieces@foodType+1,w,c
 16878  00BAC2  A4D8               	btfss	status,2,c
 16879  00BAC4  D004               	goto	l372
 16880  00BAC6                     u9810:
 16881                           
 16882                           ;operationMode.c: 488: returnValue = 1;
 16883  00BAC6  0E00               	movlw	0
 16884  00BAC8  6E08               	movwf	getLongPieces@returnValue+1,c
 16885  00BACA  0E01               	movlw	1
 16886  00BACC  D02E               	goto	L147
 16887  00BACE                     l372:
 16888                           
 16889                           ;operationMode.c: 490: else if (foodType == 4){
 16890  00BACE  0E04               	movlw	4
 16891  00BAD0  1803               	xorwf	getLongPieces@foodType,w,c
 16892  00BAD2  1004               	iorwf	getLongPieces@foodType+1,w,c
 16893  00BAD4  A4D8               	btfss	status,2,c
 16894  00BAD6  D004               	goto	l374
 16895  00BAD8                     u9820:
 16896                           
 16897                           ;operationMode.c: 491: returnValue = 2;
 16898  00BAD8  0E00               	movlw	0
 16899  00BADA  6E08               	movwf	getLongPieces@returnValue+1,c
 16900  00BADC  0E02               	movlw	2
 16901  00BADE  D025               	goto	L147
 16902  00BAE0                     l374:
 16903                           
 16904                           ;operationMode.c: 493: else if (foodType == 5){
 16905  00BAE0  0E05               	movlw	5
 16906  00BAE2  1803               	xorwf	getLongPieces@foodType,w,c
 16907  00BAE4  1004               	iorwf	getLongPieces@foodType+1,w,c
 16908  00BAE6  A4D8               	btfss	status,2,c
 16909  00BAE8  D013               	goto	L170
 16910  00BAEA                     u9830:
 16911                           
 16912                           ;operationMode.c: 494: returnValue = 3;
 16913  00BAEA  0E00               	movlw	0
 16914  00BAEC  6E08               	movwf	getLongPieces@returnValue+1,c
 16915  00BAEE  0E03               	movlw	3
 16916  00BAF0  D01C               	goto	L147
 16917  00BAF2                     
 16918                           ;operationMode.c: 505: if (foodType == 3){
 16919  00BAF2  0E03               	movlw	3
 16920  00BAF4  1803               	xorwf	getLongPieces@foodType,w,c
 16921  00BAF6  1004               	iorwf	getLongPieces@foodType+1,w,c
 16922  00BAF8  B4D8               	btfsc	status,2,c
 16923  00BAFA  D7E5               	goto	u9810
 16924                           
 16925                           ;operationMode.c: 508: else if (foodType == 4){
 16926                           
 16927                           ;operationMode.c: 507: }
 16928                           
 16929                           ;operationMode.c: 506: returnValue = 1;
 16930  00BAFC  0E04               	movlw	4
 16931  00BAFE  1803               	xorwf	getLongPieces@foodType,w,c
 16932  00BB00  1004               	iorwf	getLongPieces@foodType+1,w,c
 16933  00BB02  B4D8               	btfsc	status,2,c
 16934  00BB04  D7E9               	goto	u9820
 16935                           
 16936                           ;operationMode.c: 511: else if (foodType == 5){
 16937                           
 16938                           ;operationMode.c: 510: }
 16939                           
 16940                           ;operationMode.c: 509: returnValue = 2;
 16941  00BB06  0E05               	movlw	5
 16942  00BB08  1803               	xorwf	getLongPieces@foodType,w,c
 16943  00BB0A  1004               	iorwf	getLongPieces@foodType+1,w,c
 16944  00BB0C  B4D8               	btfsc	status,2,c
 16945  00BB0E  D7ED               	goto	u9830
 16946  00BB10                     L170:
 16947                           
 16948                           ;operationMode.c: 514: else if (foodType == 6){
 16949                           
 16950                           ;operationMode.c: 513: }
 16951                           
 16952                           ;operationMode.c: 512: returnValue = 3;
 16953  00BB10  0E06               	movlw	6
 16954  00BB12  1803               	xorwf	getLongPieces@foodType,w,c
 16955  00BB14  1004               	iorwf	getLongPieces@foodType+1,w,c
 16956  00BB16  B4D8               	btfsc	status,2,c
 16957  00BB18  D7D6               	goto	u9810
 16958                           
 16959                           ;operationMode.c: 517: else if (foodType == 7){
 16960                           
 16961                           ;operationMode.c: 516: }
 16962                           
 16963                           ;operationMode.c: 515: returnValue = 1;
 16964  00BB1A  0E07               	movlw	7
 16965  00BB1C  D001               	goto	L151
 16966  00BB1E                     
 16967                           ;operationMode.c: 526: else if (foodType == 9){
 16968  00BB1E  0E09               	movlw	9
 16969  00BB20                     L151:
 16970  00BB20  1803               	xorwf	getLongPieces@foodType,w,c
 16971  00BB22  1004               	iorwf	getLongPieces@foodType+1,w,c
 16972  00BB24  A4D8               	btfss	status,2,c
 16973  00BB26  D080               	goto	l370
 16974  00BB28  D7D7               	goto	u9820
 16975  00BB2A                     L147:
 16976  00BB2A  6E07               	movwf	getLongPieces@returnValue,c
 16977                           
 16978                           ;operationMode.c: 528: }
 16979                           ;operationMode.c: 529: break;
 16980  00BB2C  D07D               	goto	l370
 16981  00BB2E                     
 16982                           ;operationMode.c: 532: if (foodType == 8){
 16983  00BB2E  0E08               	movlw	8
 16984  00BB30  1803               	xorwf	getLongPieces@foodType,w,c
 16985  00BB32  1004               	iorwf	getLongPieces@foodType+1,w,c
 16986  00BB34  B4D8               	btfsc	status,2,c
 16987  00BB36  D7D0               	goto	u9820
 16988                           
 16989                           ;operationMode.c: 535: else if (foodType == 9){
 16990                           
 16991                           ;operationMode.c: 534: }
 16992                           
 16993                           ;operationMode.c: 533: returnValue = 2;
 16994  00BB38  0E09               	movlw	9
 16995  00BB3A  1803               	xorwf	getLongPieces@foodType,w,c
 16996  00BB3C  1004               	iorwf	getLongPieces@foodType+1,w,c
 16997  00BB3E  B4D8               	btfsc	status,2,c
 16998  00BB40  D7D4               	goto	u9830
 16999                           
 17000                           ;operationMode.c: 538: else if (foodType == 10){
 17001                           
 17002                           ;operationMode.c: 537: }
 17003                           
 17004                           ;operationMode.c: 536: returnValue = 3;
 17005  00BB42  0E0A               	movlw	10
 17006  00BB44  1803               	xorwf	getLongPieces@foodType,w,c
 17007  00BB46  1004               	iorwf	getLongPieces@foodType+1,w,c
 17008  00BB48  B4D8               	btfsc	status,2,c
 17009  00BB4A  D7CF               	goto	u9830
 17010  00BB4C                     
 17011                           ;operationMode.c: 541: else if (foodType == 11){
 17012  00BB4C  0E0B               	movlw	11
 17013  00BB4E  D7E8               	goto	L151
 17014  00BB50                     
 17015                           ;operationMode.c: 547: if (foodType == 8){
 17016  00BB50  0E08               	movlw	8
 17017  00BB52  1803               	xorwf	getLongPieces@foodType,w,c
 17018  00BB54  1004               	iorwf	getLongPieces@foodType+1,w,c
 17019  00BB56  B4D8               	btfsc	status,2,c
 17020  00BB58  D7B6               	goto	u9810
 17021                           
 17022                           ;operationMode.c: 550: else if (foodType == 9){
 17023                           
 17024                           ;operationMode.c: 549: }
 17025                           
 17026                           ;operationMode.c: 548: returnValue = 1;
 17027  00BB5A  0E09               	movlw	9
 17028  00BB5C  1803               	xorwf	getLongPieces@foodType,w,c
 17029  00BB5E  1004               	iorwf	getLongPieces@foodType+1,w,c
 17030  00BB60  B4D8               	btfsc	status,2,c
 17031  00BB62  D7BA               	goto	u9820
 17032                           
 17033                           ;operationMode.c: 553: else if (foodType == 10){
 17034                           
 17035                           ;operationMode.c: 552: }
 17036                           
 17037                           ;operationMode.c: 551: returnValue = 2;
 17038  00BB64  0E0A               	movlw	10
 17039  00BB66  1803               	xorwf	getLongPieces@foodType,w,c
 17040  00BB68  1004               	iorwf	getLongPieces@foodType+1,w,c
 17041  00BB6A  B4D8               	btfsc	status,2,c
 17042  00BB6C  D7AC               	goto	u9810
 17043                           
 17044                           ;operationMode.c: 556: else if (foodType == 11){
 17045                           
 17046                           ;operationMode.c: 555: }
 17047                           
 17048                           ;operationMode.c: 554: returnValue = 1;
 17049  00BB6E  0E0B               	movlw	11
 17050  00BB70  D016               	goto	L149
 17051  00BB72                     l411:
 17052                           
 17053                           ;operationMode.c: 562: if (foodType == 8){
 17054  00BB72  0E08               	movlw	8
 17055  00BB74  1803               	xorwf	getLongPieces@foodType,w,c
 17056  00BB76  1004               	iorwf	getLongPieces@foodType+1,w,c
 17057  00BB78  A4D8               	btfss	status,2,c
 17058  00BB7A  D7D1               	goto	l392
 17059  00BB7C  D7A4               	goto	u9810
 17060  00BB7E                     
 17061                           ;operationMode.c: 571: if (foodType == 8){
 17062  00BB7E  0E08               	movlw	8
 17063  00BB80  1803               	xorwf	getLongPieces@foodType,w,c
 17064  00BB82  1004               	iorwf	getLongPieces@foodType+1,w,c
 17065  00BB84  B4D8               	btfsc	status,2,c
 17066  00BB86  D7A8               	goto	u9820
 17067                           
 17068                           ;operationMode.c: 574: else if (foodType == 9){
 17069                           
 17070                           ;operationMode.c: 573: }
 17071                           
 17072                           ;operationMode.c: 572: returnValue = 2;
 17073  00BB88  0E09               	movlw	9
 17074  00BB8A  1803               	xorwf	getLongPieces@foodType,w,c
 17075  00BB8C  1004               	iorwf	getLongPieces@foodType+1,w,c
 17076  00BB8E  B4D8               	btfsc	status,2,c
 17077  00BB90  D7AC               	goto	u9830
 17078                           
 17079                           ;operationMode.c: 577: else if (foodType == 10){
 17080                           
 17081                           ;operationMode.c: 576: }
 17082                           
 17083                           ;operationMode.c: 575: returnValue = 3;
 17084  00BB92  0E0A               	movlw	10
 17085  00BB94  1803               	xorwf	getLongPieces@foodType,w,c
 17086  00BB96  1004               	iorwf	getLongPieces@foodType+1,w,c
 17087  00BB98  A4D8               	btfss	status,2,c
 17088  00BB9A  D7D8               	goto	l400
 17089  00BB9C  D7A6               	goto	u9830
 17090  00BB9E                     L149:
 17091  00BB9E  1803               	xorwf	getLongPieces@foodType,w,c
 17092  00BBA0  1004               	iorwf	getLongPieces@foodType+1,w,c
 17093  00BBA2  A4D8               	btfss	status,2,c
 17094  00BBA4  D041               	goto	l370
 17095  00BBA6  D78F               	goto	u9810
 17096  00BBA8                     l425:
 17097                           
 17098                           ;operationMode.c: 592: if (foodType == 12){
 17099  00BBA8  0E0C               	movlw	12
 17100  00BBAA  D7F9               	goto	L149
 17101  00BBAC                     
 17102                           ;operationMode.c: 598: if (foodType == 12){
 17103  00BBAC  0E0C               	movlw	12
 17104  00BBAE  D7B8               	goto	L151
 17105  00BBB0                     L150:
 17106  00BBB0  1803               	xorwf	getLongPieces@foodType,w,c
 17107  00BBB2  1004               	iorwf	getLongPieces@foodType+1,w,c
 17108  00BBB4  A4D8               	btfss	status,2,c
 17109  00BBB6  D038               	goto	l370
 17110  00BBB8  D798               	goto	u9830
 17111  00BBBA                     l431:
 17112                           
 17113                           ;operationMode.c: 610: if (foodType == 12){
 17114  00BBBA  0E0C               	movlw	12
 17115  00BBBC  D7F9               	goto	L150
 17116  00BBBE                     
 17117                           ;operationMode.c: 615: returnValue = 0;
 17118  00BBBE  0E00               	movlw	0
 17119  00BBC0  6E08               	movwf	getLongPieces@returnValue+1,c
 17120  00BBC2  0E00               	movlw	0
 17121  00BBC4  D7B2               	goto	L147
 17122  00BBC6                     l363:
 17123  00BBC6  C001  F005         	movff	getLongPieces@dietType,??_getLongPieces
 17124  00BBCA  C002  F006         	movff	getLongPieces@dietType+1,??_getLongPieces+1
 17125                           
 17126                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17127                           ; Switch size 1, requested type "space"
 17128                           ; Number of cases is 1, Range of values is 0 to 0
 17129                           ; switch strategies available:
 17130                           ; Name         Instructions Cycles
 17131                           ; simple_byte            4     3 (average)
 17132                           ;	Chosen strategy is simple_byte
 17133  00BBCE  5006               	movf	??_getLongPieces+1,w,c
 17134  00BBD0  0A00               	xorlw	0	; case 0
 17135  00BBD2  A4D8               	btfss	status,2,c
 17136  00BBD4  D7F4               	goto	l433
 17137                           
 17138                           ; Switch size 1, requested type "space"
 17139                           ; Number of cases is 13, Range of values is 2 to 17
 17140                           ; switch strategies available:
 17141                           ; Name         Instructions Cycles
 17142                           ; simple_byte           40    21 (average)
 17143                           ;	Chosen strategy is simple_byte
 17144  00BBD6  5005               	movf	??_getLongPieces,w,c
 17145  00BBD8  0A02               	xorlw	2	; case 2
 17146  00BBDA  B4D8               	btfsc	status,2,c
 17147  00BBDC  D765               	goto	l364
 17148  00BBDE  0A06               	xorlw	6	; case 4
 17149  00BBE0  B4D8               	btfsc	status,2,c
 17150  00BBE2  D76C               	goto	l371
 17151  00BBE4  0A01               	xorlw	1	; case 5
 17152  00BBE6  B4D8               	btfsc	status,2,c
 17153  00BBE8  D784               	goto	l381
 17154  00BBEA  0A02               	xorlw	2	; case 7
 17155  00BBEC  B4D8               	btfsc	status,2,c
 17156  00BBEE  D7C1               	goto	l411
 17157  00BBF0  0A0E               	xorlw	14	; case 9
 17158  00BBF2  B4D8               	btfsc	status,2,c
 17159  00BBF4  D79C               	goto	l395
 17160  00BBF6  0A03               	xorlw	3	; case 10
 17161  00BBF8  B4D8               	btfsc	status,2,c
 17162  00BBFA  D7AA               	goto	l403
 17163  00BBFC  0A01               	xorlw	1	; case 11
 17164  00BBFE  B4D8               	btfsc	status,2,c
 17165  00BC00  D7B8               	goto	l411
 17166  00BC02  0A07               	xorlw	7	; case 12
 17167  00BC04  B4D8               	btfsc	status,2,c
 17168  00BC06  D7BB               	goto	l415
 17169  00BC08  0A01               	xorlw	1	; case 13
 17170  00BC0A  B4D8               	btfsc	status,2,c
 17171  00BC0C  D7CD               	goto	l425
 17172  00BC0E  0A03               	xorlw	3	; case 14
 17173  00BC10  B4D8               	btfsc	status,2,c
 17174  00BC12  D7CA               	goto	l425
 17175  00BC14  0A01               	xorlw	1	; case 15
 17176  00BC16  B4D8               	btfsc	status,2,c
 17177  00BC18  D7C9               	goto	l427
 17178  00BC1A  0A1F               	xorlw	31	; case 16
 17179  00BC1C  B4D8               	btfsc	status,2,c
 17180  00BC1E  D7CD               	goto	l431
 17181  00BC20  0A01               	xorlw	1	; case 17
 17182  00BC22  B4D8               	btfsc	status,2,c
 17183  00BC24  D7CA               	goto	l431
 17184  00BC26  D7CB               	goto	l433
 17185  00BC28                     l370:
 17186                           
 17187                           ;operationMode.c: 618: return returnValue;
 17188  00BC28  C007  F001         	movff	getLongPieces@returnValue,?_getLongPieces
 17189  00BC2C  C008  F002         	movff	getLongPieces@returnValue+1,?_getLongPieces+1
 17190  00BC30  0012               	return		;funcret
 17191  00BC32                     __end_of_getLongPieces:
 17192                           	opt stack 0
 17193                           tblptru	equ	0xFF8
 17194                           tblptrh	equ	0xFF7
 17195                           tblptrl	equ	0xFF6
 17196                           tablat	equ	0xFF5
 17197                           prodh	equ	0xFF4
 17198                           prodl	equ	0xFF3
 17199                           postinc0	equ	0xFEE
 17200                           wreg	equ	0xFE8
 17201                           postinc1	equ	0xFE6
 17202                           postdec1	equ	0xFE5
 17203                           plusw1	equ	0xFE3
 17204                           fsr1h	equ	0xFE2
 17205                           fsr1l	equ	0xFE1
 17206                           indf2	equ	0xFDF
 17207                           postinc2	equ	0xFDE
 17208                           postdec2	equ	0xFDD
 17209                           plusw2	equ	0xFDB
 17210                           fsr2h	equ	0xFDA
 17211                           fsr2l	equ	0xFD9
 17212                           status	equ	0xFD8
 17213                           
 17214 ;; *************** function _getFlatPieces *****************
 17215 ;; Defined at:
 17216 ;;		line 334 in file "operationMode.c"
 17217 ;; Parameters:    Size  Location     Type
 17218 ;;  dietType        2    0[COMRAM] unsigned int 
 17219 ;;  foodType        2    2[COMRAM] unsigned int 
 17220 ;; Auto vars:     Size  Location     Type
 17221 ;;  returnValue     2    6[COMRAM] unsigned int 
 17222 ;; Return value:  Size  Location     Type
 17223 ;;                  2    0[COMRAM] unsigned int 
 17224 ;; Registers used:
 17225 ;;		wreg, status,2, status,0
 17226 ;; Tracked objects:
 17227 ;;		On entry : 0/0
 17228 ;;		On exit  : 0/0
 17229 ;;		Unchanged: 0/0
 17230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17234 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17235 ;;Total ram usage:        8 bytes
 17236 ;; Hardware stack levels used:    1
 17237 ;; This function calls:
 17238 ;;		Nothing
 17239 ;; This function is called by:
 17240 ;;		_mainOperation
 17241 ;; This function uses a non-reentrant model
 17242 ;;
 17243                           
 17244                           	psect	text36
 17245  00B938                     __ptext36:
 17246                           	opt stack 0
 17247  00B938                     _getFlatPieces:
 17248                           	opt stack 29
 17249                           
 17250                           ;operationMode.c: 335: unsigned int returnValue = 0;
 17251                           
 17252                           ;incstack = 0
 17253  00B938  0E00               	movlw	0
 17254  00B93A  6E08               	movwf	getFlatPieces@returnValue+1,c
 17255  00B93C  0E00               	movlw	0
 17256  00B93E  6E07               	movwf	getFlatPieces@returnValue,c
 17257                           
 17258                           ;operationMode.c: 337: switch(dietType){
 17259  00B940  D07B               	goto	l299
 17260  00B942                     
 17261                           ;operationMode.c: 340: if (foodType == 0){
 17262  00B942  5003               	movf	getFlatPieces@foodType,w,c
 17263  00B944  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17264  00B946  A4D8               	btfss	status,2,c
 17265  00B948  D004               	goto	l301
 17266  00B94A                     u9490:
 17267                           
 17268                           ;operationMode.c: 341: returnValue = 1;
 17269  00B94A  0E00               	movlw	0
 17270  00B94C  6E08               	movwf	getFlatPieces@returnValue+1,c
 17271  00B94E  0E01               	movlw	1
 17272  00B950  D020               	goto	L157
 17273  00B952                     l301:
 17274                           
 17275                           ;operationMode.c: 343: else if (foodType == 1){
 17276  00B952  0403               	decf	getFlatPieces@foodType,w,c
 17277  00B954  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17278  00B956  A4D8               	btfss	status,2,c
 17279  00B958  D09D               	goto	l304
 17280  00B95A                     u9500:
 17281                           
 17282                           ;operationMode.c: 344: returnValue = 2;
 17283  00B95A  0E00               	movlw	0
 17284  00B95C  6E08               	movwf	getFlatPieces@returnValue+1,c
 17285  00B95E  0E02               	movlw	2
 17286  00B960  D018               	goto	L157
 17287  00B962                     
 17288                           ;operationMode.c: 349: if (foodType == 3){
 17289  00B962  0E03               	movlw	3
 17290  00B964  1803               	xorwf	getFlatPieces@foodType,w,c
 17291  00B966  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17292  00B968  B4D8               	btfsc	status,2,c
 17293  00B96A  D7EF               	goto	u9490
 17294                           
 17295                           ;operationMode.c: 352: else if (foodType == 4){
 17296                           
 17297                           ;operationMode.c: 351: }
 17298                           
 17299                           ;operationMode.c: 350: returnValue = 1;
 17300  00B96C  0E04               	movlw	4
 17301  00B96E  1803               	xorwf	getFlatPieces@foodType,w,c
 17302  00B970  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17303  00B972  B4D8               	btfsc	status,2,c
 17304  00B974  D7F2               	goto	u9500
 17305                           
 17306                           ;operationMode.c: 355: else if (foodType == 6){
 17307                           
 17308                           ;operationMode.c: 354: }
 17309                           
 17310                           ;operationMode.c: 353: returnValue = 2;
 17311  00B976  0E06               	movlw	6
 17312  00B978  1803               	xorwf	getFlatPieces@foodType,w,c
 17313  00B97A  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17314  00B97C  B4D8               	btfsc	status,2,c
 17315  00B97E  D7E5               	goto	u9490
 17316  00B980                     l310:
 17317                           
 17318                           ;operationMode.c: 358: else if (foodType == 7){
 17319  00B980  0E07               	movlw	7
 17320  00B982  1803               	xorwf	getFlatPieces@foodType,w,c
 17321  00B984  D7E7               	goto	L168
 17322  00B986                     
 17323                           ;operationMode.c: 364: if (foodType == 3){
 17324  00B986  0E03               	movlw	3
 17325  00B988  1803               	xorwf	getFlatPieces@foodType,w,c
 17326  00B98A  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17327  00B98C  A4D8               	btfss	status,2,c
 17328  00B98E  D003               	goto	l314
 17329  00B990  D7DC               	goto	u9490
 17330  00B992                     L157:
 17331  00B992  6E07               	movwf	getFlatPieces@returnValue,c
 17332                           
 17333                           ;operationMode.c: 366: }
 17334  00B994  D07F               	goto	l304
 17335  00B996                     l314:
 17336                           
 17337                           ;operationMode.c: 367: else if (foodType == 4){
 17338  00B996  0E04               	movlw	4
 17339  00B998  1803               	xorwf	getFlatPieces@foodType,w,c
 17340  00B99A  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17341  00B99C  B4D8               	btfsc	status,2,c
 17342  00B99E  D7D5               	goto	u9490
 17343                           
 17344                           ;operationMode.c: 370: else if (foodType == 5){
 17345                           
 17346                           ;operationMode.c: 369: }
 17347                           
 17348                           ;operationMode.c: 368: returnValue = 1;
 17349  00B9A0  0E05               	movlw	5
 17350  00B9A2  1803               	xorwf	getFlatPieces@foodType,w,c
 17351  00B9A4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17352  00B9A6  B4D8               	btfsc	status,2,c
 17353  00B9A8  D7D0               	goto	u9490
 17354                           
 17355                           ;operationMode.c: 373: else if (foodType == 6){
 17356                           
 17357                           ;operationMode.c: 372: }
 17358                           
 17359                           ;operationMode.c: 371: returnValue = 1;
 17360  00B9AA  0E06               	movlw	6
 17361  00B9AC  1803               	xorwf	getFlatPieces@foodType,w,c
 17362  00B9AE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17363  00B9B0  B4D8               	btfsc	status,2,c
 17364  00B9B2  D7D3               	goto	u9500
 17365                           
 17366                           ;operationMode.c: 375: }
 17367                           
 17368                           ;operationMode.c: 374: returnValue = 2;
 17369  00B9B4  D7E5               	goto	l310
 17370  00B9B6                     
 17371                           ;operationMode.c: 382: if (foodType == 8){
 17372  00B9B6  0E08               	movlw	8
 17373  00B9B8  1803               	xorwf	getFlatPieces@foodType,w,c
 17374  00B9BA  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17375  00B9BC  A4D8               	btfss	status,2,c
 17376  00B9BE  D022               	goto	l340
 17377  00B9C0  D7C4               	goto	u9490
 17378  00B9C2                     
 17379                           ;operationMode.c: 391: if (foodType == 8){
 17380  00B9C2  0E08               	movlw	8
 17381  00B9C4  1803               	xorwf	getFlatPieces@foodType,w,c
 17382  00B9C6  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17383  00B9C8  B4D8               	btfsc	status,2,c
 17384  00B9CA  D7C7               	goto	u9500
 17385  00B9CC                     
 17386                           ;operationMode.c: 394: else if (foodType == 11){
 17387  00B9CC  0E0B               	movlw	11
 17388  00B9CE  D7D9               	goto	L163
 17389  00B9D0                     
 17390                           ;operationMode.c: 400: if (foodType == 8){
 17391  00B9D0  0E08               	movlw	8
 17392  00B9D2  1803               	xorwf	getFlatPieces@foodType,w,c
 17393  00B9D4  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17394  00B9D6  B4D8               	btfsc	status,2,c
 17395  00B9D8  D7B8               	goto	u9490
 17396                           
 17397                           ;operationMode.c: 403: else if (foodType == 9){
 17398                           
 17399                           ;operationMode.c: 402: }
 17400                           
 17401                           ;operationMode.c: 401: returnValue = 1;
 17402  00B9DA  0E09               	movlw	9
 17403  00B9DC  1803               	xorwf	getFlatPieces@foodType,w,c
 17404  00B9DE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17405  00B9E0  B4D8               	btfsc	status,2,c
 17406  00B9E2  D7B3               	goto	u9490
 17407                           
 17408                           ;operationMode.c: 406: else if (foodType == 10){
 17409                           
 17410                           ;operationMode.c: 405: }
 17411                           
 17412                           ;operationMode.c: 404: returnValue = 1;
 17413  00B9E4  0E0A               	movlw	10
 17414  00B9E6  1803               	xorwf	getFlatPieces@foodType,w,c
 17415  00B9E8  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17416  00B9EA  B4D8               	btfsc	status,2,c
 17417  00B9EC  D7B6               	goto	u9500
 17418                           
 17419                           ;operationMode.c: 409: else if (foodType == 11){
 17420                           
 17421                           ;operationMode.c: 408: }
 17422                           
 17423                           ;operationMode.c: 407: returnValue = 2;
 17424  00B9EE  0E0B               	movlw	11
 17425  00B9F0                     L159:
 17426  00B9F0  1803               	xorwf	getFlatPieces@foodType,w,c
 17427  00B9F2  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17428  00B9F4  A4D8               	btfss	status,2,c
 17429  00B9F6  D04E               	goto	l304
 17430  00B9F8  D7A8               	goto	u9490
 17431  00B9FA                     
 17432                           ;operationMode.c: 415: if (foodType == 8){
 17433  00B9FA  0E08               	movlw	8
 17434  00B9FC  1803               	xorwf	getFlatPieces@foodType,w,c
 17435  00B9FE  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17436  00BA00  B4D8               	btfsc	status,2,c
 17437  00BA02  D7AB               	goto	u9500
 17438  00BA04                     l340:
 17439                           
 17440                           ;operationMode.c: 418: else if (foodType == 9){
 17441  00BA04  0E09               	movlw	9
 17442  00BA06  D7BD               	goto	L163
 17443  00BA08                     
 17444                           ;operationMode.c: 424: if (foodType == 8){
 17445  00BA08  0E08               	movlw	8
 17446  00BA0A  1803               	xorwf	getFlatPieces@foodType,w,c
 17447  00BA0C  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17448  00BA0E  B4D8               	btfsc	status,2,c
 17449  00BA10  D79C               	goto	u9490
 17450                           
 17451                           ;operationMode.c: 427: else if (foodType == 9){
 17452                           
 17453                           ;operationMode.c: 426: }
 17454                           
 17455                           ;operationMode.c: 425: returnValue = 1;
 17456  00BA12  0E09               	movlw	9
 17457  00BA14  1803               	xorwf	getFlatPieces@foodType,w,c
 17458  00BA16  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17459  00BA18  B4D8               	btfsc	status,2,c
 17460  00BA1A  D797               	goto	u9490
 17461                           
 17462                           ;operationMode.c: 430: else if (foodType == 10){
 17463                           
 17464                           ;operationMode.c: 429: }
 17465                           
 17466                           ;operationMode.c: 428: returnValue = 1;
 17467  00BA1C  0E0A               	movlw	10
 17468  00BA1E  1803               	xorwf	getFlatPieces@foodType,w,c
 17469  00BA20  1004               	iorwf	getFlatPieces@foodType+1,w,c
 17470  00BA22  A4D8               	btfss	status,2,c
 17471  00BA24  D7D3               	goto	l328
 17472  00BA26  D791               	goto	u9490
 17473  00BA28                     
 17474                           ;operationMode.c: 445: if (foodType == 12){
 17475  00BA28  0E0C               	movlw	12
 17476  00BA2A  D7AB               	goto	L163
 17477  00BA2C                     
 17478                           ;operationMode.c: 457: if (foodType == 12){
 17479  00BA2C  0E0C               	movlw	12
 17480  00BA2E  D7E0               	goto	L159
 17481  00BA30                     
 17482                           ;operationMode.c: 462: returnValue = 0;
 17483  00BA30  0E00               	movlw	0
 17484  00BA32  6E08               	movwf	getFlatPieces@returnValue+1,c
 17485  00BA34  0E00               	movlw	0
 17486  00BA36  D7AD               	goto	L157
 17487  00BA38                     l299:
 17488  00BA38  C001  F005         	movff	getFlatPieces@dietType,??_getFlatPieces
 17489  00BA3C  C002  F006         	movff	getFlatPieces@dietType+1,??_getFlatPieces+1
 17490                           
 17491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17492                           ; Switch size 1, requested type "space"
 17493                           ; Number of cases is 1, Range of values is 0 to 0
 17494                           ; switch strategies available:
 17495                           ; Name         Instructions Cycles
 17496                           ; simple_byte            4     3 (average)
 17497                           ;	Chosen strategy is simple_byte
 17498  00BA40  5006               	movf	??_getFlatPieces+1,w,c
 17499  00BA42  0A00               	xorlw	0	; case 0
 17500  00BA44  A4D8               	btfss	status,2,c
 17501  00BA46  D7F4               	goto	l359
 17502                           
 17503                           ; Switch size 1, requested type "space"
 17504                           ; Number of cases is 12, Range of values is 1 to 17
 17505                           ; switch strategies available:
 17506                           ; Name         Instructions Cycles
 17507                           ; simple_byte           37    19 (average)
 17508                           ;	Chosen strategy is simple_byte
 17509  00BA48  5005               	movf	??_getFlatPieces,w,c
 17510  00BA4A  0A01               	xorlw	1	; case 1
 17511  00BA4C  B4D8               	btfsc	status,2,c
 17512  00BA4E  D779               	goto	l300
 17513  00BA50  0A02               	xorlw	2	; case 3
 17514  00BA52  B4D8               	btfsc	status,2,c
 17515  00BA54  D786               	goto	l305
 17516  00BA56  0A06               	xorlw	6	; case 5
 17517  00BA58  B4D8               	btfsc	status,2,c
 17518  00BA5A  D795               	goto	l313
 17519  00BA5C  0A03               	xorlw	3	; case 6
 17520  00BA5E  B4D8               	btfsc	status,2,c
 17521  00BA60  D7AA               	goto	l323
 17522  00BA62  0A0E               	xorlw	14	; case 8
 17523  00BA64  B4D8               	btfsc	status,2,c
 17524  00BA66  D7AD               	goto	l327
 17525  00BA68  0A02               	xorlw	2	; case 10
 17526  00BA6A  B4D8               	btfsc	status,2,c
 17527  00BA6C  D7B1               	goto	l331
 17528  00BA6E  0A01               	xorlw	1	; case 11
 17529  00BA70  B4D8               	btfsc	status,2,c
 17530  00BA72  D7C3               	goto	l339
 17531  00BA74  0A07               	xorlw	7	; case 12
 17532  00BA76  B4D8               	btfsc	status,2,c
 17533  00BA78  D7C7               	goto	l343
 17534  00BA7A  0A01               	xorlw	1	; case 13
 17535  00BA7C  B4D8               	btfsc	status,2,c
 17536  00BA7E  D7D6               	goto	l357
 17537  00BA80  0A03               	xorlw	3	; case 14
 17538  00BA82  B4D8               	btfsc	status,2,c
 17539  00BA84  D7D1               	goto	l353
 17540  00BA86  0A01               	xorlw	1	; case 15
 17541  00BA88  B4D8               	btfsc	status,2,c
 17542  00BA8A  D7D0               	goto	l357
 17543  00BA8C  0A1E               	xorlw	30	; case 17
 17544  00BA8E  B4D8               	btfsc	status,2,c
 17545  00BA90  D7CD               	goto	l357
 17546  00BA92  D7CE               	goto	l359
 17547  00BA94                     l304:
 17548                           
 17549                           ;operationMode.c: 465: return returnValue;
 17550  00BA94  C007  F001         	movff	getFlatPieces@returnValue,?_getFlatPieces
 17551  00BA98  C008  F002         	movff	getFlatPieces@returnValue+1,?_getFlatPieces+1
 17552  00BA9C  0012               	return		;funcret
 17553  00BA9E                     __end_of_getFlatPieces:
 17554                           	opt stack 0
 17555                           tblptru	equ	0xFF8
 17556                           tblptrh	equ	0xFF7
 17557                           tblptrl	equ	0xFF6
 17558                           tablat	equ	0xFF5
 17559                           prodh	equ	0xFF4
 17560                           prodl	equ	0xFF3
 17561                           postinc0	equ	0xFEE
 17562                           wreg	equ	0xFE8
 17563                           postinc1	equ	0xFE6
 17564                           postdec1	equ	0xFE5
 17565                           plusw1	equ	0xFE3
 17566                           fsr1h	equ	0xFE2
 17567                           fsr1l	equ	0xFE1
 17568                           indf2	equ	0xFDF
 17569                           postinc2	equ	0xFDE
 17570                           postdec2	equ	0xFDD
 17571                           plusw2	equ	0xFDB
 17572                           fsr2h	equ	0xFDA
 17573                           fsr2l	equ	0xFD9
 17574                           status	equ	0xFD8
 17575                           
 17576 ;; *************** function _findDrawerIndex *****************
 17577 ;; Defined at:
 17578 ;;		line 185 in file "operationMode.c"
 17579 ;; Parameters:    Size  Location     Type
 17580 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 17581 ;;		 -> mainOperation@drawerTable(16), 
 17582 ;;  sortedDrawer    2    2[COMRAM] unsigned int 
 17583 ;; Auto vars:     Size  Location     Type
 17584 ;;  i               2    8[COMRAM] unsigned int 
 17585 ;;  returnValue     2    6[COMRAM] unsigned int 
 17586 ;; Return value:  Size  Location     Type
 17587 ;;                  2    0[COMRAM] unsigned int 
 17588 ;; Registers used:
 17589 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17590 ;; Tracked objects:
 17591 ;;		On entry : 0/0
 17592 ;;		On exit  : 0/0
 17593 ;;		Unchanged: 0/0
 17594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17595 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17596 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17598 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17599 ;;Total ram usage:       10 bytes
 17600 ;; Hardware stack levels used:    1
 17601 ;; This function calls:
 17602 ;;		Nothing
 17603 ;; This function is called by:
 17604 ;;		_mainOperation
 17605 ;; This function uses a non-reentrant model
 17606 ;;
 17607                           
 17608                           	psect	text37
 17609  00AC66                     __ptext37:
 17610                           	opt stack 0
 17611  00AC66                     _findDrawerIndex:
 17612                           	opt stack 29
 17613                           
 17614                           ;operationMode.c: 186: unsigned int returnValue = 0;
 17615                           
 17616                           ;incstack = 0
 17617  00AC66  0E00               	movlw	0
 17618  00AC68  6E08               	movwf	findDrawerIndex@returnValue+1,c
 17619  00AC6A  0E00               	movlw	0
 17620  00AC6C  6E07               	movwf	findDrawerIndex@returnValue,c
 17621                           
 17622                           ;operationMode.c: 187: unsigned int i = 0;
 17623  00AC6E  0E00               	movlw	0
 17624  00AC70  6E0A               	movwf	findDrawerIndex@i+1,c
 17625  00AC72  0E00               	movlw	0
 17626  00AC74  6E09               	movwf	findDrawerIndex@i,c
 17627                           
 17628                           ;operationMode.c: 189: for (i=0; i<8; i++){
 17629  00AC76  0E00               	movlw	0
 17630  00AC78  6E0A               	movwf	findDrawerIndex@i+1,c
 17631  00AC7A  0E00               	movlw	0
 17632  00AC7C  6E09               	movwf	findDrawerIndex@i,c
 17633  00AC7E  500A               	movf	findDrawerIndex@i+1,w,c
 17634  00AC80  E11D               	bnz	l230
 17635  00AC82  D018               	goto	L164
 17636  00AC84                     
 17637                           ;operationMode.c: 190: if(drawerTable[i] == sortedDrawerValue){
 17638  00AC84  90D8               	bcf	status,0,c
 17639  00AC86  3409               	rlcf	findDrawerIndex@i,w,c
 17640  00AC88  6ED9               	movwf	fsr2l,c
 17641  00AC8A  340A               	rlcf	findDrawerIndex@i+1,w,c
 17642  00AC8C  6EDA               	movwf	fsr2h,c
 17643  00AC8E  5001               	movf	findDrawerIndex@drawerTable,w,c
 17644  00AC90  26D9               	addwf	fsr2l,f,c
 17645  00AC92  5002               	movf	findDrawerIndex@drawerTable+1,w,c
 17646  00AC94  22DA               	addwfc	fsr2h,f,c
 17647  00AC96  5003               	movf	findDrawerIndex@sortedDrawerValue,w,c
 17648  00AC98  18DE               	xorwf	postinc2,w,c
 17649  00AC9A  E108               	bnz	l7626
 17650  00AC9C  5004               	movf	findDrawerIndex@sortedDrawerValue+1,w,c
 17651  00AC9E  18DE               	xorwf	postinc2,w,c
 17652  00ACA0  A4D8               	btfss	status,2,c
 17653  00ACA2  D004               	goto	l231
 17654                           
 17655                           ;operationMode.c: 191: returnValue = i;
 17656  00ACA4  C009  F007         	movff	findDrawerIndex@i,findDrawerIndex@returnValue
 17657  00ACA8  C00A  F008         	movff	findDrawerIndex@i+1,findDrawerIndex@returnValue+1
 17658  00ACAC                     l231:
 17659  00ACAC                     l7626:
 17660  00ACAC  4A09               	infsnz	findDrawerIndex@i,f,c
 17661  00ACAE  2A0A               	incf	findDrawerIndex@i+1,f,c
 17662  00ACB0  500A               	movf	findDrawerIndex@i+1,w,c
 17663  00ACB2  E104               	bnz	u9190
 17664  00ACB4                     L164:
 17665  00ACB4  0E08               	movlw	8
 17666  00ACB6  5C09               	subwf	findDrawerIndex@i,w,c
 17667  00ACB8  A0D8               	btfss	status,0,c
 17668  00ACBA  D7E4               	goto	l229
 17669  00ACBC                     u9190:
 17670  00ACBC                     l230:
 17671                           
 17672                           ;operationMode.c: 192: }
 17673                           ;operationMode.c: 193: }
 17674                           ;operationMode.c: 194: return returnValue;
 17675  00ACBC  C007  F001         	movff	findDrawerIndex@returnValue,?_findDrawerIndex
 17676  00ACC0  C008  F002         	movff	findDrawerIndex@returnValue+1,?_findDrawerIndex+1
 17677  00ACC4  0012               	return		;funcret
 17678  00ACC6                     __end_of_findDrawerIndex:
 17679                           	opt stack 0
 17680                           tblptru	equ	0xFF8
 17681                           tblptrh	equ	0xFF7
 17682                           tblptrl	equ	0xFF6
 17683                           tablat	equ	0xFF5
 17684                           prodh	equ	0xFF4
 17685                           prodl	equ	0xFF3
 17686                           postinc0	equ	0xFEE
 17687                           wreg	equ	0xFE8
 17688                           postinc1	equ	0xFE6
 17689                           postdec1	equ	0xFE5
 17690                           plusw1	equ	0xFE3
 17691                           fsr1h	equ	0xFE2
 17692                           fsr1l	equ	0xFE1
 17693                           indf2	equ	0xFDF
 17694                           postinc2	equ	0xFDE
 17695                           postdec2	equ	0xFDD
 17696                           plusw2	equ	0xFDB
 17697                           fsr2h	equ	0xFDA
 17698                           fsr2l	equ	0xFD9
 17699                           status	equ	0xFD8
 17700                           
 17701 ;; *************** function _initLCD *****************
 17702 ;; Defined at:
 17703 ;;		line 27 in file "LCD.c"
 17704 ;; Parameters:    Size  Location     Type
 17705 ;;		None
 17706 ;; Auto vars:     Size  Location     Type
 17707 ;;		None
 17708 ;; Return value:  Size  Location     Type
 17709 ;;                  1    wreg      void 
 17710 ;; Registers used:
 17711 ;;		wreg, status,2, status,0, cstack
 17712 ;; Tracked objects:
 17713 ;;		On entry : 0/0
 17714 ;;		On exit  : 0/0
 17715 ;;		Unchanged: 0/0
 17716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17721 ;;Total ram usage:        1 bytes
 17722 ;; Hardware stack levels used:    1
 17723 ;; Hardware stack levels required when called:    2
 17724 ;; This function calls:
 17725 ;;		_lcdInst
 17726 ;; This function is called by:
 17727 ;;		_main
 17728 ;; This function uses a non-reentrant model
 17729 ;;
 17730                           
 17731                           	psect	text38
 17732  00AB1A                     __ptext38:
 17733                           	opt stack 0
 17734  00AB1A                     _initLCD:
 17735                           	opt stack 28
 17736                           
 17737                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 17738                           
 17739                           ;incstack = 0
 17740  00AB1A  0EC3               	movlw	195
 17741  00AB1C  6E04               	movwf	??_initLCD& (0+255),c
 17742  00AB1E  0ECD               	movlw	205
 17743  00AB20                     u14417:
 17744  00AB20  2EE8               	decfsz	wreg,f,c
 17745  00AB22  D7FE               	bra	u14417
 17746  00AB24  2E04               	decfsz	??_initLCD& (0+255),f,c
 17747  00AB26  D7FC               	bra	u14417
 17748  00AB28  F000               	nop	
 17749                           
 17750                           ;LCD.c: 36: lcdInst(0b00110011);
 17751  00AB2A  0E33               	movlw	51
 17752  00AB2C  ECD3  F054         	call	_lcdInst
 17753                           
 17754                           ;LCD.c: 37: lcdInst(0b00110010);
 17755  00AB30  0E32               	movlw	50
 17756  00AB32  ECD3  F054         	call	_lcdInst
 17757                           
 17758                           ;LCD.c: 38: lcdInst(0b00101000);
 17759  00AB36  0E28               	movlw	40
 17760  00AB38  ECD3  F054         	call	_lcdInst
 17761                           
 17762                           ;LCD.c: 39: lcdInst(0b00001111);
 17763  00AB3C  0E0F               	movlw	15
 17764  00AB3E  ECD3  F054         	call	_lcdInst
 17765                           
 17766                           ;LCD.c: 40: lcdInst(0b00000110);
 17767  00AB42  0E06               	movlw	6
 17768  00AB44  ECD3  F054         	call	_lcdInst
 17769                           
 17770                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 17771  00AB48  0E01               	movlw	1
 17772  00AB4A  ECD3  F054         	call	_lcdInst
 17773  00AB4E  0EC3               	movlw	195
 17774  00AB50  6E04               	movwf	??_initLCD& (0+255),c
 17775  00AB52  0ECD               	movlw	205
 17776  00AB54                     u14427:
 17777  00AB54  2EE8               	decfsz	wreg,f,c
 17778  00AB56  D7FE               	bra	u14427
 17779  00AB58  2E04               	decfsz	??_initLCD& (0+255),f,c
 17780  00AB5A  D7FC               	bra	u14427
 17781  00AB5C  F000               	nop	
 17782                           
 17783                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 17784  00AB5E  0E0F               	movlw	15
 17785  00AB60  ECD3  F054         	call	_lcdInst
 17786  00AB64  0012               	return		;funcret
 17787  00AB66                     __end_of_initLCD:
 17788                           	opt stack 0
 17789                           tblptru	equ	0xFF8
 17790                           tblptrh	equ	0xFF7
 17791                           tblptrl	equ	0xFF6
 17792                           tablat	equ	0xFF5
 17793                           prodh	equ	0xFF4
 17794                           prodl	equ	0xFF3
 17795                           postinc0	equ	0xFEE
 17796                           wreg	equ	0xFE8
 17797                           postinc1	equ	0xFE6
 17798                           postdec1	equ	0xFE5
 17799                           plusw1	equ	0xFE3
 17800                           fsr1h	equ	0xFE2
 17801                           fsr1l	equ	0xFE1
 17802                           indf2	equ	0xFDF
 17803                           postinc2	equ	0xFDE
 17804                           postdec2	equ	0xFDD
 17805                           plusw2	equ	0xFDB
 17806                           fsr2h	equ	0xFDA
 17807                           fsr2l	equ	0xFD9
 17808                           status	equ	0xFD8
 17809                           
 17810 ;; *************** function _lcdInst *****************
 17811 ;; Defined at:
 17812 ;;		line 13 in file "LCD.c"
 17813 ;; Parameters:    Size  Location     Type
 17814 ;;  data            1    wreg     unsigned char 
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;  data            1    2[COMRAM] unsigned char 
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  1    wreg      void 
 17819 ;; Registers used:
 17820 ;;		wreg, status,2, status,0, cstack
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17830 ;;Total ram usage:        1 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; Hardware stack levels required when called:    1
 17833 ;; This function calls:
 17834 ;;		_lcdNibble
 17835 ;; This function is called by:
 17836 ;;		_main
 17837 ;;		_mainOperation
 17838 ;;		_viewLogs
 17839 ;;		_displayLogs
 17840 ;;		_food_press
 17841 ;;		_diet_press
 17842 ;;		_which_drawer
 17843 ;;		_standbyMode
 17844 ;;		_initLCD
 17845 ;; This function uses a non-reentrant model
 17846 ;;
 17847                           
 17848                           	psect	text39
 17849  00A9A6                     __ptext39:
 17850                           	opt stack 0
 17851  00A9A6                     _lcdInst:
 17852                           	opt stack 27
 17853                           
 17854                           ;incstack = 0
 17855                           ;lcdInst@data stored from wreg
 17856  00A9A6  6E03               	movwf	lcdInst@data,c
 17857                           
 17858                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 17859  00A9A8  948C               	bcf	3980,2,c	;volatile
 17860                           
 17861                           ;LCD.c: 22: lcdNibble(data);
 17862  00A9AA  5003               	movf	lcdInst@data,w,c
 17863  00A9AC  EC9C  F056         	call	_lcdNibble
 17864                           
 17865                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 17866  00A9B0  0EC8               	movlw	200
 17867  00A9B2                     u14437:
 17868  00A9B2  D000               	nop2	
 17869  00A9B4  2EE8               	decfsz	wreg,f,c
 17870  00A9B6  D7FD               	bra	u14437
 17871  00A9B8  0012               	return		;funcret
 17872  00A9BA                     __end_of_lcdInst:
 17873                           	opt stack 0
 17874                           tblptru	equ	0xFF8
 17875                           tblptrh	equ	0xFF7
 17876                           tblptrl	equ	0xFF6
 17877                           tablat	equ	0xFF5
 17878                           prodh	equ	0xFF4
 17879                           prodl	equ	0xFF3
 17880                           postinc0	equ	0xFEE
 17881                           wreg	equ	0xFE8
 17882                           postinc1	equ	0xFE6
 17883                           postdec1	equ	0xFE5
 17884                           plusw1	equ	0xFE3
 17885                           fsr1h	equ	0xFE2
 17886                           fsr1l	equ	0xFE1
 17887                           indf2	equ	0xFDF
 17888                           postinc2	equ	0xFDE
 17889                           postdec2	equ	0xFDD
 17890                           plusw2	equ	0xFDB
 17891                           fsr2h	equ	0xFDA
 17892                           fsr2l	equ	0xFD9
 17893                           status	equ	0xFD8
 17894                           
 17895 ;; *************** function _lcdNibble *****************
 17896 ;; Defined at:
 17897 ;;		line 48 in file "LCD.c"
 17898 ;; Parameters:    Size  Location     Type
 17899 ;;  data            1    wreg     unsigned char 
 17900 ;; Auto vars:     Size  Location     Type
 17901 ;;  data            1    1[COMRAM] unsigned char 
 17902 ;;  temp            1    0[COMRAM] unsigned char 
 17903 ;; Return value:  Size  Location     Type
 17904 ;;                  1    wreg      void 
 17905 ;; Registers used:
 17906 ;;		wreg, status,2, status,0
 17907 ;; Tracked objects:
 17908 ;;		On entry : 0/0
 17909 ;;		On exit  : 0/0
 17910 ;;		Unchanged: 0/0
 17911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17916 ;;Total ram usage:        2 bytes
 17917 ;; Hardware stack levels used:    1
 17918 ;; This function calls:
 17919 ;;		Nothing
 17920 ;; This function is called by:
 17921 ;;		_lcdInst
 17922 ;;		_putch
 17923 ;; This function uses a non-reentrant model
 17924 ;;
 17925                           
 17926                           	psect	text40
 17927  00AD38                     __ptext40:
 17928                           	opt stack 0
 17929  00AD38                     _lcdNibble:
 17930                           	opt stack 27
 17931                           
 17932                           ;incstack = 0
 17933                           ;lcdNibble@data stored from wreg
 17934  00AD38  6E02               	movwf	lcdNibble@data,c
 17935                           
 17936                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 17937  00AD3A  5002               	movf	lcdNibble@data,w,c
 17938  00AD3C  0BF0               	andlw	240
 17939  00AD3E  6E01               	movwf	lcdNibble@temp,c
 17940                           
 17941                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 17942  00AD40  508C               	movf	3980,w,c	;volatile
 17943  00AD42  0B0F               	andlw	15
 17944  00AD44  6E8C               	movwf	3980,c	;volatile
 17945                           
 17946                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 17947  00AD46  5001               	movf	lcdNibble@temp,w,c
 17948  00AD48  108C               	iorwf	3980,w,c	;volatile
 17949  00AD4A  6E8C               	movwf	3980,c	;volatile
 17950                           
 17951                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 17952  00AD4C  0E00               	movlw	0
 17953  00AD4E  BEF2               	btfsc	intcon,7,c	;volatile
 17954  00AD50  0E01               	movlw	1
 17955  00AD52  6E78               	movwf	_LCDinterruptState,c
 17956  00AD54  9EF2               	bcf	intcon,7,c	;volatile
 17957  00AD56  868C               	bsf	3980,3,c	;volatile
 17958  00AD58  0E53               	movlw	83
 17959  00AD5A                     u14447:
 17960  00AD5A  2EE8               	decfsz	wreg,f,c
 17961  00AD5C  D7FE               	bra	u14447
 17962  00AD5E  F000               	nop	
 17963  00AD60  968C               	bcf	3980,3,c	;volatile
 17964  00AD62  0EC8               	movlw	200
 17965  00AD64                     u14457:
 17966  00AD64  D000               	nop2	
 17967  00AD66  2EE8               	decfsz	wreg,f,c
 17968  00AD68  D7FD               	bra	u14457
 17969  00AD6A  B078               	btfsc	_LCDinterruptState,0,c
 17970  00AD6C  D002               	bra	u6785
 17971  00AD6E  9EF2               	bcf	intcon,7,c	;volatile
 17972  00AD70  D001               	bra	u6786
 17973  00AD72                     u6785:
 17974  00AD72  8EF2               	bsf	intcon,7,c	;volatile
 17975  00AD74                     u6786:
 17976                           
 17977                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 17978  00AD74  3802               	swapf	lcdNibble@data,w,c
 17979  00AD76  0BF0               	andlw	240
 17980  00AD78  6E02               	movwf	lcdNibble@data,c
 17981                           
 17982                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 17983  00AD7A  5002               	movf	lcdNibble@data,w,c
 17984  00AD7C  0BF0               	andlw	240
 17985  00AD7E  6E01               	movwf	lcdNibble@temp,c
 17986                           
 17987                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 17988  00AD80  508C               	movf	3980,w,c	;volatile
 17989  00AD82  0B0F               	andlw	15
 17990  00AD84  6E8C               	movwf	3980,c	;volatile
 17991                           
 17992                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 17993  00AD86  5001               	movf	lcdNibble@temp,w,c
 17994  00AD88  108C               	iorwf	3980,w,c	;volatile
 17995  00AD8A  6E8C               	movwf	3980,c	;volatile
 17996                           
 17997                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 17998  00AD8C  0E00               	movlw	0
 17999  00AD8E  BEF2               	btfsc	intcon,7,c	;volatile
 18000  00AD90  0E01               	movlw	1
 18001  00AD92  6E78               	movwf	_LCDinterruptState,c
 18002  00AD94  9EF2               	bcf	intcon,7,c	;volatile
 18003  00AD96  868C               	bsf	3980,3,c	;volatile
 18004  00AD98  0E53               	movlw	83
 18005  00AD9A                     u14467:
 18006  00AD9A  2EE8               	decfsz	wreg,f,c
 18007  00AD9C  D7FE               	bra	u14467
 18008  00AD9E  F000               	nop	
 18009  00ADA0  968C               	bcf	3980,3,c	;volatile
 18010  00ADA2  0EC8               	movlw	200
 18011  00ADA4                     u14477:
 18012  00ADA4  D000               	nop2	
 18013  00ADA6  2EE8               	decfsz	wreg,f,c
 18014  00ADA8  D7FD               	bra	u14477
 18015  00ADAA  B078               	btfsc	_LCDinterruptState,0,c
 18016  00ADAC  D002               	bra	u6795
 18017  00ADAE  9EF2               	bcf	intcon,7,c	;volatile
 18018  00ADB0  D001               	bra	u6796
 18019  00ADB2                     u6795:
 18020  00ADB2  8EF2               	bsf	intcon,7,c	;volatile
 18021  00ADB4                     u6796:
 18022  00ADB4  0012               	return		;funcret
 18023  00ADB6                     __end_of_lcdNibble:
 18024                           	opt stack 0
 18025                           tblptru	equ	0xFF8
 18026                           tblptrh	equ	0xFF7
 18027                           tblptrl	equ	0xFF6
 18028                           tablat	equ	0xFF5
 18029                           prodh	equ	0xFF4
 18030                           prodl	equ	0xFF3
 18031                           intcon	equ	0xFF2
 18032                           postinc0	equ	0xFEE
 18033                           wreg	equ	0xFE8
 18034                           postinc1	equ	0xFE6
 18035                           postdec1	equ	0xFE5
 18036                           plusw1	equ	0xFE3
 18037                           fsr1h	equ	0xFE2
 18038                           fsr1l	equ	0xFE1
 18039                           indf2	equ	0xFDF
 18040                           postinc2	equ	0xFDE
 18041                           postdec2	equ	0xFDD
 18042                           plusw2	equ	0xFDB
 18043                           fsr2h	equ	0xFDA
 18044                           fsr2l	equ	0xFD9
 18045                           status	equ	0xFD8
 18046                           
 18047 ;; *************** function _initEEPROM *****************
 18048 ;; Defined at:
 18049 ;;		line 40 in file "EEPROMstorage.c"
 18050 ;; Parameters:    Size  Location     Type
 18051 ;;		None
 18052 ;; Auto vars:     Size  Location     Type
 18053 ;;  i               2    2[COMRAM] unsigned int 
 18054 ;; Return value:  Size  Location     Type
 18055 ;;                  1    wreg      void 
 18056 ;; Registers used:
 18057 ;;		wreg, status,2, status,0, cstack
 18058 ;; Tracked objects:
 18059 ;;		On entry : 0/0
 18060 ;;		On exit  : 0/0
 18061 ;;		Unchanged: 0/0
 18062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18064 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18066 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18067 ;;Total ram usage:        2 bytes
 18068 ;; Hardware stack levels used:    1
 18069 ;; Hardware stack levels required when called:    1
 18070 ;; This function calls:
 18071 ;;		_writeEEPROM
 18072 ;; This function is called by:
 18073 ;;		_main
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           	psect	text41
 18078  00AA24                     __ptext41:
 18079                           	opt stack 0
 18080  00AA24                     _initEEPROM:
 18081                           	opt stack 29
 18082                           
 18083                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 18084                           
 18085                           ;incstack = 0
 18086  00AA24  0E00               	movlw	0
 18087  00AA26  6E04               	movwf	initEEPROM@i+1,c
 18088  00AA28  0E00               	movlw	0
 18089  00AA2A  6E03               	movwf	initEEPROM@i,c
 18090                           
 18091                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 18092  00AA2C  0E00               	movlw	0
 18093  00AA2E  6E04               	movwf	initEEPROM@i+1,c
 18094  00AA30  0E00               	movlw	0
 18095  00AA32  6E03               	movwf	initEEPROM@i,c
 18096  00AA34                     l9234:
 18097  00AA34  0404               	decf	initEEPROM@i+1,w,c
 18098  00AA36  B0D8               	btfsc	status,0,c
 18099  00AA38  0012               	return	
 18100                           
 18101                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 18102  00AA3A  0E00               	movlw	0
 18103  00AA3C  6E01               	movwf	writeEEPROM@data,c
 18104  00AA3E  5003               	movf	initEEPROM@i,w,c
 18105  00AA40  EC38  F055         	call	_writeEEPROM
 18106  00AA44  4A03               	infsnz	initEEPROM@i,f,c
 18107  00AA46  2A04               	incf	initEEPROM@i+1,f,c
 18108  00AA48  D7F5               	goto	l9234
 18109  00AA4A                     __end_of_initEEPROM:
 18110                           	opt stack 0
 18111                           tblptru	equ	0xFF8
 18112                           tblptrh	equ	0xFF7
 18113                           tblptrl	equ	0xFF6
 18114                           tablat	equ	0xFF5
 18115                           prodh	equ	0xFF4
 18116                           prodl	equ	0xFF3
 18117                           intcon	equ	0xFF2
 18118                           postinc0	equ	0xFEE
 18119                           wreg	equ	0xFE8
 18120                           postinc1	equ	0xFE6
 18121                           postdec1	equ	0xFE5
 18122                           plusw1	equ	0xFE3
 18123                           fsr1h	equ	0xFE2
 18124                           fsr1l	equ	0xFE1
 18125                           indf2	equ	0xFDF
 18126                           postinc2	equ	0xFDE
 18127                           postdec2	equ	0xFDD
 18128                           plusw2	equ	0xFDB
 18129                           fsr2h	equ	0xFDA
 18130                           fsr2l	equ	0xFD9
 18131                           status	equ	0xFD8
 18132                           
 18133 ;; *************** function _writeEEPROM *****************
 18134 ;; Defined at:
 18135 ;;		line 10 in file "EEPROMstorage.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;  address         1    wreg     unsigned char 
 18138 ;;  data            1    0[COMRAM] unsigned char 
 18139 ;; Auto vars:     Size  Location     Type
 18140 ;;  address         1    1[COMRAM] unsigned char 
 18141 ;; Return value:  Size  Location     Type
 18142 ;;                  1    wreg      void 
 18143 ;; Registers used:
 18144 ;;		wreg, status,2
 18145 ;; Tracked objects:
 18146 ;;		On entry : 0/0
 18147 ;;		On exit  : 0/0
 18148 ;;		Unchanged: 0/0
 18149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18150 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18154 ;;Total ram usage:        2 bytes
 18155 ;; Hardware stack levels used:    1
 18156 ;; This function calls:
 18157 ;;		Nothing
 18158 ;; This function is called by:
 18159 ;;		_standbyMode
 18160 ;;		_initEEPROM
 18161 ;;		_shiftEEPROM
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           	psect	text42
 18166  00AA70                     __ptext42:
 18167                           	opt stack 0
 18168  00AA70                     _writeEEPROM:
 18169                           	opt stack 29
 18170                           
 18171                           ;incstack = 0
 18172                           ;writeEEPROM@address stored from wreg
 18173  00AA70  6E02               	movwf	writeEEPROM@address,c
 18174  00AA72                     
 18175                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 18176  00AA72  B2A6               	btfsc	4006,1,c	;volsfr
 18177  00AA74  D7FE               	goto	l7268
 18178                           
 18179                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 18180  00AA76  84A6               	bsf	4006,2,c	;volsfr
 18181                           
 18182                           ;EEPROMstorage.c: 14: EEADR=address;
 18183  00AA78  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18184                           
 18185                           ;EEPROMstorage.c: 15: EEDATA=data;
 18186  00AA7C  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18187                           
 18188                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 18189  00AA80  9EA6               	bcf	4006,7,c	;volsfr
 18190                           
 18191                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 18192  00AA82  9CA6               	bcf	4006,6,c	;volsfr
 18193                           
 18194                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 18195  00AA84  9EF2               	bcf	intcon,7,c	;volatile
 18196                           
 18197                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 18198  00AA86  0E55               	movlw	85
 18199  00AA88  6EA7               	movwf	4007,c	;volsfr
 18200                           
 18201                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 18202  00AA8A  0EAA               	movlw	170
 18203  00AA8C  6EA7               	movwf	4007,c	;volsfr
 18204                           
 18205                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 18206  00AA8E  82A6               	bsf	4006,1,c	;volsfr
 18207                           
 18208                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 18209  00AA90  8EF2               	bsf	intcon,7,c	;volatile
 18210  00AA92  B2A6               	btfsc	4006,1,c	;volsfr
 18211  00AA94  D7FE               	goto	l1255
 18212                           
 18213                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 18214  00AA96  94A6               	bcf	4006,2,c	;volsfr
 18215  00AA98  0012               	return		;funcret
 18216  00AA9A                     __end_of_writeEEPROM:
 18217                           	opt stack 0
 18218                           tblptru	equ	0xFF8
 18219                           tblptrh	equ	0xFF7
 18220                           tblptrl	equ	0xFF6
 18221                           tablat	equ	0xFF5
 18222                           prodh	equ	0xFF4
 18223                           prodl	equ	0xFF3
 18224                           intcon	equ	0xFF2
 18225                           postinc0	equ	0xFEE
 18226                           wreg	equ	0xFE8
 18227                           postinc1	equ	0xFE6
 18228                           postdec1	equ	0xFE5
 18229                           plusw1	equ	0xFE3
 18230                           fsr1h	equ	0xFE2
 18231                           fsr1l	equ	0xFE1
 18232                           indf2	equ	0xFDF
 18233                           postinc2	equ	0xFDE
 18234                           postdec2	equ	0xFDD
 18235                           plusw2	equ	0xFDB
 18236                           fsr2h	equ	0xFDA
 18237                           fsr2l	equ	0xFD9
 18238                           status	equ	0xFD8
 18239                           
 18240 ;; *************** function _UART_Init *****************
 18241 ;; Defined at:
 18242 ;;		line 197 in file "UART_PIC.c"
 18243 ;; Parameters:    Size  Location     Type
 18244 ;;  baud            4   14[COMRAM] long 
 18245 ;; Auto vars:     Size  Location     Type
 18246 ;;		None
 18247 ;; Return value:  Size  Location     Type
 18248 ;;                  1    wreg      void 
 18249 ;; Registers used:
 18250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18251 ;; Tracked objects:
 18252 ;;		On entry : 0/0
 18253 ;;		On exit  : 0/0
 18254 ;;		Unchanged: 0/0
 18255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18256 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;Total ram usage:        8 bytes
 18261 ;; Hardware stack levels used:    1
 18262 ;; Hardware stack levels required when called:    1
 18263 ;; This function calls:
 18264 ;;		___aldiv
 18265 ;; This function is called by:
 18266 ;;		_main
 18267 ;; This function uses a non-reentrant model
 18268 ;;
 18269                           
 18270                           	psect	text43
 18271  00AE38                     __ptext43:
 18272                           	opt stack 0
 18273  00AE38                     _UART_Init:
 18274                           	opt stack 29
 18275                           
 18276                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 18277                           
 18278                           ;incstack = 0
 18279  00AE38  0E00               	movlw	0
 18280  00AE3A  6E01               	movwf	___aldiv@dividend,c
 18281  00AE3C  0E5A               	movlw	90
 18282  00AE3E  6E02               	movwf	___aldiv@dividend+1,c
 18283  00AE40  0E62               	movlw	98
 18284  00AE42  6E03               	movwf	___aldiv@dividend+2,c
 18285  00AE44  0E02               	movlw	2
 18286  00AE46  6E04               	movwf	___aldiv@dividend+3,c
 18287  00AE48  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 18288  00AE4C  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 18289  00AE50  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 18290  00AE54  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 18291  00AE58  0E06               	movlw	6
 18292  00AE5A                     u12095:
 18293  00AE5A  90D8               	bcf	status,0,c
 18294  00AE5C  3613               	rlcf	??_UART_Init,f,c
 18295  00AE5E  3614               	rlcf	??_UART_Init+1,f,c
 18296  00AE60  3615               	rlcf	??_UART_Init+2,f,c
 18297  00AE62  3616               	rlcf	??_UART_Init+3,f,c
 18298  00AE64  2EE8               	decfsz	wreg,f,c
 18299  00AE66  D7F9               	goto	u12095
 18300  00AE68  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 18301  00AE6C  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 18302  00AE70  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 18303  00AE74  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 18304  00AE78  EC14  F058         	call	___aldiv	;wreg free
 18305  00AE7C  0401               	decf	?___aldiv,w,c
 18306  00AE7E  6EAF               	movwf	4015,c	;volatile
 18307                           
 18308                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 18309  00AE80  9CAC               	bcf	4012,6,c	;volatile
 18310                           
 18311                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 18312  00AE82  98AC               	bcf	4012,4,c	;volatile
 18313                           
 18314                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 18315  00AE84  8AAC               	bsf	4012,5,c	;volatile
 18316                           
 18317                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 18318  00AE86  9CAB               	bcf	4011,6,c	;volatile
 18319                           
 18320                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 18321  00AE88  88AB               	bsf	4011,4,c	;volatile
 18322                           
 18323                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 18324  00AE8A  EE20 F008          	lfsr	2,8
 18325  00AE8E  506E               	movf	_UART,w,c
 18326  00AE90  26D9               	addwf	fsr2l,f,c
 18327  00AE92  506F               	movf	_UART+1,w,c
 18328  00AE94  22DA               	addwfc	fsr2h,f,c
 18329  00AE96  0E01               	movlw	1
 18330  00AE98  6EDF               	movwf	indf2,c
 18331                           
 18332                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 18333  00AE9A  EE20 F009          	lfsr	2,9
 18334  00AE9E  506E               	movf	_UART,w,c
 18335  00AEA0  26D9               	addwf	fsr2l,f,c
 18336  00AEA2  506F               	movf	_UART+1,w,c
 18337  00AEA4  22DA               	addwfc	fsr2h,f,c
 18338  00AEA6  0E01               	movlw	1
 18339  00AEA8  6EDF               	movwf	indf2,c
 18340                           
 18341                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 18342  00AEAA  0E40               	movlw	low _arr_dataRX
 18343  00AEAC  0101               	movlb	1	; () banked
 18344  00AEAE  6FEE               	movwf	(_uart+4)& (0+255),b	;volatile
 18345  00AEB0  0E02               	movlw	high _arr_dataRX
 18346  00AEB2  6FEF               	movwf	(_uart+5)& (0+255),b	;volatile
 18347                           
 18348                           ; BSR set to: 1
 18349                           ;UART_PIC.c: 229: TRISC6 = 0;
 18350  00AEB4  9C94               	bcf	3988,6,c	;volatile
 18351                           
 18352                           ; BSR set to: 1
 18353                           ;UART_PIC.c: 230: TRISC7 = 1;
 18354  00AEB6  8E94               	bsf	3988,7,c	;volatile
 18355                           
 18356                           ; BSR set to: 1
 18357                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 18358  00AEB8  8EAB               	bsf	4011,7,c	;volatile
 18359                           
 18360                           ; BSR set to: 1
 18361  00AEBA  0012               	return		;funcret
 18362  00AEBC                     __end_of_UART_Init:
 18363                           	opt stack 0
 18364                           tblptru	equ	0xFF8
 18365                           tblptrh	equ	0xFF7
 18366                           tblptrl	equ	0xFF6
 18367                           tablat	equ	0xFF5
 18368                           prodh	equ	0xFF4
 18369                           prodl	equ	0xFF3
 18370                           intcon	equ	0xFF2
 18371                           postinc0	equ	0xFEE
 18372                           wreg	equ	0xFE8
 18373                           postinc1	equ	0xFE6
 18374                           postdec1	equ	0xFE5
 18375                           plusw1	equ	0xFE3
 18376                           fsr1h	equ	0xFE2
 18377                           fsr1l	equ	0xFE1
 18378                           indf2	equ	0xFDF
 18379                           postinc2	equ	0xFDE
 18380                           postdec2	equ	0xFDD
 18381                           plusw2	equ	0xFDB
 18382                           fsr2h	equ	0xFDA
 18383                           fsr2l	equ	0xFD9
 18384                           status	equ	0xFD8
 18385                           
 18386 ;; *************** function ___aldiv *****************
 18387 ;; Defined at:
 18388 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 18389 ;; Parameters:    Size  Location     Type
 18390 ;;  dividend        4    0[COMRAM] long 
 18391 ;;  divisor         4    4[COMRAM] long 
 18392 ;; Auto vars:     Size  Location     Type
 18393 ;;  quotient        4   10[COMRAM] long 
 18394 ;;  sign            1    9[COMRAM] unsigned char 
 18395 ;;  counter         1    8[COMRAM] unsigned char 
 18396 ;; Return value:  Size  Location     Type
 18397 ;;                  4    0[COMRAM] long 
 18398 ;; Registers used:
 18399 ;;		wreg, status,2, status,0
 18400 ;; Tracked objects:
 18401 ;;		On entry : 0/0
 18402 ;;		On exit  : 0/0
 18403 ;;		Unchanged: 0/0
 18404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18405 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18408 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;Total ram usage:       14 bytes
 18410 ;; Hardware stack levels used:    1
 18411 ;; This function calls:
 18412 ;;		Nothing
 18413 ;; This function is called by:
 18414 ;;		_UART_Init
 18415 ;; This function uses a non-reentrant model
 18416 ;;
 18417                           
 18418                           	psect	text44
 18419  00B028                     __ptext44:
 18420                           	opt stack 0
 18421  00B028                     ___aldiv:
 18422                           	opt stack 29
 18423                           
 18424                           ; BSR set to: 1
 18425                           ;incstack = 0
 18426  00B028  0E00               	movlw	0
 18427  00B02A  6E0A               	movwf	___aldiv@sign,c
 18428  00B02C  AE08               	btfss	___aldiv@divisor+3,7,c
 18429  00B02E  D00A               	goto	l1623
 18430  00B030  1E08               	comf	___aldiv@divisor+3,f,c
 18431  00B032  1E07               	comf	___aldiv@divisor+2,f,c
 18432  00B034  1E06               	comf	___aldiv@divisor+1,f,c
 18433  00B036  6C05               	negf	___aldiv@divisor,c
 18434  00B038  0E00               	movlw	0
 18435  00B03A  2206               	addwfc	___aldiv@divisor+1,f,c
 18436  00B03C  2207               	addwfc	___aldiv@divisor+2,f,c
 18437  00B03E  2208               	addwfc	___aldiv@divisor+3,f,c
 18438  00B040  0E01               	movlw	1
 18439  00B042  6E0A               	movwf	___aldiv@sign,c
 18440  00B044                     l1623:
 18441  00B044  AE04               	btfss	___aldiv@dividend+3,7,c
 18442  00B046  D00A               	goto	l1624
 18443  00B048  1E04               	comf	___aldiv@dividend+3,f,c
 18444  00B04A  1E03               	comf	___aldiv@dividend+2,f,c
 18445  00B04C  1E02               	comf	___aldiv@dividend+1,f,c
 18446  00B04E  6C01               	negf	___aldiv@dividend,c
 18447  00B050  0E00               	movlw	0
 18448  00B052  2202               	addwfc	___aldiv@dividend+1,f,c
 18449  00B054  2203               	addwfc	___aldiv@dividend+2,f,c
 18450  00B056  2204               	addwfc	___aldiv@dividend+3,f,c
 18451  00B058  0E01               	movlw	1
 18452  00B05A  1A0A               	xorwf	___aldiv@sign,f,c
 18453  00B05C                     l1624:
 18454  00B05C  0E00               	movlw	0
 18455  00B05E  6E0B               	movwf	___aldiv@quotient,c
 18456  00B060  0E00               	movlw	0
 18457  00B062  6E0C               	movwf	___aldiv@quotient+1,c
 18458  00B064  0E00               	movlw	0
 18459  00B066  6E0D               	movwf	___aldiv@quotient+2,c
 18460  00B068  0E00               	movlw	0
 18461  00B06A  6E0E               	movwf	___aldiv@quotient+3,c
 18462  00B06C  5005               	movf	___aldiv@divisor,w,c
 18463  00B06E  1006               	iorwf	___aldiv@divisor+1,w,c
 18464  00B070  1007               	iorwf	___aldiv@divisor+2,w,c
 18465  00B072  1008               	iorwf	___aldiv@divisor+3,w,c
 18466  00B074  B4D8               	btfsc	status,2,c
 18467  00B076  D02A               	goto	l1631
 18468  00B078  0E01               	movlw	1
 18469  00B07A  6E09               	movwf	___aldiv@counter,c
 18470  00B07C  D006               	goto	l1626
 18471  00B07E  90D8               	bcf	status,0,c
 18472  00B080  3605               	rlcf	___aldiv@divisor,f,c
 18473  00B082  3606               	rlcf	___aldiv@divisor+1,f,c
 18474  00B084  3607               	rlcf	___aldiv@divisor+2,f,c
 18475  00B086  3608               	rlcf	___aldiv@divisor+3,f,c
 18476  00B088  2A09               	incf	___aldiv@counter,f,c
 18477  00B08A                     l1626:
 18478  00B08A  AE08               	btfss	___aldiv@divisor+3,7,c
 18479  00B08C  D7F8               	goto	l1627
 18480  00B08E                     u12060:
 18481  00B08E  90D8               	bcf	status,0,c
 18482  00B090  360B               	rlcf	___aldiv@quotient,f,c
 18483  00B092  360C               	rlcf	___aldiv@quotient+1,f,c
 18484  00B094  360D               	rlcf	___aldiv@quotient+2,f,c
 18485  00B096  360E               	rlcf	___aldiv@quotient+3,f,c
 18486  00B098  5005               	movf	___aldiv@divisor,w,c
 18487  00B09A  5C01               	subwf	___aldiv@dividend,w,c
 18488  00B09C  5006               	movf	___aldiv@divisor+1,w,c
 18489  00B09E  5802               	subwfb	___aldiv@dividend+1,w,c
 18490  00B0A0  5007               	movf	___aldiv@divisor+2,w,c
 18491  00B0A2  5803               	subwfb	___aldiv@dividend+2,w,c
 18492  00B0A4  5008               	movf	___aldiv@divisor+3,w,c
 18493  00B0A6  5804               	subwfb	___aldiv@dividend+3,w,c
 18494  00B0A8  A0D8               	btfss	status,0,c
 18495  00B0AA  D009               	goto	l1630
 18496  00B0AC  5005               	movf	___aldiv@divisor,w,c
 18497  00B0AE  5E01               	subwf	___aldiv@dividend,f,c
 18498  00B0B0  5006               	movf	___aldiv@divisor+1,w,c
 18499  00B0B2  5A02               	subwfb	___aldiv@dividend+1,f,c
 18500  00B0B4  5007               	movf	___aldiv@divisor+2,w,c
 18501  00B0B6  5A03               	subwfb	___aldiv@dividend+2,f,c
 18502  00B0B8  5008               	movf	___aldiv@divisor+3,w,c
 18503  00B0BA  5A04               	subwfb	___aldiv@dividend+3,f,c
 18504  00B0BC  800B               	bsf	___aldiv@quotient,0,c
 18505  00B0BE                     l1630:
 18506  00B0BE  90D8               	bcf	status,0,c
 18507  00B0C0  3208               	rrcf	___aldiv@divisor+3,f,c
 18508  00B0C2  3207               	rrcf	___aldiv@divisor+2,f,c
 18509  00B0C4  3206               	rrcf	___aldiv@divisor+1,f,c
 18510  00B0C6  3205               	rrcf	___aldiv@divisor,f,c
 18511  00B0C8  2E09               	decfsz	___aldiv@counter,f,c
 18512  00B0CA  D7E1               	goto	u12060
 18513  00B0CC                     l1631:
 18514  00B0CC  500A               	movf	___aldiv@sign,w,c
 18515  00B0CE  B4D8               	btfsc	status,2,c
 18516  00B0D0  D008               	goto	l1632
 18517  00B0D2  1E0E               	comf	___aldiv@quotient+3,f,c
 18518  00B0D4  1E0D               	comf	___aldiv@quotient+2,f,c
 18519  00B0D6  1E0C               	comf	___aldiv@quotient+1,f,c
 18520  00B0D8  6C0B               	negf	___aldiv@quotient,c
 18521  00B0DA  0E00               	movlw	0
 18522  00B0DC  220C               	addwfc	___aldiv@quotient+1,f,c
 18523  00B0DE  220D               	addwfc	___aldiv@quotient+2,f,c
 18524  00B0E0  220E               	addwfc	___aldiv@quotient+3,f,c
 18525  00B0E2                     l1632:
 18526  00B0E2  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 18527  00B0E6  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 18528  00B0EA  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 18529  00B0EE  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 18530  00B0F2  0012               	return	
 18531  00B0F4                     __end_of___aldiv:
 18532                           	opt stack 0
 18533                           tblptru	equ	0xFF8
 18534                           tblptrh	equ	0xFF7
 18535                           tblptrl	equ	0xFF6
 18536                           tablat	equ	0xFF5
 18537                           prodh	equ	0xFF4
 18538                           prodl	equ	0xFF3
 18539                           intcon	equ	0xFF2
 18540                           postinc0	equ	0xFEE
 18541                           wreg	equ	0xFE8
 18542                           postinc1	equ	0xFE6
 18543                           postdec1	equ	0xFE5
 18544                           plusw1	equ	0xFE3
 18545                           fsr1h	equ	0xFE2
 18546                           fsr1l	equ	0xFE1
 18547                           indf2	equ	0xFDF
 18548                           postinc2	equ	0xFDE
 18549                           postdec2	equ	0xFDD
 18550                           plusw2	equ	0xFDB
 18551                           fsr2h	equ	0xFDA
 18552                           fsr2l	equ	0xFD9
 18553                           status	equ	0xFD8
 18554                           tblptru	equ	0xFF8
 18555                           tblptrh	equ	0xFF7
 18556                           tblptrl	equ	0xFF6
 18557                           tablat	equ	0xFF5
 18558                           prodh	equ	0xFF4
 18559                           prodl	equ	0xFF3
 18560                           intcon	equ	0xFF2
 18561                           postinc0	equ	0xFEE
 18562                           wreg	equ	0xFE8
 18563                           postinc1	equ	0xFE6
 18564                           postdec1	equ	0xFE5
 18565                           plusw1	equ	0xFE3
 18566                           fsr1h	equ	0xFE2
 18567                           fsr1l	equ	0xFE1
 18568                           indf2	equ	0xFDF
 18569                           postinc2	equ	0xFDE
 18570                           postdec2	equ	0xFDD
 18571                           plusw2	equ	0xFDB
 18572                           fsr2h	equ	0xFDA
 18573                           fsr2l	equ	0xFD9
 18574                           status	equ	0xFD8
 18575                           
 18576                           	psect	rparam
 18577  0000                     tblptru	equ	0xFF8
 18578                           tblptrh	equ	0xFF7
 18579                           tblptrl	equ	0xFF6
 18580                           tablat	equ	0xFF5
 18581                           prodh	equ	0xFF4
 18582                           prodl	equ	0xFF3
 18583                           intcon	equ	0xFF2
 18584                           postinc0	equ	0xFEE
 18585                           wreg	equ	0xFE8
 18586                           postinc1	equ	0xFE6
 18587                           postdec1	equ	0xFE5
 18588                           plusw1	equ	0xFE3
 18589                           fsr1h	equ	0xFE2
 18590                           fsr1l	equ	0xFE1
 18591                           indf2	equ	0xFDF
 18592                           postinc2	equ	0xFDE
 18593                           postdec2	equ	0xFDD
 18594                           plusw2	equ	0xFDB
 18595                           fsr2h	equ	0xFDA
 18596                           fsr2l	equ	0xFD9
 18597                           status	equ	0xFD8


Data Sizes:
    Strings     876
    Constant    65
    Data        70
    BSS         240
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     121
    BANK0           128     80     128
    BANK1           256    138     246
    BANK2           256      0     142
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    standbyMode$2063	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_69(CODE[5]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), 
		 -> STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), STR_62(CODE[3]), 
		 -> STR_61(CODE[3]), STR_60(CODE[3]), STR_59(CODE[2]), STR_58(CODE[2]), 
		 -> STR_57(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    standbyMode$2062	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), STR_53(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[3]), STR_43(CODE[3]), STR_42(CODE[3]), STR_41(CODE[2]), 
		 -> STR_40(CODE[2]), STR_39(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    displayLogs$2061	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_69(CODE[5]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), 
		 -> STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), STR_62(CODE[3]), 
		 -> STR_61(CODE[3]), STR_60(CODE[3]), STR_59(CODE[2]), STR_58(CODE[2]), 
		 -> STR_57(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    displayLogs$2060	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), STR_53(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[3]), STR_43(CODE[3]), STR_42(CODE[3]), STR_41(CODE[2]), 
		 -> STR_40(CODE[2]), STR_39(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    mainOperation$2059	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_69(CODE[5]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), 
		 -> STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), STR_62(CODE[3]), 
		 -> STR_61(CODE[3]), STR_60(CODE[3]), STR_59(CODE[2]), STR_58(CODE[2]), 
		 -> STR_57(CODE[2]), STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[4]), STR_50(CODE[4]), 
		 -> STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[3]), STR_43(CODE[3]), STR_42(CODE[3]), 
		 -> STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), STR_33(CODE[5]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[3]), 
		 -> STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), STR_21(CODE[2]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[2]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[7]), STR_69(CODE[5]), STR_68(CODE[4]), STR_67(CODE[4]), 
		 -> STR_66(CODE[4]), STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), 
		 -> STR_62(CODE[3]), STR_61(CODE[3]), STR_60(CODE[3]), STR_59(CODE[2]), 
		 -> STR_58(CODE[2]), STR_57(CODE[2]), STR_56(CODE[5]), STR_55(CODE[5]), 
		 -> STR_54(CODE[5]), STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[4]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), 
		 -> STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[3]), STR_43(CODE[3]), 
		 -> STR_42(CODE[3]), STR_41(CODE[2]), STR_40(CODE[2]), STR_39(CODE[2]), 
		 -> STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[4]), 
		 -> STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), 
		 -> STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), STR_22(CODE[2]), 
		 -> STR_21(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_146(CODE[11]), STR_145(CODE[13]), STR_144(CODE[11]), STR_143(CODE[13]), 
		 -> STR_142(CODE[11]), STR_141(CODE[15]), STR_140(CODE[15]), STR_139(CODE[5]), 
		 -> STR_138(CODE[11]), STR_137(CODE[8]), STR_136(CODE[11]), STR_135(CODE[14]), 
		 -> STR_134(CODE[17]), STR_133(CODE[8]), STR_132(CODE[15]), STR_131(CODE[16]), 
		 -> STR_130(CODE[10]), STR_129(CODE[8]), STR_128(CODE[15]), STR_127(CODE[16]), 
		 -> STR_126(CODE[10]), STR_125(CODE[16]), STR_124(CODE[16]), STR_123(CODE[17]), 
		 -> STR_122(CODE[13]), STR_121(CODE[17]), STR_120(CODE[14]), STR_119(CODE[11]), 
		 -> STR_118(CODE[11]), STR_117(CODE[15]), STR_116(CODE[15]), STR_115(CODE[10]), 
		 -> STR_114(CODE[13]), STR_113(CODE[16]), STR_112(CODE[16]), STR_111(CODE[17]), 
		 -> STR_110(CODE[17]), STR_109(CODE[8]), STR_108(CODE[15]), STR_107(CODE[15]), 
		 -> STR_106(CODE[11]), STR_105(CODE[14]), STR_104(CODE[16]), STR_103(CODE[16]), 
		 -> STR_102(CODE[11]), STR_101(CODE[14]), STR_100(CODE[16]), STR_99(CODE[16]), 
		 -> STR_98(CODE[16]), STR_97(CODE[13]), STR_96(CODE[5]), STR_95(CODE[11]), 
		 -> STR_94(CODE[15]), STR_93(CODE[17]), STR_92(CODE[18]), STR_91(CODE[15]), 
		 -> STR_90(CODE[11]), STR_89(CODE[7]), STR_88(CODE[3]), STR_87(CODE[16]), 
		 -> STR_86(CODE[8]), STR_85(CODE[16]), STR_84(CODE[15]), STR_83(CODE[6]), 
		 -> STR_82(CODE[14]), STR_81(CODE[17]), STR_80(CODE[7]), STR_79(CODE[9]), 
		 -> STR_78(CODE[17]), STR_77(CODE[11]), STR_76(CODE[17]), STR_75(CODE[14]), 
		 -> STR_74(CODE[17]), STR_73(CODE[11]), STR_72(CODE[15]), STR_71(CODE[11]), 
		 -> STR_70(CODE[8]), STR_38(CODE[15]), STR_37(CODE[9]), STR_36(CODE[9]), 
		 -> STR_35(CODE[10]), STR_34(CODE[10]), STR_2(CODE[16]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK1[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    findDrawerIndex@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@sortedDrawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@sortedDrawerTable(BANK0[16]), 

    getUserInputs@foodTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@foodTable(BANK0[16]), 

    getUserInputs@dietTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@dietTable(BANK0[16]), 

    getUserInputs@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_69(CODE[5]), STR_68(CODE[4]), STR_67(CODE[4]), STR_66(CODE[4]), 
		 -> STR_65(CODE[4]), STR_64(CODE[3]), STR_63(CODE[3]), STR_62(CODE[3]), 
		 -> STR_61(CODE[3]), STR_60(CODE[3]), STR_59(CODE[2]), STR_58(CODE[2]), 
		 -> STR_57(CODE[2]), STR_33(CODE[5]), STR_32(CODE[4]), STR_31(CODE[4]), 
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[3]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[2]), 
		 -> STR_22(CODE[2]), STR_21(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_56(CODE[5]), STR_55(CODE[5]), STR_54(CODE[5]), STR_53(CODE[5]), 
		 -> STR_52(CODE[5]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[3]), STR_43(CODE[3]), STR_42(CODE[3]), STR_41(CODE[2]), 
		 -> STR_40(CODE[2]), STR_39(CODE[2]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_sortDrawerList
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getUserInputs->___wmul
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_mainOperation

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  139681
                                             99 COMRAM    10    10      0
                          _UART_Init
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        144   142      2  100112
                                             93 COMRAM     6     4      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   13317
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   30709
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   17780
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   16212
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   14670
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                       82    82      0   25036
                                             56 COMRAM     2     2      0
                                              0 BANK0     80    80      0
                    _findDrawerIndex
                      _getFlatPieces
                      _getLongPieces
                     _getRoundPieces
                      _getUserInputs
                            _lcdInst
                             _printf
                     _sortDrawerList
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      56    52      4    5015
                                              0 COMRAM    56    52      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   12084
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       18    12      6    3895
                                              6 COMRAM    18    12      6
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3191
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _getRoundPieces                                       8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getLongPieces                                        8     4      4     980
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getFlatPieces                                        8     4      4     865
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _findDrawerIndex                                     10     6      4     311
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _findDrawerIndex
     _getFlatPieces
     _getLongPieces
     _getRoundPieces
     _getUserInputs
       ___wmul
       _readEEPROM
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      8E       9       55.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100     8A      F6       7       96.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     50      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27D      34        0.0%
DATA                 0      0     27D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 15 23:14:48 2018

                     _standbyMode ED7C            __end_of_verifyKeypress AC0A  
                    ?_displayLogs 0029                                l67 B496  
                     __CFG_CPD$ON 000000               ___wmul@multiplicand 0003  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l120 B61C  
                             l200 EA4C                               l201 EADC  
                             l210 EB76                               l123 B63C  
                             l211 EC06                               l300 B942  
                             l220 ED0C                               l301 B952  
                             l221 ECC8                               l141 E3FA  
                             l230 ACBC                               l310 B980  
                             l126 B6E2                               l214 EC60  
                             l231 ACAC                               l223 ED6E  
                             l215 EC30                               l207 EC1A  
                             l304 BA94                               l400 BB4C  
                             l240 B92E                               l224 ED22  
                             l208 EB6C                               l160 E68C  
                             l313 B986                               l305 B962  
                             l241 B826                               l217 ECB2  
                             l209 EC0A                               l153 E5DE  
                             l145 E49C                               l314 B996  
                             l242 B836                               l218 EC76  
                             l170 E828                               l331 B9D0  
                             l323 B9B6                               l411 BB72  
                             l403 BB50                               l235 B8D2  
                             l171 E77A                               l163 E764  
                             l139 E35A                               l340 BA04  
                             l236 B812                               l180 E848  
                             l172 E818                               l164 E6B6  
                             l156 E6A0                               l229 AC84  
                             l237 B822                               l181 E8D8  
                             l173 E784                               l165 E754  
                             l157 E5F2                               l149 E53E  
                             l246 B84A                               l190 E974  
                             l174 E814                               l166 E6C0  
                             l158 E690                               l343 BA08  
                             l327 B9C2                               l431 BBBA  
                             l415 BB7E                               l271 B88A  
                             l191 EA04                               l167 E750  
                             l159 E5FC                               l328 B9CC  
                             l353 BA28                               l433 BBBE  
                             l425 BBA8                               l249 B84E  
                             l177 E8EC                               l370 BC28  
                             l178 E83E                               l339 B9FA  
                             l363 BBC6                               l427 BBAC  
                             l371 BABC                               l267 B886  
                             l259 B878                               l187 EA18  
                             l179 E8DC                               l372 BACE  
                             l364 BAA8                               l188 E96A  
                             l620 D7EE                               l357 BA2C  
                             l381 BAF2                               l197 EAF0  
                             l189 EA08                               l374 BAE0  
                             l198 EA42                               l710 E19C  
                             l702 E04C                               l359 BA30  
                             l295 B8CA                               l287 B8AC  
                             l199 EAE0                               l631 D87A  
                             l623 E27A                               l392 BB1E  
                             l704 E0A0                               l624 D80C  
                             l289 B8BE                               l625 D826  
                             l562 C660                               l618 E1F2  
                             l706 E0F4                               l642 D95C  
                             l634 D898                               l299 BA38  
                             l395 BB2E                               l643 D98A  
                             l635 D8C6                               l619 D7D4  
                             l564 C926                               l708 E148  
                             l652 DA4C                               l628 D844  
                             l716 B2EA                               l900 C220  
                             l565 C932                               l653 DA78  
                             l645 D9BA                               l637 D8F6  
                             l629 D85E                               l670 DC36  
                             l662 DB32                               l822 B4D8  
                             l718 B3AC                               l671 DC76  
                             l663 DB72                               l655 DAA6  
                             l647 D9EA                               l639 D926  
                             l751 B1FA                               l719 B2D0  
                             l752 B1E0                               l744 B2DA  
                             l904 C252                               l920 D4C8  
                             l657 DAD4                               l649 DA18  
                             l753 B2BC                               l841 C446  
                             l833 C314                               l690 DEC4  
                             l682 DDBE                               l674 DCB8  
                             l666 DBB4                               l754 B1E8  
                             l930 D5FC                               l922 D50C  
                             l826 ABEE                               l691 DF04  
                             l683 DDFE                               l675 DCF8  
                             l667 DBF4                               l659 DB02  
                             l747 B2E2                               l915 D3C0  
                             l827 ABD4                               l908 C28E  
                             l924 D550                               l828 ABEA  
                             l852 C4BC                               l836 C3C0  
                             l685 DE40                               l677 DD3A  
                             l861 C068                               l933 D63A  
                             l925 D594                               l853 C4C8  
                             l694 DF46                               l950 AF9E  
                             l782 B1F2                               l870 C0A4  
                             l942 D7B0                               l918 D458  
                             l846 C452                               l838 C3BA  
                             l695 DF86                               l687 DE82  
                             l679 DD7C                               l951 AF74  
                             l791 B4BE                               l935 D656  
                             l952 B01E                               l880 C112  
                             l872 C0CC                               l697 DFC8  
                             l945 D7BC                               l857 C562  
                             l970 AF96                               l786 B4E0  
                             l866 C090                               l699 E00A  
                             l795 B4C6                               l939 D756  
                             l956 AF7E                               l788 B5C0  
                             l892 C1B2                               l884 C13A  
                             l876 C0F4                               l965 AF8E  
                             l958 AF86                               l982 BCB4  
                             l798 B4CE                               l896 C1F8  
                             l888 C162                               l985 BDA0  
                             l977 BCA8                               l987 BCD2  
                             l996 BDB2                               l989 BD3E  
                             l999 BE22                      __CFG_CPB$OFF 000000  
      findDrawerIndex@drawerTable 0001                               wreg 000FE8  
                   _mainOperation C584            mainOperation@dietTable 0094  
                    __CFG_LVP$OFF 000000               standbyMode@dietType 0130  
                    __CFG_WDT$OFF 000000                              l1011 CD9C  
                            l1100 B126                              l1021 CE64  
                            l1101 B12E                              l1014 CEB4  
                            l1006 CD90                              l1102 B136  
                            l1031 CF18                              l1007 CD90  
                            l1103 B13E                              l1111 BE72  
                            l1016 CDBA                              l1104 B146  
                            l1200 F81C                              l1041 CFF4  
                            l1033 CF42                              l1105 B14E  
                            l1121 BE9C                              l1018 CE1C  
                            l1106 B156                              l1210 F68A  
                            l1051 D0DA                              l1043 D022  
                            l1035 CF6E                              l1027 CEC4  
                            l1107 B160                              l1123 BFCE  
                            l1203 F55E                              l1116 BE7E  
                            l1061 D1C8                              l1053 D108  
                            l1045 D050                              l1037 CF9A  
                            l1029 CEEE                              l1221 F9C8  
                            l1070 B7FE                              l1142 C024  
                            l1126 BF88                              l1230 FBF4  
                            l1214 F6D6                              l1071 B6F6  
                            l1063 D1FA                              l1055 D138  
                            l1047 D07E                              l1039 CFC6  
                            l1119 C010                              l1127 BF56  
                            l1215 F710                              l1207 F5C4  
                            l1080 B73E                              l1072 B6FE  
                            l1064 D24E                              l1224 FB24  
                            l1216 F830                              l1208 F696  
                            l1160 EEDA                              l1081 B746  
                            l1073 B706                              l1057 D168  
                            l1049 D0AC                              l1137 BFCA  
                            l1225 FA74                              l1209 F638  
                            l1082 B74E                              l1074 B70E  
                            l1170 FB2E                              l1083 B756  
                            l1075 B716                              l1059 D198  
                            l1235 FB98                              l1219 F8DE  
                            l1068 B780                              l1084 B75E  
                            l1076 B71E                              l1092 B16A  
                            l1228 FAB8                              l1172 F51E  
                            l1501 C93E                              l1085 B766  
                            l1077 B726                              l1069 B6EE  
                            l1093 B0F6                              l1181 F214  
                            l1165 F146                              l1510 C994  
                            l1502 C94E                              l1086 B76E  
                            l1078 B72E                              l1094 B1CC  
                            l1190 F38A                              l1174 F1CC  
                            l1255 AA92                              l1087 B776  
                            l1079 B736                              l1095 B0FE  
                            l1183 F510                              l1191 F32C  
                            l1512 CAB0                              l1520 CA22  
                            l1504 C962                              l1096 B106  
                            l1192 F37E                              l1168 F154  
                            l1521 CA30                              l1505 C95C  
                            l1097 B10E                              l1185 F25A  
                            l1530 CA88                              l1522 CA2C  
                            l1098 B116                              l1178 F206  
                            l1099 B11E                              l1524 CA66  
                            l1196 F3CA                              l1541 CBAA  
                            l1533 CB14                              l1517 CAE6  
                            l1277 AF68                              l1197 F404  
                            l1189 F2B8                              l1630 B0BE  
                            l1550 CC06                              l1542 CB64  
                            l1526 CA76                              l1518 C9F6  
                            l1631 B0CC                              l1623 B044  
                            l1527 CA70                              l1519 C9FA  
                            l1199 F518                              l1632 B0E2  
                            l1624 B05C                              l1536 CB9A  
                            l1561 CCEC                              l1537 CB2E  
                            l1529 CA9E                              l1626 B08A  
                            l1562 CC50                              l1546 CBC4  
                            l1627 B07E                              l1563 CCFC  
                            l1547 CBE8                              l1564 CC9A  
                            l1548 CBF0                              l1549 CC1C  
                            l1558 CC4A                              l1559 CD02  
                            l1923 ADE4                              l1924 ADD8  
                            l1927 AE18                              l1928 AE26  
                            l1980 ABA4                              l1981 ABAE  
                            l1990 AB06                              l1991 AB10  
                            l1976 AB84                              l1977 AB7C  
                            l1897 A9F8                              l1986 AAEE  
                            l1987 AAE6                              l7028 ABEA  
                            l7172 D764                              l7328 B644  
                            l6608 CB68                              l7432 E5E8  
                            l9114 AED4                              l7268 AA72  
                            l6564 CA70                              l7364 E304  
                            l9124 AF00                              l7374 E342  
                            l9126 AF08                              l6568 CA88  
                            l9136 AF34                              l9234 AA34  
                            l7626 ACAC                              l6594 CB32  
                            l9138 AF3C                              l6676 A9BC  
                            l8706 CE5E                              l9338 EFD4  
                            l9452 F2BE                              l9436 F262  
                            l9348 EFFC                              _ADON 007E10  
                            l9542 F56E                              l9448 F2B8  
                            l9554 F5C4                              l9716 FB24  
                            l9558 F5CA                              l9676 F9D4  
                            STR_1 FF9B                              STR_2 FDBC  
                            STR_3 FFFC                              STR_9 FFEA  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              u7110 CC24  
                            u7120 CC38                              _RCIE 007CED  
                            u7140 CD0A                              _RCIF 007CF5  
                            u9020 EA24                              u9200 B81A  
                            u9120 EC26                              u9040 EA38  
                            u6830 AB88                              u9070 EAFC  
                            u9090 EB62                              u8450 D654  
                            u9500 B95A                              u6860 AAF2  
                            u8621 E29E                              u9190 ACBC  
                            u8470 D75A                              u8631 E2B8  
                            u8800 E50C                              u8720 E3C8  
                            u8560 ADE8                              u8480 D764  
                            u6785 AD72                              u8641 E2D2  
                            u6786 AD74                              u9450 B8B6  
                            u6795 ADB2                              u8651 E2EC  
                            u6796 ADB4                              u8590 B612  
                            u8670 E342                              u8840 E5AE  
                            u8760 E46A                              u8680 E358  
                            u9490 B94A                              u9810 BAC6  
                            u8850 E5E8                              u9820 BAD8  
                            u9830 BAEA                              _UART 006E  
                            u8990 E960                              _TRMT 007D61  
                            _TXIE 007CEC                              _TXIF 007CF4  
           __end_of_decode_drawer B1D6                   ??_getUserInputs 000D  
             standbyMode@foodType 0140                 viewLogs@logNumber 005C  
                            _main B3B6                              _keys FC51  
                 food_press@F3117 00D8                              _uart 01EA  
                            fsr1h 000FE2                              fsr2h 000FDA  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     get_digits@sum 0001  
                            prodh 000FF4                              prodl 000FF3  
          mainOperation@foodTable 00A4                              start 0000  
                   __CFG_IESO$OFF 000000                 viewLogs@keypress2 005D  
             standbyMode@keypress 016B                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                       _writeEEPROM AA70  
                 diet_press@F3132 00D0                   ?_verifyKeypress 0001  
                __end_of_LCD_LEFT FC8D               standbyMode@whichKey 0169  
                 food_press@count 0035                   food_press@tally 002F  
           I2C_Master_Read@ackBit 0002                  ?_I2C_Master_Init 000E  
                ?_I2C_Master_Read 0001                  ??_getRoundPieces 0005  
                ?_I2C_Master_Wait 0001                  ?_I2C_Master_Stop 0001  
                 __end_of___aldiv B0F4                writeEEPROM@address 0002  
                           ?_main 0001                             _EEADR 000FA9  
                           STR_10 FFF2                             STR_11 FFE6  
                           STR_12 FFEE                             STR_20 FFD0  
                           STR_30 FFE2                             STR_31 FFDE  
                           STR_32 FFDA                             STR_16 FFC6  
                           STR_40 FFE8                             STR_17 FFC1  
                           STR_33 FFBC                             STR_41 FFC4  
                           STR_26 FFF9                             STR_18 FFCB  
                           STR_34 FF56                             STR_50 FFC2  
                           STR_42 FFEB                             STR_19 FFD5  
                           STR_35 FF4C                             STR_51 FFCC  
                           STR_43 FFF3                             STR_28 FFF6  
                           STR_36 FF72                             STR_60 FFBE  
                           STR_52 FFC6                             STR_44 FFC3  
                           STR_37 FF69                             STR_61 FFE3  
                           STR_53 FFC1                             STR_45 FFEA  
                           STR_70 FF93                             STR_38 FE62  
                           STR_62 FFF9                             STR_54 FFCB  
                           STR_46 FFF2                             STR_71 FEF6  
                           STR_63 FFDF                             STR_55 FFD5  
                           STR_47 FFE6                             STR_39 FFFC  
                           STR_80 FFAA                             STR_72 FDF9  
                           STR_64 FFF6                             STR_56 FFD0  
                           STR_48 FFEE                             STR_73 FEF6  
                           STR_81 FD0A                             STR_65 FFBD  
                           STR_57 FFBF                             STR_49 FFC7  
                           STR_82 FE9B                             STR_90 FE0C  
                           STR_74 FD0A                             STR_66 FFE2  
                           STR_58 FFE4                             STR_83 FFB1  
                           STR_75 FE9B                             STR_91 FE08  
                           STR_67 FFDE                             STR_59 FFFA  
                           STR_84 FE17                             STR_76 FD1B  
                           STR_92 FC92                             STR_68 FFDA  
                           STR_77 FEF6                             STR_85 FD5C  
                           STR_93 FCF9                             STR_69 FFBC  
                           STR_86 FF8B                             STR_94 FDEA  
                           STR_78 FCE8                             STR_79 FF60  
                           STR_95 FF17                             STR_87 FD6C  
                           STR_88 FE14                             STR_96 FFB7  
                           STR_89 FE10                             STR_97 FED1  
                           STR_98 FDAC                             STR_99 FD4C  
                 __end_of___lldiv AE38                             u10200 C472  
               viewLogs@returnVal 0058                             u10230 C566  
                           u12000 AF34                             u10410 C130  
                           u10330 C0C2                             u10260 C05E  
                           u10510 C1A8                             u10600 C216  
                           u10440 C158                             u10360 C0EA  
                           u12200 EFFC                             u12121 ED86  
                           u10290 C086                             u12131 ED98  
                           u12060 B08E                             u10380 C108  
                           u10701 BC7C                             u12141 EDAA  
                           u12230 F164                             u12151 EDBC  
                           u10640 C248                             u12240 F16C  
                           u12161 EDCE                             u10570 C1EE  
                           u12330 F2BE                             u12250 F178  
                           u12171 EDE0                             u10900 CE38  
                           u10821 CD80                             u12510 F9D4  
                           u12430 F5CA                             u12095 AE5A  
                           u14007 C3AC                             u12280 F222  
                           u12601 C5D0                             u14017 C3CC  
                           u10770 BCE6                             u10690 C284  
                           u12611 C5E2                             u14107 D3B2  
                           u14027 C404                             u12621 C5F4  
                           u14117 D408                             u14037 C41E  
                           u11910 BF9E                             u12550 FA56  
                           u12631 C606                             u14207 D60C  
                           u14127 D44A                             u14047 C4D2  
                           u12640 C65E                             u11920 BFC6  
                           u12560 FB24                             u14217 D62C  
                           u14137 D468                             u14057 C4EA  
                           u12570 FB36                             u12490 F8DC  
                           u14307 CD32                             u14227 D662  
                           u14147 D4BA                             u14067 C50A  
                           u13507 B468                             u11780 BEE8  
                           u14317 CDCE                             u14237 D748  
                           u14157 D4FE                             u14077 C522  
                           u13517 B488                             u11870 BF2E  
                           u14407 A9DA                             u14327 D206  
                           u14247 D770                             u14167 D542  
                           u14087 C554                             u13607 F0B8  
                           u13527 EE72                             u14417 AB20  
                           u14337 D238                             u14257 D7A2  
                           u14177 D586                             u14097 D368  
                           u13617 F0D2                             u13537 EE98  
                           u14427 AB54                             u14347 C6CA  
                           u11955 AC3E                             u14267 BC3E  
                           u14187 D5A4                             u13707 F338  
                           u13627 F104                             u13547 EEB2  
                           u11980 AF00                             u14437 A9B2  
                           u14357 C718                             u11965 AA1C  
                           u14277 BD52                             u14197 D5EE  
                           u13717 F370                             u13637 F11E  
                           u13557 EEEA                             u11966 AA1E  
                           u14447 AD5A                             u14367 C762  
                           u14287 BDE2                             u13807 F86E  
                           u13727 F396                             u13647 F184  
                           u13567 EF22                             u14457 AD64  
                           u14377 C800                             u14297 BE14  
                           u13817 F886                             u13737 F52A  
                           u13657 F1BC                             u13577 F016  
                           u13497 B3F2                             u14467 AD9A  
                           u14387 C8E0                             u13907 FBDC  
                           u13827 F8B8                             u13747 F5E6  
                           u13667 F1D8                             u13587 F048  
                           u14477 ADA4                             u14397 C918  
                           u13917 FC00                             u13837 F904  
                           u13757 F61E                             u13677 F22E  
                           u13597 F062                             u13927 FC38  
                           u13847 F9BC                             u13767 F644  
                           u13687 F2DA                             u13937 BE3E  
                           u13857 F9E0                             u13777 F67C  
                           u13697 F312                             u13947 BFE2  
                           u13867 FA12                             u13787 F6A2  
                           u13957 C2CA                             u13877 FB64  
                           u13797 F83C                             u13967 C2FC  
                           u13887 FB8A                             u13977 C32E  
                           u13897 FBA4                             u13987 C360  
                           u13997 C37A                   __end_of___lwdiv ABB8  
                 __end_of___lwmod AB1A                             _RCREG 000FAE  
                           _SPBRG 000FAF                             _PORTB 000F81  
              sortDrawerList@temp 002F                             _TRISA 000F92  
                           _TRISB 000F93           mainOperation@flatPieces 00B8  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                    ?_mainOperation 0001  
                           _TXREG 000FAD                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                   __end_of_getFlat B2C6  
                   __CFG_WRT3$OFF 000000                   diet_press@count 0033  
                 __end_of_lcdInst A9BA                   __end_of_getLong B5CA  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                __size_of_UART_Init 0084  
                     initEEPROM@i 0003                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                 __end_of_initLCD AB66                    __CFG_EBTRB$OFF 000000  
            __size_of_decode_diet 0124                   __end_of_dpowers FC7D  
              printFoodInput@food 0001                      displayLogs@i 0046  
                    displayLogs@n 0050                   __end_of_isdigit AA00  
                           _input FC62                             _rowUp 0075  
                           _putch A9CE                             main@i 0066  
                           main@l 0068                             tablat 000FF5  
            standbyMode@logNumber 017F                 _LCDinterruptState 0078  
                           plusw1 000FE3                             plusw2 000FDB  
                           status 000FD8       I2C_Master_Read@receivedByte 0003  
            standbyMode@keypress1 0176                    __CFG_PBADEN$ON 000000  
                 standbyMode@diet 0180                   standbyMode@flat 016E  
                 standbyMode@food 0184             getLongPieces@dietType 0001  
                 standbyMode@time 0160                   standbyMode@zero 0179  
                 _findDrawerIndex AC66            mainOperation@trueValue 00CE  
                 __initialization ACC6                      __end_of_main B4B4  
                    __end_of_keys FC62                    _sortDrawerList E284  
           getLongPieces@foodType 0003                      standbyMode@i 0188  
                    standbyMode@n 017B                      standbyMode@x 017D  
                ??_printFoodInput 0003                    __CFG_OSC$HSPLL 000000  
               __end_of_LCD_RIGHT FC8E                  food_press@drawer 002B  
                          ??_main 0064                     __activetblptr 000003  
             sortDrawerList@F3092 00E8               sortDrawerList@F3086 00F8  
             sortDrawerList@F3095 00E0               sortDrawerList@F3089 00F0  
             food_press@backCheck 0031                 ?_I2C_Master_Start 0001  
               ?_I2C_Master_Write 0002                      ?_shiftEEPROM 0001  
              ??_I2C_Master_Start 0002           mainOperation@longPieces 00BA  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
              ??_I2C_Master_Write 0004             standbyMode@flatPieces 0110  
                          STR_100 FD4C                            STR_101 FE71  
                          STR_110 FD0A                            STR_102 FF0C  
                          STR_103 FD7C                            STR_111 FCC6  
                          STR_104 FD7C                            STR_120 FEA9  
                          STR_112 FD9C                            STR_121 FCC6  
                          STR_105 FE7F                            STR_113 FD2C  
                          STR_106 FF0C                            STR_130 FF42  
                          STR_114 FEDE                            STR_122 FEC4  
                          _ADRESH 000FC4                            STR_131 FD3C  
                          STR_115 FF38                            STR_107 FDDB  
                          STR_123 FCB5                            STR_108 FDDB  
                          STR_132 FE53                            STR_116 FE35  
                          STR_140 FE26                            STR_124 FD8C  
                          STR_133 FF7B                            STR_125 FDAC  
                          STR_109 FF9B                            STR_117 FE44  
                          STR_141 FDCC                            STR_126 FF42  
                          STR_118 FF2D                            STR_142 FF01  
                          STR_134 FCD7                            _ADRESL 000FC3  
                          STR_119 FEEB                            STR_143 FEB7  
                          STR_135 FE8D                            STR_127 FD3C  
                          STR_144 FF01                            STR_136 FF22  
                          STR_128 FE53                            STR_145 FEB7  
                          STR_137 FF83                            STR_129 FF7B  
                          STR_146 FF01                            STR_138 FF17  
                          STR_139 FFB7                            STR_147 FFA3  
                          STR_148 FCA4                            _EEDATA 000FA8  
                          _EECON2 000FA7                            ?_putch 0001  
         mainOperation@nextDrawer 0092                            _SSPADD 000FC8  
                          _TRISC6 007CA6                            _TRISC7 007CA7  
                          _SSPBUF 000FC9                  diet_press@drawer 0029  
       standbyMode@storedFoodType 0174            __end_of_sortDrawerList ED7C  
                  __CFG_XINST$OFF 000000                  __end_of_getRound B3B6  
               __end_of_UART_Init AEBC                         ??___aldiv 0009  
                          ___wmul AA4A                    __CFG_STVREN$ON 000000  
                       ??___lldiv 0009                         ??___lwdiv 0005  
                       ??___lwmod 000C            decode_diet@returnValue 0005  
                          clear_0 AD0C                            clear_1 AD18  
                          clear_2 AD24                            _inputs 0250  
                  _firstIteration 0076                         ??_getFlat 0003  
                       ??_lcdInst 0003                            _printf C934  
                       ??_getLong 0003              __size_of_displayLogs 0570  
                 ??_mainOperation 0039               food_press@foodTable 0038  
                       ??_initLCD 0004                   get_digits@count 0005  
           __end_of_getFlatPieces BA9E                      __pdataCOMRAM 006E  
                       ??_isdigit 0001          getUserInputs@drawerTable 0007  
                    __mediumconst FC50                  __end_of_viewLogs C584  
        mainOperation@drawerTable 0082                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                standbyMode@F3160 0210                  standbyMode@F3152 019A  
                standbyMode@F3162 0200                  standbyMode@F3154 018A  
                standbyMode@F3156 0230                  standbyMode@F3158 0220  
             decode_diet@dietType 0001        findDrawerIndex@returnValue 0007  
         __end_of_findDrawerIndex ACC6             standbyMode@longPieces 0120  
                      __accesstop 0080           __end_of__initialization AD32  
            which_drawer@keypress 0034                     ___rparam_used 000001  
                standbyMode@round 016C                   writeEEPROM@data 0001  
                 viewLogs@logView 005A            standbyMode@decodedDiet 0172  
                 ?_sortDrawerList 0001                      ?_standbyMode 005E  
            __end_of_happynewyear FC8C                    __pcstackCOMRAM 0001  
                    __pidataBANK2 AA9A                     __end_of_input FC73  
                   __end_of_putch A9E2                __size_of_lcdNibble 007E  
                   check_food@sum 0001         sortDrawerList@drawerTable 0001  
               food_press@dietSum 0029             __end_of_getLongPieces BC32  
               food_press@isValid 0033                           ??_putch 0003  
                      __pbssBANK0 00D0                        __pbssBANK1 018A  
                      __pbssBANK2 0200                        _check_food D7C8  
               mainOperation@temp 0080          getLongPieces@returnValue 0007  
                ??_verifyKeypress 0003                      ?_writeEEPROM 0001  
                         ?___wmul 0001                        _diet_press CD26  
         displayLogs@drawerNumber 0044                           ?_printf 000D  
                      _arr_dataRX 0240                        _get_digits AF6A  
            sortDrawerList@count1 0031              sortDrawerList@count2 002D  
            sortDrawerList@count3 0033              sortDrawerList@count4 002B  
                       ?_getRound 0001                           _SSPCON1 000FC6  
                         _SSPCON2 000FC5                        _drawerDown 0070  
                         _SSPSTAT 000FC7              __size_of_shiftEEPROM 00AE  
                      _columnLeft 0073                        _foodInputs 0274  
                ?_findDrawerIndex 0001                        _initEEPROM AA24  
                      _readEEPROM A9BA            standbyMode@drawerCount 0186  
           __end_of_getUserInputs B6E4                        _food_press BC32  
               __end_of_lcdNibble ADB6                           __Hparam 0000  
                         __Lparam 0000                         ?_viewLogs 0052  
                         ___aldiv B028          displayLogs@operationTime 0042  
                         ___lldiv ADB6                   __size_of___wmul 0026  
                         ___lwdiv AB66                           ___lwmod AAD8  
                         __pcinit ACC6                           __ramtop 1000  
                         _getFlat B1D6                           _lcdInst A9A6  
                         _getLong B4B4                           __ptext0 B3B6  
                         __ptext1 ED7C                           __ptext2 BE2C  
                         __ptext3 B0F4                           __ptext4 C298  
                         __ptext5 ABB8                           __ptext6 D258  
                         __ptext7 AEBC                           __ptext8 C042  
                         __ptext9 B2C6            __size_of_decode_drawer 00E2  
                 __size_of_printf 03F2                           _initLCD AB1A  
               __end_of_hexpowers FC85                           _dpowers FC73  
                   ??_decode_diet 0003             which_drawer@backCheck 0030  
                         _isdigit A9E2                    displayLogs@day 0031  
                ___aldiv@dividend 0001                         _LCD_RIGHT FC8D  
        __size_of_I2C_Master_Init 005C          __size_of_I2C_Master_Read 0024  
        __size_of_I2C_Master_Wait 0012              displayLogs@logNumber 0029  
        __size_of_I2C_Master_Stop 0008                           _rowDown 0074  
                      ??_getRound 0003              end_of_initialization AD32  
            displayLogs@keypress3 0041                   which_drawer@sum 002E  
           __end_of_LCD_SIZE_HORZ FC90                       ?_check_food 0001  
           __end_of_LCD_SIZE_VERT FC8F                 main@operationMode 006A  
       __size_of_I2C_Master_Start 0008         __size_of_I2C_Master_Write 000A  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000D  
                       _RCSTAbits 000FAB                           printf@c 0028  
                         printf@f 000D                  ___aldiv@quotient 000B  
                         postdec1 000FE5                           postdec2 000FDD  
                      ??_viewLogs 0054                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
            __size_of_standbyMode 0ED4                       ?_diet_press 0029  
                       _UART_Init AE38                         _PORTBbits 000F81  
                   ?_which_drawer 0029               diet_press@backCheck 0031  
                     ?_get_digits 0001          mainOperation@roundPieces 00B6  
          sortDrawerList@sublist1 000B            sortDrawerList@sublist2 001B  
          sortDrawerList@sublist3 0023            sortDrawerList@sublist4 0013  
                       _TRISCbits 000F94                  viewLogs@checkLog 0056  
                    _happynewyear FC85           __size_of_getRoundPieces 0130  
               readEEPROM@address 0001               __end_of_decode_diet B808  
               standbyMode@drawer 0182                       ?_initEEPROM 0001  
                ??_sortDrawerList 0005                     _decode_drawer B0F4  
                     ?_readEEPROM 0001                       printf@width 0026  
                       _TXSTAbits 000FAC                       ?_food_press 0029  
             diet_press@dietTable 0038                   main@checkEEPROM 006C  
                   ??_displayLogs 002B              __size_of_writeEEPROM 002A  
                  __end_of___wmul AA70                        ?_UART_Init 000F  
                   __pidataCOMRAM A982            standbyMode@validDrawer 0177  
             __size_of_check_food 0ABC                    ??_which_drawer 002B  
                  __end_of_printf CD26             __end_of_mainOperation C934  
             start_initialization ACC6                    standbyMode@lng 0170  
         __size_of_printFoodInput 0256                    ?_decode_drawer 0001  
             __size_of_diet_press 0532                 ??_I2C_Master_Init 0012  
               ??_I2C_Master_Read 0002                 ??_I2C_Master_Wait 0001  
               ??_I2C_Master_Stop 0002             getFlatPieces@dietType 0001  
    standbyMode@drawerInformation 0150         getRoundPieces@returnValue 0007  
           getFlatPieces@foodType 0003            __size_of_getFlatPieces 0166  
             __size_of_get_digits 00BE                          ??___wmul 0005  
              mainOperation@F3160 01CA                mainOperation@F3162 01BA  
              mainOperation@F3164 01AA                mainOperation@F3158 01DA  
        I2C_Master_Init@clockFreq 000E                       __pdataBANK2 0250  
                __CFG_LPT1OSC$OFF 000000                          ??_printf 0017  
             __size_of_initEEPROM 0026                food_press@keypress 0037  
             __size_of_readEEPROM 0014               __end_of_displayLogs D7C8  
             __size_of_food_press 01FA                       __pbssCOMRAM 0076  
                     _decode_diet B6E4                     __pcstackBANK0 0080  
                   __pcstackBANK1 0100                   sortDrawerList@i 0037  
                 sortDrawerList@j 0035                      _isdigit$1635 0002  
             decode_drawer@drawer 0001                 __size_of_getRound 00F0  
findDrawerIndex@sortedDrawerValue 0003            standbyMode@roundPieces 0100  
                _I2C_Master_Start A972                  _I2C_Master_Write A98A  
                  mainOperation@i 00CC                  ___lwdiv@dividend 0001  
               __CFG_CCP2MX$PORTC 000000                _UARTinterruptState 0079  
                   __pmediumconst FC50                     UART_Init@baud 000F  
                       _lcdNibble AD38                          ?___aldiv 0001  
                        ?___lldiv 0001            __size_of_getLongPieces 0194  
              getUserInputs@count 0011                          ?___lwdiv 0001  
                        ?___lwmod 0008                       ??_UART_Init 0013  
               __size_of_viewLogs 02EC                          ?_getFlat 0001  
                findDrawerIndex@i 0009                          ?_lcdInst 0001  
                        ?_getLong 0001                          ?_initLCD 0001  
                        ?_isdigit 0001               check_food@foodInput 0003  
                   _getFlatPieces B938                     ??_shiftEEPROM 0003  
             displayLogs@dietType 003D                    _getRoundPieces B808  
                       _hexpowers FC7D                  ___lwdiv@quotient 0005  
                 ??_decode_drawer 0003                    __size_of_putch 0014  
             displayLogs@foodType 003F                      ??_check_food 0005  
          getRoundPieces@dietType 0001                          _LCD_LEFT FC8C  
                displayLogs@month 002F                   ___aldiv@divisor 0005  
                 ___aldiv@counter 0009                    ___wmul@product 0005  
                        _LATCbits 000F8B                          _LATDbits 000F8C  
            __end_of_which_drawer C042            getRoundPieces@foodType 0003  
        __size_of_findDrawerIndex 0060                  __CFG_WDTPS$32768 000000  
                      ?_lcdNibble 0001                      ??_diet_press 002B  
                    shiftEEPROM@i 0006                       _displayLogs D258  
 sortDrawerList@sortedDrawerTable 0003           __size_of_verifyKeypress 0052  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0001  
              __end_of_check_food E284                     lcdNibble@data 0002  
                      printf@flag 0025                       _columnRight 0072  
                   lcdNibble@temp 0001                    ?_getFlatPieces 0001  
                      printf@prec 001C                      ??_get_digits 0003  
          __end_of_getRoundPieces B938            __size_of_getUserInputs 011A  
                  _printFoodInput C042                    _LCD_HORZ_LIMIT FC91  
                   _getLongPieces BA9E                     diet_press@sum 0035  
                       copy_data0 ACDA                         copy_data1 ACFA  
               which_drawer@count 0032                      ??_initEEPROM 0003  
             __end_of_shiftEEPROM AF6A            getUserInputs@dietTable 0009  
              __end_of_diet_press D258                      ??_readEEPROM 0001  
                    ??_food_press 002D                diet_press@keypress 0037  
                      _EECON1bits 000FA6                          __Hrparam 0000  
                   ??_standbyMode 0060                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                __end_of_get_digits B028  
              diet_press@previous 002D    mainOperation@sortedDrawerTable 00BC  
          getUserInputs@foodTable 000B                  __size_of___aldiv 00CC  
                __size_of___lldiv 0082             displayLogs@flatPieces 0035  
                __size_of___lwdiv 0052                  __size_of___lwmod 0042  
                __size_of_getFlat 00F0                  __size_of_lcdInst 0014  
                __size_of_getLong 0116            __end_of_printFoodInput C298  
          getUserInputs@logNumber 000F                __end_of_initEEPROM AA4A  
                 _I2C_Master_Init AC0A                   _I2C_Master_Read AA00  
                __size_of_initLCD 004C                   ?_getRoundPieces 0001  
                 _I2C_Master_Wait A994                __end_of_readEEPROM A9CE  
                 _I2C_Master_Stop A97A            __end_of_LCD_HORZ_LIMIT FC92  
                __size_of_isdigit 001E                __end_of_food_press BE2C  
                 ___lwdiv@divisor 0003                   ___lwdiv@counter 0007  
                  ?_getLongPieces 0001                 getUserInputs@data 0015  
                        __ptext10 B4B4                          __ptext11 B1D6  
                        __ptext20 AA00                          __ptext12 BC32  
                        __ptext21 A994                          __ptext13 AF6A  
                        __ptext30 AB66                          __ptext22 AC0A  
                        __ptext14 D7C8                          __ptext31 B5CA  
                        __ptext23 ADB6                          __ptext15 CD26  
                        __ptext40 AD38                          __ptext32 A9BA  
                        __ptext24 C584                          __ptext16 B6E4  
                        __ptext41 AA24                          __ptext33 AA4A  
                        __ptext25 E284                          __ptext17 A98A  
                        __ptext42 AA70                          __ptext34 B808  
                        __ptext26 C934                          __ptext18 A97A  
                        __ptext43 AE38                          __ptext35 BA9E  
                        __ptext27 A9CE                          __ptext19 A972  
                        __ptext44 B028                          __ptext36 B938  
                        __ptext28 A9E2                          __ptext37 AC66  
                        __ptext29 AAD8                          __ptext38 AB1A  
                        __ptext39 A9A6                          _getRound B2C6  
                  _LCD_VERT_LIMIT FC90                          _drawerUp 0071  
                   __size_of_main 00FE                   displayLogs@year 002D  
                   _getUserInputs B5CA                displayLogs@minutes 0039  
              displayLogs@seconds 003B                     ??_writeEEPROM 0002  
        displayLogs@markedDrawer1 0048          displayLogs@markedDrawer2 004A  
        displayLogs@markedDrawer3 004C          displayLogs@markedDrawer4 004E  
                     ??_lcdNibble 0001                          _viewLogs C298  
                 verifyKeypress@i 0008                getLong@returnValue 0005  
                       printf@idx 001B                         printf@len 0021  
                       printf@val 0023               __end_of_standbyMode FC50  
                 ??_getFlatPieces 0005       I2C_Master_Write@byteToWrite 0002  
        decode_drawer@returnValue 0005                 ??_findDrawerIndex 0005  
           displayLogs@longPieces 0037                   ?_printFoodInput 0001  
                which_drawer@rand 002C                         putch@data 0003  
        __end_of_I2C_Master_Start A97A          __end_of_I2C_Master_Write A994  
                      _INTCONbits 000FF2                      ?_decode_diet 0001  
          __end_of_LCD_VERT_LIMIT FC91                       _shiftEEPROM AEBC  
                        isdigit@c 0003             __size_of_which_drawer 0216  
                     getFlat@code 0001         standbyMode@firstIteration 0167  
                   _LCD_SIZE_HORZ FC8F                  ___lwmod@dividend 0008  
                   _LCD_SIZE_VERT FC8E                  ___lldiv@dividend 0001  
         verifyKeypress@logNumber 0005                    ?_getUserInputs 0007  
          __size_of_mainOperation 03B0                getFlat@returnValue 0005  
          displayLogs@roundPieces 0033                          printf@ap 001F  
                        printf@cp 001D           __size_of_sortDrawerList 0AF8  
                     diet_press@i 002F           __end_of_I2C_Master_Init AC66  
         __end_of_I2C_Master_Read AA24           __end_of_I2C_Master_Wait A9A6  
         __end_of_I2C_Master_Stop A982                       lcdInst@data 0003  
                 shiftEEPROM@temp 0004                    _verifyKeypress ABB8  
             getRound@returnValue 0005                       getLong@code 0001  
             __end_of_writeEEPROM AA9A           verifyKeypress@returnVal 0006  
                ___lldiv@quotient 0009                      _which_drawer BE2C  
                 ___lwmod@divisor 000A                   ??_getLongPieces 0005  
                 ___lwmod@counter 000C                      ___aldiv@sign 000A  
          verifyKeypress@keypress 0001                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5          getFlatPieces@returnValue 0007  
                  getUserInputs@i 0017                    getUserInputs@n 0013  
                    getRound@code 0001             check_food@returnValue 0007  
      mainOperation@currentDrawer 00B4  
