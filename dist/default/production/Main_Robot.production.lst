

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 16 01:08:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	mediumconst
    64  00FD14                     __pmediumconst:
    65                           	opt stack 0
    66  00FD14  00                 	db	0
    67  00FD15                     _keys:
    68                           	opt stack 0
    69  00FD15  31                 	db	49
    70  00FD16  32                 	db	50
    71  00FD17  33                 	db	51
    72  00FD18  41                 	db	65
    73  00FD19  34                 	db	52
    74  00FD1A  35                 	db	53
    75  00FD1B  36                 	db	54
    76  00FD1C  42                 	db	66
    77  00FD1D  37                 	db	55
    78  00FD1E  38                 	db	56
    79  00FD1F  39                 	db	57
    80  00FD20  43                 	db	67
    81  00FD21  2A                 	db	42
    82  00FD22  30                 	db	48
    83  00FD23  23                 	db	35
    84  00FD24  44                 	db	68
    85  00FD25  00                 	db	0
    86  00FD26                     __end_of_keys:
    87                           	opt stack 0
    88  00FD26                     _input:
    89                           	opt stack 0
    90  00FD26  31                 	db	49
    91  00FD27  32                 	db	50
    92  00FD28  33                 	db	51
    93  00FD29  52                 	db	82
    94  00FD2A  34                 	db	52
    95  00FD2B  35                 	db	53
    96  00FD2C  36                 	db	54
    97  00FD2D  46                 	db	70
    98  00FD2E  37                 	db	55
    99  00FD2F  38                 	db	56
   100  00FD30  39                 	db	57
   101  00FD31  4C                 	db	76
   102  00FD32  2A                 	db	42
   103  00FD33  30                 	db	48
   104  00FD34  23                 	db	35
   105  00FD35  44                 	db	68
   106  00FD36  00                 	db	0
   107  00FD37                     __end_of_input:
   108                           	opt stack 0
   109  00FD37                     _dpowers:
   110                           	opt stack 0
   111  00FD37  0001               	dw	1
   112  00FD39  000A               	dw	10
   113  00FD3B  0064               	dw	100
   114  00FD3D  03E8               	dw	1000
   115  00FD3F  2710               	dw	10000
   116  00FD41                     __end_of_dpowers:
   117                           	opt stack 0
   118  00FD41                     _LCD_LEFT:
   119                           	opt stack 0
   120  00FD41  00                 	db	0
   121  00FD42                     __end_of_LCD_LEFT:
   122                           	opt stack 0
   123  00FD42                     _LCD_RIGHT:
   124                           	opt stack 0
   125  00FD42  01                 	db	1
   126  00FD43                     __end_of_LCD_RIGHT:
   127                           	opt stack 0
   128  00FD43                     _LCD_SIZE_VERT:
   129                           	opt stack 0
   130  00FD43  02                 	db	2
   131  00FD44                     __end_of_LCD_SIZE_VERT:
   132                           	opt stack 0
   133  00FD44                     _LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  00FD44  10                 	db	16
   136  00FD45                     __end_of_LCD_SIZE_HORZ:
   137                           	opt stack 0
   138  00FD45                     _LCD_VERT_LIMIT:
   139                           	opt stack 0
   140  00FD45  02                 	db	2
   141  00FD46                     __end_of_LCD_VERT_LIMIT:
   142                           	opt stack 0
   143  00FD46                     _LCD_HORZ_LIMIT:
   144                           	opt stack 0
   145  00FD46  28                 	db	40
   146  00FD47                     __end_of_LCD_HORZ_LIMIT:
   147                           	opt stack 0
   148  0000                     _PORTB	set	3969
   149  0000                     _PORTBbits	set	3969
   150  0000                     _INTCONbits	set	4082
   151  0000                     _LATDbits	set	3980
   152  0000                     _ADCON1	set	4033
   153  0000                     _ADCON0	set	4034
   154  0000                     _TRISE	set	3990
   155  0000                     _TRISD	set	3989
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISB	set	3987
   158  0000                     _TRISA	set	3986
   159  0000                     _LATE	set	3981
   160  0000                     _LATD	set	3980
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  00FD47                     STR_12:
   165  00FD47  52                 	db	82	;'R'
   166  00FD48  65                 	db	101	;'e'
   167  00FD49  6D                 	db	109	;'m'
   168  00FD4A  61                 	db	97	;'a'
   169  00FD4B  69                 	db	105	;'i'
   170  00FD4C  6E                 	db	110	;'n'
   171  00FD4D  69                 	db	105	;'i'
   172  00FD4E  6E                 	db	110	;'n'
   173  00FD4F  67                 	db	103	;'g'
   174  00FD50  20                 	db	32
   175  00FD51  70                 	db	112	;'p'
   176  00FD52  69                 	db	105	;'i'
   177  00FD53  65                 	db	101	;'e'
   178  00FD54  63                 	db	99	;'c'
   179  00FD55  65                 	db	101	;'e'
   180  00FD56  73                 	db	115	;'s'
   181  00FD57  3A                 	db	58	;':'
   182  00FD58  00                 	db	0
   183  00FD59                     STR_51:
   184  00FD59  64                 	db	100	;'d'
   185  00FD5A  72                 	db	114	;'r'
   186  00FD5B  61                 	db	97	;'a'
   187  00FD5C  77                 	db	119	;'w'
   188  00FD5D  65                 	db	101	;'e'
   189  00FD5E  72                 	db	114	;'r'
   190  00FD5F  73                 	db	115	;'s'
   191  00FD60  20                 	db	32
   192  00FD61  72                 	db	114	;'r'
   193  00FD62  65                 	db	101	;'e'
   194  00FD63  61                 	db	97	;'a'
   195  00FD64  63                 	db	99	;'c'
   196  00FD65  68                 	db	104	;'h'
   197  00FD66  65                 	db	101	;'e'
   198  00FD67  64                 	db	100	;'d'
   199  00FD68  21                 	db	33
   200  00FD69  00                 	db	0
   201  00FD6A                     STR_41:
   202  00FD6A  64                 	db	100	;'d'
   203  00FD6B  72                 	db	114	;'r'
   204  00FD6C  61                 	db	97	;'a'
   205  00FD6D  77                 	db	119	;'w'
   206  00FD6E  65                 	db	101	;'e'
   207  00FD6F  72                 	db	114	;'r'
   208  00FD70  20                 	db	32
   209  00FD71  69                 	db	105	;'i'
   210  00FD72  6E                 	db	110	;'n'
   211  00FD73  70                 	db	112	;'p'
   212  00FD74  75                 	db	117	;'u'
   213  00FD75  74                 	db	116	;'t'
   214  00FD76  73                 	db	115	;'s'
   215  00FD77  2E                 	db	46
   216  00FD78  2E                 	db	46
   217  00FD79  2E                 	db	46
   218  00FD7A  00                 	db	0
   219  00FD7B                     STR_31:
   220  00FD7B  62                 	db	98	;'b'
   221  00FD7C  65                 	db	101	;'e'
   222  00FD7D  67                 	db	103	;'g'
   223  00FD7E  69                 	db	105	;'i'
   224  00FD7F  6E                 	db	110	;'n'
   225  00FD80  20                 	db	32
   226  00FD81  6F                 	db	111	;'o'
   227  00FD82  70                 	db	112	;'p'
   228  00FD83  65                 	db	101	;'e'
   229  00FD84  72                 	db	114	;'r'
   230  00FD85  61                 	db	97	;'a'
   231  00FD86  74                 	db	116	;'t'
   232  00FD87  69                 	db	105	;'i'
   233  00FD88  6F                 	db	111	;'o'
   234  00FD89  6E                 	db	110	;'n'
   235  00FD8A  2E                 	db	46
   236  00FD8B  00                 	db	0
   237  00FD8C                     STR_3:
   238  00FD8C  50                 	db	80	;'P'
   239  00FD8D  6C                 	db	108	;'l'
   240  00FD8E  65                 	db	101	;'e'
   241  00FD8F  61                 	db	97	;'a'
   242  00FD90  73                 	db	115	;'s'
   243  00FD91  65                 	db	101	;'e'
   244  00FD92  20                 	db	32
   245  00FD93  69                 	db	105	;'i'
   246  00FD94  6E                 	db	110	;'n'
   247  00FD95  70                 	db	112	;'p'
   248  00FD96  75                 	db	117	;'u'
   249  00FD97  74                 	db	116	;'t'
   250  00FD98  20                 	db	32
   251  00FD99  6C                 	db	108	;'l'
   252  00FD9A  6F                 	db	111	;'o'
   253  00FD9B  67                 	db	103	;'g'
   254  00FD9C  00                 	db	0
   255  00FD9D                     STR_6:
   256  00FD9D  50                 	db	80	;'P'
   257  00FD9E  72                 	db	114	;'r'
   258  00FD9F  65                 	db	101	;'e'
   259  00FDA0  73                 	db	115	;'s'
   260  00FDA1  73                 	db	115	;'s'
   261  00FDA2  20                 	db	32
   262  00FDA3  61                 	db	97	;'a'
   263  00FDA4  6E                 	db	110	;'n'
   264  00FDA5  79                 	db	121	;'y'
   265  00FDA6  20                 	db	32
   266  00FDA7  6B                 	db	107	;'k'
   267  00FDA8  65                 	db	101	;'e'
   268  00FDA9  79                 	db	121	;'y'
   269  00FDAA  20                 	db	32
   270  00FDAB  74                 	db	116	;'t'
   271  00FDAC  6F                 	db	111	;'o'
   272  00FDAD  00                 	db	0
   273  00FDAE                     STR_40:
   274  00FDAE  69                 	db	105	;'i'
   275  00FDAF  6E                 	db	110	;'n'
   276  00FDB0  73                 	db	115	;'s'
   277  00FDB1  74                 	db	116	;'t'
   278  00FDB2  72                 	db	114	;'r'
   279  00FDB3  75                 	db	117	;'u'
   280  00FDB4  63                 	db	99	;'c'
   281  00FDB5  74                 	db	116	;'t'
   282  00FDB6  69                 	db	105	;'i'
   283  00FDB7  6F                 	db	111	;'o'
   284  00FDB8  6E                 	db	110	;'n'
   285  00FDB9  73                 	db	115	;'s'
   286  00FDBA  20                 	db	32
   287  00FDBB  66                 	db	102	;'f'
   288  00FDBC  6F                 	db	111	;'o'
   289  00FDBD  72                 	db	114	;'r'
   290  00FDBE  00                 	db	0
   291  00FDBF                     STR_47:
   292  00FDBF  73                 	db	115	;'s'
   293  00FDC0  75                 	db	117	;'u'
   294  00FDC1  62                 	db	98	;'b'
   295  00FDC2  6D                 	db	109	;'m'
   296  00FDC3  69                 	db	105	;'i'
   297  00FDC4  74                 	db	116	;'t'
   298  00FDC5  20                 	db	32
   299  00FDC6  74                 	db	116	;'t'
   300  00FDC7  68                 	db	104	;'h'
   301  00FDC8  65                 	db	101	;'e'
   302  00FDC9  20                 	db	32
   303  00FDCA  69                 	db	105	;'i'
   304  00FDCB  6E                 	db	110	;'n'
   305  00FDCC  70                 	db	112	;'p'
   306  00FDCD  75                 	db	117	;'u'
   307  00FDCE  74                 	db	116	;'t'
   308  00FDCF  00                 	db	0
   309  00FDD0                     STR_33:
   310  00FDD0  63                 	db	99	;'c'
   311  00FDD1  61                 	db	97	;'a'
   312  00FDD2  62                 	db	98	;'b'
   313  00FDD3  69                 	db	105	;'i'
   314  00FDD4  6E                 	db	110	;'n'
   315  00FDD5  65                 	db	101	;'e'
   316  00FDD6  74                 	db	116	;'t'
   317  00FDD7  20                 	db	32
   318  00FDD8  73                 	db	115	;'s'
   319  00FDD9  6F                 	db	111	;'o'
   320  00FDDA  72                 	db	114	;'r'
   321  00FDDB  74                 	db	116	;'t'
   322  00FDDC  65                 	db	101	;'e'
   323  00FDDD  72                 	db	114	;'r'
   324  00FDDE  21                 	db	33
   325  00FDDF  00                 	db	0
   326  00FDE0                     STR_45:
   327  00FDE0  61                 	db	97	;'a'
   328  00FDE1  6E                 	db	110	;'n'
   329  00FDE2  64                 	db	100	;'d'
   330  00FDE3  20                 	db	32
   331  00FDE4  43                 	db	67	;'C'
   332  00FDE5  20                 	db	32
   333  00FDE6  69                 	db	105	;'i'
   334  00FDE7  73                 	db	115	;'s'
   335  00FDE8  20                 	db	32
   336  00FDE9  66                 	db	102	;'f'
   337  00FDEA  6F                 	db	111	;'o'
   338  00FDEB  72                 	db	114	;'r'
   339  00FDEC  20                 	db	32
   340  00FDED  4C                 	db	76	;'L'
   341  00FDEE  2E                 	db	46
   342  00FDEF  00                 	db	0
   343  00FDF0                     STR_55:
   344  00FDF0  6E                 	db	110	;'n'
   345  00FDF1  75                 	db	117	;'u'
   346  00FDF2  6D                 	db	109	;'m'
   347  00FDF3  62                 	db	98	;'b'
   348  00FDF4  65                 	db	101	;'e'
   349  00FDF5  72                 	db	114	;'r'
   350  00FDF6  20                 	db	32
   351  00FDF7  70                 	db	112	;'p'
   352  00FDF8  72                 	db	114	;'r'
   353  00FDF9  65                 	db	101	;'e'
   354  00FDFA  73                 	db	115	;'s'
   355  00FDFB  73                 	db	115	;'s'
   356  00FDFC  65                 	db	101	;'e'
   357  00FDFD  64                 	db	100	;'d'
   358  00FDFE  2E                 	db	46
   359  00FDFF  00                 	db	0
   360  00FE00                     STR_13:
   361  00FE00  52                 	db	82	;'R'
   362  00FE01  3A                 	db	58	;':'
   363  00FE02  33                 	db	51	;'3'
   364  00FE03  20                 	db	32
   365  00FE04  20                 	db	32
   366  00FE05  46                 	db	70	;'F'
   367  00FE06  3A                 	db	58	;':'
   368  00FE07  31                 	db	49	;'1'
   369  00FE08  32                 	db	50	;'2'
   370  00FE09  20                 	db	32
   371  00FE0A  20                 	db	32
   372  00FE0B  4C                 	db	76	;'L'
   373  00FE0C  3A                 	db	58	;':'
   374  00FE0D  31                 	db	49	;'1'
   375  00FE0E  30                 	db	48	;'0'
   376  00FE0F  00                 	db	0
   377  00FE10                     STR_19:
   378  00FE10  44                 	db	68	;'D'
   379  00FE11  72                 	db	114	;'r'
   380  00FE12  61                 	db	97	;'a'
   381  00FE13  77                 	db	119	;'w'
   382  00FE14  65                 	db	101	;'e'
   383  00FE15  72                 	db	114	;'r'
   384  00FE16  20                 	db	32
   385  00FE17  25                 	db	37
   386  00FE18  69                 	db	105	;'i'
   387  00FE19  20                 	db	32
   388  00FE1A  66                 	db	102	;'f'
   389  00FE1B  6F                 	db	111	;'o'
   390  00FE1C  6F                 	db	111	;'o'
   391  00FE1D  64                 	db	100	;'d'
   392  00FE1E  3A                 	db	58	;':'
   393  00FE1F  00                 	db	0
   394  00FE20                     STR_8:
   395  00FE20  4F                 	db	79	;'O'
   396  00FE21  70                 	db	112	;'p'
   397  00FE22  65                 	db	101	;'e'
   398  00FE23  72                 	db	114	;'r'
   399  00FE24  61                 	db	97	;'a'
   400  00FE25  74                 	db	116	;'t'
   401  00FE26  69                 	db	105	;'i'
   402  00FE27  6F                 	db	111	;'o'
   403  00FE28  6E                 	db	110	;'n'
   404  00FE29  20                 	db	32
   405  00FE2A  74                 	db	116	;'t'
   406  00FE2B  69                 	db	105	;'i'
   407  00FE2C  6D                 	db	109	;'m'
   408  00FE2D  65                 	db	101	;'e'
   409  00FE2E  3A                 	db	58	;':'
   410  00FE2F  00                 	db	0
   411  00FE30                     STR_10:
   412  00FE30  4D                 	db	77	;'M'
   413  00FE31  61                 	db	97	;'a'
   414  00FE32  72                 	db	114	;'r'
   415  00FE33  6B                 	db	107	;'k'
   416  00FE34  65                 	db	101	;'e'
   417  00FE35  64                 	db	100	;'d'
   418  00FE36  20                 	db	32
   419  00FE37  64                 	db	100	;'d'
   420  00FE38  72                 	db	114	;'r'
   421  00FE39  61                 	db	97	;'a'
   422  00FE3A  77                 	db	119	;'w'
   423  00FE3B  65                 	db	101	;'e'
   424  00FE3C  72                 	db	114	;'r'
   425  00FE3D  73                 	db	115	;'s'
   426  00FE3E  3A                 	db	58	;':'
   427  00FE3F  00                 	db	0
   428  00FE40                     STR_23:
   429  00FE40  44                 	db	68	;'D'
   430  00FE41  72                 	db	114	;'r'
   431  00FE42  61                 	db	97	;'a'
   432  00FE43  77                 	db	119	;'w'
   433  00FE44  65                 	db	101	;'e'
   434  00FE45  72                 	db	114	;'r'
   435  00FE46  20                 	db	32
   436  00FE47  25                 	db	37
   437  00FE48  69                 	db	105	;'i'
   438  00FE49  20                 	db	32
   439  00FE4A  64                 	db	100	;'d'
   440  00FE4B  69                 	db	105	;'i'
   441  00FE4C  65                 	db	101	;'e'
   442  00FE4D  74                 	db	116	;'t'
   443  00FE4E  3A                 	db	58	;':'
   444  00FE4F  00                 	db	0
   445  00FE50                     STR_14:
   446  00FE50  44                 	db	68	;'D'
   447  00FE51  72                 	db	114	;'r'
   448  00FE52  61                 	db	97	;'a'
   449  00FE53  77                 	db	119	;'w'
   450  00FE54  65                 	db	101	;'e'
   451  00FE55  72                 	db	114	;'r'
   452  00FE56  20                 	db	32
   453  00FE57  53                 	db	83	;'S'
   454  00FE58  75                 	db	117	;'u'
   455  00FE59  6D                 	db	109	;'m'
   456  00FE5A  6D                 	db	109	;'m'
   457  00FE5B  61                 	db	97	;'a'
   458  00FE5C  72                 	db	114	;'r'
   459  00FE5D  79                 	db	121	;'y'
   460  00FE5E  3A                 	db	58	;':'
   461  00FE5F  00                 	db	0
   462  00FE60                     STR_52:
   463  00FE60  41                 	db	65	;'A'
   464  00FE61  6E                 	db	110	;'n'
   465  00FE62  6F                 	db	111	;'o'
   466  00FE63  74                 	db	116	;'t'
   467  00FE64  68                 	db	104	;'h'
   468  00FE65  65                 	db	101	;'e'
   469  00FE66  72                 	db	114	;'r'
   470  00FE67  20                 	db	32
   471  00FE68  64                 	db	100	;'d'
   472  00FE69  72                 	db	114	;'r'
   473  00FE6A  61                 	db	97	;'a'
   474  00FE6B  77                 	db	119	;'w'
   475  00FE6C  65                 	db	101	;'e'
   476  00FE6D  72                 	db	114	;'r'
   477  00FE6E  3F                 	db	63	;'?'
   478  00FE6F  00                 	db	0
   479  00FE70                     STR_48:
   480  00FE70  61                 	db	97	;'a'
   481  00FE71  6E                 	db	110	;'n'
   482  00FE72  64                 	db	100	;'d'
   483  00FE73  20                 	db	32
   484  00FE74  61                 	db	97	;'a'
   485  00FE75  64                 	db	100	;'d'
   486  00FE76  76                 	db	118	;'v'
   487  00FE77  61                 	db	97	;'a'
   488  00FE78  6E                 	db	110	;'n'
   489  00FE79  63                 	db	99	;'c'
   490  00FE7A  65                 	db	101	;'e'
   491  00FE7B  20                 	db	32
   492  00FE7C  74                 	db	116	;'t'
   493  00FE7D  68                 	db	104	;'h'
   494  00FE7E  65                 	db	101	;'e'
   495  00FE7F  00                 	db	0
   496  00FE80                     STR_18:
   497  00FE80  23                 	db	35
   498  00FE81  20                 	db	32
   499  00FE82  3D                 	db	61	;'='
   500  00FE83  20                 	db	32
   501  00FE84  59                 	db	89	;'Y'
   502  00FE85  65                 	db	101	;'e'
   503  00FE86  73                 	db	115	;'s'
   504  00FE87  2C                 	db	44
   505  00FE88  20                 	db	32
   506  00FE89  44                 	db	68	;'D'
   507  00FE8A  20                 	db	32
   508  00FE8B  3D                 	db	61	;'='
   509  00FE8C  20                 	db	32
   510  00FE8D  4E                 	db	78	;'N'
   511  00FE8E  6F                 	db	111	;'o'
   512  00FE8F  00                 	db	0
   513  00FE90                     STR_32:
   514  00FE90  57                 	db	87	;'W'
   515  00FE91  65                 	db	101	;'e'
   516  00FE92  6C                 	db	108	;'l'
   517  00FE93  63                 	db	99	;'c'
   518  00FE94  6F                 	db	111	;'o'
   519  00FE95  6D                 	db	109	;'m'
   520  00FE96  65                 	db	101	;'e'
   521  00FE97  20                 	db	32
   522  00FE98  74                 	db	116	;'t'
   523  00FE99  6F                 	db	111	;'o'
   524  00FE9A  20                 	db	32
   525  00FE9B  79                 	db	121	;'y'
   526  00FE9C  6F                 	db	111	;'o'
   527  00FE9D  75                 	db	117	;'u'
   528  00FE9E  72                 	db	114	;'r'
   529  00FE9F  00                 	db	0
   530  00FEA0                     STR_1:
   531  00FEA0  35                 	db	53	;'5'
   532  00FEA1  20                 	db	32
   533  00FEA2  70                 	db	112	;'p'
   534  00FEA3  72                 	db	114	;'r'
   535  00FEA4  65                 	db	101	;'e'
   536  00FEA5  76                 	db	118	;'v'
   537  00FEA6  69                 	db	105	;'i'
   538  00FEA7  6F                 	db	111	;'o'
   539  00FEA8  75                 	db	117	;'u'
   540  00FEA9  73                 	db	115	;'s'
   541  00FEAA  20                 	db	32
   542  00FEAB  6C                 	db	108	;'l'
   543  00FEAC  6F                 	db	111	;'o'
   544  00FEAD  67                 	db	103	;'g'
   545  00FEAE  73                 	db	115	;'s'
   546  00FEAF  00                 	db	0
   547  00FEB0                     STR_15:
   548  00FEB0  44                 	db	68	;'D'
   549  00FEB1  72                 	db	114	;'r'
   550  00FEB2  61                 	db	97	;'a'
   551  00FEB3  77                 	db	119	;'w'
   552  00FEB4  65                 	db	101	;'e'
   553  00FEB5  72                 	db	114	;'r'
   554  00FEB6  20                 	db	32
   555  00FEB7  31                 	db	49	;'1'
   556  00FEB8  3A                 	db	58	;':'
   557  00FEB9  20                 	db	32
   558  00FEBA  52                 	db	82	;'R'
   559  00FEBB  46                 	db	70	;'F'
   560  00FEBC  31                 	db	49	;'1'
   561  00FEBD  32                 	db	50	;'2'
   562  00FEBE  00                 	db	0
   563  00FEBF                     STR_27:
   564  00FEBF  44                 	db	68	;'D'
   565  00FEC0  72                 	db	114	;'r'
   566  00FEC1  61                 	db	97	;'a'
   567  00FEC2  77                 	db	119	;'w'
   568  00FEC3  65                 	db	101	;'e'
   569  00FEC4  72                 	db	114	;'r'
   570  00FEC5  20                 	db	32
   571  00FEC6  6E                 	db	110	;'n'
   572  00FEC7  75                 	db	117	;'u'
   573  00FEC8  6D                 	db	109	;'m'
   574  00FEC9  62                 	db	98	;'b'
   575  00FECA  65                 	db	101	;'e'
   576  00FECB  72                 	db	114	;'r'
   577  00FECC  3A                 	db	58	;':'
   578  00FECD  00                 	db	0
   579  00FECE                     STR_42:
   580  00FECE  50                 	db	80	;'P'
   581  00FECF  72                 	db	114	;'r'
   582  00FED0  65                 	db	101	;'e'
   583  00FED1  73                 	db	115	;'s'
   584  00FED2  73                 	db	115	;'s'
   585  00FED3  20                 	db	32
   586  00FED4  41                 	db	65	;'A'
   587  00FED5  20                 	db	32
   588  00FED6  6F                 	db	111	;'o'
   589  00FED7  6E                 	db	110	;'n'
   590  00FED8  20                 	db	32
   591  00FED9  74                 	db	116	;'t'
   592  00FEDA  68                 	db	104	;'h'
   593  00FEDB  65                 	db	101	;'e'
   594  00FEDC  00                 	db	0
   595  00FEDD                     STR_56:
   596  00FEDD  44                 	db	68	;'D'
   597  00FEDE  72                 	db	114	;'r'
   598  00FEDF  61                 	db	97	;'a'
   599  00FEE0  77                 	db	119	;'w'
   600  00FEE1  65                 	db	101	;'e'
   601  00FEE2  72                 	db	114	;'r'
   602  00FEE3  20                 	db	32
   603  00FEE4  61                 	db	97	;'a'
   604  00FEE5  6C                 	db	108	;'l'
   605  00FEE6  72                 	db	114	;'r'
   606  00FEE7  65                 	db	101	;'e'
   607  00FEE8  61                 	db	97	;'a'
   608  00FEE9  64                 	db	100	;'d'
   609  00FEEA  79                 	db	121	;'y'
   610  00FEEB  00                 	db	0
   611  00FEEC                     STR_21:
   612  00FEEC  49                 	db	73	;'I'
   613  00FEED  6E                 	db	110	;'n'
   614  00FEEE  76                 	db	118	;'v'
   615  00FEEF  61                 	db	97	;'a'
   616  00FEF0  6C                 	db	108	;'l'
   617  00FEF1  69                 	db	105	;'i'
   618  00FEF2  64                 	db	100	;'d'
   619  00FEF3  20                 	db	32
   620  00FEF4  66                 	db	102	;'f'
   621  00FEF5  6F                 	db	111	;'o'
   622  00FEF6  6F                 	db	111	;'o'
   623  00FEF7  64                 	db	100	;'d'
   624  00FEF8  21                 	db	33
   625  00FEF9  00                 	db	0
   626  00FEFA                     STR_25:
   627  00FEFA  49                 	db	73	;'I'
   628  00FEFB  6E                 	db	110	;'n'
   629  00FEFC  76                 	db	118	;'v'
   630  00FEFD  61                 	db	97	;'a'
   631  00FEFE  6C                 	db	108	;'l'
   632  00FEFF  69                 	db	105	;'i'
   633  00FF00  64                 	db	100	;'d'
   634  00FF01  20                 	db	32
   635  00FF02  64                 	db	100	;'d'
   636  00FF03  69                 	db	105	;'i'
   637  00FF04  65                 	db	101	;'e'
   638  00FF05  74                 	db	116	;'t'
   639  00FF06  21                 	db	33
   640  00FF07  00                 	db	0
   641  00FF08                     STR_43:
   642  00FF08  6B                 	db	107	;'k'
   643  00FF09  65                 	db	101	;'e'
   644  00FF0A  79                 	db	121	;'y'
   645  00FF0B  70                 	db	112	;'p'
   646  00FF0C  61                 	db	97	;'a'
   647  00FF0D  64                 	db	100	;'d'
   648  00FF0E  20                 	db	32
   649  00FF0F  66                 	db	102	;'f'
   650  00FF10  6F                 	db	111	;'o'
   651  00FF11  72                 	db	114	;'r'
   652  00FF12  20                 	db	32
   653  00FF13  52                 	db	82	;'R'
   654  00FF14  2C                 	db	44
   655  00FF15  00                 	db	0
   656  00FF16                     STR_36:
   657  00FF16  6F                 	db	111	;'o'
   658  00FF17  72                 	db	114	;'r'
   659  00FF18  20                 	db	32
   660  00FF19  70                 	db	112	;'p'
   661  00FF1A  72                 	db	114	;'r'
   662  00FF1B  65                 	db	101	;'e'
   663  00FF1C  73                 	db	115	;'s'
   664  00FF1D  73                 	db	115	;'s'
   665  00FF1E  20                 	db	32
   666  00FF1F  23                 	db	35
   667  00FF20  20                 	db	32
   668  00FF21  74                 	db	116	;'t'
   669  00FF22  6F                 	db	111	;'o'
   670  00FF23  00                 	db	0
   671  00FF24                     STR_63:
   672  00FF24  49                 	db	73	;'I'
   673  00FF25  6E                 	db	110	;'n'
   674  00FF26  76                 	db	118	;'v'
   675  00FF27  61                 	db	97	;'a'
   676  00FF28  6C                 	db	108	;'l'
   677  00FF29  69                 	db	105	;'i'
   678  00FF2A  64                 	db	100	;'d'
   679  00FF2B  20                 	db	32
   680  00FF2C  6B                 	db	107	;'k'
   681  00FF2D  65                 	db	101	;'e'
   682  00FF2E  79                 	db	121	;'y'
   683  00FF2F  21                 	db	33
   684  00FF30  00                 	db	0
   685  00FF31                     STR_49:
   686  00FF31  6E                 	db	110	;'n'
   687  00FF32  65                 	db	101	;'e'
   688  00FF33  78                 	db	120	;'x'
   689  00FF34  74                 	db	116	;'t'
   690  00FF35  20                 	db	32
   691  00FF36  73                 	db	115	;'s'
   692  00FF37  63                 	db	99	;'c'
   693  00FF38  72                 	db	114	;'r'
   694  00FF39  65                 	db	101	;'e'
   695  00FF3A  65                 	db	101	;'e'
   696  00FF3B  6E                 	db	110	;'n'
   697  00FF3C  2E                 	db	46
   698  00FF3D  00                 	db	0
   699  00FF3E                     STR_16:
   700  00FF3E  44                 	db	68	;'D'
   701  00FF3F  72                 	db	114	;'r'
   702  00FF40  61                 	db	97	;'a'
   703  00FF41  77                 	db	119	;'w'
   704  00FF42  65                 	db	101	;'e'
   705  00FF43  72                 	db	114	;'r'
   706  00FF44  20                 	db	32
   707  00FF45  32                 	db	50	;'2'
   708  00FF46  3A                 	db	58	;':'
   709  00FF47  20                 	db	32
   710  00FF48  4C                 	db	76	;'L'
   711  00FF49  31                 	db	49	;'1'
   712  00FF4A  00                 	db	0
   713  00FF4B                     STR_50:
   714  00FF4B  4D                 	db	77	;'M'
   715  00FF4C  61                 	db	97	;'a'
   716  00FF4D  78                 	db	120	;'x'
   717  00FF4E  69                 	db	105	;'i'
   718  00FF4F  6D                 	db	109	;'m'
   719  00FF50  75                 	db	117	;'u'
   720  00FF51  6D                 	db	109	;'m'
   721  00FF52  20                 	db	32
   722  00FF53  6F                 	db	111	;'o'
   723  00FF54  66                 	db	102	;'f'
   724  00FF55  20                 	db	32
   725  00FF56  38                 	db	56	;'8'
   726  00FF57  00                 	db	0
   727  00FF58                     STR_17:
   728  00FF58  41                 	db	65	;'A'
   729  00FF59  6E                 	db	110	;'n'
   730  00FF5A  6F                 	db	111	;'o'
   731  00FF5B  74                 	db	116	;'t'
   732  00FF5C  68                 	db	104	;'h'
   733  00FF5D  65                 	db	101	;'e'
   734  00FF5E  72                 	db	114	;'r'
   735  00FF5F  20                 	db	32
   736  00FF60  6C                 	db	108	;'l'
   737  00FF61  6F                 	db	111	;'o'
   738  00FF62  67                 	db	103	;'g'
   739  00FF63  3F                 	db	63	;'?'
   740  00FF64  00                 	db	0
   741  00FF65                     STR_39:
   742  00FF65  48                 	db	72	;'H'
   743  00FF66  65                 	db	101	;'e'
   744  00FF67  72                 	db	114	;'r'
   745  00FF68  65                 	db	101	;'e'
   746  00FF69  20                 	db	32
   747  00FF6A  61                 	db	97	;'a'
   748  00FF6B  72                 	db	114	;'r'
   749  00FF6C  65                 	db	101	;'e'
   750  00FF6D  20                 	db	32
   751  00FF6E  74                 	db	116	;'t'
   752  00FF6F  68                 	db	104	;'h'
   753  00FF70  65                 	db	101	;'e'
   754  00FF71  00                 	db	0
   755  00FF72                     STR_44:
   756  00FF72  42                 	db	66	;'B'
   757  00FF73  20                 	db	32
   758  00FF74  69                 	db	105	;'i'
   759  00FF75  73                 	db	115	;'s'
   760  00FF76  20                 	db	32
   761  00FF77  66                 	db	102	;'f'
   762  00FF78  6F                 	db	111	;'o'
   763  00FF79  72                 	db	114	;'r'
   764  00FF7A  20                 	db	32
   765  00FF7B  46                 	db	70	;'F'
   766  00FF7C  2C                 	db	44
   767  00FF7D  00                 	db	0
   768  00FF7E                     STR_35:
   769  00FF7E  76                 	db	118	;'v'
   770  00FF7F  69                 	db	105	;'i'
   771  00FF80  65                 	db	101	;'e'
   772  00FF81  77                 	db	119	;'w'
   773  00FF82  20                 	db	32
   774  00FF83  6C                 	db	108	;'l'
   775  00FF84  6F                 	db	111	;'o'
   776  00FF85  67                 	db	103	;'g'
   777  00FF86  73                 	db	115	;'s'
   778  00FF87  2C                 	db	44
   779  00FF88  00                 	db	0
   780  00FF89                     STR_2:
   781  00FF89  61                 	db	97	;'a'
   782  00FF8A  76                 	db	118	;'v'
   783  00FF8B  61                 	db	97	;'a'
   784  00FF8C  69                 	db	105	;'i'
   785  00FF8D  6C                 	db	108	;'l'
   786  00FF8E  61                 	db	97	;'a'
   787  00FF8F  62                 	db	98	;'b'
   788  00FF90  6C                 	db	108	;'l'
   789  00FF91  65                 	db	101	;'e'
   790  00FF92  2E                 	db	46
   791  00FF93  00                 	db	0
   792  00FF94                     STR_62:
   793  00FF94  52                 	db	82	;'R'
   794  00FF95  65                 	db	101	;'e'
   795  00FF96  62                 	db	98	;'b'
   796  00FF97  6F                 	db	111	;'o'
   797  00FF98  6F                 	db	111	;'o'
   798  00FF99  74                 	db	116	;'t'
   799  00FF9A  69                 	db	105	;'i'
   800  00FF9B  6E                 	db	110	;'n'
   801  00FF9C  67                 	db	103	;'g'
   802  00FF9D  2E                 	db	46
   803  00FF9E  00                 	db	0
   804  00FF9F                     STR_22:
   805  00FF9F  54                 	db	84	;'T'
   806  00FFA0  72                 	db	114	;'r'
   807  00FFA1  79                 	db	121	;'y'
   808  00FFA2  20                 	db	32
   809  00FFA3  61                 	db	97	;'a'
   810  00FFA4  67                 	db	103	;'g'
   811  00FFA5  61                 	db	97	;'a'
   812  00FFA6  69                 	db	105	;'i'
   813  00FFA7  6E                 	db	110	;'n'
   814  00FFA8  2E                 	db	46
   815  00FFA9  00                 	db	0
   816  00FFAA                     STR_46:
   817  00FFAA  50                 	db	80	;'P'
   818  00FFAB  72                 	db	114	;'r'
   819  00FFAC  65                 	db	101	;'e'
   820  00FFAD  73                 	db	115	;'s'
   821  00FFAE  73                 	db	115	;'s'
   822  00FFAF  20                 	db	32
   823  00FFB0  23                 	db	35
   824  00FFB1  20                 	db	32
   825  00FFB2  74                 	db	116	;'t'
   826  00FFB3  6F                 	db	111	;'o'
   827  00FFB4  00                 	db	0
   828  00FFB5                     STR_34:
   829  00FFB5  50                 	db	80	;'P'
   830  00FFB6  72                 	db	114	;'r'
   831  00FFB7  65                 	db	101	;'e'
   832  00FFB8  73                 	db	115	;'s'
   833  00FFB9  73                 	db	115	;'s'
   834  00FFBA  20                 	db	32
   835  00FFBB  44                 	db	68	;'D'
   836  00FFBC  20                 	db	32
   837  00FFBD  74                 	db	116	;'t'
   838  00FFBE  6F                 	db	111	;'o'
   839  00FFBF  00                 	db	0
   840  00FFC0                     STR_54:
   841  00FFC0  4E                 	db	78	;'N'
   842  00FFC1  6F                 	db	111	;'o'
   843  00FFC2  20                 	db	32
   844  00FFC3  64                 	db	100	;'d'
   845  00FFC4  72                 	db	114	;'r'
   846  00FFC5  61                 	db	97	;'a'
   847  00FFC6  77                 	db	119	;'w'
   848  00FFC7  65                 	db	101	;'e'
   849  00FFC8  72                 	db	114	;'r'
   850  00FFC9  00                 	db	0
   851  00FFCA                     STR_4:
   852  00FFCA  6E                 	db	110	;'n'
   853  00FFCB  75                 	db	117	;'u'
   854  00FFCC  6D                 	db	109	;'m'
   855  00FFCD  62                 	db	98	;'b'
   856  00FFCE  65                 	db	101	;'e'
   857  00FFCF  72                 	db	114	;'r'
   858  00FFD0  3A                 	db	58	;':'
   859  00FFD1  20                 	db	32
   860  00FFD2  00                 	db	0
   861  00FFD3                     STR_7:
   862  00FFD3  6D                 	db	109	;'m'
   863  00FFD4  6F                 	db	111	;'o'
   864  00FFD5  76                 	db	118	;'v'
   865  00FFD6  65                 	db	101	;'e'
   866  00FFD7  20                 	db	32
   867  00FFD8  6F                 	db	111	;'o'
   868  00FFD9  6E                 	db	110	;'n'
   869  00FFDA  2E                 	db	46
   870  00FFDB  00                 	db	0
   871  00FFDC                     STR_57:
   872  00FFDC  69                 	db	105	;'i'
   873  00FFDD  6E                 	db	110	;'n'
   874  00FFDE  20                 	db	32
   875  00FFDF  75                 	db	117	;'u'
   876  00FFE0  73                 	db	115	;'s'
   877  00FFE1  65                 	db	101	;'e'
   878  00FFE2  21                 	db	33
   879  00FFE3  00                 	db	0
   880  00FFE4                     STR_29:
   881  00FFE4  53                 	db	83	;'S'
   882  00FFE5  74                 	db	116	;'t'
   883  00FFE6  61                 	db	97	;'a'
   884  00FFE7  6E                 	db	110	;'n'
   885  00FFE8  64                 	db	100	;'d'
   886  00FFE9  62                 	db	98	;'b'
   887  00FFEA  79                 	db	121	;'y'
   888  00FFEB  00                 	db	0
   889  00FFEC                     STR_5:
   890  00FFEC  47                 	db	71	;'G'
   891  00FFED  72                 	db	114	;'r'
   892  00FFEE  65                 	db	101	;'e'
   893  00FFEF  61                 	db	97	;'a'
   894  00FFF0  74                 	db	116	;'t'
   895  00FFF1  21                 	db	33
   896  00FFF2  00                 	db	0
   897  00FFF3                     STR_11:
   898  00FFF3  31                 	db	49	;'1'
   899  00FFF4  2C                 	db	44
   900  00FFF5  20                 	db	32
   901  00FFF6  31                 	db	49	;'1'
   902  00FFF7  33                 	db	51	;'3'
   903  00FFF8  00                 	db	0
   904  00FFF9                     STR_9:
   905  00FFF9  32                 	db	50	;'2'
   906  00FFFA  3A                 	db	58	;':'
   907  00FFFB  33                 	db	51	;'3'
   908  00FFFC  39                 	db	57	;'9'
   909  00FFFD  00                 	db	0
   910  0000                     
   911                           ; #config settings
   912  00FFFE  00                 	db	0	; dummy byte at the end
   913  0000                     
   914                           	psect	cinit
   915  00E18A                     __pcinit:
   916                           	opt stack 0
   917  00E18A                     start_initialization:
   918                           	opt stack 0
   919  00E18A                     __initialization:
   920                           	opt stack 0
   921                           
   922                           ; Clear objects allocated to COMRAM (34 bytes)
   923  00E18A  EE00  F046         	lfsr	0,__pbssCOMRAM
   924  00E18E  0E22               	movlw	34
   925  00E190                     clear_0:
   926  00E190  6AEE               	clrf	postinc0,c
   927  00E192  06E8               	decf	wreg,f,c
   928  00E194  E1FD               	bnz	clear_0
   929  00E196                     end_of_initialization:
   930                           	opt stack 0
   931  00E196                     __end_of__initialization:
   932                           	opt stack 0
   933  00E196  0E00               	movlw	low (__Lmediumconst shr (0+16))
   934  00E198  6EF8               	movwf	tblptru,c
   935  00E19A  0100               	movlb	0
   936  00E19C  EFD0  F070         	goto	_main	;jump to C main() function
   937                           tblptru	equ	0xFF8
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           
   941                           	psect	bssCOMRAM
   942  000046                     __pbssCOMRAM:
   943                           	opt stack 0
   944  000046                     _drawerInformation:
   945                           	opt stack 0
   946  000046                     	ds	16
   947  000056                     diet_press@F3054:
   948                           	opt stack 0
   949  000056                     	ds	8
   950  00005E                     food_press@F3040:
   951                           	opt stack 0
   952  00005E                     	ds	8
   953  000066                     standbyMode@LCDinterruptState:
   954                           	opt stack 0
   955  000066                     	ds	1
   956  000067                     	ds	1
   957                           tblptru	equ	0xFF8
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           
   961                           	psect	cstackCOMRAM
   962  000001                     __pcstackCOMRAM:
   963                           	opt stack 0
   964  000001                     ?_check_food:
   965                           	opt stack 0
   966  000001                     ?_get_digits:
   967                           	opt stack 0
   968  000001                     ?_decode_drawer:
   969                           	opt stack 0
   970  000001                     ?___lwdiv:
   971                           	opt stack 0
   972  000001                     lcdNibble@temp:
   973                           	opt stack 0
   974  000001                     check_food@sum:
   975                           	opt stack 0
   976  000001                     get_digits@sum:
   977                           	opt stack 0
   978  000001                     decode_drawer@drawer:
   979                           	opt stack 0
   980  000001                     ___lwdiv@dividend:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x0
   984  000001                     	ds	1
   985  000002                     lcdNibble@data:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x1
   989  000002                     	ds	1
   990  000003                     ??_get_digits:
   991  000003                     ??_decode_drawer:
   992  000003                     lcdInst@data:
   993                           	opt stack 0
   994  000003                     putch@data:
   995                           	opt stack 0
   996  000003                     check_food@foodInput:
   997                           	opt stack 0
   998  000003                     ___lwdiv@divisor:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x2
  1002  000003                     	ds	1
  1003  000004                     ??_initLCD:
  1004                           
  1005                           ; 1 bytes @ 0x3
  1006  000004                     	ds	1
  1007  000005                     ??_check_food:
  1008  000005                     get_digits@count:
  1009                           	opt stack 0
  1010  000005                     decode_drawer@returnValue:
  1011                           	opt stack 0
  1012  000005                     ___lwdiv@quotient:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x4
  1016  000005                     	ds	2
  1017  000007                     ___lwdiv@counter:
  1018                           	opt stack 0
  1019  000007                     check_food@returnValue:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x6
  1023  000007                     	ds	1
  1024  000008                     ?___lwmod:
  1025                           	opt stack 0
  1026  000008                     ___lwmod@dividend:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x7
  1030  000008                     	ds	2
  1031  00000A                     ___lwmod@divisor:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x9
  1035  00000A                     	ds	2
  1036  00000C                     ___lwmod@counter:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0xB
  1040  00000C                     	ds	1
  1041  00000D                     ?_printf:
  1042                           	opt stack 0
  1043  00000D                     printf@f:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0xC
  1047  00000D                     	ds	4
  1048  000011                     ??_printf:
  1049                           
  1050                           ; 1 bytes @ 0x10
  1051  000011                     	ds	1
  1052  000012                     printf@ap:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x11
  1056  000012                     	ds	2
  1057  000014                     printf@flag:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x13
  1061  000014                     	ds	1
  1062  000015                     printf@prec:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x14
  1066  000015                     	ds	1
  1067  000016                     printf@val:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x15
  1071  000016                     	ds	2
  1072  000018                     printf@c:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x17
  1076  000018                     	ds	1
  1077  000019                     ?_viewLogs:
  1078                           	opt stack 0
  1079  000019                     ?_diet_press:
  1080                           	opt stack 0
  1081  000019                     ?_which_drawer:
  1082                           	opt stack 0
  1083  000019                     food_press@dietSum:
  1084                           	opt stack 0
  1085  000019                     diet_press@drawer:
  1086                           	opt stack 0
  1087                           
  1088                           ; 2 bytes @ 0x18
  1089  000019                     	ds	2
  1090  00001B                     ??_viewLogs:
  1091  00001B                     ??_diet_press:
  1092  00001B                     ??_which_drawer:
  1093  00001B                     food_press@drawer:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x1A
  1097  00001B                     	ds	1
  1098  00001C                     which_drawer@rand:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x1B
  1102  00001C                     	ds	1
  1103  00001D                     ??_food_press:
  1104  00001D                     viewLogs@keypress3:
  1105                           	opt stack 0
  1106  00001D                     diet_press@previous:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x1C
  1110  00001D                     	ds	1
  1111  00001E                     viewLogs@keypress2:
  1112                           	opt stack 0
  1113  00001E                     which_drawer@sum:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x1D
  1117  00001E                     	ds	1
  1118  00001F                     food_press@tally:
  1119                           	opt stack 0
  1120  00001F                     diet_press@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x1E
  1124  00001F                     	ds	1
  1125  000020                     which_drawer@count:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x1F
  1129  000020                     	ds	1
  1130  000021                     food_press@isValid:
  1131                           	opt stack 0
  1132  000021                     diet_press@count:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x20
  1136  000021                     	ds	1
  1137  000022                     which_drawer@keypress:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x21
  1141  000022                     	ds	1
  1142  000023                     food_press@count:
  1143                           	opt stack 0
  1144  000023                     diet_press@sum:
  1145                           	opt stack 0
  1146                           
  1147                           ; 2 bytes @ 0x22
  1148  000023                     	ds	2
  1149  000025                     diet_press@keypress:
  1150                           	opt stack 0
  1151  000025                     food_press@foodTable:
  1152                           	opt stack 0
  1153                           
  1154                           ; 8 bytes @ 0x24
  1155  000025                     	ds	1
  1156  000026                     diet_press@dietTable:
  1157                           	opt stack 0
  1158                           
  1159                           ; 8 bytes @ 0x25
  1160  000026                     	ds	7
  1161  00002D                     food_press@keypress:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x2C
  1165  00002D                     	ds	1
  1166  00002E                     ??_standbyMode:
  1167                           
  1168                           ; 1 bytes @ 0x2D
  1169  00002E                     	ds	2
  1170  000030                     standbyMode@diet:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2F
  1174  000030                     	ds	2
  1175  000032                     standbyMode@diet_407:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x31
  1179  000032                     	ds	2
  1180  000034                     standbyMode@firstIteration:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x33
  1184  000034                     	ds	2
  1185  000036                     standbyMode@whichKey:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x35
  1189  000036                     	ds	2
  1190  000038                     standbyMode@keypress:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x37
  1194  000038                     	ds	1
  1195  000039                     standbyMode@zero:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x38
  1199  000039                     	ds	2
  1200  00003B                     standbyMode@keypress1:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x3A
  1204  00003B                     	ds	1
  1205  00003C                     standbyMode@validDrawer:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x3B
  1209  00003C                     	ds	2
  1210  00003E                     standbyMode@drawerCount:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x3D
  1214  00003E                     	ds	2
  1215  000040                     standbyMode@drawer:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x3F
  1219  000040                     	ds	2
  1220  000042                     standbyMode@drawer_402:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x41
  1224  000042                     	ds	2
  1225  000044                     standbyMode@i:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x43
  1229  000044                     	ds	2
  1230  000046                     tblptru	equ	0xFF8
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           
  1234                           ; 1 bytes @ 0x45
  1235 ;;
  1236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1237 ;;
  1238 ;; *************** function _main *****************
  1239 ;; Defined at:
  1240 ;;		line 13 in file "main.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;Total ram usage:        0 bytes
  1259 ;; Hardware stack levels required when called:    5
  1260 ;; This function calls:
  1261 ;;		_initLCD
  1262 ;;		_standbyMode
  1263 ;; This function is called by:
  1264 ;;		Startup code after reset
  1265 ;; This function uses a non-reentrant model
  1266 ;;
  1267                           
  1268                           	psect	text0
  1269  00E1A0                     __ptext0:
  1270                           	opt stack 0
  1271  00E1A0                     _main:
  1272                           	opt stack 26
  1273                           
  1274                           ;main.c: 19: LATA = 0x00;
  1275                           
  1276                           ;incstack = 0
  1277  00E1A0  0E00               	movlw	0
  1278  00E1A2  6E89               	movwf	3977,c	;volatile
  1279                           
  1280                           ;main.c: 20: LATB = 0x00;
  1281  00E1A4  0E00               	movlw	0
  1282  00E1A6  6E8A               	movwf	3978,c	;volatile
  1283                           
  1284                           ;main.c: 21: LATC = 0x00;
  1285  00E1A8  0E00               	movlw	0
  1286  00E1AA  6E8B               	movwf	3979,c	;volatile
  1287                           
  1288                           ;main.c: 22: LATD = 0x00;
  1289  00E1AC  0E00               	movlw	0
  1290  00E1AE  6E8C               	movwf	3980,c	;volatile
  1291                           
  1292                           ;main.c: 23: LATE = 0x00;
  1293  00E1B0  0E00               	movlw	0
  1294  00E1B2  6E8D               	movwf	3981,c	;volatile
  1295                           
  1296                           ;main.c: 27: TRISA = 0xFF;
  1297  00E1B4  6892               	setf	3986,c	;volatile
  1298                           
  1299                           ;main.c: 28: TRISB = 0xFF;
  1300  00E1B6  6893               	setf	3987,c	;volatile
  1301                           
  1302                           ;main.c: 29: TRISC = 0x00;
  1303  00E1B8  0E00               	movlw	0
  1304  00E1BA  6E94               	movwf	3988,c	;volatile
  1305                           
  1306                           ;main.c: 30: TRISD = 0x00;
  1307  00E1BC  0E00               	movlw	0
  1308  00E1BE  6E95               	movwf	3989,c	;volatile
  1309                           
  1310                           ;main.c: 31: TRISE = 0x00;
  1311  00E1C0  0E00               	movlw	0
  1312  00E1C2  6E96               	movwf	3990,c	;volatile
  1313                           
  1314                           ;main.c: 34: ADCON0 = 0x00;
  1315  00E1C4  0E00               	movlw	0
  1316  00E1C6  6EC2               	movwf	4034,c	;volatile
  1317                           
  1318                           ;main.c: 35: ADCON1 = 0b00001111;
  1319  00E1C8  0E0F               	movlw	15
  1320  00E1CA  6EC1               	movwf	4033,c	;volatile
  1321                           
  1322                           ;main.c: 38: initLCD();
  1323  00E1CC  EC0D  F071         	call	_initLCD	;wreg free
  1324                           
  1325                           ;main.c: 56: standbyMode();
  1326  00E1D0  EC68  F07A         	call	_standbyMode	;wreg free
  1327                           
  1328                           ;main.c: 57: return;
  1329  00E1D4  EF00  F000         	goto	start
  1330  00E1D8                     __end_of_main:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           postinc0	equ	0xFEE
  1334                           wreg	equ	0xFE8
  1335                           
  1336 ;; *************** function _standbyMode *****************
  1337 ;; Defined at:
  1338 ;;		line 804 in file "standbyMode.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  diet            2   47[COMRAM] unsigned int 
  1343 ;;  drawer          2   63[COMRAM] unsigned int 
  1344 ;;  diet            2   49[COMRAM] unsigned int 
  1345 ;;  keypress1       1   58[COMRAM] unsigned char 
  1346 ;;  drawer          2   65[COMRAM] unsigned int 
  1347 ;;  whichKey        2   53[COMRAM] unsigned int 
  1348 ;;  i               2   67[COMRAM] unsigned int 
  1349 ;;  drawerCount     2   61[COMRAM] unsigned int 
  1350 ;;  validDrawer     2   59[COMRAM] unsigned int 
  1351 ;;  zero            2   56[COMRAM] unsigned int 
  1352 ;;  firstIterati    2   51[COMRAM] unsigned int 
  1353 ;;  keypress        1   55[COMRAM] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:       24 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    4
  1370 ;; This function calls:
  1371 ;;		_diet_press
  1372 ;;		_food_press
  1373 ;;		_lcdInst
  1374 ;;		_printf
  1375 ;;		_viewLogs
  1376 ;;		_which_drawer
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text1
  1383  00F4D0                     __ptext1:
  1384                           	opt stack 0
  1385  00F4D0                     _standbyMode:
  1386                           	opt stack 26
  1387                           
  1388                           ;standbyMode.c: 805: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1389                           
  1390                           ;incstack = 0
  1391  00F4D0  0E01               	movlw	1
  1392  00F4D2  ECB1  F070         	call	_lcdInst
  1393  00F4D6  0EC3               	movlw	195
  1394  00F4D8  6E2E               	movwf	??_standbyMode& (0+255),c
  1395  00F4DA  0ECD               	movlw	205
  1396  00F4DC                     u5297:
  1397  00F4DC  2EE8               	decfsz	wreg,f,c
  1398  00F4DE  D7FE               	bra	u5297
  1399  00F4E0  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1400  00F4E2  D7FC               	bra	u5297
  1401  00F4E4  F000               	nop	
  1402                           
  1403                           ;standbyMode.c: 806: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1404  00F4E6  0E0C               	movlw	12
  1405  00F4E8  ECB1  F070         	call	_lcdInst
  1406                           
  1407                           ;standbyMode.c: 807: printf("Standby");
  1408  00F4EC  0EE4               	movlw	low STR_29
  1409  00F4EE  6E0D               	movwf	printf@f,c
  1410  00F4F0  0EFF               	movlw	high STR_29
  1411  00F4F2  6E0E               	movwf	printf@f+1,c
  1412  00F4F4  EC6B  F072         	call	_printf	;wreg free
  1413                           
  1414                           ;standbyMode.c: 808: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1415  00F4F8  0E66               	movlw	102
  1416  00F4FA  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1417  00F4FC  0E76               	movlw	118
  1418  00F4FE  6E2E               	movwf	??_standbyMode& (0+255),c
  1419  00F500  0EC1               	movlw	193
  1420  00F502                     u5307:
  1421  00F502  2EE8               	decfsz	wreg,f,c
  1422  00F504  D7FE               	bra	u5307
  1423  00F506  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1424  00F508  D7FC               	bra	u5307
  1425  00F50A  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1426  00F50C  D7FA               	bra	u5307
  1427  00F50E  F000               	nop	
  1428                           
  1429                           ;standbyMode.c: 809: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1430  00F510  0E01               	movlw	1
  1431  00F512  ECB1  F070         	call	_lcdInst
  1432  00F516  0EC3               	movlw	195
  1433  00F518  6E2E               	movwf	??_standbyMode& (0+255),c
  1434  00F51A  0ECD               	movlw	205
  1435  00F51C                     u5317:
  1436  00F51C  2EE8               	decfsz	wreg,f,c
  1437  00F51E  D7FE               	bra	u5317
  1438  00F520  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1439  00F522  D7FC               	bra	u5317
  1440  00F524  F000               	nop	
  1441                           
  1442                           ;standbyMode.c: 810: printf("Press any key to");
  1443  00F526  0E9D               	movlw	low STR_6
  1444  00F528  6E0D               	movwf	printf@f,c
  1445  00F52A  0EFD               	movlw	high STR_6
  1446  00F52C  6E0E               	movwf	printf@f+1,c
  1447  00F52E  EC6B  F072         	call	_printf	;wreg free
  1448                           
  1449                           ;standbyMode.c: 811: lcdInst(0xC0);;
  1450  00F532  0EC0               	movlw	192
  1451  00F534  ECB1  F070         	call	_lcdInst
  1452                           
  1453                           ;standbyMode.c: 812: printf("begin operation.");
  1454  00F538  0E7B               	movlw	low STR_31
  1455  00F53A  6E0D               	movwf	printf@f,c
  1456  00F53C  0EFD               	movlw	high STR_31
  1457  00F53E  6E0E               	movwf	printf@f+1,c
  1458  00F540  EC6B  F072         	call	_printf	;wreg free
  1459  00F544                     
  1460                           ;standbyMode.c: 815: continue;
  1461  00F544  A281               	btfss	3969,1,c	;volatile
  1462  00F546  D7FE               	goto	l412
  1463                           
  1464                           ;standbyMode.c: 816: }
  1465                           ;standbyMode.c: 819: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1466  00F548  0E01               	movlw	1
  1467  00F54A  ECB1  F070         	call	_lcdInst
  1468  00F54E  0EC3               	movlw	195
  1469  00F550  6E2E               	movwf	??_standbyMode& (0+255),c
  1470  00F552  0ECD               	movlw	205
  1471  00F554                     u5327:
  1472  00F554  2EE8               	decfsz	wreg,f,c
  1473  00F556  D7FE               	bra	u5327
  1474  00F558  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1475  00F55A  D7FC               	bra	u5327
  1476  00F55C  F000               	nop	
  1477                           
  1478                           ;standbyMode.c: 820: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1479  00F55E  0E0C               	movlw	12
  1480  00F560  ECB1  F070         	call	_lcdInst
  1481                           
  1482                           ;standbyMode.c: 821: printf("Welcome to your");
  1483  00F564  0E90               	movlw	low STR_32
  1484  00F566  6E0D               	movwf	printf@f,c
  1485  00F568  0EFE               	movlw	high STR_32
  1486  00F56A  6E0E               	movwf	printf@f+1,c
  1487  00F56C  EC6B  F072         	call	_printf	;wreg free
  1488                           
  1489                           ;standbyMode.c: 822: lcdInst(0xC0);;
  1490  00F570  0EC0               	movlw	192
  1491  00F572  ECB1  F070         	call	_lcdInst
  1492                           
  1493                           ;standbyMode.c: 823: printf("cabinet sorter!");
  1494  00F576  0ED0               	movlw	low STR_33
  1495  00F578  6E0D               	movwf	printf@f,c
  1496  00F57A  0EFD               	movlw	high STR_33
  1497  00F57C  6E0E               	movwf	printf@f+1,c
  1498  00F57E  EC6B  F072         	call	_printf	;wreg free
  1499                           
  1500                           ;standbyMode.c: 824: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1501  00F582  0E66               	movlw	102
  1502  00F584  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1503  00F586  0E76               	movlw	118
  1504  00F588  6E2E               	movwf	??_standbyMode& (0+255),c
  1505  00F58A  0EC1               	movlw	193
  1506  00F58C                     u5337:
  1507  00F58C  2EE8               	decfsz	wreg,f,c
  1508  00F58E  D7FE               	bra	u5337
  1509  00F590  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1510  00F592  D7FC               	bra	u5337
  1511  00F594  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1512  00F596  D7FA               	bra	u5337
  1513  00F598  F000               	nop	
  1514                           
  1515                           ;standbyMode.c: 827: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1516  00F59A  0E01               	movlw	1
  1517  00F59C  ECB1  F070         	call	_lcdInst
  1518  00F5A0  0EC3               	movlw	195
  1519  00F5A2  6E2E               	movwf	??_standbyMode& (0+255),c
  1520  00F5A4  0ECD               	movlw	205
  1521  00F5A6                     u5347:
  1522  00F5A6  2EE8               	decfsz	wreg,f,c
  1523  00F5A8  D7FE               	bra	u5347
  1524  00F5AA  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1525  00F5AC  D7FC               	bra	u5347
  1526  00F5AE  F000               	nop	
  1527                           
  1528                           ;standbyMode.c: 828: printf("Press D to");
  1529  00F5B0  0EB5               	movlw	low STR_34
  1530  00F5B2  6E0D               	movwf	printf@f,c
  1531  00F5B4  0EFF               	movlw	high STR_34
  1532  00F5B6  6E0E               	movwf	printf@f+1,c
  1533  00F5B8  EC6B  F072         	call	_printf	;wreg free
  1534                           
  1535                           ;standbyMode.c: 829: lcdInst(0xC0);;
  1536  00F5BC  0EC0               	movlw	192
  1537  00F5BE  ECB1  F070         	call	_lcdInst
  1538                           
  1539                           ;standbyMode.c: 830: printf("view logs,");
  1540  00F5C2  0E7E               	movlw	low STR_35
  1541  00F5C4  6E0D               	movwf	printf@f,c
  1542  00F5C6  0EFF               	movlw	high STR_35
  1543  00F5C8  6E0E               	movwf	printf@f+1,c
  1544  00F5CA  EC6B  F072         	call	_printf	;wreg free
  1545                           
  1546                           ;standbyMode.c: 831: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1547  00F5CE  0E66               	movlw	102
  1548  00F5D0  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1549  00F5D2  0E76               	movlw	118
  1550  00F5D4  6E2E               	movwf	??_standbyMode& (0+255),c
  1551  00F5D6  0EC1               	movlw	193
  1552  00F5D8                     u5357:
  1553  00F5D8  2EE8               	decfsz	wreg,f,c
  1554  00F5DA  D7FE               	bra	u5357
  1555  00F5DC  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1556  00F5DE  D7FC               	bra	u5357
  1557  00F5E0  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1558  00F5E2  D7FA               	bra	u5357
  1559  00F5E4  F000               	nop	
  1560                           
  1561                           ;standbyMode.c: 832: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1562  00F5E6  0E01               	movlw	1
  1563  00F5E8  ECB1  F070         	call	_lcdInst
  1564  00F5EC  0EC3               	movlw	195
  1565  00F5EE  6E2E               	movwf	??_standbyMode& (0+255),c
  1566  00F5F0  0ECD               	movlw	205
  1567  00F5F2                     u5367:
  1568  00F5F2  2EE8               	decfsz	wreg,f,c
  1569  00F5F4  D7FE               	bra	u5367
  1570  00F5F6  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1571  00F5F8  D7FC               	bra	u5367
  1572  00F5FA  F000               	nop	
  1573                           
  1574                           ;standbyMode.c: 833: printf("or press # to");
  1575  00F5FC  0E16               	movlw	low STR_36
  1576  00F5FE  6E0D               	movwf	printf@f,c
  1577  00F600  0EFF               	movlw	high STR_36
  1578  00F602  6E0E               	movwf	printf@f+1,c
  1579  00F604  EC6B  F072         	call	_printf	;wreg free
  1580                           
  1581                           ;standbyMode.c: 834: lcdInst(0xC0);;
  1582  00F608  0EC0               	movlw	192
  1583  00F60A  ECB1  F070         	call	_lcdInst
  1584                           
  1585                           ;standbyMode.c: 835: printf("begin operation.");
  1586  00F60E  0E7B               	movlw	low STR_31
  1587  00F610  6E0D               	movwf	printf@f,c
  1588  00F612  0EFD               	movlw	high STR_31
  1589  00F614  6E0E               	movwf	printf@f+1,c
  1590  00F616  EC6B  F072         	call	_printf	;wreg free
  1591  00F61A  A281               	btfss	3969,1,c	;volatile
  1592  00F61C  D7FE               	goto	l415
  1593                           
  1594                           ;standbyMode.c: 838: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1595  00F61E  3881               	swapf	3969,w,c	;volatile
  1596  00F620  0B0F               	andlw	15
  1597  00F622  0B0F               	andlw	15
  1598  00F624  6E38               	movwf	standbyMode@keypress,c
  1599  00F626  B281               	btfsc	3969,1,c	;volatile
  1600  00F628  D7FE               	goto	l418
  1601                           
  1602                           ;standbyMode.c: 841: if (keypress == 14){
  1603  00F62A  0E0E               	movlw	14
  1604  00F62C  1838               	xorwf	standbyMode@keypress,w,c
  1605  00F62E  A4D8               	btfss	status,2,c
  1606  00F630  D2E9               	goto	l420
  1607                           
  1608                           ;standbyMode.c: 843: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1609  00F632  0E01               	movlw	1
  1610  00F634  ECB1  F070         	call	_lcdInst
  1611  00F638  0EC3               	movlw	195
  1612  00F63A  6E2E               	movwf	??_standbyMode& (0+255),c
  1613  00F63C  0ECD               	movlw	205
  1614  00F63E                     u5377:
  1615  00F63E  2EE8               	decfsz	wreg,f,c
  1616  00F640  D7FE               	bra	u5377
  1617  00F642  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1618  00F644  D7FC               	bra	u5377
  1619  00F646  F000               	nop	
  1620                           
  1621                           ;standbyMode.c: 844: printf("Great!");
  1622  00F648  0EEC               	movlw	low STR_5
  1623  00F64A  6E0D               	movwf	printf@f,c
  1624  00F64C  0EFF               	movlw	high STR_5
  1625  00F64E  6E0E               	movwf	printf@f+1,c
  1626  00F650  EC6B  F072         	call	_printf	;wreg free
  1627                           
  1628                           ;standbyMode.c: 845: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1629  00F654  0E33               	movlw	51
  1630  00F656  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1631  00F658  0EBB               	movlw	187
  1632  00F65A  6E2E               	movwf	??_standbyMode& (0+255),c
  1633  00F65C  0EE0               	movlw	224
  1634  00F65E                     u5387:
  1635  00F65E  2EE8               	decfsz	wreg,f,c
  1636  00F660  D7FE               	bra	u5387
  1637  00F662  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1638  00F664  D7FC               	bra	u5387
  1639  00F666  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1640  00F668  D7FA               	bra	u5387
  1641                           
  1642                           ;standbyMode.c: 847: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1643  00F66A  0E01               	movlw	1
  1644  00F66C  ECB1  F070         	call	_lcdInst
  1645  00F670  0EC3               	movlw	195
  1646  00F672  6E2E               	movwf	??_standbyMode& (0+255),c
  1647  00F674  0ECD               	movlw	205
  1648  00F676                     u5397:
  1649  00F676  2EE8               	decfsz	wreg,f,c
  1650  00F678  D7FE               	bra	u5397
  1651  00F67A  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1652  00F67C  D7FC               	bra	u5397
  1653  00F67E  F000               	nop	
  1654                           
  1655                           ;standbyMode.c: 848: printf("Here are the");
  1656  00F680  0E65               	movlw	low STR_39
  1657  00F682  6E0D               	movwf	printf@f,c
  1658  00F684  0EFF               	movlw	high STR_39
  1659  00F686  6E0E               	movwf	printf@f+1,c
  1660  00F688  EC6B  F072         	call	_printf	;wreg free
  1661                           
  1662                           ;standbyMode.c: 849: lcdInst(0xC0);;
  1663  00F68C  0EC0               	movlw	192
  1664  00F68E  ECB1  F070         	call	_lcdInst
  1665                           
  1666                           ;standbyMode.c: 850: printf("instructions for");
  1667  00F692  0EAE               	movlw	low STR_40
  1668  00F694  6E0D               	movwf	printf@f,c
  1669  00F696  0EFD               	movlw	high STR_40
  1670  00F698  6E0E               	movwf	printf@f+1,c
  1671  00F69A  EC6B  F072         	call	_printf	;wreg free
  1672                           
  1673                           ;standbyMode.c: 851: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1674  00F69E  0E66               	movlw	102
  1675  00F6A0  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1676  00F6A2  0E76               	movlw	118
  1677  00F6A4  6E2E               	movwf	??_standbyMode& (0+255),c
  1678  00F6A6  0EC1               	movlw	193
  1679  00F6A8                     u5407:
  1680  00F6A8  2EE8               	decfsz	wreg,f,c
  1681  00F6AA  D7FE               	bra	u5407
  1682  00F6AC  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1683  00F6AE  D7FC               	bra	u5407
  1684  00F6B0  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1685  00F6B2  D7FA               	bra	u5407
  1686  00F6B4  F000               	nop	
  1687                           
  1688                           ;standbyMode.c: 852: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1689  00F6B6  0E01               	movlw	1
  1690  00F6B8  ECB1  F070         	call	_lcdInst
  1691  00F6BC  0EC3               	movlw	195
  1692  00F6BE  6E2E               	movwf	??_standbyMode& (0+255),c
  1693  00F6C0  0ECD               	movlw	205
  1694  00F6C2                     u5417:
  1695  00F6C2  2EE8               	decfsz	wreg,f,c
  1696  00F6C4  D7FE               	bra	u5417
  1697  00F6C6  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1698  00F6C8  D7FC               	bra	u5417
  1699  00F6CA  F000               	nop	
  1700                           
  1701                           ;standbyMode.c: 853: printf("drawer inputs...");
  1702  00F6CC  0E6A               	movlw	low STR_41
  1703  00F6CE  6E0D               	movwf	printf@f,c
  1704  00F6D0  0EFD               	movlw	high STR_41
  1705  00F6D2  6E0E               	movwf	printf@f+1,c
  1706  00F6D4  EC6B  F072         	call	_printf	;wreg free
  1707                           
  1708                           ;standbyMode.c: 854: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1709  00F6D8  0E66               	movlw	102
  1710  00F6DA  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1711  00F6DC  0E76               	movlw	118
  1712  00F6DE  6E2E               	movwf	??_standbyMode& (0+255),c
  1713  00F6E0  0EC1               	movlw	193
  1714  00F6E2                     u5427:
  1715  00F6E2  2EE8               	decfsz	wreg,f,c
  1716  00F6E4  D7FE               	bra	u5427
  1717  00F6E6  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1718  00F6E8  D7FC               	bra	u5427
  1719  00F6EA  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1720  00F6EC  D7FA               	bra	u5427
  1721  00F6EE  F000               	nop	
  1722                           
  1723                           ;standbyMode.c: 856: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1724  00F6F0  0E01               	movlw	1
  1725  00F6F2  ECB1  F070         	call	_lcdInst
  1726  00F6F6  0EC3               	movlw	195
  1727  00F6F8  6E2E               	movwf	??_standbyMode& (0+255),c
  1728  00F6FA  0ECD               	movlw	205
  1729  00F6FC                     u5437:
  1730  00F6FC  2EE8               	decfsz	wreg,f,c
  1731  00F6FE  D7FE               	bra	u5437
  1732  00F700  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1733  00F702  D7FC               	bra	u5437
  1734  00F704  F000               	nop	
  1735                           
  1736                           ;standbyMode.c: 857: printf("Press A on the");
  1737  00F706  0ECE               	movlw	low STR_42
  1738  00F708  6E0D               	movwf	printf@f,c
  1739  00F70A  0EFE               	movlw	high STR_42
  1740  00F70C  6E0E               	movwf	printf@f+1,c
  1741  00F70E  EC6B  F072         	call	_printf	;wreg free
  1742                           
  1743                           ;standbyMode.c: 858: lcdInst(0xC0);;
  1744  00F712  0EC0               	movlw	192
  1745  00F714  ECB1  F070         	call	_lcdInst
  1746                           
  1747                           ;standbyMode.c: 859: printf("keypad for R,");
  1748  00F718  0E08               	movlw	low STR_43
  1749  00F71A  6E0D               	movwf	printf@f,c
  1750  00F71C  0EFF               	movlw	high STR_43
  1751  00F71E  6E0E               	movwf	printf@f+1,c
  1752  00F720  EC6B  F072         	call	_printf	;wreg free
  1753                           
  1754                           ;standbyMode.c: 860: _delay((unsigned long)((3000)*(40000000/4000.0)));
  1755  00F724  0E99               	movlw	153
  1756  00F726  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1757  00F728  0E31               	movlw	49
  1758  00F72A  6E2E               	movwf	??_standbyMode& (0+255),c
  1759  00F72C  0EA2               	movlw	162
  1760  00F72E                     u5447:
  1761  00F72E  2EE8               	decfsz	wreg,f,c
  1762  00F730  D7FE               	bra	u5447
  1763  00F732  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1764  00F734  D7FC               	bra	u5447
  1765  00F736  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1766  00F738  D7FA               	bra	u5447
  1767  00F73A  D000               	nop2	
  1768                           
  1769                           ;standbyMode.c: 861: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1770  00F73C  0E01               	movlw	1
  1771  00F73E  ECB1  F070         	call	_lcdInst
  1772  00F742  0EC3               	movlw	195
  1773  00F744  6E2E               	movwf	??_standbyMode& (0+255),c
  1774  00F746  0ECD               	movlw	205
  1775  00F748                     u5457:
  1776  00F748  2EE8               	decfsz	wreg,f,c
  1777  00F74A  D7FE               	bra	u5457
  1778  00F74C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1779  00F74E  D7FC               	bra	u5457
  1780  00F750  F000               	nop	
  1781                           
  1782                           ;standbyMode.c: 862: printf("B is for F,");
  1783  00F752  0E72               	movlw	low STR_44
  1784  00F754  6E0D               	movwf	printf@f,c
  1785  00F756  0EFF               	movlw	high STR_44
  1786  00F758  6E0E               	movwf	printf@f+1,c
  1787  00F75A  EC6B  F072         	call	_printf	;wreg free
  1788                           
  1789                           ;standbyMode.c: 863: lcdInst(0xC0);;
  1790  00F75E  0EC0               	movlw	192
  1791  00F760  ECB1  F070         	call	_lcdInst
  1792                           
  1793                           ;standbyMode.c: 864: printf("and C is for L.");
  1794  00F764  0EE0               	movlw	low STR_45
  1795  00F766  6E0D               	movwf	printf@f,c
  1796  00F768  0EFD               	movlw	high STR_45
  1797  00F76A  6E0E               	movwf	printf@f+1,c
  1798  00F76C  EC6B  F072         	call	_printf	;wreg free
  1799                           
  1800                           ;standbyMode.c: 865: _delay((unsigned long)((3000)*(40000000/4000.0)));
  1801  00F770  0E99               	movlw	153
  1802  00F772  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1803  00F774  0E31               	movlw	49
  1804  00F776  6E2E               	movwf	??_standbyMode& (0+255),c
  1805  00F778  0EA2               	movlw	162
  1806  00F77A                     u5467:
  1807  00F77A  2EE8               	decfsz	wreg,f,c
  1808  00F77C  D7FE               	bra	u5467
  1809  00F77E  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1810  00F780  D7FC               	bra	u5467
  1811  00F782  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1812  00F784  D7FA               	bra	u5467
  1813  00F786  D000               	nop2	
  1814                           
  1815                           ;standbyMode.c: 867: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1816  00F788  0E01               	movlw	1
  1817  00F78A  ECB1  F070         	call	_lcdInst
  1818  00F78E  0EC3               	movlw	195
  1819  00F790  6E2E               	movwf	??_standbyMode& (0+255),c
  1820  00F792  0ECD               	movlw	205
  1821  00F794                     u5477:
  1822  00F794  2EE8               	decfsz	wreg,f,c
  1823  00F796  D7FE               	bra	u5477
  1824  00F798  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1825  00F79A  D7FC               	bra	u5477
  1826  00F79C  F000               	nop	
  1827                           
  1828                           ;standbyMode.c: 868: printf("Press # to");
  1829  00F79E  0EAA               	movlw	low STR_46
  1830  00F7A0  6E0D               	movwf	printf@f,c
  1831  00F7A2  0EFF               	movlw	high STR_46
  1832  00F7A4  6E0E               	movwf	printf@f+1,c
  1833  00F7A6  EC6B  F072         	call	_printf	;wreg free
  1834                           
  1835                           ;standbyMode.c: 869: lcdInst(0xC0);;
  1836  00F7AA  0EC0               	movlw	192
  1837  00F7AC  ECB1  F070         	call	_lcdInst
  1838                           
  1839                           ;standbyMode.c: 870: printf("submit the input");
  1840  00F7B0  0EBF               	movlw	low STR_47
  1841  00F7B2  6E0D               	movwf	printf@f,c
  1842  00F7B4  0EFD               	movlw	high STR_47
  1843  00F7B6  6E0E               	movwf	printf@f+1,c
  1844  00F7B8  EC6B  F072         	call	_printf	;wreg free
  1845                           
  1846                           ;standbyMode.c: 871: _delay((unsigned long)((3000)*(40000000/4000.0)));
  1847  00F7BC  0E99               	movlw	153
  1848  00F7BE  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1849  00F7C0  0E31               	movlw	49
  1850  00F7C2  6E2E               	movwf	??_standbyMode& (0+255),c
  1851  00F7C4  0EA2               	movlw	162
  1852  00F7C6                     u5487:
  1853  00F7C6  2EE8               	decfsz	wreg,f,c
  1854  00F7C8  D7FE               	bra	u5487
  1855  00F7CA  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1856  00F7CC  D7FC               	bra	u5487
  1857  00F7CE  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1858  00F7D0  D7FA               	bra	u5487
  1859  00F7D2  D000               	nop2	
  1860                           
  1861                           ;standbyMode.c: 872: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1862  00F7D4  0E01               	movlw	1
  1863  00F7D6  ECB1  F070         	call	_lcdInst
  1864  00F7DA  0EC3               	movlw	195
  1865  00F7DC  6E2E               	movwf	??_standbyMode& (0+255),c
  1866  00F7DE  0ECD               	movlw	205
  1867  00F7E0                     u5497:
  1868  00F7E0  2EE8               	decfsz	wreg,f,c
  1869  00F7E2  D7FE               	bra	u5497
  1870  00F7E4  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1871  00F7E6  D7FC               	bra	u5497
  1872  00F7E8  F000               	nop	
  1873                           
  1874                           ;standbyMode.c: 873: printf("and advance the");
  1875  00F7EA  0E70               	movlw	low STR_48
  1876  00F7EC  6E0D               	movwf	printf@f,c
  1877  00F7EE  0EFE               	movlw	high STR_48
  1878  00F7F0  6E0E               	movwf	printf@f+1,c
  1879  00F7F2  EC6B  F072         	call	_printf	;wreg free
  1880                           
  1881                           ;standbyMode.c: 874: lcdInst(0xC0);;
  1882  00F7F6  0EC0               	movlw	192
  1883  00F7F8  ECB1  F070         	call	_lcdInst
  1884                           
  1885                           ;standbyMode.c: 875: printf("next screen.");
  1886  00F7FC  0E31               	movlw	low STR_49
  1887  00F7FE  6E0D               	movwf	printf@f,c
  1888  00F800  0EFF               	movlw	high STR_49
  1889  00F802  6E0E               	movwf	printf@f+1,c
  1890  00F804  EC6B  F072         	call	_printf	;wreg free
  1891                           
  1892                           ;standbyMode.c: 876: _delay((unsigned long)((3000)*(40000000/4000.0)));
  1893  00F808  0E99               	movlw	153
  1894  00F80A  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1895  00F80C  0E31               	movlw	49
  1896  00F80E  6E2E               	movwf	??_standbyMode& (0+255),c
  1897  00F810  0EA2               	movlw	162
  1898  00F812                     u5507:
  1899  00F812  2EE8               	decfsz	wreg,f,c
  1900  00F814  D7FE               	bra	u5507
  1901  00F816  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1902  00F818  D7FC               	bra	u5507
  1903  00F81A  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1904  00F81C  D7FA               	bra	u5507
  1905  00F81E  D000               	nop2	
  1906                           
  1907                           ;standbyMode.c: 878: unsigned int drawerCount = 0;
  1908  00F820  0E00               	movlw	0
  1909  00F822  6E3F               	movwf	standbyMode@drawerCount+1,c
  1910  00F824  0E00               	movlw	0
  1911  00F826  6E3E               	movwf	standbyMode@drawerCount,c
  1912                           
  1913                           ;standbyMode.c: 879: unsigned int i = 0;
  1914  00F828  0E00               	movlw	0
  1915  00F82A  6E45               	movwf	standbyMode@i+1,c
  1916  00F82C  0E00               	movlw	0
  1917  00F82E  6E44               	movwf	standbyMode@i,c
  1918                           
  1919                           ;standbyMode.c: 880: unsigned int validDrawer = 0;
  1920  00F830  0E00               	movlw	0
  1921  00F832  6E3D               	movwf	standbyMode@validDrawer+1,c
  1922  00F834  0E00               	movlw	0
  1923  00F836  6E3C               	movwf	standbyMode@validDrawer,c
  1924                           
  1925                           ;standbyMode.c: 881: unsigned int zero = 0;
  1926  00F838  0E00               	movlw	0
  1927  00F83A  6E3A               	movwf	standbyMode@zero+1,c
  1928  00F83C  0E00               	movlw	0
  1929  00F83E  6E39               	movwf	standbyMode@zero,c
  1930                           
  1931                           ;standbyMode.c: 882: unsigned int firstIteration = 0;
  1932  00F840  0E00               	movlw	0
  1933  00F842  6E35               	movwf	standbyMode@firstIteration+1,c
  1934  00F844  0E00               	movlw	0
  1935  00F846  6E34               	movwf	standbyMode@firstIteration,c
  1936  00F848                     
  1937                           ;standbyMode.c: 885: if(drawerCount >= 8){
  1938  00F848  503F               	movf	standbyMode@drawerCount+1,w,c
  1939  00F84A  E104               	bnz	u5080
  1940  00F84C  0E08               	movlw	8
  1941  00F84E  5C3E               	subwf	standbyMode@drawerCount,w,c
  1942  00F850  A0D8               	btfss	status,0,c
  1943  00F852  D02A               	goto	l422
  1944  00F854                     u5080:
  1945                           
  1946                           ;standbyMode.c: 886: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1947  00F854  0E01               	movlw	1
  1948  00F856  ECB1  F070         	call	_lcdInst
  1949  00F85A  0EC3               	movlw	195
  1950  00F85C  6E2E               	movwf	??_standbyMode& (0+255),c
  1951  00F85E  0ECD               	movlw	205
  1952  00F860                     u5517:
  1953  00F860  2EE8               	decfsz	wreg,f,c
  1954  00F862  D7FE               	bra	u5517
  1955  00F864  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1956  00F866  D7FC               	bra	u5517
  1957  00F868  F000               	nop	
  1958                           
  1959                           ;standbyMode.c: 887: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1960  00F86A  0E0C               	movlw	12
  1961  00F86C  ECB1  F070         	call	_lcdInst
  1962                           
  1963                           ;standbyMode.c: 888: printf("Maximum of 8");
  1964  00F870  0E4B               	movlw	low STR_50
  1965  00F872  6E0D               	movwf	printf@f,c
  1966  00F874  0EFF               	movlw	high STR_50
  1967  00F876  6E0E               	movwf	printf@f+1,c
  1968  00F878  EC6B  F072         	call	_printf	;wreg free
  1969                           
  1970                           ;standbyMode.c: 889: lcdInst(0xC0);;
  1971  00F87C  0EC0               	movlw	192
  1972  00F87E  ECB1  F070         	call	_lcdInst
  1973                           
  1974                           ;standbyMode.c: 890: printf("drawers reached!");
  1975  00F882  0E59               	movlw	low STR_51
  1976  00F884  6E0D               	movwf	printf@f,c
  1977  00F886  0EFD               	movlw	high STR_51
  1978  00F888  6E0E               	movwf	printf@f+1,c
  1979  00F88A  EC6B  F072         	call	_printf	;wreg free
  1980                           
  1981                           ;standbyMode.c: 891: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1982  00F88E  0E66               	movlw	102
  1983  00F890  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  1984  00F892  0E76               	movlw	118
  1985  00F894  6E2E               	movwf	??_standbyMode& (0+255),c
  1986  00F896  0EC1               	movlw	193
  1987  00F898                     u5527:
  1988  00F898  2EE8               	decfsz	wreg,f,c
  1989  00F89A  D7FE               	bra	u5527
  1990  00F89C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  1991  00F89E  D7FC               	bra	u5527
  1992  00F8A0  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  1993  00F8A2  D7FA               	bra	u5527
  1994  00F8A4  F000               	nop	
  1995                           
  1996                           ;standbyMode.c: 892: break;
  1997  00F8A6  0012               	return	
  1998  00F8A8                     l422:
  1999                           
  2000                           ;standbyMode.c: 894: else{
  2001                           ;standbyMode.c: 896: if (firstIteration == 1){
  2002  00F8A8  0434               	decf	standbyMode@firstIteration,w,c
  2003  00F8AA  1035               	iorwf	standbyMode@firstIteration+1,w,c
  2004  00F8AC  A4D8               	btfss	status,2,c
  2005  00F8AE  D0EB               	goto	l425
  2006  00F8B0                     u5090:
  2007                           
  2008                           ;standbyMode.c: 899: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2009                           
  2010                           ;standbyMode.c: 897: while (1){
  2011  00F8B0  0E01               	movlw	1
  2012  00F8B2  ECB1  F070         	call	_lcdInst
  2013  00F8B6  0EC3               	movlw	195
  2014  00F8B8  6E2E               	movwf	??_standbyMode& (0+255),c
  2015  00F8BA  0ECD               	movlw	205
  2016  00F8BC                     u5537:
  2017  00F8BC  2EE8               	decfsz	wreg,f,c
  2018  00F8BE  D7FE               	bra	u5537
  2019  00F8C0  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2020  00F8C2  D7FC               	bra	u5537
  2021  00F8C4  F000               	nop	
  2022                           
  2023                           ;standbyMode.c: 900: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2024  00F8C6  0E0C               	movlw	12
  2025  00F8C8  ECB1  F070         	call	_lcdInst
  2026                           
  2027                           ;standbyMode.c: 901: printf("Another drawer?");
  2028  00F8CC  0E60               	movlw	low STR_52
  2029  00F8CE  6E0D               	movwf	printf@f,c
  2030  00F8D0  0EFE               	movlw	high STR_52
  2031  00F8D2  6E0E               	movwf	printf@f+1,c
  2032  00F8D4  EC6B  F072         	call	_printf	;wreg free
  2033                           
  2034                           ;standbyMode.c: 902: lcdInst(0xC0);;
  2035  00F8D8  0EC0               	movlw	192
  2036  00F8DA  ECB1  F070         	call	_lcdInst
  2037                           
  2038                           ;standbyMode.c: 903: printf("# = Yes, D = No");
  2039  00F8DE  0E80               	movlw	low STR_18
  2040  00F8E0  6E0D               	movwf	printf@f,c
  2041  00F8E2  0EFE               	movlw	high STR_18
  2042  00F8E4  6E0E               	movwf	printf@f+1,c
  2043  00F8E6  EC6B  F072         	call	_printf	;wreg free
  2044  00F8EA  A281               	btfss	3969,1,c	;volatile
  2045  00F8EC  D7FE               	goto	l428
  2046                           
  2047                           ;standbyMode.c: 906: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  2048  00F8EE  3881               	swapf	3969,w,c	;volatile
  2049  00F8F0  0B0F               	andlw	15
  2050  00F8F2  0B0F               	andlw	15
  2051  00F8F4  6E3B               	movwf	standbyMode@keypress1,c
  2052  00F8F6  B281               	btfsc	3969,1,c	;volatile
  2053  00F8F8  D7FE               	goto	l431
  2054                           
  2055                           ;standbyMode.c: 909: if (keypress1 == 14){
  2056  00F8FA  0E0E               	movlw	14
  2057  00F8FC  183B               	xorwf	standbyMode@keypress1,w,c
  2058  00F8FE  A4D8               	btfss	status,2,c
  2059  00F900  D0BB               	goto	l433
  2060                           
  2061                           ;standbyMode.c: 910: unsigned int drawer = which_drawer();
  2062  00F902  ECD9  F073         	call	_which_drawer	;wreg free
  2063  00F906  C019  F040         	movff	?_which_drawer,standbyMode@drawer
  2064  00F90A  C01A  F041         	movff	?_which_drawer+1,standbyMode@drawer+1
  2065                           
  2066                           ;standbyMode.c: 911: for (i=0; i<8; i++){
  2067  00F90E  0E00               	movlw	0
  2068  00F910  6E45               	movwf	standbyMode@i+1,c
  2069  00F912  0E00               	movlw	0
  2070  00F914  6E44               	movwf	standbyMode@i,c
  2071  00F916                     l3692:
  2072  00F916  5045               	movf	standbyMode@i+1,w,c
  2073  00F918  E12C               	bnz	l3708
  2074  00F91A  0E08               	movlw	8
  2075  00F91C  5C44               	subwf	standbyMode@i,w,c
  2076  00F91E  B0D8               	btfsc	status,0,c
  2077  00F920  D028               	goto	u5160
  2078                           
  2079                           ;standbyMode.c: 912: if (drawerInformation[i] == drawer){
  2080  00F922  90D8               	bcf	status,0,c
  2081  00F924  3444               	rlcf	standbyMode@i,w,c
  2082  00F926  6ED9               	movwf	fsr2l,c
  2083  00F928  3445               	rlcf	standbyMode@i+1,w,c
  2084  00F92A  6EDA               	movwf	fsr2h,c
  2085  00F92C  0E46               	movlw	low _drawerInformation
  2086  00F92E  26D9               	addwf	fsr2l,f,c
  2087  00F930  0E00               	movlw	high _drawerInformation
  2088  00F932  22DA               	addwfc	fsr2h,f,c
  2089  00F934  5040               	movf	standbyMode@drawer,w,c
  2090  00F936  18DE               	xorwf	postinc2,w,c
  2091  00F938  E119               	bnz	l3704
  2092  00F93A  5041               	movf	standbyMode@drawer+1,w,c
  2093  00F93C  18DE               	xorwf	postinc2,w,c
  2094  00F93E  A4D8               	btfss	status,2,c
  2095  00F940  D015               	goto	l437
  2096                           
  2097                           ;standbyMode.c: 913: validDrawer = 1;
  2098  00F942  0E00               	movlw	0
  2099  00F944  6E3D               	movwf	standbyMode@validDrawer+1,c
  2100  00F946  0E01               	movlw	1
  2101  00F948  6E3C               	movwf	standbyMode@validDrawer,c
  2102                           
  2103                           ;standbyMode.c: 914: if (drawerInformation[i] == 0){
  2104  00F94A  90D8               	bcf	status,0,c
  2105  00F94C  3444               	rlcf	standbyMode@i,w,c
  2106  00F94E  6ED9               	movwf	fsr2l,c
  2107  00F950  3445               	rlcf	standbyMode@i+1,w,c
  2108  00F952  6EDA               	movwf	fsr2h,c
  2109  00F954  0E46               	movlw	low _drawerInformation
  2110  00F956  26D9               	addwf	fsr2l,f,c
  2111  00F958  0E00               	movlw	high _drawerInformation
  2112  00F95A  22DA               	addwfc	fsr2h,f,c
  2113  00F95C  50DE               	movf	postinc2,w,c
  2114  00F95E  10DE               	iorwf	postinc2,w,c
  2115  00F960  A4D8               	btfss	status,2,c
  2116  00F962  D004               	goto	l437
  2117                           
  2118                           ;standbyMode.c: 915: zero = 1;
  2119  00F964  0E00               	movlw	0
  2120  00F966  6E3A               	movwf	standbyMode@zero+1,c
  2121  00F968  0E01               	movlw	1
  2122  00F96A  6E39               	movwf	standbyMode@zero,c
  2123  00F96C                     l437:
  2124  00F96C                     l3704:
  2125  00F96C  4A44               	infsnz	standbyMode@i,f,c
  2126  00F96E  2A45               	incf	standbyMode@i+1,f,c
  2127  00F970  D7D2               	goto	l3692
  2128  00F972                     u5160:
  2129  00F972                     l3708:
  2130                           
  2131                           ;standbyMode.c: 916: }
  2132                           ;standbyMode.c: 917: }
  2133                           ;standbyMode.c: 918: }
  2134                           ;standbyMode.c: 919: if (validDrawer == 1){
  2135  00F972  043C               	decf	standbyMode@validDrawer,w,c
  2136  00F974  103D               	iorwf	standbyMode@validDrawer+1,w,c
  2137  00F976  A4D8               	btfss	status,2,c
  2138  00F978  D05B               	goto	l438
  2139                           
  2140                           ;standbyMode.c: 920: if (zero == 1){
  2141  00F97A  0439               	decf	standbyMode@zero,w,c
  2142  00F97C  103A               	iorwf	standbyMode@zero+1,w,c
  2143  00F97E  A4D8               	btfss	status,2,c
  2144  00F980  D029               	goto	l439
  2145                           
  2146                           ;standbyMode.c: 921: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2147  00F982  0E01               	movlw	1
  2148  00F984  ECB1  F070         	call	_lcdInst
  2149  00F988  0EC3               	movlw	195
  2150  00F98A  6E2E               	movwf	??_standbyMode& (0+255),c
  2151  00F98C  0ECD               	movlw	205
  2152  00F98E                     u5547:
  2153  00F98E  2EE8               	decfsz	wreg,f,c
  2154  00F990  D7FE               	bra	u5547
  2155  00F992  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2156  00F994  D7FC               	bra	u5547
  2157  00F996  F000               	nop	
  2158                           
  2159                           ;standbyMode.c: 922: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2160  00F998  0E0C               	movlw	12
  2161  00F99A  ECB1  F070         	call	_lcdInst
  2162                           
  2163                           ;standbyMode.c: 923: printf("No drawer");
  2164  00F99E  0EC0               	movlw	low STR_54
  2165  00F9A0  6E0D               	movwf	printf@f,c
  2166  00F9A2  0EFF               	movlw	high STR_54
  2167  00F9A4  6E0E               	movwf	printf@f+1,c
  2168  00F9A6  EC6B  F072         	call	_printf	;wreg free
  2169                           
  2170                           ;standbyMode.c: 924: lcdInst(0xC0);;
  2171  00F9AA  0EC0               	movlw	192
  2172  00F9AC  ECB1  F070         	call	_lcdInst
  2173                           
  2174                           ;standbyMode.c: 925: printf("number pressed.");
  2175  00F9B0  0EF0               	movlw	low STR_55
  2176  00F9B2  6E0D               	movwf	printf@f,c
  2177  00F9B4  0EFD               	movlw	high STR_55
  2178  00F9B6  6E0E               	movwf	printf@f+1,c
  2179  00F9B8  EC6B  F072         	call	_printf	;wreg free
  2180                           
  2181                           ;standbyMode.c: 926: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2182  00F9BC  0E66               	movlw	102
  2183  00F9BE  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2184  00F9C0  0E76               	movlw	118
  2185  00F9C2  6E2E               	movwf	??_standbyMode& (0+255),c
  2186  00F9C4  0EC1               	movlw	193
  2187  00F9C6                     u5557:
  2188  00F9C6  2EE8               	decfsz	wreg,f,c
  2189  00F9C8  D7FE               	bra	u5557
  2190  00F9CA  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2191  00F9CC  D7FC               	bra	u5557
  2192  00F9CE  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2193  00F9D0  D7FA               	bra	u5557
  2194  00F9D2  D028               	goto	L1
  2195  00F9D4                     l439:
  2196                           
  2197                           ;standbyMode.c: 928: else{
  2198                           ;standbyMode.c: 929: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2199  00F9D4  0E01               	movlw	1
  2200  00F9D6  ECB1  F070         	call	_lcdInst
  2201  00F9DA  0EC3               	movlw	195
  2202  00F9DC  6E2E               	movwf	??_standbyMode& (0+255),c
  2203  00F9DE  0ECD               	movlw	205
  2204  00F9E0                     u5567:
  2205  00F9E0  2EE8               	decfsz	wreg,f,c
  2206  00F9E2  D7FE               	bra	u5567
  2207  00F9E4  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2208  00F9E6  D7FC               	bra	u5567
  2209  00F9E8  F000               	nop	
  2210                           
  2211                           ;standbyMode.c: 930: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2212  00F9EA  0E0C               	movlw	12
  2213  00F9EC  ECB1  F070         	call	_lcdInst
  2214                           
  2215                           ;standbyMode.c: 931: printf("Drawer already");
  2216  00F9F0  0EDD               	movlw	low STR_56
  2217  00F9F2  6E0D               	movwf	printf@f,c
  2218  00F9F4  0EFE               	movlw	high STR_56
  2219  00F9F6  6E0E               	movwf	printf@f+1,c
  2220  00F9F8  EC6B  F072         	call	_printf	;wreg free
  2221                           
  2222                           ;standbyMode.c: 932: lcdInst(0xC0);;
  2223  00F9FC  0EC0               	movlw	192
  2224  00F9FE  ECB1  F070         	call	_lcdInst
  2225                           
  2226                           ;standbyMode.c: 933: printf("in use!");
  2227  00FA02  0EDC               	movlw	low STR_57
  2228  00FA04  6E0D               	movwf	printf@f,c
  2229  00FA06  0EFF               	movlw	high STR_57
  2230  00FA08  6E0E               	movwf	printf@f+1,c
  2231  00FA0A  EC6B  F072         	call	_printf	;wreg free
  2232                           
  2233                           ;standbyMode.c: 934: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2234  00FA0E  0E66               	movlw	102
  2235  00FA10  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2236  00FA12  0E76               	movlw	118
  2237  00FA14  6E2E               	movwf	??_standbyMode& (0+255),c
  2238  00FA16  0EC1               	movlw	193
  2239  00FA18                     u5577:
  2240  00FA18  2EE8               	decfsz	wreg,f,c
  2241  00FA1A  D7FE               	bra	u5577
  2242  00FA1C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2243  00FA1E  D7FC               	bra	u5577
  2244  00FA20  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2245  00FA22  D7FA               	bra	u5577
  2246  00FA24                     L1:
  2247  00FA24  F000               	nop	
  2248                           
  2249                           ;standbyMode.c: 935: }
  2250                           ;standbyMode.c: 936: validDrawer = 0;
  2251  00FA26  0E00               	movlw	0
  2252  00FA28  6E3D               	movwf	standbyMode@validDrawer+1,c
  2253  00FA2A  0E00               	movlw	0
  2254  00FA2C  6E3C               	movwf	standbyMode@validDrawer,c
  2255                           
  2256                           ;standbyMode.c: 937: continue;
  2257  00FA2E  D740               	goto	u5090
  2258  00FA30                     l438:
  2259                           
  2260                           ;standbyMode.c: 939: else{
  2261                           ;standbyMode.c: 940: unsigned int diet = diet_press(drawer);
  2262  00FA30  C040  F019         	movff	standbyMode@drawer,diet_press@drawer
  2263  00FA34  C041  F01A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  2264  00FA38  ECEA  F077         	call	_diet_press	;wreg free
  2265  00FA3C  C019  F030         	movff	?_diet_press,standbyMode@diet
  2266  00FA40  C01A  F031         	movff	?_diet_press+1,standbyMode@diet+1
  2267                           
  2268                           ;standbyMode.c: 941: food_press(diet, drawer);
  2269  00FA44  C030  F019         	movff	standbyMode@diet,food_press@dietSum
  2270  00FA48  C031  F01A         	movff	standbyMode@diet+1,food_press@dietSum+1
  2271  00FA4C  C040  F01B         	movff	standbyMode@drawer,food_press@drawer
  2272  00FA50  C041  F01C         	movff	standbyMode@drawer+1,food_press@drawer+1
  2273  00FA54  ECFA  F072         	call	_food_press	;wreg free
  2274                           
  2275                           ;standbyMode.c: 942: drawerInformation[drawerCount] = drawer;
  2276  00FA58  90D8               	bcf	status,0,c
  2277  00FA5A  343E               	rlcf	standbyMode@drawerCount,w,c
  2278  00FA5C  6ED9               	movwf	fsr2l,c
  2279  00FA5E  343F               	rlcf	standbyMode@drawerCount+1,w,c
  2280  00FA60  6EDA               	movwf	fsr2h,c
  2281  00FA62  0E46               	movlw	low _drawerInformation
  2282  00FA64  26D9               	addwf	fsr2l,f,c
  2283  00FA66  0E00               	movlw	high _drawerInformation
  2284  00FA68  22DA               	addwfc	fsr2h,f,c
  2285  00FA6A  C040  FFDE         	movff	standbyMode@drawer,postinc2
  2286  00FA6E  C041  FFDD         	movff	standbyMode@drawer+1,postdec2
  2287                           
  2288                           ;standbyMode.c: 943: drawerCount += 1;
  2289  00FA72  4A3E               	infsnz	standbyMode@drawerCount,f,c
  2290  00FA74  2A3F               	incf	standbyMode@drawerCount+1,f,c
  2291                           
  2292                           ;standbyMode.c: 944: }
  2293                           ;standbyMode.c: 945: }
  2294  00FA76  D004               	goto	l444
  2295  00FA78                     l433:
  2296                           
  2297                           ;standbyMode.c: 946: else if (keypress1 == 15){
  2298  00FA78  0E0F               	movlw	15
  2299  00FA7A  183B               	xorwf	standbyMode@keypress1,w,c
  2300  00FA7C  B4D8               	btfsc	status,2,c
  2301  00FA7E  0012               	return	
  2302  00FA80                     l444:
  2303                           
  2304                           ;standbyMode.c: 948: }
  2305                           ;standbyMode.c: 949: keypress1 = 0;
  2306  00FA80  0E00               	movlw	0
  2307  00FA82  6E3B               	movwf	standbyMode@keypress1,c
  2308  00FA84  D715               	goto	u5090
  2309  00FA86                     l425:
  2310                           
  2311                           ;standbyMode.c: 953: else{
  2312                           ;standbyMode.c: 954: unsigned int drawer = which_drawer();
  2313  00FA86  ECD9  F073         	call	_which_drawer	;wreg free
  2314  00FA8A  C019  F042         	movff	?_which_drawer,standbyMode@drawer_402
  2315  00FA8E  C01A  F043         	movff	?_which_drawer+1,standbyMode@drawer_402+1
  2316                           
  2317                           ;standbyMode.c: 955: firstIteration = 1;
  2318  00FA92  0E00               	movlw	0
  2319  00FA94  6E35               	movwf	standbyMode@firstIteration+1,c
  2320  00FA96  0E01               	movlw	1
  2321  00FA98  6E34               	movwf	standbyMode@firstIteration,c
  2322                           
  2323                           ;standbyMode.c: 956: for (i=0; i<8; i++){
  2324  00FA9A  0E00               	movlw	0
  2325  00FA9C  6E45               	movwf	standbyMode@i+1,c
  2326  00FA9E  0E00               	movlw	0
  2327  00FAA0  6E44               	movwf	standbyMode@i,c
  2328  00FAA2                     l3764:
  2329  00FAA2  5045               	movf	standbyMode@i+1,w,c
  2330  00FAA4  E12C               	bnz	l3780
  2331  00FAA6  0E08               	movlw	8
  2332  00FAA8  5C44               	subwf	standbyMode@i,w,c
  2333  00FAAA  B0D8               	btfsc	status,0,c
  2334  00FAAC  D028               	goto	u5230
  2335                           
  2336                           ;standbyMode.c: 957: if (drawerInformation[i] == drawer){
  2337  00FAAE  90D8               	bcf	status,0,c
  2338  00FAB0  3444               	rlcf	standbyMode@i,w,c
  2339  00FAB2  6ED9               	movwf	fsr2l,c
  2340  00FAB4  3445               	rlcf	standbyMode@i+1,w,c
  2341  00FAB6  6EDA               	movwf	fsr2h,c
  2342  00FAB8  0E46               	movlw	low _drawerInformation
  2343  00FABA  26D9               	addwf	fsr2l,f,c
  2344  00FABC  0E00               	movlw	high _drawerInformation
  2345  00FABE  22DA               	addwfc	fsr2h,f,c
  2346  00FAC0  5042               	movf	standbyMode@drawer_402,w,c
  2347  00FAC2  18DE               	xorwf	postinc2,w,c
  2348  00FAC4  E119               	bnz	l3776
  2349  00FAC6  5043               	movf	standbyMode@drawer_402+1,w,c
  2350  00FAC8  18DE               	xorwf	postinc2,w,c
  2351  00FACA  A4D8               	btfss	status,2,c
  2352  00FACC  D015               	goto	l450
  2353                           
  2354                           ;standbyMode.c: 958: validDrawer = 1;
  2355  00FACE  0E00               	movlw	0
  2356  00FAD0  6E3D               	movwf	standbyMode@validDrawer+1,c
  2357  00FAD2  0E01               	movlw	1
  2358  00FAD4  6E3C               	movwf	standbyMode@validDrawer,c
  2359                           
  2360                           ;standbyMode.c: 959: if (drawerInformation[i] == 0){
  2361  00FAD6  90D8               	bcf	status,0,c
  2362  00FAD8  3444               	rlcf	standbyMode@i,w,c
  2363  00FADA  6ED9               	movwf	fsr2l,c
  2364  00FADC  3445               	rlcf	standbyMode@i+1,w,c
  2365  00FADE  6EDA               	movwf	fsr2h,c
  2366  00FAE0  0E46               	movlw	low _drawerInformation
  2367  00FAE2  26D9               	addwf	fsr2l,f,c
  2368  00FAE4  0E00               	movlw	high _drawerInformation
  2369  00FAE6  22DA               	addwfc	fsr2h,f,c
  2370  00FAE8  50DE               	movf	postinc2,w,c
  2371  00FAEA  10DE               	iorwf	postinc2,w,c
  2372  00FAEC  A4D8               	btfss	status,2,c
  2373  00FAEE  D004               	goto	l450
  2374                           
  2375                           ;standbyMode.c: 960: zero = 1;
  2376  00FAF0  0E00               	movlw	0
  2377  00FAF2  6E3A               	movwf	standbyMode@zero+1,c
  2378  00FAF4  0E01               	movlw	1
  2379  00FAF6  6E39               	movwf	standbyMode@zero,c
  2380  00FAF8                     l450:
  2381  00FAF8                     l3776:
  2382  00FAF8  4A44               	infsnz	standbyMode@i,f,c
  2383  00FAFA  2A45               	incf	standbyMode@i+1,f,c
  2384  00FAFC  D7D2               	goto	l3764
  2385  00FAFE                     u5230:
  2386  00FAFE                     l3780:
  2387                           
  2388                           ;standbyMode.c: 961: }
  2389                           ;standbyMode.c: 962: }
  2390                           ;standbyMode.c: 963: }
  2391                           ;standbyMode.c: 964: if (validDrawer == 1){
  2392  00FAFE  043C               	decf	standbyMode@validDrawer,w,c
  2393  00FB00  103D               	iorwf	standbyMode@validDrawer+1,w,c
  2394  00FB02  A4D8               	btfss	status,2,c
  2395  00FB04  D05B               	goto	l451
  2396                           
  2397                           ;standbyMode.c: 965: if (zero == 1){
  2398  00FB06  0439               	decf	standbyMode@zero,w,c
  2399  00FB08  103A               	iorwf	standbyMode@zero+1,w,c
  2400  00FB0A  A4D8               	btfss	status,2,c
  2401  00FB0C  D029               	goto	l452
  2402                           
  2403                           ;standbyMode.c: 966: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2404  00FB0E  0E01               	movlw	1
  2405  00FB10  ECB1  F070         	call	_lcdInst
  2406  00FB14  0EC3               	movlw	195
  2407  00FB16  6E2E               	movwf	??_standbyMode& (0+255),c
  2408  00FB18  0ECD               	movlw	205
  2409  00FB1A                     u5587:
  2410  00FB1A  2EE8               	decfsz	wreg,f,c
  2411  00FB1C  D7FE               	bra	u5587
  2412  00FB1E  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2413  00FB20  D7FC               	bra	u5587
  2414  00FB22  F000               	nop	
  2415                           
  2416                           ;standbyMode.c: 967: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2417  00FB24  0E0C               	movlw	12
  2418  00FB26  ECB1  F070         	call	_lcdInst
  2419                           
  2420                           ;standbyMode.c: 968: printf("No drawer");
  2421  00FB2A  0EC0               	movlw	low STR_54
  2422  00FB2C  6E0D               	movwf	printf@f,c
  2423  00FB2E  0EFF               	movlw	high STR_54
  2424  00FB30  6E0E               	movwf	printf@f+1,c
  2425  00FB32  EC6B  F072         	call	_printf	;wreg free
  2426                           
  2427                           ;standbyMode.c: 969: lcdInst(0xC0);;
  2428  00FB36  0EC0               	movlw	192
  2429  00FB38  ECB1  F070         	call	_lcdInst
  2430                           
  2431                           ;standbyMode.c: 970: printf("number pressed.");
  2432  00FB3C  0EF0               	movlw	low STR_55
  2433  00FB3E  6E0D               	movwf	printf@f,c
  2434  00FB40  0EFD               	movlw	high STR_55
  2435  00FB42  6E0E               	movwf	printf@f+1,c
  2436  00FB44  EC6B  F072         	call	_printf	;wreg free
  2437                           
  2438                           ;standbyMode.c: 971: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2439  00FB48  0E66               	movlw	102
  2440  00FB4A  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2441  00FB4C  0E76               	movlw	118
  2442  00FB4E  6E2E               	movwf	??_standbyMode& (0+255),c
  2443  00FB50  0EC1               	movlw	193
  2444  00FB52                     u5597:
  2445  00FB52  2EE8               	decfsz	wreg,f,c
  2446  00FB54  D7FE               	bra	u5597
  2447  00FB56  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2448  00FB58  D7FC               	bra	u5597
  2449  00FB5A  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2450  00FB5C  D7FA               	bra	u5597
  2451  00FB5E  D028               	goto	L2
  2452  00FB60                     l452:
  2453                           
  2454                           ;standbyMode.c: 973: else{
  2455                           ;standbyMode.c: 974: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2456  00FB60  0E01               	movlw	1
  2457  00FB62  ECB1  F070         	call	_lcdInst
  2458  00FB66  0EC3               	movlw	195
  2459  00FB68  6E2E               	movwf	??_standbyMode& (0+255),c
  2460  00FB6A  0ECD               	movlw	205
  2461  00FB6C                     u5607:
  2462  00FB6C  2EE8               	decfsz	wreg,f,c
  2463  00FB6E  D7FE               	bra	u5607
  2464  00FB70  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2465  00FB72  D7FC               	bra	u5607
  2466  00FB74  F000               	nop	
  2467                           
  2468                           ;standbyMode.c: 975: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2469  00FB76  0E0C               	movlw	12
  2470  00FB78  ECB1  F070         	call	_lcdInst
  2471                           
  2472                           ;standbyMode.c: 976: printf("Drawer already");
  2473  00FB7C  0EDD               	movlw	low STR_56
  2474  00FB7E  6E0D               	movwf	printf@f,c
  2475  00FB80  0EFE               	movlw	high STR_56
  2476  00FB82  6E0E               	movwf	printf@f+1,c
  2477  00FB84  EC6B  F072         	call	_printf	;wreg free
  2478                           
  2479                           ;standbyMode.c: 977: lcdInst(0xC0);;
  2480  00FB88  0EC0               	movlw	192
  2481  00FB8A  ECB1  F070         	call	_lcdInst
  2482                           
  2483                           ;standbyMode.c: 978: printf("in use!");
  2484  00FB8E  0EDC               	movlw	low STR_57
  2485  00FB90  6E0D               	movwf	printf@f,c
  2486  00FB92  0EFF               	movlw	high STR_57
  2487  00FB94  6E0E               	movwf	printf@f+1,c
  2488  00FB96  EC6B  F072         	call	_printf	;wreg free
  2489                           
  2490                           ;standbyMode.c: 979: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2491  00FB9A  0E66               	movlw	102
  2492  00FB9C  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2493  00FB9E  0E76               	movlw	118
  2494  00FBA0  6E2E               	movwf	??_standbyMode& (0+255),c
  2495  00FBA2  0EC1               	movlw	193
  2496  00FBA4                     u5617:
  2497  00FBA4  2EE8               	decfsz	wreg,f,c
  2498  00FBA6  D7FE               	bra	u5617
  2499  00FBA8  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2500  00FBAA  D7FC               	bra	u5617
  2501  00FBAC  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2502  00FBAE  D7FA               	bra	u5617
  2503  00FBB0                     L2:
  2504  00FBB0  F000               	nop	
  2505                           
  2506                           ;standbyMode.c: 980: }
  2507                           ;standbyMode.c: 981: validDrawer = 0;
  2508  00FBB2  0E00               	movlw	0
  2509  00FBB4  6E3D               	movwf	standbyMode@validDrawer+1,c
  2510  00FBB6  0E00               	movlw	0
  2511  00FBB8  6E3C               	movwf	standbyMode@validDrawer,c
  2512                           
  2513                           ;standbyMode.c: 983: }
  2514                           
  2515                           ;standbyMode.c: 982: continue;
  2516  00FBBA  D646               	goto	l421
  2517  00FBBC                     l451:
  2518                           
  2519                           ;standbyMode.c: 984: else{
  2520                           ;standbyMode.c: 985: unsigned int diet = diet_press(drawer);
  2521  00FBBC  C042  F019         	movff	standbyMode@drawer_402,diet_press@drawer
  2522  00FBC0  C043  F01A         	movff	standbyMode@drawer_402+1,diet_press@drawer+1
  2523  00FBC4  ECEA  F077         	call	_diet_press	;wreg free
  2524  00FBC8  C019  F032         	movff	?_diet_press,standbyMode@diet_407
  2525  00FBCC  C01A  F033         	movff	?_diet_press+1,standbyMode@diet_407+1
  2526                           
  2527                           ;standbyMode.c: 986: food_press(diet, drawer);
  2528  00FBD0  C032  F019         	movff	standbyMode@diet_407,food_press@dietSum
  2529  00FBD4  C033  F01A         	movff	standbyMode@diet_407+1,food_press@dietSum+1
  2530  00FBD8  C042  F01B         	movff	standbyMode@drawer_402,food_press@drawer
  2531  00FBDC  C043  F01C         	movff	standbyMode@drawer_402+1,food_press@drawer+1
  2532  00FBE0  ECFA  F072         	call	_food_press	;wreg free
  2533                           
  2534                           ;standbyMode.c: 987: drawerInformation[drawerCount] = drawer;
  2535  00FBE4  90D8               	bcf	status,0,c
  2536  00FBE6  343E               	rlcf	standbyMode@drawerCount,w,c
  2537  00FBE8  6ED9               	movwf	fsr2l,c
  2538  00FBEA  343F               	rlcf	standbyMode@drawerCount+1,w,c
  2539  00FBEC  6EDA               	movwf	fsr2h,c
  2540  00FBEE  0E46               	movlw	low _drawerInformation
  2541  00FBF0  26D9               	addwf	fsr2l,f,c
  2542  00FBF2  0E00               	movlw	high _drawerInformation
  2543  00FBF4  22DA               	addwfc	fsr2h,f,c
  2544  00FBF6  C042  FFDE         	movff	standbyMode@drawer_402,postinc2
  2545  00FBFA  C043  FFDD         	movff	standbyMode@drawer_402+1,postdec2
  2546                           
  2547                           ;standbyMode.c: 988: drawerCount += 1;
  2548  00FBFE  4A3E               	infsnz	standbyMode@drawerCount,f,c
  2549  00FC00  2A3F               	incf	standbyMode@drawerCount+1,f,c
  2550  00FC02  D622               	goto	l421
  2551  00FC04                     l420:
  2552                           
  2553                           ;standbyMode.c: 995: else if (keypress == 15){
  2554  00FC04  0E0F               	movlw	15
  2555  00FC06  1838               	xorwf	standbyMode@keypress,w,c
  2556  00FC08  A4D8               	btfss	status,2,c
  2557  00FC0A  D05A               	goto	l457
  2558  00FC0C                     u5260:
  2559                           
  2560                           ;standbyMode.c: 997: unsigned int whichKey = viewLogs();
  2561                           
  2562                           ;standbyMode.c: 996: while (1){
  2563  00FC0C  EC52  F076         	call	_viewLogs	;wreg free
  2564  00FC10  C019  F036         	movff	?_viewLogs,standbyMode@whichKey
  2565  00FC14  C01A  F037         	movff	?_viewLogs+1,standbyMode@whichKey+1
  2566                           
  2567                           ;standbyMode.c: 998: if (whichKey == 14){
  2568  00FC18  0E0E               	movlw	14
  2569  00FC1A  1836               	xorwf	standbyMode@whichKey,w,c
  2570  00FC1C  1037               	iorwf	standbyMode@whichKey+1,w,c
  2571  00FC1E  B4D8               	btfsc	status,2,c
  2572  00FC20  D7F5               	goto	u5260
  2573                           
  2574                           ;standbyMode.c: 1001: else if (whichKey == 15){
  2575                           
  2576                           ;standbyMode.c: 1000: }
  2577                           
  2578                           ;standbyMode.c: 999: continue;
  2579  00FC22  0E0F               	movlw	15
  2580  00FC24  1836               	xorwf	standbyMode@whichKey,w,c
  2581  00FC26  1037               	iorwf	standbyMode@whichKey+1,w,c
  2582  00FC28  A4D8               	btfss	status,2,c
  2583  00FC2A  D020               	goto	l462
  2584                           
  2585                           ;standbyMode.c: 1002: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2586  00FC2C  0E01               	movlw	1
  2587  00FC2E  ECB1  F070         	call	_lcdInst
  2588  00FC32  0EC3               	movlw	195
  2589  00FC34  6E2E               	movwf	??_standbyMode& (0+255),c
  2590  00FC36  0ECD               	movlw	205
  2591  00FC38                     u5627:
  2592  00FC38  2EE8               	decfsz	wreg,f,c
  2593  00FC3A  D7FE               	bra	u5627
  2594  00FC3C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2595  00FC3E  D7FC               	bra	u5627
  2596  00FC40  F000               	nop	
  2597                           
  2598                           ;standbyMode.c: 1003: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2599  00FC42  0E0C               	movlw	12
  2600  00FC44  ECB1  F070         	call	_lcdInst
  2601                           
  2602                           ;standbyMode.c: 1004: printf("Rebooting.");
  2603  00FC48  0E94               	movlw	low STR_62
  2604  00FC4A  6E0D               	movwf	printf@f,c
  2605  00FC4C  0EFF               	movlw	high STR_62
  2606  00FC4E  6E0E               	movwf	printf@f+1,c
  2607  00FC50  EC6B  F072         	call	_printf	;wreg free
  2608                           
  2609                           ;standbyMode.c: 1005: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2610  00FC54  0E66               	movlw	102
  2611  00FC56  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2612  00FC58  0E76               	movlw	118
  2613  00FC5A  6E2E               	movwf	??_standbyMode& (0+255),c
  2614  00FC5C  0EC1               	movlw	193
  2615  00FC5E                     u5637:
  2616  00FC5E  2EE8               	decfsz	wreg,f,c
  2617  00FC60  D7FE               	bra	u5637
  2618  00FC62  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2619  00FC64  D7FC               	bra	u5637
  2620  00FC66  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2621  00FC68  D7FA               	bra	u5637
  2622  00FC6A  D028               	goto	L3
  2623  00FC6C                     l462:
  2624                           
  2625                           ;standbyMode.c: 1008: else{
  2626                           ;standbyMode.c: 1009: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2627  00FC6C  0E01               	movlw	1
  2628  00FC6E  ECB1  F070         	call	_lcdInst
  2629  00FC72  0EC3               	movlw	195
  2630  00FC74  6E2E               	movwf	??_standbyMode& (0+255),c
  2631  00FC76  0ECD               	movlw	205
  2632  00FC78                     u5647:
  2633  00FC78  2EE8               	decfsz	wreg,f,c
  2634  00FC7A  D7FE               	bra	u5647
  2635  00FC7C  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2636  00FC7E  D7FC               	bra	u5647
  2637  00FC80  F000               	nop	
  2638                           
  2639                           ;standbyMode.c: 1010: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2640  00FC82  0E0C               	movlw	12
  2641  00FC84  ECB1  F070         	call	_lcdInst
  2642                           
  2643                           ;standbyMode.c: 1011: printf("Invalid key!");
  2644  00FC88  0E24               	movlw	low STR_63
  2645  00FC8A  6E0D               	movwf	printf@f,c
  2646  00FC8C  0EFF               	movlw	high STR_63
  2647  00FC8E  6E0E               	movwf	printf@f+1,c
  2648  00FC90  EC6B  F072         	call	_printf	;wreg free
  2649                           
  2650                           ;standbyMode.c: 1012: lcdInst(0xC0);;
  2651  00FC94  0EC0               	movlw	192
  2652  00FC96  ECB1  F070         	call	_lcdInst
  2653                           
  2654                           ;standbyMode.c: 1013: printf("Rebooting.");
  2655  00FC9A  0E94               	movlw	low STR_62
  2656  00FC9C  6E0D               	movwf	printf@f,c
  2657  00FC9E  0EFF               	movlw	high STR_62
  2658  00FCA0  6E0E               	movwf	printf@f+1,c
  2659  00FCA2  EC6B  F072         	call	_printf	;wreg free
  2660                           
  2661                           ;standbyMode.c: 1014: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2662  00FCA6  0E66               	movlw	102
  2663  00FCA8  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2664  00FCAA  0E76               	movlw	118
  2665  00FCAC  6E2E               	movwf	??_standbyMode& (0+255),c
  2666  00FCAE  0EC1               	movlw	193
  2667  00FCB0                     u5657:
  2668  00FCB0  2EE8               	decfsz	wreg,f,c
  2669  00FCB2  D7FE               	bra	u5657
  2670  00FCB4  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2671  00FCB6  D7FC               	bra	u5657
  2672  00FCB8  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2673  00FCBA  D7FA               	bra	u5657
  2674  00FCBC                     L3:
  2675  00FCBC  F000               	nop	
  2676                           
  2677                           ;standbyMode.c: 1015: break;
  2678  00FCBE  0012               	return	
  2679  00FCC0                     l457:
  2680                           
  2681                           ;standbyMode.c: 1021: else {
  2682                           ;standbyMode.c: 1022: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2683  00FCC0  0E01               	movlw	1
  2684  00FCC2  ECB1  F070         	call	_lcdInst
  2685  00FCC6  0EC3               	movlw	195
  2686  00FCC8  6E2E               	movwf	??_standbyMode& (0+255),c
  2687  00FCCA  0ECD               	movlw	205
  2688  00FCCC                     u5667:
  2689  00FCCC  2EE8               	decfsz	wreg,f,c
  2690  00FCCE  D7FE               	bra	u5667
  2691  00FCD0  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2692  00FCD2  D7FC               	bra	u5667
  2693  00FCD4  F000               	nop	
  2694                           
  2695                           ;standbyMode.c: 1023: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2696  00FCD6  0E0C               	movlw	12
  2697  00FCD8  ECB1  F070         	call	_lcdInst
  2698                           
  2699                           ;standbyMode.c: 1024: printf("Invalid key!");
  2700  00FCDC  0E24               	movlw	low STR_63
  2701  00FCDE  6E0D               	movwf	printf@f,c
  2702  00FCE0  0EFF               	movlw	high STR_63
  2703  00FCE2  6E0E               	movwf	printf@f+1,c
  2704  00FCE4  EC6B  F072         	call	_printf	;wreg free
  2705                           
  2706                           ;standbyMode.c: 1025: lcdInst(0xC0);;
  2707  00FCE8  0EC0               	movlw	192
  2708  00FCEA  ECB1  F070         	call	_lcdInst
  2709                           
  2710                           ;standbyMode.c: 1026: printf("Rebooting.");
  2711  00FCEE  0E94               	movlw	low STR_62
  2712  00FCF0  6E0D               	movwf	printf@f,c
  2713  00FCF2  0EFF               	movlw	high STR_62
  2714  00FCF4  6E0E               	movwf	printf@f+1,c
  2715  00FCF6  EC6B  F072         	call	_printf	;wreg free
  2716                           
  2717                           ;standbyMode.c: 1027: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2718  00FCFA  0E66               	movlw	102
  2719  00FCFC  6E2F               	movwf	(??_standbyMode+1)& (0+255),c
  2720  00FCFE  0E76               	movlw	118
  2721  00FD00  6E2E               	movwf	??_standbyMode& (0+255),c
  2722  00FD02  0EC1               	movlw	193
  2723  00FD04                     u5677:
  2724  00FD04  2EE8               	decfsz	wreg,f,c
  2725  00FD06  D7FE               	bra	u5677
  2726  00FD08  2E2E               	decfsz	??_standbyMode& (0+255),f,c
  2727  00FD0A  D7FC               	bra	u5677
  2728  00FD0C  2E2F               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2729  00FD0E  D7FA               	bra	u5677
  2730  00FD10  F000               	nop	
  2731  00FD12  0012               	return	
  2732  00FD14                     __end_of_standbyMode:
  2733                           	opt stack 0
  2734                           tblptru	equ	0xFF8
  2735                           postinc0	equ	0xFEE
  2736                           wreg	equ	0xFE8
  2737                           postinc2	equ	0xFDE
  2738                           postdec2	equ	0xFDD
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _which_drawer *****************
  2744 ;; Defined at:
  2745 ;;		line 749 in file "standbyMode.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  keypress        1   33[COMRAM] unsigned char 
  2750 ;;  count           2   31[COMRAM] unsigned int 
  2751 ;;  sum             2   29[COMRAM] unsigned int 
  2752 ;;  rand            2   27[COMRAM] unsigned int 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  2   24[COMRAM] unsigned int 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2763 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;Total ram usage:       10 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    3
  2769 ;; This function calls:
  2770 ;;		_decode_drawer
  2771 ;;		_lcdInst
  2772 ;;		_printf
  2773 ;;		_putch
  2774 ;; This function is called by:
  2775 ;;		_standbyMode
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           	psect	text2
  2780  00E7B2                     __ptext2:
  2781                           	opt stack 0
  2782  00E7B2                     _which_drawer:
  2783                           	opt stack 26
  2784                           
  2785                           ;standbyMode.c: 750: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2786                           
  2787                           ;incstack = 0
  2788  00E7B2  0E0C               	movlw	12
  2789  00E7B4  ECB1  F070         	call	_lcdInst
  2790                           
  2791                           ;standbyMode.c: 751: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2792  00E7B8  0E01               	movlw	1
  2793  00E7BA  ECB1  F070         	call	_lcdInst
  2794  00E7BE  0EC3               	movlw	195
  2795  00E7C0  6E1B               	movwf	??_which_drawer& (0+255),c
  2796  00E7C2  0ECD               	movlw	205
  2797  00E7C4                     u5687:
  2798  00E7C4  2EE8               	decfsz	wreg,f,c
  2799  00E7C6  D7FE               	bra	u5687
  2800  00E7C8  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  2801  00E7CA  D7FC               	bra	u5687
  2802  00E7CC  F000               	nop	
  2803                           
  2804                           ;standbyMode.c: 752: printf("Drawer number:");
  2805  00E7CE  0EBF               	movlw	low STR_27
  2806  00E7D0  6E0D               	movwf	printf@f,c
  2807  00E7D2  0EFE               	movlw	high STR_27
  2808  00E7D4  6E0E               	movwf	printf@f+1,c
  2809  00E7D6  EC6B  F072         	call	_printf	;wreg free
  2810                           
  2811                           ;standbyMode.c: 753: lcdInst(0xC0);;
  2812  00E7DA  0EC0               	movlw	192
  2813  00E7DC  ECB1  F070         	call	_lcdInst
  2814  00E7E0                     
  2815                           ;standbyMode.c: 755: unsigned int count = 0;
  2816  00E7E0  0E00               	movlw	0
  2817  00E7E2  6E21               	movwf	which_drawer@count+1,c
  2818  00E7E4  0E00               	movlw	0
  2819  00E7E6  6E20               	movwf	which_drawer@count,c
  2820                           
  2821                           ;standbyMode.c: 756: unsigned int sum = 0;
  2822  00E7E8  0E00               	movlw	0
  2823  00E7EA  6E1F               	movwf	which_drawer@sum+1,c
  2824  00E7EC  0E00               	movlw	0
  2825  00E7EE  6E1E               	movwf	which_drawer@sum,c
  2826  00E7F0                     
  2827                           ;standbyMode.c: 759: while(PORTBbits.RB1 == 0){ continue; }
  2828  00E7F0  A281               	btfss	3969,1,c	;volatile
  2829  00E7F2  D7FE               	goto	l379
  2830                           
  2831                           ;standbyMode.c: 760: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2832  00E7F4  3881               	swapf	3969,w,c	;volatile
  2833  00E7F6  0B0F               	andlw	15
  2834  00E7F8  0B0F               	andlw	15
  2835  00E7FA  6E22               	movwf	which_drawer@keypress,c
  2836  00E7FC  B281               	btfsc	3969,1,c	;volatile
  2837  00E7FE  D7FE               	goto	l384
  2838                           
  2839                           ;standbyMode.c: 763: if(keypress == 14){
  2840  00E800  0E0E               	movlw	14
  2841  00E802  1822               	xorwf	which_drawer@keypress,w,c
  2842  00E804  B4D8               	btfsc	status,2,c
  2843  00E806  D0A9               	goto	l387
  2844                           
  2845                           ;standbyMode.c: 766: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypress
      +                           == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress ==
      +                           10 || keypress == 13){
  2846                           
  2847                           ;standbyMode.c: 765: }
  2848                           
  2849                           ;standbyMode.c: 764: break;
  2850  00E808  5022               	movf	which_drawer@keypress,w,c
  2851  00E80A  B4D8               	btfsc	status,2,c
  2852  00E80C  D023               	goto	u4880
  2853  00E80E  0422               	decf	which_drawer@keypress,w,c
  2854  00E810  B4D8               	btfsc	status,2,c
  2855  00E812  D020               	goto	u4880
  2856  00E814  0E02               	movlw	2
  2857  00E816  1822               	xorwf	which_drawer@keypress,w,c
  2858  00E818  B4D8               	btfsc	status,2,c
  2859  00E81A  D01C               	goto	u4880
  2860  00E81C  0E04               	movlw	4
  2861  00E81E  1822               	xorwf	which_drawer@keypress,w,c
  2862  00E820  B4D8               	btfsc	status,2,c
  2863  00E822  D018               	goto	u4880
  2864  00E824  0E05               	movlw	5
  2865  00E826  1822               	xorwf	which_drawer@keypress,w,c
  2866  00E828  B4D8               	btfsc	status,2,c
  2867  00E82A  D014               	goto	u4880
  2868  00E82C  0E06               	movlw	6
  2869  00E82E  1822               	xorwf	which_drawer@keypress,w,c
  2870  00E830  B4D8               	btfsc	status,2,c
  2871  00E832  D010               	goto	u4880
  2872  00E834  0E08               	movlw	8
  2873  00E836  1822               	xorwf	which_drawer@keypress,w,c
  2874  00E838  B4D8               	btfsc	status,2,c
  2875  00E83A  D00C               	goto	u4880
  2876  00E83C  0E09               	movlw	9
  2877  00E83E  1822               	xorwf	which_drawer@keypress,w,c
  2878  00E840  B4D8               	btfsc	status,2,c
  2879  00E842  D008               	goto	u4880
  2880  00E844  0E0A               	movlw	10
  2881  00E846  1822               	xorwf	which_drawer@keypress,w,c
  2882  00E848  B4D8               	btfsc	status,2,c
  2883  00E84A  D004               	goto	u4880
  2884  00E84C  0E0D               	movlw	13
  2885  00E84E  1822               	xorwf	which_drawer@keypress,w,c
  2886  00E850  A4D8               	btfss	status,2,c
  2887  00E852  D06A               	goto	l389
  2888  00E854                     u4880:
  2889                           
  2890                           ;standbyMode.c: 767: if (count == 0){
  2891  00E854  5020               	movf	which_drawer@count,w,c
  2892  00E856  1021               	iorwf	which_drawer@count+1,w,c
  2893  00E858  A4D8               	btfss	status,2,c
  2894  00E85A  D046               	goto	l392
  2895                           
  2896                           ;standbyMode.c: 768: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress == 
      +                          5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  2897  00E85C  0422               	decf	which_drawer@keypress,w,c
  2898  00E85E  B4D8               	btfsc	status,2,c
  2899  00E860  D01C               	goto	u4970
  2900  00E862  0E02               	movlw	2
  2901  00E864  1822               	xorwf	which_drawer@keypress,w,c
  2902  00E866  B4D8               	btfsc	status,2,c
  2903  00E868  D018               	goto	u4970
  2904  00E86A  0E04               	movlw	4
  2905  00E86C  1822               	xorwf	which_drawer@keypress,w,c
  2906  00E86E  B4D8               	btfsc	status,2,c
  2907  00E870  D014               	goto	u4970
  2908  00E872  0E05               	movlw	5
  2909  00E874  1822               	xorwf	which_drawer@keypress,w,c
  2910  00E876  B4D8               	btfsc	status,2,c
  2911  00E878  D010               	goto	u4970
  2912  00E87A  0E06               	movlw	6
  2913  00E87C  1822               	xorwf	which_drawer@keypress,w,c
  2914  00E87E  B4D8               	btfsc	status,2,c
  2915  00E880  D00C               	goto	u4970
  2916  00E882  0E08               	movlw	8
  2917  00E884  1822               	xorwf	which_drawer@keypress,w,c
  2918  00E886  B4D8               	btfsc	status,2,c
  2919  00E888  D008               	goto	u4970
  2920  00E88A  0E09               	movlw	9
  2921  00E88C  1822               	xorwf	which_drawer@keypress,w,c
  2922  00E88E  B4D8               	btfsc	status,2,c
  2923  00E890  D004               	goto	u4970
  2924  00E892  0E0A               	movlw	10
  2925  00E894  1822               	xorwf	which_drawer@keypress,w,c
  2926  00E896  A4D8               	btfss	status,2,c
  2927  00E898  D011               	goto	l393
  2928  00E89A                     u4970:
  2929                           
  2930                           ;standbyMode.c: 769: count += 2;
  2931  00E89A  0E02               	movlw	2
  2932  00E89C  2620               	addwf	which_drawer@count,f,c
  2933  00E89E  0E00               	movlw	0
  2934  00E8A0  2221               	addwfc	which_drawer@count+1,f,c
  2935                           
  2936                           ;standbyMode.c: 770: putch(input[keypress]);
  2937  00E8A2  5022               	movf	which_drawer@keypress,w,c
  2938  00E8A4  0D01               	mullw	1
  2939  00E8A6  0E26               	movlw	low _input
  2940  00E8A8  24F3               	addwf	prodl,w,c
  2941  00E8AA  6EF6               	movwf	tblptrl,c
  2942  00E8AC  0EFD               	movlw	high _input
  2943  00E8AE  20F4               	addwfc	prodh,w,c
  2944  00E8B0  6EF7               	movwf	tblptrh,c
  2945  00E8B2                     	if	0	;There are less than 3 active tblptr bytes
  2946  00E8B2                     	endif
  2947  00E8B2  0008               	tblrd		*
  2948  00E8B4  50F5               	movf	tablat,w,c
  2949  00E8B6  ECBB  F070         	call	_putch
  2950  00E8BA  D034               	goto	l403
  2951  00E8BC                     l393:
  2952                           
  2953                           ;standbyMode.c: 773: else if (keypress == 0){
  2954  00E8BC  5022               	movf	which_drawer@keypress,w,c
  2955  00E8BE  A4D8               	btfss	status,2,c
  2956  00E8C0  D797               	goto	l379
  2957                           
  2958                           ;standbyMode.c: 774: putch(input[keypress]);
  2959  00E8C2  5022               	movf	which_drawer@keypress,w,c
  2960  00E8C4  0D01               	mullw	1
  2961  00E8C6  0E26               	movlw	low _input
  2962  00E8C8  24F3               	addwf	prodl,w,c
  2963  00E8CA  6EF6               	movwf	tblptrl,c
  2964  00E8CC  0EFD               	movlw	high _input
  2965  00E8CE  20F4               	addwfc	prodh,w,c
  2966  00E8D0  6EF7               	movwf	tblptrh,c
  2967  00E8D2                     	if	0	;There are less than 3 active tblptr bytes
  2968  00E8D2                     	endif
  2969  00E8D2  0008               	tblrd		*
  2970  00E8D4  50F5               	movf	tablat,w,c
  2971  00E8D6  ECBB  F070         	call	_putch
  2972                           
  2973                           ;standbyMode.c: 775: count += 1;
  2974  00E8DA  4A20               	infsnz	which_drawer@count,f,c
  2975  00E8DC  2A21               	incf	which_drawer@count+1,f,c
  2976  00E8DE  D020               	goto	u5020
  2977  00E8E0                     L4:
  2978  00E8E0  261E               	addwf	which_drawer@sum,f,c
  2979  00E8E2  0E00               	movlw	0
  2980  00E8E4  221F               	addwfc	which_drawer@sum+1,f,c
  2981                           
  2982                           ;standbyMode.c: 777: }
  2983                           ;standbyMode.c: 778: }
  2984  00E8E6  D784               	goto	l379
  2985  00E8E8                     l392:
  2986                           
  2987                           ;standbyMode.c: 779: else if (count == 1){
  2988  00E8E8  0420               	decf	which_drawer@count,w,c
  2989  00E8EA  1021               	iorwf	which_drawer@count+1,w,c
  2990  00E8EC  A4D8               	btfss	status,2,c
  2991  00E8EE  D780               	goto	l379
  2992                           
  2993                           ;standbyMode.c: 780: if (keypress < 8 || keypress == 13){
  2994  00E8F0  0E07               	movlw	7
  2995  00E8F2  6422               	cpfsgt	which_drawer@keypress,c
  2996  00E8F4  D004               	goto	u5010
  2997  00E8F6  0E0D               	movlw	13
  2998  00E8F8  1822               	xorwf	which_drawer@keypress,w,c
  2999  00E8FA  A4D8               	btfss	status,2,c
  3000  00E8FC  D779               	goto	l379
  3001  00E8FE                     u5010:
  3002                           
  3003                           ;standbyMode.c: 781: putch(input[keypress]);
  3004  00E8FE  5022               	movf	which_drawer@keypress,w,c
  3005  00E900  0D01               	mullw	1
  3006  00E902  0E26               	movlw	low _input
  3007  00E904  24F3               	addwf	prodl,w,c
  3008  00E906  6EF6               	movwf	tblptrl,c
  3009  00E908  0EFD               	movlw	high _input
  3010  00E90A  20F4               	addwfc	prodh,w,c
  3011  00E90C  6EF7               	movwf	tblptrh,c
  3012  00E90E                     	if	0	;There are less than 3 active tblptr bytes
  3013  00E90E                     	endif
  3014  00E90E  0008               	tblrd		*
  3015  00E910  50F5               	movf	tablat,w,c
  3016  00E912  ECBB  F070         	call	_putch
  3017                           
  3018                           ;standbyMode.c: 782: count += 1;
  3019  00E916  4A20               	infsnz	which_drawer@count,f,c
  3020  00E918  2A21               	incf	which_drawer@count+1,f,c
  3021                           
  3022                           ;standbyMode.c: 783: if(keypress == 0){
  3023  00E91A  5022               	movf	which_drawer@keypress,w,c
  3024  00E91C  A4D8               	btfss	status,2,c
  3025  00E91E  D002               	goto	l403
  3026  00E920                     u5020:
  3027                           
  3028                           ;standbyMode.c: 784: sum += 20;
  3029  00E920  0E14               	movlw	20
  3030  00E922  D7DE               	goto	L4
  3031  00E924                     l403:
  3032                           
  3033                           ;standbyMode.c: 786: else {
  3034                           ;standbyMode.c: 787: sum += keypress;
  3035  00E924  5022               	movf	which_drawer@keypress,w,c
  3036  00E926  D7DC               	goto	L4
  3037  00E928                     l389:
  3038                           
  3039                           ;standbyMode.c: 792: else if (keypress == 12){
  3040  00E928  0E0C               	movlw	12
  3041  00E92A  1822               	xorwf	which_drawer@keypress,w,c
  3042  00E92C  A4D8               	btfss	status,2,c
  3043  00E92E  D760               	goto	l379
  3044                           
  3045                           ;standbyMode.c: 793: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3046  00E930  0E01               	movlw	1
  3047  00E932  ECB1  F070         	call	_lcdInst
  3048  00E936  0EC3               	movlw	195
  3049  00E938  6E1B               	movwf	??_which_drawer& (0+255),c
  3050  00E93A  0ECD               	movlw	205
  3051  00E93C                     u5697:
  3052  00E93C  2EE8               	decfsz	wreg,f,c
  3053  00E93E  D7FE               	bra	u5697
  3054  00E940  2E1B               	decfsz	??_which_drawer& (0+255),f,c
  3055  00E942  D7FC               	bra	u5697
  3056  00E944  F000               	nop	
  3057                           
  3058                           ;standbyMode.c: 794: printf("Drawer number:");
  3059  00E946  0EBF               	movlw	low STR_27
  3060  00E948  6E0D               	movwf	printf@f,c
  3061  00E94A  0EFE               	movlw	high STR_27
  3062  00E94C  6E0E               	movwf	printf@f+1,c
  3063  00E94E  EC6B  F072         	call	_printf	;wreg free
  3064                           
  3065                           ;standbyMode.c: 795: lcdInst(0xC0);;
  3066  00E952  0EC0               	movlw	192
  3067  00E954  ECB1  F070         	call	_lcdInst
  3068  00E958  D743               	goto	L44
  3069  00E95A                     l387:
  3070                           
  3071                           ;standbyMode.c: 798: }
  3072                           ;standbyMode.c: 799: }
  3073                           ;standbyMode.c: 800: unsigned int rand = decode_drawer(sum);
  3074  00E95A  C01E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  3075  00E95E  C01F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  3076  00E962  ECFA  F071         	call	_decode_drawer	;wreg free
  3077  00E966  C001  F01C         	movff	?_decode_drawer,which_drawer@rand
  3078  00E96A  C002  F01D         	movff	?_decode_drawer+1,which_drawer@rand+1
  3079                           
  3080                           ;standbyMode.c: 801: return rand;
  3081  00E96E  C01C  F019         	movff	which_drawer@rand,?_which_drawer
  3082  00E972  C01D  F01A         	movff	which_drawer@rand+1,?_which_drawer+1
  3083  00E976  0012               	return	
  3084  00E978                     __end_of_which_drawer:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _decode_drawer *****************
  3101 ;; Defined at:
  3102 ;;		line 671 in file "standbyMode.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  drawer          2    0[COMRAM] unsigned int 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  returnValue     2    4[COMRAM] unsigned int 
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  2    0[COMRAM] unsigned int 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:        6 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; This function calls:
  3123 ;;		Nothing
  3124 ;; This function is called by:
  3125 ;;		_which_drawer
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           	psect	text3
  3130  00E3F4                     __ptext3:
  3131                           	opt stack 0
  3132  00E3F4                     _decode_drawer:
  3133                           	opt stack 28
  3134                           
  3135                           ;standbyMode.c: 672: unsigned int returnValue;
  3136                           ;standbyMode.c: 674: switch(drawer){
  3137                           
  3138                           ;incstack = 0
  3139  00E3F4  D03A               	goto	l360
  3140  00E3F6                     
  3141                           ;standbyMode.c: 677: returnValue = 1;
  3142  00E3F6  0E00               	movlw	0
  3143  00E3F8  6E06               	movwf	decode_drawer@returnValue+1,c
  3144  00E3FA  0E01               	movlw	1
  3145  00E3FC  D02F               	goto	L16
  3146  00E3FE                     
  3147                           ;standbyMode.c: 682: returnValue = 2;
  3148  00E3FE  0E00               	movlw	0
  3149  00E400  6E06               	movwf	decode_drawer@returnValue+1,c
  3150  00E402  0E02               	movlw	2
  3151  00E404  D02B               	goto	L16
  3152  00E406                     
  3153                           ;standbyMode.c: 687: returnValue = 3;
  3154  00E406  0E00               	movlw	0
  3155  00E408  6E06               	movwf	decode_drawer@returnValue+1,c
  3156  00E40A  0E03               	movlw	3
  3157  00E40C  D027               	goto	L16
  3158  00E40E                     
  3159                           ;standbyMode.c: 692: returnValue = 7;
  3160  00E40E  0E00               	movlw	0
  3161  00E410  6E06               	movwf	decode_drawer@returnValue+1,c
  3162  00E412  0E07               	movlw	7
  3163  00E414  D023               	goto	L16
  3164  00E416                     
  3165                           ;standbyMode.c: 697: returnValue = 8;
  3166  00E416  0E00               	movlw	0
  3167  00E418  6E06               	movwf	decode_drawer@returnValue+1,c
  3168  00E41A  0E08               	movlw	8
  3169  00E41C  D01F               	goto	L16
  3170  00E41E                     
  3171                           ;standbyMode.c: 702: returnValue = 9;
  3172  00E41E  0E00               	movlw	0
  3173  00E420  6E06               	movwf	decode_drawer@returnValue+1,c
  3174  00E422  0E09               	movlw	9
  3175  00E424  D01B               	goto	L16
  3176  00E426                     
  3177                           ;standbyMode.c: 707: returnValue = 10;
  3178  00E426  0E00               	movlw	0
  3179  00E428  6E06               	movwf	decode_drawer@returnValue+1,c
  3180  00E42A  0E0A               	movlw	10
  3181  00E42C  D017               	goto	L16
  3182  00E42E                     
  3183                           ;standbyMode.c: 712: returnValue = 11;
  3184  00E42E  0E00               	movlw	0
  3185  00E430  6E06               	movwf	decode_drawer@returnValue+1,c
  3186  00E432  0E0B               	movlw	11
  3187  00E434  D013               	goto	L16
  3188  00E436                     
  3189                           ;standbyMode.c: 717: returnValue = 12;
  3190  00E436  0E00               	movlw	0
  3191  00E438  6E06               	movwf	decode_drawer@returnValue+1,c
  3192  00E43A  0E0C               	movlw	12
  3193  00E43C  D00F               	goto	L16
  3194  00E43E                     
  3195                           ;standbyMode.c: 722: returnValue = 13;
  3196  00E43E  0E00               	movlw	0
  3197  00E440  6E06               	movwf	decode_drawer@returnValue+1,c
  3198  00E442  0E0D               	movlw	13
  3199  00E444  D00B               	goto	L16
  3200  00E446                     
  3201                           ;standbyMode.c: 727: returnValue = 14;
  3202  00E446  0E00               	movlw	0
  3203  00E448  6E06               	movwf	decode_drawer@returnValue+1,c
  3204  00E44A  0E0E               	movlw	14
  3205  00E44C  D007               	goto	L16
  3206  00E44E                     
  3207                           ;standbyMode.c: 732: returnValue = 15;
  3208  00E44E  0E00               	movlw	0
  3209  00E450  6E06               	movwf	decode_drawer@returnValue+1,c
  3210  00E452  0E0F               	movlw	15
  3211  00E454  D003               	goto	L16
  3212  00E456                     
  3213                           ;standbyMode.c: 737: returnValue = 16;
  3214  00E456  0E00               	movlw	0
  3215  00E458  6E06               	movwf	decode_drawer@returnValue+1,c
  3216  00E45A  0E10               	movlw	16
  3217  00E45C                     L16:
  3218  00E45C  6E05               	movwf	decode_drawer@returnValue,c
  3219                           
  3220                           ;standbyMode.c: 738: break;
  3221  00E45E  D036               	goto	l362
  3222  00E460                     l375:
  3223                           
  3224                           ;standbyMode.c: 741: returnValue = drawer;
  3225  00E460  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  3226  00E464  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  3227                           
  3228                           ;standbyMode.c: 743: }
  3229                           
  3230                           ;standbyMode.c: 742: break;
  3231  00E468  D031               	goto	l362
  3232  00E46A                     l360:
  3233  00E46A  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  3234  00E46E  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  3235                           
  3236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3237                           ; Switch size 1, requested type "space"
  3238                           ; Number of cases is 1, Range of values is 0 to 0
  3239                           ; switch strategies available:
  3240                           ; Name         Instructions Cycles
  3241                           ; simple_byte            4     3 (average)
  3242                           ;	Chosen strategy is simple_byte
  3243  00E472  5004               	movf	??_decode_drawer+1,w,c
  3244  00E474  0A00               	xorlw	0	; case 0
  3245  00E476  A4D8               	btfss	status,2,c
  3246  00E478  D7F3               	goto	l375
  3247                           
  3248                           ; Switch size 1, requested type "space"
  3249                           ; Number of cases is 13, Range of values is 1 to 40
  3250                           ; switch strategies available:
  3251                           ; Name         Instructions Cycles
  3252                           ; simple_byte           40    21 (average)
  3253                           ;	Chosen strategy is simple_byte
  3254  00E47A  5003               	movf	??_decode_drawer,w,c
  3255  00E47C  0A01               	xorlw	1	; case 1
  3256  00E47E  B4D8               	btfsc	status,2,c
  3257  00E480  D7BE               	goto	l363
  3258  00E482  0A03               	xorlw	3	; case 2
  3259  00E484  B4D8               	btfsc	status,2,c
  3260  00E486  D7BF               	goto	l364
  3261  00E488  0A0A               	xorlw	10	; case 8
  3262  00E48A  B4D8               	btfsc	status,2,c
  3263  00E48C  D7C0               	goto	l365
  3264  00E48E  0A01               	xorlw	1	; case 9
  3265  00E490  B4D8               	btfsc	status,2,c
  3266  00E492  D7C1               	goto	l366
  3267  00E494  0A03               	xorlw	3	; case 10
  3268  00E496  B4D8               	btfsc	status,2,c
  3269  00E498  D7C2               	goto	l367
  3270  00E49A  0A1E               	xorlw	30	; case 20
  3271  00E49C  B4D8               	btfsc	status,2,c
  3272  00E49E  D7AB               	goto	l361
  3273  00E4A0  0A01               	xorlw	1	; case 21
  3274  00E4A2  B4D8               	btfsc	status,2,c
  3275  00E4A4  D7C8               	goto	l370
  3276  00E4A6  0A03               	xorlw	3	; case 22
  3277  00E4A8  B4D8               	btfsc	status,2,c
  3278  00E4AA  D7C9               	goto	l371
  3279  00E4AC  0A0E               	xorlw	14	; case 24
  3280  00E4AE  B4D8               	btfsc	status,2,c
  3281  00E4B0  D7CA               	goto	l372
  3282  00E4B2  0A01               	xorlw	1	; case 25
  3283  00E4B4  B4D8               	btfsc	status,2,c
  3284  00E4B6  D7CB               	goto	l373
  3285  00E4B8  0A03               	xorlw	3	; case 26
  3286  00E4BA  B4D8               	btfsc	status,2,c
  3287  00E4BC  D7CC               	goto	l374
  3288  00E4BE  0A3B               	xorlw	59	; case 33
  3289  00E4C0  B4D8               	btfsc	status,2,c
  3290  00E4C2  D7B1               	goto	l368
  3291  00E4C4  0A09               	xorlw	9	; case 40
  3292  00E4C6  B4D8               	btfsc	status,2,c
  3293  00E4C8  D7B2               	goto	l369
  3294  00E4CA  D7CA               	goto	l375
  3295  00E4CC                     l362:
  3296                           
  3297                           ;standbyMode.c: 744: return returnValue;
  3298  00E4CC  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  3299  00E4D0  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  3300  00E4D4  0012               	return		;funcret
  3301  00E4D6                     __end_of_decode_drawer:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           postinc2	equ	0xFDE
  3312                           postdec2	equ	0xFDD
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _viewLogs *****************
  3318 ;; Defined at:
  3319 ;;		line 271 in file "standbyMode.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  keypress2       1   29[COMRAM] unsigned char 
  3324 ;;  keypress3       1   28[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  2   24[COMRAM] unsigned int 
  3327 ;; Registers used:
  3328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;Total ram usage:        6 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    3
  3341 ;; This function calls:
  3342 ;;		_lcdInst
  3343 ;;		_printf
  3344 ;;		_putch
  3345 ;; This function is called by:
  3346 ;;		_standbyMode
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text4
  3351  00ECA4                     __ptext4:
  3352                           	opt stack 0
  3353  00ECA4                     _viewLogs:
  3354                           	opt stack 26
  3355                           
  3356                           ;standbyMode.c: 272: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3357                           
  3358                           ;incstack = 0
  3359  00ECA4  0E01               	movlw	1
  3360  00ECA6  ECB1  F070         	call	_lcdInst
  3361  00ECAA  0EC3               	movlw	195
  3362  00ECAC  6E1B               	movwf	??_viewLogs& (0+255),c
  3363  00ECAE  0ECD               	movlw	205
  3364  00ECB0                     u5707:
  3365  00ECB0  2EE8               	decfsz	wreg,f,c
  3366  00ECB2  D7FE               	bra	u5707
  3367  00ECB4  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3368  00ECB6  D7FC               	bra	u5707
  3369  00ECB8  F000               	nop	
  3370                           
  3371                           ;standbyMode.c: 273: printf("5 previous logs");
  3372  00ECBA  0EA0               	movlw	low STR_1
  3373  00ECBC  6E0D               	movwf	printf@f,c
  3374  00ECBE  0EFE               	movlw	high STR_1
  3375  00ECC0  6E0E               	movwf	printf@f+1,c
  3376  00ECC2  EC6B  F072         	call	_printf	;wreg free
  3377                           
  3378                           ;standbyMode.c: 274: lcdInst(0xC0);;
  3379  00ECC6  0EC0               	movlw	192
  3380  00ECC8  ECB1  F070         	call	_lcdInst
  3381                           
  3382                           ;standbyMode.c: 275: printf("available.");
  3383  00ECCC  0E89               	movlw	low STR_2
  3384  00ECCE  6E0D               	movwf	printf@f,c
  3385  00ECD0  0EFF               	movlw	high STR_2
  3386  00ECD2  6E0E               	movwf	printf@f+1,c
  3387  00ECD4  EC6B  F072         	call	_printf	;wreg free
  3388                           
  3389                           ;standbyMode.c: 276: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3390  00ECD8  0E66               	movlw	102
  3391  00ECDA  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3392  00ECDC  0E76               	movlw	118
  3393  00ECDE  6E1B               	movwf	??_viewLogs& (0+255),c
  3394  00ECE0  0EC1               	movlw	193
  3395  00ECE2                     u5717:
  3396  00ECE2  2EE8               	decfsz	wreg,f,c
  3397  00ECE4  D7FE               	bra	u5717
  3398  00ECE6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3399  00ECE8  D7FC               	bra	u5717
  3400  00ECEA  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3401  00ECEC  D7FA               	bra	u5717
  3402  00ECEE  F000               	nop	
  3403                           
  3404                           ;standbyMode.c: 277: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3405  00ECF0  0E01               	movlw	1
  3406  00ECF2  ECB1  F070         	call	_lcdInst
  3407  00ECF6  0EC3               	movlw	195
  3408  00ECF8  6E1B               	movwf	??_viewLogs& (0+255),c
  3409  00ECFA  0ECD               	movlw	205
  3410  00ECFC                     u5727:
  3411  00ECFC  2EE8               	decfsz	wreg,f,c
  3412  00ECFE  D7FE               	bra	u5727
  3413  00ED00  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3414  00ED02  D7FC               	bra	u5727
  3415  00ED04  F000               	nop	
  3416                           
  3417                           ;standbyMode.c: 278: printf("Please input log");
  3418  00ED06  0E8C               	movlw	low STR_3
  3419  00ED08  6E0D               	movwf	printf@f,c
  3420  00ED0A  0EFD               	movlw	high STR_3
  3421  00ED0C  6E0E               	movwf	printf@f+1,c
  3422  00ED0E  EC6B  F072         	call	_printf	;wreg free
  3423                           
  3424                           ;standbyMode.c: 279: lcdInst(0xC0);;
  3425  00ED12  0EC0               	movlw	192
  3426  00ED14  ECB1  F070         	call	_lcdInst
  3427                           
  3428                           ;standbyMode.c: 280: printf("number: ");
  3429  00ED18  0ECA               	movlw	low STR_4
  3430  00ED1A  6E0D               	movwf	printf@f,c
  3431  00ED1C  0EFF               	movlw	high STR_4
  3432  00ED1E  6E0E               	movwf	printf@f+1,c
  3433  00ED20  EC6B  F072         	call	_printf	;wreg free
  3434  00ED24                     
  3435                           ;standbyMode.c: 283: while(PORTBbits.RB1 == 0){ continue; }
  3436  00ED24  A281               	btfss	3969,1,c	;volatile
  3437  00ED26  D7FE               	goto	l215
  3438                           
  3439                           ;standbyMode.c: 284: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  3440  00ED28  3881               	swapf	3969,w,c	;volatile
  3441  00ED2A  0B0F               	andlw	15
  3442  00ED2C  0B0F               	andlw	15
  3443  00ED2E  6E1E               	movwf	viewLogs@keypress2,c
  3444  00ED30  B281               	btfsc	3969,1,c	;volatile
  3445  00ED32  D7FE               	goto	l220
  3446                           
  3447                           ;standbyMode.c: 287: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4 || keypress2 == 5){
  3448  00ED34  501E               	movf	viewLogs@keypress2,w,c
  3449  00ED36  B4D8               	btfsc	status,2,c
  3450  00ED38  D00F               	goto	u3770
  3451  00ED3A  041E               	decf	viewLogs@keypress2,w,c
  3452  00ED3C  B4D8               	btfsc	status,2,c
  3453  00ED3E  D00C               	goto	u3770
  3454  00ED40  0E02               	movlw	2
  3455  00ED42  181E               	xorwf	viewLogs@keypress2,w,c
  3456  00ED44  B4D8               	btfsc	status,2,c
  3457  00ED46  D008               	goto	u3770
  3458  00ED48  0E04               	movlw	4
  3459  00ED4A  181E               	xorwf	viewLogs@keypress2,w,c
  3460  00ED4C  B4D8               	btfsc	status,2,c
  3461  00ED4E  D004               	goto	u3770
  3462  00ED50  0E05               	movlw	5
  3463  00ED52  181E               	xorwf	viewLogs@keypress2,w,c
  3464  00ED54  A4D8               	btfss	status,2,c
  3465  00ED56  D7E6               	goto	l215
  3466  00ED58                     u3770:
  3467                           
  3468                           ;standbyMode.c: 288: putch(keys[keypress2]);
  3469  00ED58  501E               	movf	viewLogs@keypress2,w,c
  3470  00ED5A  0D01               	mullw	1
  3471  00ED5C  0E15               	movlw	low _keys
  3472  00ED5E  24F3               	addwf	prodl,w,c
  3473  00ED60  6EF6               	movwf	tblptrl,c
  3474  00ED62  0EFD               	movlw	high _keys
  3475  00ED64  20F4               	addwfc	prodh,w,c
  3476  00ED66  6EF7               	movwf	tblptrh,c
  3477  00ED68                     	if	0	;There are less than 3 active tblptr bytes
  3478  00ED68                     	endif
  3479  00ED68  0008               	tblrd		*
  3480  00ED6A  50F5               	movf	tablat,w,c
  3481  00ED6C  ECBB  F070         	call	_putch
  3482                           
  3483                           ;standbyMode.c: 289: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3484  00ED70  0E33               	movlw	51
  3485  00ED72  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3486  00ED74  0EBB               	movlw	187
  3487  00ED76  6E1B               	movwf	??_viewLogs& (0+255),c
  3488  00ED78  0EE0               	movlw	224
  3489  00ED7A                     u5737:
  3490  00ED7A  2EE8               	decfsz	wreg,f,c
  3491  00ED7C  D7FE               	bra	u5737
  3492  00ED7E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3493  00ED80  D7FC               	bra	u5737
  3494  00ED82  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3495  00ED84  D7FA               	bra	u5737
  3496                           
  3497                           ;standbyMode.c: 291: }
  3498                           ;standbyMode.c: 292: }
  3499                           ;standbyMode.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3500                           
  3501                           ;standbyMode.c: 290: break;
  3502  00ED86  0E01               	movlw	1
  3503  00ED88  ECB1  F070         	call	_lcdInst
  3504  00ED8C  0EC3               	movlw	195
  3505  00ED8E  6E1B               	movwf	??_viewLogs& (0+255),c
  3506  00ED90  0ECD               	movlw	205
  3507  00ED92                     u5747:
  3508  00ED92  2EE8               	decfsz	wreg,f,c
  3509  00ED94  D7FE               	bra	u5747
  3510  00ED96  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3511  00ED98  D7FC               	bra	u5747
  3512  00ED9A  F000               	nop	
  3513                           
  3514                           ;standbyMode.c: 295: printf("Great!");
  3515  00ED9C  0EEC               	movlw	low STR_5
  3516  00ED9E  6E0D               	movwf	printf@f,c
  3517  00EDA0  0EFF               	movlw	high STR_5
  3518  00EDA2  6E0E               	movwf	printf@f+1,c
  3519  00EDA4  EC6B  F072         	call	_printf	;wreg free
  3520                           
  3521                           ;standbyMode.c: 296: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3522  00EDA8  0E33               	movlw	51
  3523  00EDAA  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3524  00EDAC  0EBB               	movlw	187
  3525  00EDAE  6E1B               	movwf	??_viewLogs& (0+255),c
  3526  00EDB0  0EE0               	movlw	224
  3527  00EDB2                     u5757:
  3528  00EDB2  2EE8               	decfsz	wreg,f,c
  3529  00EDB4  D7FE               	bra	u5757
  3530  00EDB6  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3531  00EDB8  D7FC               	bra	u5757
  3532  00EDBA  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3533  00EDBC  D7FA               	bra	u5757
  3534                           
  3535                           ;standbyMode.c: 297: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3536  00EDBE  0E01               	movlw	1
  3537  00EDC0  ECB1  F070         	call	_lcdInst
  3538  00EDC4  0EC3               	movlw	195
  3539  00EDC6  6E1B               	movwf	??_viewLogs& (0+255),c
  3540  00EDC8  0ECD               	movlw	205
  3541  00EDCA                     u5767:
  3542  00EDCA  2EE8               	decfsz	wreg,f,c
  3543  00EDCC  D7FE               	bra	u5767
  3544  00EDCE  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3545  00EDD0  D7FC               	bra	u5767
  3546  00EDD2  F000               	nop	
  3547                           
  3548                           ;standbyMode.c: 298: printf("Press any key to");
  3549  00EDD4  0E9D               	movlw	low STR_6
  3550  00EDD6  6E0D               	movwf	printf@f,c
  3551  00EDD8  0EFD               	movlw	high STR_6
  3552  00EDDA  6E0E               	movwf	printf@f+1,c
  3553  00EDDC  EC6B  F072         	call	_printf	;wreg free
  3554                           
  3555                           ;standbyMode.c: 299: lcdInst(0xC0);;
  3556  00EDE0  0EC0               	movlw	192
  3557  00EDE2  ECB1  F070         	call	_lcdInst
  3558                           
  3559                           ;standbyMode.c: 300: printf("move on.");
  3560  00EDE6  0ED3               	movlw	low STR_7
  3561  00EDE8  6E0D               	movwf	printf@f,c
  3562  00EDEA  0EFF               	movlw	high STR_7
  3563  00EDEC  6E0E               	movwf	printf@f+1,c
  3564  00EDEE  EC6B  F072         	call	_printf	;wreg free
  3565                           
  3566                           ;standbyMode.c: 301: _delay((unsigned long)((500)*(40000000/4000.0)));
  3567  00EDF2  0E1A               	movlw	26
  3568  00EDF4  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3569  00EDF6  0E5E               	movlw	94
  3570  00EDF8  6E1B               	movwf	??_viewLogs& (0+255),c
  3571  00EDFA  0E6E               	movlw	110
  3572  00EDFC                     u5777:
  3573  00EDFC  2EE8               	decfsz	wreg,f,c
  3574  00EDFE  D7FE               	bra	u5777
  3575  00EE00  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3576  00EE02  D7FC               	bra	u5777
  3577  00EE04  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3578  00EE06  D7FA               	bra	u5777
  3579  00EE08  D000               	nop2	
  3580  00EE0A                     
  3581                           ;standbyMode.c: 304: continue;
  3582  00EE0A  A281               	btfss	3969,1,c	;volatile
  3583  00EE0C  D7FE               	goto	l228
  3584                           
  3585                           ;standbyMode.c: 305: }
  3586                           ;standbyMode.c: 307: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3587  00EE0E  0E01               	movlw	1
  3588  00EE10  ECB1  F070         	call	_lcdInst
  3589  00EE14  0EC3               	movlw	195
  3590  00EE16  6E1B               	movwf	??_viewLogs& (0+255),c
  3591  00EE18  0ECD               	movlw	205
  3592  00EE1A                     u5787:
  3593  00EE1A  2EE8               	decfsz	wreg,f,c
  3594  00EE1C  D7FE               	bra	u5787
  3595  00EE1E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3596  00EE20  D7FC               	bra	u5787
  3597  00EE22  F000               	nop	
  3598                           
  3599                           ;standbyMode.c: 308: printf("Operation time:");
  3600  00EE24  0E20               	movlw	low STR_8
  3601  00EE26  6E0D               	movwf	printf@f,c
  3602  00EE28  0EFE               	movlw	high STR_8
  3603  00EE2A  6E0E               	movwf	printf@f+1,c
  3604  00EE2C  EC6B  F072         	call	_printf	;wreg free
  3605                           
  3606                           ;standbyMode.c: 309: lcdInst(0xC0);;
  3607  00EE30  0EC0               	movlw	192
  3608  00EE32  ECB1  F070         	call	_lcdInst
  3609                           
  3610                           ;standbyMode.c: 310: printf("2:39");
  3611  00EE36  0EF9               	movlw	low STR_9
  3612  00EE38  6E0D               	movwf	printf@f,c
  3613  00EE3A  0EFF               	movlw	high STR_9
  3614  00EE3C  6E0E               	movwf	printf@f+1,c
  3615  00EE3E  EC6B  F072         	call	_printf	;wreg free
  3616                           
  3617                           ;standbyMode.c: 311: _delay((unsigned long)((500)*(40000000/4000.0)));
  3618  00EE42  0E1A               	movlw	26
  3619  00EE44  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3620  00EE46  0E5E               	movlw	94
  3621  00EE48  6E1B               	movwf	??_viewLogs& (0+255),c
  3622  00EE4A  0E6E               	movlw	110
  3623  00EE4C                     u5797:
  3624  00EE4C  2EE8               	decfsz	wreg,f,c
  3625  00EE4E  D7FE               	bra	u5797
  3626  00EE50  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3627  00EE52  D7FC               	bra	u5797
  3628  00EE54  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3629  00EE56  D7FA               	bra	u5797
  3630  00EE58  D000               	nop2	
  3631  00EE5A                     
  3632                           ;standbyMode.c: 314: continue;
  3633  00EE5A  A281               	btfss	3969,1,c	;volatile
  3634  00EE5C  D7FE               	goto	l231
  3635                           
  3636                           ;standbyMode.c: 315: }
  3637                           ;standbyMode.c: 317: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3638  00EE5E  0E01               	movlw	1
  3639  00EE60  ECB1  F070         	call	_lcdInst
  3640  00EE64  0EC3               	movlw	195
  3641  00EE66  6E1B               	movwf	??_viewLogs& (0+255),c
  3642  00EE68  0ECD               	movlw	205
  3643  00EE6A                     u5807:
  3644  00EE6A  2EE8               	decfsz	wreg,f,c
  3645  00EE6C  D7FE               	bra	u5807
  3646  00EE6E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3647  00EE70  D7FC               	bra	u5807
  3648  00EE72  F000               	nop	
  3649                           
  3650                           ;standbyMode.c: 318: printf("Marked drawers:");
  3651  00EE74  0E30               	movlw	low STR_10
  3652  00EE76  6E0D               	movwf	printf@f,c
  3653  00EE78  0EFE               	movlw	high STR_10
  3654  00EE7A  6E0E               	movwf	printf@f+1,c
  3655  00EE7C  EC6B  F072         	call	_printf	;wreg free
  3656                           
  3657                           ;standbyMode.c: 319: lcdInst(0xC0);;
  3658  00EE80  0EC0               	movlw	192
  3659  00EE82  ECB1  F070         	call	_lcdInst
  3660                           
  3661                           ;standbyMode.c: 320: printf("1, 13");
  3662  00EE86  0EF3               	movlw	low STR_11
  3663  00EE88  6E0D               	movwf	printf@f,c
  3664  00EE8A  0EFF               	movlw	high STR_11
  3665  00EE8C  6E0E               	movwf	printf@f+1,c
  3666  00EE8E  EC6B  F072         	call	_printf	;wreg free
  3667                           
  3668                           ;standbyMode.c: 321: _delay((unsigned long)((500)*(40000000/4000.0)));
  3669  00EE92  0E1A               	movlw	26
  3670  00EE94  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3671  00EE96  0E5E               	movlw	94
  3672  00EE98  6E1B               	movwf	??_viewLogs& (0+255),c
  3673  00EE9A  0E6E               	movlw	110
  3674  00EE9C                     u5817:
  3675  00EE9C  2EE8               	decfsz	wreg,f,c
  3676  00EE9E  D7FE               	bra	u5817
  3677  00EEA0  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3678  00EEA2  D7FC               	bra	u5817
  3679  00EEA4  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3680  00EEA6  D7FA               	bra	u5817
  3681  00EEA8  D000               	nop2	
  3682  00EEAA                     
  3683                           ;standbyMode.c: 324: continue;
  3684  00EEAA  A281               	btfss	3969,1,c	;volatile
  3685  00EEAC  D7FE               	goto	l234
  3686                           
  3687                           ;standbyMode.c: 325: }
  3688                           ;standbyMode.c: 327: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3689  00EEAE  0E01               	movlw	1
  3690  00EEB0  ECB1  F070         	call	_lcdInst
  3691  00EEB4  0EC3               	movlw	195
  3692  00EEB6  6E1B               	movwf	??_viewLogs& (0+255),c
  3693  00EEB8  0ECD               	movlw	205
  3694  00EEBA                     u5827:
  3695  00EEBA  2EE8               	decfsz	wreg,f,c
  3696  00EEBC  D7FE               	bra	u5827
  3697  00EEBE  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3698  00EEC0  D7FC               	bra	u5827
  3699  00EEC2  F000               	nop	
  3700                           
  3701                           ;standbyMode.c: 328: printf("Remaining pieces:");
  3702  00EEC4  0E47               	movlw	low STR_12
  3703  00EEC6  6E0D               	movwf	printf@f,c
  3704  00EEC8  0EFD               	movlw	high STR_12
  3705  00EECA  6E0E               	movwf	printf@f+1,c
  3706  00EECC  EC6B  F072         	call	_printf	;wreg free
  3707                           
  3708                           ;standbyMode.c: 329: lcdInst(0xC0);;
  3709  00EED0  0EC0               	movlw	192
  3710  00EED2  ECB1  F070         	call	_lcdInst
  3711                           
  3712                           ;standbyMode.c: 330: printf("R:3  F:12  L:10");
  3713  00EED6  0E00               	movlw	low STR_13
  3714  00EED8  6E0D               	movwf	printf@f,c
  3715  00EEDA  0EFE               	movlw	high STR_13
  3716  00EEDC  6E0E               	movwf	printf@f+1,c
  3717  00EEDE  EC6B  F072         	call	_printf	;wreg free
  3718                           
  3719                           ;standbyMode.c: 331: _delay((unsigned long)((500)*(40000000/4000.0)));
  3720  00EEE2  0E1A               	movlw	26
  3721  00EEE4  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3722  00EEE6  0E5E               	movlw	94
  3723  00EEE8  6E1B               	movwf	??_viewLogs& (0+255),c
  3724  00EEEA  0E6E               	movlw	110
  3725  00EEEC                     u5837:
  3726  00EEEC  2EE8               	decfsz	wreg,f,c
  3727  00EEEE  D7FE               	bra	u5837
  3728  00EEF0  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3729  00EEF2  D7FC               	bra	u5837
  3730  00EEF4  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3731  00EEF6  D7FA               	bra	u5837
  3732  00EEF8  D000               	nop2	
  3733  00EEFA                     
  3734                           ;standbyMode.c: 334: continue;
  3735  00EEFA  A281               	btfss	3969,1,c	;volatile
  3736  00EEFC  D7FE               	goto	l237
  3737                           
  3738                           ;standbyMode.c: 335: }
  3739                           ;standbyMode.c: 337: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3740  00EEFE  0E01               	movlw	1
  3741  00EF00  ECB1  F070         	call	_lcdInst
  3742  00EF04  0EC3               	movlw	195
  3743  00EF06  6E1B               	movwf	??_viewLogs& (0+255),c
  3744  00EF08  0ECD               	movlw	205
  3745  00EF0A                     u5847:
  3746  00EF0A  2EE8               	decfsz	wreg,f,c
  3747  00EF0C  D7FE               	bra	u5847
  3748  00EF0E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3749  00EF10  D7FC               	bra	u5847
  3750  00EF12  F000               	nop	
  3751                           
  3752                           ;standbyMode.c: 338: printf("Drawer Summary:");
  3753  00EF14  0E50               	movlw	low STR_14
  3754  00EF16  6E0D               	movwf	printf@f,c
  3755  00EF18  0EFE               	movlw	high STR_14
  3756  00EF1A  6E0E               	movwf	printf@f+1,c
  3757  00EF1C  EC6B  F072         	call	_printf	;wreg free
  3758                           
  3759                           ;standbyMode.c: 339: _delay((unsigned long)((500)*(40000000/4000.0)));
  3760  00EF20  0E1A               	movlw	26
  3761  00EF22  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3762  00EF24  0E5E               	movlw	94
  3763  00EF26  6E1B               	movwf	??_viewLogs& (0+255),c
  3764  00EF28  0E6E               	movlw	110
  3765  00EF2A                     u5857:
  3766  00EF2A  2EE8               	decfsz	wreg,f,c
  3767  00EF2C  D7FE               	bra	u5857
  3768  00EF2E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3769  00EF30  D7FC               	bra	u5857
  3770  00EF32  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3771  00EF34  D7FA               	bra	u5857
  3772  00EF36  D000               	nop2	
  3773  00EF38                     
  3774                           ;standbyMode.c: 342: continue;
  3775  00EF38  A281               	btfss	3969,1,c	;volatile
  3776  00EF3A  D7FE               	goto	l240
  3777                           
  3778                           ;standbyMode.c: 343: }
  3779                           ;standbyMode.c: 345: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3780  00EF3C  0E01               	movlw	1
  3781  00EF3E  ECB1  F070         	call	_lcdInst
  3782  00EF42  0EC3               	movlw	195
  3783  00EF44  6E1B               	movwf	??_viewLogs& (0+255),c
  3784  00EF46  0ECD               	movlw	205
  3785  00EF48                     u5867:
  3786  00EF48  2EE8               	decfsz	wreg,f,c
  3787  00EF4A  D7FE               	bra	u5867
  3788  00EF4C  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3789  00EF4E  D7FC               	bra	u5867
  3790  00EF50  F000               	nop	
  3791                           
  3792                           ;standbyMode.c: 346: printf("Drawer 1: RF12");
  3793  00EF52  0EB0               	movlw	low STR_15
  3794  00EF54  6E0D               	movwf	printf@f,c
  3795  00EF56  0EFE               	movlw	high STR_15
  3796  00EF58  6E0E               	movwf	printf@f+1,c
  3797  00EF5A  EC6B  F072         	call	_printf	;wreg free
  3798                           
  3799                           ;standbyMode.c: 347: lcdInst(0xC0);;
  3800  00EF5E  0EC0               	movlw	192
  3801  00EF60  ECB1  F070         	call	_lcdInst
  3802                           
  3803                           ;standbyMode.c: 348: printf("Drawer 2: L1");
  3804  00EF64  0E3E               	movlw	low STR_16
  3805  00EF66  6E0D               	movwf	printf@f,c
  3806  00EF68  0EFF               	movlw	high STR_16
  3807  00EF6A  6E0E               	movwf	printf@f+1,c
  3808  00EF6C  EC6B  F072         	call	_printf	;wreg free
  3809                           
  3810                           ;standbyMode.c: 349: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3811  00EF70  0E66               	movlw	102
  3812  00EF72  6E1C               	movwf	(??_viewLogs+1)& (0+255),c
  3813  00EF74  0E76               	movlw	118
  3814  00EF76  6E1B               	movwf	??_viewLogs& (0+255),c
  3815  00EF78  0EC1               	movlw	193
  3816  00EF7A                     u5877:
  3817  00EF7A  2EE8               	decfsz	wreg,f,c
  3818  00EF7C  D7FE               	bra	u5877
  3819  00EF7E  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3820  00EF80  D7FC               	bra	u5877
  3821  00EF82  2E1C               	decfsz	(??_viewLogs+1)& (0+255),f,c
  3822  00EF84  D7FA               	bra	u5877
  3823  00EF86  F000               	nop	
  3824                           
  3825                           ;standbyMode.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3826  00EF88  0E01               	movlw	1
  3827  00EF8A  ECB1  F070         	call	_lcdInst
  3828  00EF8E  0EC3               	movlw	195
  3829  00EF90  6E1B               	movwf	??_viewLogs& (0+255),c
  3830  00EF92  0ECD               	movlw	205
  3831  00EF94                     u5887:
  3832  00EF94  2EE8               	decfsz	wreg,f,c
  3833  00EF96  D7FE               	bra	u5887
  3834  00EF98  2E1B               	decfsz	??_viewLogs& (0+255),f,c
  3835  00EF9A  D7FC               	bra	u5887
  3836  00EF9C  F000               	nop	
  3837                           
  3838                           ;standbyMode.c: 352: printf("Another log?");
  3839  00EF9E  0E58               	movlw	low STR_17
  3840  00EFA0  6E0D               	movwf	printf@f,c
  3841  00EFA2  0EFF               	movlw	high STR_17
  3842  00EFA4  6E0E               	movwf	printf@f+1,c
  3843  00EFA6  EC6B  F072         	call	_printf	;wreg free
  3844                           
  3845                           ;standbyMode.c: 353: lcdInst(0xC0);;
  3846  00EFAA  0EC0               	movlw	192
  3847  00EFAC  ECB1  F070         	call	_lcdInst
  3848                           
  3849                           ;standbyMode.c: 354: printf("# = Yes, D = No");
  3850  00EFB0  0E80               	movlw	low STR_18
  3851  00EFB2  6E0D               	movwf	printf@f,c
  3852  00EFB4  0EFE               	movlw	high STR_18
  3853  00EFB6  6E0E               	movwf	printf@f+1,c
  3854  00EFB8  EC6B  F072         	call	_printf	;wreg free
  3855  00EFBC  A281               	btfss	3969,1,c	;volatile
  3856  00EFBE  D7FE               	goto	l243
  3857                           
  3858                           ;standbyMode.c: 357: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  3859  00EFC0  3881               	swapf	3969,w,c	;volatile
  3860  00EFC2  0B0F               	andlw	15
  3861  00EFC4  0B0F               	andlw	15
  3862  00EFC6  6E1D               	movwf	viewLogs@keypress3,c
  3863  00EFC8  B281               	btfsc	3969,1,c	;volatile
  3864  00EFCA  D7FE               	goto	l246
  3865                           
  3866                           ;standbyMode.c: 359: return keypress3;
  3867  00EFCC  C01D  F019         	movff	viewLogs@keypress3,?_viewLogs
  3868  00EFD0  6A1A               	clrf	?_viewLogs+1,c
  3869  00EFD2  0012               	return		;funcret
  3870  00EFD4                     __end_of_viewLogs:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function _food_press *****************
  3887 ;; Defined at:
  3888 ;;		line 469 in file "standbyMode.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  dietSum         2   24[COMRAM] unsigned int 
  3891 ;;  drawer          2   26[COMRAM] unsigned int 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  keypress        1   44[COMRAM] unsigned char 
  3894 ;;  foodTable       8   36[COMRAM] unsigned int [4]
  3895 ;;  count           2   34[COMRAM] unsigned int 
  3896 ;;  isValid         2   32[COMRAM] unsigned int 
  3897 ;;  tally           2   30[COMRAM] unsigned int 
  3898 ;; Return value:  Size  Location     Type
  3899 ;;                  1    wreg      void 
  3900 ;; Registers used:
  3901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3902 ;; Tracked objects:
  3903 ;;		On entry : 0/0
  3904 ;;		On exit  : 0/0
  3905 ;;		Unchanged: 0/0
  3906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;Total ram usage:       21 bytes
  3912 ;; Hardware stack levels used:    1
  3913 ;; Hardware stack levels required when called:    3
  3914 ;; This function calls:
  3915 ;;		_check_food
  3916 ;;		_get_digits
  3917 ;;		_lcdInst
  3918 ;;		_printf
  3919 ;;		_putch
  3920 ;; This function is called by:
  3921 ;;		_standbyMode
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text5
  3926  00E5F4                     __ptext5:
  3927                           	opt stack 0
  3928  00E5F4                     _food_press:
  3929                           	opt stack 26
  3930                           
  3931                           ;incstack = 0
  3932                           ;standbyMode.c: 471: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  3933  00E5F4  0E01               	movlw	1
  3934  00E5F6  ECB1  F070         	call	_lcdInst
  3935  00E5FA  0EC3               	movlw	195
  3936  00E5FC  6E1D               	movwf	??_food_press& (0+255),c
  3937  00E5FE  0ECD               	movlw	205
  3938  00E600                     u5897:
  3939  00E600  2EE8               	decfsz	wreg,f,c
  3940  00E602  D7FE               	bra	u5897
  3941  00E604  2E1D               	decfsz	??_food_press& (0+255),f,c
  3942  00E606  D7FC               	bra	u5897
  3943  00E608  F000               	nop	
  3944                           
  3945                           ;standbyMode.c: 472: printf("Drawer %i food:", drawer);
  3946  00E60A  0E10               	movlw	low STR_19
  3947  00E60C  6E0D               	movwf	printf@f,c
  3948  00E60E  0EFE               	movlw	high STR_19
  3949  00E610  6E0E               	movwf	printf@f+1,c
  3950  00E612  C01B  F00F         	movff	food_press@drawer,?_printf+2
  3951  00E616  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  3952  00E61A  EC6B  F072         	call	_printf	;wreg free
  3953                           
  3954                           ;standbyMode.c: 473: lcdInst(0xC0);;
  3955  00E61E  0EC0               	movlw	192
  3956  00E620  ECB1  F070         	call	_lcdInst
  3957                           
  3958                           ;standbyMode.c: 475: unsigned int tally = 0;
  3959  00E624  0E00               	movlw	0
  3960  00E626  6E20               	movwf	food_press@tally+1,c
  3961  00E628  0E00               	movlw	0
  3962  00E62A  6E1F               	movwf	food_press@tally,c
  3963                           
  3964                           ;standbyMode.c: 476: unsigned int count = 0;
  3965  00E62C  0E00               	movlw	0
  3966  00E62E  6E24               	movwf	food_press@count+1,c
  3967  00E630  0E00               	movlw	0
  3968  00E632  6E23               	movwf	food_press@count,c
  3969                           
  3970                           ;standbyMode.c: 477: unsigned int foodTable[4] = {0, 0, 0, 0};
  3971  00E634  EE20  F05E         	lfsr	2,food_press@F3040
  3972  00E638  EE10  F025         	lfsr	1,food_press@foodTable
  3973  00E63C  0E07               	movlw	7
  3974  00E63E                     u3851:
  3975  00E63E  CFDB FFE3          	movff	plusw2,plusw1
  3976  00E642  06E8               	decf	wreg,f,c
  3977  00E644  E2FC               	bc	u3851
  3978                           
  3979                           ;standbyMode.c: 478: unsigned int isValid = 0;
  3980  00E646  0E00               	movlw	0
  3981  00E648  6E22               	movwf	food_press@isValid+1,c
  3982  00E64A  0E00               	movlw	0
  3983  00E64C  6E21               	movwf	food_press@isValid,c
  3984                           
  3985                           ;standbyMode.c: 479: tally = get_digits(dietSum);
  3986  00E64E  C019  F001         	movff	food_press@dietSum,get_digits@sum
  3987  00E652  C01A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  3988  00E656  EC9B  F071         	call	_get_digits	;wreg free
  3989  00E65A  C001  F01F         	movff	?_get_digits,food_press@tally
  3990  00E65E  C002  F020         	movff	?_get_digits+1,food_press@tally+1
  3991  00E662                     
  3992                           ;standbyMode.c: 482: while(PORTBbits.RB1 == 0){ continue; }
  3993  00E662  A281               	btfss	3969,1,c	;volatile
  3994  00E664  D7FE               	goto	l278
  3995                           
  3996                           ;standbyMode.c: 483: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3997  00E666  3881               	swapf	3969,w,c	;volatile
  3998  00E668  0B0F               	andlw	15
  3999  00E66A  0B0F               	andlw	15
  4000  00E66C  6E2D               	movwf	food_press@keypress,c
  4001  00E66E  B281               	btfsc	3969,1,c	;volatile
  4002  00E670  D7FE               	goto	l283
  4003                           
  4004                           ;standbyMode.c: 486: if(keypress == 14){
  4005  00E672  0E0E               	movlw	14
  4006  00E674  182D               	xorwf	food_press@keypress,w,c
  4007  00E676  B4D8               	btfsc	status,2,c
  4008  00E678  D064               	goto	l286
  4009                           
  4010                           ;standbyMode.c: 489: else if (keypress == 0 || keypress == 1 || keypress == 2){
  4011                           
  4012                           ;standbyMode.c: 488: }
  4013                           
  4014                           ;standbyMode.c: 487: break;
  4015  00E67A  502D               	movf	food_press@keypress,w,c
  4016  00E67C  B4D8               	btfsc	status,2,c
  4017  00E67E  D007               	goto	u3910
  4018  00E680  042D               	decf	food_press@keypress,w,c
  4019  00E682  B4D8               	btfsc	status,2,c
  4020  00E684  D004               	goto	u3910
  4021  00E686  0E02               	movlw	2
  4022  00E688  182D               	xorwf	food_press@keypress,w,c
  4023  00E68A  A4D8               	btfss	status,2,c
  4024  00E68C  D029               	goto	l288
  4025  00E68E                     u3910:
  4026                           
  4027                           ;standbyMode.c: 490: if (count < tally){
  4028  00E68E  501F               	movf	food_press@tally,w,c
  4029  00E690  5C23               	subwf	food_press@count,w,c
  4030  00E692  5020               	movf	food_press@tally+1,w,c
  4031  00E694  5824               	subwfb	food_press@count+1,w,c
  4032  00E696  B0D8               	btfsc	status,0,c
  4033  00E698  D7E4               	goto	l278
  4034                           
  4035                           ;standbyMode.c: 491: putch(input[keypress]);
  4036  00E69A  502D               	movf	food_press@keypress,w,c
  4037  00E69C  0D01               	mullw	1
  4038  00E69E  0E26               	movlw	low _input
  4039  00E6A0  24F3               	addwf	prodl,w,c
  4040  00E6A2  6EF6               	movwf	tblptrl,c
  4041  00E6A4  0EFD               	movlw	high _input
  4042  00E6A6  20F4               	addwfc	prodh,w,c
  4043  00E6A8  6EF7               	movwf	tblptrh,c
  4044  00E6AA                     	if	0	;There are less than 3 active tblptr bytes
  4045  00E6AA                     	endif
  4046  00E6AA  0008               	tblrd		*
  4047  00E6AC  50F5               	movf	tablat,w,c
  4048  00E6AE  ECBB  F070         	call	_putch
  4049                           
  4050                           ;standbyMode.c: 492: foodTable[count] = keypress + 1;
  4051  00E6B2  502D               	movf	food_press@keypress,w,c
  4052  00E6B4  6E1D               	movwf	??_food_press& (0+255),c
  4053  00E6B6  6A1E               	clrf	(??_food_press+1)& (0+255),c
  4054  00E6B8  0E01               	movlw	1
  4055  00E6BA  261D               	addwf	??_food_press,f,c
  4056  00E6BC  0E00               	movlw	0
  4057  00E6BE  221E               	addwfc	??_food_press+1,f,c
  4058  00E6C0  90D8               	bcf	status,0,c
  4059  00E6C2  3423               	rlcf	food_press@count,w,c
  4060  00E6C4  6ED9               	movwf	fsr2l,c
  4061  00E6C6  3424               	rlcf	food_press@count+1,w,c
  4062  00E6C8  6EDA               	movwf	fsr2h,c
  4063  00E6CA  0E25               	movlw	low food_press@foodTable
  4064  00E6CC  26D9               	addwf	fsr2l,f,c
  4065  00E6CE  0E00               	movlw	high food_press@foodTable
  4066  00E6D0  22DA               	addwfc	fsr2h,f,c
  4067  00E6D2  C01D  FFDE         	movff	??_food_press,postinc2
  4068  00E6D6  C01E  FFDD         	movff	??_food_press+1,postdec2
  4069                           
  4070                           ;standbyMode.c: 493: count += 1;
  4071  00E6DA  4A23               	infsnz	food_press@count,f,c
  4072  00E6DC  2A24               	incf	food_press@count+1,f,c
  4073                           
  4074                           ;standbyMode.c: 494: }
  4075                           ;standbyMode.c: 495: }
  4076  00E6DE  D7C1               	goto	l278
  4077  00E6E0                     l288:
  4078                           
  4079                           ;standbyMode.c: 496: else if (keypress == 12){
  4080  00E6E0  0E0C               	movlw	12
  4081  00E6E2  182D               	xorwf	food_press@keypress,w,c
  4082  00E6E4  A4D8               	btfss	status,2,c
  4083  00E6E6  D7BD               	goto	l278
  4084                           
  4085                           ;standbyMode.c: 497: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4086  00E6E8  0E01               	movlw	1
  4087  00E6EA  ECB1  F070         	call	_lcdInst
  4088  00E6EE  0EC3               	movlw	195
  4089  00E6F0  6E1D               	movwf	??_food_press& (0+255),c
  4090  00E6F2  0ECD               	movlw	205
  4091  00E6F4                     u5907:
  4092  00E6F4  2EE8               	decfsz	wreg,f,c
  4093  00E6F6  D7FE               	bra	u5907
  4094  00E6F8  2E1D               	decfsz	??_food_press& (0+255),f,c
  4095  00E6FA  D7FC               	bra	u5907
  4096  00E6FC  F000               	nop	
  4097                           
  4098                           ;standbyMode.c: 498: printf("Drawer %i food:", drawer);
  4099  00E6FE  0E10               	movlw	low STR_19
  4100  00E700  6E0D               	movwf	printf@f,c
  4101  00E702  0EFE               	movlw	high STR_19
  4102  00E704  6E0E               	movwf	printf@f+1,c
  4103  00E706  C01B  F00F         	movff	food_press@drawer,?_printf+2
  4104  00E70A  C01C  F010         	movff	food_press@drawer+1,?_printf+3
  4105  00E70E  EC6B  F072         	call	_printf	;wreg free
  4106                           
  4107                           ;standbyMode.c: 499: lcdInst(0xC0);;
  4108  00E712  0EC0               	movlw	192
  4109  00E714  ECB1  F070         	call	_lcdInst
  4110                           
  4111                           ;standbyMode.c: 500: count = 0;
  4112  00E718  0E00               	movlw	0
  4113  00E71A  6E24               	movwf	food_press@count+1,c
  4114  00E71C  0E00               	movlw	0
  4115  00E71E  6E23               	movwf	food_press@count,c
  4116                           
  4117                           ;standbyMode.c: 501: foodTable[0] = 0;
  4118  00E720  0E00               	movlw	0
  4119  00E722  6E26               	movwf	food_press@foodTable+1,c
  4120  00E724  0E00               	movlw	0
  4121  00E726  6E25               	movwf	food_press@foodTable,c
  4122                           
  4123                           ;standbyMode.c: 502: foodTable[1] = 0;
  4124  00E728  0E00               	movlw	0
  4125  00E72A  6E28               	movwf	food_press@foodTable+3,c
  4126  00E72C  0E00               	movlw	0
  4127  00E72E  6E27               	movwf	food_press@foodTable+2,c
  4128                           
  4129                           ;standbyMode.c: 503: foodTable[2] = 0;
  4130  00E730  0E00               	movlw	0
  4131  00E732  6E2A               	movwf	food_press@foodTable+5,c
  4132  00E734  0E00               	movlw	0
  4133  00E736  6E29               	movwf	food_press@foodTable+4,c
  4134                           
  4135                           ;standbyMode.c: 504: foodTable[3] = 0;
  4136  00E738  0E00               	movlw	0
  4137  00E73A  6E2C               	movwf	food_press@foodTable+7,c
  4138  00E73C  0E00               	movlw	0
  4139  00E73E  6E2B               	movwf	food_press@foodTable+6,c
  4140  00E740  D790               	goto	l278
  4141  00E742                     l286:
  4142                           
  4143                           ;standbyMode.c: 505: }
  4144                           ;standbyMode.c: 506: }
  4145                           ;standbyMode.c: 507: isValid = check_food(dietSum, foodTable);
  4146  00E742  C019  F001         	movff	food_press@dietSum,check_food@sum
  4147  00E746  C01A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  4148  00E74A  0E25               	movlw	low food_press@foodTable
  4149  00E74C  6E03               	movwf	check_food@foodInput,c
  4150  00E74E  0E00               	movlw	high food_press@foodTable
  4151  00E750  6E04               	movwf	check_food@foodInput+1,c
  4152  00E752  ECBC  F074         	call	_check_food	;wreg free
  4153  00E756  C001  F021         	movff	?_check_food,food_press@isValid
  4154  00E75A  C002  F022         	movff	?_check_food+1,food_press@isValid+1
  4155                           
  4156                           ;standbyMode.c: 509: if (isValid == 0){
  4157  00E75E  5021               	movf	food_press@isValid,w,c
  4158  00E760  1022               	iorwf	food_press@isValid+1,w,c
  4159  00E762  A4D8               	btfss	status,2,c
  4160  00E764  0012               	return	
  4161                           
  4162                           ;standbyMode.c: 510: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4163  00E766  0E01               	movlw	1
  4164  00E768  ECB1  F070         	call	_lcdInst
  4165  00E76C  0EC3               	movlw	195
  4166  00E76E  6E1D               	movwf	??_food_press& (0+255),c
  4167  00E770  0ECD               	movlw	205
  4168  00E772                     u5917:
  4169  00E772  2EE8               	decfsz	wreg,f,c
  4170  00E774  D7FE               	bra	u5917
  4171  00E776  2E1D               	decfsz	??_food_press& (0+255),f,c
  4172  00E778  D7FC               	bra	u5917
  4173  00E77A  F000               	nop	
  4174                           
  4175                           ;standbyMode.c: 511: printf("Invalid food!");
  4176  00E77C  0EEC               	movlw	low STR_21
  4177  00E77E  6E0D               	movwf	printf@f,c
  4178  00E780  0EFE               	movlw	high STR_21
  4179  00E782  6E0E               	movwf	printf@f+1,c
  4180  00E784  EC6B  F072         	call	_printf	;wreg free
  4181                           
  4182                           ;standbyMode.c: 512: lcdInst(0xC0);;
  4183  00E788  0EC0               	movlw	192
  4184  00E78A  ECB1  F070         	call	_lcdInst
  4185                           
  4186                           ;standbyMode.c: 513: printf("Try again.");
  4187  00E78E  0E9F               	movlw	low STR_22
  4188  00E790  6E0D               	movwf	printf@f,c
  4189  00E792  0EFF               	movlw	high STR_22
  4190  00E794  6E0E               	movwf	printf@f+1,c
  4191  00E796  EC6B  F072         	call	_printf	;wreg free
  4192                           
  4193                           ;standbyMode.c: 514: _delay((unsigned long)((1000)*(40000000/4000.0)));
  4194  00E79A  0E33               	movlw	51
  4195  00E79C  6E1E               	movwf	(??_food_press+1)& (0+255),c
  4196  00E79E  0EBB               	movlw	187
  4197  00E7A0  6E1D               	movwf	??_food_press& (0+255),c
  4198  00E7A2  0EE0               	movlw	224
  4199  00E7A4                     u5927:
  4200  00E7A4  2EE8               	decfsz	wreg,f,c
  4201  00E7A6  D7FE               	bra	u5927
  4202  00E7A8  2E1D               	decfsz	??_food_press& (0+255),f,c
  4203  00E7AA  D7FC               	bra	u5927
  4204  00E7AC  2E1E               	decfsz	(??_food_press+1)& (0+255),f,c
  4205  00E7AE  D7FA               	bra	u5927
  4206                           
  4207                           ;standbyMode.c: 515: goto START;
  4208  00E7B0  D721               	goto	_food_press
  4209  00E7B2                     __end_of_food_press:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           plusw1	equ	0xFE3
  4220                           postinc2	equ	0xFDE
  4221                           postdec2	equ	0xFDD
  4222                           plusw2	equ	0xFDB
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _get_digits *****************
  4228 ;; Defined at:
  4229 ;;		line 364 in file "standbyMode.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;  sum             2    0[COMRAM] unsigned int 
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;  count           2    4[COMRAM] unsigned int 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  2    0[COMRAM] unsigned int 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        6 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_food_press
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text6
  4257  00E336                     __ptext6:
  4258                           	opt stack 0
  4259  00E336                     _get_digits:
  4260                           	opt stack 28
  4261                           
  4262                           ;standbyMode.c: 366: unsigned int count = 0;
  4263                           
  4264                           ;incstack = 0
  4265  00E336  0E00               	movlw	0
  4266  00E338  6E06               	movwf	get_digits@count+1,c
  4267  00E33A  0E00               	movlw	0
  4268  00E33C  6E05               	movwf	get_digits@count,c
  4269                           
  4270                           ;standbyMode.c: 368: switch(sum){
  4271  00E33E  D015               	goto	l251
  4272  00E340                     
  4273                           ;standbyMode.c: 381: count = 1;
  4274                           
  4275                           ;standbyMode.c: 380: case 12:
  4276                           
  4277                           ;standbyMode.c: 377: break;
  4278                           
  4279                           ;standbyMode.c: 376: count = 1;
  4280                           
  4281                           ;standbyMode.c: 375: case 7:
  4282                           
  4283                           ;standbyMode.c: 372: break;
  4284                           
  4285                           ;standbyMode.c: 371: count = 1;
  4286  00E340  0E00               	movlw	0
  4287  00E342  6E06               	movwf	get_digits@count+1,c
  4288  00E344  0E01               	movlw	1
  4289  00E346                     L17:
  4290  00E346  6E05               	movwf	get_digits@count,c
  4291                           
  4292                           ;standbyMode.c: 387: break;
  4293  00E348  D050               	goto	l253
  4294  00E34A                     
  4295                           ;standbyMode.c: 396: count = 2;
  4296                           
  4297                           ;standbyMode.c: 395: case 19:
  4298                           
  4299                           ;standbyMode.c: 392: break;
  4300                           
  4301                           ;standbyMode.c: 391: count = 2;
  4302  00E34A  0E00               	movlw	0
  4303  00E34C  6E06               	movwf	get_digits@count+1,c
  4304  00E34E  0E02               	movlw	2
  4305  00E350  D7FA               	goto	L17
  4306  00E352                     
  4307                           ;standbyMode.c: 431: count = 3;
  4308                           
  4309                           ;standbyMode.c: 430: case 31:
  4310                           
  4311                           ;standbyMode.c: 427: break;
  4312                           
  4313                           ;standbyMode.c: 426: count = 3;
  4314                           
  4315                           ;standbyMode.c: 425: case 26:
  4316                           
  4317                           ;standbyMode.c: 422: break;
  4318                           
  4319                           ;standbyMode.c: 421: count = 3;
  4320                           
  4321                           ;standbyMode.c: 420: case 22:
  4322                           
  4323                           ;standbyMode.c: 417: break;
  4324                           
  4325                           ;standbyMode.c: 416: count = 3;
  4326                           
  4327                           ;standbyMode.c: 415: case 27:
  4328                           
  4329                           ;standbyMode.c: 412: break;
  4330                           
  4331                           ;standbyMode.c: 411: count = 3;
  4332                           
  4333                           ;standbyMode.c: 410: case 17:
  4334                           
  4335                           ;standbyMode.c: 407: break;
  4336                           
  4337                           ;standbyMode.c: 406: count = 3;
  4338                           
  4339                           ;standbyMode.c: 405: case 18:
  4340                           
  4341                           ;standbyMode.c: 402: break;
  4342                           
  4343                           ;standbyMode.c: 401: count = 3;
  4344  00E352  0E00               	movlw	0
  4345  00E354  6E06               	movwf	get_digits@count+1,c
  4346  00E356  0E03               	movlw	3
  4347  00E358  D7F6               	goto	L17
  4348  00E35A                     
  4349                           ;standbyMode.c: 456: count = 4;
  4350                           
  4351                           ;standbyMode.c: 455: case 43:
  4352                           
  4353                           ;standbyMode.c: 452: break;
  4354                           
  4355                           ;standbyMode.c: 451: count = 4;
  4356                           
  4357                           ;standbyMode.c: 450: case 39:
  4358                           
  4359                           ;standbyMode.c: 447: break;
  4360                           
  4361                           ;standbyMode.c: 446: count = 4;
  4362                           
  4363                           ;standbyMode.c: 445: case 34:
  4364                           
  4365                           ;standbyMode.c: 442: break;
  4366                           
  4367                           ;standbyMode.c: 441: count = 4;
  4368                           
  4369                           ;standbyMode.c: 440: case 29:
  4370                           
  4371                           ;standbyMode.c: 437: break;
  4372                           
  4373                           ;standbyMode.c: 436: count = 4;
  4374  00E35A  0E00               	movlw	0
  4375  00E35C  6E06               	movwf	get_digits@count+1,c
  4376  00E35E  0E04               	movlw	4
  4377  00E360  D7F2               	goto	L17
  4378  00E362                     
  4379                           ;standbyMode.c: 461: count = 0;
  4380  00E362  0E00               	movlw	0
  4381  00E364  6E06               	movwf	get_digits@count+1,c
  4382  00E366  0E00               	movlw	0
  4383  00E368  D7EE               	goto	L17
  4384  00E36A                     l251:
  4385  00E36A  C001  F003         	movff	get_digits@sum,??_get_digits
  4386  00E36E  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  4387                           
  4388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4389                           ; Switch size 1, requested type "space"
  4390                           ; Number of cases is 1, Range of values is 0 to 0
  4391                           ; switch strategies available:
  4392                           ; Name         Instructions Cycles
  4393                           ; simple_byte            4     3 (average)
  4394                           ;	Chosen strategy is simple_byte
  4395  00E372  5004               	movf	??_get_digits+1,w,c
  4396  00E374  0A00               	xorlw	0	; case 0
  4397  00E376  A4D8               	btfss	status,2,c
  4398  00E378  D7F4               	goto	l271
  4399                           
  4400                           ; Switch size 1, requested type "space"
  4401                           ; Number of cases is 18, Range of values is 3 to 43
  4402                           ; switch strategies available:
  4403                           ; Name         Instructions Cycles
  4404                           ; simple_byte           55    28 (average)
  4405                           ;	Chosen strategy is simple_byte
  4406  00E37A  5003               	movf	??_get_digits,w,c
  4407  00E37C  0A03               	xorlw	3	; case 3
  4408  00E37E  B4D8               	btfsc	status,2,c
  4409  00E380  D7DF               	goto	l252
  4410  00E382  0A04               	xorlw	4	; case 7
  4411  00E384  B4D8               	btfsc	status,2,c
  4412  00E386  D7DC               	goto	l252
  4413  00E388  0A0D               	xorlw	13	; case 10
  4414  00E38A  B4D8               	btfsc	status,2,c
  4415  00E38C  D7DE               	goto	l257
  4416  00E38E  0A06               	xorlw	6	; case 12
  4417  00E390  B4D8               	btfsc	status,2,c
  4418  00E392  D7D6               	goto	l252
  4419  00E394  0A01               	xorlw	1	; case 13
  4420  00E396  B4D8               	btfsc	status,2,c
  4421  00E398  D7DC               	goto	l259
  4422  00E39A  0A02               	xorlw	2	; case 15
  4423  00E39C  B4D8               	btfsc	status,2,c
  4424  00E39E  D7D5               	goto	l257
  4425  00E3A0  0A1E               	xorlw	30	; case 17
  4426  00E3A2  B4D8               	btfsc	status,2,c
  4427  00E3A4  D7D6               	goto	l259
  4428  00E3A6  0A03               	xorlw	3	; case 18
  4429  00E3A8  B4D8               	btfsc	status,2,c
  4430  00E3AA  D7D3               	goto	l259
  4431  00E3AC  0A01               	xorlw	1	; case 19
  4432  00E3AE  B4D8               	btfsc	status,2,c
  4433  00E3B0  D7CC               	goto	l257
  4434  00E3B2  0A05               	xorlw	5	; case 22
  4435  00E3B4  B4D8               	btfsc	status,2,c
  4436  00E3B6  D7CD               	goto	l259
  4437  00E3B8  0A0F               	xorlw	15	; case 25
  4438  00E3BA  B4D8               	btfsc	status,2,c
  4439  00E3BC  D7CE               	goto	l266
  4440  00E3BE  0A03               	xorlw	3	; case 26
  4441  00E3C0  B4D8               	btfsc	status,2,c
  4442  00E3C2  D7C7               	goto	l259
  4443  00E3C4  0A01               	xorlw	1	; case 27
  4444  00E3C6  B4D8               	btfsc	status,2,c
  4445  00E3C8  D7C4               	goto	l259
  4446  00E3CA  0A06               	xorlw	6	; case 29
  4447  00E3CC  B4D8               	btfsc	status,2,c
  4448  00E3CE  D7C5               	goto	l266
  4449  00E3D0  0A02               	xorlw	2	; case 31
  4450  00E3D2  B4D8               	btfsc	status,2,c
  4451  00E3D4  D7BE               	goto	l259
  4452  00E3D6  0A3D               	xorlw	61	; case 34
  4453  00E3D8  B4D8               	btfsc	status,2,c
  4454  00E3DA  D7BF               	goto	l266
  4455  00E3DC  0A05               	xorlw	5	; case 39
  4456  00E3DE  B4D8               	btfsc	status,2,c
  4457  00E3E0  D7BC               	goto	l266
  4458  00E3E2  0A0C               	xorlw	12	; case 43
  4459  00E3E4  B4D8               	btfsc	status,2,c
  4460  00E3E6  D7B9               	goto	l266
  4461  00E3E8  D7BC               	goto	l271
  4462  00E3EA                     l253:
  4463                           
  4464                           ;standbyMode.c: 464: return count;
  4465  00E3EA  C005  F001         	movff	get_digits@count,?_get_digits
  4466  00E3EE  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  4467  00E3F2  0012               	return		;funcret
  4468  00E3F4                     __end_of_get_digits:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           postinc0	equ	0xFEE
  4477                           wreg	equ	0xFE8
  4478                           plusw1	equ	0xFE3
  4479                           postinc2	equ	0xFDE
  4480                           postdec2	equ	0xFDD
  4481                           plusw2	equ	0xFDB
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _check_food *****************
  4487 ;; Defined at:
  4488 ;;		line 87 in file "standbyMode.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  sum             2    0[COMRAM] unsigned int 
  4491 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  4492 ;;		 -> food_press@foodTable(8), 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;  returnValue     2    6[COMRAM] unsigned int 
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  2    0[COMRAM] unsigned int 
  4497 ;; Registers used:
  4498 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : 0/0
  4501 ;;		On exit  : 0/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;Total ram usage:        8 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_food_press
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text7
  4518  00E978                     __ptext7:
  4519                           	opt stack 0
  4520  00E978                     _check_food:
  4521                           	opt stack 28
  4522                           
  4523                           ;standbyMode.c: 89: unsigned int returnValue = 0;
  4524                           
  4525                           ;incstack = 0
  4526  00E978  0E00               	movlw	0
  4527  00E97A  6E08               	movwf	check_food@returnValue+1,c
  4528  00E97C  0E00               	movlw	0
  4529  00E97E  6E07               	movwf	check_food@returnValue,c
  4530                           
  4531                           ;standbyMode.c: 91: switch(sum){
  4532  00E980  D14D               	goto	l131
  4533  00E982                     u2740:
  4534  00E982  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4535  00E986  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4536  00E98A  D0A7               	goto	L24
  4537  00E98C                     
  4538                           ;standbyMode.c: 108: if (foodInput[0] == 1 || foodInput[0] == 2 || foodInput[0] == 3){
  4539  00E98C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4540  00E990  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4541  00E994  04DE               	decf	postinc2,w,c
  4542  00E996  10DE               	iorwf	postinc2,w,c
  4543  00E998  B4D8               	btfsc	status,2,c
  4544  00E99A  D118               	goto	u3420
  4545  00E99C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4546  00E9A0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4547  00E9A4  0E02               	movlw	2
  4548  00E9A6  18DE               	xorwf	postinc2,w,c
  4549  00E9A8  10DE               	iorwf	postinc2,w,c
  4550  00E9AA  B4D8               	btfsc	status,2,c
  4551  00E9AC  D10F               	goto	u3420
  4552  00E9AE  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4553  00E9B2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4554  00E9B6  0E03               	movlw	3
  4555  00E9B8  D091               	goto	L25
  4556  00E9BA                     
  4557                           ;standbyMode.c: 115: if (foodInput[0] != 3 && foodInput[1] != 3 && foodInput[0] != 0 && 
      +                          foodInput[1] != 0){
  4558  00E9BA  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4559  00E9BE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4560  00E9C2  0E03               	movlw	3
  4561  00E9C4  18DE               	xorwf	postinc2,w,c
  4562  00E9C6  10DE               	iorwf	postinc2,w,c
  4563  00E9C8  B4D8               	btfsc	status,2,c
  4564  00E9CA  D167               	goto	l136
  4565  00E9CC  EE20 F002          	lfsr	2,2
  4566  00E9D0  5003               	movf	check_food@foodInput,w,c
  4567  00E9D2  26D9               	addwf	fsr2l,f,c
  4568  00E9D4  5004               	movf	check_food@foodInput+1,w,c
  4569  00E9D6  22DA               	addwfc	fsr2h,f,c
  4570  00E9D8  0E03               	movlw	3
  4571  00E9DA  18DE               	xorwf	postinc2,w,c
  4572  00E9DC  10DE               	iorwf	postinc2,w,c
  4573  00E9DE  B4D8               	btfsc	status,2,c
  4574  00E9E0  D15C               	goto	l136
  4575  00E9E2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4576  00E9E6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4577  00E9EA  50DE               	movf	postinc2,w,c
  4578  00E9EC  10DE               	iorwf	postinc2,w,c
  4579  00E9EE  B4D8               	btfsc	status,2,c
  4580  00E9F0  D154               	goto	l136
  4581  00E9F2  EE20 F002          	lfsr	2,2
  4582  00E9F6  5003               	movf	check_food@foodInput,w,c
  4583  00E9F8  26D9               	addwf	fsr2l,f,c
  4584  00E9FA  5004               	movf	check_food@foodInput+1,w,c
  4585  00E9FC  22DA               	addwfc	fsr2h,f,c
  4586  00E9FE                     L18:
  4587  00E9FE  50DE               	movf	postinc2,w,c
  4588  00EA00  10DE               	iorwf	postinc2,w,c
  4589  00EA02  B4D8               	btfsc	status,2,c
  4590  00EA04  D14A               	goto	l136
  4591  00EA06  D0E2               	goto	u3420
  4592  00EA08                     
  4593                           ;standbyMode.c: 122: if (foodInput[1] == 3){
  4594  00EA08  EE20 F002          	lfsr	2,2
  4595  00EA0C  5003               	movf	check_food@foodInput,w,c
  4596  00EA0E  26D9               	addwf	fsr2l,f,c
  4597  00EA10  5004               	movf	check_food@foodInput+1,w,c
  4598  00EA12  22DA               	addwfc	fsr2h,f,c
  4599  00EA14  0E03               	movlw	3
  4600  00EA16  18DE               	xorwf	postinc2,w,c
  4601  00EA18  10DE               	iorwf	postinc2,w,c
  4602  00EA1A  A4D8               	btfss	status,2,c
  4603  00EA1C  D011               	goto	l153
  4604  00EA1E                     u2830:
  4605                           
  4606                           ;standbyMode.c: 123: if (foodInput[0] == 1){
  4607  00EA1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4608  00EA22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4609  00EA26  04DE               	decf	postinc2,w,c
  4610  00EA28  D0CE               	goto	L19
  4611  00EA2A                     
  4612                           ;standbyMode.c: 134: if (foodInput[1] == 3){
  4613  00EA2A  EE20 F002          	lfsr	2,2
  4614  00EA2E  5003               	movf	check_food@foodInput,w,c
  4615  00EA30  26D9               	addwf	fsr2l,f,c
  4616  00EA32  5004               	movf	check_food@foodInput+1,w,c
  4617  00EA34  22DA               	addwfc	fsr2h,f,c
  4618  00EA36  0E03               	movlw	3
  4619  00EA38  18DE               	xorwf	postinc2,w,c
  4620  00EA3A  10DE               	iorwf	postinc2,w,c
  4621  00EA3C  B4D8               	btfsc	status,2,c
  4622  00EA3E  D7EF               	goto	u2830
  4623  00EA40                     l153:
  4624                           
  4625                           ;standbyMode.c: 139: else if (foodInput[0] != 3 && foodInput[0] != 0){
  4626  00EA40  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4627  00EA44  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4628  00EA48  0E03               	movlw	3
  4629  00EA4A  18DE               	xorwf	postinc2,w,c
  4630  00EA4C  10DE               	iorwf	postinc2,w,c
  4631  00EA4E  B4D8               	btfsc	status,2,c
  4632  00EA50  D124               	goto	l136
  4633  00EA52  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4634  00EA56  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4635  00EA5A  D7D1               	goto	L18
  4636  00EA5C                     
  4637                           ;standbyMode.c: 164: if (foodInput[1] == 1 && foodInput[2] == 1){
  4638  00EA5C  EE20 F002          	lfsr	2,2
  4639  00EA60  5003               	movf	check_food@foodInput,w,c
  4640  00EA62  26D9               	addwf	fsr2l,f,c
  4641  00EA64  5004               	movf	check_food@foodInput+1,w,c
  4642  00EA66  22DA               	addwfc	fsr2h,f,c
  4643  00EA68  04DE               	decf	postinc2,w,c
  4644  00EA6A  10DE               	iorwf	postinc2,w,c
  4645  00EA6C  A4D8               	btfss	status,2,c
  4646  00EA6E  D115               	goto	l136
  4647  00EA70  EE20 F004          	lfsr	2,4
  4648  00EA74  5003               	movf	check_food@foodInput,w,c
  4649  00EA76  26D9               	addwf	fsr2l,f,c
  4650  00EA78  5004               	movf	check_food@foodInput+1,w,c
  4651  00EA7A  22DA               	addwfc	fsr2h,f,c
  4652  00EA7C  04DE               	decf	postinc2,w,c
  4653  00EA7E  10DE               	iorwf	postinc2,w,c
  4654  00EA80  A4D8               	btfss	status,2,c
  4655  00EA82  D10B               	goto	l136
  4656  00EA84                     
  4657                           ;standbyMode.c: 165: if (foodInput[0] == 1 || foodInput[0] == 2){
  4658  00EA84  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4659  00EA88  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4660  00EA8C  04DE               	decf	postinc2,w,c
  4661  00EA8E  10DE               	iorwf	postinc2,w,c
  4662  00EA90  B4D8               	btfsc	status,2,c
  4663  00EA92  D09C               	goto	u3420
  4664  00EA94  D776               	goto	u2740
  4665  00EA96                     l188:
  4666                           
  4667                           ;standbyMode.c: 205: if (foodInput[0] == 1 && foodInput[1] == 1){
  4668  00EA96  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4669  00EA9A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4670  00EA9E  04DE               	decf	postinc2,w,c
  4671  00EAA0  10DE               	iorwf	postinc2,w,c
  4672  00EAA2  A4D8               	btfss	status,2,c
  4673  00EAA4  D0FA               	goto	l136
  4674  00EAA6  EE20 F002          	lfsr	2,2
  4675  00EAAA  5003               	movf	check_food@foodInput,w,c
  4676  00EAAC  26D9               	addwf	fsr2l,f,c
  4677  00EAAE  5004               	movf	check_food@foodInput+1,w,c
  4678  00EAB0  22DA               	addwfc	fsr2h,f,c
  4679  00EAB2  04DE               	decf	postinc2,w,c
  4680  00EAB4  10DE               	iorwf	postinc2,w,c
  4681  00EAB6  A4D8               	btfss	status,2,c
  4682  00EAB8  D0F0               	goto	l136
  4683                           
  4684                           ;standbyMode.c: 206: if (foodInput[2] == 1 || foodInput[2] == 2){
  4685  00EABA  EE20 F004          	lfsr	2,4
  4686  00EABE  5003               	movf	check_food@foodInput,w,c
  4687  00EAC0  26D9               	addwf	fsr2l,f,c
  4688  00EAC2  5004               	movf	check_food@foodInput+1,w,c
  4689  00EAC4  22DA               	addwfc	fsr2h,f,c
  4690  00EAC6  04DE               	decf	postinc2,w,c
  4691  00EAC8  10DE               	iorwf	postinc2,w,c
  4692  00EACA  B4D8               	btfsc	status,2,c
  4693  00EACC  D07F               	goto	u3420
  4694  00EACE  EE20 F004          	lfsr	2,4
  4695  00EAD2  5003               	movf	check_food@foodInput,w,c
  4696  00EAD4  26D9               	addwf	fsr2l,f,c
  4697  00EAD6  5004               	movf	check_food@foodInput+1,w,c
  4698  00EAD8  22DA               	addwfc	fsr2h,f,c
  4699  00EADA                     L24:
  4700  00EADA  0E02               	movlw	2
  4701  00EADC                     L25:
  4702  00EADC  18DE               	xorwf	postinc2,w,c
  4703  00EADE  10DE               	iorwf	postinc2,w,c
  4704  00EAE0  B4D8               	btfsc	status,2,c
  4705  00EAE2  D074               	goto	u3420
  4706  00EAE4  D0DA               	goto	l136
  4707  00EAE6                     l193:
  4708                           
  4709                           ;standbyMode.c: 214: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  4710  00EAE6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4711  00EAEA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4712  00EAEE  04DE               	decf	postinc2,w,c
  4713  00EAF0  10DE               	iorwf	postinc2,w,c
  4714  00EAF2  A4D8               	btfss	status,2,c
  4715  00EAF4  D014               	goto	l194
  4716  00EAF6  EE20 F002          	lfsr	2,2
  4717  00EAFA  5003               	movf	check_food@foodInput,w,c
  4718  00EAFC  26D9               	addwf	fsr2l,f,c
  4719  00EAFE  5004               	movf	check_food@foodInput+1,w,c
  4720  00EB00  22DA               	addwfc	fsr2h,f,c
  4721  00EB02  04DE               	decf	postinc2,w,c
  4722  00EB04  10DE               	iorwf	postinc2,w,c
  4723  00EB06  A4D8               	btfss	status,2,c
  4724  00EB08  D00A               	goto	l194
  4725  00EB0A  EE20 F004          	lfsr	2,4
  4726  00EB0E  5003               	movf	check_food@foodInput,w,c
  4727  00EB10  26D9               	addwf	fsr2l,f,c
  4728  00EB12  5004               	movf	check_food@foodInput+1,w,c
  4729  00EB14  22DA               	addwfc	fsr2h,f,c
  4730  00EB16  04DE               	decf	postinc2,w,c
  4731  00EB18  10DE               	iorwf	postinc2,w,c
  4732  00EB1A  B4D8               	btfsc	status,2,c
  4733  00EB1C  D057               	goto	u3420
  4734  00EB1E                     l194:
  4735                           
  4736                           ;standbyMode.c: 217: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  4737  00EB1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4738  00EB22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4739  00EB26  0E02               	movlw	2
  4740  00EB28  18DE               	xorwf	postinc2,w,c
  4741  00EB2A  10DE               	iorwf	postinc2,w,c
  4742  00EB2C  A4D8               	btfss	status,2,c
  4743  00EB2E  D014               	goto	l196
  4744  00EB30  EE20 F002          	lfsr	2,2
  4745  00EB34  5003               	movf	check_food@foodInput,w,c
  4746  00EB36  26D9               	addwf	fsr2l,f,c
  4747  00EB38  5004               	movf	check_food@foodInput+1,w,c
  4748  00EB3A  22DA               	addwfc	fsr2h,f,c
  4749  00EB3C  04DE               	decf	postinc2,w,c
  4750  00EB3E  10DE               	iorwf	postinc2,w,c
  4751  00EB40  A4D8               	btfss	status,2,c
  4752  00EB42  D00A               	goto	l196
  4753  00EB44  EE20 F004          	lfsr	2,4
  4754  00EB48  5003               	movf	check_food@foodInput,w,c
  4755  00EB4A  26D9               	addwf	fsr2l,f,c
  4756  00EB4C  5004               	movf	check_food@foodInput+1,w,c
  4757  00EB4E  22DA               	addwfc	fsr2h,f,c
  4758  00EB50  04DE               	decf	postinc2,w,c
  4759  00EB52  10DE               	iorwf	postinc2,w,c
  4760  00EB54  B4D8               	btfsc	status,2,c
  4761  00EB56  D03A               	goto	u3420
  4762  00EB58                     l196:
  4763                           
  4764                           ;standbyMode.c: 220: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  4765  00EB58  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4766  00EB5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4767  00EB60  04DE               	decf	postinc2,w,c
  4768  00EB62  10DE               	iorwf	postinc2,w,c
  4769  00EB64  A4D8               	btfss	status,2,c
  4770  00EB66  D015               	goto	l198
  4771  00EB68  EE20 F002          	lfsr	2,2
  4772  00EB6C  5003               	movf	check_food@foodInput,w,c
  4773  00EB6E  26D9               	addwf	fsr2l,f,c
  4774  00EB70  5004               	movf	check_food@foodInput+1,w,c
  4775  00EB72  22DA               	addwfc	fsr2h,f,c
  4776  00EB74  0E02               	movlw	2
  4777  00EB76  18DE               	xorwf	postinc2,w,c
  4778  00EB78  10DE               	iorwf	postinc2,w,c
  4779  00EB7A  A4D8               	btfss	status,2,c
  4780  00EB7C  D00A               	goto	l198
  4781  00EB7E  EE20 F004          	lfsr	2,4
  4782  00EB82  5003               	movf	check_food@foodInput,w,c
  4783  00EB84  26D9               	addwf	fsr2l,f,c
  4784  00EB86  5004               	movf	check_food@foodInput+1,w,c
  4785  00EB88  22DA               	addwfc	fsr2h,f,c
  4786  00EB8A  04DE               	decf	postinc2,w,c
  4787  00EB8C  10DE               	iorwf	postinc2,w,c
  4788  00EB8E  B4D8               	btfsc	status,2,c
  4789  00EB90  D01D               	goto	u3420
  4790  00EB92                     l198:
  4791                           
  4792                           ;standbyMode.c: 223: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  4793  00EB92  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4794  00EB96  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4795  00EB9A  04DE               	decf	postinc2,w,c
  4796  00EB9C  10DE               	iorwf	postinc2,w,c
  4797  00EB9E  A4D8               	btfss	status,2,c
  4798  00EBA0  D07C               	goto	l136
  4799  00EBA2  EE20 F002          	lfsr	2,2
  4800  00EBA6  5003               	movf	check_food@foodInput,w,c
  4801  00EBA8  26D9               	addwf	fsr2l,f,c
  4802  00EBAA  5004               	movf	check_food@foodInput+1,w,c
  4803  00EBAC  22DA               	addwfc	fsr2h,f,c
  4804  00EBAE  04DE               	decf	postinc2,w,c
  4805  00EBB0  10DE               	iorwf	postinc2,w,c
  4806  00EBB2  A4D8               	btfss	status,2,c
  4807  00EBB4  D072               	goto	l136
  4808  00EBB6  EE20 F004          	lfsr	2,4
  4809  00EBBA  5003               	movf	check_food@foodInput,w,c
  4810  00EBBC  26D9               	addwf	fsr2l,f,c
  4811  00EBBE  5004               	movf	check_food@foodInput+1,w,c
  4812  00EBC0  22DA               	addwfc	fsr2h,f,c
  4813  00EBC2  0E02               	movlw	2
  4814  00EBC4  18DE               	xorwf	postinc2,w,c
  4815  00EBC6                     L19:
  4816  00EBC6  10DE               	iorwf	postinc2,w,c
  4817  00EBC8  A4D8               	btfss	status,2,c
  4818  00EBCA  D067               	goto	l136
  4819  00EBCC                     u3420:
  4820                           
  4821                           ;standbyMode.c: 224: returnValue = 1;
  4822  00EBCC  0E00               	movlw	0
  4823  00EBCE  6E08               	movwf	check_food@returnValue+1,c
  4824  00EBD0  0E01               	movlw	1
  4825  00EBD2  6E07               	movwf	check_food@returnValue,c
  4826                           
  4827                           ;standbyMode.c: 225: }
  4828                           ;standbyMode.c: 226: break;
  4829  00EBD4  D062               	goto	l136
  4830  00EBD6                     
  4831                           ;standbyMode.c: 258: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4832                           
  4833                           ;standbyMode.c: 257: case 43:
  4834                           
  4835                           ;standbyMode.c: 253: }
  4836                           ;standbyMode.c: 254: break;
  4837                           
  4838                           ;standbyMode.c: 252: returnValue = 1;
  4839                           
  4840                           ;standbyMode.c: 251: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4841                           
  4842                           ;standbyMode.c: 250: case 39:
  4843                           
  4844                           ;standbyMode.c: 246: }
  4845                           ;standbyMode.c: 247: break;
  4846                           
  4847                           ;standbyMode.c: 245: returnValue = 1;
  4848                           
  4849                           ;standbyMode.c: 244: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4850                           
  4851                           ;standbyMode.c: 243: case 34:
  4852                           
  4853                           ;standbyMode.c: 239: }
  4854                           ;standbyMode.c: 240: break;
  4855                           
  4856                           ;standbyMode.c: 238: returnValue = 1;
  4857                           
  4858                           ;standbyMode.c: 237: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4859                           
  4860                           ;standbyMode.c: 236: case 29:
  4861                           
  4862                           ;standbyMode.c: 232: }
  4863                           ;standbyMode.c: 233: break;
  4864                           
  4865                           ;standbyMode.c: 231: returnValue = 1;
  4866                           
  4867                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
  4868  00EBD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  4869  00EBDA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  4870  00EBDE  04DE               	decf	postinc2,w,c
  4871  00EBE0  10DE               	iorwf	postinc2,w,c
  4872  00EBE2  A4D8               	btfss	status,2,c
  4873  00EBE4  D05A               	goto	l136
  4874  00EBE6  EE20 F002          	lfsr	2,2
  4875  00EBEA  5003               	movf	check_food@foodInput,w,c
  4876  00EBEC  26D9               	addwf	fsr2l,f,c
  4877  00EBEE  5004               	movf	check_food@foodInput+1,w,c
  4878  00EBF0  22DA               	addwfc	fsr2h,f,c
  4879  00EBF2  04DE               	decf	postinc2,w,c
  4880  00EBF4  10DE               	iorwf	postinc2,w,c
  4881  00EBF6  A4D8               	btfss	status,2,c
  4882  00EBF8  D050               	goto	l136
  4883  00EBFA  EE20 F004          	lfsr	2,4
  4884  00EBFE  5003               	movf	check_food@foodInput,w,c
  4885  00EC00  26D9               	addwf	fsr2l,f,c
  4886  00EC02  5004               	movf	check_food@foodInput+1,w,c
  4887  00EC04  22DA               	addwfc	fsr2h,f,c
  4888  00EC06  04DE               	decf	postinc2,w,c
  4889  00EC08  10DE               	iorwf	postinc2,w,c
  4890  00EC0A  A4D8               	btfss	status,2,c
  4891  00EC0C  D046               	goto	l136
  4892  00EC0E  EE20 F006          	lfsr	2,6
  4893  00EC12  5003               	movf	check_food@foodInput,w,c
  4894  00EC14  26D9               	addwf	fsr2l,f,c
  4895  00EC16  5004               	movf	check_food@foodInput+1,w,c
  4896  00EC18  22DA               	addwfc	fsr2h,f,c
  4897  00EC1A  D705               	goto	L46
  4898  00EC1C                     l131:
  4899  00EC1C  C001  F005         	movff	check_food@sum,??_check_food
  4900  00EC20  C002  F006         	movff	check_food@sum+1,??_check_food+1
  4901                           
  4902                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4903                           ; Switch size 1, requested type "space"
  4904                           ; Number of cases is 1, Range of values is 0 to 0
  4905                           ; switch strategies available:
  4906                           ; Name         Instructions Cycles
  4907                           ; simple_byte            4     3 (average)
  4908                           ;	Chosen strategy is simple_byte
  4909  00EC24  5006               	movf	??_check_food+1,w,c
  4910  00EC26  0A00               	xorlw	0	; case 0
  4911  00EC28  A4D8               	btfss	status,2,c
  4912  00EC2A  D037               	goto	l136
  4913                           
  4914                           ; Switch size 1, requested type "space"
  4915                           ; Number of cases is 18, Range of values is 3 to 43
  4916                           ; switch strategies available:
  4917                           ; Name         Instructions Cycles
  4918                           ; simple_byte           55    28 (average)
  4919                           ;	Chosen strategy is simple_byte
  4920  00EC2C  5005               	movf	??_check_food,w,c
  4921  00EC2E  0A03               	xorlw	3	; case 3
  4922  00EC30  B4D8               	btfsc	status,2,c
  4923  00EC32  D728               	goto	L45
  4924  00EC34  0A04               	xorlw	4	; case 7
  4925  00EC36  B4D8               	btfsc	status,2,c
  4926  00EC38  D725               	goto	L45
  4927  00EC3A  0A0D               	xorlw	13	; case 10
  4928  00EC3C  B4D8               	btfsc	status,2,c
  4929  00EC3E  D6BD               	goto	l145
  4930  00EC40  0A06               	xorlw	6	; case 12
  4931  00EC42  B4D8               	btfsc	status,2,c
  4932  00EC44  D6A3               	goto	l141
  4933  00EC46  0A01               	xorlw	1	; case 13
  4934  00EC48  B4D8               	btfsc	status,2,c
  4935  00EC4A  D725               	goto	l188
  4936  00EC4C  0A02               	xorlw	2	; case 15
  4937  00EC4E  B4D8               	btfsc	status,2,c
  4938  00EC50  D6DB               	goto	l147
  4939  00EC52  0A1E               	xorlw	30	; case 17
  4940  00EC54  B4D8               	btfsc	status,2,c
  4941  00EC56  D702               	goto	l167
  4942  00EC58  0A03               	xorlw	3	; case 18
  4943  00EC5A  B4D8               	btfsc	status,2,c
  4944  00EC5C  D71C               	goto	l188
  4945  00EC5E  0A01               	xorlw	1	; case 19
  4946  00EC60  B4D8               	btfsc	status,2,c
  4947  00EC62  D6E3               	goto	l152
  4948  00EC64  0A05               	xorlw	5	; case 22
  4949  00EC66  B4D8               	btfsc	status,2,c
  4950  00EC68  D73E               	goto	l193
  4951  00EC6A  0A0F               	xorlw	15	; case 25
  4952  00EC6C  B4D8               	btfsc	status,2,c
  4953  00EC6E  D7B3               	goto	l201
  4954  00EC70  0A03               	xorlw	3	; case 26
  4955  00EC72  B4D8               	btfsc	status,2,c
  4956  00EC74  D710               	goto	l188
  4957  00EC76  0A01               	xorlw	1	; case 27
  4958  00EC78  B4D8               	btfsc	status,2,c
  4959  00EC7A  D735               	goto	l193
  4960  00EC7C  0A06               	xorlw	6	; case 29
  4961  00EC7E  B4D8               	btfsc	status,2,c
  4962  00EC80  D7AA               	goto	l201
  4963  00EC82  0A02               	xorlw	2	; case 31
  4964  00EC84  B4D8               	btfsc	status,2,c
  4965  00EC86  D72F               	goto	l193
  4966  00EC88  0A3D               	xorlw	61	; case 34
  4967  00EC8A  B4D8               	btfsc	status,2,c
  4968  00EC8C  D7A4               	goto	l201
  4969  00EC8E  0A05               	xorlw	5	; case 39
  4970  00EC90  B4D8               	btfsc	status,2,c
  4971  00EC92  D7A1               	goto	l201
  4972  00EC94  0A0C               	xorlw	12	; case 43
  4973  00EC96  B4D8               	btfsc	status,2,c
  4974  00EC98  D79E               	goto	l201
  4975  00EC9A                     l136:
  4976                           
  4977                           ;standbyMode.c: 267: return returnValue;
  4978  00EC9A  C007  F001         	movff	check_food@returnValue,?_check_food
  4979  00EC9E  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
  4980  00ECA2  0012               	return		;funcret
  4981  00ECA4                     __end_of_check_food:
  4982                           	opt stack 0
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           postinc0	equ	0xFEE
  4990                           wreg	equ	0xFE8
  4991                           plusw1	equ	0xFE3
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           plusw2	equ	0xFDB
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _diet_press *****************
  5000 ;; Defined at:
  5001 ;;		line 521 in file "standbyMode.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  drawer          2   24[COMRAM] unsigned int 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  keypress        1   36[COMRAM] unsigned char 
  5006 ;;  dietTable       8   37[COMRAM] unsigned int [4]
  5007 ;;  sum             2   34[COMRAM] unsigned int 
  5008 ;;  count           2   32[COMRAM] unsigned int 
  5009 ;;  i               2   30[COMRAM] unsigned int 
  5010 ;;  previous        2   28[COMRAM] unsigned int 
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  2   24[COMRAM] unsigned int 
  5013 ;; Registers used:
  5014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5024 ;;Total ram usage:       21 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    3
  5027 ;; This function calls:
  5028 ;;		_lcdInst
  5029 ;;		_printf
  5030 ;;		_putch
  5031 ;; This function is called by:
  5032 ;;		_standbyMode
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           	psect	text8
  5037  00EFD4                     __ptext8:
  5038                           	opt stack 0
  5039  00EFD4                     _diet_press:
  5040                           	opt stack 26
  5041                           
  5042                           ;incstack = 0
  5043                           ;standbyMode.c: 524: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0))
      +                          );;
  5044  00EFD4  0E01               	movlw	1
  5045  00EFD6  ECB1  F070         	call	_lcdInst
  5046  00EFDA  0EC3               	movlw	195
  5047  00EFDC  6E1B               	movwf	??_diet_press& (0+255),c
  5048  00EFDE  0ECD               	movlw	205
  5049  00EFE0                     u5937:
  5050  00EFE0  2EE8               	decfsz	wreg,f,c
  5051  00EFE2  D7FE               	bra	u5937
  5052  00EFE4  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5053  00EFE6  D7FC               	bra	u5937
  5054  00EFE8  F000               	nop	
  5055                           
  5056                           ;standbyMode.c: 525: printf("Drawer %i diet:", drawer);
  5057  00EFEA  0E40               	movlw	low STR_23
  5058  00EFEC  6E0D               	movwf	printf@f,c
  5059  00EFEE  0EFE               	movlw	high STR_23
  5060  00EFF0  6E0E               	movwf	printf@f+1,c
  5061  00EFF2  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5062  00EFF6  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5063  00EFFA  EC6B  F072         	call	_printf	;wreg free
  5064                           
  5065                           ;standbyMode.c: 526: lcdInst(0xC0);;
  5066  00EFFE  0EC0               	movlw	192
  5067  00F000  ECB1  F070         	call	_lcdInst
  5068                           
  5069                           ;standbyMode.c: 528: unsigned int count = 0;
  5070  00F004  0E00               	movlw	0
  5071  00F006  6E22               	movwf	diet_press@count+1,c
  5072  00F008  0E00               	movlw	0
  5073  00F00A  6E21               	movwf	diet_press@count,c
  5074                           
  5075                           ;standbyMode.c: 529: unsigned int previous = 0;
  5076  00F00C  0E00               	movlw	0
  5077  00F00E  6E1E               	movwf	diet_press@previous+1,c
  5078  00F010  0E00               	movlw	0
  5079  00F012  6E1D               	movwf	diet_press@previous,c
  5080                           
  5081                           ;standbyMode.c: 530: unsigned int sum = 0;
  5082  00F014  0E00               	movlw	0
  5083  00F016  6E24               	movwf	diet_press@sum+1,c
  5084  00F018  0E00               	movlw	0
  5085  00F01A  6E23               	movwf	diet_press@sum,c
  5086                           
  5087                           ;standbyMode.c: 531: unsigned int i = 0;
  5088  00F01C  0E00               	movlw	0
  5089  00F01E  6E20               	movwf	diet_press@i+1,c
  5090  00F020  0E00               	movlw	0
  5091  00F022  6E1F               	movwf	diet_press@i,c
  5092                           
  5093                           ;standbyMode.c: 532: unsigned int dietTable[4] = {0, 0, 0, 0};
  5094  00F024  EE20  F056         	lfsr	2,diet_press@F3054
  5095  00F028  EE10  F026         	lfsr	1,diet_press@dietTable
  5096  00F02C  0E07               	movlw	7
  5097  00F02E                     u3951:
  5098  00F02E  CFDB FFE3          	movff	plusw2,plusw1
  5099  00F032  06E8               	decf	wreg,f,c
  5100  00F034  E2FC               	bc	u3951
  5101  00F036                     l303:
  5102  00F036  A281               	btfss	3969,1,c	;volatile
  5103  00F038  D7FE               	goto	l302
  5104                           
  5105                           ;standbyMode.c: 536: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5106  00F03A  3881               	swapf	3969,w,c	;volatile
  5107  00F03C  0B0F               	andlw	15
  5108  00F03E  0B0F               	andlw	15
  5109  00F040  6E25               	movwf	diet_press@keypress,c
  5110  00F042  B281               	btfsc	3969,1,c	;volatile
  5111  00F044  D7FE               	goto	l307
  5112                           
  5113                           ;standbyMode.c: 539: if(keypress == 14){
  5114  00F046  0E0E               	movlw	14
  5115  00F048  1825               	xorwf	diet_press@keypress,w,c
  5116  00F04A  B4D8               	btfsc	status,2,c
  5117  00F04C  D077               	goto	l310
  5118                           
  5119                           ;standbyMode.c: 542: else if (keypress == 12){
  5120                           
  5121                           ;standbyMode.c: 541: }
  5122                           
  5123                           ;standbyMode.c: 540: break;
  5124  00F04E  0E0C               	movlw	12
  5125  00F050  1825               	xorwf	diet_press@keypress,w,c
  5126  00F052  A4D8               	btfss	status,2,c
  5127  00F054  D02D               	goto	l312
  5128                           
  5129                           ;standbyMode.c: 543: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5130  00F056  0E01               	movlw	1
  5131  00F058  ECB1  F070         	call	_lcdInst
  5132  00F05C  0EC3               	movlw	195
  5133  00F05E  6E1B               	movwf	??_diet_press& (0+255),c
  5134  00F060  0ECD               	movlw	205
  5135  00F062                     u5947:
  5136  00F062  2EE8               	decfsz	wreg,f,c
  5137  00F064  D7FE               	bra	u5947
  5138  00F066  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5139  00F068  D7FC               	bra	u5947
  5140  00F06A  F000               	nop	
  5141                           
  5142                           ;standbyMode.c: 544: printf("Drawer %i diet:", drawer);
  5143  00F06C  0E40               	movlw	low STR_23
  5144  00F06E  6E0D               	movwf	printf@f,c
  5145  00F070  0EFE               	movlw	high STR_23
  5146  00F072  6E0E               	movwf	printf@f+1,c
  5147  00F074  C019  F00F         	movff	diet_press@drawer,?_printf+2
  5148  00F078  C01A  F010         	movff	diet_press@drawer+1,?_printf+3
  5149  00F07C  EC6B  F072         	call	_printf	;wreg free
  5150                           
  5151                           ;standbyMode.c: 545: lcdInst(0xC0);;
  5152  00F080  0EC0               	movlw	192
  5153  00F082  ECB1  F070         	call	_lcdInst
  5154                           
  5155                           ;standbyMode.c: 546: count = 0;
  5156  00F086  0E00               	movlw	0
  5157  00F088  6E22               	movwf	diet_press@count+1,c
  5158  00F08A  0E00               	movlw	0
  5159  00F08C  6E21               	movwf	diet_press@count,c
  5160                           
  5161                           ;standbyMode.c: 547: dietTable[0] = 0;
  5162  00F08E  0E00               	movlw	0
  5163  00F090  6E27               	movwf	diet_press@dietTable+1,c
  5164  00F092  0E00               	movlw	0
  5165  00F094  6E26               	movwf	diet_press@dietTable,c
  5166                           
  5167                           ;standbyMode.c: 548: dietTable[1] = 0;
  5168  00F096  0E00               	movlw	0
  5169  00F098  6E29               	movwf	diet_press@dietTable+3,c
  5170  00F09A  0E00               	movlw	0
  5171  00F09C  6E28               	movwf	diet_press@dietTable+2,c
  5172                           
  5173                           ;standbyMode.c: 549: dietTable[2] = 0;
  5174  00F09E  0E00               	movlw	0
  5175  00F0A0  6E2B               	movwf	diet_press@dietTable+5,c
  5176  00F0A2  0E00               	movlw	0
  5177  00F0A4  6E2A               	movwf	diet_press@dietTable+4,c
  5178                           
  5179                           ;standbyMode.c: 550: dietTable[3] = 0;
  5180  00F0A6  0E00               	movlw	0
  5181  00F0A8  6E2D               	movwf	diet_press@dietTable+7,c
  5182  00F0AA  0E00               	movlw	0
  5183  00F0AC  6E2C               	movwf	diet_press@dietTable+6,c
  5184                           
  5185                           ;standbyMode.c: 551: }
  5186  00F0AE  D7C3               	goto	l302
  5187  00F0B0                     l312:
  5188                           
  5189                           ;standbyMode.c: 552: else if (count <= 3){
  5190  00F0B0  5022               	movf	diet_press@count+1,w,c
  5191  00F0B2  E1C1               	bnz	l303
  5192  00F0B4  0E04               	movlw	4
  5193  00F0B6  5C21               	subwf	diet_press@count,w,c
  5194  00F0B8  B0D8               	btfsc	status,0,c
  5195  00F0BA  D7BD               	goto	l302
  5196                           
  5197                           ;standbyMode.c: 553: if (keypress == 3 || keypress == 7){
  5198  00F0BC  0E03               	movlw	3
  5199  00F0BE  1825               	xorwf	diet_press@keypress,w,c
  5200  00F0C0  B4D8               	btfsc	status,2,c
  5201  00F0C2  D004               	goto	u4020
  5202  00F0C4  0E07               	movlw	7
  5203  00F0C6  1825               	xorwf	diet_press@keypress,w,c
  5204  00F0C8  A4D8               	btfss	status,2,c
  5205  00F0CA  D013               	goto	l315
  5206  00F0CC                     u4020:
  5207                           
  5208                           ;standbyMode.c: 554: putch(input[keypress]);
  5209  00F0CC  5025               	movf	diet_press@keypress,w,c
  5210  00F0CE  0D01               	mullw	1
  5211  00F0D0  0E26               	movlw	low _input
  5212  00F0D2  24F3               	addwf	prodl,w,c
  5213  00F0D4  6EF6               	movwf	tblptrl,c
  5214  00F0D6  0EFD               	movlw	high _input
  5215  00F0D8  20F4               	addwfc	prodh,w,c
  5216  00F0DA  6EF7               	movwf	tblptrh,c
  5217  00F0DC                     	if	0	;There are less than 3 active tblptr bytes
  5218  00F0DC                     	endif
  5219  00F0DC  0008               	tblrd		*
  5220  00F0DE  50F5               	movf	tablat,w,c
  5221  00F0E0  ECBB  F070         	call	_putch
  5222                           
  5223                           ;standbyMode.c: 555: dietTable[count] = keypress;
  5224  00F0E4  5025               	movf	diet_press@keypress,w,c
  5225  00F0E6  6E1B               	movwf	??_diet_press& (0+255),c
  5226  00F0E8  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5227  00F0EA  D01A               	goto	L43
  5228  00F0EC                     l3212:
  5229                           
  5230                           ;standbyMode.c: 556: count += 1;
  5231  00F0EC  4A21               	infsnz	diet_press@count,f,c
  5232  00F0EE  2A22               	incf	diet_press@count+1,f,c
  5233                           
  5234                           ;standbyMode.c: 557: }
  5235  00F0F0  D7A2               	goto	l302
  5236  00F0F2                     l315:
  5237                           
  5238                           ;standbyMode.c: 558: else if (keypress == 11){
  5239  00F0F2  0E0B               	movlw	11
  5240  00F0F4  1825               	xorwf	diet_press@keypress,w,c
  5241  00F0F6  A4D8               	btfss	status,2,c
  5242  00F0F8  D79E               	goto	l302
  5243                           
  5244                           ;standbyMode.c: 559: putch(input[keypress]);
  5245  00F0FA  5025               	movf	diet_press@keypress,w,c
  5246  00F0FC  0D01               	mullw	1
  5247  00F0FE  0E26               	movlw	low _input
  5248  00F100  24F3               	addwf	prodl,w,c
  5249  00F102  6EF6               	movwf	tblptrl,c
  5250  00F104  0EFD               	movlw	high _input
  5251  00F106  20F4               	addwfc	prodh,w,c
  5252  00F108  6EF7               	movwf	tblptrh,c
  5253  00F10A                     	if	0	;There are less than 3 active tblptr bytes
  5254  00F10A                     	endif
  5255  00F10A  0008               	tblrd		*
  5256  00F10C  50F5               	movf	tablat,w,c
  5257  00F10E  ECBB  F070         	call	_putch
  5258                           
  5259                           ;standbyMode.c: 560: dietTable[count] = keypress + 1;
  5260  00F112  5025               	movf	diet_press@keypress,w,c
  5261  00F114  6E1B               	movwf	??_diet_press& (0+255),c
  5262  00F116  6A1C               	clrf	(??_diet_press+1)& (0+255),c
  5263  00F118  0E01               	movlw	1
  5264  00F11A  261B               	addwf	??_diet_press,f,c
  5265  00F11C  0E00               	movlw	0
  5266  00F11E  221C               	addwfc	??_diet_press+1,f,c
  5267  00F120                     L43:
  5268  00F120  90D8               	bcf	status,0,c
  5269  00F122  3421               	rlcf	diet_press@count,w,c
  5270  00F124  6ED9               	movwf	fsr2l,c
  5271  00F126  3422               	rlcf	diet_press@count+1,w,c
  5272  00F128  6EDA               	movwf	fsr2h,c
  5273  00F12A  0E26               	movlw	low diet_press@dietTable
  5274  00F12C  26D9               	addwf	fsr2l,f,c
  5275  00F12E  0E00               	movlw	high diet_press@dietTable
  5276  00F130  22DA               	addwfc	fsr2h,f,c
  5277  00F132  C01B  FFDE         	movff	??_diet_press,postinc2
  5278  00F136  C01C  FFDD         	movff	??_diet_press+1,postdec2
  5279  00F13A  D7D8               	goto	l3212
  5280  00F13C                     l310:
  5281                           
  5282                           ;standbyMode.c: 562: }
  5283                           ;standbyMode.c: 563: }
  5284                           ;standbyMode.c: 564: }
  5285                           ;standbyMode.c: 567: if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] == 0 &&
      +                           dietTable[3] == 0){
  5286  00F13C  0E0C               	movlw	12
  5287  00F13E  1826               	xorwf	diet_press@dietTable,w,c
  5288  00F140  1027               	iorwf	diet_press@dietTable+1,w,c
  5289  00F142  A4D8               	btfss	status,2,c
  5290  00F144  D010               	goto	l321
  5291  00F146  5028               	movf	diet_press@dietTable+2,w,c
  5292  00F148  1029               	iorwf	diet_press@dietTable+3,w,c
  5293  00F14A  A4D8               	btfss	status,2,c
  5294  00F14C  D00C               	goto	l321
  5295  00F14E  502A               	movf	diet_press@dietTable+4,w,c
  5296  00F150  102B               	iorwf	diet_press@dietTable+5,w,c
  5297  00F152  A4D8               	btfss	status,2,c
  5298  00F154  D008               	goto	l321
  5299  00F156  502C               	movf	diet_press@dietTable+6,w,c
  5300  00F158  102D               	iorwf	diet_press@dietTable+7,w,c
  5301  00F15A  A4D8               	btfss	status,2,c
  5302  00F15C  D004               	goto	l321
  5303                           
  5304                           ;standbyMode.c: 568: sum = 12;
  5305  00F15E  0E00               	movlw	0
  5306  00F160  6E24               	movwf	diet_press@sum+1,c
  5307  00F162  0E0C               	movlw	12
  5308  00F164  D184               	goto	L42
  5309  00F166                     l321:
  5310                           
  5311                           ;standbyMode.c: 572: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5312  00F166  0E03               	movlw	3
  5313  00F168  1826               	xorwf	diet_press@dietTable,w,c
  5314  00F16A  1027               	iorwf	diet_press@dietTable+1,w,c
  5315  00F16C  A4D8               	btfss	status,2,c
  5316  00F16E  D010               	goto	l323
  5317  00F170  5028               	movf	diet_press@dietTable+2,w,c
  5318  00F172  1029               	iorwf	diet_press@dietTable+3,w,c
  5319  00F174  A4D8               	btfss	status,2,c
  5320  00F176  D00C               	goto	l323
  5321  00F178  502A               	movf	diet_press@dietTable+4,w,c
  5322  00F17A  102B               	iorwf	diet_press@dietTable+5,w,c
  5323  00F17C  A4D8               	btfss	status,2,c
  5324  00F17E  D008               	goto	l323
  5325  00F180  502C               	movf	diet_press@dietTable+6,w,c
  5326  00F182  102D               	iorwf	diet_press@dietTable+7,w,c
  5327  00F184  A4D8               	btfss	status,2,c
  5328  00F186  D004               	goto	l323
  5329                           
  5330                           ;standbyMode.c: 573: sum = 3;
  5331  00F188  0E00               	movlw	0
  5332  00F18A  6E24               	movwf	diet_press@sum+1,c
  5333  00F18C  0E03               	movlw	3
  5334  00F18E  D16F               	goto	L42
  5335  00F190                     l323:
  5336                           
  5337                           ;standbyMode.c: 577: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5338  00F190  0E07               	movlw	7
  5339  00F192  1826               	xorwf	diet_press@dietTable,w,c
  5340  00F194  1027               	iorwf	diet_press@dietTable+1,w,c
  5341  00F196  A4D8               	btfss	status,2,c
  5342  00F198  D010               	goto	l325
  5343  00F19A  5028               	movf	diet_press@dietTable+2,w,c
  5344  00F19C  1029               	iorwf	diet_press@dietTable+3,w,c
  5345  00F19E  A4D8               	btfss	status,2,c
  5346  00F1A0  D00C               	goto	l325
  5347  00F1A2  502A               	movf	diet_press@dietTable+4,w,c
  5348  00F1A4  102B               	iorwf	diet_press@dietTable+5,w,c
  5349  00F1A6  A4D8               	btfss	status,2,c
  5350  00F1A8  D008               	goto	l325
  5351  00F1AA  502C               	movf	diet_press@dietTable+6,w,c
  5352  00F1AC  102D               	iorwf	diet_press@dietTable+7,w,c
  5353  00F1AE  A4D8               	btfss	status,2,c
  5354  00F1B0  D004               	goto	l325
  5355                           
  5356                           ;standbyMode.c: 578: sum = 7;
  5357  00F1B2  0E00               	movlw	0
  5358  00F1B4  6E24               	movwf	diet_press@sum+1,c
  5359  00F1B6  0E07               	movlw	7
  5360  00F1B8  D15A               	goto	L42
  5361  00F1BA                     l325:
  5362                           
  5363                           ;standbyMode.c: 582: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          0 && dietTable[3] == 0){
  5364  00F1BA  0E03               	movlw	3
  5365  00F1BC  1826               	xorwf	diet_press@dietTable,w,c
  5366  00F1BE  1027               	iorwf	diet_press@dietTable+1,w,c
  5367  00F1C0  A4D8               	btfss	status,2,c
  5368  00F1C2  D011               	goto	l327
  5369  00F1C4  0E07               	movlw	7
  5370  00F1C6  1828               	xorwf	diet_press@dietTable+2,w,c
  5371  00F1C8  1029               	iorwf	diet_press@dietTable+3,w,c
  5372  00F1CA  A4D8               	btfss	status,2,c
  5373  00F1CC  D00C               	goto	l327
  5374  00F1CE  502A               	movf	diet_press@dietTable+4,w,c
  5375  00F1D0  102B               	iorwf	diet_press@dietTable+5,w,c
  5376  00F1D2  A4D8               	btfss	status,2,c
  5377  00F1D4  D008               	goto	l327
  5378  00F1D6  502C               	movf	diet_press@dietTable+6,w,c
  5379  00F1D8  102D               	iorwf	diet_press@dietTable+7,w,c
  5380  00F1DA  A4D8               	btfss	status,2,c
  5381  00F1DC  D004               	goto	l327
  5382                           
  5383                           ;standbyMode.c: 583: sum = 10;
  5384  00F1DE  0E00               	movlw	0
  5385  00F1E0  6E24               	movwf	diet_press@sum+1,c
  5386  00F1E2  0E0A               	movlw	10
  5387  00F1E4  D144               	goto	L42
  5388  00F1E6                     l327:
  5389                           
  5390                           ;standbyMode.c: 587: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5391  00F1E6  0E03               	movlw	3
  5392  00F1E8  1826               	xorwf	diet_press@dietTable,w,c
  5393  00F1EA  1027               	iorwf	diet_press@dietTable+1,w,c
  5394  00F1EC  A4D8               	btfss	status,2,c
  5395  00F1EE  D011               	goto	l329
  5396  00F1F0  0E0C               	movlw	12
  5397  00F1F2  1828               	xorwf	diet_press@dietTable+2,w,c
  5398  00F1F4  1029               	iorwf	diet_press@dietTable+3,w,c
  5399  00F1F6  A4D8               	btfss	status,2,c
  5400  00F1F8  D00C               	goto	l329
  5401  00F1FA  502A               	movf	diet_press@dietTable+4,w,c
  5402  00F1FC  102B               	iorwf	diet_press@dietTable+5,w,c
  5403  00F1FE  A4D8               	btfss	status,2,c
  5404  00F200  D008               	goto	l329
  5405  00F202  502C               	movf	diet_press@dietTable+6,w,c
  5406  00F204  102D               	iorwf	diet_press@dietTable+7,w,c
  5407  00F206  A4D8               	btfss	status,2,c
  5408  00F208  D004               	goto	l329
  5409                           
  5410                           ;standbyMode.c: 588: sum = 15;
  5411  00F20A  0E00               	movlw	0
  5412  00F20C  6E24               	movwf	diet_press@sum+1,c
  5413  00F20E  0E0F               	movlw	15
  5414  00F210  D12E               	goto	L42
  5415  00F212                     l329:
  5416                           
  5417                           ;standbyMode.c: 592: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
  5418  00F212  0E07               	movlw	7
  5419  00F214  1826               	xorwf	diet_press@dietTable,w,c
  5420  00F216  1027               	iorwf	diet_press@dietTable+1,w,c
  5421  00F218  A4D8               	btfss	status,2,c
  5422  00F21A  D011               	goto	l331
  5423  00F21C  0E0C               	movlw	12
  5424  00F21E  1828               	xorwf	diet_press@dietTable+2,w,c
  5425  00F220  1029               	iorwf	diet_press@dietTable+3,w,c
  5426  00F222  A4D8               	btfss	status,2,c
  5427  00F224  D00C               	goto	l331
  5428  00F226  502A               	movf	diet_press@dietTable+4,w,c
  5429  00F228  102B               	iorwf	diet_press@dietTable+5,w,c
  5430  00F22A  A4D8               	btfss	status,2,c
  5431  00F22C  D008               	goto	l331
  5432  00F22E  502C               	movf	diet_press@dietTable+6,w,c
  5433  00F230  102D               	iorwf	diet_press@dietTable+7,w,c
  5434  00F232  A4D8               	btfss	status,2,c
  5435  00F234  D004               	goto	l331
  5436                           
  5437                           ;standbyMode.c: 593: sum = 19;
  5438  00F236  0E00               	movlw	0
  5439  00F238  6E24               	movwf	diet_press@sum+1,c
  5440  00F23A  0E13               	movlw	19
  5441  00F23C  D118               	goto	L42
  5442  00F23E                     l331:
  5443                           
  5444                           ;standbyMode.c: 597: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5445  00F23E  0E03               	movlw	3
  5446  00F240  1826               	xorwf	diet_press@dietTable,w,c
  5447  00F242  1027               	iorwf	diet_press@dietTable+1,w,c
  5448  00F244  A4D8               	btfss	status,2,c
  5449  00F246  D012               	goto	l333
  5450  00F248  0E03               	movlw	3
  5451  00F24A  1828               	xorwf	diet_press@dietTable+2,w,c
  5452  00F24C  1029               	iorwf	diet_press@dietTable+3,w,c
  5453  00F24E  A4D8               	btfss	status,2,c
  5454  00F250  D00D               	goto	l333
  5455  00F252  0E07               	movlw	7
  5456  00F254  182A               	xorwf	diet_press@dietTable+4,w,c
  5457  00F256  102B               	iorwf	diet_press@dietTable+5,w,c
  5458  00F258  A4D8               	btfss	status,2,c
  5459  00F25A  D008               	goto	l333
  5460  00F25C  502C               	movf	diet_press@dietTable+6,w,c
  5461  00F25E  102D               	iorwf	diet_press@dietTable+7,w,c
  5462  00F260  A4D8               	btfss	status,2,c
  5463  00F262  D004               	goto	l333
  5464                           
  5465                           ;standbyMode.c: 598: sum = 13;
  5466  00F264  0E00               	movlw	0
  5467  00F266  6E24               	movwf	diet_press@sum+1,c
  5468  00F268  0E0D               	movlw	13
  5469  00F26A  D101               	goto	L42
  5470  00F26C                     l333:
  5471                           
  5472                           ;standbyMode.c: 602: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5473  00F26C  0E03               	movlw	3
  5474  00F26E  1826               	xorwf	diet_press@dietTable,w,c
  5475  00F270  1027               	iorwf	diet_press@dietTable+1,w,c
  5476  00F272  A4D8               	btfss	status,2,c
  5477  00F274  D012               	goto	l335
  5478  00F276  0E03               	movlw	3
  5479  00F278  1828               	xorwf	diet_press@dietTable+2,w,c
  5480  00F27A  1029               	iorwf	diet_press@dietTable+3,w,c
  5481  00F27C  A4D8               	btfss	status,2,c
  5482  00F27E  D00D               	goto	l335
  5483  00F280  0E0C               	movlw	12
  5484  00F282  182A               	xorwf	diet_press@dietTable+4,w,c
  5485  00F284  102B               	iorwf	diet_press@dietTable+5,w,c
  5486  00F286  A4D8               	btfss	status,2,c
  5487  00F288  D008               	goto	l335
  5488  00F28A  502C               	movf	diet_press@dietTable+6,w,c
  5489  00F28C  102D               	iorwf	diet_press@dietTable+7,w,c
  5490  00F28E  A4D8               	btfss	status,2,c
  5491  00F290  D004               	goto	l335
  5492                           
  5493                           ;standbyMode.c: 603: sum = 18;
  5494  00F292  0E00               	movlw	0
  5495  00F294  6E24               	movwf	diet_press@sum+1,c
  5496  00F296  0E12               	movlw	18
  5497  00F298  D0EA               	goto	L42
  5498  00F29A                     l335:
  5499                           
  5500                           ;standbyMode.c: 607: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 0){
  5501  00F29A  0E03               	movlw	3
  5502  00F29C  1826               	xorwf	diet_press@dietTable,w,c
  5503  00F29E  1027               	iorwf	diet_press@dietTable+1,w,c
  5504  00F2A0  A4D8               	btfss	status,2,c
  5505  00F2A2  D012               	goto	l337
  5506  00F2A4  0E07               	movlw	7
  5507  00F2A6  1828               	xorwf	diet_press@dietTable+2,w,c
  5508  00F2A8  1029               	iorwf	diet_press@dietTable+3,w,c
  5509  00F2AA  A4D8               	btfss	status,2,c
  5510  00F2AC  D00D               	goto	l337
  5511  00F2AE  0E07               	movlw	7
  5512  00F2B0  182A               	xorwf	diet_press@dietTable+4,w,c
  5513  00F2B2  102B               	iorwf	diet_press@dietTable+5,w,c
  5514  00F2B4  A4D8               	btfss	status,2,c
  5515  00F2B6  D008               	goto	l337
  5516  00F2B8  502C               	movf	diet_press@dietTable+6,w,c
  5517  00F2BA  102D               	iorwf	diet_press@dietTable+7,w,c
  5518  00F2BC  A4D8               	btfss	status,2,c
  5519  00F2BE  D004               	goto	l337
  5520                           
  5521                           ;standbyMode.c: 608: sum = 17;
  5522  00F2C0  0E00               	movlw	0
  5523  00F2C2  6E24               	movwf	diet_press@sum+1,c
  5524  00F2C4  0E11               	movlw	17
  5525  00F2C6  D0D3               	goto	L42
  5526  00F2C8                     l337:
  5527                           
  5528                           ;standbyMode.c: 612: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  5529  00F2C8  0E03               	movlw	3
  5530  00F2CA  1826               	xorwf	diet_press@dietTable,w,c
  5531  00F2CC  1027               	iorwf	diet_press@dietTable+1,w,c
  5532  00F2CE  A4D8               	btfss	status,2,c
  5533  00F2D0  D012               	goto	l339
  5534  00F2D2  0E0C               	movlw	12
  5535  00F2D4  1828               	xorwf	diet_press@dietTable+2,w,c
  5536  00F2D6  1029               	iorwf	diet_press@dietTable+3,w,c
  5537  00F2D8  A4D8               	btfss	status,2,c
  5538  00F2DA  D00D               	goto	l339
  5539  00F2DC  0E0C               	movlw	12
  5540  00F2DE  182A               	xorwf	diet_press@dietTable+4,w,c
  5541  00F2E0  102B               	iorwf	diet_press@dietTable+5,w,c
  5542  00F2E2  A4D8               	btfss	status,2,c
  5543  00F2E4  D008               	goto	l339
  5544  00F2E6  502C               	movf	diet_press@dietTable+6,w,c
  5545  00F2E8  102D               	iorwf	diet_press@dietTable+7,w,c
  5546  00F2EA  A4D8               	btfss	status,2,c
  5547  00F2EC  D004               	goto	l339
  5548                           
  5549                           ;standbyMode.c: 613: sum = 27;
  5550  00F2EE  0E00               	movlw	0
  5551  00F2F0  6E24               	movwf	diet_press@sum+1,c
  5552  00F2F2  0E1B               	movlw	27
  5553  00F2F4  D0BC               	goto	L42
  5554  00F2F6                     l339:
  5555                           
  5556                           ;standbyMode.c: 617: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5557  00F2F6  0E03               	movlw	3
  5558  00F2F8  1826               	xorwf	diet_press@dietTable,w,c
  5559  00F2FA  1027               	iorwf	diet_press@dietTable+1,w,c
  5560  00F2FC  A4D8               	btfss	status,2,c
  5561  00F2FE  D012               	goto	l341
  5562  00F300  0E07               	movlw	7
  5563  00F302  1828               	xorwf	diet_press@dietTable+2,w,c
  5564  00F304  1029               	iorwf	diet_press@dietTable+3,w,c
  5565  00F306  A4D8               	btfss	status,2,c
  5566  00F308  D00D               	goto	l341
  5567  00F30A  0E0C               	movlw	12
  5568  00F30C  182A               	xorwf	diet_press@dietTable+4,w,c
  5569  00F30E  102B               	iorwf	diet_press@dietTable+5,w,c
  5570  00F310  A4D8               	btfss	status,2,c
  5571  00F312  D008               	goto	l341
  5572  00F314  502C               	movf	diet_press@dietTable+6,w,c
  5573  00F316  102D               	iorwf	diet_press@dietTable+7,w,c
  5574  00F318  A4D8               	btfss	status,2,c
  5575  00F31A  D004               	goto	l341
  5576                           
  5577                           ;standbyMode.c: 618: sum = 22;
  5578  00F31C  0E00               	movlw	0
  5579  00F31E  6E24               	movwf	diet_press@sum+1,c
  5580  00F320  0E16               	movlw	22
  5581  00F322  D0A5               	goto	L42
  5582  00F324                     l341:
  5583                           
  5584                           ;standbyMode.c: 622: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 0){
  5585  00F324  0E07               	movlw	7
  5586  00F326  1826               	xorwf	diet_press@dietTable,w,c
  5587  00F328  1027               	iorwf	diet_press@dietTable+1,w,c
  5588  00F32A  A4D8               	btfss	status,2,c
  5589  00F32C  D012               	goto	l343
  5590  00F32E  0E07               	movlw	7
  5591  00F330  1828               	xorwf	diet_press@dietTable+2,w,c
  5592  00F332  1029               	iorwf	diet_press@dietTable+3,w,c
  5593  00F334  A4D8               	btfss	status,2,c
  5594  00F336  D00D               	goto	l343
  5595  00F338  0E0C               	movlw	12
  5596  00F33A  182A               	xorwf	diet_press@dietTable+4,w,c
  5597  00F33C  102B               	iorwf	diet_press@dietTable+5,w,c
  5598  00F33E  A4D8               	btfss	status,2,c
  5599  00F340  D008               	goto	l343
  5600  00F342  502C               	movf	diet_press@dietTable+6,w,c
  5601  00F344  102D               	iorwf	diet_press@dietTable+7,w,c
  5602  00F346  A4D8               	btfss	status,2,c
  5603  00F348  D004               	goto	l343
  5604                           
  5605                           ;standbyMode.c: 623: sum = 26;
  5606  00F34A  0E00               	movlw	0
  5607  00F34C  6E24               	movwf	diet_press@sum+1,c
  5608  00F34E  0E1A               	movlw	26
  5609  00F350  D08E               	goto	L42
  5610  00F352                     l343:
  5611                           
  5612                           ;standbyMode.c: 627: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
  5613  00F352  0E07               	movlw	7
  5614  00F354  1826               	xorwf	diet_press@dietTable,w,c
  5615  00F356  1027               	iorwf	diet_press@dietTable+1,w,c
  5616  00F358  A4D8               	btfss	status,2,c
  5617  00F35A  D012               	goto	l345
  5618  00F35C  0E0C               	movlw	12
  5619  00F35E  1828               	xorwf	diet_press@dietTable+2,w,c
  5620  00F360  1029               	iorwf	diet_press@dietTable+3,w,c
  5621  00F362  A4D8               	btfss	status,2,c
  5622  00F364  D00D               	goto	l345
  5623  00F366  0E0C               	movlw	12
  5624  00F368  182A               	xorwf	diet_press@dietTable+4,w,c
  5625  00F36A  102B               	iorwf	diet_press@dietTable+5,w,c
  5626  00F36C  A4D8               	btfss	status,2,c
  5627  00F36E  D008               	goto	l345
  5628  00F370  502C               	movf	diet_press@dietTable+6,w,c
  5629  00F372  102D               	iorwf	diet_press@dietTable+7,w,c
  5630  00F374  A4D8               	btfss	status,2,c
  5631  00F376  D004               	goto	l345
  5632                           
  5633                           ;standbyMode.c: 628: sum = 31;
  5634  00F378  0E00               	movlw	0
  5635  00F37A  6E24               	movwf	diet_press@sum+1,c
  5636  00F37C  0E1F               	movlw	31
  5637  00F37E  D077               	goto	L42
  5638  00F380                     l345:
  5639                           
  5640                           ;standbyMode.c: 632: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  5641  00F380  0E03               	movlw	3
  5642  00F382  1826               	xorwf	diet_press@dietTable,w,c
  5643  00F384  1027               	iorwf	diet_press@dietTable+1,w,c
  5644  00F386  A4D8               	btfss	status,2,c
  5645  00F388  D013               	goto	l347
  5646  00F38A  0E03               	movlw	3
  5647  00F38C  1828               	xorwf	diet_press@dietTable+2,w,c
  5648  00F38E  1029               	iorwf	diet_press@dietTable+3,w,c
  5649  00F390  A4D8               	btfss	status,2,c
  5650  00F392  D00E               	goto	l347
  5651  00F394  0E07               	movlw	7
  5652  00F396  182A               	xorwf	diet_press@dietTable+4,w,c
  5653  00F398  102B               	iorwf	diet_press@dietTable+5,w,c
  5654  00F39A  A4D8               	btfss	status,2,c
  5655  00F39C  D009               	goto	l347
  5656  00F39E  0E0C               	movlw	12
  5657  00F3A0  182C               	xorwf	diet_press@dietTable+6,w,c
  5658  00F3A2  102D               	iorwf	diet_press@dietTable+7,w,c
  5659  00F3A4  A4D8               	btfss	status,2,c
  5660  00F3A6  D004               	goto	l347
  5661                           
  5662                           ;standbyMode.c: 633: sum = 25;
  5663  00F3A8  0E00               	movlw	0
  5664  00F3AA  6E24               	movwf	diet_press@sum+1,c
  5665  00F3AC  0E19               	movlw	25
  5666  00F3AE  D05F               	goto	L42
  5667  00F3B0                     l347:
  5668                           
  5669                           ;standbyMode.c: 637: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          7 && dietTable[3] == 12){
  5670  00F3B0  0E03               	movlw	3
  5671  00F3B2  1826               	xorwf	diet_press@dietTable,w,c
  5672  00F3B4  1027               	iorwf	diet_press@dietTable+1,w,c
  5673  00F3B6  A4D8               	btfss	status,2,c
  5674  00F3B8  D013               	goto	l349
  5675  00F3BA  0E07               	movlw	7
  5676  00F3BC  1828               	xorwf	diet_press@dietTable+2,w,c
  5677  00F3BE  1029               	iorwf	diet_press@dietTable+3,w,c
  5678  00F3C0  A4D8               	btfss	status,2,c
  5679  00F3C2  D00E               	goto	l349
  5680  00F3C4  0E07               	movlw	7
  5681  00F3C6  182A               	xorwf	diet_press@dietTable+4,w,c
  5682  00F3C8  102B               	iorwf	diet_press@dietTable+5,w,c
  5683  00F3CA  A4D8               	btfss	status,2,c
  5684  00F3CC  D009               	goto	l349
  5685  00F3CE  0E0C               	movlw	12
  5686  00F3D0  182C               	xorwf	diet_press@dietTable+6,w,c
  5687  00F3D2  102D               	iorwf	diet_press@dietTable+7,w,c
  5688  00F3D4  A4D8               	btfss	status,2,c
  5689  00F3D6  D004               	goto	l349
  5690                           
  5691                           ;standbyMode.c: 638: sum = 29;
  5692  00F3D8  0E00               	movlw	0
  5693  00F3DA  6E24               	movwf	diet_press@sum+1,c
  5694  00F3DC  0E1D               	movlw	29
  5695  00F3DE  D047               	goto	L42
  5696  00F3E0                     l349:
  5697                           
  5698                           ;standbyMode.c: 642: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] == 
      +                          12 && dietTable[3] == 12){
  5699  00F3E0  0E03               	movlw	3
  5700  00F3E2  1826               	xorwf	diet_press@dietTable,w,c
  5701  00F3E4  1027               	iorwf	diet_press@dietTable+1,w,c
  5702  00F3E6  A4D8               	btfss	status,2,c
  5703  00F3E8  D013               	goto	l351
  5704  00F3EA  0E07               	movlw	7
  5705  00F3EC  1828               	xorwf	diet_press@dietTable+2,w,c
  5706  00F3EE  1029               	iorwf	diet_press@dietTable+3,w,c
  5707  00F3F0  A4D8               	btfss	status,2,c
  5708  00F3F2  D00E               	goto	l351
  5709  00F3F4  0E0C               	movlw	12
  5710  00F3F6  182A               	xorwf	diet_press@dietTable+4,w,c
  5711  00F3F8  102B               	iorwf	diet_press@dietTable+5,w,c
  5712  00F3FA  A4D8               	btfss	status,2,c
  5713  00F3FC  D009               	goto	l351
  5714  00F3FE  0E0C               	movlw	12
  5715  00F400  182C               	xorwf	diet_press@dietTable+6,w,c
  5716  00F402  102D               	iorwf	diet_press@dietTable+7,w,c
  5717  00F404  A4D8               	btfss	status,2,c
  5718  00F406  D004               	goto	l351
  5719                           
  5720                           ;standbyMode.c: 643: sum = 34;
  5721  00F408  0E00               	movlw	0
  5722  00F40A  6E24               	movwf	diet_press@sum+1,c
  5723  00F40C  0E22               	movlw	34
  5724  00F40E  D02F               	goto	L42
  5725  00F410                     l351:
  5726                           
  5727                           ;standbyMode.c: 647: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  5728  00F410  0E03               	movlw	3
  5729  00F412  1826               	xorwf	diet_press@dietTable,w,c
  5730  00F414  1027               	iorwf	diet_press@dietTable+1,w,c
  5731  00F416  A4D8               	btfss	status,2,c
  5732  00F418  D013               	goto	l353
  5733  00F41A  0E0C               	movlw	12
  5734  00F41C  1828               	xorwf	diet_press@dietTable+2,w,c
  5735  00F41E  1029               	iorwf	diet_press@dietTable+3,w,c
  5736  00F420  A4D8               	btfss	status,2,c
  5737  00F422  D00E               	goto	l353
  5738  00F424  0E0C               	movlw	12
  5739  00F426  182A               	xorwf	diet_press@dietTable+4,w,c
  5740  00F428  102B               	iorwf	diet_press@dietTable+5,w,c
  5741  00F42A  A4D8               	btfss	status,2,c
  5742  00F42C  D009               	goto	l353
  5743  00F42E  0E0C               	movlw	12
  5744  00F430  182C               	xorwf	diet_press@dietTable+6,w,c
  5745  00F432  102D               	iorwf	diet_press@dietTable+7,w,c
  5746  00F434  A4D8               	btfss	status,2,c
  5747  00F436  D004               	goto	l353
  5748                           
  5749                           ;standbyMode.c: 648: sum = 39;
  5750  00F438  0E00               	movlw	0
  5751  00F43A  6E24               	movwf	diet_press@sum+1,c
  5752  00F43C  0E27               	movlw	39
  5753  00F43E  D017               	goto	L42
  5754  00F440                     l353:
  5755                           
  5756                           ;standbyMode.c: 652: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
  5757  00F440  0E07               	movlw	7
  5758  00F442  1826               	xorwf	diet_press@dietTable,w,c
  5759  00F444  1027               	iorwf	diet_press@dietTable+1,w,c
  5760  00F446  A4D8               	btfss	status,2,c
  5761  00F448  D014               	goto	l355
  5762  00F44A  0E0C               	movlw	12
  5763  00F44C  1828               	xorwf	diet_press@dietTable+2,w,c
  5764  00F44E  1029               	iorwf	diet_press@dietTable+3,w,c
  5765  00F450  A4D8               	btfss	status,2,c
  5766  00F452  D00F               	goto	l355
  5767  00F454  0E0C               	movlw	12
  5768  00F456  182A               	xorwf	diet_press@dietTable+4,w,c
  5769  00F458  102B               	iorwf	diet_press@dietTable+5,w,c
  5770  00F45A  A4D8               	btfss	status,2,c
  5771  00F45C  D00A               	goto	l355
  5772  00F45E  0E0C               	movlw	12
  5773  00F460  182C               	xorwf	diet_press@dietTable+6,w,c
  5774  00F462  102D               	iorwf	diet_press@dietTable+7,w,c
  5775  00F464  A4D8               	btfss	status,2,c
  5776  00F466  D005               	goto	l355
  5777                           
  5778                           ;standbyMode.c: 653: sum = 43;
  5779  00F468  0E00               	movlw	0
  5780  00F46A  6E24               	movwf	diet_press@sum+1,c
  5781  00F46C  0E2B               	movlw	43
  5782  00F46E                     L42:
  5783  00F46E  6E23               	movwf	diet_press@sum,c
  5784                           
  5785                           ;standbyMode.c: 654: }
  5786  00F470  D02A               	goto	l356
  5787  00F472                     l355:
  5788                           
  5789                           ;standbyMode.c: 657: else{
  5790                           ;standbyMode.c: 658: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5791  00F472  0E01               	movlw	1
  5792  00F474  ECB1  F070         	call	_lcdInst
  5793  00F478  0EC3               	movlw	195
  5794  00F47A  6E1B               	movwf	??_diet_press& (0+255),c
  5795  00F47C  0ECD               	movlw	205
  5796  00F47E                     u5957:
  5797  00F47E  2EE8               	decfsz	wreg,f,c
  5798  00F480  D7FE               	bra	u5957
  5799  00F482  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5800  00F484  D7FC               	bra	u5957
  5801  00F486  F000               	nop	
  5802                           
  5803                           ;standbyMode.c: 659: printf("Invalid diet!");
  5804  00F488  0EFA               	movlw	low STR_25
  5805  00F48A  6E0D               	movwf	printf@f,c
  5806  00F48C  0EFE               	movlw	high STR_25
  5807  00F48E  6E0E               	movwf	printf@f+1,c
  5808  00F490  EC6B  F072         	call	_printf	;wreg free
  5809                           
  5810                           ;standbyMode.c: 660: lcdInst(0xC0);;
  5811  00F494  0EC0               	movlw	192
  5812  00F496  ECB1  F070         	call	_lcdInst
  5813                           
  5814                           ;standbyMode.c: 661: printf("Try again.");
  5815  00F49A  0E9F               	movlw	low STR_22
  5816  00F49C  6E0D               	movwf	printf@f,c
  5817  00F49E  0EFF               	movlw	high STR_22
  5818  00F4A0  6E0E               	movwf	printf@f+1,c
  5819  00F4A2  EC6B  F072         	call	_printf	;wreg free
  5820                           
  5821                           ;standbyMode.c: 662: _delay((unsigned long)((1000)*(40000000/4000.0)));
  5822  00F4A6  0E33               	movlw	51
  5823  00F4A8  6E1C               	movwf	(??_diet_press+1)& (0+255),c
  5824  00F4AA  0EBB               	movlw	187
  5825  00F4AC  6E1B               	movwf	??_diet_press& (0+255),c
  5826  00F4AE  0EE0               	movlw	224
  5827  00F4B0                     u5967:
  5828  00F4B0  2EE8               	decfsz	wreg,f,c
  5829  00F4B2  D7FE               	bra	u5967
  5830  00F4B4  2E1B               	decfsz	??_diet_press& (0+255),f,c
  5831  00F4B6  D7FC               	bra	u5967
  5832  00F4B8  2E1C               	decfsz	(??_diet_press+1)& (0+255),f,c
  5833  00F4BA  D7FA               	bra	u5967
  5834                           
  5835                           ;standbyMode.c: 663: sum = 0;
  5836  00F4BC  0E00               	movlw	0
  5837  00F4BE  6E24               	movwf	diet_press@sum+1,c
  5838  00F4C0  0E00               	movlw	0
  5839  00F4C2  6E23               	movwf	diet_press@sum,c
  5840                           
  5841                           ;standbyMode.c: 664: goto START;
  5842  00F4C4  D587               	goto	_diet_press
  5843  00F4C6                     l356:
  5844                           
  5845                           ;standbyMode.c: 665: }
  5846                           ;standbyMode.c: 666: return sum;
  5847  00F4C6  C023  F019         	movff	diet_press@sum,?_diet_press
  5848  00F4CA  C024  F01A         	movff	diet_press@sum+1,?_diet_press+1
  5849  00F4CE  0012               	return		;funcret
  5850  00F4D0                     __end_of_diet_press:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           postinc0	equ	0xFEE
  5859                           wreg	equ	0xFE8
  5860                           plusw1	equ	0xFE3
  5861                           postinc2	equ	0xFDE
  5862                           postdec2	equ	0xFDD
  5863                           plusw2	equ	0xFDB
  5864                           fsr2h	equ	0xFDA
  5865                           fsr2l	equ	0xFD9
  5866                           status	equ	0xFD8
  5867                           
  5868 ;; *************** function _printf *****************
  5869 ;; Defined at:
  5870 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;  f               2   12[COMRAM] PTR const unsigned char 
  5873 ;;		 -> STR_66(11), STR_65(13), STR_64(11), STR_63(13), 
  5874 ;;		 -> STR_62(11), STR_61(8), STR_60(15), STR_59(16), 
  5875 ;;		 -> STR_58(10), STR_57(8), STR_56(15), STR_55(16), 
  5876 ;;		 -> STR_54(10), STR_53(16), STR_52(16), STR_51(17), 
  5877 ;;		 -> STR_50(13), STR_49(13), STR_48(16), STR_47(17), 
  5878 ;;		 -> STR_46(11), STR_45(16), STR_44(12), STR_43(14), 
  5879 ;;		 -> STR_42(15), STR_41(17), STR_40(17), STR_39(13), 
  5880 ;;		 -> STR_38(7), STR_37(17), STR_36(14), STR_35(11), 
  5881 ;;		 -> STR_34(11), STR_33(16), STR_32(16), STR_31(17), 
  5882 ;;		 -> STR_30(17), STR_29(8), STR_28(15), STR_27(15), 
  5883 ;;		 -> STR_26(11), STR_25(14), STR_24(16), STR_23(16), 
  5884 ;;		 -> STR_22(11), STR_21(14), STR_20(16), STR_19(16), 
  5885 ;;		 -> STR_18(16), STR_17(13), STR_16(13), STR_15(15), 
  5886 ;;		 -> STR_14(16), STR_13(16), STR_12(18), STR_11(6), 
  5887 ;;		 -> STR_10(16), STR_9(5), STR_8(16), STR_7(9), 
  5888 ;;		 -> STR_6(17), STR_5(7), STR_4(9), STR_3(17), 
  5889 ;;		 -> STR_2(11), STR_1(16), 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  tmpval          4    0        struct .
  5892 ;;  cp              3    0        PTR const unsigned char 
  5893 ;;  val             2   21[COMRAM] unsigned int 
  5894 ;;  ap              2   17[COMRAM] PTR void [1]
  5895 ;;		 -> ?_printf(2), 
  5896 ;;  len             2    0        unsigned int 
  5897 ;;  c               1   23[COMRAM] char 
  5898 ;;  prec            1   20[COMRAM] char 
  5899 ;;  flag            1   19[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  2   12[COMRAM] int 
  5902 ;; Registers used:
  5903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:       12 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    2
  5916 ;; This function calls:
  5917 ;;		___lwdiv
  5918 ;;		___lwmod
  5919 ;;		_putch
  5920 ;; This function is called by:
  5921 ;;		_viewLogs
  5922 ;;		_food_press
  5923 ;;		_diet_press
  5924 ;;		_which_drawer
  5925 ;;		_standbyMode
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text9
  5930  00E4D6                     __ptext9:
  5931                           	opt stack 0
  5932  00E4D6                     _printf:
  5933                           	opt stack 26
  5934                           
  5935                           ;doprnt.c: 466: va_list ap;
  5936                           ;doprnt.c: 499: signed char c;
  5937                           ;doprnt.c: 506: signed char prec;
  5938                           ;doprnt.c: 508: unsigned char flag;
  5939                           ;doprnt.c: 523: union {
  5940                           ;doprnt.c: 524: unsigned long vd;
  5941                           ;doprnt.c: 525: double integ;
  5942                           ;doprnt.c: 526: } tmpval;
  5943                           ;doprnt.c: 528: unsigned int val;
  5944                           ;doprnt.c: 529: unsigned len;
  5945                           ;doprnt.c: 530: const char * cp;
  5946                           ;doprnt.c: 533: *ap = __va_start();
  5947                           
  5948                           ;incstack = 0
  5949  00E4D6  0E0F               	movlw	low (?_printf+2)
  5950  00E4D8  6E12               	movwf	printf@ap,c
  5951  00E4DA  0E00               	movlw	high (?_printf+2)
  5952  00E4DC  6E13               	movwf	printf@ap+1,c
  5953                           
  5954                           ;doprnt.c: 536: while(c = *f++) {
  5955  00E4DE  D07D               	goto	u3690
  5956  00E4E0                     
  5957                           ;doprnt.c: 538: if(c != '%')
  5958  00E4E0  0E25               	movlw	37
  5959  00E4E2  1818               	xorwf	printf@c,w,c
  5960  00E4E4  B4D8               	btfsc	status,2,c
  5961  00E4E6  D004               	goto	l479
  5962                           
  5963                           ;doprnt.c: 540: {
  5964                           ;doprnt.c: 541: (putch(c) );
  5965  00E4E8  5018               	movf	printf@c,w,c
  5966  00E4EA  ECBB  F070         	call	_putch
  5967                           
  5968                           ;doprnt.c: 542: continue;
  5969  00E4EE  D075               	goto	u3690
  5970  00E4F0                     l479:
  5971                           
  5972                           ;doprnt.c: 543: }
  5973                           ;doprnt.c: 548: flag = 0;
  5974  00E4F0  0E00               	movlw	0
  5975  00E4F2  6E14               	movwf	printf@flag,c
  5976                           
  5977                           ;doprnt.c: 822: }
  5978                           
  5979                           ;doprnt.c: 813: continue;
  5980                           
  5981                           ;doprnt.c: 802: default:
  5982                           
  5983                           ;doprnt.c: 698: case 'i':
  5984                           ;doprnt.c: 699: break;
  5985                           
  5986                           ;doprnt.c: 697: case 'd':
  5987                           
  5988                           ;doprnt.c: 638: goto alldone;
  5989                           
  5990                           ;doprnt.c: 637: case 0:
  5991                           
  5992                           ;doprnt.c: 635: switch(c = *f++) {
  5993  00E4F4  C00D  FFF6         	movff	printf@f,tblptrl
  5994  00E4F8  C00E  FFF7         	movff	printf@f+1,tblptrh
  5995  00E4FC  4A0D               	infsnz	printf@f,f,c
  5996  00E4FE  2A0E               	incf	printf@f+1,f,c
  5997  00E500                     	if	0	;tblptru may be non-zero
  5998  00E500                     	endif
  5999  00E500                     	if	0	;tblptru may be non-zero
  6000  00E500                     	endif
  6001  00E500  0008               	tblrd		*
  6002  00E502  CFF5 F018          	movff	tablat,printf@c
  6003  00E506  5018               	movf	printf@c,w,c
  6004                           
  6005                           ; Switch size 1, requested type "space"
  6006                           ; Number of cases is 3, Range of values is 0 to 105
  6007                           ; switch strategies available:
  6008                           ; Name         Instructions Cycles
  6009                           ; simple_byte           10     6 (average)
  6010                           ;	Chosen strategy is simple_byte
  6011  00E508  0A00               	xorlw	0	; case 0
  6012  00E50A  B4D8               	btfsc	status,2,c
  6013  00E50C  0012               	return	
  6014  00E50E  0A64               	xorlw	100	; case 100
  6015  00E510  B4D8               	btfsc	status,2,c
  6016  00E512  D003               	goto	l485
  6017  00E514  0A0D               	xorlw	13	; case 105
  6018  00E516  A4D8               	btfss	status,2,c
  6019  00E518  D060               	goto	u3690
  6020  00E51A                     l485:
  6021                           
  6022                           ;doprnt.c: 1253: {
  6023                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6024  00E51A  C012  FFD9         	movff	printf@ap,fsr2l
  6025  00E51E  C013  FFDA         	movff	printf@ap+1,fsr2h
  6026  00E522  CFDE F016          	movff	postinc2,printf@val
  6027  00E526  CFDD F017          	movff	postdec2,printf@val+1
  6028  00E52A  0E02               	movlw	2
  6029  00E52C  2612               	addwf	printf@ap,f,c
  6030  00E52E  0E00               	movlw	0
  6031  00E530  2213               	addwfc	printf@ap+1,f,c
  6032                           
  6033                           ;doprnt.c: 1261: if((int)val < 0) {
  6034  00E532  AE17               	btfss	printf@val+1,7,c
  6035  00E534  D006               	goto	l487
  6036                           
  6037                           ;doprnt.c: 1262: flag |= 0x03;
  6038  00E536  0E03               	movlw	3
  6039  00E538  1214               	iorwf	printf@flag,f,c
  6040                           
  6041                           ;doprnt.c: 1263: val = -val;
  6042  00E53A  6C16               	negf	printf@val,c
  6043  00E53C  1E17               	comf	printf@val+1,f,c
  6044  00E53E  B0D8               	btfsc	status,0,c
  6045  00E540  2A17               	incf	printf@val+1,f,c
  6046  00E542                     l487:
  6047                           
  6048                           ;doprnt.c: 1264: }
  6049                           ;doprnt.c: 1266: }
  6050                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6051  00E542  0E01               	movlw	1
  6052  00E544  6E18               	movwf	printf@c,c
  6053  00E546                     l2860:
  6054  00E546  0E05               	movlw	5
  6055  00E548  1818               	xorwf	printf@c,w,c
  6056  00E54A  B4D8               	btfsc	status,2,c
  6057  00E54C  D012               	goto	u3670
  6058                           
  6059                           ;doprnt.c: 1306: if(val < dpowers[c])
  6060  00E54E  5018               	movf	printf@c,w,c
  6061  00E550  0D02               	mullw	2
  6062  00E552  0E37               	movlw	low _dpowers
  6063  00E554  24F3               	addwf	prodl,w,c
  6064  00E556  6EF6               	movwf	tblptrl,c
  6065  00E558  0EFD               	movlw	high _dpowers
  6066  00E55A  20F4               	addwfc	prodh,w,c
  6067  00E55C  6EF7               	movwf	tblptrh,c
  6068  00E55E                     	if	0	;There are less than 3 active tblptr bytes
  6069  00E55E                     	endif
  6070  00E55E  0009               	tblrd		*+
  6071  00E560  50F5               	movf	tablat,w,c
  6072  00E562  5C16               	subwf	printf@val,w,c
  6073  00E564  0009               	tblrd		*+
  6074  00E566  50F5               	movf	tablat,w,c
  6075  00E568  5817               	subwfb	printf@val+1,w,c
  6076  00E56A  A0D8               	btfss	status,0,c
  6077  00E56C  D002               	goto	u3670
  6078                           
  6079                           ;doprnt.c: 1307: break;
  6080  00E56E  2A18               	incf	printf@c,f,c
  6081  00E570  D7EA               	goto	l2860
  6082  00E572                     u3670:
  6083                           
  6084                           ;doprnt.c: 1422: {
  6085                           ;doprnt.c: 1438: if(flag & 0x03)
  6086  00E572  C014  F011         	movff	printf@flag,??_printf
  6087  00E576  0E03               	movlw	3
  6088  00E578  1611               	andwf	??_printf,f,c
  6089  00E57A  B4D8               	btfsc	status,2,c
  6090  00E57C  D003               	goto	l491
  6091                           
  6092                           ;doprnt.c: 1439: (putch('-') );
  6093  00E57E  0E2D               	movlw	45
  6094  00E580  ECBB  F070         	call	_putch
  6095  00E584                     l491:
  6096                           
  6097                           ;doprnt.c: 1469: }
  6098                           ;doprnt.c: 1472: prec = c;
  6099  00E584  C018  F015         	movff	printf@c,printf@prec
  6100                           
  6101                           ;doprnt.c: 1474: while(prec--) {
  6102  00E588  D024               	goto	l492
  6103  00E58A                     
  6104                           ;doprnt.c: 1478: {
  6105                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6106  00E58A  5015               	movf	printf@prec,w,c
  6107  00E58C  0D02               	mullw	2
  6108  00E58E  0E37               	movlw	low _dpowers
  6109  00E590  24F3               	addwf	prodl,w,c
  6110  00E592  6EF6               	movwf	tblptrl,c
  6111  00E594  0EFD               	movlw	high _dpowers
  6112  00E596  20F4               	addwfc	prodh,w,c
  6113  00E598  6EF7               	movwf	tblptrh,c
  6114  00E59A                     	if	0	;There are less than 3 active tblptr bytes
  6115  00E59A                     	endif
  6116  00E59A  0009               	tblrd		*+
  6117  00E59C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6118  00E5A0  000A               	tblrd		*-
  6119  00E5A2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6120  00E5A6  C016  F001         	movff	printf@val,___lwdiv@dividend
  6121  00E5AA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  6122  00E5AE  EC33  F071         	call	___lwdiv	;wreg free
  6123  00E5B2  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6124  00E5B6  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6125  00E5BA  0E00               	movlw	0
  6126  00E5BC  6E0B               	movwf	___lwmod@divisor+1,c
  6127  00E5BE  0E0A               	movlw	10
  6128  00E5C0  6E0A               	movwf	___lwmod@divisor,c
  6129  00E5C2  ECEC  F070         	call	___lwmod	;wreg free
  6130  00E5C6  5008               	movf	?___lwmod,w,c
  6131  00E5C8  0F30               	addlw	48
  6132  00E5CA  6E18               	movwf	printf@c,c
  6133                           
  6134                           ;doprnt.c: 1523: }
  6135                           ;doprnt.c: 1524: (putch(c) );
  6136  00E5CC  5018               	movf	printf@c,w,c
  6137  00E5CE  ECBB  F070         	call	_putch
  6138  00E5D2                     l492:
  6139  00E5D2  0615               	decf	printf@prec,f,c
  6140  00E5D4  2815               	incf	printf@prec,w,c
  6141  00E5D6  A4D8               	btfss	status,2,c
  6142  00E5D8  D7D8               	goto	l493
  6143  00E5DA                     u3690:
  6144  00E5DA  C00D  FFF6         	movff	printf@f,tblptrl
  6145  00E5DE  C00E  FFF7         	movff	printf@f+1,tblptrh
  6146  00E5E2  4A0D               	infsnz	printf@f,f,c
  6147  00E5E4  2A0E               	incf	printf@f+1,f,c
  6148  00E5E6                     	if	0	;tblptru may be non-zero
  6149  00E5E6                     	endif
  6150  00E5E6                     	if	0	;tblptru may be non-zero
  6151  00E5E6                     	endif
  6152  00E5E6  0008               	tblrd		*
  6153  00E5E8  CFF5 F018          	movff	tablat,printf@c
  6154  00E5EC  5018               	movf	printf@c,w,c
  6155  00E5EE  B4D8               	btfsc	status,2,c
  6156  00E5F0  0012               	return	
  6157  00E5F2  D776               	goto	l478
  6158  00E5F4                     __end_of_printf:
  6159                           	opt stack 0
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           prodh	equ	0xFF4
  6165                           prodl	equ	0xFF3
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           plusw1	equ	0xFE3
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           plusw2	equ	0xFDB
  6172                           fsr2h	equ	0xFDA
  6173                           fsr2l	equ	0xFD9
  6174                           status	equ	0xFD8
  6175                           
  6176 ;; *************** function _putch *****************
  6177 ;; Defined at:
  6178 ;;		line 73 in file "standbyMode.c"
  6179 ;; Parameters:    Size  Location     Type
  6180 ;;  data            1    wreg     unsigned char 
  6181 ;; Auto vars:     Size  Location     Type
  6182 ;;  data            1    2[COMRAM] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;Total ram usage:        1 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    1
  6199 ;; This function calls:
  6200 ;;		_lcdNibble
  6201 ;; This function is called by:
  6202 ;;		_viewLogs
  6203 ;;		_food_press
  6204 ;;		_diet_press
  6205 ;;		_which_drawer
  6206 ;;		_printf
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text10
  6211  00E176                     __ptext10:
  6212                           	opt stack 0
  6213  00E176                     _putch:
  6214                           	opt stack 27
  6215                           
  6216                           ;incstack = 0
  6217                           ;putch@data stored from wreg
  6218  00E176  6E03               	movwf	putch@data,c
  6219                           
  6220                           ;standbyMode.c: 81: LATDbits.LATD2 = 1;
  6221  00E178  848C               	bsf	3980,2,c	;volatile
  6222                           
  6223                           ;standbyMode.c: 82: lcdNibble(data);
  6224  00E17A  5003               	movf	putch@data,w,c
  6225  00E17C  EC5C  F071         	call	_lcdNibble
  6226                           
  6227                           ;standbyMode.c: 83: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6228  00E180  0EC8               	movlw	200
  6229  00E182                     u5977:
  6230  00E182  D000               	nop2	
  6231  00E184  2EE8               	decfsz	wreg,f,c
  6232  00E186  D7FD               	bra	u5977
  6233  00E188  0012               	return		;funcret
  6234  00E18A                     __end_of_putch:
  6235                           	opt stack 0
  6236                           tblptru	equ	0xFF8
  6237                           tblptrh	equ	0xFF7
  6238                           tblptrl	equ	0xFF6
  6239                           tablat	equ	0xFF5
  6240                           prodh	equ	0xFF4
  6241                           prodl	equ	0xFF3
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           plusw1	equ	0xFE3
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           plusw2	equ	0xFDB
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function ___lwmod *****************
  6253 ;; Defined at:
  6254 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  dividend        2    7[COMRAM] unsigned int 
  6257 ;;  divisor         2    9[COMRAM] unsigned int 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  counter         1   11[COMRAM] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  2    7[COMRAM] unsigned int 
  6262 ;; Registers used:
  6263 ;;		wreg, status,2, status,0
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:        5 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_printf
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           	psect	text11
  6283  00E1D8                     __ptext11:
  6284                           	opt stack 0
  6285  00E1D8                     ___lwmod:
  6286                           	opt stack 27
  6287                           
  6288                           ;incstack = 0
  6289  00E1D8  500A               	movf	___lwmod@divisor,w,c
  6290  00E1DA  100B               	iorwf	___lwmod@divisor+1,w,c
  6291  00E1DC  B4D8               	btfsc	status,2,c
  6292  00E1DE  D018               	goto	l915
  6293  00E1E0  0E01               	movlw	1
  6294  00E1E2  6E0C               	movwf	___lwmod@counter,c
  6295  00E1E4  D004               	goto	l910
  6296  00E1E6  90D8               	bcf	status,0,c
  6297  00E1E8  360A               	rlcf	___lwmod@divisor,f,c
  6298  00E1EA  360B               	rlcf	___lwmod@divisor+1,f,c
  6299  00E1EC  2A0C               	incf	___lwmod@counter,f,c
  6300  00E1EE                     l910:
  6301  00E1EE  AE0B               	btfss	___lwmod@divisor+1,7,c
  6302  00E1F0  D7FA               	goto	l911
  6303  00E1F2                     u2700:
  6304  00E1F2  500A               	movf	___lwmod@divisor,w,c
  6305  00E1F4  5C08               	subwf	___lwmod@dividend,w,c
  6306  00E1F6  500B               	movf	___lwmod@divisor+1,w,c
  6307  00E1F8  5809               	subwfb	___lwmod@dividend+1,w,c
  6308  00E1FA  A0D8               	btfss	status,0,c
  6309  00E1FC  D004               	goto	l914
  6310  00E1FE  500A               	movf	___lwmod@divisor,w,c
  6311  00E200  5E08               	subwf	___lwmod@dividend,f,c
  6312  00E202  500B               	movf	___lwmod@divisor+1,w,c
  6313  00E204  5A09               	subwfb	___lwmod@dividend+1,f,c
  6314  00E206                     l914:
  6315  00E206  90D8               	bcf	status,0,c
  6316  00E208  320B               	rrcf	___lwmod@divisor+1,f,c
  6317  00E20A  320A               	rrcf	___lwmod@divisor,f,c
  6318  00E20C  2E0C               	decfsz	___lwmod@counter,f,c
  6319  00E20E  D7F1               	goto	u2700
  6320  00E210                     l915:
  6321  00E210  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6322  00E214  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6323  00E218  0012               	return		;funcret
  6324  00E21A                     __end_of___lwmod:
  6325                           	opt stack 0
  6326                           tblptru	equ	0xFF8
  6327                           tblptrh	equ	0xFF7
  6328                           tblptrl	equ	0xFF6
  6329                           tablat	equ	0xFF5
  6330                           prodh	equ	0xFF4
  6331                           prodl	equ	0xFF3
  6332                           postinc0	equ	0xFEE
  6333                           wreg	equ	0xFE8
  6334                           plusw1	equ	0xFE3
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           plusw2	equ	0xFDB
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function ___lwdiv *****************
  6343 ;; Defined at:
  6344 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  dividend        2    0[COMRAM] unsigned int 
  6347 ;;  divisor         2    2[COMRAM] unsigned int 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  quotient        2    4[COMRAM] unsigned int 
  6350 ;;  counter         1    6[COMRAM] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  2    0[COMRAM] unsigned int 
  6353 ;; Registers used:
  6354 ;;		wreg, status,2, status,0
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6360 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;Total ram usage:        7 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_printf
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text12
  6374  00E266                     __ptext12:
  6375                           	opt stack 0
  6376  00E266                     ___lwdiv:
  6377                           	opt stack 27
  6378                           
  6379                           ;incstack = 0
  6380  00E266  0E00               	movlw	0
  6381  00E268  6E06               	movwf	___lwdiv@quotient+1,c
  6382  00E26A  0E00               	movlw	0
  6383  00E26C  6E05               	movwf	___lwdiv@quotient,c
  6384  00E26E  5003               	movf	___lwdiv@divisor,w,c
  6385  00E270  1004               	iorwf	___lwdiv@divisor+1,w,c
  6386  00E272  B4D8               	btfsc	status,2,c
  6387  00E274  D01C               	goto	l905
  6388  00E276  0E01               	movlw	1
  6389  00E278  6E07               	movwf	___lwdiv@counter,c
  6390  00E27A  D004               	goto	l900
  6391  00E27C  90D8               	bcf	status,0,c
  6392  00E27E  3603               	rlcf	___lwdiv@divisor,f,c
  6393  00E280  3604               	rlcf	___lwdiv@divisor+1,f,c
  6394  00E282  2A07               	incf	___lwdiv@counter,f,c
  6395  00E284                     l900:
  6396  00E284  AE04               	btfss	___lwdiv@divisor+1,7,c
  6397  00E286  D7FA               	goto	l901
  6398  00E288                     u2670:
  6399  00E288  90D8               	bcf	status,0,c
  6400  00E28A  3605               	rlcf	___lwdiv@quotient,f,c
  6401  00E28C  3606               	rlcf	___lwdiv@quotient+1,f,c
  6402  00E28E  5003               	movf	___lwdiv@divisor,w,c
  6403  00E290  5C01               	subwf	___lwdiv@dividend,w,c
  6404  00E292  5004               	movf	___lwdiv@divisor+1,w,c
  6405  00E294  5802               	subwfb	___lwdiv@dividend+1,w,c
  6406  00E296  A0D8               	btfss	status,0,c
  6407  00E298  D005               	goto	l904
  6408  00E29A  5003               	movf	___lwdiv@divisor,w,c
  6409  00E29C  5E01               	subwf	___lwdiv@dividend,f,c
  6410  00E29E  5004               	movf	___lwdiv@divisor+1,w,c
  6411  00E2A0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6412  00E2A2  8005               	bsf	___lwdiv@quotient,0,c
  6413  00E2A4                     l904:
  6414  00E2A4  90D8               	bcf	status,0,c
  6415  00E2A6  3204               	rrcf	___lwdiv@divisor+1,f,c
  6416  00E2A8  3203               	rrcf	___lwdiv@divisor,f,c
  6417  00E2AA  2E07               	decfsz	___lwdiv@counter,f,c
  6418  00E2AC  D7ED               	goto	u2670
  6419  00E2AE                     l905:
  6420  00E2AE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  6421  00E2B2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6422  00E2B6  0012               	return		;funcret
  6423  00E2B8                     __end_of___lwdiv:
  6424                           	opt stack 0
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           plusw1	equ	0xFE3
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           plusw2	equ	0xFDB
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _initLCD *****************
  6442 ;; Defined at:
  6443 ;;		line 28 in file "standbyMode.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      void 
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;Total ram usage:        1 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    2
  6464 ;; This function calls:
  6465 ;;		_lcdInst
  6466 ;; This function is called by:
  6467 ;;		_main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text13
  6472  00E21A                     __ptext13:
  6473                           	opt stack 0
  6474  00E21A                     _initLCD:
  6475                           	opt stack 28
  6476                           
  6477                           ;standbyMode.c: 36: _delay((unsigned long)((15)*(40000000/4000.0)));
  6478                           
  6479                           ;incstack = 0
  6480  00E21A  0EC3               	movlw	195
  6481  00E21C  6E04               	movwf	??_initLCD& (0+255),c
  6482  00E21E  0ECD               	movlw	205
  6483  00E220                     u5987:
  6484  00E220  2EE8               	decfsz	wreg,f,c
  6485  00E222  D7FE               	bra	u5987
  6486  00E224  2E04               	decfsz	??_initLCD& (0+255),f,c
  6487  00E226  D7FC               	bra	u5987
  6488  00E228  F000               	nop	
  6489                           
  6490                           ;standbyMode.c: 37: lcdInst(0b00110011);
  6491  00E22A  0E33               	movlw	51
  6492  00E22C  ECB1  F070         	call	_lcdInst
  6493                           
  6494                           ;standbyMode.c: 38: lcdInst(0b00110010);
  6495  00E230  0E32               	movlw	50
  6496  00E232  ECB1  F070         	call	_lcdInst
  6497                           
  6498                           ;standbyMode.c: 39: lcdInst(0b00101000);
  6499  00E236  0E28               	movlw	40
  6500  00E238  ECB1  F070         	call	_lcdInst
  6501                           
  6502                           ;standbyMode.c: 40: lcdInst(0b00001111);
  6503  00E23C  0E0F               	movlw	15
  6504  00E23E  ECB1  F070         	call	_lcdInst
  6505                           
  6506                           ;standbyMode.c: 41: lcdInst(0b00000110);
  6507  00E242  0E06               	movlw	6
  6508  00E244  ECB1  F070         	call	_lcdInst
  6509                           
  6510                           ;standbyMode.c: 42: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6511  00E248  0E01               	movlw	1
  6512  00E24A  ECB1  F070         	call	_lcdInst
  6513  00E24E  0EC3               	movlw	195
  6514  00E250  6E04               	movwf	??_initLCD& (0+255),c
  6515  00E252  0ECD               	movlw	205
  6516  00E254                     u5997:
  6517  00E254  2EE8               	decfsz	wreg,f,c
  6518  00E256  D7FE               	bra	u5997
  6519  00E258  2E04               	decfsz	??_initLCD& (0+255),f,c
  6520  00E25A  D7FC               	bra	u5997
  6521  00E25C  F000               	nop	
  6522                           
  6523                           ;standbyMode.c: 45: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6524  00E25E  0E0F               	movlw	15
  6525  00E260  ECB1  F070         	call	_lcdInst
  6526  00E264  0012               	return		;funcret
  6527  00E266                     __end_of_initLCD:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           postinc0	equ	0xFEE
  6536                           wreg	equ	0xFE8
  6537                           plusw1	equ	0xFE3
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           plusw2	equ	0xFDB
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _lcdInst *****************
  6546 ;; Defined at:
  6547 ;;		line 14 in file "standbyMode.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  data            1    wreg     unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  data            1    2[COMRAM] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      void 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;Total ram usage:        1 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    1
  6568 ;; This function calls:
  6569 ;;		_lcdNibble
  6570 ;; This function is called by:
  6571 ;;		_initLCD
  6572 ;;		_viewLogs
  6573 ;;		_food_press
  6574 ;;		_diet_press
  6575 ;;		_which_drawer
  6576 ;;		_standbyMode
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           	psect	text14
  6581  00E162                     __ptext14:
  6582                           	opt stack 0
  6583  00E162                     _lcdInst:
  6584                           	opt stack 27
  6585                           
  6586                           ;incstack = 0
  6587                           ;lcdInst@data stored from wreg
  6588  00E162  6E03               	movwf	lcdInst@data,c
  6589                           
  6590                           ;standbyMode.c: 22: LATDbits.LATD2 = 0;
  6591  00E164  948C               	bcf	3980,2,c	;volatile
  6592                           
  6593                           ;standbyMode.c: 23: lcdNibble(data);
  6594  00E166  5003               	movf	lcdInst@data,w,c
  6595  00E168  EC5C  F071         	call	_lcdNibble
  6596                           
  6597                           ;standbyMode.c: 24: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6598  00E16C  0EC8               	movlw	200
  6599  00E16E                     u6007:
  6600  00E16E  D000               	nop2	
  6601  00E170  2EE8               	decfsz	wreg,f,c
  6602  00E172  D7FD               	bra	u6007
  6603  00E174  0012               	return		;funcret
  6604  00E176                     __end_of_lcdInst:
  6605                           	opt stack 0
  6606                           tblptru	equ	0xFF8
  6607                           tblptrh	equ	0xFF7
  6608                           tblptrl	equ	0xFF6
  6609                           tablat	equ	0xFF5
  6610                           prodh	equ	0xFF4
  6611                           prodl	equ	0xFF3
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           plusw1	equ	0xFE3
  6615                           postinc2	equ	0xFDE
  6616                           postdec2	equ	0xFDD
  6617                           plusw2	equ	0xFDB
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _lcdNibble *****************
  6623 ;; Defined at:
  6624 ;;		line 49 in file "standbyMode.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  data            1    wreg     unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  data            1    1[COMRAM] unsigned char 
  6629 ;;  temp            1    0[COMRAM] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, status,2, status,0
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;Total ram usage:        2 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		_lcdInst
  6649 ;;		_putch
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text15
  6654  00E2B8                     __ptext15:
  6655                           	opt stack 0
  6656  00E2B8                     _lcdNibble:
  6657                           	opt stack 27
  6658                           
  6659                           ;incstack = 0
  6660                           ;lcdNibble@data stored from wreg
  6661  00E2B8  6E02               	movwf	lcdNibble@data,c
  6662                           
  6663                           ;standbyMode.c: 57: char temp = (unsigned char) (data & 0xF0);
  6664  00E2BA  5002               	movf	lcdNibble@data,w,c
  6665  00E2BC  0BF0               	andlw	240
  6666  00E2BE  6E01               	movwf	lcdNibble@temp,c
  6667                           
  6668                           ;standbyMode.c: 58: LATD = (unsigned char) (LATD & 0x0F);
  6669  00E2C0  508C               	movf	3980,w,c	;volatile
  6670  00E2C2  0B0F               	andlw	15
  6671  00E2C4  6E8C               	movwf	3980,c	;volatile
  6672                           
  6673                           ;standbyMode.c: 59: LATD = (unsigned char) (temp | LATD);
  6674  00E2C6  5001               	movf	lcdNibble@temp,w,c
  6675  00E2C8  108C               	iorwf	3980,w,c	;volatile
  6676  00E2CA  6E8C               	movwf	3980,c	;volatile
  6677                           
  6678                           ;standbyMode.c: 61: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6679  00E2CC  0E00               	movlw	0
  6680  00E2CE  BEF2               	btfsc	intcon,7,c	;volatile
  6681  00E2D0  0E01               	movlw	1
  6682  00E2D2  6E66               	movwf	standbyMode@LCDinterruptState,c
  6683  00E2D4  9EF2               	bcf	intcon,7,c	;volatile
  6684  00E2D6  868C               	bsf	3980,3,c	;volatile
  6685  00E2D8  0E53               	movlw	83
  6686  00E2DA                     u6017:
  6687  00E2DA  2EE8               	decfsz	wreg,f,c
  6688  00E2DC  D7FE               	bra	u6017
  6689  00E2DE  F000               	nop	
  6690  00E2E0  968C               	bcf	3980,3,c	;volatile
  6691  00E2E2  0EC8               	movlw	200
  6692  00E2E4                     u6027:
  6693  00E2E4  D000               	nop2	
  6694  00E2E6  2EE8               	decfsz	wreg,f,c
  6695  00E2E8  D7FD               	bra	u6027
  6696  00E2EA  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  6697  00E2EC  D002               	bra	u15
  6698  00E2EE  9EF2               	bcf	intcon,7,c	;volatile
  6699  00E2F0  D001               	bra	u16
  6700  00E2F2                     u15:
  6701  00E2F2  8EF2               	bsf	intcon,7,c	;volatile
  6702  00E2F4                     u16:
  6703                           
  6704                           ;standbyMode.c: 64: data = (unsigned char) (data << 4);
  6705  00E2F4  3802               	swapf	lcdNibble@data,w,c
  6706  00E2F6  0BF0               	andlw	240
  6707  00E2F8  6E02               	movwf	lcdNibble@data,c
  6708                           
  6709                           ;standbyMode.c: 65: temp = (unsigned char) (data & 0xF0);
  6710  00E2FA  5002               	movf	lcdNibble@data,w,c
  6711  00E2FC  0BF0               	andlw	240
  6712  00E2FE  6E01               	movwf	lcdNibble@temp,c
  6713                           
  6714                           ;standbyMode.c: 66: LATD = (unsigned char) (LATD & 0x0F);
  6715  00E300  508C               	movf	3980,w,c	;volatile
  6716  00E302  0B0F               	andlw	15
  6717  00E304  6E8C               	movwf	3980,c	;volatile
  6718                           
  6719                           ;standbyMode.c: 67: LATD = (unsigned char) (temp | LATD);
  6720  00E306  5001               	movf	lcdNibble@temp,w,c
  6721  00E308  108C               	iorwf	3980,w,c	;volatile
  6722  00E30A  6E8C               	movwf	3980,c	;volatile
  6723                           
  6724                           ;standbyMode.c: 69: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits
      +                          .LATD3 = 1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _del
      +                          ay((unsigned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6725  00E30C  0E00               	movlw	0
  6726  00E30E  BEF2               	btfsc	intcon,7,c	;volatile
  6727  00E310  0E01               	movlw	1
  6728  00E312  6E66               	movwf	standbyMode@LCDinterruptState,c
  6729  00E314  9EF2               	bcf	intcon,7,c	;volatile
  6730  00E316  868C               	bsf	3980,3,c	;volatile
  6731  00E318  0E53               	movlw	83
  6732  00E31A                     u6037:
  6733  00E31A  2EE8               	decfsz	wreg,f,c
  6734  00E31C  D7FE               	bra	u6037
  6735  00E31E  F000               	nop	
  6736  00E320  968C               	bcf	3980,3,c	;volatile
  6737  00E322  0EC8               	movlw	200
  6738  00E324                     u6047:
  6739  00E324  D000               	nop2	
  6740  00E326  2EE8               	decfsz	wreg,f,c
  6741  00E328  D7FD               	bra	u6047
  6742  00E32A  B066               	btfsc	standbyMode@LCDinterruptState,0,c
  6743  00E32C  D002               	bra	u25
  6744  00E32E  9EF2               	bcf	intcon,7,c	;volatile
  6745  00E330  D001               	bra	u26
  6746  00E332                     u25:
  6747  00E332  8EF2               	bsf	intcon,7,c	;volatile
  6748  00E334                     u26:
  6749  00E334  0012               	return		;funcret
  6750  00E336                     __end_of_lcdNibble:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           intcon	equ	0xFF2
  6759                           postinc0	equ	0xFEE
  6760                           wreg	equ	0xFE8
  6761                           plusw1	equ	0xFE3
  6762                           postinc2	equ	0xFDE
  6763                           postdec2	equ	0xFDD
  6764                           plusw2	equ	0xFDB
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           tblptru	equ	0xFF8
  6769                           tblptrh	equ	0xFF7
  6770                           tblptrl	equ	0xFF6
  6771                           tablat	equ	0xFF5
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           intcon	equ	0xFF2
  6775                           postinc0	equ	0xFEE
  6776                           wreg	equ	0xFE8
  6777                           plusw1	equ	0xFE3
  6778                           postinc2	equ	0xFDE
  6779                           postdec2	equ	0xFDD
  6780                           plusw2	equ	0xFDB
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785                           	psect	rparam
  6786  0000                     tblptru	equ	0xFF8
  6787                           tblptrh	equ	0xFF7
  6788                           tblptrl	equ	0xFF6
  6789                           tablat	equ	0xFF5
  6790                           prodh	equ	0xFF4
  6791                           prodl	equ	0xFF3
  6792                           intcon	equ	0xFF2
  6793                           postinc0	equ	0xFEE
  6794                           wreg	equ	0xFE8
  6795                           plusw1	equ	0xFE3
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           plusw2	equ	0xFDB
  6799                           fsr2h	equ	0xFDA
  6800                           fsr2l	equ	0xFD9
  6801                           status	equ	0xFD8


Data Sizes:
    Strings     695
    Constant    50
    Data        0
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     69     103
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_66(CODE[11]), STR_65(CODE[13]), STR_64(CODE[11]), STR_63(CODE[13]), 
		 -> STR_62(CODE[11]), STR_61(CODE[8]), STR_60(CODE[15]), STR_59(CODE[16]), 
		 -> STR_58(CODE[10]), STR_57(CODE[8]), STR_56(CODE[15]), STR_55(CODE[16]), 
		 -> STR_54(CODE[10]), STR_53(CODE[16]), STR_52(CODE[16]), STR_51(CODE[17]), 
		 -> STR_50(CODE[13]), STR_49(CODE[13]), STR_48(CODE[16]), STR_47(CODE[17]), 
		 -> STR_46(CODE[11]), STR_45(CODE[16]), STR_44(CODE[12]), STR_43(CODE[14]), 
		 -> STR_42(CODE[15]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[13]), 
		 -> STR_38(CODE[7]), STR_37(CODE[17]), STR_36(CODE[14]), STR_35(CODE[11]), 
		 -> STR_34(CODE[11]), STR_33(CODE[16]), STR_32(CODE[16]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[8]), STR_28(CODE[15]), STR_27(CODE[15]), 
		 -> STR_26(CODE[11]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[16]), 
		 -> STR_22(CODE[11]), STR_21(CODE[14]), STR_20(CODE[16]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[13]), STR_16(CODE[13]), STR_15(CODE[15]), 
		 -> STR_14(CODE[16]), STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[6]), 
		 -> STR_10(CODE[16]), STR_9(CODE[5]), STR_8(CODE[16]), STR_7(CODE[9]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[9]), STR_3(CODE[17]), 
		 -> STR_2(CODE[11]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_diet_press
    _standbyMode->_food_press
    _which_drawer->_printf
    _viewLogs->_printf
    _food_press->_printf
    _diet_press->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38756
                            _initLCD
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                         24    24      0   38666
                                             45 COMRAM    24    24      0
                         _diet_press
                         _food_press
                            _lcdInst
                             _printf
                           _viewLogs
                       _which_drawer
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        10     8      2    7192
                                             24 COMRAM    10     8      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             6     4      2    6453
                                             24 COMRAM     6     4      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _food_press                                          21    17      4    9518
                                             24 COMRAM    21    17      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2228
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          21    19      2    8566
                                             24 COMRAM    21    19      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    6117
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _standbyMode
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _viewLogs
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _putch
         _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     45      67       1       81.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      67      34        0.0%
DATA                 0      0      67       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 16 01:08:57 2018

                 _standbyMode F4D0                            u15 E2F2                            u16 E2F4  
                          u25 E332                            u26 E334                   __CFG_CPD$ON 000000  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 EBD6  
                         l131 EC1C                           l220 ED30                           l141 E98C  
                         l310 F13C                           l302 F036                           l303 F036  
                         l231 EE5A                           l215 ED24                           l312 F0B0  
                         l152 EA2A                           l136 EC9A                           l240 EF38  
                         l321 F166                           l153 EA40                           l145 E9BA  
                         l234 EEAA                           l331 F23E                           l323 F190  
                         l315 F0F2                           l307 F042                           l147 EA08  
                         l251 E36A                           l243 EFBC                           l403 E924  
                         l252 E340                           l228 EE0A                           l420 FC04  
                         l412 F544                           l341 F324                           l333 F26C  
                         l325 F1BA                           l253 E3EA                           l237 EEFA  
                         l421 F848                           l246 EFC8                           l422 F8A8  
                         l351 F410                           l343 F352                           l335 F29A  
                         l327 F1E6                           l167 EA5C                           l271 E362  
                         l431 F8F6                           l415 F61A                           l360 E46A  
                         l353 F440                           l345 F380                           l337 F2C8  
                         l329 F212                           l193 EAE6                           l257 E34A  
                         l361 E3F6                           l425 FA86                           l433 FA78  
                         l194 EB1E                           l266 E35A                           l370 E436  
                         l362 E4CC                           l450 FAF8                           l418 F626  
                         l355 F472                           l347 F3B0                           l339 F2F6  
                         l259 E352                           l283 E66E                           l371 E43E  
                         l363 E3FE                           l451 FBBC                           l356 F4C6  
                         l196 EB58                           l188 EA96                           l372 E446  
                         l364 E406                           l452 FB60                           l444 FA80  
                         l428 F8EA                           l349 F3E0                           l373 E44E  
                         l365 E40E                           l437 F96C                           l198 EB92  
                         l286 E742                           l278 E662                           l374 E456  
                         l366 E416                           l462 FC6C                           l438 FA30  
                         l375 E460                           l367 E41E                           l439 F9D4  
                         l288 E6E0                           l368 E426                           l392 E8E8  
                         l384 E7FC                           l369 E42E                           l393 E8BC  
                         l457 FCC0                           l491 E584                           l387 E95A  
                         l379 E7F0                           l900 E284                           l492 E5D2  
                         l901 E27C                           l493 E58A                           l485 E51A  
                         l389 E928                           l910 E1EE                           l478 E4E0  
                         l911 E1E6                           l487 E542                           l479 E4F0  
                         l904 E2A4                           l905 E2AE                           l914 E206  
                         l915 E210                  __CFG_CPB$OFF 000000                           wreg 000FE8  
         standbyMode@diet_407 0032                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3212 F0EC                          l3704 F96C                          l2860 E546  
                        l3708 F972                          l3780 FAFE                          l3764 FAA2  
                        l3692 F916                          l3776 FAF8                          STR_1 FEA0  
                        STR_2 FF89                          STR_3 FD8C                          STR_4 FFCA  
                        STR_5 FFEC                          STR_6 FD9D                          STR_7 FFD3  
                        STR_8 FE20                          STR_9 FFF9                          _LATA 000F89  
                        _LATB 000F8A                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          u4020 F0CC                          u5010 E8FE  
                        u2700 E1F2                          u3420 EBCC                          u5020 E920  
                        u2740 E982                          u2670 E288                          u2830 EA1E  
                        u5230 FAFE                          u6007 E16E                          u5160 F972  
                        u5080 F854                          u6017 E2DA                          u5090 F8B0  
                        u6027 E2E4                          u5307 F502                          u5260 FC0C  
                        u6037 E31A                          u5317 F51C                          u3670 E572  
                        u3910 E68E                          u6047 E324                          u5407 F6A8  
                        u5327 F554                          u5417 F6C2                          u5337 F58C  
                        u3690 E5DA                          u3770 ED58                          u3851 E63E  
                        u5507 F812                          u5427 F6E2                          u5347 F5A6  
                        u5517 F860                          u5437 F6FC                          u5357 F5D8  
                        u3951 F02E                          u5607 FB6C                          u5527 F898  
                        u5447 F72E                          u5367 F5F2                          u5617 FBA4  
                        u5537 F8BC                          u5457 F748                          u5377 F63E  
                        u5297 F4DC                          u5707 ECB0                          u5627 FC38  
                        u5547 F98E                          u5467 F77A                          u5387 F65E  
                        u5717 ECE2                          u5637 FC5E                          u5557 F9C6  
                        u5477 F794                          u5397 F676                          u5807 EE6A  
                        u5727 ECFC                          u5647 FC78                          u5567 F9E0  
                        u5487 F7C6                          u4880 E854                          u5817 EE9C  
                        u5737 ED7A                          u5657 FCB0                          u5577 FA18  
                        u5497 F7E0                          u4970 E89A                          u5907 E6F4  
                        u5827 EEBA                          u5747 ED92                          u5667 FCCC  
                        u5587 FB1A                          u5917 E772                          u5837 EEEC  
                        u5757 EDB2                          u5677 FD04                          u5597 FB52  
                        u5927 E7A4                          u5847 EF0A                          u5767 EDCA  
                        u5687 E7C4                          u5937 EFE0                          u5857 EF2A  
                        u5777 EDFC                          u5697 E93C                          u5947 F062  
                        u5867 EF48                          u5787 EE1A                          u5957 F47E  
                        u5877 EF7A                          u5797 EE4C                          u5967 F4B0  
                        u5887 EF94                          u5977 E182                          u5897 E600  
                        u5987 E220                          u5997 E254         __end_of_decode_drawer E4D6  
                        _main E1A0                          _keys FD15               food_press@F3040 005E  
                        fsr2h 000FDA                          fsr2l 000FD9                 get_digits@sum 0001  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000             viewLogs@keypress2 001E             viewLogs@keypress3 001D  
         standbyMode@keypress 0038                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
             diet_press@F3054 0056              __end_of_LCD_LEFT FD42           standbyMode@whichKey 0036  
             food_press@count 0023               food_press@tally 001F             _drawerInformation 0046  
                       ?_main 0001                         STR_10 FE30                         STR_11 FFF3  
                       STR_20 FE10                         STR_12 FD47                         STR_21 FEEC  
                       STR_13 FE00                         STR_30 FD9D                         STR_22 FF9F  
                       STR_14 FE50                         STR_15 FEB0                         STR_23 FE40  
                       STR_31 FD7B                         STR_24 FE40                         STR_16 FF3E  
                       STR_32 FE90                         STR_40 FDAE                         STR_17 FF58  
                       STR_25 FEFA                         STR_33 FDD0                         STR_41 FD6A  
                       STR_26 FF9F                         STR_34 FFB5                         STR_50 FF4B  
                       STR_42 FECE                         STR_18 FE80                         STR_35 FF7E  
                       STR_43 FF08                         STR_27 FEBF                         STR_19 FE10  
                       STR_51 FD59                         STR_28 FEBF                         STR_60 FEDD  
                       STR_44 FF72                         STR_36 FF16                         STR_52 FE60  
                       STR_61 FFDC                         STR_37 FD7B                         STR_53 FE80  
                       STR_29 FFE4                         STR_45 FDE0                         STR_38 FFEC  
                       STR_54 FFC0                         STR_46 FFAA                         STR_62 FF94  
                       STR_39 FF65                         STR_63 FF24                         STR_55 FDF0  
                       STR_47 FDBF                         STR_64 FF94                         STR_56 FEDD  
                       STR_48 FE70                         STR_65 FF24                         STR_57 FFDC  
                       STR_49 FF31                         STR_66 FF94                         STR_58 FFC0  
                       STR_59 FDF0               __end_of___lwdiv E2B8               __end_of___lwmod E21A  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000               diet_press@count 0021  
             __end_of_lcdInst E176                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD E266                __CFG_EBTRB$OFF 000000               __end_of_dpowers FD41  
                       _input FD26                         _putch E176                         tablat 000FF5  
           _LCDinterruptState 0067                         plusw1 000FE3                         plusw2 000FDB  
                       status 000FD8          standbyMode@keypress1 003B                __CFG_PBADEN$ON 000000  
             standbyMode@diet 0030               standbyMode@zero 0039               __initialization E18A  
                __end_of_main E1D8                  __end_of_keys FD26                  standbyMode@i 0044  
              __CFG_OSC$HSPLL 000000             __end_of_LCD_RIGHT FD43              food_press@drawer 001B  
                      ??_main 0046                 __activetblptr 000002                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        ?_putch 0001         standbyMode@drawer_402 0042  
            diet_press@drawer 0019                __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  
                   ??___lwdiv 0005                     ??___lwmod 000C                        clear_0 E190  
                   ??_lcdInst 0003                        _printf E4D6           food_press@foodTable 0025  
                   ??_initLCD 0004               get_digits@count 0005                  __mediumconst FD14  
            __end_of_viewLogs EFD4                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization E196  
        which_drawer@keypress 0022                 ___rparam_used 000001                  ?_standbyMode 0001  
              __pcstackCOMRAM 0001                 __end_of_input FD37                 __end_of_putch E18A  
          __size_of_lcdNibble 007E                 check_food@sum 0001             food_press@dietSum 0019  
           food_press@isValid 0021                       ??_putch 0003                    _check_food E978  
                  _diet_press EFD4                       ?_printf 000D                    _get_digits E336  
      standbyMode@drawerCount 003E                    _food_press E5F4             __end_of_lcdNibble E336  
                     __Hparam 0000                       __Lparam 0000                     ?_viewLogs 0019  
                     ___lwdiv E266                       ___lwmod E1D8                       __pcinit E18A  
                     __ramtop 1000                       _lcdInst E162                       __ptext0 E1A0  
                     __ptext1 F4D0                       __ptext2 E7B2                       __ptext3 E3F4  
                     __ptext4 ECA4                       __ptext5 E5F4                       __ptext6 E336  
                     __ptext7 E978                       __ptext8 EFD4                       __ptext9 E4D6  
      __size_of_decode_drawer 00E2               __size_of_printf 011E                       _initLCD E21A  
                     _dpowers FD37                     _LCD_RIGHT FD42          end_of_initialization E196  
             which_drawer@sum 001E         __end_of_LCD_SIZE_HORZ FD45                   ?_check_food 0001  
       __end_of_LCD_SIZE_VERT FD44                 __Lmediumconst FD14                       printf@c 0018  
                     printf@f 000D                       postdec2 000FDD                    ??_viewLogs 001B  
                     postinc0 000FEE                       postinc2 000FDE          __size_of_standbyMode 0844  
                 ?_diet_press 0019                     _PORTBbits 000F81                 ?_which_drawer 0019  
                 ?_get_digits 0001             standbyMode@drawer 0040                 _decode_drawer E3F4  
                 ?_food_press 0019           diet_press@dietTable 0026        standbyMode@validDrawer 003C  
         __size_of_check_food 032C                ??_which_drawer 001B                __end_of_printf E5F4  
         start_initialization E18A                ?_decode_drawer 0001           __size_of_diet_press 04FC  
         __size_of_get_digits 00BE              __CFG_LPT1OSC$OFF 000000                      ??_printf 0011  
          food_press@keypress 002D           __size_of_food_press 01BE  standbyMode@LCDinterruptState 0066  
                 __pbssCOMRAM 0046           decode_drawer@drawer 0001              ___lwdiv@dividend 0001  
           __CFG_CCP2MX$PORTC 000000                 __pmediumconst FD14                     _lcdNibble E2B8  
                    ?___lwdiv 0001                      ?___lwmod 0008             __size_of_viewLogs 0330  
                    ?_lcdInst 0001                      ?_initLCD 0001           check_food@foodInput 0003  
            ___lwdiv@quotient 0005               ??_decode_drawer 0003                __size_of_putch 0014  
                ??_check_food 0005                      _LCD_LEFT FD41                      _LATDbits 000F8C  
        __end_of_which_drawer E978              __CFG_WDTPS$32768 000000                    ?_lcdNibble 0001  
                ??_diet_press 001B            __end_of_check_food ECA4                 lcdNibble@data 0002  
                  printf@flag 0014                 lcdNibble@temp 0001                    printf@prec 0015  
                ??_get_digits 0003                _LCD_HORZ_LIMIT FD46                 diet_press@sum 0023  
           which_drawer@count 0020            __end_of_diet_press F4D0                  ??_food_press 001D  
          diet_press@keypress 0025                      __Hrparam 0000                 ??_standbyMode 002E  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000            __end_of_get_digits E3F4  
          diet_press@previous 001D              __size_of___lwdiv 0052              __size_of___lwmod 0042  
            __size_of_lcdInst 0014              __size_of_initLCD 004C        __end_of_LCD_HORZ_LIMIT FD47  
          __end_of_food_press E7B2               ___lwdiv@divisor 0003               ___lwdiv@counter 0007  
                    __ptext10 E176                      __ptext11 E1D8                      __ptext12 E266  
                    __ptext13 E21A                      __ptext14 E162                      __ptext15 E2B8  
              _LCD_VERT_LIMIT FD45                 __size_of_main 0038                   ??_lcdNibble 0001  
                    _viewLogs ECA4                     printf@val 0016           __end_of_standbyMode FD14  
    decode_drawer@returnValue 0005              which_drawer@rand 001C                     putch@data 0003  
                  _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT FD46         __size_of_which_drawer 01C6  
   standbyMode@firstIteration 0034                 _LCD_SIZE_HORZ FD44              ___lwmod@dividend 0008  
               _LCD_SIZE_VERT FD43                      printf@ap 0012                   diet_press@i 001F  
                 lcdInst@data 0003                  _which_drawer E7B2               ___lwmod@divisor 000A  
             ___lwmod@counter 000C         check_food@returnValue 0007  
