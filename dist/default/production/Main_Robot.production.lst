

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 10 13:41:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66  0000                     
    67                           ; Version 1.45
    68                           ; Generated 16/11/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4620 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  00AF44                     __pidataCOMRAM:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _UART
   107  00AF44  F0                 	db	low _uart
   108  00AF45  00                 	db	high _uart
   109                           
   110                           ;initializer for _columnRight
   111  00AF46  34                 	db	52
   112                           
   113                           ;initializer for _columnLeft
   114  00AF47  33                 	db	51
   115                           
   116                           ;initializer for _rowDown
   117  00AF48  32                 	db	50
   118                           
   119                           ;initializer for _rowUp
   120  00AF49  31                 	db	49
   121                           
   122                           	psect	idataBANK2
   123  00B06A                     __pidataBANK2:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _inputs
   127  00B06A  FD                 	db	low STR_5
   128  00B06B  FF                 	db	high STR_5
   129  00B06C  E9                 	db	low (STR_13+2)
   130  00B06D  FF                 	db	high (STR_13+2)
   131  00B06E  C0                 	db	low (STR_19+3)
   132  00B06F  FF                 	db	high (STR_19+3)
   133  00B070  EC                 	db	low (STR_11+1)
   134  00B071  FF                 	db	high (STR_11+1)
   135  00B072  F4                 	db	low (STR_12+1)
   136  00B073  FF                 	db	high (STR_12+1)
   137  00B074  BF                 	db	low (STR_19+2)
   138  00B075  FF                 	db	high (STR_19+2)
   139  00B076  EB                 	db	low STR_11
   140  00B077  FF                 	db	high STR_11
   141  00B078  F3                 	db	low STR_12
   142  00B079  FF                 	db	high STR_12
   143  00B07A  E7                 	db	low STR_13
   144  00B07B  FF                 	db	high STR_13
   145  00B07C  EF                 	db	low STR_14
   146  00B07D  FF                 	db	high STR_14
   147  00B07E  C3                 	db	low (STR_18+1)
   148  00B07F  FF                 	db	high (STR_18+1)
   149  00B080  BE                 	db	low (STR_19+1)
   150  00B081  FF                 	db	high (STR_19+1)
   151  00B082  C8                 	db	low (STR_20+1)
   152  00B083  FF                 	db	high (STR_20+1)
   153  00B084  C2                 	db	low STR_18
   154  00B085  FF                 	db	high STR_18
   155  00B086  BD                 	db	low STR_19
   156  00B087  FF                 	db	high STR_19
   157  00B088  C7                 	db	low STR_20
   158  00B089  FF                 	db	high STR_20
   159  00B08A  D1                 	db	low STR_21
   160  00B08B  FF                 	db	high STR_21
   161  00B08C  CC                 	db	low STR_22
   162  00B08D  FF                 	db	high STR_22
   163                           
   164                           ;initializer for _foodInputs
   165  00B08E  BB                 	db	low (STR_35+3)
   166  00B08F  FF                 	db	high (STR_35+3)
   167  00B090  E5                 	db	low (STR_32+2)
   168  00B091  FF                 	db	high (STR_32+2)
   169  00B092  FB                 	db	low (STR_28+1)
   170  00B093  FF                 	db	high (STR_28+1)
   171  00B094  BA                 	db	low (STR_35+2)
   172  00B095  FF                 	db	high (STR_35+2)
   173  00B096  E4                 	db	low (STR_32+1)
   174  00B097  FF                 	db	high (STR_32+1)
   175  00B098  FA                 	db	low STR_28
   176  00B099  FF                 	db	high STR_28
   177  00B09A  E0                 	db	low (STR_33+1)
   178  00B09B  FF                 	db	high (STR_33+1)
   179  00B09C  F7                 	db	low STR_30
   180  00B09D  FF                 	db	high STR_30
   181  00B09E  B9                 	db	low (STR_35+1)
   182  00B09F  FF                 	db	high (STR_35+1)
   183  00B0A0  E3                 	db	low STR_32
   184  00B0A1  FF                 	db	high STR_32
   185  00B0A2  DF                 	db	low STR_33
   186  00B0A3  FF                 	db	high STR_33
   187  00B0A4  DB                 	db	low STR_34
   188  00B0A5  FF                 	db	high STR_34
   189  00B0A6  B8                 	db	low STR_35
   190  00B0A7  FF                 	db	high STR_35
   191                           
   192                           	psect	mediumconst
   193  00FCC2                     __pmediumconst:
   194                           	opt stack 0
   195  00FCC2  00                 	db	0
   196  00FCC3                     _keys:
   197                           	opt stack 0
   198  00FCC3  31                 	db	49
   199  00FCC4  32                 	db	50
   200  00FCC5  33                 	db	51
   201  00FCC6  41                 	db	65
   202  00FCC7  34                 	db	52
   203  00FCC8  35                 	db	53
   204  00FCC9  36                 	db	54
   205  00FCCA  42                 	db	66
   206  00FCCB  37                 	db	55
   207  00FCCC  38                 	db	56
   208  00FCCD  39                 	db	57
   209  00FCCE  43                 	db	67
   210  00FCCF  2A                 	db	42
   211  00FCD0  30                 	db	48
   212  00FCD1  23                 	db	35
   213  00FCD2  44                 	db	68
   214  00FCD3  00                 	db	0
   215  00FCD4                     __end_of_keys:
   216                           	opt stack 0
   217  00FCD4                     _input:
   218                           	opt stack 0
   219  00FCD4  31                 	db	49
   220  00FCD5  32                 	db	50
   221  00FCD6  33                 	db	51
   222  00FCD7  52                 	db	82
   223  00FCD8  34                 	db	52
   224  00FCD9  35                 	db	53
   225  00FCDA  36                 	db	54
   226  00FCDB  46                 	db	70
   227  00FCDC  37                 	db	55
   228  00FCDD  38                 	db	56
   229  00FCDE  39                 	db	57
   230  00FCDF  4C                 	db	76
   231  00FCE0  2A                 	db	42
   232  00FCE1  30                 	db	48
   233  00FCE2  23                 	db	35
   234  00FCE3  44                 	db	68
   235  00FCE4  00                 	db	0
   236  00FCE5                     __end_of_input:
   237                           	opt stack 0
   238  00FCE5                     _dpowers:
   239                           	opt stack 0
   240  00FCE5  0001               	dw	1
   241  00FCE7  000A               	dw	10
   242  00FCE9  0064               	dw	100
   243  00FCEB  03E8               	dw	1000
   244  00FCED  2710               	dw	10000
   245  00FCEF                     __end_of_dpowers:
   246                           	opt stack 0
   247  00FCEF                     _hexpowers:
   248                           	opt stack 0
   249  00FCEF  0001               	dw	1
   250  00FCF1  0010               	dw	16
   251  00FCF3  0100               	dw	256
   252  00FCF5  1000               	dw	4096
   253  00FCF7                     __end_of_hexpowers:
   254                           	opt stack 0
   255  00FCF7                     _happynewyear:
   256                           	opt stack 0
   257  00FCF7  00                 	db	0
   258  00FCF8  28                 	db	40
   259  00FCF9  00                 	db	0
   260  00FCFA  06                 	db	6
   261  00FCFB  24                 	db	36
   262  00FCFC  02                 	db	2
   263  00FCFD  18                 	db	24
   264  00FCFE                     __end_of_happynewyear:
   265                           	opt stack 0
   266  00FCFE                     _LCD_LEFT:
   267                           	opt stack 0
   268  00FCFE  00                 	db	0
   269  00FCFF                     __end_of_LCD_LEFT:
   270                           	opt stack 0
   271  00FCFF                     _LCD_RIGHT:
   272                           	opt stack 0
   273  00FCFF  01                 	db	1
   274  00FD00                     __end_of_LCD_RIGHT:
   275                           	opt stack 0
   276  00FD00                     _LCD_SIZE_VERT:
   277                           	opt stack 0
   278  00FD00  02                 	db	2
   279  00FD01                     __end_of_LCD_SIZE_VERT:
   280                           	opt stack 0
   281  00FD01                     _LCD_SIZE_HORZ:
   282                           	opt stack 0
   283  00FD01  10                 	db	16
   284  00FD02                     __end_of_LCD_SIZE_HORZ:
   285                           	opt stack 0
   286  00FD02                     _LCD_VERT_LIMIT:
   287                           	opt stack 0
   288  00FD02  02                 	db	2
   289  00FD03                     __end_of_LCD_VERT_LIMIT:
   290                           	opt stack 0
   291  00FD03                     _LCD_HORZ_LIMIT:
   292                           	opt stack 0
   293  00FD03  28                 	db	40
   294  00FD04                     __end_of_LCD_HORZ_LIMIT:
   295                           	opt stack 0
   296  0000                     _LATDbits	set	3980
   297  0000                     _SPBRG	set	4015
   298  0000                     _RCREG	set	4014
   299  0000                     _RCSTAbits	set	4011
   300  0000                     _TXREG	set	4013
   301  0000                     _TXSTAbits	set	4012
   302  0000                     _ADRESL	set	4035
   303  0000                     _ADRESH	set	4036
   304  0000                     _ADCON0bits	set	4034
   305  0000                     _SSPBUF	set	4041
   306  0000                     _SSPCON2bits	set	4037
   307  0000                     _SSPADD	set	4040
   308  0000                     _SSPCON2	set	4037
   309  0000                     _SSPCON1	set	4038
   310  0000                     _SSPSTAT	set	4039
   311  0000                     _SSPCON1bits	set	4038
   312  0000                     _EECON2	set	4007
   313  0000                     _INTCONbits	set	4082
   314  0000                     _EEDATA	set	4008
   315  0000                     _EEADR	set	4009
   316  0000                     _EECON1bits	set	4006
   317  0000                     _PORTB	set	3969
   318  0000                     _PORTBbits	set	3969
   319  0000                     _LATCbits	set	3979
   320  0000                     _TRISCbits	set	3988
   321  0000                     _ADCON1	set	4033
   322  0000                     _ADCON0	set	4034
   323  0000                     _TRISE	set	3990
   324  0000                     _TRISD	set	3989
   325  0000                     _TRISC	set	3988
   326  0000                     _TRISB	set	3987
   327  0000                     _TRISA	set	3986
   328  0000                     _LATE	set	3981
   329  0000                     _LATD	set	3980
   330  0000                     _LATC	set	3979
   331  0000                     _LATB	set	3978
   332  0000                     _LATA	set	3977
   333  0000                     _TRISC7	set	31911
   334  0000                     _TRISC6	set	31910
   335  0000                     _RCIE	set	31981
   336  0000                     _RCIF	set	31989
   337  0000                     _TXIE	set	31980
   338  0000                     _TRMT	set	32097
   339  0000                     _TXIF	set	31988
   340  0000                     _ADON	set	32272
   341  00FD04                     STR_58:
   342  00FD04  52                 	db	82	;'R'
   343  00FD05  65                 	db	101	;'e'
   344  00FD06  6D                 	db	109	;'m'
   345  00FD07  61                 	db	97	;'a'
   346  00FD08  69                 	db	105	;'i'
   347  00FD09  6E                 	db	110	;'n'
   348  00FD0A  69                 	db	105	;'i'
   349  00FD0B  6E                 	db	110	;'n'
   350  00FD0C  67                 	db	103	;'g'
   351  00FD0D  20                 	db	32
   352  00FD0E  70                 	db	112	;'p'
   353  00FD0F  69                 	db	105	;'i'
   354  00FD10  65                 	db	101	;'e'
   355  00FD11  63                 	db	99	;'c'
   356  00FD12  65                 	db	101	;'e'
   357  00FD13  73                 	db	115	;'s'
   358  00FD14  3A                 	db	58	;':'
   359  00FD15  00                 	db	0
   360  00FD16                     STR_106:
   361  00FD16  30                 	db	48	;'0'
   362  00FD17  31                 	db	49	;'1'
   363  00FD18  32                 	db	50	;'2'
   364  00FD19  33                 	db	51	;'3'
   365  00FD1A  34                 	db	52	;'4'
   366  00FD1B  35                 	db	53	;'5'
   367  00FD1C  36                 	db	54	;'6'
   368  00FD1D  37                 	db	55	;'7'
   369  00FD1E  38                 	db	56	;'8'
   370  00FD1F  39                 	db	57	;'9'
   371  00FD20  61                 	db	97	;'a'
   372  00FD21  62                 	db	98	;'b'
   373  00FD22  63                 	db	99	;'c'
   374  00FD23  64                 	db	100	;'d'
   375  00FD24  65                 	db	101	;'e'
   376  00FD25  66                 	db	102	;'f'
   377  00FD26  00                 	db	0
   378  00FD27                     STR_89:
   379  00FD27  64                 	db	100	;'d'
   380  00FD28  72                 	db	114	;'r'
   381  00FD29  61                 	db	97	;'a'
   382  00FD2A  77                 	db	119	;'w'
   383  00FD2B  65                 	db	101	;'e'
   384  00FD2C  72                 	db	114	;'r'
   385  00FD2D  73                 	db	115	;'s'
   386  00FD2E  20                 	db	32
   387  00FD2F  72                 	db	114	;'r'
   388  00FD30  65                 	db	101	;'e'
   389  00FD31  61                 	db	97	;'a'
   390  00FD32  63                 	db	99	;'c'
   391  00FD33  68                 	db	104	;'h'
   392  00FD34  65                 	db	101	;'e'
   393  00FD35  64                 	db	100	;'d'
   394  00FD36  21                 	db	33
   395  00FD37  00                 	db	0
   396  00FD38                     STR_77:
   397  00FD38  62                 	db	98	;'b'
   398  00FD39  65                 	db	101	;'e'
   399  00FD3A  67                 	db	103	;'g'
   400  00FD3B  69                 	db	105	;'i'
   401  00FD3C  6E                 	db	110	;'n'
   402  00FD3D  20                 	db	32
   403  00FD3E  6F                 	db	111	;'o'
   404  00FD3F  70                 	db	112	;'p'
   405  00FD40  65                 	db	101	;'e'
   406  00FD41  72                 	db	114	;'r'
   407  00FD42  61                 	db	97	;'a'
   408  00FD43  74                 	db	116	;'t'
   409  00FD44  69                 	db	105	;'i'
   410  00FD45  6F                 	db	111	;'o'
   411  00FD46  6E                 	db	110	;'n'
   412  00FD47  2E                 	db	46
   413  00FD48  00                 	db	0
   414  00FD49                     STR_44:
   415  00FD49  50                 	db	80	;'P'
   416  00FD4A  6C                 	db	108	;'l'
   417  00FD4B  65                 	db	101	;'e'
   418  00FD4C  61                 	db	97	;'a'
   419  00FD4D  73                 	db	115	;'s'
   420  00FD4E  65                 	db	101	;'e'
   421  00FD4F  20                 	db	32
   422  00FD50  69                 	db	105	;'i'
   423  00FD51  6E                 	db	110	;'n'
   424  00FD52  70                 	db	112	;'p'
   425  00FD53  75                 	db	117	;'u'
   426  00FD54  74                 	db	116	;'t'
   427  00FD55  20                 	db	32
   428  00FD56  6C                 	db	108	;'l'
   429  00FD57  6F                 	db	111	;'o'
   430  00FD58  67                 	db	103	;'g'
   431  00FD59  00                 	db	0
   432  00FD5A                     STR_59:
   433  00FD5A  52                 	db	82	;'R'
   434  00FD5B  3A                 	db	58	;':'
   435  00FD5C  25                 	db	37
   436  00FD5D  69                 	db	105	;'i'
   437  00FD5E  20                 	db	32
   438  00FD5F  20                 	db	32
   439  00FD60  46                 	db	70	;'F'
   440  00FD61  3A                 	db	58	;':'
   441  00FD62  25                 	db	37
   442  00FD63  69                 	db	105	;'i'
   443  00FD64  20                 	db	32
   444  00FD65  20                 	db	32
   445  00FD66  4C                 	db	76	;'L'
   446  00FD67  3A                 	db	58	;':'
   447  00FD68  25                 	db	37
   448  00FD69  69                 	db	105	;'i'
   449  00FD6A  00                 	db	0
   450  00FD6B                     STR_40:
   451  00FD6B  50                 	db	80	;'P'
   452  00FD6C  72                 	db	114	;'r'
   453  00FD6D  65                 	db	101	;'e'
   454  00FD6E  73                 	db	115	;'s'
   455  00FD6F  73                 	db	115	;'s'
   456  00FD70  20                 	db	32
   457  00FD71  61                 	db	97	;'a'
   458  00FD72  6E                 	db	110	;'n'
   459  00FD73  79                 	db	121	;'y'
   460  00FD74  20                 	db	32
   461  00FD75  6B                 	db	107	;'k'
   462  00FD76  65                 	db	101	;'e'
   463  00FD77  79                 	db	121	;'y'
   464  00FD78  20                 	db	32
   465  00FD79  74                 	db	116	;'t'
   466  00FD7A  6F                 	db	111	;'o'
   467  00FD7B  00                 	db	0
   468  00FD7C                     STR_42:
   469  00FD7C  25                 	db	37
   470  00FD7D  69                 	db	105	;'i'
   471  00FD7E  20                 	db	32
   472  00FD7F  70                 	db	112	;'p'
   473  00FD80  72                 	db	114	;'r'
   474  00FD81  65                 	db	101	;'e'
   475  00FD82  76                 	db	118	;'v'
   476  00FD83  69                 	db	105	;'i'
   477  00FD84  6F                 	db	111	;'o'
   478  00FD85  75                 	db	117	;'u'
   479  00FD86  73                 	db	115	;'s'
   480  00FD87  20                 	db	32
   481  00FD88  6C                 	db	108	;'l'
   482  00FD89  6F                 	db	111	;'o'
   483  00FD8A  67                 	db	103	;'g'
   484  00FD8B  73                 	db	115	;'s'
   485  00FD8C  00                 	db	0
   486  00FD8D                     STR_79:
   487  00FD8D  63                 	db	99	;'c'
   488  00FD8E  61                 	db	97	;'a'
   489  00FD8F  62                 	db	98	;'b'
   490  00FD90  69                 	db	105	;'i'
   491  00FD91  6E                 	db	110	;'n'
   492  00FD92  65                 	db	101	;'e'
   493  00FD93  74                 	db	116	;'t'
   494  00FD94  20                 	db	32
   495  00FD95  73                 	db	115	;'s'
   496  00FD96  6F                 	db	111	;'o'
   497  00FD97  72                 	db	114	;'r'
   498  00FD98  74                 	db	116	;'t'
   499  00FD99  65                 	db	101	;'e'
   500  00FD9A  72                 	db	114	;'r'
   501  00FD9B  21                 	db	33
   502  00FD9C  00                 	db	0
   503  00FD9D                     STR_93:
   504  00FD9D  6E                 	db	110	;'n'
   505  00FD9E  75                 	db	117	;'u'
   506  00FD9F  6D                 	db	109	;'m'
   507  00FDA0  62                 	db	98	;'b'
   508  00FDA1  65                 	db	101	;'e'
   509  00FDA2  72                 	db	114	;'r'
   510  00FDA3  20                 	db	32
   511  00FDA4  70                 	db	112	;'p'
   512  00FDA5  72                 	db	114	;'r'
   513  00FDA6  65                 	db	101	;'e'
   514  00FDA7  73                 	db	115	;'s'
   515  00FDA8  73                 	db	115	;'s'
   516  00FDA9  65                 	db	101	;'e'
   517  00FDAA  64                 	db	100	;'d'
   518  00FDAB  2E                 	db	46
   519  00FDAC  00                 	db	0
   520  00FDAD                     STR_65:
   521  00FDAD  44                 	db	68	;'D'
   522  00FDAE  72                 	db	114	;'r'
   523  00FDAF  61                 	db	97	;'a'
   524  00FDB0  77                 	db	119	;'w'
   525  00FDB1  65                 	db	101	;'e'
   526  00FDB2  72                 	db	114	;'r'
   527  00FDB3  20                 	db	32
   528  00FDB4  25                 	db	37
   529  00FDB5  69                 	db	105	;'i'
   530  00FDB6  20                 	db	32
   531  00FDB7  66                 	db	102	;'f'
   532  00FDB8  6F                 	db	111	;'o'
   533  00FDB9  6F                 	db	111	;'o'
   534  00FDBA  64                 	db	100	;'d'
   535  00FDBB  3A                 	db	58	;':'
   536  00FDBC  00                 	db	0
   537  00FDBD                     STR_51:
   538  00FDBD  4F                 	db	79	;'O'
   539  00FDBE  70                 	db	112	;'p'
   540  00FDBF  65                 	db	101	;'e'
   541  00FDC0  72                 	db	114	;'r'
   542  00FDC1  61                 	db	97	;'a'
   543  00FDC2  74                 	db	116	;'t'
   544  00FDC3  69                 	db	105	;'i'
   545  00FDC4  6F                 	db	111	;'o'
   546  00FDC5  6E                 	db	110	;'n'
   547  00FDC6  20                 	db	32
   548  00FDC7  74                 	db	116	;'t'
   549  00FDC8  69                 	db	105	;'i'
   550  00FDC9  6D                 	db	109	;'m'
   551  00FDCA  65                 	db	101	;'e'
   552  00FDCB  3A                 	db	58	;':'
   553  00FDCC  00                 	db	0
   554  00FDCD                     STR_53:
   555  00FDCD  4D                 	db	77	;'M'
   556  00FDCE  61                 	db	97	;'a'
   557  00FDCF  72                 	db	114	;'r'
   558  00FDD0  6B                 	db	107	;'k'
   559  00FDD1  65                 	db	101	;'e'
   560  00FDD2  64                 	db	100	;'d'
   561  00FDD3  20                 	db	32
   562  00FDD4  64                 	db	100	;'d'
   563  00FDD5  72                 	db	114	;'r'
   564  00FDD6  61                 	db	97	;'a'
   565  00FDD7  77                 	db	119	;'w'
   566  00FDD8  65                 	db	101	;'e'
   567  00FDD9  72                 	db	114	;'r'
   568  00FDDA  73                 	db	115	;'s'
   569  00FDDB  3A                 	db	58	;':'
   570  00FDDC  00                 	db	0
   571  00FDDD                     STR_69:
   572  00FDDD  44                 	db	68	;'D'
   573  00FDDE  72                 	db	114	;'r'
   574  00FDDF  61                 	db	97	;'a'
   575  00FDE0  77                 	db	119	;'w'
   576  00FDE1  65                 	db	101	;'e'
   577  00FDE2  72                 	db	114	;'r'
   578  00FDE3  20                 	db	32
   579  00FDE4  25                 	db	37
   580  00FDE5  69                 	db	105	;'i'
   581  00FDE6  20                 	db	32
   582  00FDE7  64                 	db	100	;'d'
   583  00FDE8  69                 	db	105	;'i'
   584  00FDE9  65                 	db	101	;'e'
   585  00FDEA  74                 	db	116	;'t'
   586  00FDEB  3A                 	db	58	;':'
   587  00FDEC  00                 	db	0
   588  00FDED                     STR_90:
   589  00FDED  41                 	db	65	;'A'
   590  00FDEE  6E                 	db	110	;'n'
   591  00FDEF  6F                 	db	111	;'o'
   592  00FDF0  74                 	db	116	;'t'
   593  00FDF1  68                 	db	104	;'h'
   594  00FDF2  65                 	db	101	;'e'
   595  00FDF3  72                 	db	114	;'r'
   596  00FDF4  20                 	db	32
   597  00FDF5  64                 	db	100	;'d'
   598  00FDF6  72                 	db	114	;'r'
   599  00FDF7  61                 	db	97	;'a'
   600  00FDF8  77                 	db	119	;'w'
   601  00FDF9  65                 	db	101	;'e'
   602  00FDFA  72                 	db	114	;'r'
   603  00FDFB  3F                 	db	63	;'?'
   604  00FDFC  00                 	db	0
   605  00FDFD                     STR_78:
   606  00FDFD  57                 	db	87	;'W'
   607  00FDFE  65                 	db	101	;'e'
   608  00FDFF  6C                 	db	108	;'l'
   609  00FE00  63                 	db	99	;'c'
   610  00FE01  6F                 	db	111	;'o'
   611  00FE02  6D                 	db	109	;'m'
   612  00FE03  65                 	db	101	;'e'
   613  00FE04  20                 	db	32
   614  00FE05  74                 	db	116	;'t'
   615  00FE06  6F                 	db	111	;'o'
   616  00FE07  20                 	db	32
   617  00FE08  79                 	db	121	;'y'
   618  00FE09  6F                 	db	111	;'o'
   619  00FE0A  75                 	db	117	;'u'
   620  00FE0B  72                 	db	114	;'r'
   621  00FE0C  00                 	db	0
   622  00FE0D                     STR_64:
   623  00FE0D  23                 	db	35
   624  00FE0E  20                 	db	32
   625  00FE0F  3D                 	db	61	;'='
   626  00FE10  20                 	db	32
   627  00FE11  4E                 	db	78	;'N'
   628  00FE12  6F                 	db	111	;'o'
   629  00FE13  2C                 	db	44
   630  00FE14  20                 	db	32
   631  00FE15  44                 	db	68	;'D'
   632  00FE16  20                 	db	32
   633  00FE17  3D                 	db	61	;'='
   634  00FE18  20                 	db	32
   635  00FE19  59                 	db	89	;'Y'
   636  00FE1A  65                 	db	101	;'e'
   637  00FE1B  73                 	db	115	;'s'
   638  00FE1C  00                 	db	0
   639  00FE1D                     STR_2:
   640  00FE1D  43                 	db	67	;'C'
   641  00FE1E  6C                 	db	108	;'l'
   642  00FE1F  65                 	db	101	;'e'
   643  00FE20  61                 	db	97	;'a'
   644  00FE21  72                 	db	114	;'r'
   645  00FE22  69                 	db	105	;'i'
   646  00FE23  6E                 	db	110	;'n'
   647  00FE24  67                 	db	103	;'g'
   648  00FE25  20                 	db	32
   649  00FE26  45                 	db	69	;'E'
   650  00FE27  45                 	db	69	;'E'
   651  00FE28  50                 	db	80	;'P'
   652  00FE29  52                 	db	82	;'R'
   653  00FE2A  4F                 	db	79	;'O'
   654  00FE2B  4D                 	db	77	;'M'
   655  00FE2C  00                 	db	0
   656  00FE2D                     STR_73:
   657  00FE2D  44                 	db	68	;'D'
   658  00FE2E  72                 	db	114	;'r'
   659  00FE2F  61                 	db	97	;'a'
   660  00FE30  77                 	db	119	;'w'
   661  00FE31  65                 	db	101	;'e'
   662  00FE32  72                 	db	114	;'r'
   663  00FE33  20                 	db	32
   664  00FE34  6E                 	db	110	;'n'
   665  00FE35  75                 	db	117	;'u'
   666  00FE36  6D                 	db	109	;'m'
   667  00FE37  62                 	db	98	;'b'
   668  00FE38  65                 	db	101	;'e'
   669  00FE39  72                 	db	114	;'r'
   670  00FE3A  3A                 	db	58	;':'
   671  00FE3B  00                 	db	0
   672  00FE3C                     STR_60:
   673  00FE3C  49                 	db	73	;'I'
   674  00FE3D  6E                 	db	110	;'n'
   675  00FE3E  70                 	db	112	;'p'
   676  00FE3F  75                 	db	117	;'u'
   677  00FE40  74                 	db	116	;'t'
   678  00FE41  20                 	db	32
   679  00FE42  53                 	db	83	;'S'
   680  00FE43  75                 	db	117	;'u'
   681  00FE44  6D                 	db	109	;'m'
   682  00FE45  6D                 	db	109	;'m'
   683  00FE46  61                 	db	97	;'a'
   684  00FE47  72                 	db	114	;'r'
   685  00FE48  79                 	db	121	;'y'
   686  00FE49  3A                 	db	58	;':'
   687  00FE4A  00                 	db	0
   688  00FE4B                     STR_38:
   689  00FE4B  31                 	db	49	;'1'
   690  00FE4C  20                 	db	32
   691  00FE4D  70                 	db	112	;'p'
   692  00FE4E  72                 	db	114	;'r'
   693  00FE4F  65                 	db	101	;'e'
   694  00FE50  76                 	db	118	;'v'
   695  00FE51  69                 	db	105	;'i'
   696  00FE52  6F                 	db	111	;'o'
   697  00FE53  75                 	db	117	;'u'
   698  00FE54  73                 	db	115	;'s'
   699  00FE55  20                 	db	32
   700  00FE56  6C                 	db	108	;'l'
   701  00FE57  6F                 	db	111	;'o'
   702  00FE58  67                 	db	103	;'g'
   703  00FE59  00                 	db	0
   704  00FE5A                     STR_57:
   705  00FE5A  25                 	db	37
   706  00FE5B  69                 	db	105	;'i'
   707  00FE5C  2C                 	db	44
   708  00FE5D  20                 	db	32
   709  00FE5E  25                 	db	37
   710  00FE5F  69                 	db	105	;'i'
   711  00FE60  2C                 	db	44
   712  00FE61  20                 	db	32
   713  00FE62  25                 	db	37
   714  00FE63  69                 	db	105	;'i'
   715  00FE64  2C                 	db	44
   716  00FE65  20                 	db	32
   717  00FE66  25                 	db	37
   718  00FE67  69                 	db	105	;'i'
   719  00FE68  00                 	db	0
   720  00FE69                     STR_50:
   721  00FE69  25                 	db	37
   722  00FE6A  30                 	db	48	;'0'
   723  00FE6B  32                 	db	50	;'2'
   724  00FE6C  69                 	db	105	;'i'
   725  00FE6D  2F                 	db	47
   726  00FE6E  25                 	db	37
   727  00FE6F  30                 	db	48	;'0'
   728  00FE70  32                 	db	50	;'2'
   729  00FE71  69                 	db	105	;'i'
   730  00FE72  2F                 	db	47
   731  00FE73  25                 	db	37
   732  00FE74  30                 	db	48	;'0'
   733  00FE75  32                 	db	50	;'2'
   734  00FE76  69                 	db	105	;'i'
   735  00FE77  00                 	db	0
   736  00FE78                     STR_82:
   737  00FE78  25                 	db	37
   738  00FE79  30                 	db	48	;'0'
   739  00FE7A  32                 	db	50	;'2'
   740  00FE7B  78                 	db	120	;'x'
   741  00FE7C  2F                 	db	47
   742  00FE7D  25                 	db	37
   743  00FE7E  30                 	db	48	;'0'
   744  00FE7F  32                 	db	50	;'2'
   745  00FE80  78                 	db	120	;'x'
   746  00FE81  2F                 	db	47
   747  00FE82  25                 	db	37
   748  00FE83  30                 	db	48	;'0'
   749  00FE84  32                 	db	50	;'2'
   750  00FE85  78                 	db	120	;'x'
   751  00FE86  00                 	db	0
   752  00FE87                     STR_83:
   753  00FE87  25                 	db	37
   754  00FE88  30                 	db	48	;'0'
   755  00FE89  32                 	db	50	;'2'
   756  00FE8A  78                 	db	120	;'x'
   757  00FE8B  3A                 	db	58	;':'
   758  00FE8C  25                 	db	37
   759  00FE8D  30                 	db	48	;'0'
   760  00FE8E  32                 	db	50	;'2'
   761  00FE8F  78                 	db	120	;'x'
   762  00FE90  3A                 	db	58	;':'
   763  00FE91  25                 	db	37
   764  00FE92  30                 	db	48	;'0'
   765  00FE93  32                 	db	50	;'2'
   766  00FE94  78                 	db	120	;'x'
   767  00FE95  00                 	db	0
   768  00FE96                     STR_94:
   769  00FE96  44                 	db	68	;'D'
   770  00FE97  72                 	db	114	;'r'
   771  00FE98  61                 	db	97	;'a'
   772  00FE99  77                 	db	119	;'w'
   773  00FE9A  65                 	db	101	;'e'
   774  00FE9B  72                 	db	114	;'r'
   775  00FE9C  20                 	db	32
   776  00FE9D  61                 	db	97	;'a'
   777  00FE9E  6C                 	db	108	;'l'
   778  00FE9F  72                 	db	114	;'r'
   779  00FEA0  65                 	db	101	;'e'
   780  00FEA1  61                 	db	97	;'a'
   781  00FEA2  64                 	db	100	;'d'
   782  00FEA3  79                 	db	121	;'y'
   783  00FEA4  00                 	db	0
   784  00FEA5                     STR_67:
   785  00FEA5  49                 	db	73	;'I'
   786  00FEA6  6E                 	db	110	;'n'
   787  00FEA7  76                 	db	118	;'v'
   788  00FEA8  61                 	db	97	;'a'
   789  00FEA9  6C                 	db	108	;'l'
   790  00FEAA  69                 	db	105	;'i'
   791  00FEAB  64                 	db	100	;'d'
   792  00FEAC  20                 	db	32
   793  00FEAD  66                 	db	102	;'f'
   794  00FEAE  6F                 	db	111	;'o'
   795  00FEAF  6F                 	db	111	;'o'
   796  00FEB0  64                 	db	100	;'d'
   797  00FEB1  21                 	db	33
   798  00FEB2  00                 	db	0
   799  00FEB3                     STR_71:
   800  00FEB3  49                 	db	73	;'I'
   801  00FEB4  6E                 	db	110	;'n'
   802  00FEB5  76                 	db	118	;'v'
   803  00FEB6  61                 	db	97	;'a'
   804  00FEB7  6C                 	db	108	;'l'
   805  00FEB8  69                 	db	105	;'i'
   806  00FEB9  64                 	db	100	;'d'
   807  00FEBA  20                 	db	32
   808  00FEBB  64                 	db	100	;'d'
   809  00FEBC  69                 	db	105	;'i'
   810  00FEBD  65                 	db	101	;'e'
   811  00FEBE  74                 	db	116	;'t'
   812  00FEBF  21                 	db	33
   813  00FEC0  00                 	db	0
   814  00FEC1                     STR_41:
   815  00FEC1  6D                 	db	109	;'m'
   816  00FEC2  6F                 	db	111	;'o'
   817  00FEC3  76                 	db	118	;'v'
   818  00FEC4  65                 	db	101	;'e'
   819  00FEC5  20                 	db	32
   820  00FEC6  66                 	db	102	;'f'
   821  00FEC7  6F                 	db	111	;'o'
   822  00FEC8  72                 	db	114	;'r'
   823  00FEC9  77                 	db	119	;'w'
   824  00FECA  61                 	db	97	;'a'
   825  00FECB  72                 	db	114	;'r'
   826  00FECC  64                 	db	100	;'d'
   827  00FECD  2E                 	db	46
   828  00FECE  00                 	db	0
   829  00FECF                     STR_86:
   830  00FECF  6F                 	db	111	;'o'
   831  00FED0  72                 	db	114	;'r'
   832  00FED1  20                 	db	32
   833  00FED2  70                 	db	112	;'p'
   834  00FED3  72                 	db	114	;'r'
   835  00FED4  65                 	db	101	;'e'
   836  00FED5  73                 	db	115	;'s'
   837  00FED6  73                 	db	115	;'s'
   838  00FED7  20                 	db	32
   839  00FED8  44                 	db	68	;'D'
   840  00FED9  20                 	db	32
   841  00FEDA  74                 	db	116	;'t'
   842  00FEDB  6F                 	db	111	;'o'
   843  00FEDC  00                 	db	0
   844  00FEDD                     STR_101:
   845  00FEDD  49                 	db	73	;'I'
   846  00FEDE  6E                 	db	110	;'n'
   847  00FEDF  76                 	db	118	;'v'
   848  00FEE0  61                 	db	97	;'a'
   849  00FEE1  6C                 	db	108	;'l'
   850  00FEE2  69                 	db	105	;'i'
   851  00FEE3  64                 	db	100	;'d'
   852  00FEE4  20                 	db	32
   853  00FEE5  6B                 	db	107	;'k'
   854  00FEE6  65                 	db	101	;'e'
   855  00FEE7  79                 	db	121	;'y'
   856  00FEE8  21                 	db	33
   857  00FEE9  00                 	db	0
   858  00FEEA                     STR_88:
   859  00FEEA  4D                 	db	77	;'M'
   860  00FEEB  61                 	db	97	;'a'
   861  00FEEC  78                 	db	120	;'x'
   862  00FEED  69                 	db	105	;'i'
   863  00FEEE  6D                 	db	109	;'m'
   864  00FEEF  75                 	db	117	;'u'
   865  00FEF0  6D                 	db	109	;'m'
   866  00FEF1  20                 	db	32
   867  00FEF2  6F                 	db	111	;'o'
   868  00FEF3  66                 	db	102	;'f'
   869  00FEF4  20                 	db	32
   870  00FEF5  38                 	db	56	;'8'
   871  00FEF6  00                 	db	0
   872  00FEF7                     STR_63:
   873  00FEF7  41                 	db	65	;'A'
   874  00FEF8  6E                 	db	110	;'n'
   875  00FEF9  6F                 	db	111	;'o'
   876  00FEFA  74                 	db	116	;'t'
   877  00FEFB  68                 	db	104	;'h'
   878  00FEFC  65                 	db	101	;'e'
   879  00FEFD  72                 	db	114	;'r'
   880  00FEFE  20                 	db	32
   881  00FEFF  6C                 	db	108	;'l'
   882  00FF00  6F                 	db	111	;'o'
   883  00FF01  67                 	db	103	;'g'
   884  00FF02  3F                 	db	63	;'?'
   885  00FF03  00                 	db	0
   886  00FF04                     STR_80:
   887  00FF04  43                 	db	67	;'C'
   888  00FF05  75                 	db	117	;'u'
   889  00FF06  72                 	db	114	;'r'
   890  00FF07  72                 	db	114	;'r'
   891  00FF08  65                 	db	101	;'e'
   892  00FF09  6E                 	db	110	;'n'
   893  00FF0A  74                 	db	116	;'t'
   894  00FF0B  20                 	db	32
   895  00FF0C  64                 	db	100	;'d'
   896  00FF0D  61                 	db	97	;'a'
   897  00FF0E  74                 	db	116	;'t'
   898  00FF0F  65                 	db	101	;'e'
   899  00FF10  00                 	db	0
   900  00FF11                     STR_85:
   901  00FF11  76                 	db	118	;'v'
   902  00FF12  69                 	db	105	;'i'
   903  00FF13  65                 	db	101	;'e'
   904  00FF14  77                 	db	119	;'w'
   905  00FF15  20                 	db	32
   906  00FF16  6C                 	db	108	;'l'
   907  00FF17  6F                 	db	111	;'o'
   908  00FF18  67                 	db	103	;'g'
   909  00FF19  73                 	db	115	;'s'
   910  00FF1A  2C                 	db	44
   911  00FF1B  00                 	db	0
   912  00FF1C                     STR_37:
   913  00FF1C  61                 	db	97	;'a'
   914  00FF1D  76                 	db	118	;'v'
   915  00FF1E  61                 	db	97	;'a'
   916  00FF1F  69                 	db	105	;'i'
   917  00FF20  6C                 	db	108	;'l'
   918  00FF21  61                 	db	97	;'a'
   919  00FF22  62                 	db	98	;'b'
   920  00FF23  6C                 	db	108	;'l'
   921  00FF24  65                 	db	101	;'e'
   922  00FF25  2E                 	db	46
   923  00FF26  00                 	db	0
   924  00FF27                     STR_100:
   925  00FF27  52                 	db	82	;'R'
   926  00FF28  65                 	db	101	;'e'
   927  00FF29  62                 	db	98	;'b'
   928  00FF2A  6F                 	db	111	;'o'
   929  00FF2B  6F                 	db	111	;'o'
   930  00FF2C  74                 	db	116	;'t'
   931  00FF2D  69                 	db	105	;'i'
   932  00FF2E  6E                 	db	110	;'n'
   933  00FF2F  67                 	db	103	;'g'
   934  00FF30  2E                 	db	46
   935  00FF31  00                 	db	0
   936  00FF32                     STR_68:
   937  00FF32  54                 	db	84	;'T'
   938  00FF33  72                 	db	114	;'r'
   939  00FF34  79                 	db	121	;'y'
   940  00FF35  20                 	db	32
   941  00FF36  61                 	db	97	;'a'
   942  00FF37  67                 	db	103	;'g'
   943  00FF38  61                 	db	97	;'a'
   944  00FF39  69                 	db	105	;'i'
   945  00FF3A  6E                 	db	110	;'n'
   946  00FF3B  2E                 	db	46
   947  00FF3C  00                 	db	0
   948  00FF3D                     STR_61:
   949  00FF3D  44                 	db	68	;'D'
   950  00FF3E  72                 	db	114	;'r'
   951  00FF3F  61                 	db	97	;'a'
   952  00FF40  77                 	db	119	;'w'
   953  00FF41  65                 	db	101	;'e'
   954  00FF42  72                 	db	114	;'r'
   955  00FF43  20                 	db	32
   956  00FF44  25                 	db	37
   957  00FF45  69                 	db	105	;'i'
   958  00FF46  3A                 	db	58	;':'
   959  00FF47  00                 	db	0
   960  00FF48                     STR_84:
   961  00FF48  50                 	db	80	;'P'
   962  00FF49  72                 	db	114	;'r'
   963  00FF4A  65                 	db	101	;'e'
   964  00FF4B  73                 	db	115	;'s'
   965  00FF4C  73                 	db	115	;'s'
   966  00FF4D  20                 	db	32
   967  00FF4E  23                 	db	35
   968  00FF4F  20                 	db	32
   969  00FF50  74                 	db	116	;'t'
   970  00FF51  6F                 	db	111	;'o'
   971  00FF52  00                 	db	0
   972  00FF53                     STR_81:
   973  00FF53  61                 	db	97	;'a'
   974  00FF54  6E                 	db	110	;'n'
   975  00FF55  64                 	db	100	;'d'
   976  00FF56  20                 	db	32
   977  00FF57  74                 	db	116	;'t'
   978  00FF58  69                 	db	105	;'i'
   979  00FF59  6D                 	db	109	;'m'
   980  00FF5A  65                 	db	101	;'e'
   981  00FF5B  3A                 	db	58	;':'
   982  00FF5C  00                 	db	0
   983  00FF5D                     STR_92:
   984  00FF5D  4E                 	db	78	;'N'
   985  00FF5E  6F                 	db	111	;'o'
   986  00FF5F  20                 	db	32
   987  00FF60  64                 	db	100	;'d'
   988  00FF61  72                 	db	114	;'r'
   989  00FF62  61                 	db	97	;'a'
   990  00FF63  77                 	db	119	;'w'
   991  00FF64  65                 	db	101	;'e'
   992  00FF65  72                 	db	114	;'r'
   993  00FF66  00                 	db	0
   994  00FF67                     STR_4:
   995  00FF67  64                 	db	100	;'d'
   996  00FF68  72                 	db	114	;'r'
   997  00FF69  61                 	db	97	;'a'
   998  00FF6A  77                 	db	119	;'w'
   999  00FF6B  65                 	db	101	;'e'
  1000  00FF6C  72                 	db	114	;'r'
  1001  00FF6D  20                 	db	32
  1002  00FF6E  25                 	db	37
  1003  00FF6F  69                 	db	105	;'i'
  1004  00FF70  00                 	db	0
  1005  00FF71                     STR_3:
  1006  00FF71  4D                 	db	77	;'M'
  1007  00FF72  6F                 	db	111	;'o'
  1008  00FF73  76                 	db	118	;'v'
  1009  00FF74  69                 	db	105	;'i'
  1010  00FF75  6E                 	db	110	;'n'
  1011  00FF76  67                 	db	103	;'g'
  1012  00FF77  20                 	db	32
  1013  00FF78  74                 	db	116	;'t'
  1014  00FF79  6F                 	db	111	;'o'
  1015  00FF7A  00                 	db	0
  1016  00FF7B                     STR_45:
  1017  00FF7B  6E                 	db	110	;'n'
  1018  00FF7C  75                 	db	117	;'u'
  1019  00FF7D  6D                 	db	109	;'m'
  1020  00FF7E  62                 	db	98	;'b'
  1021  00FF7F  65                 	db	101	;'e'
  1022  00FF80  72                 	db	114	;'r'
  1023  00FF81  3A                 	db	58	;':'
  1024  00FF82  20                 	db	32
  1025  00FF83  00                 	db	0
  1026  00FF84                     STR_95:
  1027  00FF84  69                 	db	105	;'i'
  1028  00FF85  6E                 	db	110	;'n'
  1029  00FF86  20                 	db	32
  1030  00FF87  75                 	db	117	;'u'
  1031  00FF88  73                 	db	115	;'s'
  1032  00FF89  65                 	db	101	;'e'
  1033  00FF8A  21                 	db	33
  1034  00FF8B  00                 	db	0
  1035  00FF8C                     STR_52:
  1036  00FF8C  25                 	db	37
  1037  00FF8D  69                 	db	105	;'i'
  1038  00FF8E  3A                 	db	58	;':'
  1039  00FF8F  25                 	db	37
  1040  00FF90  30                 	db	48	;'0'
  1041  00FF91  32                 	db	50	;'2'
  1042  00FF92  69                 	db	105	;'i'
  1043  00FF93  00                 	db	0
  1044  00FF94                     STR_36:
  1045  00FF94  4E                 	db	78	;'N'
  1046  00FF95  6F                 	db	111	;'o'
  1047  00FF96  20                 	db	32
  1048  00FF97  6C                 	db	108	;'l'
  1049  00FF98  6F                 	db	111	;'o'
  1050  00FF99  67                 	db	103	;'g'
  1051  00FF9A  73                 	db	115	;'s'
  1052  00FF9B  00                 	db	0
  1053  00FF9C                     STR_1:
  1054  00FF9C  53                 	db	83	;'S'
  1055  00FF9D  74                 	db	116	;'t'
  1056  00FF9E  61                 	db	97	;'a'
  1057  00FF9F  6E                 	db	110	;'n'
  1058  00FFA0  64                 	db	100	;'d'
  1059  00FFA1  62                 	db	98	;'b'
  1060  00FFA2  79                 	db	121	;'y'
  1061  00FFA3  00                 	db	0
  1062  00FFA4                     STR_105:
  1063  00FFA4  28                 	db	40
  1064  00FFA5  6E                 	db	110	;'n'
  1065  00FFA6  75                 	db	117	;'u'
  1066  00FFA7  6C                 	db	108	;'l'
  1067  00FFA8  6C                 	db	108	;'l'
  1068  00FFA9  29                 	db	41
  1069  00FFAA  00                 	db	0
  1070  00FFAB                     STR_46:
  1071  00FFAB  47                 	db	71	;'G'
  1072  00FFAC  72                 	db	114	;'r'
  1073  00FFAD  65                 	db	101	;'e'
  1074  00FFAE  61                 	db	97	;'a'
  1075  00FFAF  74                 	db	116	;'t'
  1076  00FFB0  21                 	db	33
  1077  00FFB1  00                 	db	0
  1078  00FFB2                     STR_49:
  1079  00FFB2  44                 	db	68	;'D'
  1080  00FFB3  61                 	db	97	;'a'
  1081  00FFB4  74                 	db	116	;'t'
  1082  00FFB5  65                 	db	101	;'e'
  1083  00FFB6  3A                 	db	58	;':'
  1084  00FFB7  00                 	db	0
  1085  00FFB8                     STR_35:
  1086  00FFB8  31                 	db	49	;'1'
  1087  00FFB9  31                 	db	49	;'1'
  1088  00FFBA  31                 	db	49	;'1'
  1089  00FFBB  31                 	db	49	;'1'
  1090  00FFBC  00                 	db	0
  1091  00FFBD                     STR_19:
  1092  00FFBD  52                 	db	82	;'R'
  1093  00FFBE  46                 	db	70	;'F'
  1094  00FFBF  46                 	db	70	;'F'
  1095  00FFC0  4C                 	db	76	;'L'
  1096  00FFC1  00                 	db	0
  1097  00FFC2                     STR_18:
  1098  00FFC2  52                 	db	82	;'R'
  1099  00FFC3  52                 	db	82	;'R'
  1100  00FFC4  46                 	db	70	;'F'
  1101  00FFC5  4C                 	db	76	;'L'
  1102  00FFC6  00                 	db	0
  1103  00FFC7                     STR_20:
  1104  00FFC7  52                 	db	82	;'R'
  1105  00FFC8  46                 	db	70	;'F'
  1106  00FFC9  4C                 	db	76	;'L'
  1107  00FFCA  4C                 	db	76	;'L'
  1108  00FFCB  00                 	db	0
  1109  00FFCC                     STR_22:
  1110  00FFCC  46                 	db	70	;'F'
  1111  00FFCD  4C                 	db	76	;'L'
  1112  00FFCE  4C                 	db	76	;'L'
  1113  00FFCF  4C                 	db	76	;'L'
  1114  00FFD0  00                 	db	0
  1115  00FFD1                     STR_21:
  1116  00FFD1  52                 	db	82	;'R'
  1117  00FFD2  4C                 	db	76	;'L'
  1118  00FFD3  4C                 	db	76	;'L'
  1119  00FFD4  4C                 	db	76	;'L'
  1120  00FFD5  00                 	db	0
  1121  00FFD6                     STR_62:
  1122  00FFD6  25                 	db	37
  1123  00FFD7  73                 	db	115	;'s'
  1124  00FFD8  25                 	db	37
  1125  00FFD9  73                 	db	115	;'s'
  1126  00FFDA  00                 	db	0
  1127  00FFDB                     STR_34:
  1128  00FFDB  32                 	db	50	;'2'
  1129  00FFDC  31                 	db	49	;'1'
  1130  00FFDD  31                 	db	49	;'1'
  1131  00FFDE  00                 	db	0
  1132  00FFDF                     STR_33:
  1133  00FFDF  31                 	db	49	;'1'
  1134  00FFE0  32                 	db	50	;'2'
  1135  00FFE1  31                 	db	49	;'1'
  1136  00FFE2  00                 	db	0
  1137  00FFE3                     STR_32:
  1138  00FFE3  31                 	db	49	;'1'
  1139  00FFE4  31                 	db	49	;'1'
  1140  00FFE5  32                 	db	50	;'2'
  1141  00FFE6  00                 	db	0
  1142  00FFE7                     STR_13:
  1143  00FFE7  52                 	db	82	;'R'
  1144  00FFE8  46                 	db	70	;'F'
  1145  00FFE9  46                 	db	70	;'F'
  1146  00FFEA  00                 	db	0
  1147  00FFEB                     STR_11:
  1148  00FFEB  52                 	db	82	;'R'
  1149  00FFEC  52                 	db	82	;'R'
  1150  00FFED  46                 	db	70	;'F'
  1151  00FFEE  00                 	db	0
  1152  00FFEF                     STR_14:
  1153  00FFEF  52                 	db	82	;'R'
  1154  00FFF0  4C                 	db	76	;'L'
  1155  00FFF1  4C                 	db	76	;'L'
  1156  00FFF2  00                 	db	0
  1157  00FFF3                     STR_12:
  1158  00FFF3  52                 	db	82	;'R'
  1159  00FFF4  52                 	db	82	;'R'
  1160  00FFF5  4C                 	db	76	;'L'
  1161  00FFF6  00                 	db	0
  1162  00FFF7                     STR_30:
  1163  00FFF7  32                 	db	50	;'2'
  1164  00FFF8  32                 	db	50	;'2'
  1165  00FFF9  00                 	db	0
  1166  00FFFA                     STR_28:
  1167  00FFFA  31                 	db	49	;'1'
  1168  00FFFB  33                 	db	51	;'3'
  1169  00FFFC  00                 	db	0
  1170  00FFFD                     STR_5:
  1171  00FFFD  52                 	db	82	;'R'
  1172  00FFFE  00                 	db	0
  1173  0000                     
  1174                           ; #config settings
  1175  00FFFF  00                 	db	0	; dummy byte at the end
  1176  0000                     
  1177                           	psect	cinit
  1178  00B316                     __pcinit:
  1179                           	opt stack 0
  1180  00B316                     start_initialization:
  1181                           	opt stack 0
  1182  00B316                     __initialization:
  1183                           	opt stack 0
  1184                           
  1185                           ; Initialize objects allocated to BANK2 (62 bytes)
  1186                           ; load TBLPTR registers with __pidataBANK2
  1187  00B316  0E6A               	movlw	low __pidataBANK2
  1188  00B318  6EF6               	movwf	tblptrl,c
  1189  00B31A  0EB0               	movlw	high __pidataBANK2
  1190  00B31C  6EF7               	movwf	tblptrh,c
  1191  00B31E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1192  00B320  6EF8               	movwf	tblptru,c
  1193  00B322  EE02  F040         	lfsr	0,__pdataBANK2
  1194  00B326  EE10 F03E          	lfsr	1,62
  1195  00B32A                     copy_data0:
  1196  00B32A  0009               	tblrd		*+
  1197  00B32C  CFF5 FFEE          	movff	tablat,postinc0
  1198  00B330  50E5               	movf	postdec1,w,c
  1199  00B332  50E1               	movf	fsr1l,w,c
  1200  00B334  E1FA               	bnz	copy_data0
  1201                           
  1202                           ; Initialize objects allocated to COMRAM (6 bytes)
  1203                           ; load TBLPTR registers with __pidataCOMRAM
  1204  00B336  0E44               	movlw	low __pidataCOMRAM
  1205  00B338  6EF6               	movwf	tblptrl,c
  1206  00B33A  0EAF               	movlw	high __pidataCOMRAM
  1207  00B33C  6EF7               	movwf	tblptrh,c
  1208  00B33E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1209  00B340  6EF8               	movwf	tblptru,c
  1210  00B342  EE00  F076         	lfsr	0,__pdataCOMRAM
  1211  00B346  EE10 F006          	lfsr	1,6
  1212  00B34A                     copy_data1:
  1213  00B34A  0009               	tblrd		*+
  1214  00B34C  CFF5 FFEE          	movff	tablat,postinc0
  1215  00B350  50E5               	movf	postdec1,w,c
  1216  00B352  50E1               	movf	fsr1l,w,c
  1217  00B354  E1FA               	bnz	copy_data1
  1218                           
  1219                           ; Clear objects allocated to BANK2 (64 bytes)
  1220  00B356  EE02  F000         	lfsr	0,__pbssBANK2
  1221  00B35A  0E40               	movlw	64
  1222  00B35C                     clear_0:
  1223  00B35C  6AEE               	clrf	postinc0,c
  1224  00B35E  06E8               	decf	wreg,f,c
  1225  00B360  E1FD               	bnz	clear_0
  1226                           
  1227                           ; Clear objects allocated to BANK1 (112 bytes)
  1228  00B362  EE01  F08A         	lfsr	0,__pbssBANK1
  1229  00B366  0E70               	movlw	112
  1230  00B368                     clear_1:
  1231  00B368  6AEE               	clrf	postinc0,c
  1232  00B36A  06E8               	decf	wreg,f,c
  1233  00B36C  E1FD               	bnz	clear_1
  1234                           
  1235                           ; Clear objects allocated to BANK0 (52 bytes)
  1236  00B36E  EE00  F0C8         	lfsr	0,__pbssBANK0
  1237  00B372  0E34               	movlw	52
  1238  00B374                     clear_2:
  1239  00B374  6AEE               	clrf	postinc0,c
  1240  00B376  06E8               	decf	wreg,f,c
  1241  00B378  E1FD               	bnz	clear_2
  1242                           
  1243                           ; Clear objects allocated to COMRAM (12 bytes)
  1244  00B37A  EE00  F06A         	lfsr	0,__pbssCOMRAM
  1245  00B37E  0E0C               	movlw	12
  1246  00B380                     clear_3:
  1247  00B380  6AEE               	clrf	postinc0,c
  1248  00B382  06E8               	decf	wreg,f,c
  1249  00B384  E1FD               	bnz	clear_3
  1250  00B386                     end_of_initialization:
  1251                           	opt stack 0
  1252  00B386                     __end_of__initialization:
  1253                           	opt stack 0
  1254  00B386  0100               	movlb	0
  1255  00B388  EF97  F060         	goto	_main	;jump to C main() function
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           	psect	bssCOMRAM
  1266  00006A                     __pbssCOMRAM:
  1267                           	opt stack 0
  1268  00006A                     sortDrawerList@F3072:
  1269                           	opt stack 0
  1270  00006A                     	ds	8
  1271  000072                     _firstIteration:
  1272                           	opt stack 0
  1273  000072                     	ds	2
  1274  000074                     _LCDinterruptState:
  1275                           	opt stack 0
  1276  000074                     	ds	1
  1277  000075                     _UARTinterruptState:
  1278                           	opt stack 0
  1279  000075                     	ds	1
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	dataCOMRAM
  1290  000076                     __pdataCOMRAM:
  1291                           	opt stack 0
  1292  000076                     _UART:
  1293                           	opt stack 0
  1294  000076                     	ds	2
  1295  000078                     _columnRight:
  1296                           	opt stack 0
  1297  000078                     	ds	1
  1298  000079                     _columnLeft:
  1299                           	opt stack 0
  1300  000079                     	ds	1
  1301  00007A                     _rowDown:
  1302                           	opt stack 0
  1303  00007A                     	ds	1
  1304  00007B                     _rowUp:
  1305                           	opt stack 0
  1306  00007B                     	ds	1
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316                           	psect	bssBANK0
  1317  0000C8                     __pbssBANK0:
  1318                           	opt stack 0
  1319  0000C8                     diet_press@F3132:
  1320                           	opt stack 0
  1321  0000C8                     	ds	8
  1322  0000D0                     food_press@F3117:
  1323                           	opt stack 0
  1324  0000D0                     	ds	8
  1325  0000D8                     sortDrawerList@F3081:
  1326                           	opt stack 0
  1327  0000D8                     	ds	8
  1328  0000E0                     sortDrawerList@F3078:
  1329                           	opt stack 0
  1330  0000E0                     	ds	8
  1331  0000E8                     sortDrawerList@F3075:
  1332                           	opt stack 0
  1333  0000E8                     	ds	8
  1334  0000F0                     _uart:
  1335                           	opt stack 0
  1336  0000F0                     	ds	12
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1l	equ	0xFE1
  1345                           
  1346                           	psect	bssBANK1
  1347  00018A                     __pbssBANK1:
  1348                           	opt stack 0
  1349  00018A                     standbyMode@F3156:
  1350                           	opt stack 0
  1351  00018A                     	ds	16
  1352  00019A                     standbyMode@F3154:
  1353                           	opt stack 0
  1354  00019A                     	ds	16
  1355  0001AA                     standbyMode@F3152:
  1356                           	opt stack 0
  1357  0001AA                     	ds	16
  1358  0001BA                     mainOperation@F3132:
  1359                           	opt stack 0
  1360  0001BA                     	ds	16
  1361  0001CA                     mainOperation@F3130:
  1362                           	opt stack 0
  1363  0001CA                     	ds	16
  1364  0001DA                     mainOperation@F3128:
  1365                           	opt stack 0
  1366  0001DA                     	ds	16
  1367  0001EA                     mainOperation@F3126:
  1368                           	opt stack 0
  1369  0001EA                     	ds	16
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           postdec1	equ	0xFE5
  1377                           fsr1l	equ	0xFE1
  1378                           
  1379                           	psect	bssBANK2
  1380  000200                     __pbssBANK2:
  1381                           	opt stack 0
  1382  000200                     standbyMode@F3162:
  1383                           	opt stack 0
  1384  000200                     	ds	16
  1385  000210                     standbyMode@F3160:
  1386                           	opt stack 0
  1387  000210                     	ds	16
  1388  000220                     standbyMode@F3158:
  1389                           	opt stack 0
  1390  000220                     	ds	16
  1391  000230                     _arr_dataRX:
  1392                           	opt stack 0
  1393  000230                     	ds	16
  1394                           tblptru	equ	0xFF8
  1395                           tblptrh	equ	0xFF7
  1396                           tblptrl	equ	0xFF6
  1397                           tablat	equ	0xFF5
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           postdec1	equ	0xFE5
  1401                           fsr1l	equ	0xFE1
  1402                           
  1403                           	psect	dataBANK2
  1404  000240                     __pdataBANK2:
  1405                           	opt stack 0
  1406  000240                     _inputs:
  1407                           	opt stack 0
  1408  000240                     	ds	36
  1409  000264                     _foodInputs:
  1410                           	opt stack 0
  1411  000264                     	ds	26
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           postdec1	equ	0xFE5
  1419                           fsr1l	equ	0xFE1
  1420                           
  1421                           	psect	cstackBANK1
  1422  000100                     __pcstackBANK1:
  1423                           	opt stack 0
  1424  000100                     standbyMode@roundPieces:
  1425                           	opt stack 0
  1426                           
  1427                           ; 16 bytes @ 0x0
  1428  000100                     	ds	16
  1429  000110                     standbyMode@flatPieces:
  1430                           	opt stack 0
  1431                           
  1432                           ; 16 bytes @ 0x10
  1433  000110                     	ds	16
  1434  000120                     standbyMode@longPieces:
  1435                           	opt stack 0
  1436                           
  1437                           ; 16 bytes @ 0x20
  1438  000120                     	ds	16
  1439  000130                     standbyMode@dietType:
  1440                           	opt stack 0
  1441                           
  1442                           ; 16 bytes @ 0x30
  1443  000130                     	ds	16
  1444  000140                     standbyMode@foodType:
  1445                           	opt stack 0
  1446                           
  1447                           ; 16 bytes @ 0x40
  1448  000140                     	ds	16
  1449  000150                     standbyMode@drawerInformation:
  1450                           	opt stack 0
  1451                           
  1452                           ; 16 bytes @ 0x50
  1453  000150                     	ds	16
  1454  000160                     standbyMode@time:
  1455                           	opt stack 0
  1456                           
  1457                           ; 7 bytes @ 0x60
  1458  000160                     	ds	7
  1459  000167                     standbyMode@firstIteration:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x67
  1463  000167                     	ds	2
  1464  000169                     standbyMode@whichKey:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x69
  1468  000169                     	ds	2
  1469  00016B                     standbyMode@keypress:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x6B
  1473  00016B                     	ds	1
  1474  00016C                     standbyMode@round:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x6C
  1478  00016C                     	ds	2
  1479  00016E                     standbyMode@flat:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x6E
  1483  00016E                     	ds	2
  1484  000170                     standbyMode@lng:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x70
  1488  000170                     	ds	2
  1489  000172                     standbyMode@decodedDiet:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x72
  1493  000172                     	ds	2
  1494  000174                     standbyMode@storedFoodType:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x74
  1498  000174                     	ds	2
  1499  000176                     standbyMode@keypress1:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x76
  1503  000176                     	ds	1
  1504  000177                     standbyMode@validDrawer:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x77
  1508  000177                     	ds	2
  1509  000179                     standbyMode@zero:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x79
  1513  000179                     	ds	2
  1514  00017B                     standbyMode@n:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x7B
  1518  00017B                     	ds	2
  1519  00017D                     standbyMode@x:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x7D
  1523  00017D                     	ds	2
  1524  00017F                     standbyMode@logNumber:
  1525                           	opt stack 0
  1526                           
  1527                           ; 1 bytes @ 0x7F
  1528  00017F                     	ds	1
  1529  000180                     standbyMode@diet:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x80
  1533  000180                     	ds	2
  1534  000182                     standbyMode@drawer:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x82
  1538  000182                     	ds	2
  1539  000184                     standbyMode@food:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x84
  1543  000184                     	ds	2
  1544  000186                     standbyMode@drawerCount:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x86
  1548  000186                     	ds	2
  1549  000188                     standbyMode@i:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x88
  1553  000188                     	ds	2
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1l	equ	0xFE1
  1562                           
  1563                           	psect	cstackBANK0
  1564  000080                     __pcstackBANK0:
  1565                           	opt stack 0
  1566  000080                     mainOperation@dietTable:
  1567                           	opt stack 0
  1568                           
  1569                           ; 16 bytes @ 0x0
  1570  000080                     	ds	16
  1571  000090                     mainOperation@foodTable:
  1572                           	opt stack 0
  1573                           
  1574                           ; 16 bytes @ 0x10
  1575  000090                     	ds	16
  1576  0000A0                     mainOperation@drawerTable:
  1577                           	opt stack 0
  1578                           
  1579                           ; 16 bytes @ 0x20
  1580  0000A0                     	ds	16
  1581  0000B0                     mainOperation@sortedDrawerTable:
  1582                           	opt stack 0
  1583                           
  1584                           ; 16 bytes @ 0x30
  1585  0000B0                     	ds	16
  1586  0000C0                     mainOperation@temp:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x40
  1590  0000C0                     	ds	2
  1591  0000C2                     mainOperation@nextDrawer:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x42
  1595  0000C2                     	ds	2
  1596  0000C4                     mainOperation@currentDrawer:
  1597                           	opt stack 0
  1598                           
  1599                           ; 2 bytes @ 0x44
  1600  0000C4                     	ds	2
  1601  0000C6                     mainOperation@i:
  1602                           	opt stack 0
  1603                           
  1604                           ; 2 bytes @ 0x46
  1605  0000C6                     	ds	2
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1l	equ	0xFE1
  1614                           
  1615                           	psect	cstackCOMRAM
  1616  000001                     __pcstackCOMRAM:
  1617                           	opt stack 0
  1618  000001                     ??_isdigit:
  1619  000001                     ??_I2C_Master_Wait:
  1620  000001                     ?_check_food:
  1621                           	opt stack 0
  1622  000001                     ?_getRound:
  1623                           	opt stack 0
  1624  000001                     ?_getFlat:
  1625                           	opt stack 0
  1626  000001                     ?_getLong:
  1627                           	opt stack 0
  1628  000001                     ?_verifyKeypress:
  1629                           	opt stack 0
  1630  000001                     ?_printFoodInput:
  1631                           	opt stack 0
  1632  000001                     ?_get_digits:
  1633                           	opt stack 0
  1634  000001                     ?_decode_diet:
  1635                           	opt stack 0
  1636  000001                     ?_decode_drawer:
  1637                           	opt stack 0
  1638  000001                     ?___wmul:
  1639                           	opt stack 0
  1640  000001                     ?___lwdiv:
  1641                           	opt stack 0
  1642  000001                     ?___aldiv:
  1643                           	opt stack 0
  1644  000001                     ?___lldiv:
  1645                           	opt stack 0
  1646  000001                     writeEEPROM@data:
  1647                           	opt stack 0
  1648  000001                     readEEPROM@address:
  1649                           	opt stack 0
  1650  000001                     lcdNibble@temp:
  1651                           	opt stack 0
  1652  000001                     sortDrawerList@drawerTable:
  1653                           	opt stack 0
  1654  000001                     check_food@sum:
  1655                           	opt stack 0
  1656  000001                     getRound@code:
  1657                           	opt stack 0
  1658  000001                     getFlat@code:
  1659                           	opt stack 0
  1660  000001                     getLong@code:
  1661                           	opt stack 0
  1662  000001                     verifyKeypress@keypress:
  1663                           	opt stack 0
  1664  000001                     printFoodInput@food:
  1665                           	opt stack 0
  1666  000001                     get_digits@sum:
  1667                           	opt stack 0
  1668  000001                     decode_diet@dietType:
  1669                           	opt stack 0
  1670  000001                     decode_drawer@drawer:
  1671                           	opt stack 0
  1672  000001                     uartTransmitBlocking@data:
  1673                           	opt stack 0
  1674  000001                     ___wmul@multiplier:
  1675                           	opt stack 0
  1676  000001                     ___lwdiv@dividend:
  1677                           	opt stack 0
  1678  000001                     ___aldiv@dividend:
  1679                           	opt stack 0
  1680  000001                     ___lldiv@dividend:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0x0
  1684  000001                     	ds	1
  1685  000002                     writeEEPROM@address:
  1686                           	opt stack 0
  1687  000002                     I2C_Master_Read@ackBit:
  1688                           	opt stack 0
  1689  000002                     lcdNibble@data:
  1690                           	opt stack 0
  1691  000002                     _isdigit$1607:
  1692                           	opt stack 0
  1693  000002                     I2C_Master_Write@byteToWrite:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x1
  1697  000002                     	ds	1
  1698  000003                     ??_shiftEEPROM:
  1699  000003                     ??_getRound:
  1700  000003                     ??_getFlat:
  1701  000003                     ??_getLong:
  1702  000003                     ??_verifyKeypress:
  1703  000003                     ??_get_digits:
  1704  000003                     ??_decode_diet:
  1705  000003                     ??_decode_drawer:
  1706  000003                     I2C_Master_Read@receivedByte:
  1707                           	opt stack 0
  1708  000003                     uartTransmitBlocking@numBytes:
  1709                           	opt stack 0
  1710  000003                     lcdInst@data:
  1711                           	opt stack 0
  1712  000003                     putch@data:
  1713                           	opt stack 0
  1714  000003                     isdigit@c:
  1715                           	opt stack 0
  1716  000003                     sortDrawerList@sortedDrawerTable:
  1717                           	opt stack 0
  1718  000003                     check_food@foodInput:
  1719                           	opt stack 0
  1720  000003                     initEEPROM@i:
  1721                           	opt stack 0
  1722  000003                     ___wmul@multiplicand:
  1723                           	opt stack 0
  1724  000003                     ___lwdiv@divisor:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x2
  1728  000003                     	ds	1
  1729  000004                     ??_initLCD:
  1730  000004                     ??_uartTransmitBlocking:
  1731  000004                     shiftEEPROM@temp:
  1732                           	opt stack 0
  1733                           
  1734                           ; 2 bytes @ 0x3
  1735  000004                     	ds	1
  1736  000005                     ??_sortDrawerList:
  1737  000005                     ??_check_food:
  1738  000005                     verifyKeypress@logNumber:
  1739                           	opt stack 0
  1740  000005                     uartTransmitBlocking@numTransmits:
  1741                           	opt stack 0
  1742  000005                     getRound@returnValue:
  1743                           	opt stack 0
  1744  000005                     getFlat@returnValue:
  1745                           	opt stack 0
  1746  000005                     getLong@returnValue:
  1747                           	opt stack 0
  1748  000005                     get_digits@count:
  1749                           	opt stack 0
  1750  000005                     decode_diet@returnValue:
  1751                           	opt stack 0
  1752  000005                     decode_drawer@returnValue:
  1753                           	opt stack 0
  1754  000005                     ___wmul@product:
  1755                           	opt stack 0
  1756  000005                     ___lwdiv@quotient:
  1757                           	opt stack 0
  1758  000005                     ___aldiv@divisor:
  1759                           	opt stack 0
  1760  000005                     ___lldiv@divisor:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x4
  1764  000005                     	ds	1
  1765  000006                     verticalStepper@rotations:
  1766                           	opt stack 0
  1767  000006                     horizontalStepper@rotations:
  1768                           	opt stack 0
  1769  000006                     verifyKeypress@returnVal:
  1770                           	opt stack 0
  1771  000006                     shiftEEPROM@i:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x5
  1775  000006                     	ds	1
  1776  000007                     ___lwdiv@counter:
  1777                           	opt stack 0
  1778  000007                     getUserInputs@drawerTable:
  1779                           	opt stack 0
  1780  000007                     check_food@returnValue:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x6
  1784  000007                     	ds	1
  1785  000008                     ?___lwmod:
  1786                           	opt stack 0
  1787  000008                     verticalStepper@direction:
  1788                           	opt stack 0
  1789  000008                     horizontalStepper@direction:
  1790                           	opt stack 0
  1791  000008                     verifyKeypress@i:
  1792                           	opt stack 0
  1793  000008                     ___lwmod@dividend:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x7
  1797  000008                     	ds	1
  1798  000009                     ___aldiv@counter:
  1799                           	opt stack 0
  1800  000009                     getUserInputs@dietTable:
  1801                           	opt stack 0
  1802  000009                     ___lldiv@quotient:
  1803                           	opt stack 0
  1804  000009                     sortDrawerList@sublist1:
  1805                           	opt stack 0
  1806                           
  1807                           ; 8 bytes @ 0x8
  1808  000009                     	ds	1
  1809  00000A                     ___aldiv@sign:
  1810                           	opt stack 0
  1811  00000A                     verticalStepper@i:
  1812                           	opt stack 0
  1813  00000A                     horizontalStepper@i:
  1814                           	opt stack 0
  1815  00000A                     ___lwmod@divisor:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x9
  1819  00000A                     	ds	1
  1820  00000B                     getUserInputs@foodTable:
  1821                           	opt stack 0
  1822  00000B                     ___aldiv@quotient:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0xA
  1826  00000B                     	ds	1
  1827  00000C                     ?_moveVertically:
  1828                           	opt stack 0
  1829  00000C                     ___lwmod@counter:
  1830                           	opt stack 0
  1831  00000C                     moveVertically@currentDrawer:
  1832                           	opt stack 0
  1833  00000C                     moveHorizontally@currentDrawer:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0xB
  1837  00000C                     	ds	1
  1838  00000D                     ??_getUserInputs:
  1839  00000D                     ?_printf:
  1840                           	opt stack 0
  1841  00000D                     ___lldiv@counter:
  1842                           	opt stack 0
  1843  00000D                     printf@f:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0xC
  1847  00000D                     	ds	1
  1848  00000E                     moveVertically@nextDrawer:
  1849                           	opt stack 0
  1850  00000E                     moveHorizontally@nextDrawer:
  1851                           	opt stack 0
  1852  00000E                     I2C_Master_Init@clockFreq:
  1853                           	opt stack 0
  1854                           
  1855                           ; 4 bytes @ 0xD
  1856  00000E                     	ds	1
  1857  00000F                     getUserInputs@logNumber:
  1858                           	opt stack 0
  1859  00000F                     UART_Init@baud:
  1860                           	opt stack 0
  1861                           
  1862                           ; 4 bytes @ 0xE
  1863  00000F                     	ds	1
  1864  000010                     ??_moveHorizontally:
  1865                           
  1866                           ; 1 bytes @ 0xF
  1867  000010                     	ds	1
  1868  000011                     getUserInputs@count:
  1869                           	opt stack 0
  1870  000011                     sortDrawerList@sublist2:
  1871                           	opt stack 0
  1872                           
  1873                           ; 8 bytes @ 0x10
  1874  000011                     	ds	1
  1875  000012                     ??_I2C_Master_Init:
  1876                           
  1877                           ; 1 bytes @ 0x11
  1878  000012                     	ds	1
  1879  000013                     ??_UART_Init:
  1880  000013                     getUserInputs@n:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x12
  1884  000013                     	ds	2
  1885  000015                     getUserInputs@data:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x14
  1889  000015                     	ds	2
  1890  000017                     ??_printf:
  1891  000017                     getUserInputs@i:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x16
  1895  000017                     	ds	2
  1896  000019                     sortDrawerList@sublist3:
  1897                           	opt stack 0
  1898                           
  1899                           ; 8 bytes @ 0x18
  1900  000019                     	ds	2
  1901  00001B                     printf@idx:
  1902                           	opt stack 0
  1903                           
  1904                           ; 1 bytes @ 0x1A
  1905  00001B                     	ds	1
  1906  00001C                     printf@prec:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0x1B
  1910  00001C                     	ds	1
  1911  00001D                     printf@cp:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x1C
  1915  00001D                     	ds	2
  1916  00001F                     printf@ap:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x1E
  1920  00001F                     	ds	2
  1921  000021                     printf@len:
  1922                           	opt stack 0
  1923  000021                     sortDrawerList@sublist4:
  1924                           	opt stack 0
  1925                           
  1926                           ; 8 bytes @ 0x20
  1927  000021                     	ds	2
  1928  000023                     printf@val:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x22
  1932  000023                     	ds	2
  1933  000025                     printf@flag:
  1934                           	opt stack 0
  1935                           
  1936                           ; 1 bytes @ 0x24
  1937  000025                     	ds	1
  1938  000026                     printf@width:
  1939                           	opt stack 0
  1940                           
  1941                           ; 2 bytes @ 0x25
  1942  000026                     	ds	2
  1943  000028                     printf@c:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x27
  1947  000028                     	ds	1
  1948  000029                     ?_displayLogs:
  1949                           	opt stack 0
  1950  000029                     ?_food_press:
  1951                           	opt stack 0
  1952  000029                     ?_diet_press:
  1953                           	opt stack 0
  1954  000029                     ?_which_drawer:
  1955                           	opt stack 0
  1956  000029                     sortDrawerList@count4:
  1957                           	opt stack 0
  1958  000029                     displayLogs@logNumber:
  1959                           	opt stack 0
  1960  000029                     food_press@dietSum:
  1961                           	opt stack 0
  1962  000029                     diet_press@drawer:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x28
  1966  000029                     	ds	2
  1967  00002B                     ??_displayLogs:
  1968  00002B                     ??_diet_press:
  1969  00002B                     ??_which_drawer:
  1970  00002B                     sortDrawerList@temp:
  1971                           	opt stack 0
  1972  00002B                     food_press@drawer:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x2A
  1976  00002B                     	ds	1
  1977  00002C                     which_drawer@rand:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x2B
  1981  00002C                     	ds	1
  1982  00002D                     ??_food_press:
  1983  00002D                     sortDrawerList@count3:
  1984                           	opt stack 0
  1985  00002D                     displayLogs@year:
  1986                           	opt stack 0
  1987  00002D                     diet_press@previous:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0x2C
  1991  00002D                     	ds	1
  1992  00002E                     which_drawer@sum:
  1993                           	opt stack 0
  1994                           
  1995                           ; 2 bytes @ 0x2D
  1996  00002E                     	ds	1
  1997  00002F                     sortDrawerList@count2:
  1998                           	opt stack 0
  1999  00002F                     displayLogs@month:
  2000                           	opt stack 0
  2001  00002F                     food_press@tally:
  2002                           	opt stack 0
  2003  00002F                     diet_press@i:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x2E
  2007  00002F                     	ds	1
  2008  000030                     which_drawer@backCheck:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x2F
  2012  000030                     	ds	1
  2013  000031                     sortDrawerList@count1:
  2014                           	opt stack 0
  2015  000031                     displayLogs@day:
  2016                           	opt stack 0
  2017  000031                     food_press@backCheck:
  2018                           	opt stack 0
  2019  000031                     diet_press@backCheck:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x30
  2023  000031                     	ds	1
  2024  000032                     which_drawer@count:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x31
  2028  000032                     	ds	1
  2029  000033                     sortDrawerList@j:
  2030                           	opt stack 0
  2031  000033                     displayLogs@roundPieces:
  2032                           	opt stack 0
  2033  000033                     food_press@isValid:
  2034                           	opt stack 0
  2035  000033                     diet_press@count:
  2036                           	opt stack 0
  2037                           
  2038                           ; 2 bytes @ 0x32
  2039  000033                     	ds	1
  2040  000034                     which_drawer@keypress:
  2041                           	opt stack 0
  2042                           
  2043                           ; 1 bytes @ 0x33
  2044  000034                     	ds	1
  2045  000035                     sortDrawerList@i:
  2046                           	opt stack 0
  2047  000035                     displayLogs@flatPieces:
  2048                           	opt stack 0
  2049  000035                     food_press@count:
  2050                           	opt stack 0
  2051  000035                     diet_press@sum:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x34
  2055  000035                     	ds	2
  2056  000037                     ??_mainOperation:
  2057  000037                     food_press@keypress:
  2058                           	opt stack 0
  2059  000037                     diet_press@keypress:
  2060                           	opt stack 0
  2061  000037                     displayLogs@longPieces:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x36
  2065  000037                     	ds	1
  2066  000038                     food_press@foodTable:
  2067                           	opt stack 0
  2068  000038                     diet_press@dietTable:
  2069                           	opt stack 0
  2070                           
  2071                           ; 8 bytes @ 0x37
  2072  000038                     	ds	1
  2073  000039                     displayLogs@minutes:
  2074                           	opt stack 0
  2075                           
  2076                           ; 2 bytes @ 0x38
  2077  000039                     	ds	2
  2078  00003B                     displayLogs@seconds:
  2079                           	opt stack 0
  2080                           
  2081                           ; 2 bytes @ 0x3A
  2082  00003B                     	ds	2
  2083  00003D                     displayLogs@dietType:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x3C
  2087  00003D                     	ds	2
  2088  00003F                     displayLogs@foodType:
  2089                           	opt stack 0
  2090                           
  2091                           ; 2 bytes @ 0x3E
  2092  00003F                     	ds	2
  2093  000041                     displayLogs@keypress3:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0x40
  2097  000041                     	ds	1
  2098  000042                     displayLogs@operationTime:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x41
  2102  000042                     	ds	2
  2103  000044                     displayLogs@drawerNumber:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x43
  2107  000044                     	ds	2
  2108  000046                     displayLogs@i:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x45
  2112  000046                     	ds	2
  2113  000048                     displayLogs@markedDrawer1:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x47
  2117  000048                     	ds	2
  2118  00004A                     displayLogs@markedDrawer2:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x49
  2122  00004A                     	ds	2
  2123  00004C                     displayLogs@markedDrawer3:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x4B
  2127  00004C                     	ds	2
  2128  00004E                     displayLogs@markedDrawer4:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x4D
  2132  00004E                     	ds	2
  2133  000050                     displayLogs@n:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x4F
  2137  000050                     	ds	2
  2138  000052                     ?_viewLogs:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x51
  2142  000052                     	ds	2
  2143  000054                     ??_viewLogs:
  2144                           
  2145                           ; 1 bytes @ 0x53
  2146  000054                     	ds	2
  2147  000056                     viewLogs@checkLog:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x55
  2151  000056                     	ds	2
  2152  000058                     viewLogs@returnVal:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x57
  2156  000058                     	ds	2
  2157  00005A                     viewLogs@logView:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x59
  2161  00005A                     	ds	2
  2162  00005C                     viewLogs@logNumber:
  2163                           	opt stack 0
  2164                           
  2165                           ; 1 bytes @ 0x5B
  2166  00005C                     	ds	1
  2167  00005D                     viewLogs@keypress2:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x5C
  2171  00005D                     	ds	1
  2172  00005E                     ?_standbyMode:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x5D
  2176  00005E                     	ds	2
  2177  000060                     ??_standbyMode:
  2178                           
  2179                           ; 1 bytes @ 0x5F
  2180  000060                     	ds	2
  2181  000062                     ??_main:
  2182                           
  2183                           ; 1 bytes @ 0x61
  2184  000062                     	ds	2
  2185  000064                     main@operationMode:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x63
  2189  000064                     	ds	2
  2190  000066                     main@checkEEPROM:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x65
  2194  000066                     	ds	2
  2195  000068                     main@i:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x67
  2199  000068                     	ds	2
  2200                           tblptru	equ	0xFF8
  2201                           tblptrh	equ	0xFF7
  2202                           tblptrl	equ	0xFF6
  2203                           tablat	equ	0xFF5
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           postdec1	equ	0xFE5
  2207                           fsr1l	equ	0xFE1
  2208                           
  2209 ;;
  2210 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2211 ;;
  2212 ;; *************** function _main *****************
  2213 ;; Defined at:
  2214 ;;		line 19 in file "main.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  i               2  103[COMRAM] unsigned int 
  2219 ;;  checkEEPROM     2  101[COMRAM] unsigned int 
  2220 ;;  operationMod    2   99[COMRAM] unsigned int 
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;Total ram usage:        8 bytes
  2235 ;; Hardware stack levels required when called:    6
  2236 ;; This function calls:
  2237 ;;		_UART_Init
  2238 ;;		_initEEPROM
  2239 ;;		_initLCD
  2240 ;;		_lcdInst
  2241 ;;		_mainOperation
  2242 ;;		_printf
  2243 ;;		_readEEPROM
  2244 ;;		_standbyMode
  2245 ;; This function is called by:
  2246 ;;		Startup code after reset
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text0
  2251  00C12E                     __ptext0:
  2252                           	opt stack 0
  2253  00C12E                     _main:
  2254                           	opt stack 25
  2255                           
  2256                           ;main.c: 25: LATA = 0x00;
  2257                           
  2258                           ;incstack = 0
  2259  00C12E  0E00               	movlw	0
  2260  00C130  6E89               	movwf	3977,c	;volatile
  2261                           
  2262                           ;main.c: 26: LATB = 0x00;
  2263  00C132  0E00               	movlw	0
  2264  00C134  6E8A               	movwf	3978,c	;volatile
  2265                           
  2266                           ;main.c: 27: LATC = 0x00;
  2267  00C136  0E00               	movlw	0
  2268  00C138  6E8B               	movwf	3979,c	;volatile
  2269                           
  2270                           ;main.c: 28: LATD = 0x00;
  2271  00C13A  0E00               	movlw	0
  2272  00C13C  6E8C               	movwf	3980,c	;volatile
  2273                           
  2274                           ;main.c: 29: LATE = 0x00;
  2275  00C13E  0E00               	movlw	0
  2276  00C140  6E8D               	movwf	3981,c	;volatile
  2277                           
  2278                           ;main.c: 33: TRISA = 0xFF;
  2279  00C142  6892               	setf	3986,c	;volatile
  2280                           
  2281                           ;main.c: 34: TRISB = 0xFF;
  2282  00C144  6893               	setf	3987,c	;volatile
  2283                           
  2284                           ;main.c: 35: TRISC = 0x00;
  2285  00C146  0E00               	movlw	0
  2286  00C148  6E94               	movwf	3988,c	;volatile
  2287                           
  2288                           ;main.c: 36: TRISD = 0x00;
  2289  00C14A  0E00               	movlw	0
  2290  00C14C  6E95               	movwf	3989,c	;volatile
  2291                           
  2292                           ;main.c: 37: TRISE = 0x00;
  2293  00C14E  0E00               	movlw	0
  2294  00C150  6E96               	movwf	3990,c	;volatile
  2295                           
  2296                           ;main.c: 40: ADCON0 = 0x00;
  2297  00C152  0E00               	movlw	0
  2298  00C154  6EC2               	movwf	4034,c	;volatile
  2299                           
  2300                           ;main.c: 41: ADCON1 = 0b00001111;
  2301  00C156  0E0F               	movlw	15
  2302  00C158  6EC1               	movwf	4033,c	;volatile
  2303                           
  2304                           ;main.c: 44: initLCD();
  2305  00C15A  EC75  F058         	call	_initLCD	;wreg free
  2306                           
  2307                           ;main.c: 45: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2308  00C15E  0E01               	movlw	1
  2309  00C160  ECBB  F057         	call	_lcdInst
  2310  00C164  0EC3               	movlw	195
  2311  00C166  6E62               	movwf	??_main& (0+255),c
  2312  00C168  0ECD               	movlw	205
  2313  00C16A                     u11297:
  2314  00C16A  2EE8               	decfsz	wreg,f,c
  2315  00C16C  D7FE               	bra	u11297
  2316  00C16E  2E62               	decfsz	??_main& (0+255),f,c
  2317  00C170  D7FC               	bra	u11297
  2318  00C172  F000               	nop	
  2319                           
  2320                           ;main.c: 46: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2321  00C174  0E0C               	movlw	12
  2322  00C176  ECBB  F057         	call	_lcdInst
  2323                           
  2324                           ;main.c: 47: printf("Standby");
  2325  00C17A  0E9C               	movlw	low STR_1
  2326  00C17C  6E0D               	movwf	printf@f,c
  2327  00C17E  0EFF               	movlw	high STR_1
  2328  00C180  6E0E               	movwf	printf@f+1,c
  2329  00C182  EC55  F067         	call	_printf	;wreg free
  2330                           
  2331                           ;main.c: 50: UART_Init(9600);
  2332  00C186  0E80               	movlw	128
  2333  00C188  6E0F               	movwf	UART_Init@baud,c
  2334  00C18A  0E25               	movlw	37
  2335  00C18C  6E10               	movwf	UART_Init@baud+1,c
  2336  00C18E  0E00               	movlw	0
  2337  00C190  6E11               	movwf	UART_Init@baud+2,c
  2338  00C192  0E00               	movlw	0
  2339  00C194  6E12               	movwf	UART_Init@baud+3,c
  2340  00C196  EC46  F05A         	call	_UART_Init	;wreg free
  2341                           
  2342                           ;main.c: 54: unsigned int operationMode = 0;
  2343  00C19A  0E00               	movlw	0
  2344  00C19C  6E65               	movwf	main@operationMode+1,c
  2345  00C19E  0E00               	movlw	0
  2346  00C1A0  6E64               	movwf	main@operationMode,c
  2347                           
  2348                           ;main.c: 55: unsigned int i = 0;
  2349  00C1A2  0E00               	movlw	0
  2350  00C1A4  6E69               	movwf	main@i+1,c
  2351  00C1A6  0E00               	movlw	0
  2352  00C1A8  6E68               	movwf	main@i,c
  2353                           
  2354                           ;main.c: 57: TRISCbits.TRISC5 = 0;
  2355  00C1AA  9A94               	bcf	3988,5,c	;volatile
  2356                           
  2357                           ;main.c: 58: TRISCbits.TRISC6 = 0;
  2358  00C1AC  9C94               	bcf	3988,6,c	;volatile
  2359                           
  2360                           ;main.c: 59: TRISCbits.TRISC7 = 0;
  2361  00C1AE  9E94               	bcf	3988,7,c	;volatile
  2362                           
  2363                           ;main.c: 60: TRISCbits.TRISC0 = 0;
  2364  00C1B0  9094               	bcf	3988,0,c	;volatile
  2365                           
  2366                           ;main.c: 61: LATCbits.LATC5 = 1;
  2367  00C1B2  8A8B               	bsf	3979,5,c	;volatile
  2368                           
  2369                           ;main.c: 62: LATCbits.LATC6 = 1;
  2370  00C1B4  8C8B               	bsf	3979,6,c	;volatile
  2371                           
  2372                           ;main.c: 63: LATCbits.LATC7 = 1;
  2373  00C1B6  8E8B               	bsf	3979,7,c	;volatile
  2374                           
  2375                           ;main.c: 64: LATCbits.LATC0 = 0;
  2376  00C1B8  908B               	bcf	3979,0,c	;volatile
  2377  00C1BA                     
  2378                           ;main.c: 67: for (i=0; i<523; i++){
  2379  00C1BA  0E00               	movlw	0
  2380  00C1BC  6E69               	movwf	main@i+1,c
  2381  00C1BE  0E00               	movlw	0
  2382  00C1C0  6E68               	movwf	main@i,c
  2383  00C1C2                     l8778:
  2384  00C1C2  0E0B               	movlw	11
  2385  00C1C4  5C68               	subwf	main@i,w,c
  2386  00C1C6  0E02               	movlw	2
  2387  00C1C8  5869               	subwfb	main@i+1,w,c
  2388  00C1CA  B0D8               	btfsc	status,0,c
  2389  00C1CC  D033               	goto	u11080
  2390                           
  2391                           ;main.c: 68: LATCbits.LATC5 = 1;
  2392  00C1CE  8A8B               	bsf	3979,5,c	;volatile
  2393                           
  2394                           ;main.c: 69: LATCbits.LATC6 = 0;
  2395  00C1D0  9C8B               	bcf	3979,6,c	;volatile
  2396                           
  2397                           ;main.c: 70: LATCbits.LATC7 = 0;
  2398  00C1D2  9E8B               	bcf	3979,7,c	;volatile
  2399                           
  2400                           ;main.c: 71: LATCbits.LATC0 = 0;
  2401  00C1D4  908B               	bcf	3979,0,c	;volatile
  2402                           
  2403                           ;main.c: 72: _delay((unsigned long)((2)*(40000000/4000.0)));
  2404  00C1D6  0E1A               	movlw	26
  2405  00C1D8  6E62               	movwf	??_main& (0+255),c
  2406  00C1DA  0EF8               	movlw	248
  2407  00C1DC                     u11307:
  2408  00C1DC  2EE8               	decfsz	wreg,f,c
  2409  00C1DE  D7FE               	bra	u11307
  2410  00C1E0  2E62               	decfsz	??_main& (0+255),f,c
  2411  00C1E2  D7FC               	bra	u11307
  2412  00C1E4  D000               	nop2	
  2413                           
  2414                           ;main.c: 73: LATCbits.LATC5 = 0;
  2415  00C1E6  9A8B               	bcf	3979,5,c	;volatile
  2416                           
  2417                           ;main.c: 74: LATCbits.LATC6 = 1;
  2418  00C1E8  8C8B               	bsf	3979,6,c	;volatile
  2419                           
  2420                           ;main.c: 75: LATCbits.LATC7 = 0;
  2421  00C1EA  9E8B               	bcf	3979,7,c	;volatile
  2422                           
  2423                           ;main.c: 76: LATCbits.LATC0 = 0;
  2424  00C1EC  908B               	bcf	3979,0,c	;volatile
  2425                           
  2426                           ;main.c: 77: _delay((unsigned long)((2)*(40000000/4000.0)));
  2427  00C1EE  0E1A               	movlw	26
  2428  00C1F0  6E62               	movwf	??_main& (0+255),c
  2429  00C1F2  0EF8               	movlw	248
  2430  00C1F4                     u11317:
  2431  00C1F4  2EE8               	decfsz	wreg,f,c
  2432  00C1F6  D7FE               	bra	u11317
  2433  00C1F8  2E62               	decfsz	??_main& (0+255),f,c
  2434  00C1FA  D7FC               	bra	u11317
  2435  00C1FC  D000               	nop2	
  2436                           
  2437                           ;main.c: 78: LATCbits.LATC5 = 0;
  2438  00C1FE  9A8B               	bcf	3979,5,c	;volatile
  2439                           
  2440                           ;main.c: 79: LATCbits.LATC6 = 0;
  2441  00C200  9C8B               	bcf	3979,6,c	;volatile
  2442                           
  2443                           ;main.c: 80: LATCbits.LATC7 = 1;
  2444  00C202  8E8B               	bsf	3979,7,c	;volatile
  2445                           
  2446                           ;main.c: 81: LATCbits.LATC0 = 0;
  2447  00C204  908B               	bcf	3979,0,c	;volatile
  2448                           
  2449                           ;main.c: 82: _delay((unsigned long)((2)*(40000000/4000.0)));
  2450  00C206  0E1A               	movlw	26
  2451  00C208  6E62               	movwf	??_main& (0+255),c
  2452  00C20A  0EF8               	movlw	248
  2453  00C20C                     u11327:
  2454  00C20C  2EE8               	decfsz	wreg,f,c
  2455  00C20E  D7FE               	bra	u11327
  2456  00C210  2E62               	decfsz	??_main& (0+255),f,c
  2457  00C212  D7FC               	bra	u11327
  2458  00C214  D000               	nop2	
  2459                           
  2460                           ;main.c: 83: LATCbits.LATC5 = 0;
  2461  00C216  9A8B               	bcf	3979,5,c	;volatile
  2462                           
  2463                           ;main.c: 84: LATCbits.LATC6 = 0;
  2464  00C218  9C8B               	bcf	3979,6,c	;volatile
  2465                           
  2466                           ;main.c: 85: LATCbits.LATC7 = 0;
  2467  00C21A  9E8B               	bcf	3979,7,c	;volatile
  2468                           
  2469                           ;main.c: 86: LATCbits.LATC0 = 1;
  2470  00C21C  808B               	bsf	3979,0,c	;volatile
  2471                           
  2472                           ;main.c: 87: _delay((unsigned long)((2)*(40000000/4000.0)));
  2473  00C21E  0E1A               	movlw	26
  2474  00C220  6E62               	movwf	??_main& (0+255),c
  2475  00C222  0EF8               	movlw	248
  2476  00C224                     u11337:
  2477  00C224  2EE8               	decfsz	wreg,f,c
  2478  00C226  D7FE               	bra	u11337
  2479  00C228  2E62               	decfsz	??_main& (0+255),f,c
  2480  00C22A  D7FC               	bra	u11337
  2481  00C22C  D000               	nop2	
  2482  00C22E  4A68               	infsnz	main@i,f,c
  2483  00C230  2A69               	incf	main@i+1,f,c
  2484  00C232  D7C7               	goto	l8778
  2485  00C234                     u11080:
  2486                           
  2487                           ;main.c: 88: }
  2488                           ;main.c: 89: for (i=0; i<523; i++){
  2489  00C234  0E00               	movlw	0
  2490  00C236  6E69               	movwf	main@i+1,c
  2491  00C238  0E00               	movlw	0
  2492  00C23A  6E68               	movwf	main@i,c
  2493  00C23C                     l8812:
  2494  00C23C  0E0B               	movlw	11
  2495  00C23E  5C68               	subwf	main@i,w,c
  2496  00C240  0E02               	movlw	2
  2497  00C242  5869               	subwfb	main@i+1,w,c
  2498  00C244  B0D8               	btfsc	status,0,c
  2499  00C246  D7B9               	goto	l71
  2500                           
  2501                           ;main.c: 90: LATCbits.LATC5 = 0;
  2502  00C248  9A8B               	bcf	3979,5,c	;volatile
  2503                           
  2504                           ;main.c: 91: LATCbits.LATC6 = 0;
  2505  00C24A  9C8B               	bcf	3979,6,c	;volatile
  2506                           
  2507                           ;main.c: 92: LATCbits.LATC7 = 1;
  2508  00C24C  8E8B               	bsf	3979,7,c	;volatile
  2509                           
  2510                           ;main.c: 93: LATCbits.LATC0 = 0;
  2511  00C24E  908B               	bcf	3979,0,c	;volatile
  2512                           
  2513                           ;main.c: 94: _delay((unsigned long)((2)*(40000000/4000.0)));
  2514  00C250  0E1A               	movlw	26
  2515  00C252  6E62               	movwf	??_main& (0+255),c
  2516  00C254  0EF8               	movlw	248
  2517  00C256                     u11347:
  2518  00C256  2EE8               	decfsz	wreg,f,c
  2519  00C258  D7FE               	bra	u11347
  2520  00C25A  2E62               	decfsz	??_main& (0+255),f,c
  2521  00C25C  D7FC               	bra	u11347
  2522  00C25E  D000               	nop2	
  2523                           
  2524                           ;main.c: 95: LATCbits.LATC5 = 0;
  2525  00C260  9A8B               	bcf	3979,5,c	;volatile
  2526                           
  2527                           ;main.c: 96: LATCbits.LATC6 = 1;
  2528  00C262  8C8B               	bsf	3979,6,c	;volatile
  2529                           
  2530                           ;main.c: 97: LATCbits.LATC7 = 0;
  2531  00C264  9E8B               	bcf	3979,7,c	;volatile
  2532                           
  2533                           ;main.c: 98: LATCbits.LATC0 = 0;
  2534  00C266  908B               	bcf	3979,0,c	;volatile
  2535                           
  2536                           ;main.c: 99: _delay((unsigned long)((2)*(40000000/4000.0)));
  2537  00C268  0E1A               	movlw	26
  2538  00C26A  6E62               	movwf	??_main& (0+255),c
  2539  00C26C  0EF8               	movlw	248
  2540  00C26E                     u11357:
  2541  00C26E  2EE8               	decfsz	wreg,f,c
  2542  00C270  D7FE               	bra	u11357
  2543  00C272  2E62               	decfsz	??_main& (0+255),f,c
  2544  00C274  D7FC               	bra	u11357
  2545  00C276  D000               	nop2	
  2546                           
  2547                           ;main.c: 100: LATCbits.LATC5 = 1;
  2548  00C278  8A8B               	bsf	3979,5,c	;volatile
  2549                           
  2550                           ;main.c: 101: LATCbits.LATC6 = 0;
  2551  00C27A  9C8B               	bcf	3979,6,c	;volatile
  2552                           
  2553                           ;main.c: 102: LATCbits.LATC7 = 0;
  2554  00C27C  9E8B               	bcf	3979,7,c	;volatile
  2555                           
  2556                           ;main.c: 103: LATCbits.LATC0 = 0;
  2557  00C27E  908B               	bcf	3979,0,c	;volatile
  2558                           
  2559                           ;main.c: 104: _delay((unsigned long)((2)*(40000000/4000.0)));
  2560  00C280  0E1A               	movlw	26
  2561  00C282  6E62               	movwf	??_main& (0+255),c
  2562  00C284  0EF8               	movlw	248
  2563  00C286                     u11367:
  2564  00C286  2EE8               	decfsz	wreg,f,c
  2565  00C288  D7FE               	bra	u11367
  2566  00C28A  2E62               	decfsz	??_main& (0+255),f,c
  2567  00C28C  D7FC               	bra	u11367
  2568  00C28E  D000               	nop2	
  2569                           
  2570                           ;main.c: 105: LATCbits.LATC5 = 0;
  2571  00C290  9A8B               	bcf	3979,5,c	;volatile
  2572                           
  2573                           ;main.c: 106: LATCbits.LATC6 = 0;
  2574  00C292  9C8B               	bcf	3979,6,c	;volatile
  2575                           
  2576                           ;main.c: 107: LATCbits.LATC7 = 0;
  2577  00C294  9E8B               	bcf	3979,7,c	;volatile
  2578                           
  2579                           ;main.c: 108: LATCbits.LATC0 = 1;
  2580  00C296  808B               	bsf	3979,0,c	;volatile
  2581                           
  2582                           ;main.c: 109: _delay((unsigned long)((2)*(40000000/4000.0)));
  2583  00C298  0E1A               	movlw	26
  2584  00C29A  6E62               	movwf	??_main& (0+255),c
  2585  00C29C  0EF8               	movlw	248
  2586  00C29E                     u11377:
  2587  00C29E  2EE8               	decfsz	wreg,f,c
  2588  00C2A0  D7FE               	bra	u11377
  2589  00C2A2  2E62               	decfsz	??_main& (0+255),f,c
  2590  00C2A4  D7FC               	bra	u11377
  2591  00C2A6  D000               	nop2	
  2592  00C2A8  4A68               	infsnz	main@i,f,c
  2593  00C2AA  2A69               	incf	main@i+1,f,c
  2594  00C2AC  D7C7               	goto	l8812
  2595                           
  2596                           ;main.c: 134: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2597                           
  2598                           ;main.c: 133: initEEPROM();
  2599                           
  2600                           ;main.c: 132: if (checkEEPROM == 255){
  2601                           
  2602                           ;main.c: 130: checkEEPROM = readEEPROM(251);
  2603                           
  2604                           ;main.c: 110: }
  2605                           ;main.c: 111: }
  2606                           ;main.c: 128: unsigned int checkEEPROM = 0;
  2607  00C2AE  0EC3               	movlw	195
  2608  00C2B0  6E62               	movwf	??_main& (0+255),c
  2609  00C2B2  0ECD               	movlw	205
  2610  00C2B4                     u11387:
  2611  00C2B4  2EE8               	decfsz	wreg,f,c
  2612  00C2B6  D7FE               	bra	u11387
  2613  00C2B8  2E62               	decfsz	??_main& (0+255),f,c
  2614  00C2BA  D7FC               	bra	u11387
  2615  00C2BC  F000               	nop	
  2616                           
  2617                           ;main.c: 135: printf("Clearing EEPROM");
  2618  00C2BE  0E1D               	movlw	low STR_2
  2619  00C2C0  6E0D               	movwf	printf@f,c
  2620  00C2C2  0EFE               	movlw	high STR_2
  2621  00C2C4  6E0E               	movwf	printf@f+1,c
  2622  00C2C6  EC55  F067         	call	_printf	;wreg free
  2623                           
  2624                           ;main.c: 136: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2625  00C2CA  0E66               	movlw	102
  2626  00C2CC  6E63               	movwf	(??_main+1)& (0+255),c
  2627  00C2CE  0E76               	movlw	118
  2628  00C2D0  6E62               	movwf	??_main& (0+255),c
  2629  00C2D2  0EC1               	movlw	193
  2630  00C2D4                     u11397:
  2631  00C2D4  2EE8               	decfsz	wreg,f,c
  2632  00C2D6  D7FE               	bra	u11397
  2633  00C2D8  2E62               	decfsz	??_main& (0+255),f,c
  2634  00C2DA  D7FC               	bra	u11397
  2635  00C2DC  2E63               	decfsz	(??_main+1)& (0+255),f,c
  2636  00C2DE  D7FA               	bra	u11397
  2637  00C2E0  F000               	nop	
  2638                           
  2639                           ;main.c: 137: }
  2640                           ;main.c: 140: operationMode = standbyMode();
  2641  00C2E2  ECEF  F077         	call	_standbyMode	;wreg free
  2642  00C2E6  C05E  F064         	movff	?_standbyMode,main@operationMode
  2643  00C2EA  C05F  F065         	movff	?_standbyMode+1,main@operationMode+1
  2644                           
  2645                           ;main.c: 142: if (operationMode == 1){
  2646  00C2EE  0464               	decf	main@operationMode,w,c
  2647  00C2F0  1065               	iorwf	main@operationMode+1,w,c
  2648  00C2F2  B4D8               	btfsc	status,2,c
  2649                           
  2650                           ;main.c: 143: mainOperation();
  2651  00C2F4  ECB4  F05F         	call	_mainOperation	;wreg free
  2652                           
  2653                           ;main.c: 144: }
  2654                           ;main.c: 146: firstIteration += 1;
  2655  00C2F8  4A72               	infsnz	_firstIteration,f,c
  2656  00C2FA  2A73               	incf	_firstIteration+1,f,c
  2657                           
  2658                           ;main.c: 147: return;
  2659  00C2FC  EF00  F000         	goto	start
  2660  00C300                     __end_of_main:
  2661                           	opt stack 0
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           postinc0	equ	0xFEE
  2667                           wreg	equ	0xFE8
  2668                           postdec1	equ	0xFE5
  2669                           fsr1l	equ	0xFE1
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function _standbyMode *****************
  2673 ;; Defined at:
  2674 ;;		line 1605 in file "standbyMode.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  keypress1       1  118[BANK1 ] unsigned char 
  2679 ;;  whichKey        2  105[BANK1 ] unsigned int 
  2680 ;;  drawerInform   16   80[BANK1 ] unsigned int [8]
  2681 ;;  foodType       16   64[BANK1 ] unsigned int [8]
  2682 ;;  dietType       16   48[BANK1 ] unsigned int [8]
  2683 ;;  longPieces     16   32[BANK1 ] unsigned int [8]
  2684 ;;  flatPieces     16   16[BANK1 ] unsigned int [8]
  2685 ;;  roundPieces    16    0[BANK1 ] unsigned int [8]
  2686 ;;  time            7   96[BANK1 ] unsigned char [7]
  2687 ;;  i               2  136[BANK1 ] unsigned int 
  2688 ;;  drawerCount     2  134[BANK1 ] unsigned int 
  2689 ;;  food            2  132[BANK1 ] unsigned int 
  2690 ;;  drawer          2  130[BANK1 ] unsigned int 
  2691 ;;  diet            2  128[BANK1 ] unsigned int 
  2692 ;;  x               2  125[BANK1 ] unsigned int 
  2693 ;;  n               2  123[BANK1 ] unsigned int 
  2694 ;;  zero            2  121[BANK1 ] unsigned int 
  2695 ;;  validDrawer     2  119[BANK1 ] unsigned int 
  2696 ;;  storedFoodTy    2  116[BANK1 ] unsigned int 
  2697 ;;  decodedDiet     2  114[BANK1 ] unsigned int 
  2698 ;;  lng             2  112[BANK1 ] unsigned int 
  2699 ;;  flat            2  110[BANK1 ] unsigned int 
  2700 ;;  round           2  108[BANK1 ] unsigned int 
  2701 ;;  firstIterati    2  103[BANK1 ] unsigned int 
  2702 ;;  logNumber       1  127[BANK1 ] unsigned char 
  2703 ;;  keypress        1  107[BANK1 ] unsigned char 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  2   93[COMRAM] unsigned int 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Locals:         0       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Totals:         4       0     138       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;Total ram usage:      142 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    5
  2720 ;; This function calls:
  2721 ;;		_I2C_Master_Init
  2722 ;;		_I2C_Master_Read
  2723 ;;		_I2C_Master_Start
  2724 ;;		_I2C_Master_Stop
  2725 ;;		_I2C_Master_Write
  2726 ;;		___wmul
  2727 ;;		_decode_diet
  2728 ;;		_diet_press
  2729 ;;		_food_press
  2730 ;;		_getFlat
  2731 ;;		_getLong
  2732 ;;		_getRound
  2733 ;;		_lcdInst
  2734 ;;		_printFoodInput
  2735 ;;		_printf
  2736 ;;		_readEEPROM
  2737 ;;		_shiftEEPROM
  2738 ;;		_viewLogs
  2739 ;;		_which_drawer
  2740 ;;		_writeEEPROM
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text1
  2747  00EFDE                     __ptext1:
  2748                           	opt stack 0
  2749  00EFDE                     _standbyMode:
  2750                           	opt stack 25
  2751                           
  2752                           ;standbyMode.c: 1606: unsigned int drawerInformation[8] = {0,0,0,0,0,0,0,0};
  2753                           
  2754                           ;incstack = 0
  2755  00EFDE  EE21  F0AA         	lfsr	2,standbyMode@F3152
  2756  00EFE2  EE11  F050         	lfsr	1,standbyMode@drawerInformation
  2757  00EFE6  0E0F               	movlw	15
  2758  00EFE8                     u10551:
  2759  00EFE8  CFDB FFE3          	movff	plusw2,plusw1
  2760  00EFEC  06E8               	decf	wreg,f,c
  2761  00EFEE  E2FC               	bc	u10551
  2762                           
  2763                           ;standbyMode.c: 1607: unsigned int roundPieces[8] = {0,0,0,0,0,0,0,0};
  2764  00EFF0  EE21  F09A         	lfsr	2,standbyMode@F3154
  2765  00EFF4  EE11  F000         	lfsr	1,standbyMode@roundPieces
  2766  00EFF8  0E0F               	movlw	15
  2767  00EFFA                     u10561:
  2768  00EFFA  CFDB FFE3          	movff	plusw2,plusw1
  2769  00EFFE  06E8               	decf	wreg,f,c
  2770  00F000  E2FC               	bc	u10561
  2771                           
  2772                           ;standbyMode.c: 1608: unsigned int flatPieces[8] = {0,0,0,0,0,0,0,0};
  2773  00F002  EE21  F08A         	lfsr	2,standbyMode@F3156
  2774  00F006  EE11  F010         	lfsr	1,standbyMode@flatPieces
  2775  00F00A  0E0F               	movlw	15
  2776  00F00C                     u10571:
  2777  00F00C  CFDB FFE3          	movff	plusw2,plusw1
  2778  00F010  06E8               	decf	wreg,f,c
  2779  00F012  E2FC               	bc	u10571
  2780                           
  2781                           ;standbyMode.c: 1609: unsigned int longPieces[8] = {0,0,0,0,0,0,0,0};
  2782  00F014  EE22  F020         	lfsr	2,standbyMode@F3158
  2783  00F018  EE11  F020         	lfsr	1,standbyMode@longPieces
  2784  00F01C  0E0F               	movlw	15
  2785  00F01E                     u10581:
  2786  00F01E  CFDB FFE3          	movff	plusw2,plusw1
  2787  00F022  06E8               	decf	wreg,f,c
  2788  00F024  E2FC               	bc	u10581
  2789                           
  2790                           ;standbyMode.c: 1610: unsigned int dietType[8] = {0,0,0,0,0,0,0,0};
  2791  00F026  EE22  F010         	lfsr	2,standbyMode@F3160
  2792  00F02A  EE11  F030         	lfsr	1,standbyMode@dietType
  2793  00F02E  0E0F               	movlw	15
  2794  00F030                     u10591:
  2795  00F030  CFDB FFE3          	movff	plusw2,plusw1
  2796  00F034  06E8               	decf	wreg,f,c
  2797  00F036  E2FC               	bc	u10591
  2798                           
  2799                           ;standbyMode.c: 1611: unsigned int foodType[8] = {0,0,0,0,0,0,0,0};
  2800  00F038  EE22  F000         	lfsr	2,standbyMode@F3162
  2801  00F03C  EE11  F040         	lfsr	1,standbyMode@foodType
  2802  00F040  0E0F               	movlw	15
  2803  00F042                     u10601:
  2804  00F042  CFDB FFE3          	movff	plusw2,plusw1
  2805  00F046  06E8               	decf	wreg,f,c
  2806  00F048  E2FC               	bc	u10601
  2807                           
  2808                           ;standbyMode.c: 1612: unsigned int drawerCount = 0;
  2809  00F04A  0E00               	movlw	0
  2810  00F04C  0101               	movlb	1	; () banked
  2811  00F04E  6F87               	movwf	(standbyMode@drawerCount+1)& (0+255),b
  2812  00F050  0E00               	movlw	0
  2813  00F052  6F86               	movwf	standbyMode@drawerCount& (0+255),b
  2814                           
  2815                           ; BSR set to: 1
  2816                           ;standbyMode.c: 1613: unsigned int i = 0;
  2817  00F054  0E00               	movlw	0
  2818  00F056  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  2819  00F058  0E00               	movlw	0
  2820  00F05A  6F88               	movwf	standbyMode@i& (0+255),b
  2821                           
  2822                           ; BSR set to: 1
  2823                           ;standbyMode.c: 1614: unsigned int validDrawer = 0;
  2824  00F05C  0E00               	movlw	0
  2825  00F05E  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  2826  00F060  0E00               	movlw	0
  2827  00F062  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;standbyMode.c: 1615: unsigned int zero = 0;
  2831  00F064  0E00               	movlw	0
  2832  00F066  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  2833  00F068  0E00               	movlw	0
  2834  00F06A  6F79               	movwf	standbyMode@zero& (0+255),b
  2835                           
  2836                           ; BSR set to: 1
  2837                           ;standbyMode.c: 1616: unsigned int firstIteration = 0;
  2838  00F06C  0E00               	movlw	0
  2839  00F06E  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  2840  00F070  0E00               	movlw	0
  2841  00F072  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  2842                           
  2843                           ; BSR set to: 1
  2844                           ;standbyMode.c: 1617: unsigned int drawer = 0;
  2845  00F074  0E00               	movlw	0
  2846  00F076  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  2847  00F078  0E00               	movlw	0
  2848  00F07A  6F82               	movwf	standbyMode@drawer& (0+255),b
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;standbyMode.c: 1618: unsigned int diet = 0;
  2852  00F07C  0E00               	movlw	0
  2853  00F07E  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  2854  00F080  0E00               	movlw	0
  2855  00F082  6F80               	movwf	standbyMode@diet& (0+255),b
  2856                           
  2857                           ; BSR set to: 1
  2858                           ;standbyMode.c: 1619: unsigned int food = 0;
  2859  00F084  0E00               	movlw	0
  2860  00F086  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  2861  00F088  0E00               	movlw	0
  2862  00F08A  6F84               	movwf	standbyMode@food& (0+255),b
  2863                           
  2864                           ; BSR set to: 1
  2865                           ;standbyMode.c: 1620: unsigned char logNumber = 0;
  2866  00F08C  0E00               	movlw	0
  2867  00F08E  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  2868                           
  2869                           ; BSR set to: 1
  2870                           ;standbyMode.c: 1621: unsigned int n = 0;
  2871  00F090  0E00               	movlw	0
  2872  00F092  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  2873  00F094  0E00               	movlw	0
  2874  00F096  6F7B               	movwf	standbyMode@n& (0+255),b
  2875                           
  2876                           ; BSR set to: 1
  2877                           ;standbyMode.c: 1622: unsigned int round = 0;
  2878  00F098  0E00               	movlw	0
  2879  00F09A  6F6D               	movwf	(standbyMode@round+1)& (0+255),b
  2880  00F09C  0E00               	movlw	0
  2881  00F09E  6F6C               	movwf	standbyMode@round& (0+255),b
  2882                           
  2883                           ; BSR set to: 1
  2884                           ;standbyMode.c: 1623: unsigned int flat = 0;
  2885  00F0A0  0E00               	movlw	0
  2886  00F0A2  6F6F               	movwf	(standbyMode@flat+1)& (0+255),b
  2887  00F0A4  0E00               	movlw	0
  2888  00F0A6  6F6E               	movwf	standbyMode@flat& (0+255),b
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;standbyMode.c: 1624: unsigned int lng = 0;
  2892  00F0A8  0E00               	movlw	0
  2893  00F0AA  6F71               	movwf	(standbyMode@lng+1)& (0+255),b
  2894  00F0AC  0E00               	movlw	0
  2895  00F0AE  6F70               	movwf	standbyMode@lng& (0+255),b
  2896                           
  2897                           ; BSR set to: 1
  2898                           ;standbyMode.c: 1625: unsigned int decodedDiet = 0;
  2899  00F0B0  0E00               	movlw	0
  2900  00F0B2  6F73               	movwf	(standbyMode@decodedDiet+1)& (0+255),b
  2901  00F0B4  0E00               	movlw	0
  2902  00F0B6  6F72               	movwf	standbyMode@decodedDiet& (0+255),b
  2903                           
  2904                           ; BSR set to: 1
  2905                           ;standbyMode.c: 1626: unsigned int storedFoodType = 0;
  2906  00F0B8  0E00               	movlw	0
  2907  00F0BA  6F75               	movwf	(standbyMode@storedFoodType+1)& (0+255),b
  2908  00F0BC  0E00               	movlw	0
  2909  00F0BE  6F74               	movwf	standbyMode@storedFoodType& (0+255),b
  2910                           
  2911                           ; BSR set to: 1
  2912                           ;standbyMode.c: 1628: unsigned char time[7];
  2913                           ;standbyMode.c: 1629: unsigned int x = 0;
  2914  00F0C0  0E00               	movlw	0
  2915  00F0C2  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  2916  00F0C4  0E00               	movlw	0
  2917  00F0C6  6F7D               	movwf	standbyMode@x& (0+255),b
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;standbyMode.c: 1632: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2921  00F0C8  0E01               	movlw	1
  2922  00F0CA  ECBB  F057         	call	_lcdInst
  2923  00F0CE  0EC3               	movlw	195
  2924  00F0D0  6E60               	movwf	??_standbyMode& (0+255),c
  2925  00F0D2  0ECD               	movlw	205
  2926  00F0D4                     u11407:
  2927  00F0D4  2EE8               	decfsz	wreg,f,c
  2928  00F0D6  D7FE               	bra	u11407
  2929  00F0D8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2930  00F0DA  D7FC               	bra	u11407
  2931  00F0DC  F000               	nop	
  2932                           
  2933                           ;standbyMode.c: 1633: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2934  00F0DE  0E0C               	movlw	12
  2935  00F0E0  ECBB  F057         	call	_lcdInst
  2936                           
  2937                           ;standbyMode.c: 1634: printf("Standby");
  2938  00F0E4  0E9C               	movlw	low STR_1
  2939  00F0E6  6E0D               	movwf	printf@f,c
  2940  00F0E8  0EFF               	movlw	high STR_1
  2941  00F0EA  6E0E               	movwf	printf@f+1,c
  2942  00F0EC  EC55  F067         	call	_printf	;wreg free
  2943                           
  2944                           ;standbyMode.c: 1635: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2945  00F0F0  0E66               	movlw	102
  2946  00F0F2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  2947  00F0F4  0E76               	movlw	118
  2948  00F0F6  6E60               	movwf	??_standbyMode& (0+255),c
  2949  00F0F8  0EC1               	movlw	193
  2950  00F0FA                     u11417:
  2951  00F0FA  2EE8               	decfsz	wreg,f,c
  2952  00F0FC  D7FE               	bra	u11417
  2953  00F0FE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2954  00F100  D7FC               	bra	u11417
  2955  00F102  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  2956  00F104  D7FA               	bra	u11417
  2957  00F106  F000               	nop	
  2958                           
  2959                           ;standbyMode.c: 1636: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2960  00F108  0E01               	movlw	1
  2961  00F10A  ECBB  F057         	call	_lcdInst
  2962  00F10E  0EC3               	movlw	195
  2963  00F110  6E60               	movwf	??_standbyMode& (0+255),c
  2964  00F112  0ECD               	movlw	205
  2965  00F114                     u11427:
  2966  00F114  2EE8               	decfsz	wreg,f,c
  2967  00F116  D7FE               	bra	u11427
  2968  00F118  2E60               	decfsz	??_standbyMode& (0+255),f,c
  2969  00F11A  D7FC               	bra	u11427
  2970  00F11C  F000               	nop	
  2971                           
  2972                           ;standbyMode.c: 1637: printf("Press any key to");
  2973  00F11E  0E6B               	movlw	low STR_40
  2974  00F120  6E0D               	movwf	printf@f,c
  2975  00F122  0EFD               	movlw	high STR_40
  2976  00F124  6E0E               	movwf	printf@f+1,c
  2977  00F126  EC55  F067         	call	_printf	;wreg free
  2978                           
  2979                           ;standbyMode.c: 1638: lcdInst(0xC0);;
  2980  00F12A  0EC0               	movlw	192
  2981  00F12C  ECBB  F057         	call	_lcdInst
  2982                           
  2983                           ;standbyMode.c: 1639: printf("begin operation.");
  2984  00F130  0E38               	movlw	low STR_77
  2985  00F132  6E0D               	movwf	printf@f,c
  2986  00F134  0EFD               	movlw	high STR_77
  2987  00F136  6E0E               	movwf	printf@f+1,c
  2988  00F138  EC55  F067         	call	_printf	;wreg free
  2989  00F13C                     
  2990                           ;standbyMode.c: 1642: continue;
  2991  00F13C  A281               	btfss	3969,1,c	;volatile
  2992  00F13E  D7FE               	goto	l919
  2993                           
  2994                           ;standbyMode.c: 1643: }
  2995                           ;standbyMode.c: 1646: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2996  00F140  0E01               	movlw	1
  2997  00F142  ECBB  F057         	call	_lcdInst
  2998  00F146  0EC3               	movlw	195
  2999  00F148  6E60               	movwf	??_standbyMode& (0+255),c
  3000  00F14A  0ECD               	movlw	205
  3001  00F14C                     u11437:
  3002  00F14C  2EE8               	decfsz	wreg,f,c
  3003  00F14E  D7FE               	bra	u11437
  3004  00F150  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3005  00F152  D7FC               	bra	u11437
  3006  00F154  F000               	nop	
  3007                           
  3008                           ;standbyMode.c: 1647: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3009  00F156  0E0C               	movlw	12
  3010  00F158  ECBB  F057         	call	_lcdInst
  3011                           
  3012                           ;standbyMode.c: 1648: printf("Welcome to your");
  3013  00F15C  0EFD               	movlw	low STR_78
  3014  00F15E  6E0D               	movwf	printf@f,c
  3015  00F160  0EFD               	movlw	high STR_78
  3016  00F162  6E0E               	movwf	printf@f+1,c
  3017  00F164  EC55  F067         	call	_printf	;wreg free
  3018                           
  3019                           ;standbyMode.c: 1649: lcdInst(0xC0);;
  3020  00F168  0EC0               	movlw	192
  3021  00F16A  ECBB  F057         	call	_lcdInst
  3022                           
  3023                           ;standbyMode.c: 1650: printf("cabinet sorter!");
  3024  00F16E  0E8D               	movlw	low STR_79
  3025  00F170  6E0D               	movwf	printf@f,c
  3026  00F172  0EFD               	movlw	high STR_79
  3027  00F174  6E0E               	movwf	printf@f+1,c
  3028  00F176  EC55  F067         	call	_printf	;wreg free
  3029                           
  3030                           ;standbyMode.c: 1651: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3031  00F17A  0E33               	movlw	51
  3032  00F17C  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3033  00F17E  0EBB               	movlw	187
  3034  00F180  6E60               	movwf	??_standbyMode& (0+255),c
  3035  00F182  0EE0               	movlw	224
  3036  00F184                     u11447:
  3037  00F184  2EE8               	decfsz	wreg,f,c
  3038  00F186  D7FE               	bra	u11447
  3039  00F188  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3040  00F18A  D7FC               	bra	u11447
  3041  00F18C  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3042  00F18E  D7FA               	bra	u11447
  3043                           
  3044                           ;standbyMode.c: 1654: writeEEPROM(250, 3);
  3045  00F190  0E03               	movlw	3
  3046  00F192  6E01               	movwf	writeEEPROM@data,c
  3047  00F194  0EFA               	movlw	250
  3048  00F196  EC20  F058         	call	_writeEEPROM
  3049                           
  3050                           ;standbyMode.c: 1655: writeEEPROM(0, 18);
  3051  00F19A  0E12               	movlw	18
  3052  00F19C  6E01               	movwf	writeEEPROM@data,c
  3053  00F19E  0E00               	movlw	0
  3054  00F1A0  EC20  F058         	call	_writeEEPROM
  3055                           
  3056                           ;standbyMode.c: 1656: writeEEPROM(1, 2);
  3057  00F1A4  0E02               	movlw	2
  3058  00F1A6  6E01               	movwf	writeEEPROM@data,c
  3059  00F1A8  0E01               	movlw	1
  3060  00F1AA  EC20  F058         	call	_writeEEPROM
  3061                           
  3062                           ;standbyMode.c: 1657: writeEEPROM(2, 28);
  3063  00F1AE  0E1C               	movlw	28
  3064  00F1B0  6E01               	movwf	writeEEPROM@data,c
  3065  00F1B2  0E02               	movlw	2
  3066  00F1B4  EC20  F058         	call	_writeEEPROM
  3067                           
  3068                           ;standbyMode.c: 1658: writeEEPROM(3, 91);
  3069  00F1B8  0E5B               	movlw	91
  3070  00F1BA  6E01               	movwf	writeEEPROM@data,c
  3071  00F1BC  0E03               	movlw	3
  3072  00F1BE  EC20  F058         	call	_writeEEPROM
  3073                           
  3074                           ;standbyMode.c: 1659: writeEEPROM(4, 3);
  3075  00F1C2  0E03               	movlw	3
  3076  00F1C4  6E01               	movwf	writeEEPROM@data,c
  3077  00F1C6  0E04               	movlw	4
  3078  00F1C8  EC20  F058         	call	_writeEEPROM
  3079                           
  3080                           ;standbyMode.c: 1660: writeEEPROM(5, 15);
  3081  00F1CC  0E0F               	movlw	15
  3082  00F1CE  6E01               	movwf	writeEEPROM@data,c
  3083  00F1D0  0E05               	movlw	5
  3084  00F1D2  EC20  F058         	call	_writeEEPROM
  3085                           
  3086                           ;standbyMode.c: 1661: writeEEPROM(6, 8);
  3087  00F1D6  0E08               	movlw	8
  3088  00F1D8  6E01               	movwf	writeEEPROM@data,c
  3089  00F1DA  0E06               	movlw	6
  3090  00F1DC  EC20  F058         	call	_writeEEPROM
  3091                           
  3092                           ;standbyMode.c: 1662: writeEEPROM(7, 12);
  3093  00F1E0  0E0C               	movlw	12
  3094  00F1E2  6E01               	movwf	writeEEPROM@data,c
  3095  00F1E4  0E07               	movlw	7
  3096  00F1E6  EC20  F058         	call	_writeEEPROM
  3097                           
  3098                           ;standbyMode.c: 1663: writeEEPROM(8, 1);
  3099  00F1EA  0E01               	movlw	1
  3100  00F1EC  6E01               	movwf	writeEEPROM@data,c
  3101  00F1EE  0E08               	movlw	8
  3102  00F1F0  EC20  F058         	call	_writeEEPROM
  3103                           
  3104                           ;standbyMode.c: 1664: writeEEPROM(9, 13);
  3105  00F1F4  0E0D               	movlw	13
  3106  00F1F6  6E01               	movwf	writeEEPROM@data,c
  3107  00F1F8  0E09               	movlw	9
  3108  00F1FA  EC20  F058         	call	_writeEEPROM
  3109                           
  3110                           ;standbyMode.c: 1665: writeEEPROM(10, 0);
  3111  00F1FE  0E00               	movlw	0
  3112  00F200  6E01               	movwf	writeEEPROM@data,c
  3113  00F202  0E0A               	movlw	10
  3114  00F204  EC20  F058         	call	_writeEEPROM
  3115                           
  3116                           ;standbyMode.c: 1675: I2C_Master_Init(100000);
  3117  00F208  0EA0               	movlw	160
  3118  00F20A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  3119  00F20C  0E86               	movlw	134
  3120  00F20E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  3121  00F210  0E01               	movlw	1
  3122  00F212  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  3123  00F214  0E00               	movlw	0
  3124  00F216  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  3125  00F218  ECED  F058         	call	_I2C_Master_Init	;wreg free
  3126                           
  3127                           ;standbyMode.c: 1676: I2C_Master_Start();
  3128  00F21C  ECA5  F057         	call	_I2C_Master_Start	;wreg free
  3129                           
  3130                           ;standbyMode.c: 1677: I2C_Master_Write(0b11010001);
  3131  00F220  0E00               	movlw	0
  3132  00F222  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3133  00F224  0ED1               	movlw	209
  3134  00F226  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3135  00F228  ECAD  F057         	call	_I2C_Master_Write	;wreg free
  3136                           
  3137                           ;standbyMode.c: 1678: for(x = 0; x < 6; x++){
  3138  00F22C  0E00               	movlw	0
  3139  00F22E  0101               	movlb	1	; () banked
  3140  00F230  6F7E               	movwf	(standbyMode@x+1)& (0+255),b
  3141  00F232  0E00               	movlw	0
  3142  00F234  6F7D               	movwf	standbyMode@x& (0+255),b
  3143  00F236                     l8296:
  3144                           
  3145                           ; BSR set to: 1
  3146  00F236  517E               	movf	(standbyMode@x+1)& (0+255),w,b
  3147  00F238  E112               	bnz	l8306
  3148  00F23A  0E06               	movlw	6
  3149  00F23C  5D7D               	subwf	standbyMode@x& (0+255),w,b
  3150  00F23E  B0D8               	btfsc	status,0,c
  3151  00F240  D00E               	goto	u10630
  3152                           
  3153                           ; BSR set to: 1
  3154                           ;standbyMode.c: 1679: time[x] = I2C_Master_Read(0);
  3155                           
  3156                           ; BSR set to: 1
  3157                           
  3158                           ; BSR set to: 1
  3159  00F242  0E60               	movlw	low standbyMode@time
  3160  00F244  257D               	addwf	standbyMode@x& (0+255),w,b
  3161  00F246  6ED9               	movwf	fsr2l,c
  3162  00F248  0E01               	movlw	high standbyMode@time
  3163  00F24A  217E               	addwfc	(standbyMode@x+1)& (0+255),w,b
  3164  00F24C  6EDA               	movwf	fsr2h,c
  3165  00F24E  0E00               	movlw	0
  3166  00F250  ECE8  F057         	call	_I2C_Master_Read
  3167  00F254  6EDF               	movwf	indf2,c
  3168  00F256  0101               	movlb	1	; () banked
  3169  00F258  4B7D               	infsnz	standbyMode@x& (0+255),f,b
  3170  00F25A  2B7E               	incf	(standbyMode@x+1)& (0+255),f,b
  3171  00F25C  D7EC               	goto	l8296
  3172  00F25E                     u10630:
  3173  00F25E                     l8306:
  3174                           
  3175                           ; BSR set to: 1
  3176                           ;standbyMode.c: 1680: }
  3177                           ;standbyMode.c: 1681: time[6] = I2C_Master_Read(1);
  3178  00F25E  0E01               	movlw	1
  3179  00F260  ECE8  F057         	call	_I2C_Master_Read
  3180  00F264  0101               	movlb	1	; () banked
  3181  00F266  6F66               	movwf	(standbyMode@time+6)& (0+255),b
  3182                           
  3183                           ;standbyMode.c: 1682: I2C_Master_Stop();
  3184  00F268  ECA9  F057         	call	_I2C_Master_Stop	;wreg free
  3185                           
  3186                           ;standbyMode.c: 1684: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3187  00F26C  0E01               	movlw	1
  3188  00F26E  ECBB  F057         	call	_lcdInst
  3189  00F272  0EC3               	movlw	195
  3190  00F274  6E60               	movwf	??_standbyMode& (0+255),c
  3191  00F276  0ECD               	movlw	205
  3192  00F278                     u11457:
  3193  00F278  2EE8               	decfsz	wreg,f,c
  3194  00F27A  D7FE               	bra	u11457
  3195  00F27C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3196  00F27E  D7FC               	bra	u11457
  3197  00F280  F000               	nop	
  3198                           
  3199                           ;standbyMode.c: 1685: printf("Current date");
  3200  00F282  0E04               	movlw	low STR_80
  3201  00F284  6E0D               	movwf	printf@f,c
  3202  00F286  0EFF               	movlw	high STR_80
  3203  00F288  6E0E               	movwf	printf@f+1,c
  3204  00F28A  EC55  F067         	call	_printf	;wreg free
  3205                           
  3206                           ;standbyMode.c: 1686: lcdInst(0xC0);;
  3207  00F28E  0EC0               	movlw	192
  3208  00F290  ECBB  F057         	call	_lcdInst
  3209                           
  3210                           ;standbyMode.c: 1687: printf("and time:");
  3211  00F294  0E53               	movlw	low STR_81
  3212  00F296  6E0D               	movwf	printf@f,c
  3213  00F298  0EFF               	movlw	high STR_81
  3214  00F29A  6E0E               	movwf	printf@f+1,c
  3215  00F29C  EC55  F067         	call	_printf	;wreg free
  3216                           
  3217                           ;standbyMode.c: 1688: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3218  00F2A0  0E66               	movlw	102
  3219  00F2A2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3220  00F2A4  0E76               	movlw	118
  3221  00F2A6  6E60               	movwf	??_standbyMode& (0+255),c
  3222  00F2A8  0EC1               	movlw	193
  3223  00F2AA                     u11467:
  3224  00F2AA  2EE8               	decfsz	wreg,f,c
  3225  00F2AC  D7FE               	bra	u11467
  3226  00F2AE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3227  00F2B0  D7FC               	bra	u11467
  3228  00F2B2  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3229  00F2B4  D7FA               	bra	u11467
  3230  00F2B6  F000               	nop	
  3231                           
  3232                           ;standbyMode.c: 1690: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3233  00F2B8  0E01               	movlw	1
  3234  00F2BA  ECBB  F057         	call	_lcdInst
  3235  00F2BE  0EC3               	movlw	195
  3236  00F2C0  6E60               	movwf	??_standbyMode& (0+255),c
  3237  00F2C2  0ECD               	movlw	205
  3238  00F2C4                     u11477:
  3239  00F2C4  2EE8               	decfsz	wreg,f,c
  3240  00F2C6  D7FE               	bra	u11477
  3241  00F2C8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3242  00F2CA  D7FC               	bra	u11477
  3243  00F2CC  F000               	nop	
  3244                           
  3245                           ;standbyMode.c: 1691: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  3246  00F2CE  0E78               	movlw	low STR_82
  3247  00F2D0  6E0D               	movwf	printf@f,c
  3248  00F2D2  0EFE               	movlw	high STR_82
  3249  00F2D4  6E0E               	movwf	printf@f+1,c
  3250  00F2D6  C166  F00F         	movff	standbyMode@time+6,?_printf+2
  3251  00F2DA  6A10               	clrf	?_printf+3,c
  3252  00F2DC  C165  F011         	movff	standbyMode@time+5,?_printf+4
  3253  00F2E0  6A12               	clrf	?_printf+5,c
  3254  00F2E2  C164  F013         	movff	standbyMode@time+4,?_printf+6
  3255  00F2E6  6A14               	clrf	?_printf+7,c
  3256  00F2E8  EC55  F067         	call	_printf	;wreg free
  3257                           
  3258                           ;standbyMode.c: 1692: lcdInst(0xC0);;
  3259  00F2EC  0EC0               	movlw	192
  3260  00F2EE  ECBB  F057         	call	_lcdInst
  3261                           
  3262                           ;standbyMode.c: 1693: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3263  00F2F2  0E87               	movlw	low STR_83
  3264  00F2F4  6E0D               	movwf	printf@f,c
  3265  00F2F6  0EFE               	movlw	high STR_83
  3266  00F2F8  6E0E               	movwf	printf@f+1,c
  3267  00F2FA  C162  F00F         	movff	standbyMode@time+2,?_printf+2
  3268  00F2FE  6A10               	clrf	?_printf+3,c
  3269  00F300  C161  F011         	movff	standbyMode@time+1,?_printf+4
  3270  00F304  6A12               	clrf	?_printf+5,c
  3271  00F306  C160  F013         	movff	standbyMode@time,?_printf+6
  3272  00F30A  6A14               	clrf	?_printf+7,c
  3273  00F30C  EC55  F067         	call	_printf	;wreg free
  3274                           
  3275                           ;standbyMode.c: 1694: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3276  00F310  0E66               	movlw	102
  3277  00F312  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3278  00F314  0E76               	movlw	118
  3279  00F316  6E60               	movwf	??_standbyMode& (0+255),c
  3280  00F318  0EC1               	movlw	193
  3281  00F31A                     u11487:
  3282  00F31A  2EE8               	decfsz	wreg,f,c
  3283  00F31C  D7FE               	bra	u11487
  3284  00F31E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3285  00F320  D7FC               	bra	u11487
  3286  00F322  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3287  00F324  D7FA               	bra	u11487
  3288  00F326  F000               	nop	
  3289                           
  3290                           ;standbyMode.c: 1697: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3291  00F328  0E01               	movlw	1
  3292  00F32A  ECBB  F057         	call	_lcdInst
  3293  00F32E  0EC3               	movlw	195
  3294  00F330  6E60               	movwf	??_standbyMode& (0+255),c
  3295  00F332  0ECD               	movlw	205
  3296  00F334                     u11497:
  3297  00F334  2EE8               	decfsz	wreg,f,c
  3298  00F336  D7FE               	bra	u11497
  3299  00F338  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3300  00F33A  D7FC               	bra	u11497
  3301  00F33C  F000               	nop	
  3302                           
  3303                           ;standbyMode.c: 1698: printf("Press # to");
  3304  00F33E  0E48               	movlw	low STR_84
  3305  00F340  6E0D               	movwf	printf@f,c
  3306  00F342  0EFF               	movlw	high STR_84
  3307  00F344  6E0E               	movwf	printf@f+1,c
  3308  00F346  EC55  F067         	call	_printf	;wreg free
  3309                           
  3310                           ;standbyMode.c: 1699: lcdInst(0xC0);;
  3311  00F34A  0EC0               	movlw	192
  3312  00F34C  ECBB  F057         	call	_lcdInst
  3313                           
  3314                           ;standbyMode.c: 1700: printf("view logs,");
  3315  00F350  0E11               	movlw	low STR_85
  3316  00F352  6E0D               	movwf	printf@f,c
  3317  00F354  0EFF               	movlw	high STR_85
  3318  00F356  6E0E               	movwf	printf@f+1,c
  3319  00F358  EC55  F067         	call	_printf	;wreg free
  3320                           
  3321                           ;standbyMode.c: 1701: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3322  00F35C  0E66               	movlw	102
  3323  00F35E  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3324  00F360  0E76               	movlw	118
  3325  00F362  6E60               	movwf	??_standbyMode& (0+255),c
  3326  00F364  0EC1               	movlw	193
  3327  00F366                     u11507:
  3328  00F366  2EE8               	decfsz	wreg,f,c
  3329  00F368  D7FE               	bra	u11507
  3330  00F36A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3331  00F36C  D7FC               	bra	u11507
  3332  00F36E  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3333  00F370  D7FA               	bra	u11507
  3334  00F372  F000               	nop	
  3335                           
  3336                           ;standbyMode.c: 1702: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3337  00F374  0E01               	movlw	1
  3338  00F376  ECBB  F057         	call	_lcdInst
  3339  00F37A  0EC3               	movlw	195
  3340  00F37C  6E60               	movwf	??_standbyMode& (0+255),c
  3341  00F37E  0ECD               	movlw	205
  3342  00F380                     u11517:
  3343  00F380  2EE8               	decfsz	wreg,f,c
  3344  00F382  D7FE               	bra	u11517
  3345  00F384  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3346  00F386  D7FC               	bra	u11517
  3347  00F388  F000               	nop	
  3348                           
  3349                           ;standbyMode.c: 1703: printf("or press D to");
  3350  00F38A  0ECF               	movlw	low STR_86
  3351  00F38C  6E0D               	movwf	printf@f,c
  3352  00F38E  0EFE               	movlw	high STR_86
  3353  00F390  6E0E               	movwf	printf@f+1,c
  3354  00F392  EC55  F067         	call	_printf	;wreg free
  3355                           
  3356                           ;standbyMode.c: 1704: lcdInst(0xC0);;
  3357  00F396  0EC0               	movlw	192
  3358  00F398  ECBB  F057         	call	_lcdInst
  3359                           
  3360                           ;standbyMode.c: 1705: printf("begin operation.");
  3361  00F39C  0E38               	movlw	low STR_77
  3362  00F39E  6E0D               	movwf	printf@f,c
  3363  00F3A0  0EFD               	movlw	high STR_77
  3364  00F3A2  6E0E               	movwf	printf@f+1,c
  3365  00F3A4  EC55  F067         	call	_printf	;wreg free
  3366  00F3A8  A281               	btfss	3969,1,c	;volatile
  3367  00F3AA  D7FE               	goto	l924
  3368                           
  3369                           ;standbyMode.c: 1708: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3370  00F3AC  3881               	swapf	3969,w,c	;volatile
  3371  00F3AE  0B0F               	andlw	15
  3372  00F3B0  0B0F               	andlw	15
  3373  00F3B2  0101               	movlb	1	; () banked
  3374  00F3B4  6F6B               	movwf	standbyMode@keypress& (0+255),b
  3375  00F3B6                     
  3376                           ; BSR set to: 1
  3377  00F3B6  B281               	btfsc	3969,1,c	;volatile
  3378  00F3B8  D7FE               	goto	l927
  3379                           
  3380                           ;standbyMode.c: 1711: if (keypress == 15){
  3381  00F3BA  0E0F               	movlw	15
  3382  00F3BC  0101               	movlb	1	; () banked
  3383  00F3BE  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  3384  00F3C0  A4D8               	btfss	status,2,c
  3385  00F3C2  D3EE               	goto	l929
  3386  00F3C4                     u10660:
  3387                           
  3388                           ; BSR set to: 1
  3389                           ;standbyMode.c: 1755: if (firstIteration == 1){
  3390                           
  3391                           ; BSR set to: 1
  3392                           
  3393                           ;standbyMode.c: 1754: while (1){
  3394  00F3C4  0567               	decf	standbyMode@firstIteration& (0+255),w,b
  3395  00F3C6  1168               	iorwf	(standbyMode@firstIteration+1)& (0+255),w,b
  3396  00F3C8  A4D8               	btfss	status,2,c
  3397  00F3CA  D1D9               	goto	l931
  3398  00F3CC                     u10670:
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;standbyMode.c: 1758: if(drawerCount >= 8){
  3402                           
  3403                           ; BSR set to: 1
  3404                           
  3405                           ;standbyMode.c: 1756: while (1){
  3406  00F3CC  5187               	movf	(standbyMode@drawerCount+1)& (0+255),w,b
  3407  00F3CE  E104               	bnz	u10680
  3408  00F3D0  0E08               	movlw	8
  3409  00F3D2  5D86               	subwf	standbyMode@drawerCount& (0+255),w,b
  3410  00F3D4  A0D8               	btfss	status,0,c
  3411  00F3D6  D02A               	goto	l933
  3412  00F3D8                     u10680:
  3413                           
  3414                           ; BSR set to: 1
  3415                           ;standbyMode.c: 1759: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3416  00F3D8  0E01               	movlw	1
  3417  00F3DA  ECBB  F057         	call	_lcdInst
  3418  00F3DE  0EC3               	movlw	195
  3419  00F3E0  6E60               	movwf	??_standbyMode& (0+255),c
  3420  00F3E2  0ECD               	movlw	205
  3421  00F3E4                     u11527:
  3422  00F3E4  2EE8               	decfsz	wreg,f,c
  3423  00F3E6  D7FE               	bra	u11527
  3424  00F3E8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3425  00F3EA  D7FC               	bra	u11527
  3426  00F3EC  F000               	nop	
  3427                           
  3428                           ;standbyMode.c: 1760: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3429  00F3EE  0E0C               	movlw	12
  3430  00F3F0  ECBB  F057         	call	_lcdInst
  3431                           
  3432                           ;standbyMode.c: 1761: printf("Maximum of 8");
  3433  00F3F4  0EEA               	movlw	low STR_88
  3434  00F3F6  6E0D               	movwf	printf@f,c
  3435  00F3F8  0EFE               	movlw	high STR_88
  3436  00F3FA  6E0E               	movwf	printf@f+1,c
  3437  00F3FC  EC55  F067         	call	_printf	;wreg free
  3438                           
  3439                           ;standbyMode.c: 1762: lcdInst(0xC0);;
  3440  00F400  0EC0               	movlw	192
  3441  00F402  ECBB  F057         	call	_lcdInst
  3442                           
  3443                           ;standbyMode.c: 1763: printf("drawers reached!");
  3444  00F406  0E27               	movlw	low STR_89
  3445  00F408  6E0D               	movwf	printf@f,c
  3446  00F40A  0EFD               	movlw	high STR_89
  3447  00F40C  6E0E               	movwf	printf@f+1,c
  3448  00F40E  EC55  F067         	call	_printf	;wreg free
  3449                           
  3450                           ;standbyMode.c: 1764: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3451  00F412  0E66               	movlw	102
  3452  00F414  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3453  00F416  0E76               	movlw	118
  3454  00F418  6E60               	movwf	??_standbyMode& (0+255),c
  3455  00F41A  0EC1               	movlw	193
  3456  00F41C                     u11537:
  3457  00F41C  2EE8               	decfsz	wreg,f,c
  3458  00F41E  D7FE               	bra	u11537
  3459  00F420  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3460  00F422  D7FC               	bra	u11537
  3461  00F424  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3462  00F426  D7FA               	bra	u11537
  3463  00F428  F000               	nop	
  3464                           
  3465                           ;standbyMode.c: 1765: break;
  3466  00F42A  D328               	goto	l959
  3467  00F42C                     l933:
  3468                           
  3469                           ;standbyMode.c: 1766: }
  3470                           ;standbyMode.c: 1768: DRAWER_BACK: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4
      +                          000.0)));;
  3471  00F42C  0E01               	movlw	1
  3472  00F42E  ECBB  F057         	call	_lcdInst
  3473  00F432  0EC3               	movlw	195
  3474  00F434  6E60               	movwf	??_standbyMode& (0+255),c
  3475  00F436  0ECD               	movlw	205
  3476  00F438                     u11547:
  3477  00F438  2EE8               	decfsz	wreg,f,c
  3478  00F43A  D7FE               	bra	u11547
  3479  00F43C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3480  00F43E  D7FC               	bra	u11547
  3481  00F440  F000               	nop	
  3482                           
  3483                           ;standbyMode.c: 1769: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3484  00F442  0E0C               	movlw	12
  3485  00F444  ECBB  F057         	call	_lcdInst
  3486                           
  3487                           ;standbyMode.c: 1770: printf("Another drawer?");
  3488  00F448  0EED               	movlw	low STR_90
  3489  00F44A  6E0D               	movwf	printf@f,c
  3490  00F44C  0EFD               	movlw	high STR_90
  3491  00F44E  6E0E               	movwf	printf@f+1,c
  3492  00F450  EC55  F067         	call	_printf	;wreg free
  3493                           
  3494                           ;standbyMode.c: 1771: lcdInst(0xC0);;
  3495  00F454  0EC0               	movlw	192
  3496  00F456  ECBB  F057         	call	_lcdInst
  3497                           
  3498                           ;standbyMode.c: 1772: printf("# = No, D = Yes");
  3499  00F45A  0E0D               	movlw	low STR_64
  3500  00F45C  6E0D               	movwf	printf@f,c
  3501  00F45E  0EFE               	movlw	high STR_64
  3502  00F460  6E0E               	movwf	printf@f+1,c
  3503  00F462  EC55  F067         	call	_printf	;wreg free
  3504  00F466  A281               	btfss	3969,1,c	;volatile
  3505  00F468  D7FE               	goto	l937
  3506                           
  3507                           ;standbyMode.c: 1775: unsigned char keypress1 = (PORTB & 0xF0) >> 4;
  3508  00F46A  3881               	swapf	3969,w,c	;volatile
  3509  00F46C  0B0F               	andlw	15
  3510  00F46E  0B0F               	andlw	15
  3511  00F470  0101               	movlb	1	; () banked
  3512  00F472  6F76               	movwf	standbyMode@keypress1& (0+255),b
  3513  00F474                     
  3514                           ; BSR set to: 1
  3515  00F474  B281               	btfsc	3969,1,c	;volatile
  3516  00F476  D7FE               	goto	l940
  3517                           
  3518                           ;standbyMode.c: 1778: if (keypress1 == 15){
  3519  00F478  0E0F               	movlw	15
  3520  00F47A  0101               	movlb	1	; () banked
  3521  00F47C  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  3522  00F47E  A4D8               	btfss	status,2,c
  3523  00F480  D177               	goto	l942
  3524  00F482                     u10710:
  3525                           
  3526                           ; BSR set to: 1
  3527                           
  3528                           ; BSR set to: 1
  3529                           
  3530                           ;standbyMode.c: 1779: DIET_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3531  00F482  0E01               	movlw	1
  3532  00F484  ECBB  F057         	call	_lcdInst
  3533  00F488  0EC3               	movlw	195
  3534  00F48A  6E60               	movwf	??_standbyMode& (0+255),c
  3535  00F48C  0ECD               	movlw	205
  3536  00F48E                     u11557:
  3537  00F48E  2EE8               	decfsz	wreg,f,c
  3538  00F490  D7FE               	bra	u11557
  3539  00F492  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3540  00F494  D7FC               	bra	u11557
  3541  00F496  F000               	nop	
  3542                           
  3543                           ;standbyMode.c: 1780: drawer = which_drawer();
  3544  00F498  EC7D  F062         	call	_which_drawer	;wreg free
  3545  00F49C  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  3546  00F4A0  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  3547                           
  3548                           ;standbyMode.c: 1782: if (drawer == 100){
  3549  00F4A4  0E64               	movlw	100
  3550  00F4A6  0101               	movlb	1	; () banked
  3551  00F4A8  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  3552  00F4AA  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  3553  00F4AC  A4D8               	btfss	status,2,c
  3554  00F4AE  D005               	goto	l944
  3555                           
  3556                           ; BSR set to: 1
  3557                           ;standbyMode.c: 1783: drawer = 0;
  3558  00F4B0  0E00               	movlw	0
  3559  00F4B2  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  3560  00F4B4  0E00               	movlw	0
  3561  00F4B6  6F82               	movwf	standbyMode@drawer& (0+255),b
  3562                           
  3563                           ;standbyMode.c: 1784: goto DRAWER_BACK;
  3564  00F4B8  D7B9               	goto	l933
  3565  00F4BA                     l944:
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;standbyMode.c: 1785: }
  3569                           ;standbyMode.c: 1787: for (i=0; i<8; i++){
  3570                           
  3571                           ; BSR set to: 1
  3572  00F4BA  0E00               	movlw	0
  3573  00F4BC  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  3574  00F4BE  0E00               	movlw	0
  3575  00F4C0  6F88               	movwf	standbyMode@i& (0+255),b
  3576  00F4C2                     l8394:
  3577                           
  3578                           ; BSR set to: 1
  3579  00F4C2  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  3580  00F4C4  E12C               	bnz	l8410
  3581  00F4C6  0E08               	movlw	8
  3582  00F4C8  5D88               	subwf	standbyMode@i& (0+255),w,b
  3583  00F4CA  B0D8               	btfsc	status,0,c
  3584  00F4CC  D028               	goto	u10760
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;standbyMode.c: 1788: if (drawerInformation[i] == drawer){
  3588                           
  3589                           ; BSR set to: 1
  3590                           
  3591                           ; BSR set to: 1
  3592  00F4CE  90D8               	bcf	status,0,c
  3593  00F4D0  3588               	rlcf	standbyMode@i& (0+255),w,b
  3594  00F4D2  6ED9               	movwf	fsr2l,c
  3595  00F4D4  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3596  00F4D6  6EDA               	movwf	fsr2h,c
  3597  00F4D8  0E50               	movlw	low standbyMode@drawerInformation
  3598  00F4DA  26D9               	addwf	fsr2l,f,c
  3599  00F4DC  0E01               	movlw	high standbyMode@drawerInformation
  3600  00F4DE  22DA               	addwfc	fsr2h,f,c
  3601  00F4E0  5182               	movf	standbyMode@drawer& (0+255),w,b
  3602  00F4E2  18DE               	xorwf	postinc2,w,c
  3603  00F4E4  E119               	bnz	l8406
  3604  00F4E6  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  3605  00F4E8  18DE               	xorwf	postinc2,w,c
  3606  00F4EA  A4D8               	btfss	status,2,c
  3607  00F4EC  D015               	goto	l948
  3608                           
  3609                           ; BSR set to: 1
  3610                           ;standbyMode.c: 1789: validDrawer = 1;
  3611  00F4EE  0E00               	movlw	0
  3612  00F4F0  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3613  00F4F2  0E01               	movlw	1
  3614  00F4F4  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3615                           
  3616                           ; BSR set to: 1
  3617                           ;standbyMode.c: 1790: if (drawerInformation[i] == 0){
  3618  00F4F6  90D8               	bcf	status,0,c
  3619  00F4F8  3588               	rlcf	standbyMode@i& (0+255),w,b
  3620  00F4FA  6ED9               	movwf	fsr2l,c
  3621  00F4FC  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  3622  00F4FE  6EDA               	movwf	fsr2h,c
  3623  00F500  0E50               	movlw	low standbyMode@drawerInformation
  3624  00F502  26D9               	addwf	fsr2l,f,c
  3625  00F504  0E01               	movlw	high standbyMode@drawerInformation
  3626  00F506  22DA               	addwfc	fsr2h,f,c
  3627  00F508  50DE               	movf	postinc2,w,c
  3628  00F50A  10DE               	iorwf	postinc2,w,c
  3629  00F50C  A4D8               	btfss	status,2,c
  3630  00F50E  D004               	goto	l948
  3631                           
  3632                           ; BSR set to: 1
  3633                           ;standbyMode.c: 1791: zero = 1;
  3634  00F510  0E00               	movlw	0
  3635  00F512  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3636  00F514  0E01               	movlw	1
  3637  00F516  6F79               	movwf	standbyMode@zero& (0+255),b
  3638  00F518                     l948:
  3639  00F518                     l8406:
  3640                           
  3641                           ; BSR set to: 1
  3642  00F518  4B88               	infsnz	standbyMode@i& (0+255),f,b
  3643  00F51A  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  3644  00F51C  D7D2               	goto	l8394
  3645  00F51E                     u10760:
  3646  00F51E                     l8410:
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;standbyMode.c: 1792: }
  3650                           ;standbyMode.c: 1793: }
  3651                           ;standbyMode.c: 1794: }
  3652                           ;standbyMode.c: 1795: if (validDrawer == 1){
  3653  00F51E  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  3654  00F520  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  3655  00F522  A4D8               	btfss	status,2,c
  3656  00F524  D062               	goto	l949
  3657                           
  3658                           ; BSR set to: 1
  3659                           ;standbyMode.c: 1796: if (zero == 1){
  3660  00F526  0579               	decf	standbyMode@zero& (0+255),w,b
  3661  00F528  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  3662  00F52A  A4D8               	btfss	status,2,c
  3663  00F52C  D02F               	goto	l950
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;standbyMode.c: 1797: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3667  00F52E  0E01               	movlw	1
  3668  00F530  ECBB  F057         	call	_lcdInst
  3669  00F534  0EC3               	movlw	195
  3670  00F536  6E60               	movwf	??_standbyMode& (0+255),c
  3671  00F538  0ECD               	movlw	205
  3672  00F53A                     u11567:
  3673  00F53A  2EE8               	decfsz	wreg,f,c
  3674  00F53C  D7FE               	bra	u11567
  3675  00F53E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3676  00F540  D7FC               	bra	u11567
  3677  00F542  F000               	nop	
  3678                           
  3679                           ;standbyMode.c: 1798: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3680  00F544  0E0C               	movlw	12
  3681  00F546  ECBB  F057         	call	_lcdInst
  3682                           
  3683                           ;standbyMode.c: 1799: printf("No drawer");
  3684  00F54A  0E5D               	movlw	low STR_92
  3685  00F54C  6E0D               	movwf	printf@f,c
  3686  00F54E  0EFF               	movlw	high STR_92
  3687  00F550  6E0E               	movwf	printf@f+1,c
  3688  00F552  EC55  F067         	call	_printf	;wreg free
  3689                           
  3690                           ;standbyMode.c: 1800: lcdInst(0xC0);;
  3691  00F556  0EC0               	movlw	192
  3692  00F558  ECBB  F057         	call	_lcdInst
  3693                           
  3694                           ;standbyMode.c: 1801: printf("number pressed.");
  3695  00F55C  0E9D               	movlw	low STR_93
  3696  00F55E  6E0D               	movwf	printf@f,c
  3697  00F560  0EFD               	movlw	high STR_93
  3698  00F562  6E0E               	movwf	printf@f+1,c
  3699  00F564  EC55  F067         	call	_printf	;wreg free
  3700                           
  3701                           ;standbyMode.c: 1802: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3702  00F568  0E66               	movlw	102
  3703  00F56A  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3704  00F56C  0E76               	movlw	118
  3705  00F56E  6E60               	movwf	??_standbyMode& (0+255),c
  3706  00F570  0EC1               	movlw	193
  3707  00F572                     u11577:
  3708  00F572  2EE8               	decfsz	wreg,f,c
  3709  00F574  D7FE               	bra	u11577
  3710  00F576  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3711  00F578  D7FC               	bra	u11577
  3712  00F57A  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3713  00F57C  D7FA               	bra	u11577
  3714  00F57E  F000               	nop	
  3715                           
  3716                           ;standbyMode.c: 1803: zero = 0;
  3717  00F580  0E00               	movlw	0
  3718  00F582  0101               	movlb	1	; () banked
  3719  00F584  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  3720  00F586  0E00               	movlw	0
  3721  00F588  6F79               	movwf	standbyMode@zero& (0+255),b
  3722                           
  3723                           ;standbyMode.c: 1804: }
  3724  00F58A  D029               	goto	l951
  3725  00F58C                     l950:
  3726                           
  3727                           ; BSR set to: 1
  3728                           ;standbyMode.c: 1805: else{
  3729                           ;standbyMode.c: 1806: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3730                           
  3731                           ; BSR set to: 1
  3732  00F58C  0E01               	movlw	1
  3733  00F58E  ECBB  F057         	call	_lcdInst
  3734  00F592  0EC3               	movlw	195
  3735  00F594  6E60               	movwf	??_standbyMode& (0+255),c
  3736  00F596  0ECD               	movlw	205
  3737  00F598                     u11587:
  3738  00F598  2EE8               	decfsz	wreg,f,c
  3739  00F59A  D7FE               	bra	u11587
  3740  00F59C  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3741  00F59E  D7FC               	bra	u11587
  3742  00F5A0  F000               	nop	
  3743                           
  3744                           ;standbyMode.c: 1807: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  3745  00F5A2  0E0C               	movlw	12
  3746  00F5A4  ECBB  F057         	call	_lcdInst
  3747                           
  3748                           ;standbyMode.c: 1808: printf("Drawer already");
  3749  00F5A8  0E96               	movlw	low STR_94
  3750  00F5AA  6E0D               	movwf	printf@f,c
  3751  00F5AC  0EFE               	movlw	high STR_94
  3752  00F5AE  6E0E               	movwf	printf@f+1,c
  3753  00F5B0  EC55  F067         	call	_printf	;wreg free
  3754                           
  3755                           ;standbyMode.c: 1809: lcdInst(0xC0);;
  3756  00F5B4  0EC0               	movlw	192
  3757  00F5B6  ECBB  F057         	call	_lcdInst
  3758                           
  3759                           ;standbyMode.c: 1810: printf("in use!");
  3760  00F5BA  0E84               	movlw	low STR_95
  3761  00F5BC  6E0D               	movwf	printf@f,c
  3762  00F5BE  0EFF               	movlw	high STR_95
  3763  00F5C0  6E0E               	movwf	printf@f+1,c
  3764  00F5C2  EC55  F067         	call	_printf	;wreg free
  3765                           
  3766                           ;standbyMode.c: 1811: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3767  00F5C6  0E66               	movlw	102
  3768  00F5C8  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  3769  00F5CA  0E76               	movlw	118
  3770  00F5CC  6E60               	movwf	??_standbyMode& (0+255),c
  3771  00F5CE  0EC1               	movlw	193
  3772  00F5D0                     u11597:
  3773  00F5D0  2EE8               	decfsz	wreg,f,c
  3774  00F5D2  D7FE               	bra	u11597
  3775  00F5D4  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3776  00F5D6  D7FC               	bra	u11597
  3777  00F5D8  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  3778  00F5DA  D7FA               	bra	u11597
  3779  00F5DC  F000               	nop	
  3780  00F5DE                     l951:
  3781                           
  3782                           ;standbyMode.c: 1812: }
  3783                           ;standbyMode.c: 1813: validDrawer = 0;
  3784  00F5DE  0E00               	movlw	0
  3785  00F5E0  0101               	movlb	1	; () banked
  3786  00F5E2  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  3787  00F5E4  0E00               	movlw	0
  3788  00F5E6  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  3789                           
  3790                           ;standbyMode.c: 1814: continue;
  3791  00F5E8  D6F1               	goto	u10670
  3792  00F5EA                     l949:
  3793                           
  3794                           ; BSR set to: 1
  3795                           
  3796                           ; BSR set to: 1
  3797                           
  3798                           ;standbyMode.c: 1816: else{
  3799                           ;standbyMode.c: 1817: FOOD_BACK1: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  3800                           
  3801                           ; BSR set to: 1
  3802  00F5EA  0E01               	movlw	1
  3803  00F5EC  ECBB  F057         	call	_lcdInst
  3804  00F5F0  0EC3               	movlw	195
  3805  00F5F2  6E60               	movwf	??_standbyMode& (0+255),c
  3806  00F5F4  0ECD               	movlw	205
  3807  00F5F6                     u11607:
  3808  00F5F6  2EE8               	decfsz	wreg,f,c
  3809  00F5F8  D7FE               	bra	u11607
  3810  00F5FA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  3811  00F5FC  D7FC               	bra	u11607
  3812  00F5FE  F000               	nop	
  3813                           
  3814                           ;standbyMode.c: 1818: diet = diet_press(drawer);
  3815  00F600  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  3816  00F604  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  3817  00F608  EC4E  F069         	call	_diet_press	;wreg free
  3818  00F60C  C029  F180         	movff	?_diet_press,standbyMode@diet
  3819  00F610  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  3820                           
  3821                           ;standbyMode.c: 1819: if (diet == 100){
  3822  00F614  0E64               	movlw	100
  3823  00F616  0101               	movlb	1	; () banked
  3824  00F618  1980               	xorwf	standbyMode@diet& (0+255),w,b
  3825  00F61A  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  3826  00F61C  A4D8               	btfss	status,2,c
  3827  00F61E  D005               	goto	l955
  3828                           
  3829                           ; BSR set to: 1
  3830                           ;standbyMode.c: 1820: diet = 0;
  3831  00F620  0E00               	movlw	0
  3832  00F622  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3833  00F624  0E00               	movlw	0
  3834  00F626  6F80               	movwf	standbyMode@diet& (0+255),b
  3835                           
  3836                           ;standbyMode.c: 1821: goto DIET_BACK1;
  3837  00F628  D72C               	goto	u10710
  3838  00F62A                     l955:
  3839                           
  3840                           ; BSR set to: 1
  3841                           ;standbyMode.c: 1822: }
  3842                           ;standbyMode.c: 1824: food = food_press(diet, drawer);
  3843                           
  3844                           ; BSR set to: 1
  3845  00F62A  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  3846  00F62E  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  3847  00F632  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  3848  00F636  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  3849  00F63A  EC80  F061         	call	_food_press	;wreg free
  3850  00F63E  C029  F184         	movff	?_food_press,standbyMode@food
  3851  00F642  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  3852                           
  3853                           ;standbyMode.c: 1825: if (food == 100){
  3854  00F646  0E64               	movlw	100
  3855  00F648  0101               	movlb	1	; () banked
  3856  00F64A  1984               	xorwf	standbyMode@food& (0+255),w,b
  3857  00F64C  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  3858  00F64E  A4D8               	btfss	status,2,c
  3859  00F650  D009               	goto	l956
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;standbyMode.c: 1826: diet = 0;
  3863  00F652  0E00               	movlw	0
  3864  00F654  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  3865  00F656  0E00               	movlw	0
  3866  00F658  6F80               	movwf	standbyMode@diet& (0+255),b
  3867                           
  3868                           ;standbyMode.c: 1827: food = 0;
  3869  00F65A  0E00               	movlw	0
  3870  00F65C  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  3871  00F65E  0E00               	movlw	0
  3872  00F660  6F84               	movwf	standbyMode@food& (0+255),b
  3873                           
  3874                           ;standbyMode.c: 1828: goto FOOD_BACK1;
  3875  00F662  D7C3               	goto	l949
  3876  00F664                     l956:
  3877                           
  3878                           ; BSR set to: 1
  3879                           ;standbyMode.c: 1829: }
  3880                           ;standbyMode.c: 1831: drawerInformation[drawerCount] = drawer;
  3881                           
  3882                           ; BSR set to: 1
  3883  00F664  90D8               	bcf	status,0,c
  3884  00F666  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3885  00F668  6ED9               	movwf	fsr2l,c
  3886  00F66A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3887  00F66C  6EDA               	movwf	fsr2h,c
  3888  00F66E  0E50               	movlw	low standbyMode@drawerInformation
  3889  00F670  26D9               	addwf	fsr2l,f,c
  3890  00F672  0E01               	movlw	high standbyMode@drawerInformation
  3891  00F674  22DA               	addwfc	fsr2h,f,c
  3892  00F676  C182  FFDE         	movff	standbyMode@drawer,postinc2
  3893  00F67A  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;standbyMode.c: 1832: decodedDiet = decode_diet(diet);
  3897  00F67E  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  3898  00F682  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  3899  00F686  EC68  F05E         	call	_decode_diet	;wreg free
  3900  00F68A  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  3901  00F68E  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  3902                           
  3903                           ;standbyMode.c: 1833: dietType[drawerCount] = decodedDiet;
  3904  00F692  90D8               	bcf	status,0,c
  3905  00F694  0101               	movlb	1	; () banked
  3906  00F696  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3907  00F698  6ED9               	movwf	fsr2l,c
  3908  00F69A  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3909  00F69C  6EDA               	movwf	fsr2h,c
  3910  00F69E  0E30               	movlw	low standbyMode@dietType
  3911  00F6A0  26D9               	addwf	fsr2l,f,c
  3912  00F6A2  0E01               	movlw	high standbyMode@dietType
  3913  00F6A4  22DA               	addwfc	fsr2h,f,c
  3914  00F6A6  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  3915  00F6AA  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  3916                           
  3917                           ;standbyMode.c: 1834: storedFoodType = printFoodInput(food);
  3918  00F6AE  C184  F001         	movff	standbyMode@food,printFoodInput@food
  3919  00F6B2  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  3920  00F6B6  EC88  F063         	call	_printFoodInput	;wreg free
  3921  00F6BA  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  3922  00F6BE  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  3923                           
  3924                           ;standbyMode.c: 1835: foodType[drawerCount] = storedFoodType;
  3925  00F6C2  90D8               	bcf	status,0,c
  3926  00F6C4  0101               	movlb	1	; () banked
  3927  00F6C6  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3928  00F6C8  6ED9               	movwf	fsr2l,c
  3929  00F6CA  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3930  00F6CC  6EDA               	movwf	fsr2h,c
  3931  00F6CE  0E40               	movlw	low standbyMode@foodType
  3932  00F6D0  26D9               	addwf	fsr2l,f,c
  3933  00F6D2  0E01               	movlw	high standbyMode@foodType
  3934  00F6D4  22DA               	addwfc	fsr2h,f,c
  3935  00F6D6  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  3936  00F6DA  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;standbyMode.c: 1838: round = getRound(food);
  3940  00F6DE  C184  F001         	movff	standbyMode@food,getRound@code
  3941  00F6E2  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  3942  00F6E6  ECDA  F05C         	call	_getRound	;wreg free
  3943  00F6EA  C001  F16C         	movff	?_getRound,standbyMode@round
  3944  00F6EE  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  3945                           
  3946                           ;standbyMode.c: 1839: flat = getFlat(food);
  3947  00F6F2  C184  F001         	movff	standbyMode@food,getFlat@code
  3948  00F6F6  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  3949  00F6FA  EC62  F05C         	call	_getFlat	;wreg free
  3950  00F6FE  C001  F16E         	movff	?_getFlat,standbyMode@flat
  3951  00F702  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  3952                           
  3953                           ;standbyMode.c: 1840: lng = getLong(food);
  3954  00F706  C184  F001         	movff	standbyMode@food,getLong@code
  3955  00F70A  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  3956  00F70E  ECDD  F05D         	call	_getLong	;wreg free
  3957  00F712  C001  F170         	movff	?_getLong,standbyMode@lng
  3958  00F716  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  3959                           
  3960                           ;standbyMode.c: 1841: roundPieces[drawerCount] = round;
  3961  00F71A  90D8               	bcf	status,0,c
  3962  00F71C  0101               	movlb	1	; () banked
  3963  00F71E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3964  00F720  6ED9               	movwf	fsr2l,c
  3965  00F722  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3966  00F724  6EDA               	movwf	fsr2h,c
  3967  00F726  0E00               	movlw	low standbyMode@roundPieces
  3968  00F728  26D9               	addwf	fsr2l,f,c
  3969  00F72A  0E01               	movlw	high standbyMode@roundPieces
  3970  00F72C  22DA               	addwfc	fsr2h,f,c
  3971  00F72E  C16C  FFDE         	movff	standbyMode@round,postinc2
  3972  00F732  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  3973                           
  3974                           ;standbyMode.c: 1842: flatPieces[drawerCount] = flat;
  3975  00F736  90D8               	bcf	status,0,c
  3976  00F738  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3977  00F73A  6ED9               	movwf	fsr2l,c
  3978  00F73C  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3979  00F73E  6EDA               	movwf	fsr2h,c
  3980  00F740  0E10               	movlw	low standbyMode@flatPieces
  3981  00F742  26D9               	addwf	fsr2l,f,c
  3982  00F744  0E01               	movlw	high standbyMode@flatPieces
  3983  00F746  22DA               	addwfc	fsr2h,f,c
  3984  00F748  C16E  FFDE         	movff	standbyMode@flat,postinc2
  3985  00F74C  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  3986                           
  3987                           ;standbyMode.c: 1843: longPieces[drawerCount] = lng;
  3988  00F750  90D8               	bcf	status,0,c
  3989  00F752  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  3990  00F754  6ED9               	movwf	fsr2l,c
  3991  00F756  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  3992  00F758  6EDA               	movwf	fsr2h,c
  3993  00F75A  0E20               	movlw	low standbyMode@longPieces
  3994  00F75C  26D9               	addwf	fsr2l,f,c
  3995  00F75E  0E01               	movlw	high standbyMode@longPieces
  3996  00F760  22DA               	addwfc	fsr2h,f,c
  3997  00F762  C170  FFDE         	movff	standbyMode@lng,postinc2
  3998  00F766  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  3999                           
  4000                           ; BSR set to: 1
  4001                           ;standbyMode.c: 1844: drawerCount += 1;
  4002  00F76A  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4003  00F76C  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;standbyMode.c: 1845: }
  4007                           ;standbyMode.c: 1846: }
  4008  00F76E  D004               	goto	l958
  4009  00F770                     l942:
  4010                           
  4011                           ; BSR set to: 1
  4012                           ;standbyMode.c: 1847: else if (keypress1 == 14){
  4013                           
  4014                           ; BSR set to: 1
  4015  00F770  0E0E               	movlw	14
  4016  00F772  1976               	xorwf	standbyMode@keypress1& (0+255),w,b
  4017  00F774  B4D8               	btfsc	status,2,c
  4018  00F776  D182               	goto	l959
  4019  00F778                     l958:
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;standbyMode.c: 1849: }
  4023                           ;standbyMode.c: 1850: keypress1 = 0;
  4024                           
  4025                           ; BSR set to: 1
  4026                           
  4027                           ; BSR set to: 1
  4028  00F778  0E00               	movlw	0
  4029  00F77A  6F76               	movwf	standbyMode@keypress1& (0+255),b
  4030                           
  4031                           ; BSR set to: 1
  4032  00F77C  D627               	goto	u10670
  4033  00F77E                     l931:
  4034                           
  4035                           ; BSR set to: 1
  4036                           
  4037                           ; BSR set to: 1
  4038                           
  4039                           ;standbyMode.c: 1854: else{
  4040                           ;standbyMode.c: 1855: DIET_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4041                           
  4042                           ; BSR set to: 1
  4043  00F77E  0E01               	movlw	1
  4044  00F780  ECBB  F057         	call	_lcdInst
  4045  00F784  0EC3               	movlw	195
  4046  00F786  6E60               	movwf	??_standbyMode& (0+255),c
  4047  00F788  0ECD               	movlw	205
  4048  00F78A                     u11617:
  4049  00F78A  2EE8               	decfsz	wreg,f,c
  4050  00F78C  D7FE               	bra	u11617
  4051  00F78E  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4052  00F790  D7FC               	bra	u11617
  4053  00F792  F000               	nop	
  4054                           
  4055                           ;standbyMode.c: 1856: drawer = which_drawer();
  4056  00F794  EC7D  F062         	call	_which_drawer	;wreg free
  4057  00F798  C029  F182         	movff	?_which_drawer,standbyMode@drawer
  4058  00F79C  C02A  F183         	movff	?_which_drawer+1,standbyMode@drawer+1
  4059                           
  4060                           ;standbyMode.c: 1858: if (drawer == 100){
  4061  00F7A0  0E64               	movlw	100
  4062  00F7A2  0101               	movlb	1	; () banked
  4063  00F7A4  1982               	xorwf	standbyMode@drawer& (0+255),w,b
  4064  00F7A6  1183               	iorwf	(standbyMode@drawer+1)& (0+255),w,b
  4065  00F7A8  A4D8               	btfss	status,2,c
  4066  00F7AA  D009               	goto	l962
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;standbyMode.c: 1859: drawer = 0;
  4070  00F7AC  0E00               	movlw	0
  4071  00F7AE  6F83               	movwf	(standbyMode@drawer+1)& (0+255),b
  4072  00F7B0  0E00               	movlw	0
  4073  00F7B2  6F82               	movwf	standbyMode@drawer& (0+255),b
  4074                           
  4075                           ;standbyMode.c: 1860: firstIteration = 1;
  4076  00F7B4  0E00               	movlw	0
  4077  00F7B6  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4078  00F7B8  0E01               	movlw	1
  4079  00F7BA  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4080                           
  4081                           ;standbyMode.c: 1861: goto DRAWER_BACK;
  4082  00F7BC  D637               	goto	l933
  4083  00F7BE                     l962:
  4084                           
  4085                           ; BSR set to: 1
  4086                           ;standbyMode.c: 1862: }
  4087                           ;standbyMode.c: 1864: firstIteration = 1;
  4088                           
  4089                           ; BSR set to: 1
  4090  00F7BE  0E00               	movlw	0
  4091  00F7C0  6F68               	movwf	(standbyMode@firstIteration+1)& (0+255),b
  4092  00F7C2  0E01               	movlw	1
  4093  00F7C4  6F67               	movwf	standbyMode@firstIteration& (0+255),b
  4094                           
  4095                           ;standbyMode.c: 1865: for (i=0; i<8; i++){
  4096  00F7C6  0E00               	movlw	0
  4097  00F7C8  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4098  00F7CA  0E00               	movlw	0
  4099  00F7CC  6F88               	movwf	standbyMode@i& (0+255),b
  4100  00F7CE                     l8500:
  4101                           
  4102                           ; BSR set to: 1
  4103  00F7CE  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4104  00F7D0  E12C               	bnz	l8516
  4105  00F7D2  0E08               	movlw	8
  4106  00F7D4  5D88               	subwf	standbyMode@i& (0+255),w,b
  4107  00F7D6  B0D8               	btfsc	status,0,c
  4108  00F7D8  D028               	goto	u10860
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;standbyMode.c: 1866: if (drawerInformation[i] == drawer){
  4112                           
  4113                           ; BSR set to: 1
  4114                           
  4115                           ; BSR set to: 1
  4116  00F7DA  90D8               	bcf	status,0,c
  4117  00F7DC  3588               	rlcf	standbyMode@i& (0+255),w,b
  4118  00F7DE  6ED9               	movwf	fsr2l,c
  4119  00F7E0  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4120  00F7E2  6EDA               	movwf	fsr2h,c
  4121  00F7E4  0E50               	movlw	low standbyMode@drawerInformation
  4122  00F7E6  26D9               	addwf	fsr2l,f,c
  4123  00F7E8  0E01               	movlw	high standbyMode@drawerInformation
  4124  00F7EA  22DA               	addwfc	fsr2h,f,c
  4125  00F7EC  5182               	movf	standbyMode@drawer& (0+255),w,b
  4126  00F7EE  18DE               	xorwf	postinc2,w,c
  4127  00F7F0  E119               	bnz	l8512
  4128  00F7F2  5183               	movf	(standbyMode@drawer+1)& (0+255),w,b
  4129  00F7F4  18DE               	xorwf	postinc2,w,c
  4130  00F7F6  A4D8               	btfss	status,2,c
  4131  00F7F8  D015               	goto	l966
  4132                           
  4133                           ; BSR set to: 1
  4134                           ;standbyMode.c: 1867: validDrawer = 1;
  4135  00F7FA  0E00               	movlw	0
  4136  00F7FC  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4137  00F7FE  0E01               	movlw	1
  4138  00F800  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4139                           
  4140                           ; BSR set to: 1
  4141                           ;standbyMode.c: 1868: if (drawerInformation[i] == 0){
  4142  00F802  90D8               	bcf	status,0,c
  4143  00F804  3588               	rlcf	standbyMode@i& (0+255),w,b
  4144  00F806  6ED9               	movwf	fsr2l,c
  4145  00F808  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4146  00F80A  6EDA               	movwf	fsr2h,c
  4147  00F80C  0E50               	movlw	low standbyMode@drawerInformation
  4148  00F80E  26D9               	addwf	fsr2l,f,c
  4149  00F810  0E01               	movlw	high standbyMode@drawerInformation
  4150  00F812  22DA               	addwfc	fsr2h,f,c
  4151  00F814  50DE               	movf	postinc2,w,c
  4152  00F816  10DE               	iorwf	postinc2,w,c
  4153  00F818  A4D8               	btfss	status,2,c
  4154  00F81A  D004               	goto	l966
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;standbyMode.c: 1869: zero = 1;
  4158  00F81C  0E00               	movlw	0
  4159  00F81E  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4160  00F820  0E01               	movlw	1
  4161  00F822  6F79               	movwf	standbyMode@zero& (0+255),b
  4162  00F824                     l966:
  4163  00F824                     l8512:
  4164                           
  4165                           ; BSR set to: 1
  4166  00F824  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4167  00F826  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4168  00F828  D7D2               	goto	l8500
  4169  00F82A                     u10860:
  4170  00F82A                     l8516:
  4171                           
  4172                           ; BSR set to: 1
  4173                           ;standbyMode.c: 1870: }
  4174                           ;standbyMode.c: 1871: }
  4175                           ;standbyMode.c: 1872: }
  4176                           ;standbyMode.c: 1873: if (validDrawer == 1){
  4177  00F82A  0577               	decf	standbyMode@validDrawer& (0+255),w,b
  4178  00F82C  1178               	iorwf	(standbyMode@validDrawer+1)& (0+255),w,b
  4179  00F82E  A4D8               	btfss	status,2,c
  4180  00F830  D062               	goto	l967
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;standbyMode.c: 1874: if (zero == 1){
  4184  00F832  0579               	decf	standbyMode@zero& (0+255),w,b
  4185  00F834  117A               	iorwf	(standbyMode@zero+1)& (0+255),w,b
  4186  00F836  A4D8               	btfss	status,2,c
  4187  00F838  D02F               	goto	l968
  4188                           
  4189                           ; BSR set to: 1
  4190                           ;standbyMode.c: 1875: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4191  00F83A  0E01               	movlw	1
  4192  00F83C  ECBB  F057         	call	_lcdInst
  4193  00F840  0EC3               	movlw	195
  4194  00F842  6E60               	movwf	??_standbyMode& (0+255),c
  4195  00F844  0ECD               	movlw	205
  4196  00F846                     u11627:
  4197  00F846  2EE8               	decfsz	wreg,f,c
  4198  00F848  D7FE               	bra	u11627
  4199  00F84A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4200  00F84C  D7FC               	bra	u11627
  4201  00F84E  F000               	nop	
  4202                           
  4203                           ;standbyMode.c: 1876: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4204  00F850  0E0C               	movlw	12
  4205  00F852  ECBB  F057         	call	_lcdInst
  4206                           
  4207                           ;standbyMode.c: 1877: printf("No drawer");
  4208  00F856  0E5D               	movlw	low STR_92
  4209  00F858  6E0D               	movwf	printf@f,c
  4210  00F85A  0EFF               	movlw	high STR_92
  4211  00F85C  6E0E               	movwf	printf@f+1,c
  4212  00F85E  EC55  F067         	call	_printf	;wreg free
  4213                           
  4214                           ;standbyMode.c: 1878: lcdInst(0xC0);;
  4215  00F862  0EC0               	movlw	192
  4216  00F864  ECBB  F057         	call	_lcdInst
  4217                           
  4218                           ;standbyMode.c: 1879: printf("number pressed.");
  4219  00F868  0E9D               	movlw	low STR_93
  4220  00F86A  6E0D               	movwf	printf@f,c
  4221  00F86C  0EFD               	movlw	high STR_93
  4222  00F86E  6E0E               	movwf	printf@f+1,c
  4223  00F870  EC55  F067         	call	_printf	;wreg free
  4224                           
  4225                           ;standbyMode.c: 1880: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4226  00F874  0E66               	movlw	102
  4227  00F876  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4228  00F878  0E76               	movlw	118
  4229  00F87A  6E60               	movwf	??_standbyMode& (0+255),c
  4230  00F87C  0EC1               	movlw	193
  4231  00F87E                     u11637:
  4232  00F87E  2EE8               	decfsz	wreg,f,c
  4233  00F880  D7FE               	bra	u11637
  4234  00F882  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4235  00F884  D7FC               	bra	u11637
  4236  00F886  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4237  00F888  D7FA               	bra	u11637
  4238  00F88A  F000               	nop	
  4239                           
  4240                           ;standbyMode.c: 1881: zero = 0;
  4241  00F88C  0E00               	movlw	0
  4242  00F88E  0101               	movlb	1	; () banked
  4243  00F890  6F7A               	movwf	(standbyMode@zero+1)& (0+255),b
  4244  00F892  0E00               	movlw	0
  4245  00F894  6F79               	movwf	standbyMode@zero& (0+255),b
  4246                           
  4247                           ;standbyMode.c: 1882: }
  4248  00F896  D029               	goto	l969
  4249  00F898                     l968:
  4250                           
  4251                           ; BSR set to: 1
  4252                           ;standbyMode.c: 1883: else{
  4253                           ;standbyMode.c: 1884: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4254                           
  4255                           ; BSR set to: 1
  4256  00F898  0E01               	movlw	1
  4257  00F89A  ECBB  F057         	call	_lcdInst
  4258  00F89E  0EC3               	movlw	195
  4259  00F8A0  6E60               	movwf	??_standbyMode& (0+255),c
  4260  00F8A2  0ECD               	movlw	205
  4261  00F8A4                     u11647:
  4262  00F8A4  2EE8               	decfsz	wreg,f,c
  4263  00F8A6  D7FE               	bra	u11647
  4264  00F8A8  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4265  00F8AA  D7FC               	bra	u11647
  4266  00F8AC  F000               	nop	
  4267                           
  4268                           ;standbyMode.c: 1885: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4269  00F8AE  0E0C               	movlw	12
  4270  00F8B0  ECBB  F057         	call	_lcdInst
  4271                           
  4272                           ;standbyMode.c: 1886: printf("Drawer already");
  4273  00F8B4  0E96               	movlw	low STR_94
  4274  00F8B6  6E0D               	movwf	printf@f,c
  4275  00F8B8  0EFE               	movlw	high STR_94
  4276  00F8BA  6E0E               	movwf	printf@f+1,c
  4277  00F8BC  EC55  F067         	call	_printf	;wreg free
  4278                           
  4279                           ;standbyMode.c: 1887: lcdInst(0xC0);;
  4280  00F8C0  0EC0               	movlw	192
  4281  00F8C2  ECBB  F057         	call	_lcdInst
  4282                           
  4283                           ;standbyMode.c: 1888: printf("in use!");
  4284  00F8C6  0E84               	movlw	low STR_95
  4285  00F8C8  6E0D               	movwf	printf@f,c
  4286  00F8CA  0EFF               	movlw	high STR_95
  4287  00F8CC  6E0E               	movwf	printf@f+1,c
  4288  00F8CE  EC55  F067         	call	_printf	;wreg free
  4289                           
  4290                           ;standbyMode.c: 1889: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4291  00F8D2  0E66               	movlw	102
  4292  00F8D4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4293  00F8D6  0E76               	movlw	118
  4294  00F8D8  6E60               	movwf	??_standbyMode& (0+255),c
  4295  00F8DA  0EC1               	movlw	193
  4296  00F8DC                     u11657:
  4297  00F8DC  2EE8               	decfsz	wreg,f,c
  4298  00F8DE  D7FE               	bra	u11657
  4299  00F8E0  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4300  00F8E2  D7FC               	bra	u11657
  4301  00F8E4  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4302  00F8E6  D7FA               	bra	u11657
  4303  00F8E8  F000               	nop	
  4304  00F8EA                     l969:
  4305                           
  4306                           ;standbyMode.c: 1890: }
  4307                           ;standbyMode.c: 1891: validDrawer = 0;
  4308  00F8EA  0E00               	movlw	0
  4309  00F8EC  0101               	movlb	1	; () banked
  4310  00F8EE  6F78               	movwf	(standbyMode@validDrawer+1)& (0+255),b
  4311  00F8F0  0E00               	movlw	0
  4312  00F8F2  6F77               	movwf	standbyMode@validDrawer& (0+255),b
  4313                           
  4314                           ; BSR set to: 1
  4315                           ;standbyMode.c: 1893: }
  4316                           
  4317                           ;standbyMode.c: 1892: continue;
  4318  00F8F4  D567               	goto	u10660
  4319  00F8F6                     l967:
  4320                           
  4321                           ; BSR set to: 1
  4322                           
  4323                           ; BSR set to: 1
  4324                           
  4325                           ;standbyMode.c: 1894: else{
  4326                           ;standbyMode.c: 1895: FOOD_BACK2: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/40
      +                          00.0)));;
  4327                           
  4328                           ; BSR set to: 1
  4329  00F8F6  0E01               	movlw	1
  4330  00F8F8  ECBB  F057         	call	_lcdInst
  4331  00F8FC  0EC3               	movlw	195
  4332  00F8FE  6E60               	movwf	??_standbyMode& (0+255),c
  4333  00F900  0ECD               	movlw	205
  4334  00F902                     u11667:
  4335  00F902  2EE8               	decfsz	wreg,f,c
  4336  00F904  D7FE               	bra	u11667
  4337  00F906  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4338  00F908  D7FC               	bra	u11667
  4339  00F90A  F000               	nop	
  4340                           
  4341                           ;standbyMode.c: 1896: diet = diet_press(drawer);
  4342  00F90C  C182  F029         	movff	standbyMode@drawer,diet_press@drawer
  4343  00F910  C183  F02A         	movff	standbyMode@drawer+1,diet_press@drawer+1
  4344  00F914  EC4E  F069         	call	_diet_press	;wreg free
  4345  00F918  C029  F180         	movff	?_diet_press,standbyMode@diet
  4346  00F91C  C02A  F181         	movff	?_diet_press+1,standbyMode@diet+1
  4347                           
  4348                           ;standbyMode.c: 1897: if (diet == 100){
  4349  00F920  0E64               	movlw	100
  4350  00F922  0101               	movlb	1	; () banked
  4351  00F924  1980               	xorwf	standbyMode@diet& (0+255),w,b
  4352  00F926  1181               	iorwf	(standbyMode@diet+1)& (0+255),w,b
  4353  00F928  A4D8               	btfss	status,2,c
  4354  00F92A  D005               	goto	l973
  4355                           
  4356                           ; BSR set to: 1
  4357                           ;standbyMode.c: 1898: diet = 0;
  4358  00F92C  0E00               	movlw	0
  4359  00F92E  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4360  00F930  0E00               	movlw	0
  4361  00F932  6F80               	movwf	standbyMode@diet& (0+255),b
  4362                           
  4363                           ;standbyMode.c: 1899: goto DIET_BACK2;
  4364  00F934  D724               	goto	l931
  4365  00F936                     l973:
  4366                           
  4367                           ; BSR set to: 1
  4368                           ;standbyMode.c: 1900: }
  4369                           ;standbyMode.c: 1902: food = food_press(diet, drawer);
  4370                           
  4371                           ; BSR set to: 1
  4372  00F936  C180  F029         	movff	standbyMode@diet,food_press@dietSum
  4373  00F93A  C181  F02A         	movff	standbyMode@diet+1,food_press@dietSum+1
  4374  00F93E  C182  F02B         	movff	standbyMode@drawer,food_press@drawer
  4375  00F942  C183  F02C         	movff	standbyMode@drawer+1,food_press@drawer+1
  4376  00F946  EC80  F061         	call	_food_press	;wreg free
  4377  00F94A  C029  F184         	movff	?_food_press,standbyMode@food
  4378  00F94E  C02A  F185         	movff	?_food_press+1,standbyMode@food+1
  4379                           
  4380                           ;standbyMode.c: 1903: if (food == 100){
  4381  00F952  0E64               	movlw	100
  4382  00F954  0101               	movlb	1	; () banked
  4383  00F956  1984               	xorwf	standbyMode@food& (0+255),w,b
  4384  00F958  1185               	iorwf	(standbyMode@food+1)& (0+255),w,b
  4385  00F95A  A4D8               	btfss	status,2,c
  4386  00F95C  D009               	goto	l974
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;standbyMode.c: 1904: diet = 0;
  4390  00F95E  0E00               	movlw	0
  4391  00F960  6F81               	movwf	(standbyMode@diet+1)& (0+255),b
  4392  00F962  0E00               	movlw	0
  4393  00F964  6F80               	movwf	standbyMode@diet& (0+255),b
  4394                           
  4395                           ;standbyMode.c: 1905: food = 0;
  4396  00F966  0E00               	movlw	0
  4397  00F968  6F85               	movwf	(standbyMode@food+1)& (0+255),b
  4398  00F96A  0E00               	movlw	0
  4399  00F96C  6F84               	movwf	standbyMode@food& (0+255),b
  4400                           
  4401                           ;standbyMode.c: 1906: goto FOOD_BACK2;
  4402  00F96E  D7C3               	goto	l967
  4403  00F970                     l974:
  4404                           
  4405                           ; BSR set to: 1
  4406                           ;standbyMode.c: 1907: }
  4407                           ;standbyMode.c: 1909: drawerInformation[drawerCount] = drawer;
  4408                           
  4409                           ; BSR set to: 1
  4410  00F970  90D8               	bcf	status,0,c
  4411  00F972  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4412  00F974  6ED9               	movwf	fsr2l,c
  4413  00F976  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4414  00F978  6EDA               	movwf	fsr2h,c
  4415  00F97A  0E50               	movlw	low standbyMode@drawerInformation
  4416  00F97C  26D9               	addwf	fsr2l,f,c
  4417  00F97E  0E01               	movlw	high standbyMode@drawerInformation
  4418  00F980  22DA               	addwfc	fsr2h,f,c
  4419  00F982  C182  FFDE         	movff	standbyMode@drawer,postinc2
  4420  00F986  C183  FFDD         	movff	standbyMode@drawer+1,postdec2
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;standbyMode.c: 1910: decodedDiet = decode_diet(diet);
  4424  00F98A  C180  F001         	movff	standbyMode@diet,decode_diet@dietType
  4425  00F98E  C181  F002         	movff	standbyMode@diet+1,decode_diet@dietType+1
  4426  00F992  EC68  F05E         	call	_decode_diet	;wreg free
  4427  00F996  C001  F172         	movff	?_decode_diet,standbyMode@decodedDiet
  4428  00F99A  C002  F173         	movff	?_decode_diet+1,standbyMode@decodedDiet+1
  4429                           
  4430                           ;standbyMode.c: 1911: dietType[drawerCount] = decodedDiet;
  4431  00F99E  90D8               	bcf	status,0,c
  4432  00F9A0  0101               	movlb	1	; () banked
  4433  00F9A2  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4434  00F9A4  6ED9               	movwf	fsr2l,c
  4435  00F9A6  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4436  00F9A8  6EDA               	movwf	fsr2h,c
  4437  00F9AA  0E30               	movlw	low standbyMode@dietType
  4438  00F9AC  26D9               	addwf	fsr2l,f,c
  4439  00F9AE  0E01               	movlw	high standbyMode@dietType
  4440  00F9B0  22DA               	addwfc	fsr2h,f,c
  4441  00F9B2  C172  FFDE         	movff	standbyMode@decodedDiet,postinc2
  4442  00F9B6  C173  FFDD         	movff	standbyMode@decodedDiet+1,postdec2
  4443                           
  4444                           ;standbyMode.c: 1912: storedFoodType = printFoodInput(food);
  4445  00F9BA  C184  F001         	movff	standbyMode@food,printFoodInput@food
  4446  00F9BE  C185  F002         	movff	standbyMode@food+1,printFoodInput@food+1
  4447  00F9C2  EC88  F063         	call	_printFoodInput	;wreg free
  4448  00F9C6  C001  F174         	movff	?_printFoodInput,standbyMode@storedFoodType
  4449  00F9CA  C002  F175         	movff	?_printFoodInput+1,standbyMode@storedFoodType+1
  4450                           
  4451                           ;standbyMode.c: 1913: foodType[drawerCount] = storedFoodType;
  4452  00F9CE  90D8               	bcf	status,0,c
  4453  00F9D0  0101               	movlb	1	; () banked
  4454  00F9D2  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4455  00F9D4  6ED9               	movwf	fsr2l,c
  4456  00F9D6  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4457  00F9D8  6EDA               	movwf	fsr2h,c
  4458  00F9DA  0E40               	movlw	low standbyMode@foodType
  4459  00F9DC  26D9               	addwf	fsr2l,f,c
  4460  00F9DE  0E01               	movlw	high standbyMode@foodType
  4461  00F9E0  22DA               	addwfc	fsr2h,f,c
  4462  00F9E2  C174  FFDE         	movff	standbyMode@storedFoodType,postinc2
  4463  00F9E6  C175  FFDD         	movff	standbyMode@storedFoodType+1,postdec2
  4464                           
  4465                           ; BSR set to: 1
  4466                           ;standbyMode.c: 1916: round = getRound(food);
  4467  00F9EA  C184  F001         	movff	standbyMode@food,getRound@code
  4468  00F9EE  C185  F002         	movff	standbyMode@food+1,getRound@code+1
  4469  00F9F2  ECDA  F05C         	call	_getRound	;wreg free
  4470  00F9F6  C001  F16C         	movff	?_getRound,standbyMode@round
  4471  00F9FA  C002  F16D         	movff	?_getRound+1,standbyMode@round+1
  4472                           
  4473                           ;standbyMode.c: 1917: flat = getFlat(food);
  4474  00F9FE  C184  F001         	movff	standbyMode@food,getFlat@code
  4475  00FA02  C185  F002         	movff	standbyMode@food+1,getFlat@code+1
  4476  00FA06  EC62  F05C         	call	_getFlat	;wreg free
  4477  00FA0A  C001  F16E         	movff	?_getFlat,standbyMode@flat
  4478  00FA0E  C002  F16F         	movff	?_getFlat+1,standbyMode@flat+1
  4479                           
  4480                           ;standbyMode.c: 1918: lng = getLong(food);
  4481  00FA12  C184  F001         	movff	standbyMode@food,getLong@code
  4482  00FA16  C185  F002         	movff	standbyMode@food+1,getLong@code+1
  4483  00FA1A  ECDD  F05D         	call	_getLong	;wreg free
  4484  00FA1E  C001  F170         	movff	?_getLong,standbyMode@lng
  4485  00FA22  C002  F171         	movff	?_getLong+1,standbyMode@lng+1
  4486                           
  4487                           ;standbyMode.c: 1919: roundPieces[drawerCount] = round;
  4488  00FA26  90D8               	bcf	status,0,c
  4489  00FA28  0101               	movlb	1	; () banked
  4490  00FA2A  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4491  00FA2C  6ED9               	movwf	fsr2l,c
  4492  00FA2E  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4493  00FA30  6EDA               	movwf	fsr2h,c
  4494  00FA32  0E00               	movlw	low standbyMode@roundPieces
  4495  00FA34  26D9               	addwf	fsr2l,f,c
  4496  00FA36  0E01               	movlw	high standbyMode@roundPieces
  4497  00FA38  22DA               	addwfc	fsr2h,f,c
  4498  00FA3A  C16C  FFDE         	movff	standbyMode@round,postinc2
  4499  00FA3E  C16D  FFDD         	movff	standbyMode@round+1,postdec2
  4500                           
  4501                           ;standbyMode.c: 1920: flatPieces[drawerCount] = flat;
  4502  00FA42  90D8               	bcf	status,0,c
  4503  00FA44  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4504  00FA46  6ED9               	movwf	fsr2l,c
  4505  00FA48  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4506  00FA4A  6EDA               	movwf	fsr2h,c
  4507  00FA4C  0E10               	movlw	low standbyMode@flatPieces
  4508  00FA4E  26D9               	addwf	fsr2l,f,c
  4509  00FA50  0E01               	movlw	high standbyMode@flatPieces
  4510  00FA52  22DA               	addwfc	fsr2h,f,c
  4511  00FA54  C16E  FFDE         	movff	standbyMode@flat,postinc2
  4512  00FA58  C16F  FFDD         	movff	standbyMode@flat+1,postdec2
  4513                           
  4514                           ;standbyMode.c: 1921: longPieces[drawerCount] = lng;
  4515  00FA5C  90D8               	bcf	status,0,c
  4516  00FA5E  3586               	rlcf	standbyMode@drawerCount& (0+255),w,b
  4517  00FA60  6ED9               	movwf	fsr2l,c
  4518  00FA62  3587               	rlcf	(standbyMode@drawerCount+1)& (0+255),w,b
  4519  00FA64  6EDA               	movwf	fsr2h,c
  4520  00FA66  0E20               	movlw	low standbyMode@longPieces
  4521  00FA68  26D9               	addwf	fsr2l,f,c
  4522  00FA6A  0E01               	movlw	high standbyMode@longPieces
  4523  00FA6C  22DA               	addwfc	fsr2h,f,c
  4524  00FA6E  C170  FFDE         	movff	standbyMode@lng,postinc2
  4525  00FA72  C171  FFDD         	movff	standbyMode@lng+1,postdec2
  4526                           
  4527                           ; BSR set to: 1
  4528                           ;standbyMode.c: 1922: drawerCount += 1;
  4529  00FA76  4B86               	infsnz	standbyMode@drawerCount& (0+255),f,b
  4530  00FA78  2B87               	incf	(standbyMode@drawerCount+1)& (0+255),f,b
  4531                           
  4532                           ; BSR set to: 1
  4533                           
  4534                           ; BSR set to: 1
  4535                           
  4536                           ; BSR set to: 1
  4537  00FA7A  D4A4               	goto	u10660
  4538  00FA7C                     l959:
  4539                           
  4540                           ;standbyMode.c: 1923: }
  4541                           ;standbyMode.c: 1924: }
  4542                           ;standbyMode.c: 1925: }
  4543                           ;standbyMode.c: 1927: if (drawerCount == 0){
  4544                           
  4545                           ; BSR set to: 1
  4546  00FA7C  0101               	movlb	1	; () banked
  4547  00FA7E  5186               	movf	standbyMode@drawerCount& (0+255),w,b
  4548  00FA80  1187               	iorwf	(standbyMode@drawerCount+1)& (0+255),w,b
  4549  00FA82  A4D8               	btfss	status,2,c
  4550  00FA84  D005               	goto	l975
  4551                           
  4552                           ; BSR set to: 1
  4553                           ;standbyMode.c: 1928: return 0;
  4554  00FA86  0E00               	movlw	0
  4555  00FA88  6E5F               	movwf	?_standbyMode+1,c
  4556  00FA8A  0E00               	movlw	0
  4557  00FA8C  6E5E               	movwf	?_standbyMode,c
  4558                           
  4559                           ; BSR set to: 1
  4560                           ;standbyMode.c: 1929: }
  4561                           
  4562                           ; BSR set to: 1
  4563  00FA8E  0012               	return	
  4564  00FA90                     l975:
  4565                           
  4566                           ; BSR set to: 1
  4567                           ;standbyMode.c: 1930: else{
  4568                           ;standbyMode.c: 1931: logNumber = readEEPROM(250);
  4569                           
  4570                           ; BSR set to: 1
  4571  00FA90  0EFA               	movlw	250
  4572  00FA92  ECC5  F057         	call	_readEEPROM
  4573  00FA96  0101               	movlb	1	; () banked
  4574  00FA98  6F7F               	movwf	standbyMode@logNumber& (0+255),b
  4575                           
  4576                           ; BSR set to: 1
  4577                           ;standbyMode.c: 1932: if (logNumber == 4){
  4578  00FA9A  0E04               	movlw	4
  4579  00FA9C  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4580  00FA9E  B4D8               	btfsc	status,2,c
  4581                           
  4582                           ; BSR set to: 1
  4583                           ;standbyMode.c: 1933: shiftEEPROM();
  4584  00FAA0  ECD5  F05A         	call	_shiftEEPROM	;wreg free
  4585                           
  4586                           ;standbyMode.c: 1934: }
  4587                           ;standbyMode.c: 1935: for (i=0; i<8; i++){
  4588  00FAA4  0E00               	movlw	0
  4589  00FAA6  0101               	movlb	1	; () banked
  4590  00FAA8  6F89               	movwf	(standbyMode@i+1)& (0+255),b
  4591  00FAAA  0E00               	movlw	0
  4592  00FAAC  6F88               	movwf	standbyMode@i& (0+255),b
  4593                           
  4594                           ; BSR set to: 1
  4595  00FAAE  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4596  00FAB0  E172               	bnz	l980
  4597  00FAB2  0E08               	movlw	8
  4598  00FAB4  5D88               	subwf	standbyMode@i& (0+255),w,b
  4599  00FAB6  B0D8               	btfsc	status,0,c
  4600  00FAB8  D06E               	goto	u10960
  4601                           
  4602                           ; BSR set to: 1
  4603                           ;standbyMode.c: 1936: if (logNumber == 0 || logNumber == 4){
  4604                           
  4605                           ; BSR set to: 1
  4606                           
  4607                           ; BSR set to: 1
  4608  00FABA  517F               	movf	standbyMode@logNumber& (0+255),w,b
  4609  00FABC  B4D8               	btfsc	status,2,c
  4610  00FABE  D004               	goto	u10950
  4611                           
  4612                           ; BSR set to: 1
  4613  00FAC0  0E04               	movlw	4
  4614  00FAC2  197F               	xorwf	standbyMode@logNumber& (0+255),w,b
  4615  00FAC4  A4D8               	btfss	status,2,c
  4616  00FAC6  D00F               	goto	l981
  4617  00FAC8                     u10950:
  4618                           
  4619                           ; BSR set to: 1
  4620                           ;standbyMode.c: 1937: n = 3*i;
  4621                           
  4622                           ; BSR set to: 1
  4623  00FAC8  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4624  00FACC  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4625  00FAD0  0E00               	movlw	0
  4626  00FAD2  6E04               	movwf	___wmul@multiplicand+1,c
  4627  00FAD4  0E03               	movlw	3
  4628  00FAD6  6E03               	movwf	___wmul@multiplicand,c
  4629  00FAD8  EC0D  F058         	call	___wmul	;wreg free
  4630  00FADC  C001  F17B         	movff	?___wmul,standbyMode@n
  4631  00FAE0  C002  F17C         	movff	?___wmul+1,standbyMode@n+1
  4632                           
  4633                           ;standbyMode.c: 1938: }
  4634  00FAE4  D022               	goto	l984
  4635  00FAE6                     l981:
  4636                           
  4637                           ;standbyMode.c: 1939: else{
  4638                           ;standbyMode.c: 1940: n = (logNumber-1)*35 + 3*i;
  4639  00FAE6  0EFF               	movlw	255
  4640  00FAE8  0101               	movlb	1	; () banked
  4641  00FAEA  257F               	addwf	standbyMode@logNumber& (0+255),w,b
  4642  00FAEC  6E01               	movwf	___wmul@multiplier,c
  4643  00FAEE  6A02               	clrf	___wmul@multiplier+1,c
  4644  00FAF0  0EFF               	movlw	255
  4645  00FAF2  2202               	addwfc	___wmul@multiplier+1,f,c
  4646  00FAF4  0E00               	movlw	0
  4647  00FAF6  6E04               	movwf	___wmul@multiplicand+1,c
  4648  00FAF8  0E23               	movlw	35
  4649  00FAFA  6E03               	movwf	___wmul@multiplicand,c
  4650  00FAFC  EC0D  F058         	call	___wmul	;wreg free
  4651  00FB00  C001  F060         	movff	?___wmul,??_standbyMode
  4652  00FB04  C002  F061         	movff	?___wmul+1,??_standbyMode+1
  4653  00FB08  C188  F001         	movff	standbyMode@i,___wmul@multiplier
  4654  00FB0C  C189  F002         	movff	standbyMode@i+1,___wmul@multiplier+1
  4655  00FB10  0E00               	movlw	0
  4656  00FB12  6E04               	movwf	___wmul@multiplicand+1,c
  4657  00FB14  0E03               	movlw	3
  4658  00FB16  6E03               	movwf	___wmul@multiplicand,c
  4659  00FB18  EC0D  F058         	call	___wmul	;wreg free
  4660  00FB1C  5001               	movf	?___wmul,w,c
  4661  00FB1E  2460               	addwf	??_standbyMode,w,c
  4662  00FB20  0101               	movlb	1	; () banked
  4663  00FB22  6F7B               	movwf	standbyMode@n& (0+255),b
  4664  00FB24  5002               	movf	?___wmul+1,w,c
  4665  00FB26  2061               	addwfc	??_standbyMode+1,w,c
  4666  00FB28  6F7C               	movwf	(standbyMode@n+1)& (0+255),b
  4667  00FB2A                     l984:
  4668                           
  4669                           ;standbyMode.c: 1941: }
  4670                           ;standbyMode.c: 1942: writeEEPROM(11+n, drawerInformation[i]);
  4671                           
  4672                           ; BSR set to: 1
  4673  00FB2A  90D8               	bcf	status,0,c
  4674  00FB2C  0101               	movlb	1	; () banked
  4675  00FB2E  3588               	rlcf	standbyMode@i& (0+255),w,b
  4676  00FB30  6ED9               	movwf	fsr2l,c
  4677  00FB32  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4678  00FB34  6EDA               	movwf	fsr2h,c
  4679  00FB36  0E50               	movlw	low standbyMode@drawerInformation
  4680  00FB38  26D9               	addwf	fsr2l,f,c
  4681  00FB3A  0E01               	movlw	high standbyMode@drawerInformation
  4682  00FB3C  22DA               	addwfc	fsr2h,f,c
  4683  00FB3E  50DF               	movf	indf2,w,c
  4684  00FB40  6E01               	movwf	writeEEPROM@data,c
  4685  00FB42  517B               	movf	standbyMode@n& (0+255),w,b
  4686  00FB44  0F0B               	addlw	11
  4687  00FB46  EC20  F058         	call	_writeEEPROM
  4688                           
  4689                           ;standbyMode.c: 1943: writeEEPROM(12+n, dietType[i]);
  4690  00FB4A  90D8               	bcf	status,0,c
  4691  00FB4C  0101               	movlb	1	; () banked
  4692  00FB4E  3588               	rlcf	standbyMode@i& (0+255),w,b
  4693  00FB50  6ED9               	movwf	fsr2l,c
  4694  00FB52  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4695  00FB54  6EDA               	movwf	fsr2h,c
  4696  00FB56  0E30               	movlw	low standbyMode@dietType
  4697  00FB58  26D9               	addwf	fsr2l,f,c
  4698  00FB5A  0E01               	movlw	high standbyMode@dietType
  4699  00FB5C  22DA               	addwfc	fsr2h,f,c
  4700  00FB5E  50DF               	movf	indf2,w,c
  4701  00FB60  6E01               	movwf	writeEEPROM@data,c
  4702  00FB62  517B               	movf	standbyMode@n& (0+255),w,b
  4703  00FB64  0F0C               	addlw	12
  4704  00FB66  EC20  F058         	call	_writeEEPROM
  4705                           
  4706                           ;standbyMode.c: 1944: writeEEPROM(13+n, foodType[i]);
  4707  00FB6A  90D8               	bcf	status,0,c
  4708  00FB6C  0101               	movlb	1	; () banked
  4709  00FB6E  3588               	rlcf	standbyMode@i& (0+255),w,b
  4710  00FB70  6ED9               	movwf	fsr2l,c
  4711  00FB72  3589               	rlcf	(standbyMode@i+1)& (0+255),w,b
  4712  00FB74  6EDA               	movwf	fsr2h,c
  4713  00FB76  0E40               	movlw	low standbyMode@foodType
  4714  00FB78  26D9               	addwf	fsr2l,f,c
  4715  00FB7A  0E01               	movlw	high standbyMode@foodType
  4716  00FB7C  22DA               	addwfc	fsr2h,f,c
  4717  00FB7E  50DF               	movf	indf2,w,c
  4718  00FB80  6E01               	movwf	writeEEPROM@data,c
  4719  00FB82  517B               	movf	standbyMode@n& (0+255),w,b
  4720  00FB84  0F0D               	addlw	13
  4721  00FB86  EC20  F058         	call	_writeEEPROM
  4722  00FB8A  0101               	movlb	1	; () banked
  4723  00FB8C  4B88               	infsnz	standbyMode@i& (0+255),f,b
  4724  00FB8E  2B89               	incf	(standbyMode@i+1)& (0+255),f,b
  4725                           
  4726                           ; BSR set to: 1
  4727  00FB90  5189               	movf	(standbyMode@i+1)& (0+255),w,b
  4728  00FB92  E101               	bnz	l8624
  4729  00FB94  D78E               	goto	L1
  4730  00FB96                     u10960:
  4731  00FB96                     l980:
  4732  00FB96                     l8624:
  4733                           
  4734                           ; BSR set to: 1
  4735                           ;standbyMode.c: 1945: }
  4736                           ;standbyMode.c: 1946: return 1;
  4737  00FB96  0E00               	movlw	0
  4738  00FB98  6E5F               	movwf	?_standbyMode+1,c
  4739  00FB9A  0E01               	movlw	1
  4740  00FB9C  6E5E               	movwf	?_standbyMode,c
  4741                           
  4742                           ; BSR set to: 1
  4743                           ;standbyMode.c: 1947: }
  4744                           ;standbyMode.c: 1948: }
  4745                           
  4746                           ; BSR set to: 1
  4747  00FB9E  0012               	return	
  4748  00FBA0                     l929:
  4749                           
  4750                           ; BSR set to: 1
  4751                           ;standbyMode.c: 1949: else if (keypress == 14){
  4752                           
  4753                           ; BSR set to: 1
  4754  00FBA0  0E0E               	movlw	14
  4755  00FBA2  196B               	xorwf	standbyMode@keypress& (0+255),w,b
  4756  00FBA4  A4D8               	btfss	status,2,c
  4757  00FBA6  D05F               	goto	l986
  4758  00FBA8                     u10970:
  4759                           
  4760                           ;standbyMode.c: 1951: unsigned int whichKey = viewLogs();
  4761                           
  4762                           ; BSR set to: 1
  4763                           
  4764                           ;standbyMode.c: 1950: while (1){
  4765  00FBA8  ECDF  F065         	call	_viewLogs	;wreg free
  4766  00FBAC  C052  F169         	movff	?_viewLogs,standbyMode@whichKey
  4767  00FBB0  C053  F16A         	movff	?_viewLogs+1,standbyMode@whichKey+1
  4768                           
  4769                           ;standbyMode.c: 1952: if (whichKey == 15){
  4770  00FBB4  0E0F               	movlw	15
  4771  00FBB6  0101               	movlb	1	; () banked
  4772  00FBB8  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4773  00FBBA  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4774  00FBBC  B4D8               	btfsc	status,2,c
  4775  00FBBE  D7F4               	goto	u10970
  4776                           
  4777                           ; BSR set to: 1
  4778                           ;standbyMode.c: 1955: else if (whichKey == 14){
  4779                           
  4780                           ; BSR set to: 1
  4781                           
  4782                           ; BSR set to: 1
  4783                           ;standbyMode.c: 1954: }
  4784                           
  4785                           ; BSR set to: 1
  4786                           ;standbyMode.c: 1953: continue;
  4787  00FBC0  0E0E               	movlw	14
  4788  00FBC2  1969               	xorwf	standbyMode@whichKey& (0+255),w,b
  4789  00FBC4  116A               	iorwf	(standbyMode@whichKey+1)& (0+255),w,b
  4790  00FBC6  A4D8               	btfss	status,2,c
  4791  00FBC8  D020               	goto	l991
  4792                           
  4793                           ; BSR set to: 1
  4794                           ;standbyMode.c: 1956: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4795  00FBCA  0E01               	movlw	1
  4796  00FBCC  ECBB  F057         	call	_lcdInst
  4797  00FBD0  0EC3               	movlw	195
  4798  00FBD2  6E60               	movwf	??_standbyMode& (0+255),c
  4799  00FBD4  0ECD               	movlw	205
  4800  00FBD6                     u11677:
  4801  00FBD6  2EE8               	decfsz	wreg,f,c
  4802  00FBD8  D7FE               	bra	u11677
  4803  00FBDA  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4804  00FBDC  D7FC               	bra	u11677
  4805  00FBDE  F000               	nop	
  4806                           
  4807                           ;standbyMode.c: 1957: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4808  00FBE0  0E0C               	movlw	12
  4809  00FBE2  ECBB  F057         	call	_lcdInst
  4810                           
  4811                           ;standbyMode.c: 1958: printf("Rebooting.");
  4812  00FBE6  0E27               	movlw	low STR_100
  4813  00FBE8  6E0D               	movwf	printf@f,c
  4814  00FBEA  0EFF               	movlw	high STR_100
  4815  00FBEC  6E0E               	movwf	printf@f+1,c
  4816  00FBEE  EC55  F067         	call	_printf	;wreg free
  4817                           
  4818                           ;standbyMode.c: 1959: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4819  00FBF2  0E66               	movlw	102
  4820  00FBF4  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4821  00FBF6  0E76               	movlw	118
  4822  00FBF8  6E60               	movwf	??_standbyMode& (0+255),c
  4823  00FBFA  0EC1               	movlw	193
  4824  00FBFC                     u11687:
  4825  00FBFC  2EE8               	decfsz	wreg,f,c
  4826  00FBFE  D7FE               	bra	u11687
  4827  00FC00  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4828  00FC02  D7FC               	bra	u11687
  4829  00FC04  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4830  00FC06  D7FA               	bra	u11687
  4831  00FC08  D028               	goto	L2
  4832  00FC0A                     l991:
  4833                           
  4834                           ;standbyMode.c: 1962: else{
  4835                           ;standbyMode.c: 1963: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4836  00FC0A  0E01               	movlw	1
  4837  00FC0C  ECBB  F057         	call	_lcdInst
  4838  00FC10  0EC3               	movlw	195
  4839  00FC12  6E60               	movwf	??_standbyMode& (0+255),c
  4840  00FC14  0ECD               	movlw	205
  4841  00FC16                     u11697:
  4842  00FC16  2EE8               	decfsz	wreg,f,c
  4843  00FC18  D7FE               	bra	u11697
  4844  00FC1A  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4845  00FC1C  D7FC               	bra	u11697
  4846  00FC1E  F000               	nop	
  4847                           
  4848                           ;standbyMode.c: 1964: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4849  00FC20  0E0C               	movlw	12
  4850  00FC22  ECBB  F057         	call	_lcdInst
  4851                           
  4852                           ;standbyMode.c: 1965: printf("Invalid key!");
  4853  00FC26  0EDD               	movlw	low STR_101
  4854  00FC28  6E0D               	movwf	printf@f,c
  4855  00FC2A  0EFE               	movlw	high STR_101
  4856  00FC2C  6E0E               	movwf	printf@f+1,c
  4857  00FC2E  EC55  F067         	call	_printf	;wreg free
  4858                           
  4859                           ;standbyMode.c: 1966: lcdInst(0xC0);;
  4860  00FC32  0EC0               	movlw	192
  4861  00FC34  ECBB  F057         	call	_lcdInst
  4862                           
  4863                           ;standbyMode.c: 1967: printf("Rebooting.");
  4864  00FC38  0E27               	movlw	low STR_100
  4865  00FC3A  6E0D               	movwf	printf@f,c
  4866  00FC3C  0EFF               	movlw	high STR_100
  4867  00FC3E  6E0E               	movwf	printf@f+1,c
  4868  00FC40  EC55  F067         	call	_printf	;wreg free
  4869                           
  4870                           ;standbyMode.c: 1968: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4871  00FC44  0E66               	movlw	102
  4872  00FC46  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4873  00FC48  0E76               	movlw	118
  4874  00FC4A  6E60               	movwf	??_standbyMode& (0+255),c
  4875  00FC4C  0EC1               	movlw	193
  4876  00FC4E                     u11707:
  4877  00FC4E  2EE8               	decfsz	wreg,f,c
  4878  00FC50  D7FE               	bra	u11707
  4879  00FC52  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4880  00FC54  D7FC               	bra	u11707
  4881  00FC56  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4882  00FC58  D7FA               	bra	u11707
  4883  00FC5A                     L2:
  4884  00FC5A  F000               	nop	
  4885                           
  4886                           ;standbyMode.c: 1970: }
  4887                           ;standbyMode.c: 1971: }
  4888                           ;standbyMode.c: 1972: return 0;
  4889                           
  4890                           ;standbyMode.c: 1969: break;
  4891  00FC5C  0E00               	movlw	0
  4892  00FC5E  6E5F               	movwf	?_standbyMode+1,c
  4893  00FC60  0E00               	movlw	0
  4894  00FC62  6E5E               	movwf	?_standbyMode,c
  4895                           
  4896                           ;standbyMode.c: 1973: }
  4897  00FC64  0012               	return	
  4898  00FC66                     l986:
  4899                           
  4900                           ;standbyMode.c: 1975: else {
  4901                           ;standbyMode.c: 1976: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4902  00FC66  0E01               	movlw	1
  4903  00FC68  ECBB  F057         	call	_lcdInst
  4904  00FC6C  0EC3               	movlw	195
  4905  00FC6E  6E60               	movwf	??_standbyMode& (0+255),c
  4906  00FC70  0ECD               	movlw	205
  4907  00FC72                     u11717:
  4908  00FC72  2EE8               	decfsz	wreg,f,c
  4909  00FC74  D7FE               	bra	u11717
  4910  00FC76  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4911  00FC78  D7FC               	bra	u11717
  4912  00FC7A  F000               	nop	
  4913                           
  4914                           ;standbyMode.c: 1977: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  4915  00FC7C  0E0C               	movlw	12
  4916  00FC7E  ECBB  F057         	call	_lcdInst
  4917                           
  4918                           ;standbyMode.c: 1978: printf("Invalid key!");
  4919  00FC82  0EDD               	movlw	low STR_101
  4920  00FC84  6E0D               	movwf	printf@f,c
  4921  00FC86  0EFE               	movlw	high STR_101
  4922  00FC88  6E0E               	movwf	printf@f+1,c
  4923  00FC8A  EC55  F067         	call	_printf	;wreg free
  4924                           
  4925                           ;standbyMode.c: 1979: lcdInst(0xC0);;
  4926  00FC8E  0EC0               	movlw	192
  4927  00FC90  ECBB  F057         	call	_lcdInst
  4928                           
  4929                           ;standbyMode.c: 1980: printf("Rebooting.");
  4930  00FC94  0E27               	movlw	low STR_100
  4931  00FC96  6E0D               	movwf	printf@f,c
  4932  00FC98  0EFF               	movlw	high STR_100
  4933  00FC9A  6E0E               	movwf	printf@f+1,c
  4934  00FC9C  EC55  F067         	call	_printf	;wreg free
  4935                           
  4936                           ;standbyMode.c: 1981: _delay((unsigned long)((2000)*(40000000/4000.0)));
  4937  00FCA0  0E66               	movlw	102
  4938  00FCA2  6E61               	movwf	(??_standbyMode+1)& (0+255),c
  4939  00FCA4  0E76               	movlw	118
  4940  00FCA6  6E60               	movwf	??_standbyMode& (0+255),c
  4941  00FCA8  0EC1               	movlw	193
  4942  00FCAA                     u11727:
  4943  00FCAA  2EE8               	decfsz	wreg,f,c
  4944  00FCAC  D7FE               	bra	u11727
  4945  00FCAE  2E60               	decfsz	??_standbyMode& (0+255),f,c
  4946  00FCB0  D7FC               	bra	u11727
  4947  00FCB2  2E61               	decfsz	(??_standbyMode+1)& (0+255),f,c
  4948  00FCB4  D7FA               	bra	u11727
  4949  00FCB6  F000               	nop	
  4950                           
  4951                           ;standbyMode.c: 1982: return 0;
  4952  00FCB8  0E00               	movlw	0
  4953  00FCBA  6E5F               	movwf	?_standbyMode+1,c
  4954  00FCBC  0E00               	movlw	0
  4955  00FCBE  6E5E               	movwf	?_standbyMode,c
  4956  00FCC0  0012               	return	
  4957  00FCC2                     __end_of_standbyMode:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           plusw1	equ	0xFE3
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           plusw2	equ	0xFDB
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _which_drawer *****************
  4977 ;; Defined at:
  4978 ;;		line 1539 in file "standbyMode.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  rand            2   43[COMRAM] unsigned int 
  4983 ;;  keypress        1   51[COMRAM] unsigned char 
  4984 ;;  count           2   49[COMRAM] unsigned int 
  4985 ;;  backCheck       2   47[COMRAM] unsigned int 
  4986 ;;  sum             2   45[COMRAM] unsigned int 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  2   40[COMRAM] unsigned int 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4996 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;Total ram usage:       12 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    3
  5003 ;; This function calls:
  5004 ;;		_decode_drawer
  5005 ;;		_lcdInst
  5006 ;;		_printf
  5007 ;;		_putch
  5008 ;; This function is called by:
  5009 ;;		_standbyMode
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text2
  5014  00C4FA                     __ptext2:
  5015                           	opt stack 0
  5016  00C4FA                     _which_drawer:
  5017                           	opt stack 26
  5018                           
  5019                           ;standbyMode.c: 1540: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  5020                           
  5021                           ;incstack = 0
  5022  00C4FA  0E0C               	movlw	12
  5023  00C4FC  ECBB  F057         	call	_lcdInst
  5024                           
  5025                           ;standbyMode.c: 1541: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5026  00C500  0E01               	movlw	1
  5027  00C502  ECBB  F057         	call	_lcdInst
  5028  00C506  0EC3               	movlw	195
  5029  00C508  6E2B               	movwf	??_which_drawer& (0+255),c
  5030  00C50A  0ECD               	movlw	205
  5031  00C50C                     u11737:
  5032  00C50C  2EE8               	decfsz	wreg,f,c
  5033  00C50E  D7FE               	bra	u11737
  5034  00C510  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5035  00C512  D7FC               	bra	u11737
  5036  00C514  F000               	nop	
  5037                           
  5038                           ;standbyMode.c: 1542: printf("Drawer number:");
  5039  00C516  0E2D               	movlw	low STR_73
  5040  00C518  6E0D               	movwf	printf@f,c
  5041  00C51A  0EFE               	movlw	high STR_73
  5042  00C51C  6E0E               	movwf	printf@f+1,c
  5043  00C51E  EC55  F067         	call	_printf	;wreg free
  5044                           
  5045                           ;standbyMode.c: 1543: lcdInst(0xC0);;
  5046  00C522  0EC0               	movlw	192
  5047  00C524  ECBB  F057         	call	_lcdInst
  5048                           
  5049                           ;standbyMode.c: 1545: unsigned int count = 0;
  5050  00C528  0E00               	movlw	0
  5051  00C52A  6E33               	movwf	which_drawer@count+1,c
  5052  00C52C  0E00               	movlw	0
  5053  00C52E  6E32               	movwf	which_drawer@count,c
  5054                           
  5055                           ;standbyMode.c: 1546: unsigned int sum = 0;
  5056  00C530  0E00               	movlw	0
  5057  00C532  6E2F               	movwf	which_drawer@sum+1,c
  5058  00C534  0E00               	movlw	0
  5059  00C536  6E2E               	movwf	which_drawer@sum,c
  5060                           
  5061                           ;standbyMode.c: 1547: unsigned int backCheck = 0;
  5062  00C538  0E00               	movlw	0
  5063  00C53A  6E31               	movwf	which_drawer@backCheck+1,c
  5064  00C53C  0E00               	movlw	0
  5065  00C53E  6E30               	movwf	which_drawer@backCheck,c
  5066  00C540                     
  5067                           ;standbyMode.c: 1550: while(PORTBbits.RB1 == 0){ continue; }
  5068  00C540  A281               	btfss	3969,1,c	;volatile
  5069  00C542  D7FE               	goto	l870
  5070                           
  5071                           ;standbyMode.c: 1551: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5072  00C544  3881               	swapf	3969,w,c	;volatile
  5073  00C546  0B0F               	andlw	15
  5074  00C548  0B0F               	andlw	15
  5075  00C54A  6E34               	movwf	which_drawer@keypress,c
  5076  00C54C  B281               	btfsc	3969,1,c	;volatile
  5077  00C54E  D7FE               	goto	l875
  5078                           
  5079                           ;standbyMode.c: 1554: if(keypress == 15){
  5080  00C550  0E0F               	movlw	15
  5081  00C552  1834               	xorwf	which_drawer@keypress,w,c
  5082  00C554  B4D8               	btfsc	status,2,c
  5083  00C556  D0C3               	goto	l878
  5084                           
  5085                           ;standbyMode.c: 1557: else if (keypress == 14){
  5086                           
  5087                           ;standbyMode.c: 1556: }
  5088                           
  5089                           ;standbyMode.c: 1555: break;
  5090  00C558  0E0E               	movlw	14
  5091  00C55A  1834               	xorwf	which_drawer@keypress,w,c
  5092  00C55C  A4D8               	btfss	status,2,c
  5093  00C55E  D005               	goto	l880
  5094                           
  5095                           ;standbyMode.c: 1558: backCheck = 100;
  5096  00C560  0E00               	movlw	0
  5097  00C562  6E31               	movwf	which_drawer@backCheck+1,c
  5098  00C564  0E64               	movlw	100
  5099  00C566  6E30               	movwf	which_drawer@backCheck,c
  5100                           
  5101                           ;standbyMode.c: 1559: break;
  5102  00C568  D0BA               	goto	l878
  5103  00C56A                     l880:
  5104                           
  5105                           ;standbyMode.c: 1561: else if(keypress == 0 || keypress == 1 || keypress == 2 || keypres
      +                          s == 4 || keypress == 5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress =
      +                          = 10 || keypress == 13){
  5106  00C56A  5034               	movf	which_drawer@keypress,w,c
  5107  00C56C  B4D8               	btfsc	status,2,c
  5108  00C56E  D023               	goto	u10210
  5109  00C570  0434               	decf	which_drawer@keypress,w,c
  5110  00C572  B4D8               	btfsc	status,2,c
  5111  00C574  D020               	goto	u10210
  5112  00C576  0E02               	movlw	2
  5113  00C578  1834               	xorwf	which_drawer@keypress,w,c
  5114  00C57A  B4D8               	btfsc	status,2,c
  5115  00C57C  D01C               	goto	u10210
  5116  00C57E  0E04               	movlw	4
  5117  00C580  1834               	xorwf	which_drawer@keypress,w,c
  5118  00C582  B4D8               	btfsc	status,2,c
  5119  00C584  D018               	goto	u10210
  5120  00C586  0E05               	movlw	5
  5121  00C588  1834               	xorwf	which_drawer@keypress,w,c
  5122  00C58A  B4D8               	btfsc	status,2,c
  5123  00C58C  D014               	goto	u10210
  5124  00C58E  0E06               	movlw	6
  5125  00C590  1834               	xorwf	which_drawer@keypress,w,c
  5126  00C592  B4D8               	btfsc	status,2,c
  5127  00C594  D010               	goto	u10210
  5128  00C596  0E08               	movlw	8
  5129  00C598  1834               	xorwf	which_drawer@keypress,w,c
  5130  00C59A  B4D8               	btfsc	status,2,c
  5131  00C59C  D00C               	goto	u10210
  5132  00C59E  0E09               	movlw	9
  5133  00C5A0  1834               	xorwf	which_drawer@keypress,w,c
  5134  00C5A2  B4D8               	btfsc	status,2,c
  5135  00C5A4  D008               	goto	u10210
  5136  00C5A6  0E0A               	movlw	10
  5137  00C5A8  1834               	xorwf	which_drawer@keypress,w,c
  5138  00C5AA  B4D8               	btfsc	status,2,c
  5139  00C5AC  D004               	goto	u10210
  5140  00C5AE  0E0D               	movlw	13
  5141  00C5B0  1834               	xorwf	which_drawer@keypress,w,c
  5142  00C5B2  A4D8               	btfss	status,2,c
  5143  00C5B4  D073               	goto	l882
  5144  00C5B6                     u10210:
  5145                           
  5146                           ;standbyMode.c: 1562: if (count == 0){
  5147  00C5B6  5032               	movf	which_drawer@count,w,c
  5148  00C5B8  1033               	iorwf	which_drawer@count+1,w,c
  5149  00C5BA  A4D8               	btfss	status,2,c
  5150  00C5BC  D04C               	goto	l885
  5151                           
  5152                           ;standbyMode.c: 1563: if (keypress == 1 || keypress == 2 || keypress == 4 || keypress ==
      +                           5 || keypress == 6 || keypress == 8 || keypress == 9 || keypress == 10){
  5153  00C5BE  0434               	decf	which_drawer@keypress,w,c
  5154  00C5C0  B4D8               	btfsc	status,2,c
  5155  00C5C2  D01C               	goto	u10300
  5156  00C5C4  0E02               	movlw	2
  5157  00C5C6  1834               	xorwf	which_drawer@keypress,w,c
  5158  00C5C8  B4D8               	btfsc	status,2,c
  5159  00C5CA  D018               	goto	u10300
  5160  00C5CC  0E04               	movlw	4
  5161  00C5CE  1834               	xorwf	which_drawer@keypress,w,c
  5162  00C5D0  B4D8               	btfsc	status,2,c
  5163  00C5D2  D014               	goto	u10300
  5164  00C5D4  0E05               	movlw	5
  5165  00C5D6  1834               	xorwf	which_drawer@keypress,w,c
  5166  00C5D8  B4D8               	btfsc	status,2,c
  5167  00C5DA  D010               	goto	u10300
  5168  00C5DC  0E06               	movlw	6
  5169  00C5DE  1834               	xorwf	which_drawer@keypress,w,c
  5170  00C5E0  B4D8               	btfsc	status,2,c
  5171  00C5E2  D00C               	goto	u10300
  5172  00C5E4  0E08               	movlw	8
  5173  00C5E6  1834               	xorwf	which_drawer@keypress,w,c
  5174  00C5E8  B4D8               	btfsc	status,2,c
  5175  00C5EA  D008               	goto	u10300
  5176  00C5EC  0E09               	movlw	9
  5177  00C5EE  1834               	xorwf	which_drawer@keypress,w,c
  5178  00C5F0  B4D8               	btfsc	status,2,c
  5179  00C5F2  D004               	goto	u10300
  5180  00C5F4  0E0A               	movlw	10
  5181  00C5F6  1834               	xorwf	which_drawer@keypress,w,c
  5182  00C5F8  A4D8               	btfss	status,2,c
  5183  00C5FA  D014               	goto	l886
  5184  00C5FC                     u10300:
  5185                           
  5186                           ;standbyMode.c: 1564: count += 2;
  5187  00C5FC  0E02               	movlw	2
  5188  00C5FE  2632               	addwf	which_drawer@count,f,c
  5189  00C600  0E00               	movlw	0
  5190  00C602  2233               	addwfc	which_drawer@count+1,f,c
  5191                           
  5192                           ;standbyMode.c: 1565: putch(input[keypress]);
  5193  00C604  5034               	movf	which_drawer@keypress,w,c
  5194  00C606  0D01               	mullw	1
  5195  00C608  0ED4               	movlw	low _input
  5196  00C60A  24F3               	addwf	prodl,w,c
  5197  00C60C  6EF6               	movwf	tblptrl,c
  5198  00C60E  0EFC               	movlw	high _input
  5199  00C610  20F4               	addwfc	prodh,w,c
  5200  00C612  6EF7               	movwf	tblptrh,c
  5201  00C614                     	if	1	;There are 3 active tblptr bytes
  5202  00C614  6AF8               	clrf	tblptru,c
  5203  00C616  0E00               	movlw	low (__mediumconst shr (0+16))
  5204  00C618  22F8               	addwfc	tblptru,f,c
  5205  00C61A                     	endif
  5206  00C61A  0008               	tblrd		*
  5207  00C61C  50F5               	movf	tablat,w,c
  5208  00C61E  ECCF  F057         	call	_putch
  5209  00C622  D03A               	goto	l896
  5210  00C624                     l886:
  5211                           
  5212                           ;standbyMode.c: 1568: else if (keypress == 0){
  5213  00C624  5034               	movf	which_drawer@keypress,w,c
  5214  00C626  A4D8               	btfss	status,2,c
  5215  00C628  D78B               	goto	l870
  5216                           
  5217                           ;standbyMode.c: 1569: putch(input[keypress]);
  5218  00C62A  5034               	movf	which_drawer@keypress,w,c
  5219  00C62C  0D01               	mullw	1
  5220  00C62E  0ED4               	movlw	low _input
  5221  00C630  24F3               	addwf	prodl,w,c
  5222  00C632  6EF6               	movwf	tblptrl,c
  5223  00C634  0EFC               	movlw	high _input
  5224  00C636  20F4               	addwfc	prodh,w,c
  5225  00C638  6EF7               	movwf	tblptrh,c
  5226  00C63A                     	if	1	;There are 3 active tblptr bytes
  5227  00C63A  6AF8               	clrf	tblptru,c
  5228  00C63C  0E00               	movlw	low (__mediumconst shr (0+16))
  5229  00C63E  22F8               	addwfc	tblptru,f,c
  5230  00C640                     	endif
  5231  00C640  0008               	tblrd		*
  5232  00C642  50F5               	movf	tablat,w,c
  5233  00C644  ECCF  F057         	call	_putch
  5234                           
  5235                           ;standbyMode.c: 1570: count += 1;
  5236  00C648  4A32               	infsnz	which_drawer@count,f,c
  5237  00C64A  2A33               	incf	which_drawer@count+1,f,c
  5238  00C64C  D023               	goto	u10350
  5239  00C64E                     L3:
  5240  00C64E  262E               	addwf	which_drawer@sum,f,c
  5241  00C650  0E00               	movlw	0
  5242  00C652  222F               	addwfc	which_drawer@sum+1,f,c
  5243                           
  5244                           ;standbyMode.c: 1572: }
  5245                           ;standbyMode.c: 1573: }
  5246  00C654  D775               	goto	l870
  5247  00C656                     l885:
  5248                           
  5249                           ;standbyMode.c: 1574: else if (count == 1){
  5250  00C656  0432               	decf	which_drawer@count,w,c
  5251  00C658  1033               	iorwf	which_drawer@count+1,w,c
  5252  00C65A  A4D8               	btfss	status,2,c
  5253  00C65C  D771               	goto	l870
  5254                           
  5255                           ;standbyMode.c: 1575: if (keypress < 8 || keypress == 13){
  5256  00C65E  0E07               	movlw	7
  5257  00C660  6434               	cpfsgt	which_drawer@keypress,c
  5258  00C662  D004               	goto	u10340
  5259  00C664  0E0D               	movlw	13
  5260  00C666  1834               	xorwf	which_drawer@keypress,w,c
  5261  00C668  A4D8               	btfss	status,2,c
  5262  00C66A  D76A               	goto	l870
  5263  00C66C                     u10340:
  5264                           
  5265                           ;standbyMode.c: 1576: putch(input[keypress]);
  5266  00C66C  5034               	movf	which_drawer@keypress,w,c
  5267  00C66E  0D01               	mullw	1
  5268  00C670  0ED4               	movlw	low _input
  5269  00C672  24F3               	addwf	prodl,w,c
  5270  00C674  6EF6               	movwf	tblptrl,c
  5271  00C676  0EFC               	movlw	high _input
  5272  00C678  20F4               	addwfc	prodh,w,c
  5273  00C67A  6EF7               	movwf	tblptrh,c
  5274  00C67C                     	if	1	;There are 3 active tblptr bytes
  5275  00C67C  6AF8               	clrf	tblptru,c
  5276  00C67E  0E00               	movlw	low (__mediumconst shr (0+16))
  5277  00C680  22F8               	addwfc	tblptru,f,c
  5278  00C682                     	endif
  5279  00C682  0008               	tblrd		*
  5280  00C684  50F5               	movf	tablat,w,c
  5281  00C686  ECCF  F057         	call	_putch
  5282                           
  5283                           ;standbyMode.c: 1577: count += 1;
  5284  00C68A  4A32               	infsnz	which_drawer@count,f,c
  5285  00C68C  2A33               	incf	which_drawer@count+1,f,c
  5286                           
  5287                           ;standbyMode.c: 1578: if(keypress == 0){
  5288  00C68E  5034               	movf	which_drawer@keypress,w,c
  5289  00C690  A4D8               	btfss	status,2,c
  5290  00C692  D002               	goto	l896
  5291  00C694                     u10350:
  5292                           
  5293                           ;standbyMode.c: 1579: sum += 20;
  5294  00C694  0E14               	movlw	20
  5295  00C696  D7DB               	goto	L3
  5296  00C698                     l896:
  5297                           
  5298                           ;standbyMode.c: 1581: else {
  5299                           ;standbyMode.c: 1582: sum += keypress;
  5300  00C698  5034               	movf	which_drawer@keypress,w,c
  5301  00C69A  D7D9               	goto	L3
  5302  00C69C                     l882:
  5303                           
  5304                           ;standbyMode.c: 1587: else if (keypress == 12){
  5305  00C69C  0E0C               	movlw	12
  5306  00C69E  1834               	xorwf	which_drawer@keypress,w,c
  5307  00C6A0  A4D8               	btfss	status,2,c
  5308  00C6A2  D74E               	goto	l870
  5309                           
  5310                           ;standbyMode.c: 1588: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5311  00C6A4  0E01               	movlw	1
  5312  00C6A6  ECBB  F057         	call	_lcdInst
  5313  00C6AA  0EC3               	movlw	195
  5314  00C6AC  6E2B               	movwf	??_which_drawer& (0+255),c
  5315  00C6AE  0ECD               	movlw	205
  5316  00C6B0                     u11747:
  5317  00C6B0  2EE8               	decfsz	wreg,f,c
  5318  00C6B2  D7FE               	bra	u11747
  5319  00C6B4  2E2B               	decfsz	??_which_drawer& (0+255),f,c
  5320  00C6B6  D7FC               	bra	u11747
  5321  00C6B8  F000               	nop	
  5322                           
  5323                           ;standbyMode.c: 1589: printf("Drawer number:");
  5324  00C6BA  0E2D               	movlw	low STR_73
  5325  00C6BC  6E0D               	movwf	printf@f,c
  5326  00C6BE  0EFE               	movlw	high STR_73
  5327  00C6C0  6E0E               	movwf	printf@f+1,c
  5328  00C6C2  EC55  F067         	call	_printf	;wreg free
  5329                           
  5330                           ;standbyMode.c: 1590: lcdInst(0xC0);;
  5331  00C6C6  0EC0               	movlw	192
  5332  00C6C8  ECBB  F057         	call	_lcdInst
  5333                           
  5334                           ;standbyMode.c: 1591: count = 0;
  5335  00C6CC  0E00               	movlw	0
  5336  00C6CE  6E33               	movwf	which_drawer@count+1,c
  5337  00C6D0  0E00               	movlw	0
  5338  00C6D2  6E32               	movwf	which_drawer@count,c
  5339                           
  5340                           ;standbyMode.c: 1592: sum = 0;
  5341  00C6D4  0E00               	movlw	0
  5342  00C6D6  6E2F               	movwf	which_drawer@sum+1,c
  5343  00C6D8  0E00               	movlw	0
  5344  00C6DA  6E2E               	movwf	which_drawer@sum,c
  5345  00C6DC  D731               	goto	l870
  5346  00C6DE                     l878:
  5347                           
  5348                           ;standbyMode.c: 1593: }
  5349                           ;standbyMode.c: 1594: }
  5350                           ;standbyMode.c: 1596: if (backCheck == 100){
  5351  00C6DE  0E64               	movlw	100
  5352  00C6E0  1830               	xorwf	which_drawer@backCheck,w,c
  5353  00C6E2  1031               	iorwf	which_drawer@backCheck+1,w,c
  5354  00C6E4  A4D8               	btfss	status,2,c
  5355  00C6E6  D005               	goto	l901
  5356                           
  5357                           ;standbyMode.c: 1597: return backCheck;
  5358  00C6E8  C030  F029         	movff	which_drawer@backCheck,?_which_drawer
  5359  00C6EC  C031  F02A         	movff	which_drawer@backCheck+1,?_which_drawer+1
  5360                           
  5361                           ;standbyMode.c: 1598: }
  5362  00C6F0  0012               	return	
  5363  00C6F2                     l901:
  5364                           
  5365                           ;standbyMode.c: 1599: else{
  5366                           ;standbyMode.c: 1600: unsigned int rand = decode_drawer(sum);
  5367  00C6F2  C02E  F001         	movff	which_drawer@sum,decode_drawer@drawer
  5368  00C6F6  C02F  F002         	movff	which_drawer@sum+1,decode_drawer@drawer+1
  5369  00C6FA  ECF1  F05B         	call	_decode_drawer	;wreg free
  5370  00C6FE  C001  F02C         	movff	?_decode_drawer,which_drawer@rand
  5371  00C702  C002  F02D         	movff	?_decode_drawer+1,which_drawer@rand+1
  5372                           
  5373                           ;standbyMode.c: 1601: return rand;
  5374  00C706  C02C  F029         	movff	which_drawer@rand,?_which_drawer
  5375  00C70A  C02D  F02A         	movff	which_drawer@rand+1,?_which_drawer+1
  5376  00C70E  0012               	return	
  5377  00C710                     __end_of_which_drawer:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           postinc0	equ	0xFEE
  5386                           wreg	equ	0xFE8
  5387                           postdec1	equ	0xFE5
  5388                           plusw1	equ	0xFE3
  5389                           fsr1l	equ	0xFE1
  5390                           indf2	equ	0xFDF
  5391                           postinc2	equ	0xFDE
  5392                           postdec2	equ	0xFDD
  5393                           plusw2	equ	0xFDB
  5394                           fsr2h	equ	0xFDA
  5395                           fsr2l	equ	0xFD9
  5396                           status	equ	0xFD8
  5397                           
  5398 ;; *************** function _decode_drawer *****************
  5399 ;; Defined at:
  5400 ;;		line 1461 in file "standbyMode.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  drawer          2    0[COMRAM] unsigned int 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;  returnValue     2    4[COMRAM] unsigned int 
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  2    0[COMRAM] unsigned int 
  5407 ;; Registers used:
  5408 ;;		wreg, status,2, status,0
  5409 ;; Tracked objects:
  5410 ;;		On entry : 0/0
  5411 ;;		On exit  : 0/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5414 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;Total ram usage:        6 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_which_drawer
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text3
  5428  00B7E2                     __ptext3:
  5429                           	opt stack 0
  5430  00B7E2                     _decode_drawer:
  5431                           	opt stack 28
  5432                           
  5433                           ;standbyMode.c: 1462: unsigned int returnValue;
  5434                           ;standbyMode.c: 1464: switch(drawer){
  5435                           
  5436                           ;incstack = 0
  5437  00B7E2  D03A               	goto	l851
  5438  00B7E4                     
  5439                           ;standbyMode.c: 1467: returnValue = 1;
  5440  00B7E4  0E00               	movlw	0
  5441  00B7E6  6E06               	movwf	decode_drawer@returnValue+1,c
  5442  00B7E8  0E01               	movlw	1
  5443  00B7EA  D02F               	goto	L15
  5444  00B7EC                     
  5445                           ;standbyMode.c: 1472: returnValue = 2;
  5446  00B7EC  0E00               	movlw	0
  5447  00B7EE  6E06               	movwf	decode_drawer@returnValue+1,c
  5448  00B7F0  0E02               	movlw	2
  5449  00B7F2  D02B               	goto	L15
  5450  00B7F4                     
  5451                           ;standbyMode.c: 1477: returnValue = 3;
  5452  00B7F4  0E00               	movlw	0
  5453  00B7F6  6E06               	movwf	decode_drawer@returnValue+1,c
  5454  00B7F8  0E03               	movlw	3
  5455  00B7FA  D027               	goto	L15
  5456  00B7FC                     
  5457                           ;standbyMode.c: 1482: returnValue = 7;
  5458  00B7FC  0E00               	movlw	0
  5459  00B7FE  6E06               	movwf	decode_drawer@returnValue+1,c
  5460  00B800  0E07               	movlw	7
  5461  00B802  D023               	goto	L15
  5462  00B804                     
  5463                           ;standbyMode.c: 1487: returnValue = 8;
  5464  00B804  0E00               	movlw	0
  5465  00B806  6E06               	movwf	decode_drawer@returnValue+1,c
  5466  00B808  0E08               	movlw	8
  5467  00B80A  D01F               	goto	L15
  5468  00B80C                     
  5469                           ;standbyMode.c: 1492: returnValue = 9;
  5470  00B80C  0E00               	movlw	0
  5471  00B80E  6E06               	movwf	decode_drawer@returnValue+1,c
  5472  00B810  0E09               	movlw	9
  5473  00B812  D01B               	goto	L15
  5474  00B814                     
  5475                           ;standbyMode.c: 1497: returnValue = 10;
  5476  00B814  0E00               	movlw	0
  5477  00B816  6E06               	movwf	decode_drawer@returnValue+1,c
  5478  00B818  0E0A               	movlw	10
  5479  00B81A  D017               	goto	L15
  5480  00B81C                     
  5481                           ;standbyMode.c: 1502: returnValue = 11;
  5482  00B81C  0E00               	movlw	0
  5483  00B81E  6E06               	movwf	decode_drawer@returnValue+1,c
  5484  00B820  0E0B               	movlw	11
  5485  00B822  D013               	goto	L15
  5486  00B824                     
  5487                           ;standbyMode.c: 1507: returnValue = 12;
  5488  00B824  0E00               	movlw	0
  5489  00B826  6E06               	movwf	decode_drawer@returnValue+1,c
  5490  00B828  0E0C               	movlw	12
  5491  00B82A  D00F               	goto	L15
  5492  00B82C                     
  5493                           ;standbyMode.c: 1512: returnValue = 13;
  5494  00B82C  0E00               	movlw	0
  5495  00B82E  6E06               	movwf	decode_drawer@returnValue+1,c
  5496  00B830  0E0D               	movlw	13
  5497  00B832  D00B               	goto	L15
  5498  00B834                     
  5499                           ;standbyMode.c: 1517: returnValue = 14;
  5500  00B834  0E00               	movlw	0
  5501  00B836  6E06               	movwf	decode_drawer@returnValue+1,c
  5502  00B838  0E0E               	movlw	14
  5503  00B83A  D007               	goto	L15
  5504  00B83C                     
  5505                           ;standbyMode.c: 1522: returnValue = 15;
  5506  00B83C  0E00               	movlw	0
  5507  00B83E  6E06               	movwf	decode_drawer@returnValue+1,c
  5508  00B840  0E0F               	movlw	15
  5509  00B842  D003               	goto	L15
  5510  00B844                     
  5511                           ;standbyMode.c: 1527: returnValue = 16;
  5512  00B844  0E00               	movlw	0
  5513  00B846  6E06               	movwf	decode_drawer@returnValue+1,c
  5514  00B848  0E10               	movlw	16
  5515  00B84A                     L15:
  5516  00B84A  6E05               	movwf	decode_drawer@returnValue,c
  5517                           
  5518                           ;standbyMode.c: 1528: break;
  5519  00B84C  D036               	goto	l853
  5520  00B84E                     l866:
  5521                           
  5522                           ;standbyMode.c: 1531: returnValue = drawer;
  5523  00B84E  C001  F005         	movff	decode_drawer@drawer,decode_drawer@returnValue
  5524  00B852  C002  F006         	movff	decode_drawer@drawer+1,decode_drawer@returnValue+1
  5525                           
  5526                           ;standbyMode.c: 1533: }
  5527                           
  5528                           ;standbyMode.c: 1532: break;
  5529  00B856  D031               	goto	l853
  5530  00B858                     l851:
  5531  00B858  C001  F003         	movff	decode_drawer@drawer,??_decode_drawer
  5532  00B85C  C002  F004         	movff	decode_drawer@drawer+1,??_decode_drawer+1
  5533                           
  5534                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5535                           ; Switch size 1, requested type "space"
  5536                           ; Number of cases is 1, Range of values is 0 to 0
  5537                           ; switch strategies available:
  5538                           ; Name         Instructions Cycles
  5539                           ; simple_byte            4     3 (average)
  5540                           ;	Chosen strategy is simple_byte
  5541  00B860  5004               	movf	??_decode_drawer+1,w,c
  5542  00B862  0A00               	xorlw	0	; case 0
  5543  00B864  A4D8               	btfss	status,2,c
  5544  00B866  D7F3               	goto	l866
  5545                           
  5546                           ; Switch size 1, requested type "space"
  5547                           ; Number of cases is 13, Range of values is 1 to 40
  5548                           ; switch strategies available:
  5549                           ; Name         Instructions Cycles
  5550                           ; simple_byte           40    21 (average)
  5551                           ;	Chosen strategy is simple_byte
  5552  00B868  5003               	movf	??_decode_drawer,w,c
  5553  00B86A  0A01               	xorlw	1	; case 1
  5554  00B86C  B4D8               	btfsc	status,2,c
  5555  00B86E  D7BE               	goto	l854
  5556  00B870  0A03               	xorlw	3	; case 2
  5557  00B872  B4D8               	btfsc	status,2,c
  5558  00B874  D7BF               	goto	l855
  5559  00B876  0A0A               	xorlw	10	; case 8
  5560  00B878  B4D8               	btfsc	status,2,c
  5561  00B87A  D7C0               	goto	l856
  5562  00B87C  0A01               	xorlw	1	; case 9
  5563  00B87E  B4D8               	btfsc	status,2,c
  5564  00B880  D7C1               	goto	l857
  5565  00B882  0A03               	xorlw	3	; case 10
  5566  00B884  B4D8               	btfsc	status,2,c
  5567  00B886  D7C2               	goto	l858
  5568  00B888  0A1E               	xorlw	30	; case 20
  5569  00B88A  B4D8               	btfsc	status,2,c
  5570  00B88C  D7AB               	goto	l852
  5571  00B88E  0A01               	xorlw	1	; case 21
  5572  00B890  B4D8               	btfsc	status,2,c
  5573  00B892  D7C8               	goto	l861
  5574  00B894  0A03               	xorlw	3	; case 22
  5575  00B896  B4D8               	btfsc	status,2,c
  5576  00B898  D7C9               	goto	l862
  5577  00B89A  0A0E               	xorlw	14	; case 24
  5578  00B89C  B4D8               	btfsc	status,2,c
  5579  00B89E  D7CA               	goto	l863
  5580  00B8A0  0A01               	xorlw	1	; case 25
  5581  00B8A2  B4D8               	btfsc	status,2,c
  5582  00B8A4  D7CB               	goto	l864
  5583  00B8A6  0A03               	xorlw	3	; case 26
  5584  00B8A8  B4D8               	btfsc	status,2,c
  5585  00B8AA  D7CC               	goto	l865
  5586  00B8AC  0A3B               	xorlw	59	; case 33
  5587  00B8AE  B4D8               	btfsc	status,2,c
  5588  00B8B0  D7B1               	goto	l859
  5589  00B8B2  0A09               	xorlw	9	; case 40
  5590  00B8B4  B4D8               	btfsc	status,2,c
  5591  00B8B6  D7B2               	goto	l860
  5592  00B8B8  D7CA               	goto	l866
  5593  00B8BA                     l853:
  5594                           
  5595                           ;standbyMode.c: 1534: return returnValue;
  5596  00B8BA  C005  F001         	movff	decode_drawer@returnValue,?_decode_drawer
  5597  00B8BE  C006  F002         	movff	decode_drawer@returnValue+1,?_decode_drawer+1
  5598  00B8C2  0012               	return		;funcret
  5599  00B8C4                     __end_of_decode_drawer:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           postdec1	equ	0xFE5
  5610                           plusw1	equ	0xFE3
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           plusw2	equ	0xFDB
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _viewLogs *****************
  5621 ;; Defined at:
  5622 ;;		line 753 in file "standbyMode.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  keypress2       1   92[COMRAM] unsigned char 
  5627 ;;  logView         2   89[COMRAM] unsigned int 
  5628 ;;  returnVal       2   87[COMRAM] unsigned int 
  5629 ;;  checkLog        2   85[COMRAM] unsigned int 
  5630 ;;  logNumber       1   91[COMRAM] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  2   81[COMRAM] unsigned int 
  5633 ;; Registers used:
  5634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:       12 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    4
  5647 ;; This function calls:
  5648 ;;		_displayLogs
  5649 ;;		_lcdInst
  5650 ;;		_printf
  5651 ;;		_putch
  5652 ;;		_readEEPROM
  5653 ;;		_verifyKeypress
  5654 ;; This function is called by:
  5655 ;;		_standbyMode
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text4
  5660  00CBBE                     __ptext4:
  5661                           	opt stack 0
  5662  00CBBE                     _viewLogs:
  5663                           	opt stack 25
  5664                           
  5665                           ;standbyMode.c: 755: unsigned char logNumber = readEEPROM(250);
  5666                           
  5667                           ;incstack = 0
  5668  00CBBE  0EFA               	movlw	250
  5669  00CBC0  ECC5  F057         	call	_readEEPROM
  5670  00CBC4  6E5C               	movwf	viewLogs@logNumber,c
  5671                           
  5672                           ;standbyMode.c: 756: unsigned int logView = 0;
  5673  00CBC6  0E00               	movlw	0
  5674  00CBC8  6E5B               	movwf	viewLogs@logView+1,c
  5675  00CBCA  0E00               	movlw	0
  5676  00CBCC  6E5A               	movwf	viewLogs@logView,c
  5677                           
  5678                           ;standbyMode.c: 757: unsigned int checkLog = 0;
  5679  00CBCE  0E00               	movlw	0
  5680  00CBD0  6E57               	movwf	viewLogs@checkLog+1,c
  5681  00CBD2  0E00               	movlw	0
  5682  00CBD4  6E56               	movwf	viewLogs@checkLog,c
  5683                           
  5684                           ;standbyMode.c: 758: unsigned int returnVal = 0;
  5685  00CBD6  0E00               	movlw	0
  5686  00CBD8  6E59               	movwf	viewLogs@returnVal+1,c
  5687  00CBDA  0E00               	movlw	0
  5688  00CBDC  6E58               	movwf	viewLogs@returnVal,c
  5689                           
  5690                           ;standbyMode.c: 760: if (logNumber == 0){
  5691  00CBDE  505C               	movf	viewLogs@logNumber,w,c
  5692  00CBE0  A4D8               	btfss	status,2,c
  5693  00CBE2  D02B               	goto	l592
  5694                           
  5695                           ;standbyMode.c: 761: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5696  00CBE4  0E01               	movlw	1
  5697  00CBE6  ECBB  F057         	call	_lcdInst
  5698  00CBEA  0EC3               	movlw	195
  5699  00CBEC  6E54               	movwf	??_viewLogs& (0+255),c
  5700  00CBEE  0ECD               	movlw	205
  5701  00CBF0                     u11757:
  5702  00CBF0  2EE8               	decfsz	wreg,f,c
  5703  00CBF2  D7FE               	bra	u11757
  5704  00CBF4  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5705  00CBF6  D7FC               	bra	u11757
  5706  00CBF8  F000               	nop	
  5707                           
  5708                           ;standbyMode.c: 762: printf("No logs");
  5709  00CBFA  0E94               	movlw	low STR_36
  5710  00CBFC  6E0D               	movwf	printf@f,c
  5711  00CBFE  0EFF               	movlw	high STR_36
  5712  00CC00  6E0E               	movwf	printf@f+1,c
  5713  00CC02  EC55  F067         	call	_printf	;wreg free
  5714                           
  5715                           ;standbyMode.c: 763: lcdInst(0xC0);;
  5716  00CC06  0EC0               	movlw	192
  5717  00CC08  ECBB  F057         	call	_lcdInst
  5718                           
  5719                           ;standbyMode.c: 764: printf("available.");
  5720  00CC0C  0E1C               	movlw	low STR_37
  5721  00CC0E  6E0D               	movwf	printf@f,c
  5722  00CC10  0EFF               	movlw	high STR_37
  5723  00CC12  6E0E               	movwf	printf@f+1,c
  5724  00CC14  EC55  F067         	call	_printf	;wreg free
  5725                           
  5726                           ;standbyMode.c: 765: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5727  00CC18  0E66               	movlw	102
  5728  00CC1A  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5729  00CC1C  0E76               	movlw	118
  5730  00CC1E  6E54               	movwf	??_viewLogs& (0+255),c
  5731  00CC20  0EC1               	movlw	193
  5732  00CC22                     u11767:
  5733  00CC22  2EE8               	decfsz	wreg,f,c
  5734  00CC24  D7FE               	bra	u11767
  5735  00CC26  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5736  00CC28  D7FC               	bra	u11767
  5737  00CC2A  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5738  00CC2C  D7FA               	bra	u11767
  5739  00CC2E  F000               	nop	
  5740                           
  5741                           ;standbyMode.c: 766: return 14;
  5742  00CC30  0E00               	movlw	0
  5743  00CC32  6E53               	movwf	?_viewLogs+1,c
  5744  00CC34  0E0E               	movlw	14
  5745  00CC36  6E52               	movwf	?_viewLogs,c
  5746                           
  5747                           ;standbyMode.c: 767: }
  5748  00CC38  0012               	return	
  5749  00CC3A                     l592:
  5750                           
  5751                           ;standbyMode.c: 768: else {
  5752                           ;standbyMode.c: 769: if (logNumber == 1){
  5753  00CC3A  045C               	decf	viewLogs@logNumber,w,c
  5754  00CC3C  A4D8               	btfss	status,2,c
  5755  00CC3E  D053               	goto	l595
  5756                           
  5757                           ;standbyMode.c: 770: logView = 1;
  5758  00CC40  0E00               	movlw	0
  5759  00CC42  6E5B               	movwf	viewLogs@logView+1,c
  5760  00CC44  0E01               	movlw	1
  5761  00CC46  6E5A               	movwf	viewLogs@logView,c
  5762                           
  5763                           ;standbyMode.c: 772: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5764  00CC48  0E01               	movlw	1
  5765  00CC4A  ECBB  F057         	call	_lcdInst
  5766  00CC4E  0EC3               	movlw	195
  5767  00CC50  6E54               	movwf	??_viewLogs& (0+255),c
  5768  00CC52  0ECD               	movlw	205
  5769  00CC54                     u11777:
  5770  00CC54  2EE8               	decfsz	wreg,f,c
  5771  00CC56  D7FE               	bra	u11777
  5772  00CC58  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5773  00CC5A  D7FC               	bra	u11777
  5774  00CC5C  F000               	nop	
  5775                           
  5776                           ;standbyMode.c: 773: printf("1 previous log");
  5777  00CC5E  0E4B               	movlw	low STR_38
  5778  00CC60  6E0D               	movwf	printf@f,c
  5779  00CC62  0EFE               	movlw	high STR_38
  5780  00CC64  6E0E               	movwf	printf@f+1,c
  5781  00CC66  EC55  F067         	call	_printf	;wreg free
  5782                           
  5783                           ;standbyMode.c: 774: lcdInst(0xC0);;
  5784  00CC6A  0EC0               	movlw	192
  5785  00CC6C  ECBB  F057         	call	_lcdInst
  5786                           
  5787                           ;standbyMode.c: 775: printf("available.");
  5788  00CC70  0E1C               	movlw	low STR_37
  5789  00CC72  6E0D               	movwf	printf@f,c
  5790  00CC74  0EFF               	movlw	high STR_37
  5791  00CC76  6E0E               	movwf	printf@f+1,c
  5792  00CC78  EC55  F067         	call	_printf	;wreg free
  5793                           
  5794                           ;standbyMode.c: 776: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5795  00CC7C  0E66               	movlw	102
  5796  00CC7E  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5797  00CC80  0E76               	movlw	118
  5798  00CC82  6E54               	movwf	??_viewLogs& (0+255),c
  5799  00CC84  0EC1               	movlw	193
  5800  00CC86                     u11787:
  5801  00CC86  2EE8               	decfsz	wreg,f,c
  5802  00CC88  D7FE               	bra	u11787
  5803  00CC8A  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5804  00CC8C  D7FC               	bra	u11787
  5805  00CC8E  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5806  00CC90  D7FA               	bra	u11787
  5807  00CC92  F000               	nop	
  5808                           
  5809                           ;standbyMode.c: 778: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5810  00CC94  0E01               	movlw	1
  5811  00CC96  ECBB  F057         	call	_lcdInst
  5812  00CC9A  0EC3               	movlw	195
  5813  00CC9C  6E54               	movwf	??_viewLogs& (0+255),c
  5814  00CC9E  0ECD               	movlw	205
  5815  00CCA0                     u11797:
  5816  00CCA0  2EE8               	decfsz	wreg,f,c
  5817  00CCA2  D7FE               	bra	u11797
  5818  00CCA4  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5819  00CCA6  D7FC               	bra	u11797
  5820  00CCA8  F000               	nop	
  5821                           
  5822                           ;standbyMode.c: 779: printf("Press any key to");
  5823  00CCAA  0E6B               	movlw	low STR_40
  5824  00CCAC  6E0D               	movwf	printf@f,c
  5825  00CCAE  0EFD               	movlw	high STR_40
  5826  00CCB0  6E0E               	movwf	printf@f+1,c
  5827  00CCB2  EC55  F067         	call	_printf	;wreg free
  5828                           
  5829                           ;standbyMode.c: 780: lcdInst(0xC0);;
  5830  00CCB6  0EC0               	movlw	192
  5831  00CCB8  ECBB  F057         	call	_lcdInst
  5832                           
  5833                           ;standbyMode.c: 781: printf("move forward.");
  5834  00CCBC  0EC1               	movlw	low STR_41
  5835  00CCBE  6E0D               	movwf	printf@f,c
  5836  00CCC0  0EFE               	movlw	high STR_41
  5837  00CCC2  6E0E               	movwf	printf@f+1,c
  5838  00CCC4  EC55  F067         	call	_printf	;wreg free
  5839                           
  5840                           ;standbyMode.c: 782: _delay((unsigned long)((500)*(40000000/4000.0)));
  5841  00CCC8  0E1A               	movlw	26
  5842  00CCCA  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5843  00CCCC  0E5E               	movlw	94
  5844  00CCCE  6E54               	movwf	??_viewLogs& (0+255),c
  5845  00CCD0  0E6E               	movlw	110
  5846  00CCD2                     u11807:
  5847  00CCD2  2EE8               	decfsz	wreg,f,c
  5848  00CCD4  D7FE               	bra	u11807
  5849  00CCD6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5850  00CCD8  D7FC               	bra	u11807
  5851  00CCDA  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5852  00CCDC  D7FA               	bra	u11807
  5853  00CCDE  D000               	nop2	
  5854  00CCE0                     
  5855                           ;standbyMode.c: 785: continue;
  5856  00CCE0  B281               	btfsc	3969,1,c	;volatile
  5857  00CCE2  D0D4               	goto	u8660
  5858  00CCE4  D7FD               	goto	l597
  5859  00CCE6                     l595:
  5860                           
  5861                           ;standbyMode.c: 788: else {
  5862                           ;standbyMode.c: 789: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5863  00CCE6  0E01               	movlw	1
  5864  00CCE8  ECBB  F057         	call	_lcdInst
  5865  00CCEC  0EC3               	movlw	195
  5866  00CCEE  6E54               	movwf	??_viewLogs& (0+255),c
  5867  00CCF0  0ECD               	movlw	205
  5868  00CCF2                     u11817:
  5869  00CCF2  2EE8               	decfsz	wreg,f,c
  5870  00CCF4  D7FE               	bra	u11817
  5871  00CCF6  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5872  00CCF8  D7FC               	bra	u11817
  5873  00CCFA  F000               	nop	
  5874                           
  5875                           ;standbyMode.c: 790: printf("%i previous logs", logNumber);
  5876  00CCFC  0E7C               	movlw	low STR_42
  5877  00CCFE  6E0D               	movwf	printf@f,c
  5878  00CD00  0EFD               	movlw	high STR_42
  5879  00CD02  6E0E               	movwf	printf@f+1,c
  5880  00CD04  C05C  F00F         	movff	viewLogs@logNumber,?_printf+2
  5881  00CD08  6A10               	clrf	?_printf+3,c
  5882  00CD0A  EC55  F067         	call	_printf	;wreg free
  5883                           
  5884                           ;standbyMode.c: 791: lcdInst(0xC0);;
  5885  00CD0E  0EC0               	movlw	192
  5886  00CD10  ECBB  F057         	call	_lcdInst
  5887                           
  5888                           ;standbyMode.c: 792: printf("available.");
  5889  00CD14  0E1C               	movlw	low STR_37
  5890  00CD16  6E0D               	movwf	printf@f,c
  5891  00CD18  0EFF               	movlw	high STR_37
  5892  00CD1A  6E0E               	movwf	printf@f+1,c
  5893  00CD1C  EC55  F067         	call	_printf	;wreg free
  5894                           
  5895                           ;standbyMode.c: 793: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5896  00CD20  0E66               	movlw	102
  5897  00CD22  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  5898  00CD24  0E76               	movlw	118
  5899  00CD26  6E54               	movwf	??_viewLogs& (0+255),c
  5900  00CD28  0EC1               	movlw	193
  5901  00CD2A                     u11827:
  5902  00CD2A  2EE8               	decfsz	wreg,f,c
  5903  00CD2C  D7FE               	bra	u11827
  5904  00CD2E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5905  00CD30  D7FC               	bra	u11827
  5906  00CD32  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  5907  00CD34  D7FA               	bra	u11827
  5908  00CD36  F000               	nop	
  5909                           
  5910                           ;standbyMode.c: 794: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5911  00CD38  0E01               	movlw	1
  5912  00CD3A  ECBB  F057         	call	_lcdInst
  5913  00CD3E  0EC3               	movlw	195
  5914  00CD40  6E54               	movwf	??_viewLogs& (0+255),c
  5915  00CD42  0ECD               	movlw	205
  5916  00CD44                     u11837:
  5917  00CD44  2EE8               	decfsz	wreg,f,c
  5918  00CD46  D7FE               	bra	u11837
  5919  00CD48  2E54               	decfsz	??_viewLogs& (0+255),f,c
  5920  00CD4A  D7FC               	bra	u11837
  5921  00CD4C  F000               	nop	
  5922                           
  5923                           ;standbyMode.c: 795: printf("Please input log");
  5924  00CD4E  0E49               	movlw	low STR_44
  5925  00CD50  6E0D               	movwf	printf@f,c
  5926  00CD52  0EFD               	movlw	high STR_44
  5927  00CD54  6E0E               	movwf	printf@f+1,c
  5928  00CD56  EC55  F067         	call	_printf	;wreg free
  5929                           
  5930                           ;standbyMode.c: 796: lcdInst(0xC0);;
  5931  00CD5A  0EC0               	movlw	192
  5932  00CD5C  ECBB  F057         	call	_lcdInst
  5933                           
  5934                           ;standbyMode.c: 797: printf("number: ");
  5935  00CD60  0E7B               	movlw	low STR_45
  5936  00CD62  6E0D               	movwf	printf@f,c
  5937  00CD64  0EFF               	movlw	high STR_45
  5938  00CD66  6E0E               	movwf	printf@f+1,c
  5939  00CD68  EC55  F067         	call	_printf	;wreg free
  5940  00CD6C                     
  5941                           ;standbyMode.c: 800: while(PORTBbits.RB1 == 0){ continue; }
  5942  00CD6C  A281               	btfss	3969,1,c	;volatile
  5943  00CD6E  D7FE               	goto	l600
  5944                           
  5945                           ;standbyMode.c: 801: unsigned char keypress2 = (PORTB & 0xF0) >> 4;
  5946  00CD70  3881               	swapf	3969,w,c	;volatile
  5947  00CD72  0B0F               	andlw	15
  5948  00CD74  0B0F               	andlw	15
  5949  00CD76  6E5D               	movwf	viewLogs@keypress2,c
  5950  00CD78  B281               	btfsc	3969,1,c	;volatile
  5951  00CD7A  D7FE               	goto	l605
  5952                           
  5953                           ;standbyMode.c: 804: if (keypress2 == 0 || keypress2 == 1 || keypress2 == 2 || keypress2
      +                           == 4){
  5954  00CD7C  505D               	movf	viewLogs@keypress2,w,c
  5955  00CD7E  B4D8               	btfsc	status,2,c
  5956  00CD80  D00B               	goto	u8630
  5957  00CD82  045D               	decf	viewLogs@keypress2,w,c
  5958  00CD84  B4D8               	btfsc	status,2,c
  5959  00CD86  D008               	goto	u8630
  5960  00CD88  0E02               	movlw	2
  5961  00CD8A  185D               	xorwf	viewLogs@keypress2,w,c
  5962  00CD8C  B4D8               	btfsc	status,2,c
  5963  00CD8E  D004               	goto	u8630
  5964  00CD90  0E04               	movlw	4
  5965  00CD92  185D               	xorwf	viewLogs@keypress2,w,c
  5966  00CD94  A4D8               	btfss	status,2,c
  5967  00CD96  D7EA               	goto	l600
  5968  00CD98                     u8630:
  5969                           
  5970                           ;standbyMode.c: 805: checkLog = verifyKeypress(logNumber, keypress2);
  5971  00CD98  C05D  F001         	movff	viewLogs@keypress2,verifyKeypress@keypress
  5972  00CD9C  6A02               	clrf	verifyKeypress@keypress+1,c
  5973  00CD9E  505C               	movf	viewLogs@logNumber,w,c
  5974  00CDA0  ECC4  F058         	call	_verifyKeypress
  5975  00CDA4  C001  F056         	movff	?_verifyKeypress,viewLogs@checkLog
  5976  00CDA8  C002  F057         	movff	?_verifyKeypress+1,viewLogs@checkLog+1
  5977                           
  5978                           ;standbyMode.c: 806: if (checkLog == 1){
  5979  00CDAC  0456               	decf	viewLogs@checkLog,w,c
  5980  00CDAE  1057               	iorwf	viewLogs@checkLog+1,w,c
  5981  00CDB0  A4D8               	btfss	status,2,c
  5982  00CDB2  D7DC               	goto	l600
  5983                           
  5984                           ;standbyMode.c: 807: putch(keys[keypress2]);
  5985  00CDB4  505D               	movf	viewLogs@keypress2,w,c
  5986  00CDB6  0D01               	mullw	1
  5987  00CDB8  0EC3               	movlw	low _keys
  5988  00CDBA  24F3               	addwf	prodl,w,c
  5989  00CDBC  6EF6               	movwf	tblptrl,c
  5990  00CDBE  0EFC               	movlw	high _keys
  5991  00CDC0  20F4               	addwfc	prodh,w,c
  5992  00CDC2  6EF7               	movwf	tblptrh,c
  5993  00CDC4                     	if	1	;There are 3 active tblptr bytes
  5994  00CDC4  6AF8               	clrf	tblptru,c
  5995  00CDC6  0E00               	movlw	low (__mediumconst shr (0+16))
  5996  00CDC8  22F8               	addwfc	tblptru,f,c
  5997  00CDCA                     	endif
  5998  00CDCA  0008               	tblrd		*
  5999  00CDCC  50F5               	movf	tablat,w,c
  6000  00CDCE  ECCF  F057         	call	_putch
  6001                           
  6002                           ;standbyMode.c: 808: if (keypress2 == 4){
  6003  00CDD2  0E04               	movlw	4
  6004  00CDD4  185D               	xorwf	viewLogs@keypress2,w,c
  6005  00CDD6  A4D8               	btfss	status,2,c
  6006  00CDD8  D004               	goto	l611
  6007                           
  6008                           ;standbyMode.c: 809: logView = keypress2;
  6009  00CDDA  C05D  F05A         	movff	viewLogs@keypress2,viewLogs@logView
  6010  00CDDE  6A5B               	clrf	viewLogs@logView+1,c
  6011                           
  6012                           ;standbyMode.c: 810: }
  6013  00CDE0  D006               	goto	l612
  6014  00CDE2                     l611:
  6015                           
  6016                           ;standbyMode.c: 811: else{
  6017                           ;standbyMode.c: 812: logView = keypress2 + 1;
  6018  00CDE2  0E01               	movlw	1
  6019  00CDE4  245D               	addwf	viewLogs@keypress2,w,c
  6020  00CDE6  6E5A               	movwf	viewLogs@logView,c
  6021  00CDE8  6A5B               	clrf	viewLogs@logView+1,c
  6022  00CDEA  0E00               	movlw	0
  6023  00CDEC  225B               	addwfc	viewLogs@logView+1,f,c
  6024  00CDEE                     l612:
  6025                           
  6026                           ;standbyMode.c: 813: }
  6027                           ;standbyMode.c: 814: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6028  00CDEE  0E33               	movlw	51
  6029  00CDF0  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6030  00CDF2  0EBB               	movlw	187
  6031  00CDF4  6E54               	movwf	??_viewLogs& (0+255),c
  6032  00CDF6  0EE0               	movlw	224
  6033  00CDF8                     u11847:
  6034  00CDF8  2EE8               	decfsz	wreg,f,c
  6035  00CDFA  D7FE               	bra	u11847
  6036  00CDFC  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6037  00CDFE  D7FC               	bra	u11847
  6038  00CE00  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6039  00CE02  D7FA               	bra	u11847
  6040                           
  6041                           ;standbyMode.c: 816: }
  6042                           ;standbyMode.c: 817: }
  6043                           ;standbyMode.c: 818: }
  6044                           ;standbyMode.c: 820: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6045                           
  6046                           ;standbyMode.c: 815: break;
  6047  00CE04  0E01               	movlw	1
  6048  00CE06  ECBB  F057         	call	_lcdInst
  6049  00CE0A  0EC3               	movlw	195
  6050  00CE0C  6E54               	movwf	??_viewLogs& (0+255),c
  6051  00CE0E  0ECD               	movlw	205
  6052  00CE10                     u11857:
  6053  00CE10  2EE8               	decfsz	wreg,f,c
  6054  00CE12  D7FE               	bra	u11857
  6055  00CE14  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6056  00CE16  D7FC               	bra	u11857
  6057  00CE18  F000               	nop	
  6058                           
  6059                           ;standbyMode.c: 821: printf("Great!");
  6060  00CE1A  0EAB               	movlw	low STR_46
  6061  00CE1C  6E0D               	movwf	printf@f,c
  6062  00CE1E  0EFF               	movlw	high STR_46
  6063  00CE20  6E0E               	movwf	printf@f+1,c
  6064  00CE22  EC55  F067         	call	_printf	;wreg free
  6065                           
  6066                           ;standbyMode.c: 822: _delay((unsigned long)((1000)*(40000000/4000.0)));
  6067  00CE26  0E33               	movlw	51
  6068  00CE28  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6069  00CE2A  0EBB               	movlw	187
  6070  00CE2C  6E54               	movwf	??_viewLogs& (0+255),c
  6071  00CE2E  0EE0               	movlw	224
  6072  00CE30                     u11867:
  6073  00CE30  2EE8               	decfsz	wreg,f,c
  6074  00CE32  D7FE               	bra	u11867
  6075  00CE34  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6076  00CE36  D7FC               	bra	u11867
  6077  00CE38  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6078  00CE3A  D7FA               	bra	u11867
  6079                           
  6080                           ;standbyMode.c: 823: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6081  00CE3C  0E01               	movlw	1
  6082  00CE3E  ECBB  F057         	call	_lcdInst
  6083  00CE42  0EC3               	movlw	195
  6084  00CE44  6E54               	movwf	??_viewLogs& (0+255),c
  6085  00CE46  0ECD               	movlw	205
  6086  00CE48                     u11877:
  6087  00CE48  2EE8               	decfsz	wreg,f,c
  6088  00CE4A  D7FE               	bra	u11877
  6089  00CE4C  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6090  00CE4E  D7FC               	bra	u11877
  6091  00CE50  F000               	nop	
  6092                           
  6093                           ;standbyMode.c: 824: printf("Press any key to");
  6094  00CE52  0E6B               	movlw	low STR_40
  6095  00CE54  6E0D               	movwf	printf@f,c
  6096  00CE56  0EFD               	movlw	high STR_40
  6097  00CE58  6E0E               	movwf	printf@f+1,c
  6098  00CE5A  EC55  F067         	call	_printf	;wreg free
  6099                           
  6100                           ;standbyMode.c: 825: lcdInst(0xC0);;
  6101  00CE5E  0EC0               	movlw	192
  6102  00CE60  ECBB  F057         	call	_lcdInst
  6103                           
  6104                           ;standbyMode.c: 826: printf("move forward.");
  6105  00CE64  0EC1               	movlw	low STR_41
  6106  00CE66  6E0D               	movwf	printf@f,c
  6107  00CE68  0EFE               	movlw	high STR_41
  6108  00CE6A  6E0E               	movwf	printf@f+1,c
  6109  00CE6C  EC55  F067         	call	_printf	;wreg free
  6110                           
  6111                           ;standbyMode.c: 827: _delay((unsigned long)((500)*(40000000/4000.0)));
  6112  00CE70  0E1A               	movlw	26
  6113  00CE72  6E55               	movwf	(??_viewLogs+1)& (0+255),c
  6114  00CE74  0E5E               	movlw	94
  6115  00CE76  6E54               	movwf	??_viewLogs& (0+255),c
  6116  00CE78  0E6E               	movlw	110
  6117  00CE7A                     u11887:
  6118  00CE7A  2EE8               	decfsz	wreg,f,c
  6119  00CE7C  D7FE               	bra	u11887
  6120  00CE7E  2E54               	decfsz	??_viewLogs& (0+255),f,c
  6121  00CE80  D7FC               	bra	u11887
  6122  00CE82  2E55               	decfsz	(??_viewLogs+1)& (0+255),f,c
  6123  00CE84  D7FA               	bra	u11887
  6124  00CE86  D000               	nop2	
  6125  00CE88                     
  6126                           ;standbyMode.c: 830: continue;
  6127  00CE88  A281               	btfss	3969,1,c	;volatile
  6128  00CE8A  D7FE               	goto	l616
  6129  00CE8C                     u8660:
  6130                           
  6131                           ;standbyMode.c: 831: }
  6132                           ;standbyMode.c: 832: }
  6133                           ;standbyMode.c: 833: returnVal = displayLogs(logView);
  6134  00CE8C  C05A  F029         	movff	viewLogs@logView,displayLogs@logNumber
  6135  00CE90  C05B  F02A         	movff	viewLogs@logView+1,displayLogs@logNumber+1
  6136  00CE94  ECE7  F06B         	call	_displayLogs	;wreg free
  6137  00CE98  C029  F058         	movff	?_displayLogs,viewLogs@returnVal
  6138  00CE9C  C02A  F059         	movff	?_displayLogs+1,viewLogs@returnVal+1
  6139                           
  6140                           ;standbyMode.c: 834: return returnVal;
  6141  00CEA0  C058  F052         	movff	viewLogs@returnVal,?_viewLogs
  6142  00CEA4  C059  F053         	movff	viewLogs@returnVal+1,?_viewLogs+1
  6143  00CEA8  0012               	return	
  6144  00CEAA                     __end_of_viewLogs:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           postdec1	equ	0xFE5
  6155                           plusw1	equ	0xFE3
  6156                           fsr1l	equ	0xFE1
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           plusw2	equ	0xFDB
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _verifyKeypress *****************
  6166 ;; Defined at:
  6167 ;;		line 739 in file "standbyMode.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  logNumber       1    wreg     unsigned char 
  6170 ;;  keypress        2    0[COMRAM] unsigned int 
  6171 ;; Auto vars:     Size  Location     Type
  6172 ;;  logNumber       1    4[COMRAM] unsigned char 
  6173 ;;  i               2    7[COMRAM] unsigned int 
  6174 ;;  returnVal       2    5[COMRAM] unsigned int 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  2    0[COMRAM] unsigned int 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;Total ram usage:        9 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_viewLogs
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	text5
  6198  00B188                     __ptext5:
  6199                           	opt stack 0
  6200  00B188                     _verifyKeypress:
  6201                           	opt stack 28
  6202                           
  6203                           ;incstack = 0
  6204                           ;verifyKeypress@logNumber stored from wreg
  6205  00B188  6E05               	movwf	verifyKeypress@logNumber,c
  6206                           
  6207                           ;standbyMode.c: 740: unsigned int i = 0;
  6208  00B18A  0E00               	movlw	0
  6209  00B18C  6E09               	movwf	verifyKeypress@i+1,c
  6210  00B18E  0E00               	movlw	0
  6211  00B190  6E08               	movwf	verifyKeypress@i,c
  6212                           
  6213                           ;standbyMode.c: 741: unsigned int returnVal = 0;
  6214  00B192  0E00               	movlw	0
  6215  00B194  6E07               	movwf	verifyKeypress@returnVal+1,c
  6216  00B196  0E00               	movlw	0
  6217  00B198  6E06               	movwf	verifyKeypress@returnVal,c
  6218                           
  6219                           ;standbyMode.c: 743: for (i=0; i<logNumber; i++){
  6220  00B19A  0E00               	movlw	0
  6221  00B19C  6E09               	movwf	verifyKeypress@i+1,c
  6222  00B19E  0E00               	movlw	0
  6223  00B1A0  6E08               	movwf	verifyKeypress@i,c
  6224  00B1A2  D00D               	goto	l585
  6225  00B1A4                     
  6226                           ;standbyMode.c: 744: if (keypress == i){
  6227  00B1A4  5008               	movf	verifyKeypress@i,w,c
  6228  00B1A6  1801               	xorwf	verifyKeypress@keypress,w,c
  6229  00B1A8  E108               	bnz	l6322
  6230  00B1AA  5009               	movf	verifyKeypress@i+1,w,c
  6231  00B1AC  1802               	xorwf	verifyKeypress@keypress+1,w,c
  6232  00B1AE  A4D8               	btfss	status,2,c
  6233  00B1B0  D004               	goto	l587
  6234                           
  6235                           ;standbyMode.c: 745: returnVal = 1;
  6236  00B1B2  0E00               	movlw	0
  6237  00B1B4  6E07               	movwf	verifyKeypress@returnVal+1,c
  6238  00B1B6  0E01               	movlw	1
  6239  00B1B8  6E06               	movwf	verifyKeypress@returnVal,c
  6240  00B1BA                     l587:
  6241  00B1BA                     l6322:
  6242  00B1BA  4A08               	infsnz	verifyKeypress@i,f,c
  6243  00B1BC  2A09               	incf	verifyKeypress@i+1,f,c
  6244  00B1BE                     l585:
  6245  00B1BE  5005               	movf	verifyKeypress@logNumber,w,c
  6246  00B1C0  6E03               	movwf	??_verifyKeypress& (0+255),c
  6247  00B1C2  6A04               	clrf	(??_verifyKeypress+1)& (0+255),c
  6248  00B1C4  5003               	movf	??_verifyKeypress,w,c
  6249  00B1C6  5C08               	subwf	verifyKeypress@i,w,c
  6250  00B1C8  5004               	movf	??_verifyKeypress+1,w,c
  6251  00B1CA  5809               	subwfb	verifyKeypress@i+1,w,c
  6252  00B1CC  A0D8               	btfss	status,0,c
  6253  00B1CE  D7EA               	goto	l586
  6254                           
  6255                           ;standbyMode.c: 746: }
  6256                           ;standbyMode.c: 747: }
  6257                           ;standbyMode.c: 748: return returnVal;
  6258  00B1D0  C006  F001         	movff	verifyKeypress@returnVal,?_verifyKeypress
  6259  00B1D4  C007  F002         	movff	verifyKeypress@returnVal+1,?_verifyKeypress+1
  6260  00B1D8  0012               	return		;funcret
  6261  00B1DA                     __end_of_verifyKeypress:
  6262                           	opt stack 0
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           plusw1	equ	0xFE3
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _displayLogs *****************
  6283 ;; Defined at:
  6284 ;;		line 914 in file "standbyMode.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  logNumber       2   40[COMRAM] unsigned int 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  n               2   79[COMRAM] unsigned int 
  6289 ;;  markedDrawer    2   77[COMRAM] unsigned int 
  6290 ;;  markedDrawer    2   75[COMRAM] unsigned int 
  6291 ;;  markedDrawer    2   73[COMRAM] unsigned int 
  6292 ;;  markedDrawer    2   71[COMRAM] unsigned int 
  6293 ;;  i               2   69[COMRAM] unsigned int 
  6294 ;;  drawerNumber    2   67[COMRAM] unsigned int 
  6295 ;;  operationTim    2   65[COMRAM] unsigned int 
  6296 ;;  foodType        2   62[COMRAM] unsigned int 
  6297 ;;  dietType        2   60[COMRAM] unsigned int 
  6298 ;;  seconds         2   58[COMRAM] unsigned int 
  6299 ;;  minutes         2   56[COMRAM] unsigned int 
  6300 ;;  longPieces      2   54[COMRAM] unsigned int 
  6301 ;;  flatPieces      2   52[COMRAM] unsigned int 
  6302 ;;  roundPieces     2   50[COMRAM] unsigned int 
  6303 ;;  day             2   48[COMRAM] unsigned int 
  6304 ;;  month           2   46[COMRAM] unsigned int 
  6305 ;;  year            2   44[COMRAM] unsigned int 
  6306 ;;  keypress3       1   64[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  2   40[COMRAM] unsigned int 
  6309 ;; Registers used:
  6310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:        41       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:       41 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    3
  6323 ;; This function calls:
  6324 ;;		___lwdiv
  6325 ;;		___lwmod
  6326 ;;		___wmul
  6327 ;;		_lcdInst
  6328 ;;		_printf
  6329 ;;		_readEEPROM
  6330 ;; This function is called by:
  6331 ;;		_viewLogs
  6332 ;; This function uses a non-reentrant model
  6333 ;;
  6334                           
  6335                           	psect	text6
  6336  00D7CE                     __ptext6:
  6337                           	opt stack 0
  6338  00D7CE                     _displayLogs:
  6339                           	opt stack 25
  6340                           
  6341                           ;standbyMode.c: 915: unsigned int n = (logNumber-1)*35;
  6342                           
  6343                           ;incstack = 0
  6344  00D7CE  0EFF               	movlw	255
  6345  00D7D0  2429               	addwf	displayLogs@logNumber,w,c
  6346  00D7D2  6E01               	movwf	___wmul@multiplier,c
  6347  00D7D4  0EFF               	movlw	255
  6348  00D7D6  202A               	addwfc	displayLogs@logNumber+1,w,c
  6349  00D7D8  6E02               	movwf	___wmul@multiplier+1,c
  6350  00D7DA  0E00               	movlw	0
  6351  00D7DC  6E04               	movwf	___wmul@multiplicand+1,c
  6352  00D7DE  0E23               	movlw	35
  6353  00D7E0  6E03               	movwf	___wmul@multiplicand,c
  6354  00D7E2  EC0D  F058         	call	___wmul	;wreg free
  6355  00D7E6  C001  F050         	movff	?___wmul,displayLogs@n
  6356  00D7EA  C002  F051         	movff	?___wmul+1,displayLogs@n+1
  6357                           
  6358                           ;standbyMode.c: 916: unsigned int year = readEEPROM(n);
  6359  00D7EE  5050               	movf	displayLogs@n,w,c
  6360  00D7F0  ECC5  F057         	call	_readEEPROM
  6361  00D7F4  6E2B               	movwf	??_displayLogs& (0+255),c
  6362  00D7F6  502B               	movf	??_displayLogs,w,c
  6363  00D7F8  6E2D               	movwf	displayLogs@year,c
  6364  00D7FA  6A2E               	clrf	displayLogs@year+1,c
  6365                           
  6366                           ;standbyMode.c: 917: unsigned int month = readEEPROM(1+n);
  6367  00D7FC  2850               	incf	displayLogs@n,w,c
  6368  00D7FE  ECC5  F057         	call	_readEEPROM
  6369  00D802  6E2B               	movwf	??_displayLogs& (0+255),c
  6370  00D804  502B               	movf	??_displayLogs,w,c
  6371  00D806  6E2F               	movwf	displayLogs@month,c
  6372  00D808  6A30               	clrf	displayLogs@month+1,c
  6373                           
  6374                           ;standbyMode.c: 918: unsigned int day = readEEPROM(2+n);
  6375  00D80A  5050               	movf	displayLogs@n,w,c
  6376  00D80C  0F02               	addlw	2
  6377  00D80E  ECC5  F057         	call	_readEEPROM
  6378  00D812  6E2B               	movwf	??_displayLogs& (0+255),c
  6379  00D814  502B               	movf	??_displayLogs,w,c
  6380  00D816  6E31               	movwf	displayLogs@day,c
  6381  00D818  6A32               	clrf	displayLogs@day+1,c
  6382                           
  6383                           ;standbyMode.c: 919: unsigned int operationTime = readEEPROM(3+n);
  6384  00D81A  5050               	movf	displayLogs@n,w,c
  6385  00D81C  0F03               	addlw	3
  6386  00D81E  ECC5  F057         	call	_readEEPROM
  6387  00D822  6E2B               	movwf	??_displayLogs& (0+255),c
  6388  00D824  502B               	movf	??_displayLogs,w,c
  6389  00D826  6E42               	movwf	displayLogs@operationTime,c
  6390  00D828  6A43               	clrf	displayLogs@operationTime+1,c
  6391                           
  6392                           ;standbyMode.c: 920: unsigned int roundPieces = readEEPROM(4+n);
  6393  00D82A  5050               	movf	displayLogs@n,w,c
  6394  00D82C  0F04               	addlw	4
  6395  00D82E  ECC5  F057         	call	_readEEPROM
  6396  00D832  6E2B               	movwf	??_displayLogs& (0+255),c
  6397  00D834  502B               	movf	??_displayLogs,w,c
  6398  00D836  6E33               	movwf	displayLogs@roundPieces,c
  6399  00D838  6A34               	clrf	displayLogs@roundPieces+1,c
  6400                           
  6401                           ;standbyMode.c: 921: unsigned int flatPieces = readEEPROM(5+n);
  6402  00D83A  5050               	movf	displayLogs@n,w,c
  6403  00D83C  0F05               	addlw	5
  6404  00D83E  ECC5  F057         	call	_readEEPROM
  6405  00D842  6E2B               	movwf	??_displayLogs& (0+255),c
  6406  00D844  502B               	movf	??_displayLogs,w,c
  6407  00D846  6E35               	movwf	displayLogs@flatPieces,c
  6408  00D848  6A36               	clrf	displayLogs@flatPieces+1,c
  6409                           
  6410                           ;standbyMode.c: 922: unsigned int longPieces = readEEPROM(6+n);
  6411  00D84A  5050               	movf	displayLogs@n,w,c
  6412  00D84C  0F06               	addlw	6
  6413  00D84E  ECC5  F057         	call	_readEEPROM
  6414  00D852  6E2B               	movwf	??_displayLogs& (0+255),c
  6415  00D854  502B               	movf	??_displayLogs,w,c
  6416  00D856  6E37               	movwf	displayLogs@longPieces,c
  6417  00D858  6A38               	clrf	displayLogs@longPieces+1,c
  6418                           
  6419                           ;standbyMode.c: 923: unsigned int markedDrawer1 = readEEPROM(7+n);
  6420  00D85A  5050               	movf	displayLogs@n,w,c
  6421  00D85C  0F07               	addlw	7
  6422  00D85E  ECC5  F057         	call	_readEEPROM
  6423  00D862  6E2B               	movwf	??_displayLogs& (0+255),c
  6424  00D864  502B               	movf	??_displayLogs,w,c
  6425  00D866  6E48               	movwf	displayLogs@markedDrawer1,c
  6426  00D868  6A49               	clrf	displayLogs@markedDrawer1+1,c
  6427                           
  6428                           ;standbyMode.c: 924: unsigned int markedDrawer2 = readEEPROM(8+n);
  6429  00D86A  5050               	movf	displayLogs@n,w,c
  6430  00D86C  0F08               	addlw	8
  6431  00D86E  ECC5  F057         	call	_readEEPROM
  6432  00D872  6E2B               	movwf	??_displayLogs& (0+255),c
  6433  00D874  502B               	movf	??_displayLogs,w,c
  6434  00D876  6E4A               	movwf	displayLogs@markedDrawer2,c
  6435  00D878  6A4B               	clrf	displayLogs@markedDrawer2+1,c
  6436                           
  6437                           ;standbyMode.c: 925: unsigned int markedDrawer3 = readEEPROM(9+n);
  6438  00D87A  5050               	movf	displayLogs@n,w,c
  6439  00D87C  0F09               	addlw	9
  6440  00D87E  ECC5  F057         	call	_readEEPROM
  6441  00D882  6E2B               	movwf	??_displayLogs& (0+255),c
  6442  00D884  502B               	movf	??_displayLogs,w,c
  6443  00D886  6E4C               	movwf	displayLogs@markedDrawer3,c
  6444  00D888  6A4D               	clrf	displayLogs@markedDrawer3+1,c
  6445                           
  6446                           ;standbyMode.c: 926: unsigned int markedDrawer4 = readEEPROM(10+n);
  6447  00D88A  5050               	movf	displayLogs@n,w,c
  6448  00D88C  0F0A               	addlw	10
  6449  00D88E  ECC5  F057         	call	_readEEPROM
  6450  00D892  6E2B               	movwf	??_displayLogs& (0+255),c
  6451  00D894  502B               	movf	??_displayLogs,w,c
  6452  00D896  6E4E               	movwf	displayLogs@markedDrawer4,c
  6453  00D898  6A4F               	clrf	displayLogs@markedDrawer4+1,c
  6454                           
  6455                           ;standbyMode.c: 927: unsigned int drawerNumber = readEEPROM(11+n);
  6456  00D89A  5050               	movf	displayLogs@n,w,c
  6457  00D89C  0F0B               	addlw	11
  6458  00D89E  ECC5  F057         	call	_readEEPROM
  6459  00D8A2  6E2B               	movwf	??_displayLogs& (0+255),c
  6460  00D8A4  502B               	movf	??_displayLogs,w,c
  6461  00D8A6  6E44               	movwf	displayLogs@drawerNumber,c
  6462  00D8A8  6A45               	clrf	displayLogs@drawerNumber+1,c
  6463                           
  6464                           ;standbyMode.c: 928: unsigned int dietType = readEEPROM(12+n);
  6465  00D8AA  5050               	movf	displayLogs@n,w,c
  6466  00D8AC  0F0C               	addlw	12
  6467  00D8AE  ECC5  F057         	call	_readEEPROM
  6468  00D8B2  6E2B               	movwf	??_displayLogs& (0+255),c
  6469  00D8B4  502B               	movf	??_displayLogs,w,c
  6470  00D8B6  6E3D               	movwf	displayLogs@dietType,c
  6471  00D8B8  6A3E               	clrf	displayLogs@dietType+1,c
  6472                           
  6473                           ;standbyMode.c: 929: unsigned int foodType = readEEPROM(13+n);
  6474  00D8BA  5050               	movf	displayLogs@n,w,c
  6475  00D8BC  0F0D               	addlw	13
  6476  00D8BE  ECC5  F057         	call	_readEEPROM
  6477  00D8C2  6E2B               	movwf	??_displayLogs& (0+255),c
  6478  00D8C4  502B               	movf	??_displayLogs,w,c
  6479  00D8C6  6E3F               	movwf	displayLogs@foodType,c
  6480  00D8C8  6A40               	clrf	displayLogs@foodType+1,c
  6481                           
  6482                           ;standbyMode.c: 930: unsigned int i = 0;
  6483  00D8CA  0E00               	movlw	0
  6484  00D8CC  6E47               	movwf	displayLogs@i+1,c
  6485  00D8CE  0E00               	movlw	0
  6486  00D8D0  6E46               	movwf	displayLogs@i,c
  6487                           
  6488                           ;standbyMode.c: 932: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6489  00D8D2  0E01               	movlw	1
  6490  00D8D4  ECBB  F057         	call	_lcdInst
  6491  00D8D8  0EC3               	movlw	195
  6492  00D8DA  6E2B               	movwf	??_displayLogs& (0+255),c
  6493  00D8DC  0ECD               	movlw	205
  6494  00D8DE                     u11897:
  6495  00D8DE  2EE8               	decfsz	wreg,f,c
  6496  00D8E0  D7FE               	bra	u11897
  6497  00D8E2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6498  00D8E4  D7FC               	bra	u11897
  6499  00D8E6  F000               	nop	
  6500                           
  6501                           ;standbyMode.c: 933: printf("Date:");
  6502  00D8E8  0EB2               	movlw	low STR_49
  6503  00D8EA  6E0D               	movwf	printf@f,c
  6504  00D8EC  0EFF               	movlw	high STR_49
  6505  00D8EE  6E0E               	movwf	printf@f+1,c
  6506  00D8F0  EC55  F067         	call	_printf	;wreg free
  6507                           
  6508                           ;standbyMode.c: 934: lcdInst(0xC0);;
  6509  00D8F4  0EC0               	movlw	192
  6510  00D8F6  ECBB  F057         	call	_lcdInst
  6511                           
  6512                           ;standbyMode.c: 935: printf("%02i/%02i/%02i", year, month, day);
  6513  00D8FA  0E69               	movlw	low STR_50
  6514  00D8FC  6E0D               	movwf	printf@f,c
  6515  00D8FE  0EFE               	movlw	high STR_50
  6516  00D900  6E0E               	movwf	printf@f+1,c
  6517  00D902  C02D  F00F         	movff	displayLogs@year,?_printf+2
  6518  00D906  C02E  F010         	movff	displayLogs@year+1,?_printf+3
  6519  00D90A  C02F  F011         	movff	displayLogs@month,?_printf+4
  6520  00D90E  C030  F012         	movff	displayLogs@month+1,?_printf+5
  6521  00D912  C031  F013         	movff	displayLogs@day,?_printf+6
  6522  00D916  C032  F014         	movff	displayLogs@day+1,?_printf+7
  6523  00D91A  EC55  F067         	call	_printf	;wreg free
  6524                           
  6525                           ;standbyMode.c: 936: _delay((unsigned long)((700)*(40000000/4000.0)));
  6526  00D91E  0E24               	movlw	36
  6527  00D920  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6528  00D922  0E83               	movlw	131
  6529  00D924  6E2B               	movwf	??_displayLogs& (0+255),c
  6530  00D926  0ECF               	movlw	207
  6531  00D928                     u11907:
  6532  00D928  2EE8               	decfsz	wreg,f,c
  6533  00D92A  D7FE               	bra	u11907
  6534  00D92C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6535  00D92E  D7FC               	bra	u11907
  6536  00D930  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6537  00D932  D7FA               	bra	u11907
  6538  00D934  F000               	nop	
  6539  00D936                     
  6540                           ;standbyMode.c: 938: continue;
  6541  00D936  A281               	btfss	3969,1,c	;volatile
  6542  00D938  D7FE               	goto	l674
  6543                           
  6544                           ;standbyMode.c: 939: }
  6545                           ;standbyMode.c: 941: unsigned int minutes = operationTime/60;
  6546  00D93A  C042  F001         	movff	displayLogs@operationTime,___lwdiv@dividend
  6547  00D93E  C043  F002         	movff	displayLogs@operationTime+1,___lwdiv@dividend+1
  6548  00D942  0E00               	movlw	0
  6549  00D944  6E04               	movwf	___lwdiv@divisor+1,c
  6550  00D946  0E3C               	movlw	60
  6551  00D948  6E03               	movwf	___lwdiv@divisor,c
  6552  00D94A  EC9B  F058         	call	___lwdiv	;wreg free
  6553  00D94E  C001  F039         	movff	?___lwdiv,displayLogs@minutes
  6554  00D952  C002  F03A         	movff	?___lwdiv+1,displayLogs@minutes+1
  6555                           
  6556                           ;standbyMode.c: 942: unsigned int seconds = operationTime%60;
  6557  00D956  C042  F008         	movff	displayLogs@operationTime,___lwmod@dividend
  6558  00D95A  C043  F009         	movff	displayLogs@operationTime+1,___lwmod@dividend+1
  6559  00D95E  0E00               	movlw	0
  6560  00D960  6E0B               	movwf	___lwmod@divisor+1,c
  6561  00D962  0E3C               	movlw	60
  6562  00D964  6E0A               	movwf	___lwmod@divisor,c
  6563  00D966  EC54  F058         	call	___lwmod	;wreg free
  6564  00D96A  C008  F03B         	movff	?___lwmod,displayLogs@seconds
  6565  00D96E  C009  F03C         	movff	?___lwmod+1,displayLogs@seconds+1
  6566                           
  6567                           ;standbyMode.c: 943: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6568  00D972  0E01               	movlw	1
  6569  00D974  ECBB  F057         	call	_lcdInst
  6570  00D978  0EC3               	movlw	195
  6571  00D97A  6E2B               	movwf	??_displayLogs& (0+255),c
  6572  00D97C  0ECD               	movlw	205
  6573  00D97E                     u11917:
  6574  00D97E  2EE8               	decfsz	wreg,f,c
  6575  00D980  D7FE               	bra	u11917
  6576  00D982  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6577  00D984  D7FC               	bra	u11917
  6578  00D986  F000               	nop	
  6579                           
  6580                           ;standbyMode.c: 944: printf("Operation time:");
  6581  00D988  0EBD               	movlw	low STR_51
  6582  00D98A  6E0D               	movwf	printf@f,c
  6583  00D98C  0EFD               	movlw	high STR_51
  6584  00D98E  6E0E               	movwf	printf@f+1,c
  6585  00D990  EC55  F067         	call	_printf	;wreg free
  6586                           
  6587                           ;standbyMode.c: 945: lcdInst(0xC0);;
  6588  00D994  0EC0               	movlw	192
  6589  00D996  ECBB  F057         	call	_lcdInst
  6590                           
  6591                           ;standbyMode.c: 946: printf("%i:%02i", minutes, seconds);
  6592  00D99A  0E8C               	movlw	low STR_52
  6593  00D99C  6E0D               	movwf	printf@f,c
  6594  00D99E  0EFF               	movlw	high STR_52
  6595  00D9A0  6E0E               	movwf	printf@f+1,c
  6596  00D9A2  C039  F00F         	movff	displayLogs@minutes,?_printf+2
  6597  00D9A6  C03A  F010         	movff	displayLogs@minutes+1,?_printf+3
  6598  00D9AA  C03B  F011         	movff	displayLogs@seconds,?_printf+4
  6599  00D9AE  C03C  F012         	movff	displayLogs@seconds+1,?_printf+5
  6600  00D9B2  EC55  F067         	call	_printf	;wreg free
  6601                           
  6602                           ;standbyMode.c: 947: _delay((unsigned long)((700)*(40000000/4000.0)));
  6603  00D9B6  0E24               	movlw	36
  6604  00D9B8  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6605  00D9BA  0E83               	movlw	131
  6606  00D9BC  6E2B               	movwf	??_displayLogs& (0+255),c
  6607  00D9BE  0ECF               	movlw	207
  6608  00D9C0                     u11927:
  6609  00D9C0  2EE8               	decfsz	wreg,f,c
  6610  00D9C2  D7FE               	bra	u11927
  6611  00D9C4  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6612  00D9C6  D7FC               	bra	u11927
  6613  00D9C8  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6614  00D9CA  D7FA               	bra	u11927
  6615  00D9CC  F000               	nop	
  6616  00D9CE                     
  6617                           ;standbyMode.c: 950: continue;
  6618  00D9CE  A281               	btfss	3969,1,c	;volatile
  6619  00D9D0  D7FE               	goto	l677
  6620                           
  6621                           ;standbyMode.c: 951: }
  6622                           ;standbyMode.c: 953: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6623  00D9D2  0E01               	movlw	1
  6624  00D9D4  ECBB  F057         	call	_lcdInst
  6625  00D9D8  0EC3               	movlw	195
  6626  00D9DA  6E2B               	movwf	??_displayLogs& (0+255),c
  6627  00D9DC  0ECD               	movlw	205
  6628  00D9DE                     u11937:
  6629  00D9DE  2EE8               	decfsz	wreg,f,c
  6630  00D9E0  D7FE               	bra	u11937
  6631  00D9E2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6632  00D9E4  D7FC               	bra	u11937
  6633  00D9E6  F000               	nop	
  6634                           
  6635                           ;standbyMode.c: 954: printf("Marked drawers:");
  6636  00D9E8  0ECD               	movlw	low STR_53
  6637  00D9EA  6E0D               	movwf	printf@f,c
  6638  00D9EC  0EFD               	movlw	high STR_53
  6639  00D9EE  6E0E               	movwf	printf@f+1,c
  6640  00D9F0  EC55  F067         	call	_printf	;wreg free
  6641                           
  6642                           ;standbyMode.c: 955: lcdInst(0xC0);;
  6643  00D9F4  0EC0               	movlw	192
  6644  00D9F6  ECBB  F057         	call	_lcdInst
  6645                           
  6646                           ;standbyMode.c: 957: if (markedDrawer4 == 0 && markedDrawer3 == 0 && markedDrawer2 == 0)
      +                          {
  6647  00D9FA  504E               	movf	displayLogs@markedDrawer4,w,c
  6648  00D9FC  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6649  00D9FE  A4D8               	btfss	status,2,c
  6650  00DA00  D01E               	goto	l679
  6651  00DA02  504C               	movf	displayLogs@markedDrawer3,w,c
  6652  00DA04  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6653  00DA06  A4D8               	btfss	status,2,c
  6654  00DA08  D01A               	goto	l679
  6655  00DA0A  504A               	movf	displayLogs@markedDrawer2,w,c
  6656  00DA0C  104B               	iorwf	displayLogs@markedDrawer2+1,w,c
  6657  00DA0E  A4D8               	btfss	status,2,c
  6658  00DA10  D016               	goto	l679
  6659                           
  6660                           ;standbyMode.c: 958: printf("%i", markedDrawer1);
  6661  00DA12  0E66               	movlw	low (STR_57+12)
  6662  00DA14  6E0D               	movwf	printf@f,c
  6663  00DA16  0EFE               	movlw	high (STR_57+12)
  6664  00DA18  6E0E               	movwf	printf@f+1,c
  6665  00DA1A  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6666  00DA1E  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6667  00DA22  EC55  F067         	call	_printf	;wreg free
  6668                           
  6669                           ;standbyMode.c: 959: _delay((unsigned long)((700)*(40000000/4000.0)));
  6670  00DA26  0E24               	movlw	36
  6671  00DA28  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6672  00DA2A  0E83               	movlw	131
  6673  00DA2C  6E2B               	movwf	??_displayLogs& (0+255),c
  6674  00DA2E  0ECF               	movlw	207
  6675  00DA30                     u11947:
  6676  00DA30  2EE8               	decfsz	wreg,f,c
  6677  00DA32  D7FE               	bra	u11947
  6678  00DA34  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6679  00DA36  D7FC               	bra	u11947
  6680  00DA38  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6681  00DA3A  D7FA               	bra	u11947
  6682  00DA3C  D065               	goto	L18
  6683  00DA3E                     l679:
  6684                           
  6685                           ;standbyMode.c: 962: else if (markedDrawer4 == 0 && markedDrawer3 == 0){
  6686  00DA3E  504E               	movf	displayLogs@markedDrawer4,w,c
  6687  00DA40  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6688  00DA42  A4D8               	btfss	status,2,c
  6689  00DA44  D01E               	goto	l681
  6690  00DA46  504C               	movf	displayLogs@markedDrawer3,w,c
  6691  00DA48  104D               	iorwf	displayLogs@markedDrawer3+1,w,c
  6692  00DA4A  A4D8               	btfss	status,2,c
  6693  00DA4C  D01A               	goto	l681
  6694                           
  6695                           ;standbyMode.c: 963: printf("%i, %i", markedDrawer1, markedDrawer2);
  6696  00DA4E  0E62               	movlw	low (STR_57+8)
  6697  00DA50  6E0D               	movwf	printf@f,c
  6698  00DA52  0EFE               	movlw	high (STR_57+8)
  6699  00DA54  6E0E               	movwf	printf@f+1,c
  6700  00DA56  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6701  00DA5A  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6702  00DA5E  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6703  00DA62  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6704  00DA66  EC55  F067         	call	_printf	;wreg free
  6705                           
  6706                           ;standbyMode.c: 964: _delay((unsigned long)((700)*(40000000/4000.0)));
  6707  00DA6A  0E24               	movlw	36
  6708  00DA6C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6709  00DA6E  0E83               	movlw	131
  6710  00DA70  6E2B               	movwf	??_displayLogs& (0+255),c
  6711  00DA72  0ECF               	movlw	207
  6712  00DA74                     u11957:
  6713  00DA74  2EE8               	decfsz	wreg,f,c
  6714  00DA76  D7FE               	bra	u11957
  6715  00DA78  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6716  00DA7A  D7FC               	bra	u11957
  6717  00DA7C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6718  00DA7E  D7FA               	bra	u11957
  6719  00DA80  D043               	goto	L18
  6720  00DA82                     l681:
  6721                           
  6722                           ;standbyMode.c: 967: else if (markedDrawer4 == 0){
  6723  00DA82  504E               	movf	displayLogs@markedDrawer4,w,c
  6724  00DA84  104F               	iorwf	displayLogs@markedDrawer4+1,w,c
  6725  00DA86  A4D8               	btfss	status,2,c
  6726  00DA88  D01E               	goto	l683
  6727                           
  6728                           ;standbyMode.c: 968: printf("%i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer3);
  6729  00DA8A  0E5E               	movlw	low (STR_57+4)
  6730  00DA8C  6E0D               	movwf	printf@f,c
  6731  00DA8E  0EFE               	movlw	high (STR_57+4)
  6732  00DA90  6E0E               	movwf	printf@f+1,c
  6733  00DA92  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6734  00DA96  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6735  00DA9A  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6736  00DA9E  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6737  00DAA2  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6738  00DAA6  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6739  00DAAA  EC55  F067         	call	_printf	;wreg free
  6740                           
  6741                           ;standbyMode.c: 969: _delay((unsigned long)((700)*(40000000/4000.0)));
  6742  00DAAE  0E24               	movlw	36
  6743  00DAB0  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6744  00DAB2  0E83               	movlw	131
  6745  00DAB4  6E2B               	movwf	??_displayLogs& (0+255),c
  6746  00DAB6  0ECF               	movlw	207
  6747  00DAB8                     u11967:
  6748  00DAB8  2EE8               	decfsz	wreg,f,c
  6749  00DABA  D7FE               	bra	u11967
  6750  00DABC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6751  00DABE  D7FC               	bra	u11967
  6752  00DAC0  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6753  00DAC2  D7FA               	bra	u11967
  6754  00DAC4  D021               	goto	L18
  6755  00DAC6                     l683:
  6756                           
  6757                           ;standbyMode.c: 972: else {
  6758                           ;standbyMode.c: 973: printf("%i, %i, %i, %i", markedDrawer1, markedDrawer2, markedDrawer
      +                          3, markedDrawer4);
  6759  00DAC6  0E5A               	movlw	low STR_57
  6760  00DAC8  6E0D               	movwf	printf@f,c
  6761  00DACA  0EFE               	movlw	high STR_57
  6762  00DACC  6E0E               	movwf	printf@f+1,c
  6763  00DACE  C048  F00F         	movff	displayLogs@markedDrawer1,?_printf+2
  6764  00DAD2  C049  F010         	movff	displayLogs@markedDrawer1+1,?_printf+3
  6765  00DAD6  C04A  F011         	movff	displayLogs@markedDrawer2,?_printf+4
  6766  00DADA  C04B  F012         	movff	displayLogs@markedDrawer2+1,?_printf+5
  6767  00DADE  C04C  F013         	movff	displayLogs@markedDrawer3,?_printf+6
  6768  00DAE2  C04D  F014         	movff	displayLogs@markedDrawer3+1,?_printf+7
  6769  00DAE6  C04E  F015         	movff	displayLogs@markedDrawer4,?_printf+8
  6770  00DAEA  C04F  F016         	movff	displayLogs@markedDrawer4+1,?_printf+9
  6771  00DAEE  EC55  F067         	call	_printf	;wreg free
  6772                           
  6773                           ;standbyMode.c: 974: _delay((unsigned long)((700)*(40000000/4000.0)));
  6774  00DAF2  0E24               	movlw	36
  6775  00DAF4  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6776  00DAF6  0E83               	movlw	131
  6777  00DAF8  6E2B               	movwf	??_displayLogs& (0+255),c
  6778  00DAFA  0ECF               	movlw	207
  6779  00DAFC                     u11977:
  6780  00DAFC  2EE8               	decfsz	wreg,f,c
  6781  00DAFE  D7FE               	bra	u11977
  6782  00DB00  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6783  00DB02  D7FC               	bra	u11977
  6784  00DB04  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6785  00DB06  D7FA               	bra	u11977
  6786  00DB08                     L18:
  6787  00DB08  F000               	nop	
  6788  00DB0A                     
  6789                           ;standbyMode.c: 978: continue;
  6790                           
  6791                           ;standbyMode.c: 975: }
  6792                           ;standbyMode.c: 977: while(PORTBbits.RB1 == 0){
  6793  00DB0A  A281               	btfss	3969,1,c	;volatile
  6794  00DB0C  D7FE               	goto	l684
  6795                           
  6796                           ;standbyMode.c: 979: }
  6797                           ;standbyMode.c: 981: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6798  00DB0E  0E01               	movlw	1
  6799  00DB10  ECBB  F057         	call	_lcdInst
  6800  00DB14  0EC3               	movlw	195
  6801  00DB16  6E2B               	movwf	??_displayLogs& (0+255),c
  6802  00DB18  0ECD               	movlw	205
  6803  00DB1A                     u11987:
  6804  00DB1A  2EE8               	decfsz	wreg,f,c
  6805  00DB1C  D7FE               	bra	u11987
  6806  00DB1E  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6807  00DB20  D7FC               	bra	u11987
  6808  00DB22  F000               	nop	
  6809                           
  6810                           ;standbyMode.c: 982: printf("Remaining pieces:");
  6811  00DB24  0E04               	movlw	low STR_58
  6812  00DB26  6E0D               	movwf	printf@f,c
  6813  00DB28  0EFD               	movlw	high STR_58
  6814  00DB2A  6E0E               	movwf	printf@f+1,c
  6815  00DB2C  EC55  F067         	call	_printf	;wreg free
  6816                           
  6817                           ;standbyMode.c: 983: lcdInst(0xC0);;
  6818  00DB30  0EC0               	movlw	192
  6819  00DB32  ECBB  F057         	call	_lcdInst
  6820                           
  6821                           ;standbyMode.c: 984: printf("R:%i  F:%i  L:%i", roundPieces, flatPieces, longPieces);
  6822  00DB36  0E5A               	movlw	low STR_59
  6823  00DB38  6E0D               	movwf	printf@f,c
  6824  00DB3A  0EFD               	movlw	high STR_59
  6825  00DB3C  6E0E               	movwf	printf@f+1,c
  6826  00DB3E  C033  F00F         	movff	displayLogs@roundPieces,?_printf+2
  6827  00DB42  C034  F010         	movff	displayLogs@roundPieces+1,?_printf+3
  6828  00DB46  C035  F011         	movff	displayLogs@flatPieces,?_printf+4
  6829  00DB4A  C036  F012         	movff	displayLogs@flatPieces+1,?_printf+5
  6830  00DB4E  C037  F013         	movff	displayLogs@longPieces,?_printf+6
  6831  00DB52  C038  F014         	movff	displayLogs@longPieces+1,?_printf+7
  6832  00DB56  EC55  F067         	call	_printf	;wreg free
  6833                           
  6834                           ;standbyMode.c: 985: _delay((unsigned long)((700)*(40000000/4000.0)));
  6835  00DB5A  0E24               	movlw	36
  6836  00DB5C  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6837  00DB5E  0E83               	movlw	131
  6838  00DB60  6E2B               	movwf	??_displayLogs& (0+255),c
  6839  00DB62  0ECF               	movlw	207
  6840  00DB64                     u11997:
  6841  00DB64  2EE8               	decfsz	wreg,f,c
  6842  00DB66  D7FE               	bra	u11997
  6843  00DB68  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6844  00DB6A  D7FC               	bra	u11997
  6845  00DB6C  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6846  00DB6E  D7FA               	bra	u11997
  6847  00DB70  F000               	nop	
  6848  00DB72                     
  6849                           ;standbyMode.c: 988: continue;
  6850  00DB72  A281               	btfss	3969,1,c	;volatile
  6851  00DB74  D7FE               	goto	l689
  6852                           
  6853                           ;standbyMode.c: 989: }
  6854                           ;standbyMode.c: 991: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6855  00DB76  0E01               	movlw	1
  6856  00DB78  ECBB  F057         	call	_lcdInst
  6857  00DB7C  0EC3               	movlw	195
  6858  00DB7E  6E2B               	movwf	??_displayLogs& (0+255),c
  6859  00DB80  0ECD               	movlw	205
  6860  00DB82                     u12007:
  6861  00DB82  2EE8               	decfsz	wreg,f,c
  6862  00DB84  D7FE               	bra	u12007
  6863  00DB86  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6864  00DB88  D7FC               	bra	u12007
  6865  00DB8A  F000               	nop	
  6866                           
  6867                           ;standbyMode.c: 992: printf("Input Summary:");
  6868  00DB8C  0E3C               	movlw	low STR_60
  6869  00DB8E  6E0D               	movwf	printf@f,c
  6870  00DB90  0EFE               	movlw	high STR_60
  6871  00DB92  6E0E               	movwf	printf@f+1,c
  6872  00DB94  EC55  F067         	call	_printf	;wreg free
  6873                           
  6874                           ;standbyMode.c: 993: _delay((unsigned long)((700)*(40000000/4000.0)));
  6875  00DB98  0E24               	movlw	36
  6876  00DB9A  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  6877  00DB9C  0E83               	movlw	131
  6878  00DB9E  6E2B               	movwf	??_displayLogs& (0+255),c
  6879  00DBA0  0ECF               	movlw	207
  6880  00DBA2                     u12017:
  6881  00DBA2  2EE8               	decfsz	wreg,f,c
  6882  00DBA4  D7FE               	bra	u12017
  6883  00DBA6  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6884  00DBA8  D7FC               	bra	u12017
  6885  00DBAA  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  6886  00DBAC  D7FA               	bra	u12017
  6887  00DBAE  F000               	nop	
  6888  00DBB0                     
  6889                           ;standbyMode.c: 996: continue;
  6890  00DBB0  A281               	btfss	3969,1,c	;volatile
  6891  00DBB2  D7FE               	goto	l692
  6892                           
  6893                           ;standbyMode.c: 997: }
  6894                           ;standbyMode.c: 999: for (i=0; i<8; i++){
  6895  00DBB4  0E00               	movlw	0
  6896  00DBB6  6E47               	movwf	displayLogs@i+1,c
  6897  00DBB8  0E00               	movlw	0
  6898  00DBBA  6E46               	movwf	displayLogs@i,c
  6899  00DBBC  5047               	movf	displayLogs@i+1,w,c
  6900  00DBBE  E105               	bnz	u7480
  6901  00DBC0  0E08               	movlw	8
  6902  00DBC2  5C46               	subwf	displayLogs@i,w,c
  6903  00DBC4  B0D8               	btfsc	status,0,c
  6904  00DBC6  D089               	goto	u7510
  6905  00DBC8  D001               	goto	l694
  6906  00DBCA                     u7480:
  6907  00DBCA  D087               	goto	u7510
  6908  00DBCC                     l694:
  6909                           
  6910                           ;standbyMode.c: 1000: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6911  00DBCC  0E01               	movlw	1
  6912  00DBCE  ECBB  F057         	call	_lcdInst
  6913  00DBD2  0EC3               	movlw	195
  6914  00DBD4  6E2B               	movwf	??_displayLogs& (0+255),c
  6915  00DBD6  0ECD               	movlw	205
  6916  00DBD8                     u12027:
  6917  00DBD8  2EE8               	decfsz	wreg,f,c
  6918  00DBDA  D7FE               	bra	u12027
  6919  00DBDC  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  6920  00DBDE  D7FC               	bra	u12027
  6921  00DBE0  F000               	nop	
  6922                           
  6923                           ;standbyMode.c: 1001: n = (logNumber-1)*35 + 3*i;
  6924  00DBE2  0EFF               	movlw	255
  6925  00DBE4  2429               	addwf	displayLogs@logNumber,w,c
  6926  00DBE6  6E01               	movwf	___wmul@multiplier,c
  6927  00DBE8  0EFF               	movlw	255
  6928  00DBEA  202A               	addwfc	displayLogs@logNumber+1,w,c
  6929  00DBEC  6E02               	movwf	___wmul@multiplier+1,c
  6930  00DBEE  0E00               	movlw	0
  6931  00DBF0  6E04               	movwf	___wmul@multiplicand+1,c
  6932  00DBF2  0E23               	movlw	35
  6933  00DBF4  6E03               	movwf	___wmul@multiplicand,c
  6934  00DBF6  EC0D  F058         	call	___wmul	;wreg free
  6935  00DBFA  C001  F02B         	movff	?___wmul,??_displayLogs
  6936  00DBFE  C002  F02C         	movff	?___wmul+1,??_displayLogs+1
  6937  00DC02  C046  F001         	movff	displayLogs@i,___wmul@multiplier
  6938  00DC06  C047  F002         	movff	displayLogs@i+1,___wmul@multiplier+1
  6939  00DC0A  0E00               	movlw	0
  6940  00DC0C  6E04               	movwf	___wmul@multiplicand+1,c
  6941  00DC0E  0E03               	movlw	3
  6942  00DC10  6E03               	movwf	___wmul@multiplicand,c
  6943  00DC12  EC0D  F058         	call	___wmul	;wreg free
  6944  00DC16  5001               	movf	?___wmul,w,c
  6945  00DC18  242B               	addwf	??_displayLogs,w,c
  6946  00DC1A  6E50               	movwf	displayLogs@n,c
  6947  00DC1C  5002               	movf	?___wmul+1,w,c
  6948  00DC1E  202C               	addwfc	??_displayLogs+1,w,c
  6949  00DC20  6E51               	movwf	displayLogs@n+1,c
  6950                           
  6951                           ;standbyMode.c: 1002: drawerNumber = readEEPROM(11+n);
  6952  00DC22  5050               	movf	displayLogs@n,w,c
  6953  00DC24  0F0B               	addlw	11
  6954  00DC26  ECC5  F057         	call	_readEEPROM
  6955  00DC2A  6E2B               	movwf	??_displayLogs& (0+255),c
  6956  00DC2C  502B               	movf	??_displayLogs,w,c
  6957  00DC2E  6E44               	movwf	displayLogs@drawerNumber,c
  6958  00DC30  6A45               	clrf	displayLogs@drawerNumber+1,c
  6959                           
  6960                           ;standbyMode.c: 1003: dietType = readEEPROM(12+n);
  6961  00DC32  5050               	movf	displayLogs@n,w,c
  6962  00DC34  0F0C               	addlw	12
  6963  00DC36  ECC5  F057         	call	_readEEPROM
  6964  00DC3A  6E2B               	movwf	??_displayLogs& (0+255),c
  6965  00DC3C  502B               	movf	??_displayLogs,w,c
  6966  00DC3E  6E3D               	movwf	displayLogs@dietType,c
  6967  00DC40  6A3E               	clrf	displayLogs@dietType+1,c
  6968                           
  6969                           ;standbyMode.c: 1004: foodType = readEEPROM(13+n);
  6970  00DC42  5050               	movf	displayLogs@n,w,c
  6971  00DC44  0F0D               	addlw	13
  6972  00DC46  ECC5  F057         	call	_readEEPROM
  6973  00DC4A  6E2B               	movwf	??_displayLogs& (0+255),c
  6974  00DC4C  502B               	movf	??_displayLogs,w,c
  6975  00DC4E  6E3F               	movwf	displayLogs@foodType,c
  6976  00DC50  6A40               	clrf	displayLogs@foodType+1,c
  6977                           
  6978                           ;standbyMode.c: 1005: if (drawerNumber != 0){
  6979  00DC52  5044               	movf	displayLogs@drawerNumber,w,c
  6980  00DC54  1045               	iorwf	displayLogs@drawerNumber+1,w,c
  6981  00DC56  B4D8               	btfsc	status,2,c
  6982  00DC58  D03B               	goto	u7500
  6983                           
  6984                           ;standbyMode.c: 1006: printf("Drawer %i:", drawerNumber);
  6985  00DC5A  0E3D               	movlw	low STR_61
  6986  00DC5C  6E0D               	movwf	printf@f,c
  6987  00DC5E  0EFF               	movlw	high STR_61
  6988  00DC60  6E0E               	movwf	printf@f+1,c
  6989  00DC62  C044  F00F         	movff	displayLogs@drawerNumber,?_printf+2
  6990  00DC66  C045  F010         	movff	displayLogs@drawerNumber+1,?_printf+3
  6991  00DC6A  EC55  F067         	call	_printf	;wreg free
  6992                           
  6993                           ;standbyMode.c: 1007: lcdInst(0xC0);;
  6994  00DC6E  0EC0               	movlw	192
  6995  00DC70  ECBB  F057         	call	_lcdInst
  6996                           
  6997                           ;standbyMode.c: 1008: printf("%s%s",inputs[dietType], foodInputs[foodType]);
  6998  00DC74  0ED6               	movlw	low STR_62
  6999  00DC76  6E0D               	movwf	printf@f,c
  7000  00DC78  0EFF               	movlw	high STR_62
  7001  00DC7A  6E0E               	movwf	printf@f+1,c
  7002  00DC7C  90D8               	bcf	status,0,c
  7003  00DC7E  343D               	rlcf	displayLogs@dietType,w,c
  7004  00DC80  6ED9               	movwf	fsr2l,c
  7005  00DC82  343E               	rlcf	displayLogs@dietType+1,w,c
  7006  00DC84  6EDA               	movwf	fsr2h,c
  7007  00DC86  0E40               	movlw	low _inputs
  7008  00DC88  26D9               	addwf	fsr2l,f,c
  7009  00DC8A  0E02               	movlw	high _inputs
  7010  00DC8C  22DA               	addwfc	fsr2h,f,c
  7011  00DC8E  CFDE F00F          	movff	postinc2,?_printf+2
  7012  00DC92  CFDD F010          	movff	postdec2,?_printf+3
  7013  00DC96  90D8               	bcf	status,0,c
  7014  00DC98  343F               	rlcf	displayLogs@foodType,w,c
  7015  00DC9A  6ED9               	movwf	fsr2l,c
  7016  00DC9C  3440               	rlcf	displayLogs@foodType+1,w,c
  7017  00DC9E  6EDA               	movwf	fsr2h,c
  7018  00DCA0  0E64               	movlw	low _foodInputs
  7019  00DCA2  26D9               	addwf	fsr2l,f,c
  7020  00DCA4  0E02               	movlw	high _foodInputs
  7021  00DCA6  22DA               	addwfc	fsr2h,f,c
  7022  00DCA8  CFDE F011          	movff	postinc2,?_printf+4
  7023  00DCAC  CFDD F012          	movff	postdec2,?_printf+5
  7024  00DCB0  EC55  F067         	call	_printf	;wreg free
  7025                           
  7026                           ;standbyMode.c: 1009: _delay((unsigned long)((700)*(40000000/4000.0)));
  7027  00DCB4  0E24               	movlw	36
  7028  00DCB6  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7029  00DCB8  0E83               	movlw	131
  7030  00DCBA  6E2B               	movwf	??_displayLogs& (0+255),c
  7031  00DCBC  0ECF               	movlw	207
  7032  00DCBE                     u12037:
  7033  00DCBE  2EE8               	decfsz	wreg,f,c
  7034  00DCC0  D7FE               	bra	u12037
  7035  00DCC2  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7036  00DCC4  D7FC               	bra	u12037
  7037  00DCC6  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7038  00DCC8  D7FA               	bra	u12037
  7039  00DCCA  F000               	nop	
  7040  00DCCC                     
  7041                           ;standbyMode.c: 1011: continue;
  7042  00DCCC  A281               	btfss	3969,1,c	;volatile
  7043  00DCCE  D7FE               	goto	l698
  7044  00DCD0                     u7500:
  7045  00DCD0  4A46               	infsnz	displayLogs@i,f,c
  7046  00DCD2  2A47               	incf	displayLogs@i+1,f,c
  7047  00DCD4  5047               	movf	displayLogs@i+1,w,c
  7048  00DCD6  E101               	bnz	l6466
  7049  00DCD8  D773               	goto	L19
  7050  00DCDA                     u7510:
  7051  00DCDA                     l6466:
  7052                           
  7053                           ;standbyMode.c: 1012: }
  7054                           ;standbyMode.c: 1013: }
  7055                           ;standbyMode.c: 1014: }
  7056                           ;standbyMode.c: 1016: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7057  00DCDA  0E01               	movlw	1
  7058  00DCDC  ECBB  F057         	call	_lcdInst
  7059  00DCE0  0EC3               	movlw	195
  7060  00DCE2  6E2B               	movwf	??_displayLogs& (0+255),c
  7061  00DCE4  0ECD               	movlw	205
  7062  00DCE6                     u12047:
  7063  00DCE6  2EE8               	decfsz	wreg,f,c
  7064  00DCE8  D7FE               	bra	u12047
  7065  00DCEA  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7066  00DCEC  D7FC               	bra	u12047
  7067  00DCEE  F000               	nop	
  7068                           
  7069                           ;standbyMode.c: 1017: printf("Another log?");
  7070  00DCF0  0EF7               	movlw	low STR_63
  7071  00DCF2  6E0D               	movwf	printf@f,c
  7072  00DCF4  0EFE               	movlw	high STR_63
  7073  00DCF6  6E0E               	movwf	printf@f+1,c
  7074  00DCF8  EC55  F067         	call	_printf	;wreg free
  7075                           
  7076                           ;standbyMode.c: 1018: lcdInst(0xC0);;
  7077  00DCFC  0EC0               	movlw	192
  7078  00DCFE  ECBB  F057         	call	_lcdInst
  7079                           
  7080                           ;standbyMode.c: 1019: printf("# = No, D = Yes");
  7081  00DD02  0E0D               	movlw	low STR_64
  7082  00DD04  6E0D               	movwf	printf@f,c
  7083  00DD06  0EFE               	movlw	high STR_64
  7084  00DD08  6E0E               	movwf	printf@f+1,c
  7085  00DD0A  EC55  F067         	call	_printf	;wreg free
  7086                           
  7087                           ;standbyMode.c: 1020: _delay((unsigned long)((700)*(40000000/4000.0)));
  7088  00DD0E  0E24               	movlw	36
  7089  00DD10  6E2C               	movwf	(??_displayLogs+1)& (0+255),c
  7090  00DD12  0E83               	movlw	131
  7091  00DD14  6E2B               	movwf	??_displayLogs& (0+255),c
  7092  00DD16  0ECF               	movlw	207
  7093  00DD18                     u12057:
  7094  00DD18  2EE8               	decfsz	wreg,f,c
  7095  00DD1A  D7FE               	bra	u12057
  7096  00DD1C  2E2B               	decfsz	??_displayLogs& (0+255),f,c
  7097  00DD1E  D7FC               	bra	u12057
  7098  00DD20  2E2C               	decfsz	(??_displayLogs+1)& (0+255),f,c
  7099  00DD22  D7FA               	bra	u12057
  7100  00DD24  F000               	nop	
  7101  00DD26  A281               	btfss	3969,1,c	;volatile
  7102  00DD28  D7FE               	goto	l701
  7103                           
  7104                           ;standbyMode.c: 1023: unsigned char keypress3 = (PORTB & 0xF0) >> 4;
  7105  00DD2A  3881               	swapf	3969,w,c	;volatile
  7106  00DD2C  0B0F               	andlw	15
  7107  00DD2E  0B0F               	andlw	15
  7108  00DD30  6E41               	movwf	displayLogs@keypress3,c
  7109  00DD32  B281               	btfsc	3969,1,c	;volatile
  7110  00DD34  D7FE               	goto	l704
  7111                           
  7112                           ;standbyMode.c: 1025: return keypress3;
  7113  00DD36  C041  F029         	movff	displayLogs@keypress3,?_displayLogs
  7114  00DD3A  6A2A               	clrf	?_displayLogs+1,c
  7115  00DD3C  0012               	return		;funcret
  7116  00DD3E                     __end_of_displayLogs:
  7117                           	opt stack 0
  7118                           tblptru	equ	0xFF8
  7119                           tblptrh	equ	0xFF7
  7120                           tblptrl	equ	0xFF6
  7121                           tablat	equ	0xFF5
  7122                           prodh	equ	0xFF4
  7123                           prodl	equ	0xFF3
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           postdec1	equ	0xFE5
  7127                           plusw1	equ	0xFE3
  7128                           fsr1l	equ	0xFE1
  7129                           indf2	equ	0xFDF
  7130                           postinc2	equ	0xFDE
  7131                           postdec2	equ	0xFDD
  7132                           plusw2	equ	0xFDB
  7133                           fsr2h	equ	0xFDA
  7134                           fsr2l	equ	0xFD9
  7135                           status	equ	0xFD8
  7136                           
  7137 ;; *************** function _shiftEEPROM *****************
  7138 ;; Defined at:
  7139 ;;		line 68 in file "EEPROMstorage.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  i               2    5[COMRAM] unsigned int 
  7144 ;;  temp            2    3[COMRAM] unsigned int 
  7145 ;; Return value:  Size  Location     Type
  7146 ;;                  1    wreg      void 
  7147 ;; Registers used:
  7148 ;;		wreg, status,2, status,0, cstack
  7149 ;; Tracked objects:
  7150 ;;		On entry : 0/0
  7151 ;;		On exit  : 0/0
  7152 ;;		Unchanged: 0/0
  7153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;Total ram usage:        5 bytes
  7159 ;; Hardware stack levels used:    1
  7160 ;; Hardware stack levels required when called:    1
  7161 ;; This function calls:
  7162 ;;		_readEEPROM
  7163 ;;		_writeEEPROM
  7164 ;; This function is called by:
  7165 ;;		_standbyMode
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text7
  7170  00B5AA                     __ptext7:
  7171                           	opt stack 0
  7172  00B5AA                     _shiftEEPROM:
  7173                           	opt stack 28
  7174                           
  7175                           ;EEPROMstorage.c: 69: unsigned int i = 0;
  7176                           
  7177                           ;incstack = 0
  7178  00B5AA  0E00               	movlw	0
  7179  00B5AC  6E07               	movwf	shiftEEPROM@i+1,c
  7180  00B5AE  0E00               	movlw	0
  7181  00B5B0  6E06               	movwf	shiftEEPROM@i,c
  7182                           
  7183                           ;EEPROMstorage.c: 70: unsigned int temp = 0;
  7184  00B5B2  0E00               	movlw	0
  7185  00B5B4  6E05               	movwf	shiftEEPROM@temp+1,c
  7186  00B5B6  0E00               	movlw	0
  7187  00B5B8  6E04               	movwf	shiftEEPROM@temp,c
  7188                           
  7189                           ;EEPROMstorage.c: 71: for (i=70; i<105; i++){
  7190  00B5BA  0E00               	movlw	0
  7191  00B5BC  6E07               	movwf	shiftEEPROM@i+1,c
  7192  00B5BE  0E46               	movlw	70
  7193  00B5C0  6E06               	movwf	shiftEEPROM@i,c
  7194  00B5C2                     l8072:
  7195  00B5C2  5007               	movf	shiftEEPROM@i+1,w,c
  7196  00B5C4  E114               	bnz	l8082
  7197  00B5C6  0E69               	movlw	105
  7198  00B5C8  5C06               	subwf	shiftEEPROM@i,w,c
  7199  00B5CA  B0D8               	btfsc	status,0,c
  7200  00B5CC  D010               	goto	u10410
  7201                           
  7202                           ;EEPROMstorage.c: 72: temp = readEEPROM(i);
  7203  00B5CE  5006               	movf	shiftEEPROM@i,w,c
  7204  00B5D0  ECC5  F057         	call	_readEEPROM
  7205  00B5D4  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7206  00B5D6  5003               	movf	??_shiftEEPROM,w,c
  7207  00B5D8  6E04               	movwf	shiftEEPROM@temp,c
  7208  00B5DA  6A05               	clrf	shiftEEPROM@temp+1,c
  7209                           
  7210                           ;EEPROMstorage.c: 73: writeEEPROM(i+35, temp);
  7211  00B5DC  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7212  00B5E0  5006               	movf	shiftEEPROM@i,w,c
  7213  00B5E2  0F23               	addlw	35
  7214  00B5E4  EC20  F058         	call	_writeEEPROM
  7215  00B5E8  4A06               	infsnz	shiftEEPROM@i,f,c
  7216  00B5EA  2A07               	incf	shiftEEPROM@i+1,f,c
  7217  00B5EC  D7EA               	goto	l8072
  7218  00B5EE                     u10410:
  7219  00B5EE                     l8082:
  7220                           
  7221                           ;EEPROMstorage.c: 74: }
  7222                           ;EEPROMstorage.c: 76: for (i=35; i<70; i++){
  7223  00B5EE  0E00               	movlw	0
  7224  00B5F0  6E07               	movwf	shiftEEPROM@i+1,c
  7225  00B5F2  0E23               	movlw	35
  7226  00B5F4  6E06               	movwf	shiftEEPROM@i,c
  7227  00B5F6                     l8084:
  7228  00B5F6  5007               	movf	shiftEEPROM@i+1,w,c
  7229  00B5F8  E114               	bnz	l8094
  7230  00B5FA  0E46               	movlw	70
  7231  00B5FC  5C06               	subwf	shiftEEPROM@i,w,c
  7232  00B5FE  B0D8               	btfsc	status,0,c
  7233  00B600  D010               	goto	u10430
  7234                           
  7235                           ;EEPROMstorage.c: 77: temp = readEEPROM(i);
  7236  00B602  5006               	movf	shiftEEPROM@i,w,c
  7237  00B604  ECC5  F057         	call	_readEEPROM
  7238  00B608  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7239  00B60A  5003               	movf	??_shiftEEPROM,w,c
  7240  00B60C  6E04               	movwf	shiftEEPROM@temp,c
  7241  00B60E  6A05               	clrf	shiftEEPROM@temp+1,c
  7242                           
  7243                           ;EEPROMstorage.c: 78: writeEEPROM(i+35, temp);
  7244  00B610  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7245  00B614  5006               	movf	shiftEEPROM@i,w,c
  7246  00B616  0F23               	addlw	35
  7247  00B618  EC20  F058         	call	_writeEEPROM
  7248  00B61C  4A06               	infsnz	shiftEEPROM@i,f,c
  7249  00B61E  2A07               	incf	shiftEEPROM@i+1,f,c
  7250  00B620  D7EA               	goto	l8084
  7251  00B622                     u10430:
  7252  00B622                     l8094:
  7253                           
  7254                           ;EEPROMstorage.c: 79: }
  7255                           ;EEPROMstorage.c: 81: for (i=0; i<35; i++){
  7256  00B622  0E00               	movlw	0
  7257  00B624  6E07               	movwf	shiftEEPROM@i+1,c
  7258  00B626  0E00               	movlw	0
  7259  00B628  6E06               	movwf	shiftEEPROM@i,c
  7260  00B62A                     l8096:
  7261  00B62A  5007               	movf	shiftEEPROM@i+1,w,c
  7262  00B62C  E114               	bnz	l1033
  7263  00B62E  0E23               	movlw	35
  7264  00B630  5C06               	subwf	shiftEEPROM@i,w,c
  7265  00B632  B0D8               	btfsc	status,0,c
  7266  00B634  0012               	return	
  7267                           
  7268                           ;EEPROMstorage.c: 82: temp = readEEPROM(i);
  7269  00B636  5006               	movf	shiftEEPROM@i,w,c
  7270  00B638  ECC5  F057         	call	_readEEPROM
  7271  00B63C  6E03               	movwf	??_shiftEEPROM& (0+255),c
  7272  00B63E  5003               	movf	??_shiftEEPROM,w,c
  7273  00B640  6E04               	movwf	shiftEEPROM@temp,c
  7274  00B642  6A05               	clrf	shiftEEPROM@temp+1,c
  7275                           
  7276                           ;EEPROMstorage.c: 83: writeEEPROM(i+35, temp);
  7277  00B644  C004  F001         	movff	shiftEEPROM@temp,writeEEPROM@data
  7278  00B648  5006               	movf	shiftEEPROM@i,w,c
  7279  00B64A  0F23               	addlw	35
  7280  00B64C  EC20  F058         	call	_writeEEPROM
  7281  00B650  4A06               	infsnz	shiftEEPROM@i,f,c
  7282  00B652  2A07               	incf	shiftEEPROM@i+1,f,c
  7283  00B654  D7EA               	goto	l8096
  7284  00B656                     l1033:
  7285  00B656  0012               	return		;funcret
  7286  00B658                     __end_of_shiftEEPROM:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           postdec1	equ	0xFE5
  7297                           plusw1	equ	0xFE3
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           plusw2	equ	0xFDB
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           
  7307 ;; *************** function _printFoodInput *****************
  7308 ;; Defined at:
  7309 ;;		line 839 in file "standbyMode.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  food            2    0[COMRAM] unsigned int 
  7312 ;; Auto vars:     Size  Location     Type
  7313 ;;		None
  7314 ;; Return value:  Size  Location     Type
  7315 ;;                  2    0[COMRAM] unsigned int 
  7316 ;; Registers used:
  7317 ;;		wreg, status,2, status,0
  7318 ;; Tracked objects:
  7319 ;;		On entry : 0/0
  7320 ;;		On exit  : 0/0
  7321 ;;		Unchanged: 0/0
  7322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7323 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;Total ram usage:        2 bytes
  7328 ;; Hardware stack levels used:    1
  7329 ;; This function calls:
  7330 ;;		Nothing
  7331 ;; This function is called by:
  7332 ;;		_standbyMode
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text8
  7337  00C710                     __ptext8:
  7338                           	opt stack 0
  7339  00C710                     _printFoodInput:
  7340                           	opt stack 29
  7341                           
  7342                           ;standbyMode.c: 842: if (food == 1 || food == 3 || food == 5){
  7343                           
  7344                           ;incstack = 0
  7345  00C710  0401               	decf	printFoodInput@food,w,c
  7346  00C712  1002               	iorwf	printFoodInput@food+1,w,c
  7347  00C714  B4D8               	btfsc	status,2,c
  7348  00C716  D00A               	goto	u8690
  7349  00C718  0E03               	movlw	3
  7350  00C71A  1801               	xorwf	printFoodInput@food,w,c
  7351  00C71C  1002               	iorwf	printFoodInput@food+1,w,c
  7352  00C71E  B4D8               	btfsc	status,2,c
  7353  00C720  D005               	goto	u8690
  7354  00C722  0E05               	movlw	5
  7355  00C724  1801               	xorwf	printFoodInput@food,w,c
  7356  00C726  1002               	iorwf	printFoodInput@food+1,w,c
  7357  00C728  A4D8               	btfss	status,2,c
  7358  00C72A  D005               	goto	l620
  7359  00C72C                     u8690:
  7360                           
  7361                           ;standbyMode.c: 843: return 0;
  7362  00C72C  0E00               	movlw	0
  7363  00C72E  6E02               	movwf	?_printFoodInput+1,c
  7364  00C730  0E00               	movlw	0
  7365  00C732  6E01               	movwf	?_printFoodInput,c
  7366                           
  7367                           ;standbyMode.c: 844: }
  7368  00C734  0012               	return	
  7369  00C736                     l620:
  7370                           
  7371                           ;standbyMode.c: 847: else if (food == 2 || food == 4 || food == 6){
  7372  00C736  0E02               	movlw	2
  7373  00C738  1801               	xorwf	printFoodInput@food,w,c
  7374  00C73A  1002               	iorwf	printFoodInput@food+1,w,c
  7375  00C73C  B4D8               	btfsc	status,2,c
  7376  00C73E  D00A               	goto	u8720
  7377  00C740  0E04               	movlw	4
  7378  00C742  1801               	xorwf	printFoodInput@food,w,c
  7379  00C744  1002               	iorwf	printFoodInput@food+1,w,c
  7380  00C746  B4D8               	btfsc	status,2,c
  7381  00C748  D005               	goto	u8720
  7382  00C74A  0E06               	movlw	6
  7383  00C74C  1801               	xorwf	printFoodInput@food,w,c
  7384  00C74E  1002               	iorwf	printFoodInput@food+1,w,c
  7385  00C750  A4D8               	btfss	status,2,c
  7386  00C752  D005               	goto	l625
  7387  00C754                     u8720:
  7388                           
  7389                           ;standbyMode.c: 848: return 1;
  7390  00C754  0E00               	movlw	0
  7391  00C756  6E02               	movwf	?_printFoodInput+1,c
  7392  00C758  0E01               	movlw	1
  7393  00C75A  6E01               	movwf	?_printFoodInput,c
  7394                           
  7395                           ;standbyMode.c: 849: }
  7396  00C75C  0012               	return	
  7397  00C75E                     l625:
  7398                           
  7399                           ;standbyMode.c: 852: else if (food == 7){
  7400  00C75E  0E07               	movlw	7
  7401  00C760  1801               	xorwf	printFoodInput@food,w,c
  7402  00C762  1002               	iorwf	printFoodInput@food+1,w,c
  7403  00C764  A4D8               	btfss	status,2,c
  7404  00C766  D005               	goto	l629
  7405                           
  7406                           ;standbyMode.c: 853: return 2;
  7407  00C768  0E00               	movlw	0
  7408  00C76A  6E02               	movwf	?_printFoodInput+1,c
  7409  00C76C  0E02               	movlw	2
  7410  00C76E  6E01               	movwf	?_printFoodInput,c
  7411                           
  7412                           ;standbyMode.c: 854: }
  7413  00C770  0012               	return	
  7414  00C772                     l629:
  7415                           
  7416                           ;standbyMode.c: 857: else if (food == 8 || food == 12 || food == 17){
  7417  00C772  0E08               	movlw	8
  7418  00C774  1801               	xorwf	printFoodInput@food,w,c
  7419  00C776  1002               	iorwf	printFoodInput@food+1,w,c
  7420  00C778  B4D8               	btfsc	status,2,c
  7421  00C77A  D00A               	goto	u8760
  7422  00C77C  0E0C               	movlw	12
  7423  00C77E  1801               	xorwf	printFoodInput@food,w,c
  7424  00C780  1002               	iorwf	printFoodInput@food+1,w,c
  7425  00C782  B4D8               	btfsc	status,2,c
  7426  00C784  D005               	goto	u8760
  7427  00C786  0E11               	movlw	17
  7428  00C788  1801               	xorwf	printFoodInput@food,w,c
  7429  00C78A  1002               	iorwf	printFoodInput@food+1,w,c
  7430  00C78C  A4D8               	btfss	status,2,c
  7431  00C78E  D005               	goto	l631
  7432  00C790                     u8760:
  7433                           
  7434                           ;standbyMode.c: 858: return 3;
  7435  00C790  0E00               	movlw	0
  7436  00C792  6E02               	movwf	?_printFoodInput+1,c
  7437  00C794  0E03               	movlw	3
  7438  00C796  6E01               	movwf	?_printFoodInput,c
  7439                           
  7440                           ;standbyMode.c: 859: }
  7441  00C798  0012               	return	
  7442  00C79A                     l631:
  7443                           
  7444                           ;standbyMode.c: 862: else if (food == 9 || food == 13 || food == 18){
  7445  00C79A  0E09               	movlw	9
  7446  00C79C  1801               	xorwf	printFoodInput@food,w,c
  7447  00C79E  1002               	iorwf	printFoodInput@food+1,w,c
  7448  00C7A0  B4D8               	btfsc	status,2,c
  7449  00C7A2  D00A               	goto	u8790
  7450  00C7A4  0E0D               	movlw	13
  7451  00C7A6  1801               	xorwf	printFoodInput@food,w,c
  7452  00C7A8  1002               	iorwf	printFoodInput@food+1,w,c
  7453  00C7AA  B4D8               	btfsc	status,2,c
  7454  00C7AC  D005               	goto	u8790
  7455  00C7AE  0E12               	movlw	18
  7456  00C7B0  1801               	xorwf	printFoodInput@food,w,c
  7457  00C7B2  1002               	iorwf	printFoodInput@food+1,w,c
  7458  00C7B4  A4D8               	btfss	status,2,c
  7459  00C7B6  D005               	goto	l635
  7460  00C7B8                     u8790:
  7461                           
  7462                           ;standbyMode.c: 863: return 4;
  7463  00C7B8  0E00               	movlw	0
  7464  00C7BA  6E02               	movwf	?_printFoodInput+1,c
  7465  00C7BC  0E04               	movlw	4
  7466  00C7BE  6E01               	movwf	?_printFoodInput,c
  7467                           
  7468                           ;standbyMode.c: 864: }
  7469  00C7C0  0012               	return	
  7470  00C7C2                     l635:
  7471                           
  7472                           ;standbyMode.c: 867: else if (food == 14 || food == 19){
  7473  00C7C2  0E0E               	movlw	14
  7474  00C7C4  1801               	xorwf	printFoodInput@food,w,c
  7475  00C7C6  1002               	iorwf	printFoodInput@food+1,w,c
  7476  00C7C8  B4D8               	btfsc	status,2,c
  7477  00C7CA  D005               	goto	u8810
  7478  00C7CC  0E13               	movlw	19
  7479  00C7CE  1801               	xorwf	printFoodInput@food,w,c
  7480  00C7D0  1002               	iorwf	printFoodInput@food+1,w,c
  7481  00C7D2  A4D8               	btfss	status,2,c
  7482  00C7D4  D005               	goto	l639
  7483  00C7D6                     u8810:
  7484                           
  7485                           ;standbyMode.c: 868: return 5;
  7486  00C7D6  0E00               	movlw	0
  7487  00C7D8  6E02               	movwf	?_printFoodInput+1,c
  7488  00C7DA  0E05               	movlw	5
  7489  00C7DC  6E01               	movwf	?_printFoodInput,c
  7490                           
  7491                           ;standbyMode.c: 869: }
  7492  00C7DE  0012               	return	
  7493  00C7E0                     l639:
  7494                           
  7495                           ;standbyMode.c: 872: else if (food == 10 || food == 15 || food == 20){
  7496  00C7E0  0E0A               	movlw	10
  7497  00C7E2  1801               	xorwf	printFoodInput@food,w,c
  7498  00C7E4  1002               	iorwf	printFoodInput@food+1,w,c
  7499  00C7E6  B4D8               	btfsc	status,2,c
  7500  00C7E8  D00A               	goto	u8840
  7501  00C7EA  0E0F               	movlw	15
  7502  00C7EC  1801               	xorwf	printFoodInput@food,w,c
  7503  00C7EE  1002               	iorwf	printFoodInput@food+1,w,c
  7504  00C7F0  B4D8               	btfsc	status,2,c
  7505  00C7F2  D005               	goto	u8840
  7506  00C7F4  0E14               	movlw	20
  7507  00C7F6  1801               	xorwf	printFoodInput@food,w,c
  7508  00C7F8  1002               	iorwf	printFoodInput@food+1,w,c
  7509  00C7FA  A4D8               	btfss	status,2,c
  7510  00C7FC  D005               	goto	l643
  7511  00C7FE                     u8840:
  7512                           
  7513                           ;standbyMode.c: 873: return 6;
  7514  00C7FE  0E00               	movlw	0
  7515  00C800  6E02               	movwf	?_printFoodInput+1,c
  7516  00C802  0E06               	movlw	6
  7517  00C804  6E01               	movwf	?_printFoodInput,c
  7518                           
  7519                           ;standbyMode.c: 874: }
  7520  00C806  0012               	return	
  7521  00C808                     l643:
  7522                           
  7523                           ;standbyMode.c: 877: else if (food == 11 || food == 16 || food == 21){
  7524  00C808  0E0B               	movlw	11
  7525  00C80A  1801               	xorwf	printFoodInput@food,w,c
  7526  00C80C  1002               	iorwf	printFoodInput@food+1,w,c
  7527  00C80E  B4D8               	btfsc	status,2,c
  7528  00C810  D00A               	goto	u8870
  7529  00C812  0E10               	movlw	16
  7530  00C814  1801               	xorwf	printFoodInput@food,w,c
  7531  00C816  1002               	iorwf	printFoodInput@food+1,w,c
  7532  00C818  B4D8               	btfsc	status,2,c
  7533  00C81A  D005               	goto	u8870
  7534  00C81C  0E15               	movlw	21
  7535  00C81E  1801               	xorwf	printFoodInput@food,w,c
  7536  00C820  1002               	iorwf	printFoodInput@food+1,w,c
  7537  00C822  A4D8               	btfss	status,2,c
  7538  00C824  D005               	goto	l647
  7539  00C826                     u8870:
  7540                           
  7541                           ;standbyMode.c: 878: return 7;
  7542  00C826  0E00               	movlw	0
  7543  00C828  6E02               	movwf	?_printFoodInput+1,c
  7544  00C82A  0E07               	movlw	7
  7545  00C82C  6E01               	movwf	?_printFoodInput,c
  7546                           
  7547                           ;standbyMode.c: 879: }
  7548  00C82E  0012               	return	
  7549  00C830                     l647:
  7550                           
  7551                           ;standbyMode.c: 882: else if (food == 22 || food == 24 || food == 26 || food == 28 || fo
      +                          od == 32 || food == 36 || food == 38){
  7552  00C830  0E16               	movlw	22
  7553  00C832  1801               	xorwf	printFoodInput@food,w,c
  7554  00C834  1002               	iorwf	printFoodInput@food+1,w,c
  7555  00C836  B4D8               	btfsc	status,2,c
  7556  00C838  D01E               	goto	u8940
  7557  00C83A  0E18               	movlw	24
  7558  00C83C  1801               	xorwf	printFoodInput@food,w,c
  7559  00C83E  1002               	iorwf	printFoodInput@food+1,w,c
  7560  00C840  B4D8               	btfsc	status,2,c
  7561  00C842  D019               	goto	u8940
  7562  00C844  0E1A               	movlw	26
  7563  00C846  1801               	xorwf	printFoodInput@food,w,c
  7564  00C848  1002               	iorwf	printFoodInput@food+1,w,c
  7565  00C84A  B4D8               	btfsc	status,2,c
  7566  00C84C  D014               	goto	u8940
  7567  00C84E  0E1C               	movlw	28
  7568  00C850  1801               	xorwf	printFoodInput@food,w,c
  7569  00C852  1002               	iorwf	printFoodInput@food+1,w,c
  7570  00C854  B4D8               	btfsc	status,2,c
  7571  00C856  D00F               	goto	u8940
  7572  00C858  0E20               	movlw	32
  7573  00C85A  1801               	xorwf	printFoodInput@food,w,c
  7574  00C85C  1002               	iorwf	printFoodInput@food+1,w,c
  7575  00C85E  B4D8               	btfsc	status,2,c
  7576  00C860  D00A               	goto	u8940
  7577  00C862  0E24               	movlw	36
  7578  00C864  1801               	xorwf	printFoodInput@food,w,c
  7579  00C866  1002               	iorwf	printFoodInput@food+1,w,c
  7580  00C868  B4D8               	btfsc	status,2,c
  7581  00C86A  D005               	goto	u8940
  7582  00C86C  0E26               	movlw	38
  7583  00C86E  1801               	xorwf	printFoodInput@food,w,c
  7584  00C870  1002               	iorwf	printFoodInput@food+1,w,c
  7585  00C872  A4D8               	btfss	status,2,c
  7586  00C874  D005               	goto	l651
  7587  00C876                     u8940:
  7588                           
  7589                           ;standbyMode.c: 883: return 8;
  7590  00C876  0E00               	movlw	0
  7591  00C878  6E02               	movwf	?_printFoodInput+1,c
  7592  00C87A  0E08               	movlw	8
  7593  00C87C  6E01               	movwf	?_printFoodInput,c
  7594                           
  7595                           ;standbyMode.c: 884: }
  7596  00C87E  0012               	return	
  7597  00C880                     l651:
  7598                           
  7599                           ;standbyMode.c: 887: else if (food == 23 || food == 25 || food == 29 || food == 33 || fo
      +                          od == 37 || food == 39){
  7600  00C880  0E17               	movlw	23
  7601  00C882  1801               	xorwf	printFoodInput@food,w,c
  7602  00C884  1002               	iorwf	printFoodInput@food+1,w,c
  7603  00C886  B4D8               	btfsc	status,2,c
  7604  00C888  D019               	goto	u9000
  7605  00C88A  0E19               	movlw	25
  7606  00C88C  1801               	xorwf	printFoodInput@food,w,c
  7607  00C88E  1002               	iorwf	printFoodInput@food+1,w,c
  7608  00C890  B4D8               	btfsc	status,2,c
  7609  00C892  D014               	goto	u9000
  7610  00C894  0E1D               	movlw	29
  7611  00C896  1801               	xorwf	printFoodInput@food,w,c
  7612  00C898  1002               	iorwf	printFoodInput@food+1,w,c
  7613  00C89A  B4D8               	btfsc	status,2,c
  7614  00C89C  D00F               	goto	u9000
  7615  00C89E  0E21               	movlw	33
  7616  00C8A0  1801               	xorwf	printFoodInput@food,w,c
  7617  00C8A2  1002               	iorwf	printFoodInput@food+1,w,c
  7618  00C8A4  B4D8               	btfsc	status,2,c
  7619  00C8A6  D00A               	goto	u9000
  7620  00C8A8  0E25               	movlw	37
  7621  00C8AA  1801               	xorwf	printFoodInput@food,w,c
  7622  00C8AC  1002               	iorwf	printFoodInput@food+1,w,c
  7623  00C8AE  B4D8               	btfsc	status,2,c
  7624  00C8B0  D005               	goto	u9000
  7625  00C8B2  0E27               	movlw	39
  7626  00C8B4  1801               	xorwf	printFoodInput@food,w,c
  7627  00C8B6  1002               	iorwf	printFoodInput@food+1,w,c
  7628  00C8B8  A4D8               	btfss	status,2,c
  7629  00C8BA  D005               	goto	l655
  7630  00C8BC                     u9000:
  7631                           
  7632                           ;standbyMode.c: 888: return 9;
  7633  00C8BC  0E00               	movlw	0
  7634  00C8BE  6E02               	movwf	?_printFoodInput+1,c
  7635  00C8C0  0E09               	movlw	9
  7636  00C8C2  6E01               	movwf	?_printFoodInput,c
  7637                           
  7638                           ;standbyMode.c: 889: }
  7639  00C8C4  0012               	return	
  7640  00C8C6                     l655:
  7641                           
  7642                           ;standbyMode.c: 892: else if (food == 30 || food == 34 || food == 40){
  7643  00C8C6  0E1E               	movlw	30
  7644  00C8C8  1801               	xorwf	printFoodInput@food,w,c
  7645  00C8CA  1002               	iorwf	printFoodInput@food+1,w,c
  7646  00C8CC  B4D8               	btfsc	status,2,c
  7647  00C8CE  D00A               	goto	u9030
  7648  00C8D0  0E22               	movlw	34
  7649  00C8D2  1801               	xorwf	printFoodInput@food,w,c
  7650  00C8D4  1002               	iorwf	printFoodInput@food+1,w,c
  7651  00C8D6  B4D8               	btfsc	status,2,c
  7652  00C8D8  D005               	goto	u9030
  7653  00C8DA  0E28               	movlw	40
  7654  00C8DC  1801               	xorwf	printFoodInput@food,w,c
  7655  00C8DE  1002               	iorwf	printFoodInput@food+1,w,c
  7656  00C8E0  A4D8               	btfss	status,2,c
  7657  00C8E2  D005               	goto	l659
  7658  00C8E4                     u9030:
  7659                           
  7660                           ;standbyMode.c: 893: return 10;
  7661  00C8E4  0E00               	movlw	0
  7662  00C8E6  6E02               	movwf	?_printFoodInput+1,c
  7663  00C8E8  0E0A               	movlw	10
  7664  00C8EA  6E01               	movwf	?_printFoodInput,c
  7665                           
  7666                           ;standbyMode.c: 894: }
  7667  00C8EC  0012               	return	
  7668  00C8EE                     l659:
  7669                           
  7670                           ;standbyMode.c: 897: else if (food == 27 || food == 31 || food == 35 || food == 41){
  7671  00C8EE  0E1B               	movlw	27
  7672  00C8F0  1801               	xorwf	printFoodInput@food,w,c
  7673  00C8F2  1002               	iorwf	printFoodInput@food+1,w,c
  7674  00C8F4  B4D8               	btfsc	status,2,c
  7675  00C8F6  D00F               	goto	u9070
  7676  00C8F8  0E1F               	movlw	31
  7677  00C8FA  1801               	xorwf	printFoodInput@food,w,c
  7678  00C8FC  1002               	iorwf	printFoodInput@food+1,w,c
  7679  00C8FE  B4D8               	btfsc	status,2,c
  7680  00C900  D00A               	goto	u9070
  7681  00C902  0E23               	movlw	35
  7682  00C904  1801               	xorwf	printFoodInput@food,w,c
  7683  00C906  1002               	iorwf	printFoodInput@food+1,w,c
  7684  00C908  B4D8               	btfsc	status,2,c
  7685  00C90A  D005               	goto	u9070
  7686  00C90C  0E29               	movlw	41
  7687  00C90E  1801               	xorwf	printFoodInput@food,w,c
  7688  00C910  1002               	iorwf	printFoodInput@food+1,w,c
  7689  00C912  A4D8               	btfss	status,2,c
  7690  00C914  D005               	goto	l663
  7691  00C916                     u9070:
  7692                           
  7693                           ;standbyMode.c: 898: return 11;
  7694  00C916  0E00               	movlw	0
  7695  00C918  6E02               	movwf	?_printFoodInput+1,c
  7696  00C91A  0E0B               	movlw	11
  7697  00C91C  6E01               	movwf	?_printFoodInput,c
  7698                           
  7699                           ;standbyMode.c: 899: }
  7700  00C91E  0012               	return	
  7701  00C920                     l663:
  7702                           
  7703                           ;standbyMode.c: 903: else if (food == 42 || food == 43 || food == 44 || food == 45 || fo
      +                          od == 46){
  7704  00C920  0E2A               	movlw	42
  7705  00C922  1801               	xorwf	printFoodInput@food,w,c
  7706  00C924  1002               	iorwf	printFoodInput@food+1,w,c
  7707  00C926  B4D8               	btfsc	status,2,c
  7708  00C928  D014               	goto	u9120
  7709  00C92A  0E2B               	movlw	43
  7710  00C92C  1801               	xorwf	printFoodInput@food,w,c
  7711  00C92E  1002               	iorwf	printFoodInput@food+1,w,c
  7712  00C930  B4D8               	btfsc	status,2,c
  7713  00C932  D00F               	goto	u9120
  7714  00C934  0E2C               	movlw	44
  7715  00C936  1801               	xorwf	printFoodInput@food,w,c
  7716  00C938  1002               	iorwf	printFoodInput@food+1,w,c
  7717  00C93A  B4D8               	btfsc	status,2,c
  7718  00C93C  D00A               	goto	u9120
  7719  00C93E  0E2D               	movlw	45
  7720  00C940  1801               	xorwf	printFoodInput@food,w,c
  7721  00C942  1002               	iorwf	printFoodInput@food+1,w,c
  7722  00C944  B4D8               	btfsc	status,2,c
  7723  00C946  D005               	goto	u9120
  7724  00C948  0E2E               	movlw	46
  7725  00C94A  1801               	xorwf	printFoodInput@food,w,c
  7726  00C94C  1002               	iorwf	printFoodInput@food+1,w,c
  7727  00C94E  A4D8               	btfss	status,2,c
  7728  00C950  D005               	goto	l667
  7729  00C952                     u9120:
  7730                           
  7731                           ;standbyMode.c: 904: return 12;
  7732  00C952  0E00               	movlw	0
  7733  00C954  6E02               	movwf	?_printFoodInput+1,c
  7734  00C956  0E0C               	movlw	12
  7735  00C958  6E01               	movwf	?_printFoodInput,c
  7736                           
  7737                           ;standbyMode.c: 905: }
  7738  00C95A  0012               	return	
  7739  00C95C                     l667:
  7740                           
  7741                           ;standbyMode.c: 907: else{
  7742                           ;standbyMode.c: 908: return 0;
  7743  00C95C  0E00               	movlw	0
  7744  00C95E  6E02               	movwf	?_printFoodInput+1,c
  7745  00C960  0E00               	movlw	0
  7746  00C962  6E01               	movwf	?_printFoodInput,c
  7747  00C964  0012               	return	
  7748  00C966                     __end_of_printFoodInput:
  7749                           	opt stack 0
  7750                           tblptru	equ	0xFF8
  7751                           tblptrh	equ	0xFF7
  7752                           tblptrl	equ	0xFF6
  7753                           tablat	equ	0xFF5
  7754                           prodh	equ	0xFF4
  7755                           prodl	equ	0xFF3
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           postdec1	equ	0xFE5
  7759                           plusw1	equ	0xFE3
  7760                           fsr1l	equ	0xFE1
  7761                           indf2	equ	0xFDF
  7762                           postinc2	equ	0xFDE
  7763                           postdec2	equ	0xFDD
  7764                           plusw2	equ	0xFDB
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _getRound *****************
  7770 ;; Defined at:
  7771 ;;		line 243 in file "standbyMode.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  code            2    0[COMRAM] unsigned int 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  returnValue     2    4[COMRAM] unsigned int 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  2    0[COMRAM] unsigned int 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        6 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_standbyMode
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           	psect	text9
  7799  00B9B4                     __ptext9:
  7800                           	opt stack 0
  7801  00B9B4                     _getRound:
  7802                           	opt stack 29
  7803                           
  7804                           ;standbyMode.c: 244: unsigned int returnValue = 0;
  7805                           
  7806                           ;incstack = 0
  7807  00B9B4  0E00               	movlw	0
  7808  00B9B6  6E06               	movwf	getRound@returnValue+1,c
  7809  00B9B8  0E00               	movlw	0
  7810  00B9BA  6E05               	movwf	getRound@returnValue,c
  7811                           
  7812                           ;standbyMode.c: 245: switch(code){
  7813  00B9BC  D00D               	goto	l475
  7814  00B9BE                     
  7815                           ;standbyMode.c: 253: returnValue = 2;
  7816  00B9BE  0E00               	movlw	0
  7817  00B9C0  6E06               	movwf	getRound@returnValue+1,c
  7818  00B9C2  0E02               	movlw	2
  7819  00B9C4                     L21:
  7820  00B9C4  6E05               	movwf	getRound@returnValue,c
  7821                           
  7822                           ;standbyMode.c: 259: break;
  7823  00B9C6  D069               	goto	l477
  7824  00B9C8                     
  7825                           ;standbyMode.c: 388: returnValue = 1;
  7826                           
  7827                           ;standbyMode.c: 387: case 45:
  7828                           
  7829                           ;standbyMode.c: 384: break;
  7830                           
  7831                           ;standbyMode.c: 383: returnValue = 1;
  7832                           
  7833                           ;standbyMode.c: 382: case 44:
  7834                           
  7835                           ;standbyMode.c: 379: break;
  7836                           
  7837                           ;standbyMode.c: 378: returnValue = 1;
  7838  00B9C8  0E00               	movlw	0
  7839  00B9CA  6E06               	movwf	getRound@returnValue+1,c
  7840  00B9CC  0E01               	movlw	1
  7841  00B9CE  D7FA               	goto	L21
  7842  00B9D0                     
  7843                           ;standbyMode.c: 392: returnValue = 0;
  7844  00B9D0  0E00               	movlw	0
  7845  00B9D2  6E06               	movwf	getRound@returnValue+1,c
  7846  00B9D4  0E00               	movlw	0
  7847  00B9D6  D7F6               	goto	L21
  7848  00B9D8                     l475:
  7849  00B9D8  C001  F003         	movff	getRound@code,??_getRound
  7850  00B9DC  C002  F004         	movff	getRound@code+1,??_getRound+1
  7851                           
  7852                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7853                           ; Switch size 1, requested type "space"
  7854                           ; Number of cases is 1, Range of values is 0 to 0
  7855                           ; switch strategies available:
  7856                           ; Name         Instructions Cycles
  7857                           ; simple_byte            4     3 (average)
  7858                           ;	Chosen strategy is simple_byte
  7859  00B9E0  5004               	movf	??_getRound+1,w,c
  7860  00B9E2  0A00               	xorlw	0	; case 0
  7861  00B9E4  A4D8               	btfss	status,2,c
  7862  00B9E6  D7F4               	goto	l506
  7863                           
  7864                           ; Switch size 1, requested type "space"
  7865                           ; Number of cases is 29, Range of values is 1 to 45
  7866                           ; switch strategies available:
  7867                           ; Name         Instructions Cycles
  7868                           ; simple_byte           88    45 (average)
  7869                           ;	Chosen strategy is simple_byte
  7870  00B9E8  5003               	movf	??_getRound,w,c
  7871  00B9EA  0A01               	xorlw	1	; case 1
  7872  00B9EC  B4D8               	btfsc	status,2,c
  7873  00B9EE  D7EC               	goto	l503
  7874  00B9F0  0A03               	xorlw	3	; case 2
  7875  00B9F2  B4D8               	btfsc	status,2,c
  7876  00B9F4  D7E4               	goto	l478
  7877  00B9F6  0A0A               	xorlw	10	; case 8
  7878  00B9F8  B4D8               	btfsc	status,2,c
  7879  00B9FA  D7E6               	goto	l503
  7880  00B9FC  0A01               	xorlw	1	; case 9
  7881  00B9FE  B4D8               	btfsc	status,2,c
  7882  00BA00  D7E3               	goto	l503
  7883  00BA02  0A03               	xorlw	3	; case 10
  7884  00BA04  B4D8               	btfsc	status,2,c
  7885  00BA06  D7DB               	goto	l478
  7886  00BA08  0A01               	xorlw	1	; case 11
  7887  00BA0A  B4D8               	btfsc	status,2,c
  7888  00BA0C  D7D8               	goto	l478
  7889  00BA0E  0A07               	xorlw	7	; case 12
  7890  00BA10  B4D8               	btfsc	status,2,c
  7891  00BA12  D7DA               	goto	l503
  7892  00BA14  0A01               	xorlw	1	; case 13
  7893  00BA16  B4D8               	btfsc	status,2,c
  7894  00BA18  D7D7               	goto	l503
  7895  00BA1A  0A03               	xorlw	3	; case 14
  7896  00BA1C  B4D8               	btfsc	status,2,c
  7897  00BA1E  D7D4               	goto	l503
  7898  00BA20  0A01               	xorlw	1	; case 15
  7899  00BA22  B4D8               	btfsc	status,2,c
  7900  00BA24  D7CC               	goto	l478
  7901  00BA26  0A1F               	xorlw	31	; case 16
  7902  00BA28  B4D8               	btfsc	status,2,c
  7903  00BA2A  D7C9               	goto	l478
  7904  00BA2C  0A06               	xorlw	6	; case 22
  7905  00BA2E  B4D8               	btfsc	status,2,c
  7906  00BA30  D7C6               	goto	l478
  7907  00BA32  0A01               	xorlw	1	; case 23
  7908  00BA34  B4D8               	btfsc	status,2,c
  7909  00BA36  D7C3               	goto	l478
  7910  00BA38  0A0F               	xorlw	15	; case 24
  7911  00BA3A  B4D8               	btfsc	status,2,c
  7912  00BA3C  D7C0               	goto	l478
  7913  00BA3E  0A01               	xorlw	1	; case 25
  7914  00BA40  B4D8               	btfsc	status,2,c
  7915  00BA42  D7BD               	goto	l478
  7916  00BA44  0A03               	xorlw	3	; case 26
  7917  00BA46  B4D8               	btfsc	status,2,c
  7918  00BA48  D7BF               	goto	l503
  7919  00BA4A  0A01               	xorlw	1	; case 27
  7920  00BA4C  B4D8               	btfsc	status,2,c
  7921  00BA4E  D7B7               	goto	l478
  7922  00BA50  0A07               	xorlw	7	; case 28
  7923  00BA52  B4D8               	btfsc	status,2,c
  7924  00BA54  D7B9               	goto	l503
  7925  00BA56  0A01               	xorlw	1	; case 29
  7926  00BA58  B4D8               	btfsc	status,2,c
  7927  00BA5A  D7B6               	goto	l503
  7928  00BA5C  0A03               	xorlw	3	; case 30
  7929  00BA5E  B4D8               	btfsc	status,2,c
  7930  00BA60  D7B3               	goto	l503
  7931  00BA62  0A01               	xorlw	1	; case 31
  7932  00BA64  B4D8               	btfsc	status,2,c
  7933  00BA66  D7AB               	goto	l478
  7934  00BA68  0A3F               	xorlw	63	; case 32
  7935  00BA6A  B4D8               	btfsc	status,2,c
  7936  00BA6C  D7AD               	goto	l503
  7937  00BA6E  0A01               	xorlw	1	; case 33
  7938  00BA70  B4D8               	btfsc	status,2,c
  7939  00BA72  D7AA               	goto	l503
  7940  00BA74  0A03               	xorlw	3	; case 34
  7941  00BA76  B4D8               	btfsc	status,2,c
  7942  00BA78  D7A7               	goto	l503
  7943  00BA7A  0A01               	xorlw	1	; case 35
  7944  00BA7C  B4D8               	btfsc	status,2,c
  7945  00BA7E  D79F               	goto	l478
  7946  00BA80  0A09               	xorlw	9	; case 42
  7947  00BA82  B4D8               	btfsc	status,2,c
  7948  00BA84  D79C               	goto	l478
  7949  00BA86  0A01               	xorlw	1	; case 43
  7950  00BA88  B4D8               	btfsc	status,2,c
  7951  00BA8A  D79E               	goto	l503
  7952  00BA8C  0A07               	xorlw	7	; case 44
  7953  00BA8E  B4D8               	btfsc	status,2,c
  7954  00BA90  D79B               	goto	l503
  7955  00BA92  0A01               	xorlw	1	; case 45
  7956  00BA94  B4D8               	btfsc	status,2,c
  7957  00BA96  D798               	goto	l503
  7958  00BA98  D79B               	goto	l506
  7959  00BA9A                     l477:
  7960                           
  7961                           ;standbyMode.c: 395: return returnValue;
  7962  00BA9A  C005  F001         	movff	getRound@returnValue,?_getRound
  7963  00BA9E  C006  F002         	movff	getRound@returnValue+1,?_getRound+1
  7964  00BAA2  0012               	return		;funcret
  7965  00BAA4                     __end_of_getRound:
  7966                           	opt stack 0
  7967                           tblptru	equ	0xFF8
  7968                           tblptrh	equ	0xFF7
  7969                           tblptrl	equ	0xFF6
  7970                           tablat	equ	0xFF5
  7971                           prodh	equ	0xFF4
  7972                           prodl	equ	0xFF3
  7973                           postinc0	equ	0xFEE
  7974                           wreg	equ	0xFE8
  7975                           postdec1	equ	0xFE5
  7976                           plusw1	equ	0xFE3
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           plusw2	equ	0xFDB
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _getLong *****************
  7987 ;; Defined at:
  7988 ;;		line 556 in file "standbyMode.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  code            2    0[COMRAM] unsigned int 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  returnValue     2    4[COMRAM] unsigned int 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  2    0[COMRAM] unsigned int 
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, status,0
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;Total ram usage:        6 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_standbyMode
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text10
  8016  00BBBA                     __ptext10:
  8017                           	opt stack 0
  8018  00BBBA                     _getLong:
  8019                           	opt stack 29
  8020                           
  8021                           ;standbyMode.c: 557: unsigned int returnValue = 0;
  8022                           
  8023                           ;incstack = 0
  8024  00BBBA  0E00               	movlw	0
  8025  00BBBC  6E06               	movwf	getLong@returnValue+1,c
  8026  00BBBE  0E00               	movlw	0
  8027  00BBC0  6E05               	movwf	getLong@returnValue,c
  8028                           
  8029                           ;standbyMode.c: 559: switch(code){
  8030  00BBC2  D011               	goto	l545
  8031  00BBC4                     
  8032                           ;standbyMode.c: 577: returnValue = 1;
  8033  00BBC4  0E00               	movlw	0
  8034  00BBC6  6E06               	movwf	getLong@returnValue+1,c
  8035  00BBC8  0E01               	movlw	1
  8036  00BBCA  D007               	goto	L35
  8037  00BBCC                     l554:
  8038                           
  8039                           ;standbyMode.c: 607: returnValue = 2;
  8040                           
  8041                           ;standbyMode.c: 606: case 18:
  8042                           
  8043                           ;standbyMode.c: 603: break;
  8044                           
  8045                           ;standbyMode.c: 602: returnValue = 1;
  8046                           
  8047                           ;standbyMode.c: 601: case 17:
  8048                           
  8049                           ;standbyMode.c: 598: break;
  8050                           
  8051                           ;standbyMode.c: 597: returnValue = 2;
  8052  00BBCC  0E00               	movlw	0
  8053  00BBCE  6E06               	movwf	getLong@returnValue+1,c
  8054  00BBD0  0E02               	movlw	2
  8055  00BBD2  D003               	goto	L35
  8056  00BBD4                     l557:
  8057                           
  8058                           ;standbyMode.c: 612: returnValue = 3;
  8059  00BBD4  0E00               	movlw	0
  8060  00BBD6  6E06               	movwf	getLong@returnValue+1,c
  8061  00BBD8  0E03               	movlw	3
  8062  00BBDA                     L35:
  8063  00BBDA  6E05               	movwf	getLong@returnValue,c
  8064                           
  8065                           ;standbyMode.c: 633: break;
  8066  00BBDC  D074               	goto	l547
  8067  00BBDE                     
  8068                           ;standbyMode.c: 731: returnValue = 0;
  8069  00BBDE  0E00               	movlw	0
  8070  00BBE0  6E06               	movwf	getLong@returnValue+1,c
  8071  00BBE2  0E00               	movlw	0
  8072  00BBE4  D7FA               	goto	L35
  8073  00BBE6                     l545:
  8074  00BBE6  C001  F003         	movff	getLong@code,??_getLong
  8075  00BBEA  C002  F004         	movff	getLong@code+1,??_getLong+1
  8076                           
  8077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8078                           ; Switch size 1, requested type "space"
  8079                           ; Number of cases is 1, Range of values is 0 to 0
  8080                           ; switch strategies available:
  8081                           ; Name         Instructions Cycles
  8082                           ; simple_byte            4     3 (average)
  8083                           ;	Chosen strategy is simple_byte
  8084  00BBEE  5004               	movf	??_getLong+1,w,c
  8085  00BBF0  0A00               	xorlw	0	; case 0
  8086  00BBF2  A4D8               	btfss	status,2,c
  8087  00BBF4  D7F4               	goto	l581
  8088                           
  8089                           ; Switch size 1, requested type "space"
  8090                           ; Number of cases is 34, Range of values is 5 to 46
  8091                           ; switch strategies available:
  8092                           ; Name         Instructions Cycles
  8093                           ; simple_byte          103    52 (average)
  8094                           ;	Chosen strategy is simple_byte
  8095  00BBF6  5003               	movf	??_getLong,w,c
  8096  00BBF8  0A05               	xorlw	5	; case 5
  8097  00BBFA  B4D8               	btfsc	status,2,c
  8098  00BBFC  D7E3               	goto	l550
  8099  00BBFE  0A03               	xorlw	3	; case 6
  8100  00BC00  B4D8               	btfsc	status,2,c
  8101  00BC02  D7E4               	goto	l554
  8102  00BC04  0A01               	xorlw	1	; case 7
  8103  00BC06  B4D8               	btfsc	status,2,c
  8104  00BC08  D7E5               	goto	l557
  8105  00BC0A  0A0B               	xorlw	11	; case 12
  8106  00BC0C  B4D8               	btfsc	status,2,c
  8107  00BC0E  D7DA               	goto	l550
  8108  00BC10  0A01               	xorlw	1	; case 13
  8109  00BC12  B4D8               	btfsc	status,2,c
  8110  00BC14  D7DB               	goto	l554
  8111  00BC16  0A03               	xorlw	3	; case 14
  8112  00BC18  B4D8               	btfsc	status,2,c
  8113  00BC1A  D7DC               	goto	l557
  8114  00BC1C  0A01               	xorlw	1	; case 15
  8115  00BC1E  B4D8               	btfsc	status,2,c
  8116  00BC20  D7D1               	goto	l550
  8117  00BC22  0A1F               	xorlw	31	; case 16
  8118  00BC24  B4D8               	btfsc	status,2,c
  8119  00BC26  D7D2               	goto	l554
  8120  00BC28  0A01               	xorlw	1	; case 17
  8121  00BC2A  B4D8               	btfsc	status,2,c
  8122  00BC2C  D7CB               	goto	l550
  8123  00BC2E  0A03               	xorlw	3	; case 18
  8124  00BC30  B4D8               	btfsc	status,2,c
  8125  00BC32  D7CC               	goto	l554
  8126  00BC34  0A01               	xorlw	1	; case 19
  8127  00BC36  B4D8               	btfsc	status,2,c
  8128  00BC38  D7CD               	goto	l557
  8129  00BC3A  0A07               	xorlw	7	; case 20
  8130  00BC3C  B4D8               	btfsc	status,2,c
  8131  00BC3E  D7C2               	goto	l550
  8132  00BC40  0A01               	xorlw	1	; case 21
  8133  00BC42  B4D8               	btfsc	status,2,c
  8134  00BC44  D7C3               	goto	l554
  8135  00BC46  0A0D               	xorlw	13	; case 24
  8136  00BC48  B4D8               	btfsc	status,2,c
  8137  00BC4A  D7BC               	goto	l550
  8138  00BC4C  0A01               	xorlw	1	; case 25
  8139  00BC4E  B4D8               	btfsc	status,2,c
  8140  00BC50  D7BD               	goto	l554
  8141  00BC52  0A05               	xorlw	5	; case 28
  8142  00BC54  B4D8               	btfsc	status,2,c
  8143  00BC56  D7BA               	goto	l554
  8144  00BC58  0A01               	xorlw	1	; case 29
  8145  00BC5A  B4D8               	btfsc	status,2,c
  8146  00BC5C  D7BB               	goto	l557
  8147  00BC5E  0A03               	xorlw	3	; case 30
  8148  00BC60  B4D8               	btfsc	status,2,c
  8149  00BC62  D7B8               	goto	l557
  8150  00BC64  0A01               	xorlw	1	; case 31
  8151  00BC66  B4D8               	btfsc	status,2,c
  8152  00BC68  D7B1               	goto	l554
  8153  00BC6A  0A3F               	xorlw	63	; case 32
  8154  00BC6C  B4D8               	btfsc	status,2,c
  8155  00BC6E  D7AA               	goto	l550
  8156  00BC70  0A01               	xorlw	1	; case 33
  8157  00BC72  B4D8               	btfsc	status,2,c
  8158  00BC74  D7AB               	goto	l554
  8159  00BC76  0A03               	xorlw	3	; case 34
  8160  00BC78  B4D8               	btfsc	status,2,c
  8161  00BC7A  D7A4               	goto	l550
  8162  00BC7C  0A01               	xorlw	1	; case 35
  8163  00BC7E  B4D8               	btfsc	status,2,c
  8164  00BC80  D7A1               	goto	l550
  8165  00BC82  0A07               	xorlw	7	; case 36
  8166  00BC84  B4D8               	btfsc	status,2,c
  8167  00BC86  D79E               	goto	l550
  8168  00BC88  0A01               	xorlw	1	; case 37
  8169  00BC8A  B4D8               	btfsc	status,2,c
  8170  00BC8C  D79F               	goto	l554
  8171  00BC8E  0A03               	xorlw	3	; case 38
  8172  00BC90  B4D8               	btfsc	status,2,c
  8173  00BC92  D79C               	goto	l554
  8174  00BC94  0A01               	xorlw	1	; case 39
  8175  00BC96  B4D8               	btfsc	status,2,c
  8176  00BC98  D79D               	goto	l557
  8177  00BC9A  0A0F               	xorlw	15	; case 40
  8178  00BC9C  B4D8               	btfsc	status,2,c
  8179  00BC9E  D79A               	goto	l557
  8180  00BCA0  0A01               	xorlw	1	; case 41
  8181  00BCA2  B4D8               	btfsc	status,2,c
  8182  00BCA4  D793               	goto	l554
  8183  00BCA6  0A03               	xorlw	3	; case 42
  8184  00BCA8  B4D8               	btfsc	status,2,c
  8185  00BCAA  D78C               	goto	l550
  8186  00BCAC  0A01               	xorlw	1	; case 43
  8187  00BCAE  B4D8               	btfsc	status,2,c
  8188  00BCB0  D789               	goto	l550
  8189  00BCB2  0A07               	xorlw	7	; case 44
  8190  00BCB4  B4D8               	btfsc	status,2,c
  8191  00BCB6  D78A               	goto	l554
  8192  00BCB8  0A01               	xorlw	1	; case 45
  8193  00BCBA  B4D8               	btfsc	status,2,c
  8194  00BCBC  D78B               	goto	l557
  8195  00BCBE  0A03               	xorlw	3	; case 46
  8196  00BCC0  B4D8               	btfsc	status,2,c
  8197  00BCC2  D788               	goto	l557
  8198  00BCC4  D78C               	goto	l581
  8199  00BCC6                     l547:
  8200                           
  8201                           ;standbyMode.c: 734: return returnValue;
  8202  00BCC6  C005  F001         	movff	getLong@returnValue,?_getLong
  8203  00BCCA  C006  F002         	movff	getLong@returnValue+1,?_getLong+1
  8204  00BCCE  0012               	return		;funcret
  8205  00BCD0                     __end_of_getLong:
  8206                           	opt stack 0
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           postinc0	equ	0xFEE
  8214                           wreg	equ	0xFE8
  8215                           postdec1	equ	0xFE5
  8216                           plusw1	equ	0xFE3
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           plusw2	equ	0xFDB
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _getFlat *****************
  8227 ;; Defined at:
  8228 ;;		line 399 in file "standbyMode.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  code            2    0[COMRAM] unsigned int 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  returnValue     2    4[COMRAM] unsigned int 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2    0[COMRAM] unsigned int 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        6 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; This function calls:
  8249 ;;		Nothing
  8250 ;; This function is called by:
  8251 ;;		_standbyMode
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text11
  8256  00B8C4                     __ptext11:
  8257                           	opt stack 0
  8258  00B8C4                     _getFlat:
  8259                           	opt stack 29
  8260                           
  8261                           ;standbyMode.c: 400: unsigned int returnValue = 0;
  8262                           
  8263                           ;incstack = 0
  8264  00B8C4  0E00               	movlw	0
  8265  00B8C6  6E06               	movwf	getFlat@returnValue+1,c
  8266  00B8C8  0E00               	movlw	0
  8267  00B8CA  6E05               	movwf	getFlat@returnValue,c
  8268                           
  8269                           ;standbyMode.c: 402: switch(code){
  8270  00B8CC  D00D               	goto	l510
  8271  00B8CE                     
  8272                           ;standbyMode.c: 405: returnValue = 1;
  8273  00B8CE  0E00               	movlw	0
  8274  00B8D0  6E06               	movwf	getFlat@returnValue+1,c
  8275  00B8D2  0E01               	movlw	1
  8276  00B8D4  D003               	goto	L41
  8277  00B8D6                     
  8278                           ;standbyMode.c: 430: returnValue = 2;
  8279                           
  8280                           ;standbyMode.c: 429: case 11:
  8281                           
  8282                           ;standbyMode.c: 426: break;
  8283                           
  8284                           ;standbyMode.c: 425: returnValue = 1;
  8285                           
  8286                           ;standbyMode.c: 424: case 10:
  8287                           
  8288                           ;standbyMode.c: 421: break;
  8289                           
  8290                           ;standbyMode.c: 420: returnValue = 2;
  8291                           
  8292                           ;standbyMode.c: 419: case 9:
  8293                           
  8294                           ;standbyMode.c: 416: break;
  8295                           
  8296                           ;standbyMode.c: 415: returnValue = 1;
  8297                           
  8298                           ;standbyMode.c: 414: case 8:
  8299                           
  8300                           ;standbyMode.c: 411: break;
  8301                           
  8302                           ;standbyMode.c: 410: returnValue = 2;
  8303  00B8D6  0E00               	movlw	0
  8304  00B8D8  6E06               	movwf	getFlat@returnValue+1,c
  8305  00B8DA  0E02               	movlw	2
  8306  00B8DC                     L41:
  8307  00B8DC  6E05               	movwf	getFlat@returnValue,c
  8308                           
  8309                           ;standbyMode.c: 436: break;
  8310  00B8DE  D065               	goto	l512
  8311  00B8E0                     
  8312                           ;standbyMode.c: 549: returnValue = 0;
  8313  00B8E0  0E00               	movlw	0
  8314  00B8E2  6E06               	movwf	getFlat@returnValue+1,c
  8315  00B8E4  0E00               	movlw	0
  8316  00B8E6  D7FA               	goto	L41
  8317  00B8E8                     l510:
  8318  00B8E8  C001  F003         	movff	getFlat@code,??_getFlat
  8319  00B8EC  C002  F004         	movff	getFlat@code+1,??_getFlat+1
  8320                           
  8321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8322                           ; Switch size 1, requested type "space"
  8323                           ; Number of cases is 1, Range of values is 0 to 0
  8324                           ; switch strategies available:
  8325                           ; Name         Instructions Cycles
  8326                           ; simple_byte            4     3 (average)
  8327                           ;	Chosen strategy is simple_byte
  8328  00B8F0  5004               	movf	??_getFlat+1,w,c
  8329  00B8F2  0A00               	xorlw	0	; case 0
  8330  00B8F4  A4D8               	btfss	status,2,c
  8331  00B8F6  D7F4               	goto	l541
  8332                           
  8333                           ; Switch size 1, requested type "space"
  8334                           ; Number of cases is 29, Range of values is 3 to 46
  8335                           ; switch strategies available:
  8336                           ; Name         Instructions Cycles
  8337                           ; simple_byte           88    45 (average)
  8338                           ;	Chosen strategy is simple_byte
  8339  00B8F8  5003               	movf	??_getFlat,w,c
  8340  00B8FA  0A03               	xorlw	3	; case 3
  8341  00B8FC  B4D8               	btfsc	status,2,c
  8342  00B8FE  D7E7               	goto	l511
  8343  00B900  0A07               	xorlw	7	; case 4
  8344  00B902  B4D8               	btfsc	status,2,c
  8345  00B904  D7E8               	goto	l513
  8346  00B906  0A0C               	xorlw	12	; case 8
  8347  00B908  B4D8               	btfsc	status,2,c
  8348  00B90A  D7E1               	goto	l511
  8349  00B90C  0A01               	xorlw	1	; case 9
  8350  00B90E  B4D8               	btfsc	status,2,c
  8351  00B910  D7E2               	goto	l513
  8352  00B912  0A03               	xorlw	3	; case 10
  8353  00B914  B4D8               	btfsc	status,2,c
  8354  00B916  D7DB               	goto	l511
  8355  00B918  0A01               	xorlw	1	; case 11
  8356  00B91A  B4D8               	btfsc	status,2,c
  8357  00B91C  D7DC               	goto	l513
  8358  00B91E  0A1A               	xorlw	26	; case 17
  8359  00B920  B4D8               	btfsc	status,2,c
  8360  00B922  D7D5               	goto	l511
  8361  00B924  0A03               	xorlw	3	; case 18
  8362  00B926  B4D8               	btfsc	status,2,c
  8363  00B928  D7D2               	goto	l511
  8364  00B92A  0A01               	xorlw	1	; case 19
  8365  00B92C  B4D8               	btfsc	status,2,c
  8366  00B92E  D7CF               	goto	l511
  8367  00B930  0A07               	xorlw	7	; case 20
  8368  00B932  B4D8               	btfsc	status,2,c
  8369  00B934  D7D0               	goto	l513
  8370  00B936  0A01               	xorlw	1	; case 21
  8371  00B938  B4D8               	btfsc	status,2,c
  8372  00B93A  D7CD               	goto	l513
  8373  00B93C  0A03               	xorlw	3	; case 22
  8374  00B93E  B4D8               	btfsc	status,2,c
  8375  00B940  D7C6               	goto	l511
  8376  00B942  0A01               	xorlw	1	; case 23
  8377  00B944  B4D8               	btfsc	status,2,c
  8378  00B946  D7C7               	goto	l513
  8379  00B948  0A0D               	xorlw	13	; case 26
  8380  00B94A  B4D8               	btfsc	status,2,c
  8381  00B94C  D7C4               	goto	l513
  8382  00B94E  0A01               	xorlw	1	; case 27
  8383  00B950  B4D8               	btfsc	status,2,c
  8384  00B952  D7C1               	goto	l513
  8385  00B954  0A3B               	xorlw	59	; case 32
  8386  00B956  B4D8               	btfsc	status,2,c
  8387  00B958  D7BA               	goto	l511
  8388  00B95A  0A01               	xorlw	1	; case 33
  8389  00B95C  B4D8               	btfsc	status,2,c
  8390  00B95E  D7B7               	goto	l511
  8391  00B960  0A03               	xorlw	3	; case 34
  8392  00B962  B4D8               	btfsc	status,2,c
  8393  00B964  D7B8               	goto	l513
  8394  00B966  0A01               	xorlw	1	; case 35
  8395  00B968  B4D8               	btfsc	status,2,c
  8396  00B96A  D7B1               	goto	l511
  8397  00B96C  0A07               	xorlw	7	; case 36
  8398  00B96E  B4D8               	btfsc	status,2,c
  8399  00B970  D7B2               	goto	l513
  8400  00B972  0A01               	xorlw	1	; case 37
  8401  00B974  B4D8               	btfsc	status,2,c
  8402  00B976  D7AF               	goto	l513
  8403  00B978  0A03               	xorlw	3	; case 38
  8404  00B97A  B4D8               	btfsc	status,2,c
  8405  00B97C  D7A8               	goto	l511
  8406  00B97E  0A01               	xorlw	1	; case 39
  8407  00B980  B4D8               	btfsc	status,2,c
  8408  00B982  D7A5               	goto	l511
  8409  00B984  0A0F               	xorlw	15	; case 40
  8410  00B986  B4D8               	btfsc	status,2,c
  8411  00B988  D7A2               	goto	l511
  8412  00B98A  0A01               	xorlw	1	; case 41
  8413  00B98C  B4D8               	btfsc	status,2,c
  8414  00B98E  D7A3               	goto	l513
  8415  00B990  0A03               	xorlw	3	; case 42
  8416  00B992  B4D8               	btfsc	status,2,c
  8417  00B994  D79C               	goto	l511
  8418  00B996  0A01               	xorlw	1	; case 43
  8419  00B998  B4D8               	btfsc	status,2,c
  8420  00B99A  D79D               	goto	l513
  8421  00B99C  0A07               	xorlw	7	; case 44
  8422  00B99E  B4D8               	btfsc	status,2,c
  8423  00B9A0  D796               	goto	l511
  8424  00B9A2  0A02               	xorlw	2	; case 46
  8425  00B9A4  B4D8               	btfsc	status,2,c
  8426  00B9A6  D793               	goto	l511
  8427  00B9A8  D79B               	goto	l541
  8428  00B9AA                     l512:
  8429                           
  8430                           ;standbyMode.c: 552: return returnValue;
  8431  00B9AA  C005  F001         	movff	getFlat@returnValue,?_getFlat
  8432  00B9AE  C006  F002         	movff	getFlat@returnValue+1,?_getFlat+1
  8433  00B9B2  0012               	return		;funcret
  8434  00B9B4                     __end_of_getFlat:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           postdec1	equ	0xFE5
  8445                           plusw1	equ	0xFE3
  8446                           fsr1l	equ	0xFE1
  8447                           indf2	equ	0xFDF
  8448                           postinc2	equ	0xFDE
  8449                           postdec2	equ	0xFDD
  8450                           plusw2	equ	0xFDB
  8451                           fsr2h	equ	0xFDA
  8452                           fsr2l	equ	0xFD9
  8453                           status	equ	0xFD8
  8454                           
  8455 ;; *************** function _food_press *****************
  8456 ;; Defined at:
  8457 ;;		line 1135 in file "standbyMode.c"
  8458 ;; Parameters:    Size  Location     Type
  8459 ;;  dietSum         2   40[COMRAM] unsigned int 
  8460 ;;  drawer          2   42[COMRAM] unsigned int 
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;  keypress        1   54[COMRAM] unsigned char 
  8463 ;;  foodTable       8   55[COMRAM] unsigned int [4]
  8464 ;;  count           2   52[COMRAM] unsigned int 
  8465 ;;  isValid         2   50[COMRAM] unsigned int 
  8466 ;;  backCheck       2   48[COMRAM] unsigned int 
  8467 ;;  tally           2   46[COMRAM] unsigned int 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  2   40[COMRAM] unsigned int 
  8470 ;; Registers used:
  8471 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:       23 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    3
  8484 ;; This function calls:
  8485 ;;		_check_food
  8486 ;;		_get_digits
  8487 ;;		_lcdInst
  8488 ;;		_printf
  8489 ;;		_putch
  8490 ;; This function is called by:
  8491 ;;		_standbyMode
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text12
  8496  00C300                     __ptext12:
  8497                           	opt stack 0
  8498  00C300                     _food_press:
  8499                           	opt stack 26
  8500                           
  8501                           ;incstack = 0
  8502                           ;standbyMode.c: 1137: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
  8503  00C300  0E01               	movlw	1
  8504  00C302  ECBB  F057         	call	_lcdInst
  8505  00C306  0EC3               	movlw	195
  8506  00C308  6E2D               	movwf	??_food_press& (0+255),c
  8507  00C30A  0ECD               	movlw	205
  8508  00C30C                     u12067:
  8509  00C30C  2EE8               	decfsz	wreg,f,c
  8510  00C30E  D7FE               	bra	u12067
  8511  00C310  2E2D               	decfsz	??_food_press& (0+255),f,c
  8512  00C312  D7FC               	bra	u12067
  8513  00C314  F000               	nop	
  8514                           
  8515                           ;standbyMode.c: 1138: printf("Drawer %i food:", drawer);
  8516  00C316  0EAD               	movlw	low STR_65
  8517  00C318  6E0D               	movwf	printf@f,c
  8518  00C31A  0EFD               	movlw	high STR_65
  8519  00C31C  6E0E               	movwf	printf@f+1,c
  8520  00C31E  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8521  00C322  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8522  00C326  EC55  F067         	call	_printf	;wreg free
  8523                           
  8524                           ;standbyMode.c: 1139: lcdInst(0xC0);;
  8525  00C32A  0EC0               	movlw	192
  8526  00C32C  ECBB  F057         	call	_lcdInst
  8527                           
  8528                           ;standbyMode.c: 1141: unsigned int tally = 0;
  8529  00C330  0E00               	movlw	0
  8530  00C332  6E30               	movwf	food_press@tally+1,c
  8531  00C334  0E00               	movlw	0
  8532  00C336  6E2F               	movwf	food_press@tally,c
  8533                           
  8534                           ;standbyMode.c: 1142: unsigned int count = 0;
  8535  00C338  0E00               	movlw	0
  8536  00C33A  6E36               	movwf	food_press@count+1,c
  8537  00C33C  0E00               	movlw	0
  8538  00C33E  6E35               	movwf	food_press@count,c
  8539                           
  8540                           ;standbyMode.c: 1143: unsigned int foodTable[4] = {0, 0, 0, 0};
  8541  00C340  EE20  F0D0         	lfsr	2,food_press@F3117
  8542  00C344  EE10  F038         	lfsr	1,food_press@foodTable
  8543  00C348  0E07               	movlw	7
  8544  00C34A                     u9131:
  8545  00C34A  CFDB FFE3          	movff	plusw2,plusw1
  8546  00C34E  06E8               	decf	wreg,f,c
  8547  00C350  E2FC               	bc	u9131
  8548                           
  8549                           ;standbyMode.c: 1144: unsigned int isValid = 0;
  8550  00C352  0E00               	movlw	0
  8551  00C354  6E34               	movwf	food_press@isValid+1,c
  8552  00C356  0E00               	movlw	0
  8553  00C358  6E33               	movwf	food_press@isValid,c
  8554                           
  8555                           ;standbyMode.c: 1145: unsigned int backCheck = 0;
  8556  00C35A  0E00               	movlw	0
  8557  00C35C  6E32               	movwf	food_press@backCheck+1,c
  8558  00C35E  0E00               	movlw	0
  8559  00C360  6E31               	movwf	food_press@backCheck,c
  8560                           
  8561                           ;standbyMode.c: 1146: tally = get_digits(dietSum);
  8562  00C362  C029  F001         	movff	food_press@dietSum,get_digits@sum
  8563  00C366  C02A  F002         	movff	food_press@dietSum+1,get_digits@sum+1
  8564  00C36A  EC2C  F05B         	call	_get_digits	;wreg free
  8565  00C36E  C001  F02F         	movff	?_get_digits,food_press@tally
  8566  00C372  C002  F030         	movff	?_get_digits+1,food_press@tally+1
  8567  00C376                     
  8568                           ;standbyMode.c: 1149: while(PORTBbits.RB1 == 0){ continue; }
  8569  00C376  A281               	btfss	3969,1,c	;volatile
  8570  00C378  D7FE               	goto	l736
  8571                           
  8572                           ;standbyMode.c: 1150: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8573  00C37A  3881               	swapf	3969,w,c	;volatile
  8574  00C37C  0B0F               	andlw	15
  8575  00C37E  0B0F               	andlw	15
  8576  00C380  6E37               	movwf	food_press@keypress,c
  8577  00C382  B281               	btfsc	3969,1,c	;volatile
  8578  00C384  D7FE               	goto	l741
  8579                           
  8580                           ;standbyMode.c: 1153: if(keypress == 15){
  8581  00C386  0E0F               	movlw	15
  8582  00C388  1837               	xorwf	food_press@keypress,w,c
  8583  00C38A  B4D8               	btfsc	status,2,c
  8584  00C38C  D070               	goto	l744
  8585                           
  8586                           ;standbyMode.c: 1156: else if (keypress == 14){
  8587                           
  8588                           ;standbyMode.c: 1155: }
  8589                           
  8590                           ;standbyMode.c: 1154: break;
  8591  00C38E  0E0E               	movlw	14
  8592  00C390  1837               	xorwf	food_press@keypress,w,c
  8593  00C392  A4D8               	btfss	status,2,c
  8594  00C394  D005               	goto	l746
  8595                           
  8596                           ;standbyMode.c: 1157: backCheck = 1;
  8597  00C396  0E00               	movlw	0
  8598  00C398  6E32               	movwf	food_press@backCheck+1,c
  8599  00C39A  0E01               	movlw	1
  8600  00C39C  6E31               	movwf	food_press@backCheck,c
  8601                           
  8602                           ;standbyMode.c: 1158: break;
  8603  00C39E  D067               	goto	l744
  8604  00C3A0                     l746:
  8605                           
  8606                           ;standbyMode.c: 1160: else if (keypress == 0 || keypress == 1 || keypress == 2){
  8607  00C3A0  5037               	movf	food_press@keypress,w,c
  8608  00C3A2  B4D8               	btfsc	status,2,c
  8609  00C3A4  D007               	goto	u9200
  8610  00C3A6  0437               	decf	food_press@keypress,w,c
  8611  00C3A8  B4D8               	btfsc	status,2,c
  8612  00C3AA  D004               	goto	u9200
  8613  00C3AC  0E02               	movlw	2
  8614  00C3AE  1837               	xorwf	food_press@keypress,w,c
  8615  00C3B0  A4D8               	btfss	status,2,c
  8616  00C3B2  D02C               	goto	l748
  8617  00C3B4                     u9200:
  8618                           
  8619                           ;standbyMode.c: 1161: if (count < tally){
  8620  00C3B4  502F               	movf	food_press@tally,w,c
  8621  00C3B6  5C35               	subwf	food_press@count,w,c
  8622  00C3B8  5030               	movf	food_press@tally+1,w,c
  8623  00C3BA  5836               	subwfb	food_press@count+1,w,c
  8624  00C3BC  B0D8               	btfsc	status,0,c
  8625  00C3BE  D7DB               	goto	l736
  8626                           
  8627                           ;standbyMode.c: 1162: putch(input[keypress]);
  8628  00C3C0  5037               	movf	food_press@keypress,w,c
  8629  00C3C2  0D01               	mullw	1
  8630  00C3C4  0ED4               	movlw	low _input
  8631  00C3C6  24F3               	addwf	prodl,w,c
  8632  00C3C8  6EF6               	movwf	tblptrl,c
  8633  00C3CA  0EFC               	movlw	high _input
  8634  00C3CC  20F4               	addwfc	prodh,w,c
  8635  00C3CE  6EF7               	movwf	tblptrh,c
  8636  00C3D0                     	if	1	;There are 3 active tblptr bytes
  8637  00C3D0  6AF8               	clrf	tblptru,c
  8638  00C3D2  0E00               	movlw	low (__mediumconst shr (0+16))
  8639  00C3D4  22F8               	addwfc	tblptru,f,c
  8640  00C3D6                     	endif
  8641  00C3D6  0008               	tblrd		*
  8642  00C3D8  50F5               	movf	tablat,w,c
  8643  00C3DA  ECCF  F057         	call	_putch
  8644                           
  8645                           ;standbyMode.c: 1163: foodTable[count] = keypress + 1;
  8646  00C3DE  5037               	movf	food_press@keypress,w,c
  8647  00C3E0  6E2D               	movwf	??_food_press& (0+255),c
  8648  00C3E2  6A2E               	clrf	(??_food_press+1)& (0+255),c
  8649  00C3E4  0E01               	movlw	1
  8650  00C3E6  262D               	addwf	??_food_press,f,c
  8651  00C3E8  0E00               	movlw	0
  8652  00C3EA  222E               	addwfc	??_food_press+1,f,c
  8653  00C3EC  90D8               	bcf	status,0,c
  8654  00C3EE  3435               	rlcf	food_press@count,w,c
  8655  00C3F0  6ED9               	movwf	fsr2l,c
  8656  00C3F2  3436               	rlcf	food_press@count+1,w,c
  8657  00C3F4  6EDA               	movwf	fsr2h,c
  8658  00C3F6  0E38               	movlw	low food_press@foodTable
  8659  00C3F8  26D9               	addwf	fsr2l,f,c
  8660  00C3FA  0E00               	movlw	high food_press@foodTable
  8661  00C3FC  22DA               	addwfc	fsr2h,f,c
  8662  00C3FE  C02D  FFDE         	movff	??_food_press,postinc2
  8663  00C402  C02E  FFDD         	movff	??_food_press+1,postdec2
  8664                           
  8665                           ;standbyMode.c: 1164: count += 1;
  8666  00C406  4A35               	infsnz	food_press@count,f,c
  8667  00C408  2A36               	incf	food_press@count+1,f,c
  8668                           
  8669                           ;standbyMode.c: 1165: }
  8670                           ;standbyMode.c: 1166: }
  8671  00C40A  D7B5               	goto	l736
  8672  00C40C                     l748:
  8673                           
  8674                           ;standbyMode.c: 1167: else if (keypress == 12){
  8675  00C40C  0E0C               	movlw	12
  8676  00C40E  1837               	xorwf	food_press@keypress,w,c
  8677  00C410  A4D8               	btfss	status,2,c
  8678  00C412  D7B1               	goto	l736
  8679                           
  8680                           ;standbyMode.c: 1168: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8681  00C414  0E01               	movlw	1
  8682  00C416  ECBB  F057         	call	_lcdInst
  8683  00C41A  0EC3               	movlw	195
  8684  00C41C  6E2D               	movwf	??_food_press& (0+255),c
  8685  00C41E  0ECD               	movlw	205
  8686  00C420                     u12077:
  8687  00C420  2EE8               	decfsz	wreg,f,c
  8688  00C422  D7FE               	bra	u12077
  8689  00C424  2E2D               	decfsz	??_food_press& (0+255),f,c
  8690  00C426  D7FC               	bra	u12077
  8691  00C428  F000               	nop	
  8692                           
  8693                           ;standbyMode.c: 1169: printf("Drawer %i food:", drawer);
  8694  00C42A  0EAD               	movlw	low STR_65
  8695  00C42C  6E0D               	movwf	printf@f,c
  8696  00C42E  0EFD               	movlw	high STR_65
  8697  00C430  6E0E               	movwf	printf@f+1,c
  8698  00C432  C02B  F00F         	movff	food_press@drawer,?_printf+2
  8699  00C436  C02C  F010         	movff	food_press@drawer+1,?_printf+3
  8700  00C43A  EC55  F067         	call	_printf	;wreg free
  8701                           
  8702                           ;standbyMode.c: 1170: lcdInst(0xC0);;
  8703  00C43E  0EC0               	movlw	192
  8704  00C440  ECBB  F057         	call	_lcdInst
  8705                           
  8706                           ;standbyMode.c: 1171: count = 0;
  8707  00C444  0E00               	movlw	0
  8708  00C446  6E36               	movwf	food_press@count+1,c
  8709  00C448  0E00               	movlw	0
  8710  00C44A  6E35               	movwf	food_press@count,c
  8711                           
  8712                           ;standbyMode.c: 1172: foodTable[0] = 0;
  8713  00C44C  0E00               	movlw	0
  8714  00C44E  6E39               	movwf	food_press@foodTable+1,c
  8715  00C450  0E00               	movlw	0
  8716  00C452  6E38               	movwf	food_press@foodTable,c
  8717                           
  8718                           ;standbyMode.c: 1173: foodTable[1] = 0;
  8719  00C454  0E00               	movlw	0
  8720  00C456  6E3B               	movwf	food_press@foodTable+3,c
  8721  00C458  0E00               	movlw	0
  8722  00C45A  6E3A               	movwf	food_press@foodTable+2,c
  8723                           
  8724                           ;standbyMode.c: 1174: foodTable[2] = 0;
  8725  00C45C  0E00               	movlw	0
  8726  00C45E  6E3D               	movwf	food_press@foodTable+5,c
  8727  00C460  0E00               	movlw	0
  8728  00C462  6E3C               	movwf	food_press@foodTable+4,c
  8729                           
  8730                           ;standbyMode.c: 1175: foodTable[3] = 0;
  8731  00C464  0E00               	movlw	0
  8732  00C466  6E3F               	movwf	food_press@foodTable+7,c
  8733  00C468  0E00               	movlw	0
  8734  00C46A  6E3E               	movwf	food_press@foodTable+6,c
  8735  00C46C  D784               	goto	l736
  8736  00C46E                     l744:
  8737                           
  8738                           ;standbyMode.c: 1176: }
  8739                           ;standbyMode.c: 1177: }
  8740                           ;standbyMode.c: 1179: if (backCheck == 1){
  8741  00C46E  0431               	decf	food_press@backCheck,w,c
  8742  00C470  1032               	iorwf	food_press@backCheck+1,w,c
  8743  00C472  A4D8               	btfss	status,2,c
  8744  00C474  D005               	goto	l755
  8745                           
  8746                           ;standbyMode.c: 1180: return 100;
  8747  00C476  0E00               	movlw	0
  8748  00C478  6E2A               	movwf	?_food_press+1,c
  8749  00C47A  0E64               	movlw	100
  8750  00C47C  6E29               	movwf	?_food_press,c
  8751                           
  8752                           ;standbyMode.c: 1181: }
  8753  00C47E  0012               	return	
  8754  00C480                     l755:
  8755                           
  8756                           ;standbyMode.c: 1182: else {
  8757                           ;standbyMode.c: 1183: isValid = check_food(dietSum, foodTable);
  8758  00C480  C029  F001         	movff	food_press@dietSum,check_food@sum
  8759  00C484  C02A  F002         	movff	food_press@dietSum+1,check_food@sum+1
  8760  00C488  0E38               	movlw	low food_press@foodTable
  8761  00C48A  6E03               	movwf	check_food@foodInput,c
  8762  00C48C  0E00               	movlw	high food_press@foodTable
  8763  00C48E  6E04               	movwf	check_food@foodInput+1,c
  8764  00C490  EC91  F072         	call	_check_food	;wreg free
  8765  00C494  C001  F033         	movff	?_check_food,food_press@isValid
  8766  00C498  C002  F034         	movff	?_check_food+1,food_press@isValid+1
  8767                           
  8768                           ;standbyMode.c: 1185: if (isValid == 0){
  8769  00C49C  5033               	movf	food_press@isValid,w,c
  8770  00C49E  1034               	iorwf	food_press@isValid+1,w,c
  8771  00C4A0  A4D8               	btfss	status,2,c
  8772  00C4A2  D026               	goto	l758
  8773                           
  8774                           ;standbyMode.c: 1186: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8775  00C4A4  0E01               	movlw	1
  8776  00C4A6  ECBB  F057         	call	_lcdInst
  8777  00C4AA  0EC3               	movlw	195
  8778  00C4AC  6E2D               	movwf	??_food_press& (0+255),c
  8779  00C4AE  0ECD               	movlw	205
  8780  00C4B0                     u12087:
  8781  00C4B0  2EE8               	decfsz	wreg,f,c
  8782  00C4B2  D7FE               	bra	u12087
  8783  00C4B4  2E2D               	decfsz	??_food_press& (0+255),f,c
  8784  00C4B6  D7FC               	bra	u12087
  8785  00C4B8  F000               	nop	
  8786                           
  8787                           ;standbyMode.c: 1187: printf("Invalid food!");
  8788  00C4BA  0EA5               	movlw	low STR_67
  8789  00C4BC  6E0D               	movwf	printf@f,c
  8790  00C4BE  0EFE               	movlw	high STR_67
  8791  00C4C0  6E0E               	movwf	printf@f+1,c
  8792  00C4C2  EC55  F067         	call	_printf	;wreg free
  8793                           
  8794                           ;standbyMode.c: 1188: lcdInst(0xC0);;
  8795  00C4C6  0EC0               	movlw	192
  8796  00C4C8  ECBB  F057         	call	_lcdInst
  8797                           
  8798                           ;standbyMode.c: 1189: printf("Try again.");
  8799  00C4CC  0E32               	movlw	low STR_68
  8800  00C4CE  6E0D               	movwf	printf@f,c
  8801  00C4D0  0EFF               	movlw	high STR_68
  8802  00C4D2  6E0E               	movwf	printf@f+1,c
  8803  00C4D4  EC55  F067         	call	_printf	;wreg free
  8804                           
  8805                           ;standbyMode.c: 1190: _delay((unsigned long)((1000)*(40000000/4000.0)));
  8806  00C4D8  0E33               	movlw	51
  8807  00C4DA  6E2E               	movwf	(??_food_press+1)& (0+255),c
  8808  00C4DC  0EBB               	movlw	187
  8809  00C4DE  6E2D               	movwf	??_food_press& (0+255),c
  8810  00C4E0  0EE0               	movlw	224
  8811  00C4E2                     u12097:
  8812  00C4E2  2EE8               	decfsz	wreg,f,c
  8813  00C4E4  D7FE               	bra	u12097
  8814  00C4E6  2E2D               	decfsz	??_food_press& (0+255),f,c
  8815  00C4E8  D7FC               	bra	u12097
  8816  00C4EA  2E2E               	decfsz	(??_food_press+1)& (0+255),f,c
  8817  00C4EC  D7FA               	bra	u12097
  8818                           
  8819                           ;standbyMode.c: 1191: goto START;
  8820  00C4EE  D708               	goto	_food_press
  8821  00C4F0                     l758:
  8822                           
  8823                           ;standbyMode.c: 1193: else {
  8824                           ;standbyMode.c: 1194: return isValid;
  8825  00C4F0  C033  F029         	movff	food_press@isValid,?_food_press
  8826  00C4F4  C034  F02A         	movff	food_press@isValid+1,?_food_press+1
  8827  00C4F8  0012               	return	
  8828  00C4FA                     __end_of_food_press:
  8829                           	opt stack 0
  8830                           tblptru	equ	0xFF8
  8831                           tblptrh	equ	0xFF7
  8832                           tblptrl	equ	0xFF6
  8833                           tablat	equ	0xFF5
  8834                           prodh	equ	0xFF4
  8835                           prodl	equ	0xFF3
  8836                           postinc0	equ	0xFEE
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           plusw1	equ	0xFE3
  8840                           fsr1l	equ	0xFE1
  8841                           indf2	equ	0xFDF
  8842                           postinc2	equ	0xFDE
  8843                           postdec2	equ	0xFDD
  8844                           plusw2	equ	0xFDB
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849 ;; *************** function _get_digits *****************
  8850 ;; Defined at:
  8851 ;;		line 1030 in file "standbyMode.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  sum             2    0[COMRAM] unsigned int 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  count           2    4[COMRAM] unsigned int 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  2    0[COMRAM] unsigned int 
  8858 ;; Registers used:
  8859 ;;		wreg, status,2, status,0
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;Total ram usage:        6 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; This function calls:
  8872 ;;		Nothing
  8873 ;; This function is called by:
  8874 ;;		_food_press
  8875 ;; This function uses a non-reentrant model
  8876 ;;
  8877                           
  8878                           	psect	text13
  8879  00B658                     __ptext13:
  8880                           	opt stack 0
  8881  00B658                     _get_digits:
  8882                           	opt stack 28
  8883                           
  8884                           ;standbyMode.c: 1032: unsigned int count = 0;
  8885                           
  8886                           ;incstack = 0
  8887  00B658  0E00               	movlw	0
  8888  00B65A  6E06               	movwf	get_digits@count+1,c
  8889  00B65C  0E00               	movlw	0
  8890  00B65E  6E05               	movwf	get_digits@count,c
  8891                           
  8892                           ;standbyMode.c: 1034: switch(sum){
  8893  00B660  D015               	goto	l709
  8894  00B662                     
  8895                           ;standbyMode.c: 1047: count = 1;
  8896                           
  8897                           ;standbyMode.c: 1046: case 12:
  8898                           
  8899                           ;standbyMode.c: 1043: break;
  8900                           
  8901                           ;standbyMode.c: 1042: count = 1;
  8902                           
  8903                           ;standbyMode.c: 1041: case 7:
  8904                           
  8905                           ;standbyMode.c: 1038: break;
  8906                           
  8907                           ;standbyMode.c: 1037: count = 1;
  8908  00B662  0E00               	movlw	0
  8909  00B664  6E06               	movwf	get_digits@count+1,c
  8910  00B666  0E01               	movlw	1
  8911  00B668                     L42:
  8912  00B668  6E05               	movwf	get_digits@count,c
  8913                           
  8914                           ;standbyMode.c: 1053: break;
  8915  00B66A  D050               	goto	l711
  8916  00B66C                     
  8917                           ;standbyMode.c: 1062: count = 2;
  8918                           
  8919                           ;standbyMode.c: 1061: case 19:
  8920                           
  8921                           ;standbyMode.c: 1058: break;
  8922                           
  8923                           ;standbyMode.c: 1057: count = 2;
  8924  00B66C  0E00               	movlw	0
  8925  00B66E  6E06               	movwf	get_digits@count+1,c
  8926  00B670  0E02               	movlw	2
  8927  00B672  D7FA               	goto	L42
  8928  00B674                     
  8929                           ;standbyMode.c: 1097: count = 3;
  8930                           
  8931                           ;standbyMode.c: 1096: case 31:
  8932                           
  8933                           ;standbyMode.c: 1093: break;
  8934                           
  8935                           ;standbyMode.c: 1092: count = 3;
  8936                           
  8937                           ;standbyMode.c: 1091: case 26:
  8938                           
  8939                           ;standbyMode.c: 1088: break;
  8940                           
  8941                           ;standbyMode.c: 1087: count = 3;
  8942                           
  8943                           ;standbyMode.c: 1086: case 22:
  8944                           
  8945                           ;standbyMode.c: 1083: break;
  8946                           
  8947                           ;standbyMode.c: 1082: count = 3;
  8948                           
  8949                           ;standbyMode.c: 1081: case 27:
  8950                           
  8951                           ;standbyMode.c: 1078: break;
  8952                           
  8953                           ;standbyMode.c: 1077: count = 3;
  8954                           
  8955                           ;standbyMode.c: 1076: case 17:
  8956                           
  8957                           ;standbyMode.c: 1073: break;
  8958                           
  8959                           ;standbyMode.c: 1072: count = 3;
  8960                           
  8961                           ;standbyMode.c: 1071: case 18:
  8962                           
  8963                           ;standbyMode.c: 1068: break;
  8964                           
  8965                           ;standbyMode.c: 1067: count = 3;
  8966  00B674  0E00               	movlw	0
  8967  00B676  6E06               	movwf	get_digits@count+1,c
  8968  00B678  0E03               	movlw	3
  8969  00B67A  D7F6               	goto	L42
  8970  00B67C                     
  8971                           ;standbyMode.c: 1122: count = 4;
  8972                           
  8973                           ;standbyMode.c: 1121: case 43:
  8974                           
  8975                           ;standbyMode.c: 1118: break;
  8976                           
  8977                           ;standbyMode.c: 1117: count = 4;
  8978                           
  8979                           ;standbyMode.c: 1116: case 39:
  8980                           
  8981                           ;standbyMode.c: 1113: break;
  8982                           
  8983                           ;standbyMode.c: 1112: count = 4;
  8984                           
  8985                           ;standbyMode.c: 1111: case 34:
  8986                           
  8987                           ;standbyMode.c: 1108: break;
  8988                           
  8989                           ;standbyMode.c: 1107: count = 4;
  8990                           
  8991                           ;standbyMode.c: 1106: case 29:
  8992                           
  8993                           ;standbyMode.c: 1103: break;
  8994                           
  8995                           ;standbyMode.c: 1102: count = 4;
  8996  00B67C  0E00               	movlw	0
  8997  00B67E  6E06               	movwf	get_digits@count+1,c
  8998  00B680  0E04               	movlw	4
  8999  00B682  D7F2               	goto	L42
  9000  00B684                     
  9001                           ;standbyMode.c: 1127: count = 0;
  9002  00B684  0E00               	movlw	0
  9003  00B686  6E06               	movwf	get_digits@count+1,c
  9004  00B688  0E00               	movlw	0
  9005  00B68A  D7EE               	goto	L42
  9006  00B68C                     l709:
  9007  00B68C  C001  F003         	movff	get_digits@sum,??_get_digits
  9008  00B690  C002  F004         	movff	get_digits@sum+1,??_get_digits+1
  9009                           
  9010                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9011                           ; Switch size 1, requested type "space"
  9012                           ; Number of cases is 1, Range of values is 0 to 0
  9013                           ; switch strategies available:
  9014                           ; Name         Instructions Cycles
  9015                           ; simple_byte            4     3 (average)
  9016                           ;	Chosen strategy is simple_byte
  9017  00B694  5004               	movf	??_get_digits+1,w,c
  9018  00B696  0A00               	xorlw	0	; case 0
  9019  00B698  A4D8               	btfss	status,2,c
  9020  00B69A  D7F4               	goto	l729
  9021                           
  9022                           ; Switch size 1, requested type "space"
  9023                           ; Number of cases is 18, Range of values is 3 to 43
  9024                           ; switch strategies available:
  9025                           ; Name         Instructions Cycles
  9026                           ; simple_byte           55    28 (average)
  9027                           ;	Chosen strategy is simple_byte
  9028  00B69C  5003               	movf	??_get_digits,w,c
  9029  00B69E  0A03               	xorlw	3	; case 3
  9030  00B6A0  B4D8               	btfsc	status,2,c
  9031  00B6A2  D7DF               	goto	l710
  9032  00B6A4  0A04               	xorlw	4	; case 7
  9033  00B6A6  B4D8               	btfsc	status,2,c
  9034  00B6A8  D7DC               	goto	l710
  9035  00B6AA  0A0D               	xorlw	13	; case 10
  9036  00B6AC  B4D8               	btfsc	status,2,c
  9037  00B6AE  D7DE               	goto	l715
  9038  00B6B0  0A06               	xorlw	6	; case 12
  9039  00B6B2  B4D8               	btfsc	status,2,c
  9040  00B6B4  D7D6               	goto	l710
  9041  00B6B6  0A01               	xorlw	1	; case 13
  9042  00B6B8  B4D8               	btfsc	status,2,c
  9043  00B6BA  D7DC               	goto	l717
  9044  00B6BC  0A02               	xorlw	2	; case 15
  9045  00B6BE  B4D8               	btfsc	status,2,c
  9046  00B6C0  D7D5               	goto	l715
  9047  00B6C2  0A1E               	xorlw	30	; case 17
  9048  00B6C4  B4D8               	btfsc	status,2,c
  9049  00B6C6  D7D6               	goto	l717
  9050  00B6C8  0A03               	xorlw	3	; case 18
  9051  00B6CA  B4D8               	btfsc	status,2,c
  9052  00B6CC  D7D3               	goto	l717
  9053  00B6CE  0A01               	xorlw	1	; case 19
  9054  00B6D0  B4D8               	btfsc	status,2,c
  9055  00B6D2  D7CC               	goto	l715
  9056  00B6D4  0A05               	xorlw	5	; case 22
  9057  00B6D6  B4D8               	btfsc	status,2,c
  9058  00B6D8  D7CD               	goto	l717
  9059  00B6DA  0A0F               	xorlw	15	; case 25
  9060  00B6DC  B4D8               	btfsc	status,2,c
  9061  00B6DE  D7CE               	goto	l724
  9062  00B6E0  0A03               	xorlw	3	; case 26
  9063  00B6E2  B4D8               	btfsc	status,2,c
  9064  00B6E4  D7C7               	goto	l717
  9065  00B6E6  0A01               	xorlw	1	; case 27
  9066  00B6E8  B4D8               	btfsc	status,2,c
  9067  00B6EA  D7C4               	goto	l717
  9068  00B6EC  0A06               	xorlw	6	; case 29
  9069  00B6EE  B4D8               	btfsc	status,2,c
  9070  00B6F0  D7C5               	goto	l724
  9071  00B6F2  0A02               	xorlw	2	; case 31
  9072  00B6F4  B4D8               	btfsc	status,2,c
  9073  00B6F6  D7BE               	goto	l717
  9074  00B6F8  0A3D               	xorlw	61	; case 34
  9075  00B6FA  B4D8               	btfsc	status,2,c
  9076  00B6FC  D7BF               	goto	l724
  9077  00B6FE  0A05               	xorlw	5	; case 39
  9078  00B700  B4D8               	btfsc	status,2,c
  9079  00B702  D7BC               	goto	l724
  9080  00B704  0A0C               	xorlw	12	; case 43
  9081  00B706  B4D8               	btfsc	status,2,c
  9082  00B708  D7B9               	goto	l724
  9083  00B70A  D7BC               	goto	l729
  9084  00B70C                     l711:
  9085                           
  9086                           ;standbyMode.c: 1130: return count;
  9087  00B70C  C005  F001         	movff	get_digits@count,?_get_digits
  9088  00B710  C006  F002         	movff	get_digits@count+1,?_get_digits+1
  9089  00B714  0012               	return		;funcret
  9090  00B716                     __end_of_get_digits:
  9091                           	opt stack 0
  9092                           tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           postinc0	equ	0xFEE
  9099                           wreg	equ	0xFE8
  9100                           postdec1	equ	0xFE5
  9101                           plusw1	equ	0xFE3
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _check_food *****************
  9112 ;; Defined at:
  9113 ;;		line 21 in file "standbyMode.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  sum             2    0[COMRAM] unsigned int 
  9116 ;;  foodInput       2    2[COMRAM] PTR unsigned int 
  9117 ;;		 -> food_press@foodTable(8), 
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  returnValue     2    6[COMRAM] unsigned int 
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  2    0[COMRAM] unsigned int 
  9122 ;; Registers used:
  9123 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9129 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9130 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9131 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;Total ram usage:        8 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; This function calls:
  9136 ;;		Nothing
  9137 ;; This function is called by:
  9138 ;;		_food_press
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           	psect	text14
  9143  00E522                     __ptext14:
  9144                           	opt stack 0
  9145  00E522                     _check_food:
  9146                           	opt stack 28
  9147                           
  9148                           ;standbyMode.c: 22: unsigned int returnValue = 0;
  9149                           
  9150                           ;incstack = 0
  9151  00E522  0E00               	movlw	0
  9152  00E524  6E08               	movwf	check_food@returnValue+1,c
  9153  00E526  0E00               	movlw	0
  9154  00E528  6E07               	movwf	check_food@returnValue,c
  9155                           
  9156                           ;standbyMode.c: 24: switch(sum){
  9157  00E52A  EFA6  F077         	goto	l377
  9158  00E52E                     
  9159                           ;standbyMode.c: 27: if (foodInput[0] == 1){
  9160  00E52E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9161  00E532  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9162  00E536  04DE               	decf	postinc2,w,c
  9163  00E538  10DE               	iorwf	postinc2,w,c
  9164  00E53A  A4D8               	btfss	status,2,c
  9165  00E53C  D005               	goto	l379
  9166                           
  9167                           ;standbyMode.c: 28: returnValue = 1;
  9168  00E53E  0E00               	movlw	0
  9169  00E540  6E08               	movwf	check_food@returnValue+1,c
  9170  00E542  0E01               	movlw	1
  9171  00E544  EFA4  F077         	goto	L87
  9172  00E548                     l379:
  9173                           
  9174                           ;standbyMode.c: 30: else if (foodInput[0] == 2){
  9175  00E548  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9176  00E54C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9177  00E550  0E02               	movlw	2
  9178  00E552  18DE               	xorwf	postinc2,w,c
  9179  00E554  10DE               	iorwf	postinc2,w,c
  9180  00E556  A4D8               	btfss	status,2,c
  9181  00E558  EFEA  F077         	goto	l382
  9182                           
  9183                           ;standbyMode.c: 31: returnValue = 2;
  9184  00E55C  0E00               	movlw	0
  9185  00E55E  6E08               	movwf	check_food@returnValue+1,c
  9186  00E560  0E02               	movlw	2
  9187  00E562  EFA4  F077         	goto	L87
  9188  00E566                     
  9189                           ;standbyMode.c: 37: if (foodInput[0] == 1){
  9190  00E566  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9191  00E56A  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9192  00E56E  04DE               	decf	postinc2,w,c
  9193  00E570  10DE               	iorwf	postinc2,w,c
  9194  00E572  A4D8               	btfss	status,2,c
  9195  00E574  D005               	goto	l384
  9196                           
  9197                           ;standbyMode.c: 38: returnValue = 3;
  9198  00E576  0E00               	movlw	0
  9199  00E578  6E08               	movwf	check_food@returnValue+1,c
  9200  00E57A  0E03               	movlw	3
  9201  00E57C  EFA4  F077         	goto	L87
  9202  00E580                     l384:
  9203                           
  9204                           ;standbyMode.c: 40: else if (foodInput[0] == 2){
  9205  00E580  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9206  00E584  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9207  00E588  0E02               	movlw	2
  9208  00E58A  18DE               	xorwf	postinc2,w,c
  9209  00E58C  10DE               	iorwf	postinc2,w,c
  9210  00E58E  A4D8               	btfss	status,2,c
  9211  00E590  EFEA  F077         	goto	l382
  9212                           
  9213                           ;standbyMode.c: 41: returnValue = 4;
  9214  00E594  0E00               	movlw	0
  9215  00E596  6E08               	movwf	check_food@returnValue+1,c
  9216  00E598  0E04               	movlw	4
  9217  00E59A  EFA4  F077         	goto	L87
  9218  00E59E                     
  9219                           ;standbyMode.c: 47: if (foodInput[0] == 1){
  9220  00E59E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9221  00E5A2  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9222  00E5A6  04DE               	decf	postinc2,w,c
  9223  00E5A8  10DE               	iorwf	postinc2,w,c
  9224  00E5AA  A4D8               	btfss	status,2,c
  9225  00E5AC  D005               	goto	l388
  9226                           
  9227                           ;standbyMode.c: 48: returnValue = 5;
  9228  00E5AE  0E00               	movlw	0
  9229  00E5B0  6E08               	movwf	check_food@returnValue+1,c
  9230  00E5B2  0E05               	movlw	5
  9231  00E5B4  EFA4  F077         	goto	L87
  9232  00E5B8                     l388:
  9233                           
  9234                           ;standbyMode.c: 50: else if (foodInput[0] == 2){
  9235  00E5B8  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9236  00E5BC  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9237  00E5C0  0E02               	movlw	2
  9238  00E5C2  18DE               	xorwf	postinc2,w,c
  9239  00E5C4  10DE               	iorwf	postinc2,w,c
  9240  00E5C6  A4D8               	btfss	status,2,c
  9241  00E5C8  D005               	goto	l390
  9242                           
  9243                           ;standbyMode.c: 51: returnValue = 6;
  9244  00E5CA  0E00               	movlw	0
  9245  00E5CC  6E08               	movwf	check_food@returnValue+1,c
  9246  00E5CE  0E06               	movlw	6
  9247  00E5D0  EFA4  F077         	goto	L87
  9248  00E5D4                     l390:
  9249                           
  9250                           ;standbyMode.c: 53: else if (foodInput[0] == 3){
  9251  00E5D4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9252  00E5D8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9253  00E5DC  0E03               	movlw	3
  9254  00E5DE  18DE               	xorwf	postinc2,w,c
  9255  00E5E0  10DE               	iorwf	postinc2,w,c
  9256  00E5E2  A4D8               	btfss	status,2,c
  9257  00E5E4  EFEA  F077         	goto	l382
  9258                           
  9259                           ;standbyMode.c: 54: returnValue = 7;
  9260  00E5E8  0E00               	movlw	0
  9261  00E5EA  6E08               	movwf	check_food@returnValue+1,c
  9262  00E5EC  0E07               	movlw	7
  9263  00E5EE  EFA4  F077         	goto	L87
  9264  00E5F2                     
  9265                           ;standbyMode.c: 60: if (foodInput[0] == 1 && foodInput[1] == 1){
  9266  00E5F2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9267  00E5F6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9268  00E5FA  04DE               	decf	postinc2,w,c
  9269  00E5FC  10DE               	iorwf	postinc2,w,c
  9270  00E5FE  A4D8               	btfss	status,2,c
  9271  00E600  D00F               	goto	l394
  9272  00E602  EE20 F002          	lfsr	2,2
  9273  00E606  5003               	movf	check_food@foodInput,w,c
  9274  00E608  26D9               	addwf	fsr2l,f,c
  9275  00E60A  5004               	movf	check_food@foodInput+1,w,c
  9276  00E60C  22DA               	addwfc	fsr2h,f,c
  9277  00E60E  04DE               	decf	postinc2,w,c
  9278  00E610  10DE               	iorwf	postinc2,w,c
  9279  00E612  A4D8               	btfss	status,2,c
  9280  00E614  D005               	goto	l394
  9281                           
  9282                           ;standbyMode.c: 61: returnValue = 8;
  9283  00E616  0E00               	movlw	0
  9284  00E618  6E08               	movwf	check_food@returnValue+1,c
  9285  00E61A  0E08               	movlw	8
  9286  00E61C  EFA4  F077         	goto	L87
  9287  00E620                     l394:
  9288                           
  9289                           ;standbyMode.c: 63: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9290  00E620  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9291  00E624  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9292  00E628  04DE               	decf	postinc2,w,c
  9293  00E62A  10DE               	iorwf	postinc2,w,c
  9294  00E62C  A4D8               	btfss	status,2,c
  9295  00E62E  D010               	goto	l396
  9296  00E630  EE20 F002          	lfsr	2,2
  9297  00E634  5003               	movf	check_food@foodInput,w,c
  9298  00E636  26D9               	addwf	fsr2l,f,c
  9299  00E638  5004               	movf	check_food@foodInput+1,w,c
  9300  00E63A  22DA               	addwfc	fsr2h,f,c
  9301  00E63C  0E02               	movlw	2
  9302  00E63E  18DE               	xorwf	postinc2,w,c
  9303  00E640  10DE               	iorwf	postinc2,w,c
  9304  00E642  A4D8               	btfss	status,2,c
  9305  00E644  D005               	goto	l396
  9306                           
  9307                           ;standbyMode.c: 64: returnValue = 9;
  9308  00E646  0E00               	movlw	0
  9309  00E648  6E08               	movwf	check_food@returnValue+1,c
  9310  00E64A  0E09               	movlw	9
  9311  00E64C  EFA4  F077         	goto	L87
  9312  00E650                     l396:
  9313                           
  9314                           ;standbyMode.c: 66: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9315  00E650  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9316  00E654  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9317  00E658  0E02               	movlw	2
  9318  00E65A  18DE               	xorwf	postinc2,w,c
  9319  00E65C  10DE               	iorwf	postinc2,w,c
  9320  00E65E  A4D8               	btfss	status,2,c
  9321  00E660  D00F               	goto	l398
  9322  00E662  EE20 F002          	lfsr	2,2
  9323  00E666  5003               	movf	check_food@foodInput,w,c
  9324  00E668  26D9               	addwf	fsr2l,f,c
  9325  00E66A  5004               	movf	check_food@foodInput+1,w,c
  9326  00E66C  22DA               	addwfc	fsr2h,f,c
  9327  00E66E  04DE               	decf	postinc2,w,c
  9328  00E670  10DE               	iorwf	postinc2,w,c
  9329  00E672  A4D8               	btfss	status,2,c
  9330  00E674  D005               	goto	l398
  9331                           
  9332                           ;standbyMode.c: 67: returnValue = 10;
  9333  00E676  0E00               	movlw	0
  9334  00E678  6E08               	movwf	check_food@returnValue+1,c
  9335  00E67A  0E0A               	movlw	10
  9336  00E67C  EFA4  F077         	goto	L87
  9337  00E680                     l398:
  9338                           
  9339                           ;standbyMode.c: 69: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9340  00E680  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9341  00E684  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9342  00E688  0E02               	movlw	2
  9343  00E68A  18DE               	xorwf	postinc2,w,c
  9344  00E68C  10DE               	iorwf	postinc2,w,c
  9345  00E68E  A4D8               	btfss	status,2,c
  9346  00E690  EFEA  F077         	goto	l382
  9347  00E694  EE20 F002          	lfsr	2,2
  9348  00E698  5003               	movf	check_food@foodInput,w,c
  9349  00E69A  26D9               	addwf	fsr2l,f,c
  9350  00E69C  5004               	movf	check_food@foodInput+1,w,c
  9351  00E69E  22DA               	addwfc	fsr2h,f,c
  9352  00E6A0  0E02               	movlw	2
  9353  00E6A2  18DE               	xorwf	postinc2,w,c
  9354  00E6A4  10DE               	iorwf	postinc2,w,c
  9355  00E6A6  A4D8               	btfss	status,2,c
  9356  00E6A8  EFEA  F077         	goto	l382
  9357                           
  9358                           ;standbyMode.c: 70: returnValue = 11;
  9359  00E6AC  0E00               	movlw	0
  9360  00E6AE  6E08               	movwf	check_food@returnValue+1,c
  9361  00E6B0  0E0B               	movlw	11
  9362  00E6B2  EFA4  F077         	goto	L87
  9363  00E6B6                     
  9364                           ;standbyMode.c: 76: if (foodInput[0] == 1 && foodInput[1] == 1){
  9365  00E6B6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9366  00E6BA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9367  00E6BE  04DE               	decf	postinc2,w,c
  9368  00E6C0  10DE               	iorwf	postinc2,w,c
  9369  00E6C2  A4D8               	btfss	status,2,c
  9370  00E6C4  D00F               	goto	l402
  9371  00E6C6  EE20 F002          	lfsr	2,2
  9372  00E6CA  5003               	movf	check_food@foodInput,w,c
  9373  00E6CC  26D9               	addwf	fsr2l,f,c
  9374  00E6CE  5004               	movf	check_food@foodInput+1,w,c
  9375  00E6D0  22DA               	addwfc	fsr2h,f,c
  9376  00E6D2  04DE               	decf	postinc2,w,c
  9377  00E6D4  10DE               	iorwf	postinc2,w,c
  9378  00E6D6  A4D8               	btfss	status,2,c
  9379  00E6D8  D005               	goto	l402
  9380                           
  9381                           ;standbyMode.c: 77: returnValue = 12;
  9382  00E6DA  0E00               	movlw	0
  9383  00E6DC  6E08               	movwf	check_food@returnValue+1,c
  9384  00E6DE  0E0C               	movlw	12
  9385  00E6E0  EFA4  F077         	goto	L87
  9386  00E6E4                     l402:
  9387                           
  9388                           ;standbyMode.c: 79: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9389  00E6E4  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9390  00E6E8  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9391  00E6EC  04DE               	decf	postinc2,w,c
  9392  00E6EE  10DE               	iorwf	postinc2,w,c
  9393  00E6F0  A4D8               	btfss	status,2,c
  9394  00E6F2  D010               	goto	l404
  9395  00E6F4  EE20 F002          	lfsr	2,2
  9396  00E6F8  5003               	movf	check_food@foodInput,w,c
  9397  00E6FA  26D9               	addwf	fsr2l,f,c
  9398  00E6FC  5004               	movf	check_food@foodInput+1,w,c
  9399  00E6FE  22DA               	addwfc	fsr2h,f,c
  9400  00E700  0E02               	movlw	2
  9401  00E702  18DE               	xorwf	postinc2,w,c
  9402  00E704  10DE               	iorwf	postinc2,w,c
  9403  00E706  A4D8               	btfss	status,2,c
  9404  00E708  D005               	goto	l404
  9405                           
  9406                           ;standbyMode.c: 80: returnValue = 13;
  9407  00E70A  0E00               	movlw	0
  9408  00E70C  6E08               	movwf	check_food@returnValue+1,c
  9409  00E70E  0E0D               	movlw	13
  9410  00E710  EFA4  F077         	goto	L87
  9411  00E714                     l404:
  9412                           
  9413                           ;standbyMode.c: 82: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9414  00E714  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9415  00E718  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9416  00E71C  04DE               	decf	postinc2,w,c
  9417  00E71E  10DE               	iorwf	postinc2,w,c
  9418  00E720  A4D8               	btfss	status,2,c
  9419  00E722  D010               	goto	l406
  9420  00E724  EE20 F002          	lfsr	2,2
  9421  00E728  5003               	movf	check_food@foodInput,w,c
  9422  00E72A  26D9               	addwf	fsr2l,f,c
  9423  00E72C  5004               	movf	check_food@foodInput+1,w,c
  9424  00E72E  22DA               	addwfc	fsr2h,f,c
  9425  00E730  0E03               	movlw	3
  9426  00E732  18DE               	xorwf	postinc2,w,c
  9427  00E734  10DE               	iorwf	postinc2,w,c
  9428  00E736  A4D8               	btfss	status,2,c
  9429  00E738  D005               	goto	l406
  9430                           
  9431                           ;standbyMode.c: 83: returnValue = 14;
  9432  00E73A  0E00               	movlw	0
  9433  00E73C  6E08               	movwf	check_food@returnValue+1,c
  9434  00E73E  0E0E               	movlw	14
  9435  00E740  EFA4  F077         	goto	L87
  9436  00E744                     l406:
  9437                           
  9438                           ;standbyMode.c: 85: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9439  00E744  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9440  00E748  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9441  00E74C  0E02               	movlw	2
  9442  00E74E  18DE               	xorwf	postinc2,w,c
  9443  00E750  10DE               	iorwf	postinc2,w,c
  9444  00E752  A4D8               	btfss	status,2,c
  9445  00E754  D00E               	goto	l408
  9446  00E756  EE20 F002          	lfsr	2,2
  9447  00E75A  5003               	movf	check_food@foodInput,w,c
  9448  00E75C  26D9               	addwf	fsr2l,f,c
  9449  00E75E  5004               	movf	check_food@foodInput+1,w,c
  9450  00E760  22DA               	addwfc	fsr2h,f,c
  9451  00E762  04DE               	decf	postinc2,w,c
  9452  00E764  10DE               	iorwf	postinc2,w,c
  9453  00E766  A4D8               	btfss	status,2,c
  9454  00E768  D004               	goto	l408
  9455                           
  9456                           ;standbyMode.c: 86: returnValue = 15;
  9457  00E76A  0E00               	movlw	0
  9458  00E76C  6E08               	movwf	check_food@returnValue+1,c
  9459  00E76E  0E0F               	movlw	15
  9460  00E770  D3EB               	goto	L87
  9461  00E772                     l408:
  9462                           
  9463                           ;standbyMode.c: 88: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9464  00E772  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9465  00E776  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9466  00E77A  0E02               	movlw	2
  9467  00E77C  18DE               	xorwf	postinc2,w,c
  9468  00E77E  10DE               	iorwf	postinc2,w,c
  9469  00E780  A4D8               	btfss	status,2,c
  9470  00E782  EFEA  F077         	goto	l382
  9471  00E786  EE20 F002          	lfsr	2,2
  9472  00E78A  5003               	movf	check_food@foodInput,w,c
  9473  00E78C  26D9               	addwf	fsr2l,f,c
  9474  00E78E  5004               	movf	check_food@foodInput+1,w,c
  9475  00E790  22DA               	addwfc	fsr2h,f,c
  9476  00E792  0E02               	movlw	2
  9477  00E794  18DE               	xorwf	postinc2,w,c
  9478  00E796  10DE               	iorwf	postinc2,w,c
  9479  00E798  A4D8               	btfss	status,2,c
  9480  00E79A  EFEA  F077         	goto	l382
  9481                           
  9482                           ;standbyMode.c: 89: returnValue = 16;
  9483  00E79E  0E00               	movlw	0
  9484  00E7A0  6E08               	movwf	check_food@returnValue+1,c
  9485  00E7A2  0E10               	movlw	16
  9486  00E7A4  D3D1               	goto	L87
  9487  00E7A6                     
  9488                           ;standbyMode.c: 95: if (foodInput[0] == 1 && foodInput[1] == 1){
  9489  00E7A6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9490  00E7AA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9491  00E7AE  04DE               	decf	postinc2,w,c
  9492  00E7B0  10DE               	iorwf	postinc2,w,c
  9493  00E7B2  A4D8               	btfss	status,2,c
  9494  00E7B4  D00E               	goto	l412
  9495  00E7B6  EE20 F002          	lfsr	2,2
  9496  00E7BA  5003               	movf	check_food@foodInput,w,c
  9497  00E7BC  26D9               	addwf	fsr2l,f,c
  9498  00E7BE  5004               	movf	check_food@foodInput+1,w,c
  9499  00E7C0  22DA               	addwfc	fsr2h,f,c
  9500  00E7C2  04DE               	decf	postinc2,w,c
  9501  00E7C4  10DE               	iorwf	postinc2,w,c
  9502  00E7C6  A4D8               	btfss	status,2,c
  9503  00E7C8  D004               	goto	l412
  9504                           
  9505                           ;standbyMode.c: 96: returnValue = 17;
  9506  00E7CA  0E00               	movlw	0
  9507  00E7CC  6E08               	movwf	check_food@returnValue+1,c
  9508  00E7CE  0E11               	movlw	17
  9509  00E7D0  D3BB               	goto	L87
  9510  00E7D2                     l412:
  9511                           
  9512                           ;standbyMode.c: 98: else if (foodInput[0] == 1 && foodInput[1] == 2){
  9513  00E7D2  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9514  00E7D6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9515  00E7DA  04DE               	decf	postinc2,w,c
  9516  00E7DC  10DE               	iorwf	postinc2,w,c
  9517  00E7DE  A4D8               	btfss	status,2,c
  9518  00E7E0  D00F               	goto	l414
  9519  00E7E2  EE20 F002          	lfsr	2,2
  9520  00E7E6  5003               	movf	check_food@foodInput,w,c
  9521  00E7E8  26D9               	addwf	fsr2l,f,c
  9522  00E7EA  5004               	movf	check_food@foodInput+1,w,c
  9523  00E7EC  22DA               	addwfc	fsr2h,f,c
  9524  00E7EE  0E02               	movlw	2
  9525  00E7F0  18DE               	xorwf	postinc2,w,c
  9526  00E7F2  10DE               	iorwf	postinc2,w,c
  9527  00E7F4  A4D8               	btfss	status,2,c
  9528  00E7F6  D004               	goto	l414
  9529                           
  9530                           ;standbyMode.c: 99: returnValue = 18;
  9531  00E7F8  0E00               	movlw	0
  9532  00E7FA  6E08               	movwf	check_food@returnValue+1,c
  9533  00E7FC  0E12               	movlw	18
  9534  00E7FE  D3A4               	goto	L87
  9535  00E800                     l414:
  9536                           
  9537                           ;standbyMode.c: 101: else if (foodInput[0] == 1 && foodInput[1] == 3){
  9538  00E800  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9539  00E804  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9540  00E808  04DE               	decf	postinc2,w,c
  9541  00E80A  10DE               	iorwf	postinc2,w,c
  9542  00E80C  A4D8               	btfss	status,2,c
  9543  00E80E  D00F               	goto	l416
  9544  00E810  EE20 F002          	lfsr	2,2
  9545  00E814  5003               	movf	check_food@foodInput,w,c
  9546  00E816  26D9               	addwf	fsr2l,f,c
  9547  00E818  5004               	movf	check_food@foodInput+1,w,c
  9548  00E81A  22DA               	addwfc	fsr2h,f,c
  9549  00E81C  0E03               	movlw	3
  9550  00E81E  18DE               	xorwf	postinc2,w,c
  9551  00E820  10DE               	iorwf	postinc2,w,c
  9552  00E822  A4D8               	btfss	status,2,c
  9553  00E824  D004               	goto	l416
  9554                           
  9555                           ;standbyMode.c: 102: returnValue = 19;
  9556  00E826  0E00               	movlw	0
  9557  00E828  6E08               	movwf	check_food@returnValue+1,c
  9558  00E82A  0E13               	movlw	19
  9559  00E82C  D38D               	goto	L87
  9560  00E82E                     l416:
  9561                           
  9562                           ;standbyMode.c: 104: else if (foodInput[0] == 2 && foodInput[1] == 1){
  9563  00E82E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9564  00E832  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9565  00E836  0E02               	movlw	2
  9566  00E838  18DE               	xorwf	postinc2,w,c
  9567  00E83A  10DE               	iorwf	postinc2,w,c
  9568  00E83C  A4D8               	btfss	status,2,c
  9569  00E83E  D00E               	goto	l418
  9570  00E840  EE20 F002          	lfsr	2,2
  9571  00E844  5003               	movf	check_food@foodInput,w,c
  9572  00E846  26D9               	addwf	fsr2l,f,c
  9573  00E848  5004               	movf	check_food@foodInput+1,w,c
  9574  00E84A  22DA               	addwfc	fsr2h,f,c
  9575  00E84C  04DE               	decf	postinc2,w,c
  9576  00E84E  10DE               	iorwf	postinc2,w,c
  9577  00E850  A4D8               	btfss	status,2,c
  9578  00E852  D004               	goto	l418
  9579                           
  9580                           ;standbyMode.c: 105: returnValue = 20;
  9581  00E854  0E00               	movlw	0
  9582  00E856  6E08               	movwf	check_food@returnValue+1,c
  9583  00E858  0E14               	movlw	20
  9584  00E85A  D376               	goto	L87
  9585  00E85C                     l418:
  9586                           
  9587                           ;standbyMode.c: 107: else if (foodInput[0] == 2 && foodInput[1] == 2){
  9588  00E85C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9589  00E860  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9590  00E864  0E02               	movlw	2
  9591  00E866  18DE               	xorwf	postinc2,w,c
  9592  00E868  10DE               	iorwf	postinc2,w,c
  9593  00E86A  A4D8               	btfss	status,2,c
  9594  00E86C  D3B3               	goto	l382
  9595  00E86E  EE20 F002          	lfsr	2,2
  9596  00E872  5003               	movf	check_food@foodInput,w,c
  9597  00E874  26D9               	addwf	fsr2l,f,c
  9598  00E876  5004               	movf	check_food@foodInput+1,w,c
  9599  00E878  22DA               	addwfc	fsr2h,f,c
  9600  00E87A  0E02               	movlw	2
  9601  00E87C  18DE               	xorwf	postinc2,w,c
  9602  00E87E  10DE               	iorwf	postinc2,w,c
  9603  00E880  A4D8               	btfss	status,2,c
  9604  00E882  D3A8               	goto	l382
  9605                           
  9606                           ;standbyMode.c: 108: returnValue = 21;
  9607  00E884  0E00               	movlw	0
  9608  00E886  6E08               	movwf	check_food@returnValue+1,c
  9609  00E888  0E15               	movlw	21
  9610  00E88A  D35E               	goto	L87
  9611  00E88C                     
  9612                           ;standbyMode.c: 114: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9613  00E88C  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9614  00E890  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9615  00E894  04DE               	decf	postinc2,w,c
  9616  00E896  10DE               	iorwf	postinc2,w,c
  9617  00E898  A4D8               	btfss	status,2,c
  9618  00E89A  D018               	goto	l422
  9619  00E89C  EE20 F002          	lfsr	2,2
  9620  00E8A0  5003               	movf	check_food@foodInput,w,c
  9621  00E8A2  26D9               	addwf	fsr2l,f,c
  9622  00E8A4  5004               	movf	check_food@foodInput+1,w,c
  9623  00E8A6  22DA               	addwfc	fsr2h,f,c
  9624  00E8A8  04DE               	decf	postinc2,w,c
  9625  00E8AA  10DE               	iorwf	postinc2,w,c
  9626  00E8AC  A4D8               	btfss	status,2,c
  9627  00E8AE  D00E               	goto	l422
  9628  00E8B0  EE20 F004          	lfsr	2,4
  9629  00E8B4  5003               	movf	check_food@foodInput,w,c
  9630  00E8B6  26D9               	addwf	fsr2l,f,c
  9631  00E8B8  5004               	movf	check_food@foodInput+1,w,c
  9632  00E8BA  22DA               	addwfc	fsr2h,f,c
  9633  00E8BC  04DE               	decf	postinc2,w,c
  9634  00E8BE  10DE               	iorwf	postinc2,w,c
  9635  00E8C0  A4D8               	btfss	status,2,c
  9636  00E8C2  D004               	goto	l422
  9637                           
  9638                           ;standbyMode.c: 115: returnValue = 22;
  9639  00E8C4  0E00               	movlw	0
  9640  00E8C6  6E08               	movwf	check_food@returnValue+1,c
  9641  00E8C8  0E16               	movlw	22
  9642  00E8CA  D33E               	goto	L87
  9643  00E8CC                     l422:
  9644                           
  9645                           ;standbyMode.c: 117: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9646  00E8CC  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9647  00E8D0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9648  00E8D4  04DE               	decf	postinc2,w,c
  9649  00E8D6  10DE               	iorwf	postinc2,w,c
  9650  00E8D8  A4D8               	btfss	status,2,c
  9651  00E8DA  D37C               	goto	l382
  9652  00E8DC  EE20 F002          	lfsr	2,2
  9653  00E8E0  5003               	movf	check_food@foodInput,w,c
  9654  00E8E2  26D9               	addwf	fsr2l,f,c
  9655  00E8E4  5004               	movf	check_food@foodInput+1,w,c
  9656  00E8E6  22DA               	addwfc	fsr2h,f,c
  9657  00E8E8  04DE               	decf	postinc2,w,c
  9658  00E8EA  10DE               	iorwf	postinc2,w,c
  9659  00E8EC  A4D8               	btfss	status,2,c
  9660  00E8EE  D372               	goto	l382
  9661  00E8F0  EE20 F004          	lfsr	2,4
  9662  00E8F4  5003               	movf	check_food@foodInput,w,c
  9663  00E8F6  26D9               	addwf	fsr2l,f,c
  9664  00E8F8  5004               	movf	check_food@foodInput+1,w,c
  9665  00E8FA  22DA               	addwfc	fsr2h,f,c
  9666  00E8FC  0E02               	movlw	2
  9667  00E8FE  18DE               	xorwf	postinc2,w,c
  9668  00E900  10DE               	iorwf	postinc2,w,c
  9669  00E902  A4D8               	btfss	status,2,c
  9670  00E904  D367               	goto	l382
  9671                           
  9672                           ;standbyMode.c: 118: returnValue = 23;
  9673  00E906  0E00               	movlw	0
  9674  00E908  6E08               	movwf	check_food@returnValue+1,c
  9675  00E90A  0E17               	movlw	23
  9676  00E90C  D31D               	goto	L87
  9677  00E90E                     
  9678                           ;standbyMode.c: 124: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9679  00E90E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9680  00E912  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9681  00E916  04DE               	decf	postinc2,w,c
  9682  00E918  10DE               	iorwf	postinc2,w,c
  9683  00E91A  A4D8               	btfss	status,2,c
  9684  00E91C  D018               	goto	l426
  9685  00E91E  EE20 F002          	lfsr	2,2
  9686  00E922  5003               	movf	check_food@foodInput,w,c
  9687  00E924  26D9               	addwf	fsr2l,f,c
  9688  00E926  5004               	movf	check_food@foodInput+1,w,c
  9689  00E928  22DA               	addwfc	fsr2h,f,c
  9690  00E92A  04DE               	decf	postinc2,w,c
  9691  00E92C  10DE               	iorwf	postinc2,w,c
  9692  00E92E  A4D8               	btfss	status,2,c
  9693  00E930  D00E               	goto	l426
  9694  00E932  EE20 F004          	lfsr	2,4
  9695  00E936  5003               	movf	check_food@foodInput,w,c
  9696  00E938  26D9               	addwf	fsr2l,f,c
  9697  00E93A  5004               	movf	check_food@foodInput+1,w,c
  9698  00E93C  22DA               	addwfc	fsr2h,f,c
  9699  00E93E  04DE               	decf	postinc2,w,c
  9700  00E940  10DE               	iorwf	postinc2,w,c
  9701  00E942  A4D8               	btfss	status,2,c
  9702  00E944  D004               	goto	l426
  9703                           
  9704                           ;standbyMode.c: 125: returnValue = 24;
  9705  00E946  0E00               	movlw	0
  9706  00E948  6E08               	movwf	check_food@returnValue+1,c
  9707  00E94A  0E18               	movlw	24
  9708  00E94C  D2FD               	goto	L87
  9709  00E94E                     l426:
  9710                           
  9711                           ;standbyMode.c: 127: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9712  00E94E  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9713  00E952  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9714  00E956  04DE               	decf	postinc2,w,c
  9715  00E958  10DE               	iorwf	postinc2,w,c
  9716  00E95A  A4D8               	btfss	status,2,c
  9717  00E95C  D33B               	goto	l382
  9718  00E95E  EE20 F002          	lfsr	2,2
  9719  00E962  5003               	movf	check_food@foodInput,w,c
  9720  00E964  26D9               	addwf	fsr2l,f,c
  9721  00E966  5004               	movf	check_food@foodInput+1,w,c
  9722  00E968  22DA               	addwfc	fsr2h,f,c
  9723  00E96A  04DE               	decf	postinc2,w,c
  9724  00E96C  10DE               	iorwf	postinc2,w,c
  9725  00E96E  A4D8               	btfss	status,2,c
  9726  00E970  D331               	goto	l382
  9727  00E972  EE20 F004          	lfsr	2,4
  9728  00E976  5003               	movf	check_food@foodInput,w,c
  9729  00E978  26D9               	addwf	fsr2l,f,c
  9730  00E97A  5004               	movf	check_food@foodInput+1,w,c
  9731  00E97C  22DA               	addwfc	fsr2h,f,c
  9732  00E97E  0E02               	movlw	2
  9733  00E980  18DE               	xorwf	postinc2,w,c
  9734  00E982  10DE               	iorwf	postinc2,w,c
  9735  00E984  A4D8               	btfss	status,2,c
  9736  00E986  D326               	goto	l382
  9737                           
  9738                           ;standbyMode.c: 128: returnValue = 25;
  9739  00E988  0E00               	movlw	0
  9740  00E98A  6E08               	movwf	check_food@returnValue+1,c
  9741  00E98C  0E19               	movlw	25
  9742  00E98E  D2DC               	goto	L87
  9743  00E990                     
  9744                           ;standbyMode.c: 134: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9745  00E990  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9746  00E994  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9747  00E998  04DE               	decf	postinc2,w,c
  9748  00E99A  10DE               	iorwf	postinc2,w,c
  9749  00E99C  A4D8               	btfss	status,2,c
  9750  00E99E  D018               	goto	l430
  9751  00E9A0  EE20 F002          	lfsr	2,2
  9752  00E9A4  5003               	movf	check_food@foodInput,w,c
  9753  00E9A6  26D9               	addwf	fsr2l,f,c
  9754  00E9A8  5004               	movf	check_food@foodInput+1,w,c
  9755  00E9AA  22DA               	addwfc	fsr2h,f,c
  9756  00E9AC  04DE               	decf	postinc2,w,c
  9757  00E9AE  10DE               	iorwf	postinc2,w,c
  9758  00E9B0  A4D8               	btfss	status,2,c
  9759  00E9B2  D00E               	goto	l430
  9760  00E9B4  EE20 F004          	lfsr	2,4
  9761  00E9B8  5003               	movf	check_food@foodInput,w,c
  9762  00E9BA  26D9               	addwf	fsr2l,f,c
  9763  00E9BC  5004               	movf	check_food@foodInput+1,w,c
  9764  00E9BE  22DA               	addwfc	fsr2h,f,c
  9765  00E9C0  04DE               	decf	postinc2,w,c
  9766  00E9C2  10DE               	iorwf	postinc2,w,c
  9767  00E9C4  A4D8               	btfss	status,2,c
  9768  00E9C6  D004               	goto	l430
  9769                           
  9770                           ;standbyMode.c: 135: returnValue = 26;
  9771  00E9C8  0E00               	movlw	0
  9772  00E9CA  6E08               	movwf	check_food@returnValue+1,c
  9773  00E9CC  0E1A               	movlw	26
  9774  00E9CE  D2BC               	goto	L87
  9775  00E9D0                     l430:
  9776                           
  9777                           ;standbyMode.c: 137: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9778  00E9D0  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9779  00E9D4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9780  00E9D8  0E02               	movlw	2
  9781  00E9DA  18DE               	xorwf	postinc2,w,c
  9782  00E9DC  10DE               	iorwf	postinc2,w,c
  9783  00E9DE  A4D8               	btfss	status,2,c
  9784  00E9E0  D2F9               	goto	l382
  9785  00E9E2  EE20 F002          	lfsr	2,2
  9786  00E9E6  5003               	movf	check_food@foodInput,w,c
  9787  00E9E8  26D9               	addwf	fsr2l,f,c
  9788  00E9EA  5004               	movf	check_food@foodInput+1,w,c
  9789  00E9EC  22DA               	addwfc	fsr2h,f,c
  9790  00E9EE  04DE               	decf	postinc2,w,c
  9791  00E9F0  10DE               	iorwf	postinc2,w,c
  9792  00E9F2  A4D8               	btfss	status,2,c
  9793  00E9F4  D2EF               	goto	l382
  9794  00E9F6  EE20 F004          	lfsr	2,4
  9795  00E9FA  5003               	movf	check_food@foodInput,w,c
  9796  00E9FC  26D9               	addwf	fsr2l,f,c
  9797  00E9FE  5004               	movf	check_food@foodInput+1,w,c
  9798  00EA00  22DA               	addwfc	fsr2h,f,c
  9799  00EA02  04DE               	decf	postinc2,w,c
  9800  00EA04  10DE               	iorwf	postinc2,w,c
  9801  00EA06  A4D8               	btfss	status,2,c
  9802  00EA08  D2E5               	goto	l382
  9803                           
  9804                           ;standbyMode.c: 138: returnValue = 27;
  9805  00EA0A  0E00               	movlw	0
  9806  00EA0C  6E08               	movwf	check_food@returnValue+1,c
  9807  00EA0E  0E1B               	movlw	27
  9808  00EA10  D29B               	goto	L87
  9809  00EA12                     
  9810                           ;standbyMode.c: 144: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9811  00EA12  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9812  00EA16  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9813  00EA1A  04DE               	decf	postinc2,w,c
  9814  00EA1C  10DE               	iorwf	postinc2,w,c
  9815  00EA1E  A4D8               	btfss	status,2,c
  9816  00EA20  D018               	goto	l434
  9817  00EA22  EE20 F002          	lfsr	2,2
  9818  00EA26  5003               	movf	check_food@foodInput,w,c
  9819  00EA28  26D9               	addwf	fsr2l,f,c
  9820  00EA2A  5004               	movf	check_food@foodInput+1,w,c
  9821  00EA2C  22DA               	addwfc	fsr2h,f,c
  9822  00EA2E  04DE               	decf	postinc2,w,c
  9823  00EA30  10DE               	iorwf	postinc2,w,c
  9824  00EA32  A4D8               	btfss	status,2,c
  9825  00EA34  D00E               	goto	l434
  9826  00EA36  EE20 F004          	lfsr	2,4
  9827  00EA3A  5003               	movf	check_food@foodInput,w,c
  9828  00EA3C  26D9               	addwf	fsr2l,f,c
  9829  00EA3E  5004               	movf	check_food@foodInput+1,w,c
  9830  00EA40  22DA               	addwfc	fsr2h,f,c
  9831  00EA42  04DE               	decf	postinc2,w,c
  9832  00EA44  10DE               	iorwf	postinc2,w,c
  9833  00EA46  A4D8               	btfss	status,2,c
  9834  00EA48  D004               	goto	l434
  9835                           
  9836                           ;standbyMode.c: 145: returnValue = 28;
  9837  00EA4A  0E00               	movlw	0
  9838  00EA4C  6E08               	movwf	check_food@returnValue+1,c
  9839  00EA4E  0E1C               	movlw	28
  9840  00EA50  D27B               	goto	L87
  9841  00EA52                     l434:
  9842                           
  9843                           ;standbyMode.c: 147: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9844  00EA52  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9845  00EA56  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9846  00EA5A  04DE               	decf	postinc2,w,c
  9847  00EA5C  10DE               	iorwf	postinc2,w,c
  9848  00EA5E  A4D8               	btfss	status,2,c
  9849  00EA60  D019               	goto	l436
  9850  00EA62  EE20 F002          	lfsr	2,2
  9851  00EA66  5003               	movf	check_food@foodInput,w,c
  9852  00EA68  26D9               	addwf	fsr2l,f,c
  9853  00EA6A  5004               	movf	check_food@foodInput+1,w,c
  9854  00EA6C  22DA               	addwfc	fsr2h,f,c
  9855  00EA6E  04DE               	decf	postinc2,w,c
  9856  00EA70  10DE               	iorwf	postinc2,w,c
  9857  00EA72  A4D8               	btfss	status,2,c
  9858  00EA74  D00F               	goto	l436
  9859  00EA76  EE20 F004          	lfsr	2,4
  9860  00EA7A  5003               	movf	check_food@foodInput,w,c
  9861  00EA7C  26D9               	addwf	fsr2l,f,c
  9862  00EA7E  5004               	movf	check_food@foodInput+1,w,c
  9863  00EA80  22DA               	addwfc	fsr2h,f,c
  9864  00EA82  0E02               	movlw	2
  9865  00EA84  18DE               	xorwf	postinc2,w,c
  9866  00EA86  10DE               	iorwf	postinc2,w,c
  9867  00EA88  A4D8               	btfss	status,2,c
  9868  00EA8A  D004               	goto	l436
  9869                           
  9870                           ;standbyMode.c: 148: returnValue = 29;
  9871  00EA8C  0E00               	movlw	0
  9872  00EA8E  6E08               	movwf	check_food@returnValue+1,c
  9873  00EA90  0E1D               	movlw	29
  9874  00EA92  D25A               	goto	L87
  9875  00EA94                     l436:
  9876                           
  9877                           ;standbyMode.c: 150: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
  9878  00EA94  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9879  00EA98  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9880  00EA9C  04DE               	decf	postinc2,w,c
  9881  00EA9E  10DE               	iorwf	postinc2,w,c
  9882  00EAA0  A4D8               	btfss	status,2,c
  9883  00EAA2  D019               	goto	l438
  9884  00EAA4  EE20 F002          	lfsr	2,2
  9885  00EAA8  5003               	movf	check_food@foodInput,w,c
  9886  00EAAA  26D9               	addwf	fsr2l,f,c
  9887  00EAAC  5004               	movf	check_food@foodInput+1,w,c
  9888  00EAAE  22DA               	addwfc	fsr2h,f,c
  9889  00EAB0  0E02               	movlw	2
  9890  00EAB2  18DE               	xorwf	postinc2,w,c
  9891  00EAB4  10DE               	iorwf	postinc2,w,c
  9892  00EAB6  A4D8               	btfss	status,2,c
  9893  00EAB8  D00E               	goto	l438
  9894  00EABA  EE20 F004          	lfsr	2,4
  9895  00EABE  5003               	movf	check_food@foodInput,w,c
  9896  00EAC0  26D9               	addwf	fsr2l,f,c
  9897  00EAC2  5004               	movf	check_food@foodInput+1,w,c
  9898  00EAC4  22DA               	addwfc	fsr2h,f,c
  9899  00EAC6  04DE               	decf	postinc2,w,c
  9900  00EAC8  10DE               	iorwf	postinc2,w,c
  9901  00EACA  A4D8               	btfss	status,2,c
  9902  00EACC  D004               	goto	l438
  9903                           
  9904                           ;standbyMode.c: 151: returnValue = 30;
  9905  00EACE  0E00               	movlw	0
  9906  00EAD0  6E08               	movwf	check_food@returnValue+1,c
  9907  00EAD2  0E1E               	movlw	30
  9908  00EAD4  D239               	goto	L87
  9909  00EAD6                     l438:
  9910                           
  9911                           ;standbyMode.c: 153: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
  9912  00EAD6  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9913  00EADA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9914  00EADE  0E02               	movlw	2
  9915  00EAE0  18DE               	xorwf	postinc2,w,c
  9916  00EAE2  10DE               	iorwf	postinc2,w,c
  9917  00EAE4  A4D8               	btfss	status,2,c
  9918  00EAE6  D276               	goto	l382
  9919  00EAE8  EE20 F002          	lfsr	2,2
  9920  00EAEC  5003               	movf	check_food@foodInput,w,c
  9921  00EAEE  26D9               	addwf	fsr2l,f,c
  9922  00EAF0  5004               	movf	check_food@foodInput+1,w,c
  9923  00EAF2  22DA               	addwfc	fsr2h,f,c
  9924  00EAF4  04DE               	decf	postinc2,w,c
  9925  00EAF6  10DE               	iorwf	postinc2,w,c
  9926  00EAF8  A4D8               	btfss	status,2,c
  9927  00EAFA  D26C               	goto	l382
  9928  00EAFC  EE20 F004          	lfsr	2,4
  9929  00EB00  5003               	movf	check_food@foodInput,w,c
  9930  00EB02  26D9               	addwf	fsr2l,f,c
  9931  00EB04  5004               	movf	check_food@foodInput+1,w,c
  9932  00EB06  22DA               	addwfc	fsr2h,f,c
  9933  00EB08  04DE               	decf	postinc2,w,c
  9934  00EB0A  10DE               	iorwf	postinc2,w,c
  9935  00EB0C  A4D8               	btfss	status,2,c
  9936  00EB0E  D262               	goto	l382
  9937                           
  9938                           ;standbyMode.c: 154: returnValue = 31;
  9939  00EB10  0E00               	movlw	0
  9940  00EB12  6E08               	movwf	check_food@returnValue+1,c
  9941  00EB14  0E1F               	movlw	31
  9942  00EB16  D218               	goto	L87
  9943  00EB18                     
  9944                           ;standbyMode.c: 160: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
  9945  00EB18  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9946  00EB1C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9947  00EB20  04DE               	decf	postinc2,w,c
  9948  00EB22  10DE               	iorwf	postinc2,w,c
  9949  00EB24  A4D8               	btfss	status,2,c
  9950  00EB26  D018               	goto	l442
  9951  00EB28  EE20 F002          	lfsr	2,2
  9952  00EB2C  5003               	movf	check_food@foodInput,w,c
  9953  00EB2E  26D9               	addwf	fsr2l,f,c
  9954  00EB30  5004               	movf	check_food@foodInput+1,w,c
  9955  00EB32  22DA               	addwfc	fsr2h,f,c
  9956  00EB34  04DE               	decf	postinc2,w,c
  9957  00EB36  10DE               	iorwf	postinc2,w,c
  9958  00EB38  A4D8               	btfss	status,2,c
  9959  00EB3A  D00E               	goto	l442
  9960  00EB3C  EE20 F004          	lfsr	2,4
  9961  00EB40  5003               	movf	check_food@foodInput,w,c
  9962  00EB42  26D9               	addwf	fsr2l,f,c
  9963  00EB44  5004               	movf	check_food@foodInput+1,w,c
  9964  00EB46  22DA               	addwfc	fsr2h,f,c
  9965  00EB48  04DE               	decf	postinc2,w,c
  9966  00EB4A  10DE               	iorwf	postinc2,w,c
  9967  00EB4C  A4D8               	btfss	status,2,c
  9968  00EB4E  D004               	goto	l442
  9969                           
  9970                           ;standbyMode.c: 161: returnValue = 32;
  9971  00EB50  0E00               	movlw	0
  9972  00EB52  6E08               	movwf	check_food@returnValue+1,c
  9973  00EB54  0E20               	movlw	32
  9974  00EB56  D1F8               	goto	L87
  9975  00EB58                     l442:
  9976                           
  9977                           ;standbyMode.c: 163: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
  9978  00EB58  C003  FFD9         	movff	check_food@foodInput,fsr2l
  9979  00EB5C  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
  9980  00EB60  04DE               	decf	postinc2,w,c
  9981  00EB62  10DE               	iorwf	postinc2,w,c
  9982  00EB64  A4D8               	btfss	status,2,c
  9983  00EB66  D019               	goto	l444
  9984  00EB68  EE20 F002          	lfsr	2,2
  9985  00EB6C  5003               	movf	check_food@foodInput,w,c
  9986  00EB6E  26D9               	addwf	fsr2l,f,c
  9987  00EB70  5004               	movf	check_food@foodInput+1,w,c
  9988  00EB72  22DA               	addwfc	fsr2h,f,c
  9989  00EB74  04DE               	decf	postinc2,w,c
  9990  00EB76  10DE               	iorwf	postinc2,w,c
  9991  00EB78  A4D8               	btfss	status,2,c
  9992  00EB7A  D00F               	goto	l444
  9993  00EB7C  EE20 F004          	lfsr	2,4
  9994  00EB80  5003               	movf	check_food@foodInput,w,c
  9995  00EB82  26D9               	addwf	fsr2l,f,c
  9996  00EB84  5004               	movf	check_food@foodInput+1,w,c
  9997  00EB86  22DA               	addwfc	fsr2h,f,c
  9998  00EB88  0E02               	movlw	2
  9999  00EB8A  18DE               	xorwf	postinc2,w,c
 10000  00EB8C  10DE               	iorwf	postinc2,w,c
 10001  00EB8E  A4D8               	btfss	status,2,c
 10002  00EB90  D004               	goto	l444
 10003                           
 10004                           ;standbyMode.c: 164: returnValue = 33;
 10005  00EB92  0E00               	movlw	0
 10006  00EB94  6E08               	movwf	check_food@returnValue+1,c
 10007  00EB96  0E21               	movlw	33
 10008  00EB98  D1D7               	goto	L87
 10009  00EB9A                     l444:
 10010                           
 10011                           ;standbyMode.c: 166: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10012  00EB9A  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10013  00EB9E  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10014  00EBA2  04DE               	decf	postinc2,w,c
 10015  00EBA4  10DE               	iorwf	postinc2,w,c
 10016  00EBA6  A4D8               	btfss	status,2,c
 10017  00EBA8  D019               	goto	l446
 10018  00EBAA  EE20 F002          	lfsr	2,2
 10019  00EBAE  5003               	movf	check_food@foodInput,w,c
 10020  00EBB0  26D9               	addwf	fsr2l,f,c
 10021  00EBB2  5004               	movf	check_food@foodInput+1,w,c
 10022  00EBB4  22DA               	addwfc	fsr2h,f,c
 10023  00EBB6  0E02               	movlw	2
 10024  00EBB8  18DE               	xorwf	postinc2,w,c
 10025  00EBBA  10DE               	iorwf	postinc2,w,c
 10026  00EBBC  A4D8               	btfss	status,2,c
 10027  00EBBE  D00E               	goto	l446
 10028  00EBC0  EE20 F004          	lfsr	2,4
 10029  00EBC4  5003               	movf	check_food@foodInput,w,c
 10030  00EBC6  26D9               	addwf	fsr2l,f,c
 10031  00EBC8  5004               	movf	check_food@foodInput+1,w,c
 10032  00EBCA  22DA               	addwfc	fsr2h,f,c
 10033  00EBCC  04DE               	decf	postinc2,w,c
 10034  00EBCE  10DE               	iorwf	postinc2,w,c
 10035  00EBD0  A4D8               	btfss	status,2,c
 10036  00EBD2  D004               	goto	l446
 10037                           
 10038                           ;standbyMode.c: 167: returnValue = 34;
 10039  00EBD4  0E00               	movlw	0
 10040  00EBD6  6E08               	movwf	check_food@returnValue+1,c
 10041  00EBD8  0E22               	movlw	34
 10042  00EBDA  D1B6               	goto	L87
 10043  00EBDC                     l446:
 10044                           
 10045                           ;standbyMode.c: 169: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10046  00EBDC  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10047  00EBE0  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10048  00EBE4  0E02               	movlw	2
 10049  00EBE6  18DE               	xorwf	postinc2,w,c
 10050  00EBE8  10DE               	iorwf	postinc2,w,c
 10051  00EBEA  A4D8               	btfss	status,2,c
 10052  00EBEC  D1F3               	goto	l382
 10053  00EBEE  EE20 F002          	lfsr	2,2
 10054  00EBF2  5003               	movf	check_food@foodInput,w,c
 10055  00EBF4  26D9               	addwf	fsr2l,f,c
 10056  00EBF6  5004               	movf	check_food@foodInput+1,w,c
 10057  00EBF8  22DA               	addwfc	fsr2h,f,c
 10058  00EBFA  04DE               	decf	postinc2,w,c
 10059  00EBFC  10DE               	iorwf	postinc2,w,c
 10060  00EBFE  A4D8               	btfss	status,2,c
 10061  00EC00  D1E9               	goto	l382
 10062  00EC02  EE20 F004          	lfsr	2,4
 10063  00EC06  5003               	movf	check_food@foodInput,w,c
 10064  00EC08  26D9               	addwf	fsr2l,f,c
 10065  00EC0A  5004               	movf	check_food@foodInput+1,w,c
 10066  00EC0C  22DA               	addwfc	fsr2h,f,c
 10067  00EC0E  04DE               	decf	postinc2,w,c
 10068  00EC10  10DE               	iorwf	postinc2,w,c
 10069  00EC12  A4D8               	btfss	status,2,c
 10070  00EC14  D1DF               	goto	l382
 10071                           
 10072                           ;standbyMode.c: 170: returnValue = 35;
 10073  00EC16  0E00               	movlw	0
 10074  00EC18  6E08               	movwf	check_food@returnValue+1,c
 10075  00EC1A  0E23               	movlw	35
 10076  00EC1C  D195               	goto	L87
 10077  00EC1E                     
 10078                           ;standbyMode.c: 176: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10079  00EC1E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10080  00EC22  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10081  00EC26  04DE               	decf	postinc2,w,c
 10082  00EC28  10DE               	iorwf	postinc2,w,c
 10083  00EC2A  A4D8               	btfss	status,2,c
 10084  00EC2C  D018               	goto	l450
 10085  00EC2E  EE20 F002          	lfsr	2,2
 10086  00EC32  5003               	movf	check_food@foodInput,w,c
 10087  00EC34  26D9               	addwf	fsr2l,f,c
 10088  00EC36  5004               	movf	check_food@foodInput+1,w,c
 10089  00EC38  22DA               	addwfc	fsr2h,f,c
 10090  00EC3A  04DE               	decf	postinc2,w,c
 10091  00EC3C  10DE               	iorwf	postinc2,w,c
 10092  00EC3E  A4D8               	btfss	status,2,c
 10093  00EC40  D00E               	goto	l450
 10094  00EC42  EE20 F004          	lfsr	2,4
 10095  00EC46  5003               	movf	check_food@foodInput,w,c
 10096  00EC48  26D9               	addwf	fsr2l,f,c
 10097  00EC4A  5004               	movf	check_food@foodInput+1,w,c
 10098  00EC4C  22DA               	addwfc	fsr2h,f,c
 10099  00EC4E  04DE               	decf	postinc2,w,c
 10100  00EC50  10DE               	iorwf	postinc2,w,c
 10101  00EC52  A4D8               	btfss	status,2,c
 10102  00EC54  D004               	goto	l450
 10103                           
 10104                           ;standbyMode.c: 177: returnValue = 36;
 10105  00EC56  0E00               	movlw	0
 10106  00EC58  6E08               	movwf	check_food@returnValue+1,c
 10107  00EC5A  0E24               	movlw	36
 10108  00EC5C  D175               	goto	L87
 10109  00EC5E                     l450:
 10110                           
 10111                           ;standbyMode.c: 179: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10112  00EC5E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10113  00EC62  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10114  00EC66  04DE               	decf	postinc2,w,c
 10115  00EC68  10DE               	iorwf	postinc2,w,c
 10116  00EC6A  A4D8               	btfss	status,2,c
 10117  00EC6C  D1B3               	goto	l382
 10118  00EC6E  EE20 F002          	lfsr	2,2
 10119  00EC72  5003               	movf	check_food@foodInput,w,c
 10120  00EC74  26D9               	addwf	fsr2l,f,c
 10121  00EC76  5004               	movf	check_food@foodInput+1,w,c
 10122  00EC78  22DA               	addwfc	fsr2h,f,c
 10123  00EC7A  04DE               	decf	postinc2,w,c
 10124  00EC7C  10DE               	iorwf	postinc2,w,c
 10125  00EC7E  A4D8               	btfss	status,2,c
 10126  00EC80  D1A9               	goto	l382
 10127  00EC82  EE20 F004          	lfsr	2,4
 10128  00EC86  5003               	movf	check_food@foodInput,w,c
 10129  00EC88  26D9               	addwf	fsr2l,f,c
 10130  00EC8A  5004               	movf	check_food@foodInput+1,w,c
 10131  00EC8C  22DA               	addwfc	fsr2h,f,c
 10132  00EC8E  0E02               	movlw	2
 10133  00EC90  18DE               	xorwf	postinc2,w,c
 10134  00EC92  10DE               	iorwf	postinc2,w,c
 10135  00EC94  A4D8               	btfss	status,2,c
 10136  00EC96  D19E               	goto	l382
 10137                           
 10138                           ;standbyMode.c: 180: returnValue = 37;
 10139  00EC98  0E00               	movlw	0
 10140  00EC9A  6E08               	movwf	check_food@returnValue+1,c
 10141  00EC9C  0E25               	movlw	37
 10142  00EC9E  D154               	goto	L87
 10143  00ECA0                     
 10144                           ;standbyMode.c: 186: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1){
 10145  00ECA0  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10146  00ECA4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10147  00ECA8  04DE               	decf	postinc2,w,c
 10148  00ECAA  10DE               	iorwf	postinc2,w,c
 10149  00ECAC  A4D8               	btfss	status,2,c
 10150  00ECAE  D018               	goto	l454
 10151  00ECB0  EE20 F002          	lfsr	2,2
 10152  00ECB4  5003               	movf	check_food@foodInput,w,c
 10153  00ECB6  26D9               	addwf	fsr2l,f,c
 10154  00ECB8  5004               	movf	check_food@foodInput+1,w,c
 10155  00ECBA  22DA               	addwfc	fsr2h,f,c
 10156  00ECBC  04DE               	decf	postinc2,w,c
 10157  00ECBE  10DE               	iorwf	postinc2,w,c
 10158  00ECC0  A4D8               	btfss	status,2,c
 10159  00ECC2  D00E               	goto	l454
 10160  00ECC4  EE20 F004          	lfsr	2,4
 10161  00ECC8  5003               	movf	check_food@foodInput,w,c
 10162  00ECCA  26D9               	addwf	fsr2l,f,c
 10163  00ECCC  5004               	movf	check_food@foodInput+1,w,c
 10164  00ECCE  22DA               	addwfc	fsr2h,f,c
 10165  00ECD0  04DE               	decf	postinc2,w,c
 10166  00ECD2  10DE               	iorwf	postinc2,w,c
 10167  00ECD4  A4D8               	btfss	status,2,c
 10168  00ECD6  D004               	goto	l454
 10169                           
 10170                           ;standbyMode.c: 187: returnValue = 38;
 10171  00ECD8  0E00               	movlw	0
 10172  00ECDA  6E08               	movwf	check_food@returnValue+1,c
 10173  00ECDC  0E26               	movlw	38
 10174  00ECDE  D134               	goto	L87
 10175  00ECE0                     l454:
 10176                           
 10177                           ;standbyMode.c: 189: else if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 
      +                          2){
 10178  00ECE0  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10179  00ECE4  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10180  00ECE8  04DE               	decf	postinc2,w,c
 10181  00ECEA  10DE               	iorwf	postinc2,w,c
 10182  00ECEC  A4D8               	btfss	status,2,c
 10183  00ECEE  D019               	goto	l456
 10184  00ECF0  EE20 F002          	lfsr	2,2
 10185  00ECF4  5003               	movf	check_food@foodInput,w,c
 10186  00ECF6  26D9               	addwf	fsr2l,f,c
 10187  00ECF8  5004               	movf	check_food@foodInput+1,w,c
 10188  00ECFA  22DA               	addwfc	fsr2h,f,c
 10189  00ECFC  04DE               	decf	postinc2,w,c
 10190  00ECFE  10DE               	iorwf	postinc2,w,c
 10191  00ED00  A4D8               	btfss	status,2,c
 10192  00ED02  D00F               	goto	l456
 10193  00ED04  EE20 F004          	lfsr	2,4
 10194  00ED08  5003               	movf	check_food@foodInput,w,c
 10195  00ED0A  26D9               	addwf	fsr2l,f,c
 10196  00ED0C  5004               	movf	check_food@foodInput+1,w,c
 10197  00ED0E  22DA               	addwfc	fsr2h,f,c
 10198  00ED10  0E02               	movlw	2
 10199  00ED12  18DE               	xorwf	postinc2,w,c
 10200  00ED14  10DE               	iorwf	postinc2,w,c
 10201  00ED16  A4D8               	btfss	status,2,c
 10202  00ED18  D004               	goto	l456
 10203                           
 10204                           ;standbyMode.c: 190: returnValue = 39;
 10205  00ED1A  0E00               	movlw	0
 10206  00ED1C  6E08               	movwf	check_food@returnValue+1,c
 10207  00ED1E  0E27               	movlw	39
 10208  00ED20  D113               	goto	L87
 10209  00ED22                     l456:
 10210                           
 10211                           ;standbyMode.c: 192: else if (foodInput[0] == 1 && foodInput[1] == 2 && foodInput[2] == 
      +                          1){
 10212  00ED22  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10213  00ED26  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10214  00ED2A  04DE               	decf	postinc2,w,c
 10215  00ED2C  10DE               	iorwf	postinc2,w,c
 10216  00ED2E  A4D8               	btfss	status,2,c
 10217  00ED30  D019               	goto	l458
 10218  00ED32  EE20 F002          	lfsr	2,2
 10219  00ED36  5003               	movf	check_food@foodInput,w,c
 10220  00ED38  26D9               	addwf	fsr2l,f,c
 10221  00ED3A  5004               	movf	check_food@foodInput+1,w,c
 10222  00ED3C  22DA               	addwfc	fsr2h,f,c
 10223  00ED3E  0E02               	movlw	2
 10224  00ED40  18DE               	xorwf	postinc2,w,c
 10225  00ED42  10DE               	iorwf	postinc2,w,c
 10226  00ED44  A4D8               	btfss	status,2,c
 10227  00ED46  D00E               	goto	l458
 10228  00ED48  EE20 F004          	lfsr	2,4
 10229  00ED4C  5003               	movf	check_food@foodInput,w,c
 10230  00ED4E  26D9               	addwf	fsr2l,f,c
 10231  00ED50  5004               	movf	check_food@foodInput+1,w,c
 10232  00ED52  22DA               	addwfc	fsr2h,f,c
 10233  00ED54  04DE               	decf	postinc2,w,c
 10234  00ED56  10DE               	iorwf	postinc2,w,c
 10235  00ED58  A4D8               	btfss	status,2,c
 10236  00ED5A  D004               	goto	l458
 10237                           
 10238                           ;standbyMode.c: 193: returnValue = 40;
 10239  00ED5C  0E00               	movlw	0
 10240  00ED5E  6E08               	movwf	check_food@returnValue+1,c
 10241  00ED60  0E28               	movlw	40
 10242  00ED62  D0F2               	goto	L87
 10243  00ED64                     l458:
 10244                           
 10245                           ;standbyMode.c: 195: else if (foodInput[0] == 2 && foodInput[1] == 1 && foodInput[2] == 
      +                          1){
 10246  00ED64  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10247  00ED68  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10248  00ED6C  0E02               	movlw	2
 10249  00ED6E  18DE               	xorwf	postinc2,w,c
 10250  00ED70  10DE               	iorwf	postinc2,w,c
 10251  00ED72  A4D8               	btfss	status,2,c
 10252  00ED74  D12F               	goto	l382
 10253  00ED76  EE20 F002          	lfsr	2,2
 10254  00ED7A  5003               	movf	check_food@foodInput,w,c
 10255  00ED7C  26D9               	addwf	fsr2l,f,c
 10256  00ED7E  5004               	movf	check_food@foodInput+1,w,c
 10257  00ED80  22DA               	addwfc	fsr2h,f,c
 10258  00ED82  04DE               	decf	postinc2,w,c
 10259  00ED84  10DE               	iorwf	postinc2,w,c
 10260  00ED86  A4D8               	btfss	status,2,c
 10261  00ED88  D125               	goto	l382
 10262  00ED8A  EE20 F004          	lfsr	2,4
 10263  00ED8E  5003               	movf	check_food@foodInput,w,c
 10264  00ED90  26D9               	addwf	fsr2l,f,c
 10265  00ED92  5004               	movf	check_food@foodInput+1,w,c
 10266  00ED94  22DA               	addwfc	fsr2h,f,c
 10267  00ED96  04DE               	decf	postinc2,w,c
 10268  00ED98  10DE               	iorwf	postinc2,w,c
 10269  00ED9A  A4D8               	btfss	status,2,c
 10270  00ED9C  D11B               	goto	l382
 10271                           
 10272                           ;standbyMode.c: 196: returnValue = 41;
 10273  00ED9E  0E00               	movlw	0
 10274  00EDA0  6E08               	movwf	check_food@returnValue+1,c
 10275  00EDA2  0E29               	movlw	41
 10276  00EDA4  D0D1               	goto	L87
 10277  00EDA6                     
 10278                           ;standbyMode.c: 202: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10279  00EDA6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10280  00EDAA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10281  00EDAE  04DE               	decf	postinc2,w,c
 10282  00EDB0  10DE               	iorwf	postinc2,w,c
 10283  00EDB2  A4D8               	btfss	status,2,c
 10284  00EDB4  D10F               	goto	l382
 10285  00EDB6  EE20 F002          	lfsr	2,2
 10286  00EDBA  5003               	movf	check_food@foodInput,w,c
 10287  00EDBC  26D9               	addwf	fsr2l,f,c
 10288  00EDBE  5004               	movf	check_food@foodInput+1,w,c
 10289  00EDC0  22DA               	addwfc	fsr2h,f,c
 10290  00EDC2  04DE               	decf	postinc2,w,c
 10291  00EDC4  10DE               	iorwf	postinc2,w,c
 10292  00EDC6  A4D8               	btfss	status,2,c
 10293  00EDC8  D105               	goto	l382
 10294  00EDCA  EE20 F004          	lfsr	2,4
 10295  00EDCE  5003               	movf	check_food@foodInput,w,c
 10296  00EDD0  26D9               	addwf	fsr2l,f,c
 10297  00EDD2  5004               	movf	check_food@foodInput+1,w,c
 10298  00EDD4  22DA               	addwfc	fsr2h,f,c
 10299  00EDD6  04DE               	decf	postinc2,w,c
 10300  00EDD8  10DE               	iorwf	postinc2,w,c
 10301  00EDDA  A4D8               	btfss	status,2,c
 10302  00EDDC  D0FB               	goto	l382
 10303  00EDDE  EE20 F006          	lfsr	2,6
 10304  00EDE2  5003               	movf	check_food@foodInput,w,c
 10305  00EDE4  26D9               	addwf	fsr2l,f,c
 10306  00EDE6  5004               	movf	check_food@foodInput+1,w,c
 10307  00EDE8  22DA               	addwfc	fsr2h,f,c
 10308  00EDEA  04DE               	decf	postinc2,w,c
 10309  00EDEC  10DE               	iorwf	postinc2,w,c
 10310  00EDEE  A4D8               	btfss	status,2,c
 10311  00EDF0  D0F1               	goto	l382
 10312                           
 10313                           ;standbyMode.c: 203: returnValue = 42;
 10314  00EDF2  0E00               	movlw	0
 10315  00EDF4  6E08               	movwf	check_food@returnValue+1,c
 10316  00EDF6  0E2A               	movlw	42
 10317  00EDF8  D0A7               	goto	L87
 10318  00EDFA                     
 10319                           ;standbyMode.c: 209: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10320  00EDFA  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10321  00EDFE  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10322  00EE02  04DE               	decf	postinc2,w,c
 10323  00EE04  10DE               	iorwf	postinc2,w,c
 10324  00EE06  A4D8               	btfss	status,2,c
 10325  00EE08  D0E5               	goto	l382
 10326  00EE0A  EE20 F002          	lfsr	2,2
 10327  00EE0E  5003               	movf	check_food@foodInput,w,c
 10328  00EE10  26D9               	addwf	fsr2l,f,c
 10329  00EE12  5004               	movf	check_food@foodInput+1,w,c
 10330  00EE14  22DA               	addwfc	fsr2h,f,c
 10331  00EE16  04DE               	decf	postinc2,w,c
 10332  00EE18  10DE               	iorwf	postinc2,w,c
 10333  00EE1A  A4D8               	btfss	status,2,c
 10334  00EE1C  D0DB               	goto	l382
 10335  00EE1E  EE20 F004          	lfsr	2,4
 10336  00EE22  5003               	movf	check_food@foodInput,w,c
 10337  00EE24  26D9               	addwf	fsr2l,f,c
 10338  00EE26  5004               	movf	check_food@foodInput+1,w,c
 10339  00EE28  22DA               	addwfc	fsr2h,f,c
 10340  00EE2A  04DE               	decf	postinc2,w,c
 10341  00EE2C  10DE               	iorwf	postinc2,w,c
 10342  00EE2E  A4D8               	btfss	status,2,c
 10343  00EE30  D0D1               	goto	l382
 10344  00EE32  EE20 F006          	lfsr	2,6
 10345  00EE36  5003               	movf	check_food@foodInput,w,c
 10346  00EE38  26D9               	addwf	fsr2l,f,c
 10347  00EE3A  5004               	movf	check_food@foodInput+1,w,c
 10348  00EE3C  22DA               	addwfc	fsr2h,f,c
 10349  00EE3E  04DE               	decf	postinc2,w,c
 10350  00EE40  10DE               	iorwf	postinc2,w,c
 10351  00EE42  A4D8               	btfss	status,2,c
 10352  00EE44  D0C7               	goto	l382
 10353                           
 10354                           ;standbyMode.c: 210: returnValue = 43;
 10355  00EE46  0E00               	movlw	0
 10356  00EE48  6E08               	movwf	check_food@returnValue+1,c
 10357  00EE4A  0E2B               	movlw	43
 10358  00EE4C  D07D               	goto	L87
 10359  00EE4E                     
 10360                           ;standbyMode.c: 216: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10361  00EE4E  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10362  00EE52  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10363  00EE56  04DE               	decf	postinc2,w,c
 10364  00EE58  10DE               	iorwf	postinc2,w,c
 10365  00EE5A  A4D8               	btfss	status,2,c
 10366  00EE5C  D0BB               	goto	l382
 10367  00EE5E  EE20 F002          	lfsr	2,2
 10368  00EE62  5003               	movf	check_food@foodInput,w,c
 10369  00EE64  26D9               	addwf	fsr2l,f,c
 10370  00EE66  5004               	movf	check_food@foodInput+1,w,c
 10371  00EE68  22DA               	addwfc	fsr2h,f,c
 10372  00EE6A  04DE               	decf	postinc2,w,c
 10373  00EE6C  10DE               	iorwf	postinc2,w,c
 10374  00EE6E  A4D8               	btfss	status,2,c
 10375  00EE70  D0B1               	goto	l382
 10376  00EE72  EE20 F004          	lfsr	2,4
 10377  00EE76  5003               	movf	check_food@foodInput,w,c
 10378  00EE78  26D9               	addwf	fsr2l,f,c
 10379  00EE7A  5004               	movf	check_food@foodInput+1,w,c
 10380  00EE7C  22DA               	addwfc	fsr2h,f,c
 10381  00EE7E  04DE               	decf	postinc2,w,c
 10382  00EE80  10DE               	iorwf	postinc2,w,c
 10383  00EE82  A4D8               	btfss	status,2,c
 10384  00EE84  D0A7               	goto	l382
 10385  00EE86  EE20 F006          	lfsr	2,6
 10386  00EE8A  5003               	movf	check_food@foodInput,w,c
 10387  00EE8C  26D9               	addwf	fsr2l,f,c
 10388  00EE8E  5004               	movf	check_food@foodInput+1,w,c
 10389  00EE90  22DA               	addwfc	fsr2h,f,c
 10390  00EE92  04DE               	decf	postinc2,w,c
 10391  00EE94  10DE               	iorwf	postinc2,w,c
 10392  00EE96  A4D8               	btfss	status,2,c
 10393  00EE98  D09D               	goto	l382
 10394                           
 10395                           ;standbyMode.c: 217: returnValue = 44;
 10396  00EE9A  0E00               	movlw	0
 10397  00EE9C  6E08               	movwf	check_food@returnValue+1,c
 10398  00EE9E  0E2C               	movlw	44
 10399  00EEA0  D053               	goto	L87
 10400  00EEA2                     
 10401                           ;standbyMode.c: 223: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10402  00EEA2  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10403  00EEA6  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10404  00EEAA  04DE               	decf	postinc2,w,c
 10405  00EEAC  10DE               	iorwf	postinc2,w,c
 10406  00EEAE  A4D8               	btfss	status,2,c
 10407  00EEB0  D091               	goto	l382
 10408  00EEB2  EE20 F002          	lfsr	2,2
 10409  00EEB6  5003               	movf	check_food@foodInput,w,c
 10410  00EEB8  26D9               	addwf	fsr2l,f,c
 10411  00EEBA  5004               	movf	check_food@foodInput+1,w,c
 10412  00EEBC  22DA               	addwfc	fsr2h,f,c
 10413  00EEBE  04DE               	decf	postinc2,w,c
 10414  00EEC0  10DE               	iorwf	postinc2,w,c
 10415  00EEC2  A4D8               	btfss	status,2,c
 10416  00EEC4  D087               	goto	l382
 10417  00EEC6  EE20 F004          	lfsr	2,4
 10418  00EECA  5003               	movf	check_food@foodInput,w,c
 10419  00EECC  26D9               	addwf	fsr2l,f,c
 10420  00EECE  5004               	movf	check_food@foodInput+1,w,c
 10421  00EED0  22DA               	addwfc	fsr2h,f,c
 10422  00EED2  04DE               	decf	postinc2,w,c
 10423  00EED4  10DE               	iorwf	postinc2,w,c
 10424  00EED6  A4D8               	btfss	status,2,c
 10425  00EED8  D07D               	goto	l382
 10426  00EEDA  EE20 F006          	lfsr	2,6
 10427  00EEDE  5003               	movf	check_food@foodInput,w,c
 10428  00EEE0  26D9               	addwf	fsr2l,f,c
 10429  00EEE2  5004               	movf	check_food@foodInput+1,w,c
 10430  00EEE4  22DA               	addwfc	fsr2h,f,c
 10431  00EEE6  04DE               	decf	postinc2,w,c
 10432  00EEE8  10DE               	iorwf	postinc2,w,c
 10433  00EEEA  A4D8               	btfss	status,2,c
 10434  00EEEC  D073               	goto	l382
 10435                           
 10436                           ;standbyMode.c: 224: returnValue = 45;
 10437  00EEEE  0E00               	movlw	0
 10438  00EEF0  6E08               	movwf	check_food@returnValue+1,c
 10439  00EEF2  0E2D               	movlw	45
 10440  00EEF4  D029               	goto	L87
 10441  00EEF6                     
 10442                           ;standbyMode.c: 230: if (foodInput[0] == 1 && foodInput[1] == 1 && foodInput[2] == 1 && 
      +                          foodInput[3] == 1){
 10443  00EEF6  C003  FFD9         	movff	check_food@foodInput,fsr2l
 10444  00EEFA  C004  FFDA         	movff	check_food@foodInput+1,fsr2h
 10445  00EEFE  04DE               	decf	postinc2,w,c
 10446  00EF00  10DE               	iorwf	postinc2,w,c
 10447  00EF02  A4D8               	btfss	status,2,c
 10448  00EF04  D067               	goto	l382
 10449  00EF06  EE20 F002          	lfsr	2,2
 10450  00EF0A  5003               	movf	check_food@foodInput,w,c
 10451  00EF0C  26D9               	addwf	fsr2l,f,c
 10452  00EF0E  5004               	movf	check_food@foodInput+1,w,c
 10453  00EF10  22DA               	addwfc	fsr2h,f,c
 10454  00EF12  04DE               	decf	postinc2,w,c
 10455  00EF14  10DE               	iorwf	postinc2,w,c
 10456  00EF16  A4D8               	btfss	status,2,c
 10457  00EF18  D05D               	goto	l382
 10458  00EF1A  EE20 F004          	lfsr	2,4
 10459  00EF1E  5003               	movf	check_food@foodInput,w,c
 10460  00EF20  26D9               	addwf	fsr2l,f,c
 10461  00EF22  5004               	movf	check_food@foodInput+1,w,c
 10462  00EF24  22DA               	addwfc	fsr2h,f,c
 10463  00EF26  04DE               	decf	postinc2,w,c
 10464  00EF28  10DE               	iorwf	postinc2,w,c
 10465  00EF2A  A4D8               	btfss	status,2,c
 10466  00EF2C  D053               	goto	l382
 10467  00EF2E  EE20 F006          	lfsr	2,6
 10468  00EF32  5003               	movf	check_food@foodInput,w,c
 10469  00EF34  26D9               	addwf	fsr2l,f,c
 10470  00EF36  5004               	movf	check_food@foodInput+1,w,c
 10471  00EF38  22DA               	addwfc	fsr2h,f,c
 10472  00EF3A  04DE               	decf	postinc2,w,c
 10473  00EF3C  10DE               	iorwf	postinc2,w,c
 10474  00EF3E  A4D8               	btfss	status,2,c
 10475  00EF40  D049               	goto	l382
 10476                           
 10477                           ;standbyMode.c: 231: returnValue = 46;
 10478  00EF42  0E00               	movlw	0
 10479  00EF44  6E08               	movwf	check_food@returnValue+1,c
 10480  00EF46  0E2E               	movlw	46
 10481  00EF48                     L87:
 10482  00EF48  6E07               	movwf	check_food@returnValue,c
 10483                           
 10484                           ;standbyMode.c: 238: }
 10485                           
 10486                           ;standbyMode.c: 237: break;
 10487                           
 10488                           ;standbyMode.c: 236: default:
 10489                           
 10490                           ;standbyMode.c: 232: }
 10491                           ;standbyMode.c: 233: break;
 10492  00EF4A  D044               	goto	l382
 10493  00EF4C                     l377:
 10494  00EF4C  C001  F005         	movff	check_food@sum,??_check_food
 10495  00EF50  C002  F006         	movff	check_food@sum+1,??_check_food+1
 10496                           
 10497                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10498                           ; Switch size 1, requested type "space"
 10499                           ; Number of cases is 1, Range of values is 0 to 0
 10500                           ; switch strategies available:
 10501                           ; Name         Instructions Cycles
 10502                           ; simple_byte            4     3 (average)
 10503                           ;	Chosen strategy is simple_byte
 10504  00EF54  5006               	movf	??_check_food+1,w,c
 10505  00EF56  0A00               	xorlw	0	; case 0
 10506  00EF58  A4D8               	btfss	status,2,c
 10507  00EF5A  D03C               	goto	l382
 10508                           
 10509                           ; Switch size 1, requested type "space"
 10510                           ; Number of cases is 18, Range of values is 3 to 43
 10511                           ; switch strategies available:
 10512                           ; Name         Instructions Cycles
 10513                           ; simple_byte           55    28 (average)
 10514                           ;	Chosen strategy is simple_byte
 10515  00EF5C  5005               	movf	??_check_food,w,c
 10516  00EF5E  0A03               	xorlw	3	; case 3
 10517  00EF60  B4D8               	btfsc	status,2,c
 10518  00EF62  EF97  F072         	goto	l378
 10519  00EF66  0A04               	xorlw	4	; case 7
 10520  00EF68  B4D8               	btfsc	status,2,c
 10521  00EF6A  EFB3  F072         	goto	l383
 10522  00EF6E  0A0D               	xorlw	13	; case 10
 10523  00EF70  B4D8               	btfsc	status,2,c
 10524  00EF72  EFF9  F072         	goto	l393
 10525  00EF76  0A06               	xorlw	6	; case 12
 10526  00EF78  B4D8               	btfsc	status,2,c
 10527  00EF7A  EFCF  F072         	goto	l387
 10528  00EF7E  0A01               	xorlw	1	; case 13
 10529  00EF80  B4D8               	btfsc	status,2,c
 10530  00EF82  D484               	goto	l421
 10531  00EF84  0A02               	xorlw	2	; case 15
 10532  00EF86  B4D8               	btfsc	status,2,c
 10533  00EF88  EF5B  F073         	goto	l401
 10534  00EF8C  0A1E               	xorlw	30	; case 17
 10535  00EF8E  B4D8               	btfsc	status,2,c
 10536  00EF90  D4FF               	goto	l429
 10537  00EF92  0A03               	xorlw	3	; case 18
 10538  00EF94  B4D8               	btfsc	status,2,c
 10539  00EF96  D4BB               	goto	l425
 10540  00EF98  0A01               	xorlw	1	; case 19
 10541  00EF9A  B4D8               	btfsc	status,2,c
 10542  00EF9C  D404               	goto	l411
 10543  00EF9E  0A05               	xorlw	5	; case 22
 10544  00EFA0  B4D8               	btfsc	status,2,c
 10545  00EFA2  D5BA               	goto	l441
 10546  00EFA4  0A0F               	xorlw	15	; case 25
 10547  00EFA6  B4D8               	btfsc	status,2,c
 10548  00EFA8  D6FE               	goto	l461
 10549  00EFAA  0A03               	xorlw	3	; case 26
 10550  00EFAC  B4D8               	btfsc	status,2,c
 10551  00EFAE  D637               	goto	l449
 10552  00EFB0  0A01               	xorlw	1	; case 27
 10553  00EFB2  B4D8               	btfsc	status,2,c
 10554  00EFB4  D52E               	goto	l433
 10555  00EFB6  0A06               	xorlw	6	; case 29
 10556  00EFB8  B4D8               	btfsc	status,2,c
 10557  00EFBA  D71F               	goto	l463
 10558  00EFBC  0A02               	xorlw	2	; case 31
 10559  00EFBE  B4D8               	btfsc	status,2,c
 10560  00EFC0  D66F               	goto	l453
 10561  00EFC2  0A3D               	xorlw	61	; case 34
 10562  00EFC4  B4D8               	btfsc	status,2,c
 10563  00EFC6  D743               	goto	l465
 10564  00EFC8  0A05               	xorlw	5	; case 39
 10565  00EFCA  B4D8               	btfsc	status,2,c
 10566  00EFCC  D76A               	goto	l467
 10567  00EFCE  0A0C               	xorlw	12	; case 43
 10568  00EFD0  B4D8               	btfsc	status,2,c
 10569  00EFD2  D791               	goto	l469
 10570  00EFD4                     l382:
 10571                           
 10572                           ;standbyMode.c: 239: return returnValue;
 10573  00EFD4  C007  F001         	movff	check_food@returnValue,?_check_food
 10574  00EFD8  C008  F002         	movff	check_food@returnValue+1,?_check_food+1
 10575  00EFDC  0012               	return		;funcret
 10576  00EFDE                     __end_of_check_food:
 10577                           	opt stack 0
 10578                           tblptru	equ	0xFF8
 10579                           tblptrh	equ	0xFF7
 10580                           tblptrl	equ	0xFF6
 10581                           tablat	equ	0xFF5
 10582                           prodh	equ	0xFF4
 10583                           prodl	equ	0xFF3
 10584                           postinc0	equ	0xFEE
 10585                           wreg	equ	0xFE8
 10586                           postdec1	equ	0xFE5
 10587                           plusw1	equ	0xFE3
 10588                           fsr1l	equ	0xFE1
 10589                           indf2	equ	0xFDF
 10590                           postinc2	equ	0xFDE
 10591                           postdec2	equ	0xFDD
 10592                           plusw2	equ	0xFDB
 10593                           fsr2h	equ	0xFDA
 10594                           fsr2l	equ	0xFD9
 10595                           status	equ	0xFD8
 10596                           
 10597 ;; *************** function _diet_press *****************
 10598 ;; Defined at:
 10599 ;;		line 1201 in file "standbyMode.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;  drawer          2   40[COMRAM] unsigned int 
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;  keypress        1   54[COMRAM] unsigned char 
 10604 ;;  dietTable       8   55[COMRAM] unsigned int [4]
 10605 ;;  sum             2   52[COMRAM] unsigned int 
 10606 ;;  count           2   50[COMRAM] unsigned int 
 10607 ;;  backCheck       2   48[COMRAM] unsigned int 
 10608 ;;  i               2   46[COMRAM] unsigned int 
 10609 ;;  previous        2   44[COMRAM] unsigned int 
 10610 ;; Return value:  Size  Location     Type
 10611 ;;                  2   40[COMRAM] unsigned int 
 10612 ;; Registers used:
 10613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10614 ;; Tracked objects:
 10615 ;;		On entry : 0/0
 10616 ;;		On exit  : 0/0
 10617 ;;		Unchanged: 0/0
 10618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;Total ram usage:       23 bytes
 10624 ;; Hardware stack levels used:    1
 10625 ;; Hardware stack levels required when called:    3
 10626 ;; This function calls:
 10627 ;;		_lcdInst
 10628 ;;		_printf
 10629 ;;		_putch
 10630 ;; This function is called by:
 10631 ;;		_standbyMode
 10632 ;; This function uses a non-reentrant model
 10633 ;;
 10634                           
 10635                           	psect	text15
 10636  00D29C                     __ptext15:
 10637                           	opt stack 0
 10638  00D29C                     _diet_press:
 10639                           	opt stack 26
 10640                           
 10641                           ;incstack = 0
 10642                           ;standbyMode.c: 1204: START: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)
      +                          ));;
 10643  00D29C  0E01               	movlw	1
 10644  00D29E  ECBB  F057         	call	_lcdInst
 10645  00D2A2  0EC3               	movlw	195
 10646  00D2A4  6E2B               	movwf	??_diet_press& (0+255),c
 10647  00D2A6  0ECD               	movlw	205
 10648  00D2A8                     u12107:
 10649  00D2A8  2EE8               	decfsz	wreg,f,c
 10650  00D2AA  D7FE               	bra	u12107
 10651  00D2AC  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10652  00D2AE  D7FC               	bra	u12107
 10653  00D2B0  F000               	nop	
 10654                           
 10655                           ;standbyMode.c: 1205: printf("Drawer %i diet:", drawer);
 10656  00D2B2  0EDD               	movlw	low STR_69
 10657  00D2B4  6E0D               	movwf	printf@f,c
 10658  00D2B6  0EFD               	movlw	high STR_69
 10659  00D2B8  6E0E               	movwf	printf@f+1,c
 10660  00D2BA  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10661  00D2BE  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10662  00D2C2  EC55  F067         	call	_printf	;wreg free
 10663                           
 10664                           ;standbyMode.c: 1206: lcdInst(0xC0);;
 10665  00D2C6  0EC0               	movlw	192
 10666  00D2C8  ECBB  F057         	call	_lcdInst
 10667                           
 10668                           ;standbyMode.c: 1208: unsigned int count = 0;
 10669  00D2CC  0E00               	movlw	0
 10670  00D2CE  6E34               	movwf	diet_press@count+1,c
 10671  00D2D0  0E00               	movlw	0
 10672  00D2D2  6E33               	movwf	diet_press@count,c
 10673                           
 10674                           ;standbyMode.c: 1209: unsigned int previous = 0;
 10675  00D2D4  0E00               	movlw	0
 10676  00D2D6  6E2E               	movwf	diet_press@previous+1,c
 10677  00D2D8  0E00               	movlw	0
 10678  00D2DA  6E2D               	movwf	diet_press@previous,c
 10679                           
 10680                           ;standbyMode.c: 1210: unsigned int sum = 0;
 10681  00D2DC  0E00               	movlw	0
 10682  00D2DE  6E36               	movwf	diet_press@sum+1,c
 10683  00D2E0  0E00               	movlw	0
 10684  00D2E2  6E35               	movwf	diet_press@sum,c
 10685                           
 10686                           ;standbyMode.c: 1211: unsigned int i = 0;
 10687  00D2E4  0E00               	movlw	0
 10688  00D2E6  6E30               	movwf	diet_press@i+1,c
 10689  00D2E8  0E00               	movlw	0
 10690  00D2EA  6E2F               	movwf	diet_press@i,c
 10691                           
 10692                           ;standbyMode.c: 1212: unsigned int dietTable[4] = {0, 0, 0, 0};
 10693  00D2EC  EE20  F0C8         	lfsr	2,diet_press@F3132
 10694  00D2F0  EE10  F038         	lfsr	1,diet_press@dietTable
 10695  00D2F4  0E07               	movlw	7
 10696  00D2F6                     u9251:
 10697  00D2F6  CFDB FFE3          	movff	plusw2,plusw1
 10698  00D2FA  06E8               	decf	wreg,f,c
 10699  00D2FC  E2FC               	bc	u9251
 10700                           
 10701                           ;standbyMode.c: 1213: unsigned int backCheck = 0;
 10702  00D2FE  0E00               	movlw	0
 10703  00D300  6E32               	movwf	diet_press@backCheck+1,c
 10704  00D302  0E00               	movlw	0
 10705  00D304  6E31               	movwf	diet_press@backCheck,c
 10706  00D306                     l766:
 10707  00D306  A281               	btfss	3969,1,c	;volatile
 10708  00D308  D7FE               	goto	l765
 10709                           
 10710                           ;standbyMode.c: 1217: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10711  00D30A  3881               	swapf	3969,w,c	;volatile
 10712  00D30C  0B0F               	andlw	15
 10713  00D30E  0B0F               	andlw	15
 10714  00D310  6E37               	movwf	diet_press@keypress,c
 10715  00D312  B281               	btfsc	3969,1,c	;volatile
 10716  00D314  D7FE               	goto	l770
 10717                           
 10718                           ;standbyMode.c: 1220: if(keypress == 15){
 10719  00D316  0E0F               	movlw	15
 10720  00D318  1837               	xorwf	diet_press@keypress,w,c
 10721  00D31A  B4D8               	btfsc	status,2,c
 10722  00D31C  D086               	goto	l773
 10723                           
 10724                           ;standbyMode.c: 1223: else if (keypress == 14){
 10725                           
 10726                           ;standbyMode.c: 1222: }
 10727                           
 10728                           ;standbyMode.c: 1221: break;
 10729  00D31E  0E0E               	movlw	14
 10730  00D320  1837               	xorwf	diet_press@keypress,w,c
 10731  00D322  A4D8               	btfss	status,2,c
 10732  00D324  D005               	goto	l775
 10733                           
 10734                           ;standbyMode.c: 1224: backCheck = 1;
 10735  00D326  0E00               	movlw	0
 10736  00D328  6E32               	movwf	diet_press@backCheck+1,c
 10737  00D32A  0E01               	movlw	1
 10738  00D32C  6E31               	movwf	diet_press@backCheck,c
 10739                           
 10740                           ;standbyMode.c: 1225: break;
 10741  00D32E  D07D               	goto	l773
 10742  00D330                     l775:
 10743                           
 10744                           ;standbyMode.c: 1227: else if (keypress == 12){
 10745  00D330  0E0C               	movlw	12
 10746  00D332  1837               	xorwf	diet_press@keypress,w,c
 10747  00D334  A4D8               	btfss	status,2,c
 10748  00D336  D02D               	goto	l777
 10749                           
 10750                           ;standbyMode.c: 1228: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10751  00D338  0E01               	movlw	1
 10752  00D33A  ECBB  F057         	call	_lcdInst
 10753  00D33E  0EC3               	movlw	195
 10754  00D340  6E2B               	movwf	??_diet_press& (0+255),c
 10755  00D342  0ECD               	movlw	205
 10756  00D344                     u12117:
 10757  00D344  2EE8               	decfsz	wreg,f,c
 10758  00D346  D7FE               	bra	u12117
 10759  00D348  2E2B               	decfsz	??_diet_press& (0+255),f,c
 10760  00D34A  D7FC               	bra	u12117
 10761  00D34C  F000               	nop	
 10762                           
 10763                           ;standbyMode.c: 1229: printf("Drawer %i diet:", drawer);
 10764  00D34E  0EDD               	movlw	low STR_69
 10765  00D350  6E0D               	movwf	printf@f,c
 10766  00D352  0EFD               	movlw	high STR_69
 10767  00D354  6E0E               	movwf	printf@f+1,c
 10768  00D356  C029  F00F         	movff	diet_press@drawer,?_printf+2
 10769  00D35A  C02A  F010         	movff	diet_press@drawer+1,?_printf+3
 10770  00D35E  EC55  F067         	call	_printf	;wreg free
 10771                           
 10772                           ;standbyMode.c: 1230: lcdInst(0xC0);;
 10773  00D362  0EC0               	movlw	192
 10774  00D364  ECBB  F057         	call	_lcdInst
 10775                           
 10776                           ;standbyMode.c: 1231: count = 0;
 10777  00D368  0E00               	movlw	0
 10778  00D36A  6E34               	movwf	diet_press@count+1,c
 10779  00D36C  0E00               	movlw	0
 10780  00D36E  6E33               	movwf	diet_press@count,c
 10781                           
 10782                           ;standbyMode.c: 1232: dietTable[0] = 0;
 10783  00D370  0E00               	movlw	0
 10784  00D372  6E39               	movwf	diet_press@dietTable+1,c
 10785  00D374  0E00               	movlw	0
 10786  00D376  6E38               	movwf	diet_press@dietTable,c
 10787                           
 10788                           ;standbyMode.c: 1233: dietTable[1] = 0;
 10789  00D378  0E00               	movlw	0
 10790  00D37A  6E3B               	movwf	diet_press@dietTable+3,c
 10791  00D37C  0E00               	movlw	0
 10792  00D37E  6E3A               	movwf	diet_press@dietTable+2,c
 10793                           
 10794                           ;standbyMode.c: 1234: dietTable[2] = 0;
 10795  00D380  0E00               	movlw	0
 10796  00D382  6E3D               	movwf	diet_press@dietTable+5,c
 10797  00D384  0E00               	movlw	0
 10798  00D386  6E3C               	movwf	diet_press@dietTable+4,c
 10799                           
 10800                           ;standbyMode.c: 1235: dietTable[3] = 0;
 10801  00D388  0E00               	movlw	0
 10802  00D38A  6E3F               	movwf	diet_press@dietTable+7,c
 10803  00D38C  0E00               	movlw	0
 10804  00D38E  6E3E               	movwf	diet_press@dietTable+6,c
 10805                           
 10806                           ;standbyMode.c: 1236: }
 10807  00D390  D7BA               	goto	l765
 10808  00D392                     l777:
 10809                           
 10810                           ;standbyMode.c: 1237: else if (count <= 3){
 10811  00D392  5034               	movf	diet_press@count+1,w,c
 10812  00D394  E1B8               	bnz	l766
 10813  00D396  0E04               	movlw	4
 10814  00D398  5C33               	subwf	diet_press@count,w,c
 10815  00D39A  B0D8               	btfsc	status,0,c
 10816  00D39C  D7B4               	goto	l765
 10817                           
 10818                           ;standbyMode.c: 1238: if (keypress == 3 || keypress == 7){
 10819  00D39E  0E03               	movlw	3
 10820  00D3A0  1837               	xorwf	diet_press@keypress,w,c
 10821  00D3A2  B4D8               	btfsc	status,2,c
 10822  00D3A4  D004               	goto	u9330
 10823  00D3A6  0E07               	movlw	7
 10824  00D3A8  1837               	xorwf	diet_press@keypress,w,c
 10825  00D3AA  A4D8               	btfss	status,2,c
 10826  00D3AC  D016               	goto	l780
 10827  00D3AE                     u9330:
 10828                           
 10829                           ;standbyMode.c: 1239: putch(input[keypress]);
 10830  00D3AE  5037               	movf	diet_press@keypress,w,c
 10831  00D3B0  0D01               	mullw	1
 10832  00D3B2  0ED4               	movlw	low _input
 10833  00D3B4  24F3               	addwf	prodl,w,c
 10834  00D3B6  6EF6               	movwf	tblptrl,c
 10835  00D3B8  0EFC               	movlw	high _input
 10836  00D3BA  20F4               	addwfc	prodh,w,c
 10837  00D3BC  6EF7               	movwf	tblptrh,c
 10838  00D3BE                     	if	1	;There are 3 active tblptr bytes
 10839  00D3BE  6AF8               	clrf	tblptru,c
 10840  00D3C0  0E00               	movlw	low (__mediumconst shr (0+16))
 10841  00D3C2  22F8               	addwfc	tblptru,f,c
 10842  00D3C4                     	endif
 10843  00D3C4  0008               	tblrd		*
 10844  00D3C6  50F5               	movf	tablat,w,c
 10845  00D3C8  ECCF  F057         	call	_putch
 10846                           
 10847                           ;standbyMode.c: 1240: dietTable[count] = keypress;
 10848  00D3CC  5037               	movf	diet_press@keypress,w,c
 10849  00D3CE  6E2B               	movwf	??_diet_press& (0+255),c
 10850  00D3D0  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10851  00D3D2  D01D               	goto	L106
 10852  00D3D4                     l7664:
 10853                           
 10854                           ;standbyMode.c: 1241: count += 1;
 10855  00D3D4  4A33               	infsnz	diet_press@count,f,c
 10856  00D3D6  2A34               	incf	diet_press@count+1,f,c
 10857                           
 10858                           ;standbyMode.c: 1242: }
 10859  00D3D8  D796               	goto	l765
 10860  00D3DA                     l780:
 10861                           
 10862                           ;standbyMode.c: 1243: else if (keypress == 11){
 10863  00D3DA  0E0B               	movlw	11
 10864  00D3DC  1837               	xorwf	diet_press@keypress,w,c
 10865  00D3DE  A4D8               	btfss	status,2,c
 10866  00D3E0  D792               	goto	l765
 10867                           
 10868                           ;standbyMode.c: 1244: putch(input[keypress]);
 10869  00D3E2  5037               	movf	diet_press@keypress,w,c
 10870  00D3E4  0D01               	mullw	1
 10871  00D3E6  0ED4               	movlw	low _input
 10872  00D3E8  24F3               	addwf	prodl,w,c
 10873  00D3EA  6EF6               	movwf	tblptrl,c
 10874  00D3EC  0EFC               	movlw	high _input
 10875  00D3EE  20F4               	addwfc	prodh,w,c
 10876  00D3F0  6EF7               	movwf	tblptrh,c
 10877  00D3F2                     	if	1	;There are 3 active tblptr bytes
 10878  00D3F2  6AF8               	clrf	tblptru,c
 10879  00D3F4  0E00               	movlw	low (__mediumconst shr (0+16))
 10880  00D3F6  22F8               	addwfc	tblptru,f,c
 10881  00D3F8                     	endif
 10882  00D3F8  0008               	tblrd		*
 10883  00D3FA  50F5               	movf	tablat,w,c
 10884  00D3FC  ECCF  F057         	call	_putch
 10885                           
 10886                           ;standbyMode.c: 1245: dietTable[count] = keypress + 1;
 10887  00D400  5037               	movf	diet_press@keypress,w,c
 10888  00D402  6E2B               	movwf	??_diet_press& (0+255),c
 10889  00D404  6A2C               	clrf	(??_diet_press+1)& (0+255),c
 10890  00D406  0E01               	movlw	1
 10891  00D408  262B               	addwf	??_diet_press,f,c
 10892  00D40A  0E00               	movlw	0
 10893  00D40C  222C               	addwfc	??_diet_press+1,f,c
 10894  00D40E                     L106:
 10895  00D40E  90D8               	bcf	status,0,c
 10896  00D410  3433               	rlcf	diet_press@count,w,c
 10897  00D412  6ED9               	movwf	fsr2l,c
 10898  00D414  3434               	rlcf	diet_press@count+1,w,c
 10899  00D416  6EDA               	movwf	fsr2h,c
 10900  00D418  0E38               	movlw	low diet_press@dietTable
 10901  00D41A  26D9               	addwf	fsr2l,f,c
 10902  00D41C  0E00               	movlw	high diet_press@dietTable
 10903  00D41E  22DA               	addwfc	fsr2h,f,c
 10904  00D420  C02B  FFDE         	movff	??_diet_press,postinc2
 10905  00D424  C02C  FFDD         	movff	??_diet_press+1,postdec2
 10906  00D428  D7D5               	goto	l7664
 10907  00D42A                     l773:
 10908                           
 10909                           ;standbyMode.c: 1247: }
 10910                           ;standbyMode.c: 1248: }
 10911                           ;standbyMode.c: 1249: }
 10912                           ;standbyMode.c: 1251: if (backCheck == 1){
 10913  00D42A  0431               	decf	diet_press@backCheck,w,c
 10914  00D42C  1032               	iorwf	diet_press@backCheck+1,w,c
 10915  00D42E  A4D8               	btfss	status,2,c
 10916  00D430  D004               	goto	l786
 10917                           
 10918                           ;standbyMode.c: 1252: sum = 100;
 10919  00D432  0E00               	movlw	0
 10920  00D434  6E36               	movwf	diet_press@sum+1,c
 10921  00D436  0E64               	movlw	100
 10922  00D438  D199               	goto	L105
 10923  00D43A                     l786:
 10924                           
 10925                           ;standbyMode.c: 1256: else if (dietTable[0] == 12 && dietTable[1] == 0 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 10926  00D43A  0E0C               	movlw	12
 10927  00D43C  1838               	xorwf	diet_press@dietTable,w,c
 10928  00D43E  1039               	iorwf	diet_press@dietTable+1,w,c
 10929  00D440  A4D8               	btfss	status,2,c
 10930  00D442  D010               	goto	l788
 10931  00D444  503A               	movf	diet_press@dietTable+2,w,c
 10932  00D446  103B               	iorwf	diet_press@dietTable+3,w,c
 10933  00D448  A4D8               	btfss	status,2,c
 10934  00D44A  D00C               	goto	l788
 10935  00D44C  503C               	movf	diet_press@dietTable+4,w,c
 10936  00D44E  103D               	iorwf	diet_press@dietTable+5,w,c
 10937  00D450  A4D8               	btfss	status,2,c
 10938  00D452  D008               	goto	l788
 10939  00D454  503E               	movf	diet_press@dietTable+6,w,c
 10940  00D456  103F               	iorwf	diet_press@dietTable+7,w,c
 10941  00D458  A4D8               	btfss	status,2,c
 10942  00D45A  D004               	goto	l788
 10943                           
 10944                           ;standbyMode.c: 1257: sum = 12;
 10945  00D45C  0E00               	movlw	0
 10946  00D45E  6E36               	movwf	diet_press@sum+1,c
 10947  00D460  0E0C               	movlw	12
 10948  00D462  D184               	goto	L105
 10949  00D464                     l788:
 10950                           
 10951                           ;standbyMode.c: 1261: else if (dietTable[0] == 3 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10952  00D464  0E03               	movlw	3
 10953  00D466  1838               	xorwf	diet_press@dietTable,w,c
 10954  00D468  1039               	iorwf	diet_press@dietTable+1,w,c
 10955  00D46A  A4D8               	btfss	status,2,c
 10956  00D46C  D010               	goto	l790
 10957  00D46E  503A               	movf	diet_press@dietTable+2,w,c
 10958  00D470  103B               	iorwf	diet_press@dietTable+3,w,c
 10959  00D472  A4D8               	btfss	status,2,c
 10960  00D474  D00C               	goto	l790
 10961  00D476  503C               	movf	diet_press@dietTable+4,w,c
 10962  00D478  103D               	iorwf	diet_press@dietTable+5,w,c
 10963  00D47A  A4D8               	btfss	status,2,c
 10964  00D47C  D008               	goto	l790
 10965  00D47E  503E               	movf	diet_press@dietTable+6,w,c
 10966  00D480  103F               	iorwf	diet_press@dietTable+7,w,c
 10967  00D482  A4D8               	btfss	status,2,c
 10968  00D484  D004               	goto	l790
 10969                           
 10970                           ;standbyMode.c: 1262: sum = 3;
 10971  00D486  0E00               	movlw	0
 10972  00D488  6E36               	movwf	diet_press@sum+1,c
 10973  00D48A  0E03               	movlw	3
 10974  00D48C  D16F               	goto	L105
 10975  00D48E                     l790:
 10976                           
 10977                           ;standbyMode.c: 1266: else if (dietTable[0] == 7 && dietTable[1] == 0 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 10978  00D48E  0E07               	movlw	7
 10979  00D490  1838               	xorwf	diet_press@dietTable,w,c
 10980  00D492  1039               	iorwf	diet_press@dietTable+1,w,c
 10981  00D494  A4D8               	btfss	status,2,c
 10982  00D496  D010               	goto	l792
 10983  00D498  503A               	movf	diet_press@dietTable+2,w,c
 10984  00D49A  103B               	iorwf	diet_press@dietTable+3,w,c
 10985  00D49C  A4D8               	btfss	status,2,c
 10986  00D49E  D00C               	goto	l792
 10987  00D4A0  503C               	movf	diet_press@dietTable+4,w,c
 10988  00D4A2  103D               	iorwf	diet_press@dietTable+5,w,c
 10989  00D4A4  A4D8               	btfss	status,2,c
 10990  00D4A6  D008               	goto	l792
 10991  00D4A8  503E               	movf	diet_press@dietTable+6,w,c
 10992  00D4AA  103F               	iorwf	diet_press@dietTable+7,w,c
 10993  00D4AC  A4D8               	btfss	status,2,c
 10994  00D4AE  D004               	goto	l792
 10995                           
 10996                           ;standbyMode.c: 1267: sum = 7;
 10997  00D4B0  0E00               	movlw	0
 10998  00D4B2  6E36               	movwf	diet_press@sum+1,c
 10999  00D4B4  0E07               	movlw	7
 11000  00D4B6  D15A               	goto	L105
 11001  00D4B8                     l792:
 11002                           
 11003                           ;standbyMode.c: 1271: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           0 && dietTable[3] == 0){
 11004  00D4B8  0E03               	movlw	3
 11005  00D4BA  1838               	xorwf	diet_press@dietTable,w,c
 11006  00D4BC  1039               	iorwf	diet_press@dietTable+1,w,c
 11007  00D4BE  A4D8               	btfss	status,2,c
 11008  00D4C0  D011               	goto	l794
 11009  00D4C2  0E07               	movlw	7
 11010  00D4C4  183A               	xorwf	diet_press@dietTable+2,w,c
 11011  00D4C6  103B               	iorwf	diet_press@dietTable+3,w,c
 11012  00D4C8  A4D8               	btfss	status,2,c
 11013  00D4CA  D00C               	goto	l794
 11014  00D4CC  503C               	movf	diet_press@dietTable+4,w,c
 11015  00D4CE  103D               	iorwf	diet_press@dietTable+5,w,c
 11016  00D4D0  A4D8               	btfss	status,2,c
 11017  00D4D2  D008               	goto	l794
 11018  00D4D4  503E               	movf	diet_press@dietTable+6,w,c
 11019  00D4D6  103F               	iorwf	diet_press@dietTable+7,w,c
 11020  00D4D8  A4D8               	btfss	status,2,c
 11021  00D4DA  D004               	goto	l794
 11022                           
 11023                           ;standbyMode.c: 1272: sum = 10;
 11024  00D4DC  0E00               	movlw	0
 11025  00D4DE  6E36               	movwf	diet_press@sum+1,c
 11026  00D4E0  0E0A               	movlw	10
 11027  00D4E2  D144               	goto	L105
 11028  00D4E4                     l794:
 11029                           
 11030                           ;standbyMode.c: 1276: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11031  00D4E4  0E03               	movlw	3
 11032  00D4E6  1838               	xorwf	diet_press@dietTable,w,c
 11033  00D4E8  1039               	iorwf	diet_press@dietTable+1,w,c
 11034  00D4EA  A4D8               	btfss	status,2,c
 11035  00D4EC  D011               	goto	l796
 11036  00D4EE  0E0C               	movlw	12
 11037  00D4F0  183A               	xorwf	diet_press@dietTable+2,w,c
 11038  00D4F2  103B               	iorwf	diet_press@dietTable+3,w,c
 11039  00D4F4  A4D8               	btfss	status,2,c
 11040  00D4F6  D00C               	goto	l796
 11041  00D4F8  503C               	movf	diet_press@dietTable+4,w,c
 11042  00D4FA  103D               	iorwf	diet_press@dietTable+5,w,c
 11043  00D4FC  A4D8               	btfss	status,2,c
 11044  00D4FE  D008               	goto	l796
 11045  00D500  503E               	movf	diet_press@dietTable+6,w,c
 11046  00D502  103F               	iorwf	diet_press@dietTable+7,w,c
 11047  00D504  A4D8               	btfss	status,2,c
 11048  00D506  D004               	goto	l796
 11049                           
 11050                           ;standbyMode.c: 1277: sum = 15;
 11051  00D508  0E00               	movlw	0
 11052  00D50A  6E36               	movwf	diet_press@sum+1,c
 11053  00D50C  0E0F               	movlw	15
 11054  00D50E  D12E               	goto	L105
 11055  00D510                     l796:
 11056                           
 11057                           ;standbyMode.c: 1281: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 0 && dietTable[3] == 0){
 11058  00D510  0E07               	movlw	7
 11059  00D512  1838               	xorwf	diet_press@dietTable,w,c
 11060  00D514  1039               	iorwf	diet_press@dietTable+1,w,c
 11061  00D516  A4D8               	btfss	status,2,c
 11062  00D518  D011               	goto	l798
 11063  00D51A  0E0C               	movlw	12
 11064  00D51C  183A               	xorwf	diet_press@dietTable+2,w,c
 11065  00D51E  103B               	iorwf	diet_press@dietTable+3,w,c
 11066  00D520  A4D8               	btfss	status,2,c
 11067  00D522  D00C               	goto	l798
 11068  00D524  503C               	movf	diet_press@dietTable+4,w,c
 11069  00D526  103D               	iorwf	diet_press@dietTable+5,w,c
 11070  00D528  A4D8               	btfss	status,2,c
 11071  00D52A  D008               	goto	l798
 11072  00D52C  503E               	movf	diet_press@dietTable+6,w,c
 11073  00D52E  103F               	iorwf	diet_press@dietTable+7,w,c
 11074  00D530  A4D8               	btfss	status,2,c
 11075  00D532  D004               	goto	l798
 11076                           
 11077                           ;standbyMode.c: 1282: sum = 19;
 11078  00D534  0E00               	movlw	0
 11079  00D536  6E36               	movwf	diet_press@sum+1,c
 11080  00D538  0E13               	movlw	19
 11081  00D53A  D118               	goto	L105
 11082  00D53C                     l798:
 11083                           
 11084                           ;standbyMode.c: 1286: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11085  00D53C  0E03               	movlw	3
 11086  00D53E  1838               	xorwf	diet_press@dietTable,w,c
 11087  00D540  1039               	iorwf	diet_press@dietTable+1,w,c
 11088  00D542  A4D8               	btfss	status,2,c
 11089  00D544  D012               	goto	l800
 11090  00D546  0E03               	movlw	3
 11091  00D548  183A               	xorwf	diet_press@dietTable+2,w,c
 11092  00D54A  103B               	iorwf	diet_press@dietTable+3,w,c
 11093  00D54C  A4D8               	btfss	status,2,c
 11094  00D54E  D00D               	goto	l800
 11095  00D550  0E07               	movlw	7
 11096  00D552  183C               	xorwf	diet_press@dietTable+4,w,c
 11097  00D554  103D               	iorwf	diet_press@dietTable+5,w,c
 11098  00D556  A4D8               	btfss	status,2,c
 11099  00D558  D008               	goto	l800
 11100  00D55A  503E               	movf	diet_press@dietTable+6,w,c
 11101  00D55C  103F               	iorwf	diet_press@dietTable+7,w,c
 11102  00D55E  A4D8               	btfss	status,2,c
 11103  00D560  D004               	goto	l800
 11104                           
 11105                           ;standbyMode.c: 1287: sum = 13;
 11106  00D562  0E00               	movlw	0
 11107  00D564  6E36               	movwf	diet_press@sum+1,c
 11108  00D566  0E0D               	movlw	13
 11109  00D568  D101               	goto	L105
 11110  00D56A                     l800:
 11111                           
 11112                           ;standbyMode.c: 1291: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11113  00D56A  0E03               	movlw	3
 11114  00D56C  1838               	xorwf	diet_press@dietTable,w,c
 11115  00D56E  1039               	iorwf	diet_press@dietTable+1,w,c
 11116  00D570  A4D8               	btfss	status,2,c
 11117  00D572  D012               	goto	l802
 11118  00D574  0E03               	movlw	3
 11119  00D576  183A               	xorwf	diet_press@dietTable+2,w,c
 11120  00D578  103B               	iorwf	diet_press@dietTable+3,w,c
 11121  00D57A  A4D8               	btfss	status,2,c
 11122  00D57C  D00D               	goto	l802
 11123  00D57E  0E0C               	movlw	12
 11124  00D580  183C               	xorwf	diet_press@dietTable+4,w,c
 11125  00D582  103D               	iorwf	diet_press@dietTable+5,w,c
 11126  00D584  A4D8               	btfss	status,2,c
 11127  00D586  D008               	goto	l802
 11128  00D588  503E               	movf	diet_press@dietTable+6,w,c
 11129  00D58A  103F               	iorwf	diet_press@dietTable+7,w,c
 11130  00D58C  A4D8               	btfss	status,2,c
 11131  00D58E  D004               	goto	l802
 11132                           
 11133                           ;standbyMode.c: 1292: sum = 18;
 11134  00D590  0E00               	movlw	0
 11135  00D592  6E36               	movwf	diet_press@sum+1,c
 11136  00D594  0E12               	movlw	18
 11137  00D596  D0EA               	goto	L105
 11138  00D598                     l802:
 11139                           
 11140                           ;standbyMode.c: 1296: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 0){
 11141  00D598  0E03               	movlw	3
 11142  00D59A  1838               	xorwf	diet_press@dietTable,w,c
 11143  00D59C  1039               	iorwf	diet_press@dietTable+1,w,c
 11144  00D59E  A4D8               	btfss	status,2,c
 11145  00D5A0  D012               	goto	l804
 11146  00D5A2  0E07               	movlw	7
 11147  00D5A4  183A               	xorwf	diet_press@dietTable+2,w,c
 11148  00D5A6  103B               	iorwf	diet_press@dietTable+3,w,c
 11149  00D5A8  A4D8               	btfss	status,2,c
 11150  00D5AA  D00D               	goto	l804
 11151  00D5AC  0E07               	movlw	7
 11152  00D5AE  183C               	xorwf	diet_press@dietTable+4,w,c
 11153  00D5B0  103D               	iorwf	diet_press@dietTable+5,w,c
 11154  00D5B2  A4D8               	btfss	status,2,c
 11155  00D5B4  D008               	goto	l804
 11156  00D5B6  503E               	movf	diet_press@dietTable+6,w,c
 11157  00D5B8  103F               	iorwf	diet_press@dietTable+7,w,c
 11158  00D5BA  A4D8               	btfss	status,2,c
 11159  00D5BC  D004               	goto	l804
 11160                           
 11161                           ;standbyMode.c: 1297: sum = 17;
 11162  00D5BE  0E00               	movlw	0
 11163  00D5C0  6E36               	movwf	diet_press@sum+1,c
 11164  00D5C2  0E11               	movlw	17
 11165  00D5C4  D0D3               	goto	L105
 11166  00D5C6                     l804:
 11167                           
 11168                           ;standbyMode.c: 1301: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11169  00D5C6  0E03               	movlw	3
 11170  00D5C8  1838               	xorwf	diet_press@dietTable,w,c
 11171  00D5CA  1039               	iorwf	diet_press@dietTable+1,w,c
 11172  00D5CC  A4D8               	btfss	status,2,c
 11173  00D5CE  D012               	goto	l806
 11174  00D5D0  0E0C               	movlw	12
 11175  00D5D2  183A               	xorwf	diet_press@dietTable+2,w,c
 11176  00D5D4  103B               	iorwf	diet_press@dietTable+3,w,c
 11177  00D5D6  A4D8               	btfss	status,2,c
 11178  00D5D8  D00D               	goto	l806
 11179  00D5DA  0E0C               	movlw	12
 11180  00D5DC  183C               	xorwf	diet_press@dietTable+4,w,c
 11181  00D5DE  103D               	iorwf	diet_press@dietTable+5,w,c
 11182  00D5E0  A4D8               	btfss	status,2,c
 11183  00D5E2  D008               	goto	l806
 11184  00D5E4  503E               	movf	diet_press@dietTable+6,w,c
 11185  00D5E6  103F               	iorwf	diet_press@dietTable+7,w,c
 11186  00D5E8  A4D8               	btfss	status,2,c
 11187  00D5EA  D004               	goto	l806
 11188                           
 11189                           ;standbyMode.c: 1302: sum = 27;
 11190  00D5EC  0E00               	movlw	0
 11191  00D5EE  6E36               	movwf	diet_press@sum+1,c
 11192  00D5F0  0E1B               	movlw	27
 11193  00D5F2  D0BC               	goto	L105
 11194  00D5F4                     l806:
 11195                           
 11196                           ;standbyMode.c: 1306: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11197  00D5F4  0E03               	movlw	3
 11198  00D5F6  1838               	xorwf	diet_press@dietTable,w,c
 11199  00D5F8  1039               	iorwf	diet_press@dietTable+1,w,c
 11200  00D5FA  A4D8               	btfss	status,2,c
 11201  00D5FC  D012               	goto	l808
 11202  00D5FE  0E07               	movlw	7
 11203  00D600  183A               	xorwf	diet_press@dietTable+2,w,c
 11204  00D602  103B               	iorwf	diet_press@dietTable+3,w,c
 11205  00D604  A4D8               	btfss	status,2,c
 11206  00D606  D00D               	goto	l808
 11207  00D608  0E0C               	movlw	12
 11208  00D60A  183C               	xorwf	diet_press@dietTable+4,w,c
 11209  00D60C  103D               	iorwf	diet_press@dietTable+5,w,c
 11210  00D60E  A4D8               	btfss	status,2,c
 11211  00D610  D008               	goto	l808
 11212  00D612  503E               	movf	diet_press@dietTable+6,w,c
 11213  00D614  103F               	iorwf	diet_press@dietTable+7,w,c
 11214  00D616  A4D8               	btfss	status,2,c
 11215  00D618  D004               	goto	l808
 11216                           
 11217                           ;standbyMode.c: 1307: sum = 22;
 11218  00D61A  0E00               	movlw	0
 11219  00D61C  6E36               	movwf	diet_press@sum+1,c
 11220  00D61E  0E16               	movlw	22
 11221  00D620  D0A5               	goto	L105
 11222  00D622                     l808:
 11223                           
 11224                           ;standbyMode.c: 1311: else if (dietTable[0] == 7 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 0){
 11225  00D622  0E07               	movlw	7
 11226  00D624  1838               	xorwf	diet_press@dietTable,w,c
 11227  00D626  1039               	iorwf	diet_press@dietTable+1,w,c
 11228  00D628  A4D8               	btfss	status,2,c
 11229  00D62A  D012               	goto	l810
 11230  00D62C  0E07               	movlw	7
 11231  00D62E  183A               	xorwf	diet_press@dietTable+2,w,c
 11232  00D630  103B               	iorwf	diet_press@dietTable+3,w,c
 11233  00D632  A4D8               	btfss	status,2,c
 11234  00D634  D00D               	goto	l810
 11235  00D636  0E0C               	movlw	12
 11236  00D638  183C               	xorwf	diet_press@dietTable+4,w,c
 11237  00D63A  103D               	iorwf	diet_press@dietTable+5,w,c
 11238  00D63C  A4D8               	btfss	status,2,c
 11239  00D63E  D008               	goto	l810
 11240  00D640  503E               	movf	diet_press@dietTable+6,w,c
 11241  00D642  103F               	iorwf	diet_press@dietTable+7,w,c
 11242  00D644  A4D8               	btfss	status,2,c
 11243  00D646  D004               	goto	l810
 11244                           
 11245                           ;standbyMode.c: 1312: sum = 26;
 11246  00D648  0E00               	movlw	0
 11247  00D64A  6E36               	movwf	diet_press@sum+1,c
 11248  00D64C  0E1A               	movlw	26
 11249  00D64E  D08E               	goto	L105
 11250  00D650                     l810:
 11251                           
 11252                           ;standbyMode.c: 1316: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 0){
 11253  00D650  0E07               	movlw	7
 11254  00D652  1838               	xorwf	diet_press@dietTable,w,c
 11255  00D654  1039               	iorwf	diet_press@dietTable+1,w,c
 11256  00D656  A4D8               	btfss	status,2,c
 11257  00D658  D012               	goto	l812
 11258  00D65A  0E0C               	movlw	12
 11259  00D65C  183A               	xorwf	diet_press@dietTable+2,w,c
 11260  00D65E  103B               	iorwf	diet_press@dietTable+3,w,c
 11261  00D660  A4D8               	btfss	status,2,c
 11262  00D662  D00D               	goto	l812
 11263  00D664  0E0C               	movlw	12
 11264  00D666  183C               	xorwf	diet_press@dietTable+4,w,c
 11265  00D668  103D               	iorwf	diet_press@dietTable+5,w,c
 11266  00D66A  A4D8               	btfss	status,2,c
 11267  00D66C  D008               	goto	l812
 11268  00D66E  503E               	movf	diet_press@dietTable+6,w,c
 11269  00D670  103F               	iorwf	diet_press@dietTable+7,w,c
 11270  00D672  A4D8               	btfss	status,2,c
 11271  00D674  D004               	goto	l812
 11272                           
 11273                           ;standbyMode.c: 1317: sum = 31;
 11274  00D676  0E00               	movlw	0
 11275  00D678  6E36               	movwf	diet_press@sum+1,c
 11276  00D67A  0E1F               	movlw	31
 11277  00D67C  D077               	goto	L105
 11278  00D67E                     l812:
 11279                           
 11280                           ;standbyMode.c: 1321: else if (dietTable[0] == 3 && dietTable[1] == 3 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11281  00D67E  0E03               	movlw	3
 11282  00D680  1838               	xorwf	diet_press@dietTable,w,c
 11283  00D682  1039               	iorwf	diet_press@dietTable+1,w,c
 11284  00D684  A4D8               	btfss	status,2,c
 11285  00D686  D013               	goto	l814
 11286  00D688  0E03               	movlw	3
 11287  00D68A  183A               	xorwf	diet_press@dietTable+2,w,c
 11288  00D68C  103B               	iorwf	diet_press@dietTable+3,w,c
 11289  00D68E  A4D8               	btfss	status,2,c
 11290  00D690  D00E               	goto	l814
 11291  00D692  0E07               	movlw	7
 11292  00D694  183C               	xorwf	diet_press@dietTable+4,w,c
 11293  00D696  103D               	iorwf	diet_press@dietTable+5,w,c
 11294  00D698  A4D8               	btfss	status,2,c
 11295  00D69A  D009               	goto	l814
 11296  00D69C  0E0C               	movlw	12
 11297  00D69E  183E               	xorwf	diet_press@dietTable+6,w,c
 11298  00D6A0  103F               	iorwf	diet_press@dietTable+7,w,c
 11299  00D6A2  A4D8               	btfss	status,2,c
 11300  00D6A4  D004               	goto	l814
 11301                           
 11302                           ;standbyMode.c: 1322: sum = 25;
 11303  00D6A6  0E00               	movlw	0
 11304  00D6A8  6E36               	movwf	diet_press@sum+1,c
 11305  00D6AA  0E19               	movlw	25
 11306  00D6AC  D05F               	goto	L105
 11307  00D6AE                     l814:
 11308                           
 11309                           ;standbyMode.c: 1326: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           7 && dietTable[3] == 12){
 11310  00D6AE  0E03               	movlw	3
 11311  00D6B0  1838               	xorwf	diet_press@dietTable,w,c
 11312  00D6B2  1039               	iorwf	diet_press@dietTable+1,w,c
 11313  00D6B4  A4D8               	btfss	status,2,c
 11314  00D6B6  D013               	goto	l816
 11315  00D6B8  0E07               	movlw	7
 11316  00D6BA  183A               	xorwf	diet_press@dietTable+2,w,c
 11317  00D6BC  103B               	iorwf	diet_press@dietTable+3,w,c
 11318  00D6BE  A4D8               	btfss	status,2,c
 11319  00D6C0  D00E               	goto	l816
 11320  00D6C2  0E07               	movlw	7
 11321  00D6C4  183C               	xorwf	diet_press@dietTable+4,w,c
 11322  00D6C6  103D               	iorwf	diet_press@dietTable+5,w,c
 11323  00D6C8  A4D8               	btfss	status,2,c
 11324  00D6CA  D009               	goto	l816
 11325  00D6CC  0E0C               	movlw	12
 11326  00D6CE  183E               	xorwf	diet_press@dietTable+6,w,c
 11327  00D6D0  103F               	iorwf	diet_press@dietTable+7,w,c
 11328  00D6D2  A4D8               	btfss	status,2,c
 11329  00D6D4  D004               	goto	l816
 11330                           
 11331                           ;standbyMode.c: 1327: sum = 29;
 11332  00D6D6  0E00               	movlw	0
 11333  00D6D8  6E36               	movwf	diet_press@sum+1,c
 11334  00D6DA  0E1D               	movlw	29
 11335  00D6DC  D047               	goto	L105
 11336  00D6DE                     l816:
 11337                           
 11338                           ;standbyMode.c: 1331: else if (dietTable[0] == 3 && dietTable[1] == 7 && dietTable[2] ==
      +                           12 && dietTable[3] == 12){
 11339  00D6DE  0E03               	movlw	3
 11340  00D6E0  1838               	xorwf	diet_press@dietTable,w,c
 11341  00D6E2  1039               	iorwf	diet_press@dietTable+1,w,c
 11342  00D6E4  A4D8               	btfss	status,2,c
 11343  00D6E6  D013               	goto	l818
 11344  00D6E8  0E07               	movlw	7
 11345  00D6EA  183A               	xorwf	diet_press@dietTable+2,w,c
 11346  00D6EC  103B               	iorwf	diet_press@dietTable+3,w,c
 11347  00D6EE  A4D8               	btfss	status,2,c
 11348  00D6F0  D00E               	goto	l818
 11349  00D6F2  0E0C               	movlw	12
 11350  00D6F4  183C               	xorwf	diet_press@dietTable+4,w,c
 11351  00D6F6  103D               	iorwf	diet_press@dietTable+5,w,c
 11352  00D6F8  A4D8               	btfss	status,2,c
 11353  00D6FA  D009               	goto	l818
 11354  00D6FC  0E0C               	movlw	12
 11355  00D6FE  183E               	xorwf	diet_press@dietTable+6,w,c
 11356  00D700  103F               	iorwf	diet_press@dietTable+7,w,c
 11357  00D702  A4D8               	btfss	status,2,c
 11358  00D704  D004               	goto	l818
 11359                           
 11360                           ;standbyMode.c: 1332: sum = 34;
 11361  00D706  0E00               	movlw	0
 11362  00D708  6E36               	movwf	diet_press@sum+1,c
 11363  00D70A  0E22               	movlw	34
 11364  00D70C  D02F               	goto	L105
 11365  00D70E                     l818:
 11366                           
 11367                           ;standbyMode.c: 1336: else if (dietTable[0] == 3 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11368  00D70E  0E03               	movlw	3
 11369  00D710  1838               	xorwf	diet_press@dietTable,w,c
 11370  00D712  1039               	iorwf	diet_press@dietTable+1,w,c
 11371  00D714  A4D8               	btfss	status,2,c
 11372  00D716  D013               	goto	l820
 11373  00D718  0E0C               	movlw	12
 11374  00D71A  183A               	xorwf	diet_press@dietTable+2,w,c
 11375  00D71C  103B               	iorwf	diet_press@dietTable+3,w,c
 11376  00D71E  A4D8               	btfss	status,2,c
 11377  00D720  D00E               	goto	l820
 11378  00D722  0E0C               	movlw	12
 11379  00D724  183C               	xorwf	diet_press@dietTable+4,w,c
 11380  00D726  103D               	iorwf	diet_press@dietTable+5,w,c
 11381  00D728  A4D8               	btfss	status,2,c
 11382  00D72A  D009               	goto	l820
 11383  00D72C  0E0C               	movlw	12
 11384  00D72E  183E               	xorwf	diet_press@dietTable+6,w,c
 11385  00D730  103F               	iorwf	diet_press@dietTable+7,w,c
 11386  00D732  A4D8               	btfss	status,2,c
 11387  00D734  D004               	goto	l820
 11388                           
 11389                           ;standbyMode.c: 1337: sum = 39;
 11390  00D736  0E00               	movlw	0
 11391  00D738  6E36               	movwf	diet_press@sum+1,c
 11392  00D73A  0E27               	movlw	39
 11393  00D73C  D017               	goto	L105
 11394  00D73E                     l820:
 11395                           
 11396                           ;standbyMode.c: 1341: else if (dietTable[0] == 7 && dietTable[1] == 12 && dietTable[2] =
      +                          = 12 && dietTable[3] == 12){
 11397  00D73E  0E07               	movlw	7
 11398  00D740  1838               	xorwf	diet_press@dietTable,w,c
 11399  00D742  1039               	iorwf	diet_press@dietTable+1,w,c
 11400  00D744  A4D8               	btfss	status,2,c
 11401  00D746  D014               	goto	l822
 11402  00D748  0E0C               	movlw	12
 11403  00D74A  183A               	xorwf	diet_press@dietTable+2,w,c
 11404  00D74C  103B               	iorwf	diet_press@dietTable+3,w,c
 11405  00D74E  A4D8               	btfss	status,2,c
 11406  00D750  D00F               	goto	l822
 11407  00D752  0E0C               	movlw	12
 11408  00D754  183C               	xorwf	diet_press@dietTable+4,w,c
 11409  00D756  103D               	iorwf	diet_press@dietTable+5,w,c
 11410  00D758  A4D8               	btfss	status,2,c
 11411  00D75A  D00A               	goto	l822
 11412  00D75C  0E0C               	movlw	12
 11413  00D75E  183E               	xorwf	diet_press@dietTable+6,w,c
 11414  00D760  103F               	iorwf	diet_press@dietTable+7,w,c
 11415  00D762  A4D8               	btfss	status,2,c
 11416  00D764  D005               	goto	l822
 11417                           
 11418                           ;standbyMode.c: 1342: sum = 43;
 11419  00D766  0E00               	movlw	0
 11420  00D768  6E36               	movwf	diet_press@sum+1,c
 11421  00D76A  0E2B               	movlw	43
 11422  00D76C                     L105:
 11423  00D76C  6E35               	movwf	diet_press@sum,c
 11424                           
 11425                           ;standbyMode.c: 1343: }
 11426  00D76E  D02A               	goto	l823
 11427  00D770                     l822:
 11428                           
 11429                           ;standbyMode.c: 1346: else{
 11430                           ;standbyMode.c: 1347: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11431  00D770  0E01               	movlw	1
 11432  00D772  ECBB  F057         	call	_lcdInst
 11433  00D776  0EC3               	movlw	195
 11434  00D778  6E2B               	movwf	??_diet_press& (0+255),c
 11435  00D77A  0ECD               	movlw	205
 11436  00D77C                     u12127:
 11437  00D77C  2EE8               	decfsz	wreg,f,c
 11438  00D77E  D7FE               	bra	u12127
 11439  00D780  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11440  00D782  D7FC               	bra	u12127
 11441  00D784  F000               	nop	
 11442                           
 11443                           ;standbyMode.c: 1348: printf("Invalid diet!");
 11444  00D786  0EB3               	movlw	low STR_71
 11445  00D788  6E0D               	movwf	printf@f,c
 11446  00D78A  0EFE               	movlw	high STR_71
 11447  00D78C  6E0E               	movwf	printf@f+1,c
 11448  00D78E  EC55  F067         	call	_printf	;wreg free
 11449                           
 11450                           ;standbyMode.c: 1349: lcdInst(0xC0);;
 11451  00D792  0EC0               	movlw	192
 11452  00D794  ECBB  F057         	call	_lcdInst
 11453                           
 11454                           ;standbyMode.c: 1350: printf("Try again.");
 11455  00D798  0E32               	movlw	low STR_68
 11456  00D79A  6E0D               	movwf	printf@f,c
 11457  00D79C  0EFF               	movlw	high STR_68
 11458  00D79E  6E0E               	movwf	printf@f+1,c
 11459  00D7A0  EC55  F067         	call	_printf	;wreg free
 11460                           
 11461                           ;standbyMode.c: 1351: _delay((unsigned long)((1000)*(40000000/4000.0)));
 11462  00D7A4  0E33               	movlw	51
 11463  00D7A6  6E2C               	movwf	(??_diet_press+1)& (0+255),c
 11464  00D7A8  0EBB               	movlw	187
 11465  00D7AA  6E2B               	movwf	??_diet_press& (0+255),c
 11466  00D7AC  0EE0               	movlw	224
 11467  00D7AE                     u12137:
 11468  00D7AE  2EE8               	decfsz	wreg,f,c
 11469  00D7B0  D7FE               	bra	u12137
 11470  00D7B2  2E2B               	decfsz	??_diet_press& (0+255),f,c
 11471  00D7B4  D7FC               	bra	u12137
 11472  00D7B6  2E2C               	decfsz	(??_diet_press+1)& (0+255),f,c
 11473  00D7B8  D7FA               	bra	u12137
 11474                           
 11475                           ;standbyMode.c: 1352: sum = 0;
 11476  00D7BA  0E00               	movlw	0
 11477  00D7BC  6E36               	movwf	diet_press@sum+1,c
 11478  00D7BE  0E00               	movlw	0
 11479  00D7C0  6E35               	movwf	diet_press@sum,c
 11480                           
 11481                           ;standbyMode.c: 1353: goto START;
 11482  00D7C2  D56C               	goto	_diet_press
 11483  00D7C4                     l823:
 11484                           
 11485                           ;standbyMode.c: 1354: }
 11486                           ;standbyMode.c: 1355: return sum;
 11487  00D7C4  C035  F029         	movff	diet_press@sum,?_diet_press
 11488  00D7C8  C036  F02A         	movff	diet_press@sum+1,?_diet_press+1
 11489  00D7CC  0012               	return		;funcret
 11490  00D7CE                     __end_of_diet_press:
 11491                           	opt stack 0
 11492                           tblptru	equ	0xFF8
 11493                           tblptrh	equ	0xFF7
 11494                           tblptrl	equ	0xFF6
 11495                           tablat	equ	0xFF5
 11496                           prodh	equ	0xFF4
 11497                           prodl	equ	0xFF3
 11498                           postinc0	equ	0xFEE
 11499                           wreg	equ	0xFE8
 11500                           postdec1	equ	0xFE5
 11501                           plusw1	equ	0xFE3
 11502                           fsr1l	equ	0xFE1
 11503                           indf2	equ	0xFDF
 11504                           postinc2	equ	0xFDE
 11505                           postdec2	equ	0xFDD
 11506                           plusw2	equ	0xFDB
 11507                           fsr2h	equ	0xFDA
 11508                           fsr2l	equ	0xFD9
 11509                           status	equ	0xFD8
 11510                           
 11511 ;; *************** function _decode_diet *****************
 11512 ;; Defined at:
 11513 ;;		line 1359 in file "standbyMode.c"
 11514 ;; Parameters:    Size  Location     Type
 11515 ;;  dietType        2    0[COMRAM] unsigned int 
 11516 ;; Auto vars:     Size  Location     Type
 11517 ;;  returnValue     2    4[COMRAM] unsigned int 
 11518 ;; Return value:  Size  Location     Type
 11519 ;;                  2    0[COMRAM] unsigned int 
 11520 ;; Registers used:
 11521 ;;		wreg, status,2, status,0
 11522 ;; Tracked objects:
 11523 ;;		On entry : 0/0
 11524 ;;		On exit  : 0/0
 11525 ;;		Unchanged: 0/0
 11526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;Total ram usage:        6 bytes
 11532 ;; Hardware stack levels used:    1
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_standbyMode
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           	psect	text16
 11541  00BCD0                     __ptext16:
 11542                           	opt stack 0
 11543  00BCD0                     _decode_diet:
 11544                           	opt stack 29
 11545                           
 11546                           ;standbyMode.c: 1360: unsigned int returnValue = 100;
 11547                           
 11548                           ;incstack = 0
 11549  00BCD0  0E00               	movlw	0
 11550  00BCD2  6E06               	movwf	decode_diet@returnValue+1,c
 11551  00BCD4  0E64               	movlw	100
 11552  00BCD6  6E05               	movwf	decode_diet@returnValue,c
 11553                           
 11554                           ;standbyMode.c: 1362: switch(dietType){
 11555  00BCD8  D049               	goto	l827
 11556  00BCDA                     
 11557                           ;standbyMode.c: 1365: returnValue = 2;
 11558  00BCDA  0E00               	movlw	0
 11559  00BCDC  6E06               	movwf	decode_diet@returnValue+1,c
 11560  00BCDE  0E02               	movlw	2
 11561  00BCE0  D043               	goto	L123
 11562  00BCE2                     
 11563                           ;standbyMode.c: 1370: returnValue = 0;
 11564  00BCE2  0E00               	movlw	0
 11565  00BCE4  6E06               	movwf	decode_diet@returnValue+1,c
 11566  00BCE6  0E00               	movlw	0
 11567  00BCE8  D03F               	goto	L123
 11568  00BCEA                     
 11569                           ;standbyMode.c: 1375: returnValue = 1;
 11570  00BCEA  0E00               	movlw	0
 11571  00BCEC  6E06               	movwf	decode_diet@returnValue+1,c
 11572  00BCEE  0E01               	movlw	1
 11573  00BCF0  D03B               	goto	L123
 11574  00BCF2                     
 11575                           ;standbyMode.c: 1380: returnValue = 3;
 11576  00BCF2  0E00               	movlw	0
 11577  00BCF4  6E06               	movwf	decode_diet@returnValue+1,c
 11578  00BCF6  0E03               	movlw	3
 11579  00BCF8  D037               	goto	L123
 11580  00BCFA                     
 11581                           ;standbyMode.c: 1385: returnValue = 4;
 11582  00BCFA  0E00               	movlw	0
 11583  00BCFC  6E06               	movwf	decode_diet@returnValue+1,c
 11584  00BCFE  0E04               	movlw	4
 11585  00BD00  D033               	goto	L123
 11586  00BD02                     
 11587                           ;standbyMode.c: 1390: returnValue = 5;
 11588  00BD02  0E00               	movlw	0
 11589  00BD04  6E06               	movwf	decode_diet@returnValue+1,c
 11590  00BD06  0E05               	movlw	5
 11591  00BD08  D02F               	goto	L123
 11592  00BD0A                     
 11593                           ;standbyMode.c: 1395: returnValue = 6;
 11594  00BD0A  0E00               	movlw	0
 11595  00BD0C  6E06               	movwf	decode_diet@returnValue+1,c
 11596  00BD0E  0E06               	movlw	6
 11597  00BD10  D02B               	goto	L123
 11598  00BD12                     
 11599                           ;standbyMode.c: 1400: returnValue = 7;
 11600  00BD12  0E00               	movlw	0
 11601  00BD14  6E06               	movwf	decode_diet@returnValue+1,c
 11602  00BD16  0E07               	movlw	7
 11603  00BD18  D027               	goto	L123
 11604  00BD1A                     
 11605                           ;standbyMode.c: 1405: returnValue = 8;
 11606  00BD1A  0E00               	movlw	0
 11607  00BD1C  6E06               	movwf	decode_diet@returnValue+1,c
 11608  00BD1E  0E08               	movlw	8
 11609  00BD20  D023               	goto	L123
 11610  00BD22                     
 11611                           ;standbyMode.c: 1410: returnValue = 9;
 11612  00BD22  0E00               	movlw	0
 11613  00BD24  6E06               	movwf	decode_diet@returnValue+1,c
 11614  00BD26  0E09               	movlw	9
 11615  00BD28  D01F               	goto	L123
 11616  00BD2A                     
 11617                           ;standbyMode.c: 1415: returnValue = 10;
 11618  00BD2A  0E00               	movlw	0
 11619  00BD2C  6E06               	movwf	decode_diet@returnValue+1,c
 11620  00BD2E  0E0A               	movlw	10
 11621  00BD30  D01B               	goto	L123
 11622  00BD32                     
 11623                           ;standbyMode.c: 1420: returnValue = 11;
 11624  00BD32  0E00               	movlw	0
 11625  00BD34  6E06               	movwf	decode_diet@returnValue+1,c
 11626  00BD36  0E0B               	movlw	11
 11627  00BD38  D017               	goto	L123
 11628  00BD3A                     
 11629                           ;standbyMode.c: 1425: returnValue = 12;
 11630  00BD3A  0E00               	movlw	0
 11631  00BD3C  6E06               	movwf	decode_diet@returnValue+1,c
 11632  00BD3E  0E0C               	movlw	12
 11633  00BD40  D013               	goto	L123
 11634  00BD42                     
 11635                           ;standbyMode.c: 1430: returnValue = 13;
 11636  00BD42  0E00               	movlw	0
 11637  00BD44  6E06               	movwf	decode_diet@returnValue+1,c
 11638  00BD46  0E0D               	movlw	13
 11639  00BD48  D00F               	goto	L123
 11640  00BD4A                     
 11641                           ;standbyMode.c: 1435: returnValue = 14;
 11642  00BD4A  0E00               	movlw	0
 11643  00BD4C  6E06               	movwf	decode_diet@returnValue+1,c
 11644  00BD4E  0E0E               	movlw	14
 11645  00BD50  D00B               	goto	L123
 11646  00BD52                     
 11647                           ;standbyMode.c: 1440: returnValue = 15;
 11648  00BD52  0E00               	movlw	0
 11649  00BD54  6E06               	movwf	decode_diet@returnValue+1,c
 11650  00BD56  0E0F               	movlw	15
 11651  00BD58  D007               	goto	L123
 11652  00BD5A                     
 11653                           ;standbyMode.c: 1445: returnValue = 16;
 11654  00BD5A  0E00               	movlw	0
 11655  00BD5C  6E06               	movwf	decode_diet@returnValue+1,c
 11656  00BD5E  0E10               	movlw	16
 11657  00BD60  D003               	goto	L123
 11658  00BD62                     
 11659                           ;standbyMode.c: 1450: returnValue = 17;
 11660  00BD62  0E00               	movlw	0
 11661  00BD64  6E06               	movwf	decode_diet@returnValue+1,c
 11662  00BD66  0E11               	movlw	17
 11663  00BD68                     L123:
 11664  00BD68  6E05               	movwf	decode_diet@returnValue,c
 11665                           
 11666                           ;standbyMode.c: 1455: }
 11667                           
 11668                           ;standbyMode.c: 1454: break;
 11669                           
 11670                           ;standbyMode.c: 1453: default:
 11671                           
 11672                           ;standbyMode.c: 1451: break;
 11673  00BD6A  D03F               	goto	l829
 11674  00BD6C                     l827:
 11675  00BD6C  C001  F003         	movff	decode_diet@dietType,??_decode_diet
 11676  00BD70  C002  F004         	movff	decode_diet@dietType+1,??_decode_diet+1
 11677                           
 11678                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11679                           ; Switch size 1, requested type "space"
 11680                           ; Number of cases is 1, Range of values is 0 to 0
 11681                           ; switch strategies available:
 11682                           ; Name         Instructions Cycles
 11683                           ; simple_byte            4     3 (average)
 11684                           ;	Chosen strategy is simple_byte
 11685  00BD74  5004               	movf	??_decode_diet+1,w,c
 11686  00BD76  0A00               	xorlw	0	; case 0
 11687  00BD78  A4D8               	btfss	status,2,c
 11688  00BD7A  D037               	goto	l829
 11689                           
 11690                           ; Switch size 1, requested type "space"
 11691                           ; Number of cases is 18, Range of values is 3 to 43
 11692                           ; switch strategies available:
 11693                           ; Name         Instructions Cycles
 11694                           ; simple_byte           55    28 (average)
 11695                           ;	Chosen strategy is simple_byte
 11696  00BD7C  5003               	movf	??_decode_diet,w,c
 11697  00BD7E  0A03               	xorlw	3	; case 3
 11698  00BD80  B4D8               	btfsc	status,2,c
 11699  00BD82  D7AF               	goto	l830
 11700  00BD84  0A04               	xorlw	4	; case 7
 11701  00BD86  B4D8               	btfsc	status,2,c
 11702  00BD88  D7B0               	goto	l831
 11703  00BD8A  0A0D               	xorlw	13	; case 10
 11704  00BD8C  B4D8               	btfsc	status,2,c
 11705  00BD8E  D7B1               	goto	l832
 11706  00BD90  0A06               	xorlw	6	; case 12
 11707  00BD92  B4D8               	btfsc	status,2,c
 11708  00BD94  D7A2               	goto	l828
 11709  00BD96  0A01               	xorlw	1	; case 13
 11710  00BD98  B4D8               	btfsc	status,2,c
 11711  00BD9A  D7B7               	goto	l835
 11712  00BD9C  0A02               	xorlw	2	; case 15
 11713  00BD9E  B4D8               	btfsc	status,2,c
 11714  00BDA0  D7AC               	goto	l833
 11715  00BDA2  0A1E               	xorlw	30	; case 17
 11716  00BDA4  B4D8               	btfsc	status,2,c
 11717  00BDA6  D7B9               	goto	l837
 11718  00BDA8  0A03               	xorlw	3	; case 18
 11719  00BDAA  B4D8               	btfsc	status,2,c
 11720  00BDAC  D7B2               	goto	l836
 11721  00BDAE  0A01               	xorlw	1	; case 19
 11722  00BDB0  B4D8               	btfsc	status,2,c
 11723  00BDB2  D7A7               	goto	l834
 11724  00BDB4  0A05               	xorlw	5	; case 22
 11725  00BDB6  B4D8               	btfsc	status,2,c
 11726  00BDB8  D7B8               	goto	l839
 11727  00BDBA  0A0F               	xorlw	15	; case 25
 11728  00BDBC  B4D8               	btfsc	status,2,c
 11729  00BDBE  D7C1               	goto	l842
 11730  00BDC0  0A03               	xorlw	3	; case 26
 11731  00BDC2  B4D8               	btfsc	status,2,c
 11732  00BDC4  D7B6               	goto	l840
 11733  00BDC6  0A01               	xorlw	1	; case 27
 11734  00BDC8  B4D8               	btfsc	status,2,c
 11735  00BDCA  D7AB               	goto	l838
 11736  00BDCC  0A06               	xorlw	6	; case 29
 11737  00BDCE  B4D8               	btfsc	status,2,c
 11738  00BDD0  D7BC               	goto	l843
 11739  00BDD2  0A02               	xorlw	2	; case 31
 11740  00BDD4  B4D8               	btfsc	status,2,c
 11741  00BDD6  D7B1               	goto	l841
 11742  00BDD8  0A3D               	xorlw	61	; case 34
 11743  00BDDA  B4D8               	btfsc	status,2,c
 11744  00BDDC  D7BA               	goto	l844
 11745  00BDDE  0A05               	xorlw	5	; case 39
 11746  00BDE0  B4D8               	btfsc	status,2,c
 11747  00BDE2  D7BB               	goto	l845
 11748  00BDE4  0A0C               	xorlw	12	; case 43
 11749  00BDE6  B4D8               	btfsc	status,2,c
 11750  00BDE8  D7BC               	goto	l846
 11751  00BDEA                     l829:
 11752                           
 11753                           ;standbyMode.c: 1456: return returnValue;
 11754  00BDEA  C005  F001         	movff	decode_diet@returnValue,?_decode_diet
 11755  00BDEE  C006  F002         	movff	decode_diet@returnValue+1,?_decode_diet+1
 11756  00BDF2  0012               	return		;funcret
 11757  00BDF4                     __end_of_decode_diet:
 11758                           	opt stack 0
 11759                           tblptru	equ	0xFF8
 11760                           tblptrh	equ	0xFF7
 11761                           tblptrl	equ	0xFF6
 11762                           tablat	equ	0xFF5
 11763                           prodh	equ	0xFF4
 11764                           prodl	equ	0xFF3
 11765                           postinc0	equ	0xFEE
 11766                           wreg	equ	0xFE8
 11767                           postdec1	equ	0xFE5
 11768                           plusw1	equ	0xFE3
 11769                           fsr1l	equ	0xFE1
 11770                           indf2	equ	0xFDF
 11771                           postinc2	equ	0xFDE
 11772                           postdec2	equ	0xFDD
 11773                           plusw2	equ	0xFDB
 11774                           fsr2h	equ	0xFDA
 11775                           fsr2l	equ	0xFD9
 11776                           status	equ	0xFD8
 11777                           
 11778 ;; *************** function _I2C_Master_Write *****************
 11779 ;; Defined at:
 11780 ;;		line 108 in file "I2C.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;  byteToWrite     2    1[COMRAM] unsigned int 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;		None
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  1    wreg      void 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;Total ram usage:        2 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    1
 11801 ;; This function calls:
 11802 ;;		_I2C_Master_Wait
 11803 ;; This function is called by:
 11804 ;;		_standbyMode
 11805 ;;		_RTC_setTime
 11806 ;;		_tick
 11807 ;;		_tock
 11808 ;;		_sendByteToArduino
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           	psect	text17
 11813  00AF5A                     __ptext17:
 11814                           	opt stack 0
 11815  00AF5A                     _I2C_Master_Write:
 11816                           	opt stack 28
 11817                           
 11818                           ;I2C.c: 116: I2C_Master_Wait();
 11819                           
 11820                           ;incstack = 0
 11821  00AF5A  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 11822                           
 11823                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11824  00AF5E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11825  00AF62  0012               	return		;funcret
 11826  00AF64                     __end_of_I2C_Master_Write:
 11827                           	opt stack 0
 11828                           tblptru	equ	0xFF8
 11829                           tblptrh	equ	0xFF7
 11830                           tblptrl	equ	0xFF6
 11831                           tablat	equ	0xFF5
 11832                           prodh	equ	0xFF4
 11833                           prodl	equ	0xFF3
 11834                           postinc0	equ	0xFEE
 11835                           wreg	equ	0xFE8
 11836                           postdec1	equ	0xFE5
 11837                           plusw1	equ	0xFE3
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           postdec2	equ	0xFDD
 11842                           plusw2	equ	0xFDB
 11843                           fsr2h	equ	0xFDA
 11844                           fsr2l	equ	0xFD9
 11845                           status	equ	0xFD8
 11846                           
 11847 ;; *************** function _I2C_Master_Stop *****************
 11848 ;; Defined at:
 11849 ;;		line 95 in file "I2C.c"
 11850 ;; Parameters:    Size  Location     Type
 11851 ;;		None
 11852 ;; Auto vars:     Size  Location     Type
 11853 ;;		None
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      void 
 11856 ;; Registers used:
 11857 ;;		wreg, status,2, status,0, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;Total ram usage:        0 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    1
 11870 ;; This function calls:
 11871 ;;		_I2C_Master_Wait
 11872 ;; This function is called by:
 11873 ;;		_standbyMode
 11874 ;;		_RTC_setTime
 11875 ;;		_tick
 11876 ;;		_tock
 11877 ;;		_sendByteToArduino
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           	psect	text18
 11882  00AF52                     __ptext18:
 11883                           	opt stack 0
 11884  00AF52                     _I2C_Master_Stop:
 11885                           	opt stack 28
 11886                           
 11887                           ;I2C.c: 104: I2C_Master_Wait();
 11888                           
 11889                           ;incstack = 0
 11890  00AF52  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 11891                           
 11892                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11893  00AF56  84C5               	bsf	4037,2,c	;volatile
 11894  00AF58  0012               	return		;funcret
 11895  00AF5A                     __end_of_I2C_Master_Stop:
 11896                           	opt stack 0
 11897                           tblptru	equ	0xFF8
 11898                           tblptrh	equ	0xFF7
 11899                           tblptrl	equ	0xFF6
 11900                           tablat	equ	0xFF5
 11901                           prodh	equ	0xFF4
 11902                           prodl	equ	0xFF3
 11903                           postinc0	equ	0xFEE
 11904                           wreg	equ	0xFE8
 11905                           postdec1	equ	0xFE5
 11906                           plusw1	equ	0xFE3
 11907                           fsr1l	equ	0xFE1
 11908                           indf2	equ	0xFDF
 11909                           postinc2	equ	0xFDE
 11910                           postdec2	equ	0xFDD
 11911                           plusw2	equ	0xFDB
 11912                           fsr2h	equ	0xFDA
 11913                           fsr2l	equ	0xFD9
 11914                           status	equ	0xFD8
 11915                           
 11916 ;; *************** function _I2C_Master_Start *****************
 11917 ;; Defined at:
 11918 ;;		line 69 in file "I2C.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;		None
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;		None
 11923 ;; Return value:  Size  Location     Type
 11924 ;;                  1    wreg      void 
 11925 ;; Registers used:
 11926 ;;		wreg, status,2, status,0, cstack
 11927 ;; Tracked objects:
 11928 ;;		On entry : 0/0
 11929 ;;		On exit  : 0/0
 11930 ;;		Unchanged: 0/0
 11931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;Total ram usage:        0 bytes
 11937 ;; Hardware stack levels used:    1
 11938 ;; Hardware stack levels required when called:    1
 11939 ;; This function calls:
 11940 ;;		_I2C_Master_Wait
 11941 ;; This function is called by:
 11942 ;;		_standbyMode
 11943 ;;		_RTC_setTime
 11944 ;;		_tick
 11945 ;;		_tock
 11946 ;;		_sendByteToArduino
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           	psect	text19
 11951  00AF4A                     __ptext19:
 11952                           	opt stack 0
 11953  00AF4A                     _I2C_Master_Start:
 11954                           	opt stack 28
 11955                           
 11956                           ;I2C.c: 78: I2C_Master_Wait();
 11957                           
 11958                           ;incstack = 0
 11959  00AF4A  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 11960                           
 11961                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11962  00AF4E  80C5               	bsf	4037,0,c	;volatile
 11963  00AF50  0012               	return		;funcret
 11964  00AF52                     __end_of_I2C_Master_Start:
 11965                           	opt stack 0
 11966                           tblptru	equ	0xFF8
 11967                           tblptrh	equ	0xFF7
 11968                           tblptrl	equ	0xFF6
 11969                           tablat	equ	0xFF5
 11970                           prodh	equ	0xFF4
 11971                           prodl	equ	0xFF3
 11972                           postinc0	equ	0xFEE
 11973                           wreg	equ	0xFE8
 11974                           postdec1	equ	0xFE5
 11975                           plusw1	equ	0xFE3
 11976                           fsr1l	equ	0xFE1
 11977                           indf2	equ	0xFDF
 11978                           postinc2	equ	0xFDE
 11979                           postdec2	equ	0xFDD
 11980                           plusw2	equ	0xFDB
 11981                           fsr2h	equ	0xFDA
 11982                           fsr2l	equ	0xFD9
 11983                           status	equ	0xFD8
 11984                           
 11985 ;; *************** function _I2C_Master_Read *****************
 11986 ;; Defined at:
 11987 ;;		line 120 in file "I2C.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;  ackBit          1    wreg     unsigned char 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  ackBit          1    1[COMRAM] unsigned char 
 11992 ;;  receivedByte    1    2[COMRAM] unsigned char 
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      unsigned char 
 11995 ;; Registers used:
 11996 ;;		wreg, status,2, status,0, cstack
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12006 ;;Total ram usage:        2 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    1
 12009 ;; This function calls:
 12010 ;;		_I2C_Master_Wait
 12011 ;; This function is called by:
 12012 ;;		_standbyMode
 12013 ;;		_tick
 12014 ;;		_tock
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           	psect	text20
 12019  00AFD0                     __ptext20:
 12020                           	opt stack 0
 12021  00AFD0                     _I2C_Master_Read:
 12022                           	opt stack 28
 12023                           
 12024                           ;incstack = 0
 12025                           ;I2C_Master_Read@ackBit stored from wreg
 12026  00AFD0  6E02               	movwf	I2C_Master_Read@ackBit,c
 12027                           
 12028                           ;I2C.c: 130: unsigned char receivedByte;
 12029                           ;I2C.c: 132: I2C_Master_Wait();
 12030  00AFD2  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 12031                           
 12032                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 12033  00AFD6  86C5               	bsf	4037,3,c	;volatile
 12034                           
 12035                           ;I2C.c: 135: I2C_Master_Wait();
 12036  00AFD8  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 12037                           
 12038                           ;I2C.c: 136: receivedByte = SSPBUF;
 12039  00AFDC  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 12040                           
 12041                           ;I2C.c: 138: I2C_Master_Wait();
 12042  00AFE0  ECB2  F057         	call	_I2C_Master_Wait	;wreg free
 12043                           
 12044                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 12045  00AFE4  B002               	btfsc	I2C_Master_Read@ackBit,0,c
 12046  00AFE6  D002               	bra	u10395
 12047  00AFE8  9AC5               	bcf	4037,5,c	;volatile
 12048  00AFEA  D001               	bra	u10396
 12049  00AFEC                     u10395:
 12050  00AFEC  8AC5               	bsf	4037,5,c	;volatile
 12051  00AFEE                     u10396:
 12052                           
 12053                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 12054  00AFEE  88C5               	bsf	4037,4,c	;volatile
 12055                           
 12056                           ;I2C.c: 142: return receivedByte;
 12057  00AFF0  5003               	movf	I2C_Master_Read@receivedByte,w,c
 12058  00AFF2  0012               	return	
 12059  00AFF4                     __end_of_I2C_Master_Read:
 12060                           	opt stack 0
 12061                           tblptru	equ	0xFF8
 12062                           tblptrh	equ	0xFF7
 12063                           tblptrl	equ	0xFF6
 12064                           tablat	equ	0xFF5
 12065                           prodh	equ	0xFF4
 12066                           prodl	equ	0xFF3
 12067                           postinc0	equ	0xFEE
 12068                           wreg	equ	0xFE8
 12069                           postdec1	equ	0xFE5
 12070                           plusw1	equ	0xFE3
 12071                           fsr1l	equ	0xFE1
 12072                           indf2	equ	0xFDF
 12073                           postinc2	equ	0xFDE
 12074                           postdec2	equ	0xFDD
 12075                           plusw2	equ	0xFDB
 12076                           fsr2h	equ	0xFDA
 12077                           fsr2l	equ	0xFD9
 12078                           status	equ	0xFD8
 12079                           
 12080 ;; *************** function _I2C_Master_Wait *****************
 12081 ;; Defined at:
 12082 ;;		line 51 in file "I2C.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;		None
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;		None
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, status,2, status,0
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/0
 12093 ;;		On exit  : 0/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;Total ram usage:        1 bytes
 12101 ;; Hardware stack levels used:    1
 12102 ;; This function calls:
 12103 ;;		Nothing
 12104 ;; This function is called by:
 12105 ;;		_I2C_Master_Start
 12106 ;;		_I2C_Master_Stop
 12107 ;;		_I2C_Master_Write
 12108 ;;		_I2C_Master_Read
 12109 ;;		_I2C_Master_RepeatedStart
 12110 ;; This function uses a non-reentrant model
 12111 ;;
 12112                           
 12113                           	psect	text21
 12114  00AF64                     __ptext21:
 12115                           	opt stack 0
 12116  00AF64                     _I2C_Master_Wait:
 12117                           	opt stack 28
 12118                           
 12119                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 12120                           
 12121                           ;incstack = 0
 12122  00AF64  B4C7               	btfsc	4039,2,c	;volatile
 12123  00AF66  D7FE               	goto	_I2C_Master_Wait
 12124  00AF68  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
 12125  00AF6C  0E1F               	movlw	31
 12126  00AF6E  1601               	andwf	??_I2C_Master_Wait,f,c
 12127  00AF70  B4D8               	btfsc	status,2,c
 12128  00AF72  0012               	return	
 12129  00AF74  D7F7               	goto	_I2C_Master_Wait
 12130  00AF76                     __end_of_I2C_Master_Wait:
 12131                           	opt stack 0
 12132                           tblptru	equ	0xFF8
 12133                           tblptrh	equ	0xFF7
 12134                           tblptrl	equ	0xFF6
 12135                           tablat	equ	0xFF5
 12136                           prodh	equ	0xFF4
 12137                           prodl	equ	0xFF3
 12138                           postinc0	equ	0xFEE
 12139                           wreg	equ	0xFE8
 12140                           postdec1	equ	0xFE5
 12141                           plusw1	equ	0xFE3
 12142                           fsr1l	equ	0xFE1
 12143                           indf2	equ	0xFDF
 12144                           postinc2	equ	0xFDE
 12145                           postdec2	equ	0xFDD
 12146                           plusw2	equ	0xFDB
 12147                           fsr2h	equ	0xFDA
 12148                           fsr2l	equ	0xFD9
 12149                           status	equ	0xFD8
 12150                           
 12151 ;; *************** function _I2C_Master_Init *****************
 12152 ;; Defined at:
 12153 ;;		line 14 in file "I2C.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;  clockFreq       4   13[COMRAM] const unsigned long 
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;		None
 12158 ;; Return value:  Size  Location     Type
 12159 ;;                  1    wreg      void 
 12160 ;; Registers used:
 12161 ;;		wreg, status,2, status,0, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12167 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12170 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;Total ram usage:        8 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    1
 12174 ;; This function calls:
 12175 ;;		___lldiv
 12176 ;; This function is called by:
 12177 ;;		_standbyMode
 12178 ;;		_tick
 12179 ;;		_tock
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183                           	psect	text22
 12184  00B1DA                     __ptext22:
 12185                           	opt stack 0
 12186  00B1DA                     _I2C_Master_Init:
 12187                           	opt stack 28
 12188                           
 12189                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12190                           
 12191                           ;incstack = 0
 12192  00B1DA  9AC6               	bcf	4038,5,c	;volatile
 12193                           
 12194                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12195  00B1DC  8694               	bsf	3988,3,c	;volatile
 12196                           
 12197                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12198  00B1DE  8894               	bsf	3988,4,c	;volatile
 12199                           
 12200                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12201  00B1E0  0E80               	movlw	128
 12202  00B1E2  6EC7               	movwf	4039,c	;volatile
 12203                           
 12204                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12205  00B1E4  0E28               	movlw	40
 12206  00B1E6  6EC6               	movwf	4038,c	;volatile
 12207                           
 12208                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12209  00B1E8  0E00               	movlw	0
 12210  00B1EA  6EC5               	movwf	4037,c	;volatile
 12211                           
 12212                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12213  00B1EC  0E00               	movlw	0
 12214  00B1EE  6E01               	movwf	___lldiv@dividend,c
 12215  00B1F0  0E5A               	movlw	90
 12216  00B1F2  6E02               	movwf	___lldiv@dividend+1,c
 12217  00B1F4  0E62               	movlw	98
 12218  00B1F6  6E03               	movwf	___lldiv@dividend+2,c
 12219  00B1F8  0E02               	movlw	2
 12220  00B1FA  6E04               	movwf	___lldiv@dividend+3,c
 12221  00B1FC  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12222  00B200  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12223  00B204  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12224  00B208  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12225  00B20C  0E02               	movlw	2
 12226  00B20E                     u10385:
 12227  00B20E  90D8               	bcf	status,0,c
 12228  00B210  3612               	rlcf	??_I2C_Master_Init,f,c
 12229  00B212  3613               	rlcf	??_I2C_Master_Init+1,f,c
 12230  00B214  3614               	rlcf	??_I2C_Master_Init+2,f,c
 12231  00B216  3615               	rlcf	??_I2C_Master_Init+3,f,c
 12232  00B218  2EE8               	decfsz	wreg,f,c
 12233  00B21A  D7F9               	goto	u10385
 12234  00B21C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
 12235  00B220  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12236  00B224  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12237  00B228  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12238  00B22C  EC05  F05A         	call	___lldiv	;wreg free
 12239  00B230  0401               	decf	?___lldiv,w,c
 12240  00B232  6EC8               	movwf	4040,c	;volatile
 12241  00B234  0012               	return		;funcret
 12242  00B236                     __end_of_I2C_Master_Init:
 12243                           	opt stack 0
 12244                           tblptru	equ	0xFF8
 12245                           tblptrh	equ	0xFF7
 12246                           tblptrl	equ	0xFF6
 12247                           tablat	equ	0xFF5
 12248                           prodh	equ	0xFF4
 12249                           prodl	equ	0xFF3
 12250                           postinc0	equ	0xFEE
 12251                           wreg	equ	0xFE8
 12252                           postdec1	equ	0xFE5
 12253                           plusw1	equ	0xFE3
 12254                           fsr1l	equ	0xFE1
 12255                           indf2	equ	0xFDF
 12256                           postinc2	equ	0xFDE
 12257                           postdec2	equ	0xFDD
 12258                           plusw2	equ	0xFDB
 12259                           fsr2h	equ	0xFDA
 12260                           fsr2l	equ	0xFD9
 12261                           status	equ	0xFD8
 12262                           
 12263 ;; *************** function ___lldiv *****************
 12264 ;; Defined at:
 12265 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  dividend        4    0[COMRAM] unsigned long 
 12268 ;;  divisor         4    4[COMRAM] unsigned long 
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  quotient        4    8[COMRAM] unsigned long 
 12271 ;;  counter         1   12[COMRAM] unsigned char 
 12272 ;; Return value:  Size  Location     Type
 12273 ;;                  4    0[COMRAM] unsigned long 
 12274 ;; Registers used:
 12275 ;;		wreg, status,2, status,0
 12276 ;; Tracked objects:
 12277 ;;		On entry : 0/0
 12278 ;;		On exit  : 0/0
 12279 ;;		Unchanged: 0/0
 12280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12281 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12284 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12285 ;;Total ram usage:       13 bytes
 12286 ;; Hardware stack levels used:    1
 12287 ;; This function calls:
 12288 ;;		Nothing
 12289 ;; This function is called by:
 12290 ;;		_I2C_Master_Init
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           	psect	text23
 12295  00B40A                     __ptext23:
 12296                           	opt stack 0
 12297  00B40A                     ___lldiv:
 12298                           	opt stack 28
 12299                           
 12300                           ;incstack = 0
 12301  00B40A  0E00               	movlw	0
 12302  00B40C  6E09               	movwf	___lldiv@quotient,c
 12303  00B40E  0E00               	movlw	0
 12304  00B410  6E0A               	movwf	___lldiv@quotient+1,c
 12305  00B412  0E00               	movlw	0
 12306  00B414  6E0B               	movwf	___lldiv@quotient+2,c
 12307  00B416  0E00               	movlw	0
 12308  00B418  6E0C               	movwf	___lldiv@quotient+3,c
 12309  00B41A  5005               	movf	___lldiv@divisor,w,c
 12310  00B41C  1006               	iorwf	___lldiv@divisor+1,w,c
 12311  00B41E  1007               	iorwf	___lldiv@divisor+2,w,c
 12312  00B420  1008               	iorwf	___lldiv@divisor+3,w,c
 12313  00B422  B4D8               	btfsc	status,2,c
 12314  00B424  D02A               	goto	l1684
 12315  00B426  0E01               	movlw	1
 12316  00B428  6E0D               	movwf	___lldiv@counter,c
 12317  00B42A  D006               	goto	l1679
 12318  00B42C  90D8               	bcf	status,0,c
 12319  00B42E  3605               	rlcf	___lldiv@divisor,f,c
 12320  00B430  3606               	rlcf	___lldiv@divisor+1,f,c
 12321  00B432  3607               	rlcf	___lldiv@divisor+2,f,c
 12322  00B434  3608               	rlcf	___lldiv@divisor+3,f,c
 12323  00B436  2A0D               	incf	___lldiv@counter,f,c
 12324  00B438                     l1679:
 12325  00B438  AE08               	btfss	___lldiv@divisor+3,7,c
 12326  00B43A  D7F8               	goto	l1680
 12327  00B43C                     u7590:
 12328  00B43C  90D8               	bcf	status,0,c
 12329  00B43E  3609               	rlcf	___lldiv@quotient,f,c
 12330  00B440  360A               	rlcf	___lldiv@quotient+1,f,c
 12331  00B442  360B               	rlcf	___lldiv@quotient+2,f,c
 12332  00B444  360C               	rlcf	___lldiv@quotient+3,f,c
 12333  00B446  5005               	movf	___lldiv@divisor,w,c
 12334  00B448  5C01               	subwf	___lldiv@dividend,w,c
 12335  00B44A  5006               	movf	___lldiv@divisor+1,w,c
 12336  00B44C  5802               	subwfb	___lldiv@dividend+1,w,c
 12337  00B44E  5007               	movf	___lldiv@divisor+2,w,c
 12338  00B450  5803               	subwfb	___lldiv@dividend+2,w,c
 12339  00B452  5008               	movf	___lldiv@divisor+3,w,c
 12340  00B454  5804               	subwfb	___lldiv@dividend+3,w,c
 12341  00B456  A0D8               	btfss	status,0,c
 12342  00B458  D009               	goto	l1683
 12343  00B45A  5005               	movf	___lldiv@divisor,w,c
 12344  00B45C  5E01               	subwf	___lldiv@dividend,f,c
 12345  00B45E  5006               	movf	___lldiv@divisor+1,w,c
 12346  00B460  5A02               	subwfb	___lldiv@dividend+1,f,c
 12347  00B462  5007               	movf	___lldiv@divisor+2,w,c
 12348  00B464  5A03               	subwfb	___lldiv@dividend+2,f,c
 12349  00B466  5008               	movf	___lldiv@divisor+3,w,c
 12350  00B468  5A04               	subwfb	___lldiv@dividend+3,f,c
 12351  00B46A  8009               	bsf	___lldiv@quotient,0,c
 12352  00B46C                     l1683:
 12353  00B46C  90D8               	bcf	status,0,c
 12354  00B46E  3208               	rrcf	___lldiv@divisor+3,f,c
 12355  00B470  3207               	rrcf	___lldiv@divisor+2,f,c
 12356  00B472  3206               	rrcf	___lldiv@divisor+1,f,c
 12357  00B474  3205               	rrcf	___lldiv@divisor,f,c
 12358  00B476  2E0D               	decfsz	___lldiv@counter,f,c
 12359  00B478  D7E1               	goto	u7590
 12360  00B47A                     l1684:
 12361  00B47A  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12362  00B47E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12363  00B482  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12364  00B486  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12365  00B48A  0012               	return		;funcret
 12366  00B48C                     __end_of___lldiv:
 12367                           	opt stack 0
 12368                           tblptru	equ	0xFF8
 12369                           tblptrh	equ	0xFF7
 12370                           tblptrl	equ	0xFF6
 12371                           tablat	equ	0xFF5
 12372                           prodh	equ	0xFF4
 12373                           prodl	equ	0xFF3
 12374                           postinc0	equ	0xFEE
 12375                           wreg	equ	0xFE8
 12376                           postdec1	equ	0xFE5
 12377                           plusw1	equ	0xFE3
 12378                           fsr1l	equ	0xFE1
 12379                           indf2	equ	0xFDF
 12380                           postinc2	equ	0xFDE
 12381                           postdec2	equ	0xFDD
 12382                           plusw2	equ	0xFDB
 12383                           fsr2h	equ	0xFDA
 12384                           fsr2l	equ	0xFD9
 12385                           status	equ	0xFD8
 12386                           
 12387 ;; *************** function _mainOperation *****************
 12388 ;; Defined at:
 12389 ;;		line 439 in file "operationMode.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;		None
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  sortedDrawer   16   48[BANK0 ] unsigned int [8]
 12394 ;;  drawerTable    16   32[BANK0 ] unsigned int [8]
 12395 ;;  foodTable      16   16[BANK0 ] unsigned int [8]
 12396 ;;  dietTable      16    0[BANK0 ] unsigned int [8]
 12397 ;;  i               2   70[BANK0 ] unsigned int 
 12398 ;;  currentDrawe    2   68[BANK0 ] unsigned int 
 12399 ;;  nextDrawer      2   66[BANK0 ] unsigned int 
 12400 ;;  temp            2   64[BANK0 ] unsigned int 
 12401 ;; Return value:  Size  Location     Type
 12402 ;;                  1    wreg      void 
 12403 ;; Registers used:
 12404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12405 ;; Tracked objects:
 12406 ;;		On entry : 0/0
 12407 ;;		On exit  : 0/0
 12408 ;;		Unchanged: 0/0
 12409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;      Totals:         2      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12414 ;;Total ram usage:       74 bytes
 12415 ;; Hardware stack levels used:    1
 12416 ;; Hardware stack levels required when called:    3
 12417 ;; This function calls:
 12418 ;;		_getUserInputs
 12419 ;;		_lcdInst
 12420 ;;		_moveHorizontally
 12421 ;;		_moveVertically
 12422 ;;		_printf
 12423 ;;		_sortDrawerList
 12424 ;; This function is called by:
 12425 ;;		_main
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           	psect	text24
 12430  00BF68                     __ptext24:
 12431                           	opt stack 0
 12432  00BF68                     _mainOperation:
 12433                           	opt stack 27
 12434                           
 12435                           ;operationMode.c: 440: unsigned int i = 0;
 12436                           
 12437                           ;incstack = 0
 12438  00BF68  0E00               	movlw	0
 12439  00BF6A  0100               	movlb	0	; () banked
 12440  00BF6C  6FC7               	movwf	(mainOperation@i+1)& (0+255),b
 12441  00BF6E  0E00               	movlw	0
 12442  00BF70  6FC6               	movwf	mainOperation@i& (0+255),b
 12443                           
 12444                           ;operationMode.c: 441: unsigned int currentDrawer = 0;
 12445  00BF72  0E00               	movlw	0
 12446  00BF74  6FC5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12447  00BF76  0E00               	movlw	0
 12448  00BF78  6FC4               	movwf	mainOperation@currentDrawer& (0+255),b
 12449                           
 12450                           ;operationMode.c: 442: unsigned int temp = 0;
 12451  00BF7A  0E00               	movlw	0
 12452  00BF7C  6FC1               	movwf	(mainOperation@temp+1)& (0+255),b
 12453  00BF7E  0E00               	movlw	0
 12454  00BF80  6FC0               	movwf	mainOperation@temp& (0+255),b
 12455                           
 12456                           ;operationMode.c: 443: unsigned int nextDrawer = 0;
 12457  00BF82  0E00               	movlw	0
 12458  00BF84  6FC3               	movwf	(mainOperation@nextDrawer+1)& (0+255),b
 12459  00BF86  0E00               	movlw	0
 12460  00BF88  6FC2               	movwf	mainOperation@nextDrawer& (0+255),b
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;operationMode.c: 445: unsigned int drawerTable[8] = {0,0,0,0,0,0,0,0};
 12464  00BF8A  EE21  F0EA         	lfsr	2,mainOperation@F3126
 12465  00BF8E  EE10  F0A0         	lfsr	1,mainOperation@drawerTable
 12466  00BF92  0E0F               	movlw	15
 12467  00BF94                     u11001:
 12468  00BF94  CFDB FFE3          	movff	plusw2,plusw1
 12469  00BF98  06E8               	decf	wreg,f,c
 12470  00BF9A  E2FC               	bc	u11001
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;operationMode.c: 446: unsigned int sortedDrawerTable[8] = {0,0,0,0,0,0,0,0};
 12474  00BF9C  EE21  F0DA         	lfsr	2,mainOperation@F3128
 12475  00BFA0  EE10  F0B0         	lfsr	1,mainOperation@sortedDrawerTable
 12476  00BFA4  0E0F               	movlw	15
 12477  00BFA6                     u11011:
 12478  00BFA6  CFDB FFE3          	movff	plusw2,plusw1
 12479  00BFAA  06E8               	decf	wreg,f,c
 12480  00BFAC  E2FC               	bc	u11011
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;operationMode.c: 447: unsigned int dietTable[8] = {0,0,0,0,0,0,0,0};
 12484  00BFAE  EE21  F0CA         	lfsr	2,mainOperation@F3130
 12485  00BFB2  EE10  F080         	lfsr	1,mainOperation@dietTable
 12486  00BFB6  0E0F               	movlw	15
 12487  00BFB8                     u11021:
 12488  00BFB8  CFDB FFE3          	movff	plusw2,plusw1
 12489  00BFBC  06E8               	decf	wreg,f,c
 12490  00BFBE  E2FC               	bc	u11021
 12491                           
 12492                           ; BSR set to: 0
 12493                           ;operationMode.c: 448: unsigned int foodTable[8] = {0,0,0,0,0,0,0,0};
 12494  00BFC0  EE21  F0BA         	lfsr	2,mainOperation@F3132
 12495  00BFC4  EE10  F090         	lfsr	1,mainOperation@foodTable
 12496  00BFC8  0E0F               	movlw	15
 12497  00BFCA                     u11031:
 12498  00BFCA  CFDB FFE3          	movff	plusw2,plusw1
 12499  00BFCE  06E8               	decf	wreg,f,c
 12500  00BFD0  E2FC               	bc	u11031
 12501                           
 12502                           ;operationMode.c: 451: currentDrawer = 1;
 12503  00BFD2  0E00               	movlw	0
 12504  00BFD4  6FC5               	movwf	(mainOperation@currentDrawer+1)& (0+255),b
 12505  00BFD6  0E01               	movlw	1
 12506  00BFD8  6FC4               	movwf	mainOperation@currentDrawer& (0+255),b
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;operationMode.c: 453: getUserInputs(drawerTable, dietTable, foodTable);
 12510  00BFDA  0EA0               	movlw	low mainOperation@drawerTable
 12511  00BFDC  6E07               	movwf	getUserInputs@drawerTable,c
 12512  00BFDE  0E00               	movlw	high mainOperation@drawerTable
 12513  00BFE0  6E08               	movwf	getUserInputs@drawerTable+1,c
 12514  00BFE2  0E80               	movlw	low mainOperation@dietTable
 12515  00BFE4  6E09               	movwf	getUserInputs@dietTable,c
 12516  00BFE6  0E00               	movlw	high mainOperation@dietTable
 12517  00BFE8  6E0A               	movwf	getUserInputs@dietTable+1,c
 12518  00BFEA  0E90               	movlw	low mainOperation@foodTable
 12519  00BFEC  6E0B               	movwf	getUserInputs@foodTable,c
 12520  00BFEE  0E00               	movlw	high mainOperation@foodTable
 12521  00BFF0  6E0C               	movwf	getUserInputs@foodTable+1,c
 12522  00BFF2  EC52  F05D         	call	_getUserInputs	;wreg free
 12523                           
 12524                           ;operationMode.c: 454: sortDrawerList(drawerTable, sortedDrawerTable);
 12525  00BFF6  0EA0               	movlw	low mainOperation@drawerTable
 12526  00BFF8  6E01               	movwf	sortDrawerList@drawerTable,c
 12527  00BFFA  0E00               	movlw	high mainOperation@drawerTable
 12528  00BFFC  6E02               	movwf	sortDrawerList@drawerTable+1,c
 12529  00BFFE  0EB0               	movlw	low mainOperation@sortedDrawerTable
 12530  00C000  6E03               	movwf	sortDrawerList@sortedDrawerTable,c
 12531  00C002  0E00               	movlw	high mainOperation@sortedDrawerTable
 12532  00C004  6E04               	movwf	sortDrawerList@sortedDrawerTable+1,c
 12533  00C006  EC9F  F06E         	call	_sortDrawerList	;wreg free
 12534                           
 12535                           ;operationMode.c: 456: for (i=0; i<7; i++){
 12536  00C00A  0E00               	movlw	0
 12537  00C00C  0100               	movlb	0	; () banked
 12538  00C00E  6FC7               	movwf	(mainOperation@i+1)& (0+255),b
 12539  00C010  0E00               	movlw	0
 12540  00C012  6FC6               	movwf	mainOperation@i& (0+255),b
 12541                           
 12542                           ; BSR set to: 0
 12543  00C014  51C7               	movf	(mainOperation@i+1)& (0+255),w,b
 12544  00C016  E105               	bnz	u11040
 12545  00C018  0E07               	movlw	7
 12546  00C01A  5DC6               	subwf	mainOperation@i& (0+255),w,b
 12547  00C01C  B0D8               	btfsc	status,0,c
 12548  00C01E  0012               	return	
 12549  00C020  D001               	goto	l321
 12550  00C022                     u11040:
 12551                           
 12552                           ; BSR set to: 0
 12553  00C022  0012               	return	
 12554  00C024                     l321:
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;operationMode.c: 457: if (sortedDrawerTable[i] != 0){
 12558                           
 12559                           ; BSR set to: 0
 12560  00C024  90D8               	bcf	status,0,c
 12561  00C026  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12562  00C028  6ED9               	movwf	fsr2l,c
 12563  00C02A  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12564  00C02C  6EDA               	movwf	fsr2h,c
 12565  00C02E  0EB0               	movlw	low mainOperation@sortedDrawerTable
 12566  00C030  26D9               	addwf	fsr2l,f,c
 12567  00C032  0E00               	movlw	high mainOperation@sortedDrawerTable
 12568  00C034  22DA               	addwfc	fsr2h,f,c
 12569  00C036  50DE               	movf	postinc2,w,c
 12570  00C038  10DE               	iorwf	postinc2,w,c
 12571  00C03A  B4D8               	btfsc	status,2,c
 12572  00C03C  D071               	goto	l323
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;operationMode.c: 458: currentDrawer = sortedDrawerTable[i];
 12576  00C03E  90D8               	bcf	status,0,c
 12577  00C040  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12578  00C042  6ED9               	movwf	fsr2l,c
 12579  00C044  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12580  00C046  6EDA               	movwf	fsr2h,c
 12581  00C048  0EB0               	movlw	low mainOperation@sortedDrawerTable
 12582  00C04A  26D9               	addwf	fsr2l,f,c
 12583  00C04C  0E00               	movlw	high mainOperation@sortedDrawerTable
 12584  00C04E  22DA               	addwfc	fsr2h,f,c
 12585  00C050  CFDE F0C4          	movff	postinc2,mainOperation@currentDrawer
 12586  00C054  CFDD F0C5          	movff	postdec2,mainOperation@currentDrawer+1
 12587                           
 12588                           ;operationMode.c: 459: nextDrawer = sortedDrawerTable[i+1];
 12589  00C058  C0C6  F037         	movff	mainOperation@i,??_mainOperation
 12590  00C05C  C0C7  F038         	movff	mainOperation@i+1,??_mainOperation+1
 12591  00C060  90D8               	bcf	status,0,c
 12592  00C062  3637               	rlcf	??_mainOperation,f,c
 12593  00C064  3638               	rlcf	??_mainOperation+1,f,c
 12594  00C066  0E02               	movlw	2
 12595  00C068  2637               	addwf	??_mainOperation,f,c
 12596  00C06A  0E00               	movlw	0
 12597  00C06C  2238               	addwfc	??_mainOperation+1,f,c
 12598  00C06E  0EB0               	movlw	low mainOperation@sortedDrawerTable
 12599  00C070  2437               	addwf	??_mainOperation,w,c
 12600  00C072  6ED9               	movwf	fsr2l,c
 12601  00C074  0E00               	movlw	high mainOperation@sortedDrawerTable
 12602  00C076  2038               	addwfc	??_mainOperation+1,w,c
 12603  00C078  6EDA               	movwf	fsr2h,c
 12604  00C07A  CFDE F0C2          	movff	postinc2,mainOperation@nextDrawer
 12605  00C07E  CFDD F0C3          	movff	postdec2,mainOperation@nextDrawer+1
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;operationMode.c: 460: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 12609  00C082  0E01               	movlw	1
 12610  00C084  ECBB  F057         	call	_lcdInst
 12611  00C088  0EC3               	movlw	195
 12612  00C08A  6E37               	movwf	??_mainOperation& (0+255),c
 12613  00C08C  0ECD               	movlw	205
 12614  00C08E                     u12147:
 12615  00C08E  2EE8               	decfsz	wreg,f,c
 12616  00C090  D7FE               	bra	u12147
 12617  00C092  2E37               	decfsz	??_mainOperation& (0+255),f,c
 12618  00C094  D7FC               	bra	u12147
 12619  00C096  F000               	nop	
 12620                           
 12621                           ;operationMode.c: 461: printf("Moving to");
 12622  00C098  0E71               	movlw	low STR_3
 12623  00C09A  6E0D               	movwf	printf@f,c
 12624  00C09C  0EFF               	movlw	high STR_3
 12625  00C09E  6E0E               	movwf	printf@f+1,c
 12626  00C0A0  EC55  F067         	call	_printf	;wreg free
 12627                           
 12628                           ;operationMode.c: 462: lcdInst(0xC0);;
 12629  00C0A4  0EC0               	movlw	192
 12630  00C0A6  ECBB  F057         	call	_lcdInst
 12631                           
 12632                           ;operationMode.c: 463: printf("drawer %i", sortedDrawerTable[i]);
 12633  00C0AA  0E67               	movlw	low STR_4
 12634  00C0AC  6E0D               	movwf	printf@f,c
 12635  00C0AE  0EFF               	movlw	high STR_4
 12636  00C0B0  6E0E               	movwf	printf@f+1,c
 12637  00C0B2  90D8               	bcf	status,0,c
 12638  00C0B4  0100               	movlb	0	; () banked
 12639  00C0B6  35C6               	rlcf	mainOperation@i& (0+255),w,b
 12640  00C0B8  6ED9               	movwf	fsr2l,c
 12641  00C0BA  35C7               	rlcf	(mainOperation@i+1)& (0+255),w,b
 12642  00C0BC  6EDA               	movwf	fsr2h,c
 12643  00C0BE  0EB0               	movlw	low mainOperation@sortedDrawerTable
 12644  00C0C0  26D9               	addwf	fsr2l,f,c
 12645  00C0C2  0E00               	movlw	high mainOperation@sortedDrawerTable
 12646  00C0C4  22DA               	addwfc	fsr2h,f,c
 12647  00C0C6  CFDE F00F          	movff	postinc2,?_printf+2
 12648  00C0CA  CFDD F010          	movff	postdec2,?_printf+3
 12649  00C0CE  EC55  F067         	call	_printf	;wreg free
 12650                           
 12651                           ;operationMode.c: 464: _delay((unsigned long)((1000)*(40000000/4000.0)));
 12652  00C0D2  0E33               	movlw	51
 12653  00C0D4  6E38               	movwf	(??_mainOperation+1)& (0+255),c
 12654  00C0D6  0EBB               	movlw	187
 12655  00C0D8  6E37               	movwf	??_mainOperation& (0+255),c
 12656  00C0DA  0EE0               	movlw	224
 12657  00C0DC                     u12157:
 12658  00C0DC  2EE8               	decfsz	wreg,f,c
 12659  00C0DE  D7FE               	bra	u12157
 12660  00C0E0  2E37               	decfsz	??_mainOperation& (0+255),f,c
 12661  00C0E2  D7FC               	bra	u12157
 12662  00C0E4  2E38               	decfsz	(??_mainOperation+1)& (0+255),f,c
 12663  00C0E6  D7FA               	bra	u12157
 12664                           
 12665                           ;operationMode.c: 466: temp = moveVertically(currentDrawer, nextDrawer);
 12666  00C0E8  C0C4  F00C         	movff	mainOperation@currentDrawer,moveVertically@currentDrawer
 12667  00C0EC  C0C5  F00D         	movff	mainOperation@currentDrawer+1,moveVertically@currentDrawer+1
 12668  00C0F0  C0C2  F00E         	movff	mainOperation@nextDrawer,moveVertically@nextDrawer
 12669  00C0F4  C0C3  F00F         	movff	mainOperation@nextDrawer+1,moveVertically@nextDrawer+1
 12670  00C0F8  ECB3  F064         	call	_moveVertically	;wreg free
 12671  00C0FC  C00C  F0C0         	movff	?_moveVertically,mainOperation@temp
 12672  00C100  C00D  F0C1         	movff	?_moveVertically+1,mainOperation@temp+1
 12673                           
 12674                           ;operationMode.c: 467: currentDrawer = temp;
 12675  00C104  C0C0  F0C4         	movff	mainOperation@temp,mainOperation@currentDrawer
 12676  00C108  C0C1  F0C5         	movff	mainOperation@temp+1,mainOperation@currentDrawer+1
 12677                           
 12678                           ;operationMode.c: 468: moveHorizontally(currentDrawer, nextDrawer);
 12679  00C10C  C0C4  F00C         	movff	mainOperation@currentDrawer,moveHorizontally@currentDrawer
 12680  00C110  C0C5  F00D         	movff	mainOperation@currentDrawer+1,moveHorizontally@currentDrawer+1
 12681  00C114  C0C2  F00E         	movff	mainOperation@nextDrawer,moveHorizontally@nextDrawer
 12682  00C118  C0C3  F00F         	movff	mainOperation@nextDrawer+1,moveHorizontally@nextDrawer+1
 12683  00C11C  ECFA  F05E         	call	_moveHorizontally	;wreg free
 12684  00C120                     l323:
 12685  00C120  0100               	movlb	0	; () banked
 12686  00C122  4BC6               	infsnz	mainOperation@i& (0+255),f,b
 12687  00C124  2BC7               	incf	(mainOperation@i+1)& (0+255),f,b
 12688                           
 12689                           ; BSR set to: 0
 12690  00C126  51C7               	movf	(mainOperation@i+1)& (0+255),w,b
 12691  00C128  E101               	bnz	l324
 12692  00C12A  D776               	goto	L124
 12693  00C12C                     l324:
 12694                           
 12695                           ; BSR set to: 0
 12696  00C12C  0012               	return		;funcret
 12697  00C12E                     __end_of_mainOperation:
 12698                           	opt stack 0
 12699                           tblptru	equ	0xFF8
 12700                           tblptrh	equ	0xFF7
 12701                           tblptrl	equ	0xFF6
 12702                           tablat	equ	0xFF5
 12703                           prodh	equ	0xFF4
 12704                           prodl	equ	0xFF3
 12705                           postinc0	equ	0xFEE
 12706                           wreg	equ	0xFE8
 12707                           postdec1	equ	0xFE5
 12708                           plusw1	equ	0xFE3
 12709                           fsr1l	equ	0xFE1
 12710                           indf2	equ	0xFDF
 12711                           postinc2	equ	0xFDE
 12712                           postdec2	equ	0xFDD
 12713                           plusw2	equ	0xFDB
 12714                           fsr2h	equ	0xFDA
 12715                           fsr2l	equ	0xFD9
 12716                           status	equ	0xFD8
 12717                           
 12718 ;; *************** function _sortDrawerList *****************
 12719 ;; Defined at:
 12720 ;;		line 52 in file "operationMode.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;  drawerTable     2    0[COMRAM] PTR unsigned int 
 12723 ;;		 -> mainOperation@drawerTable(16), 
 12724 ;;  sortedDrawer    2    2[COMRAM] PTR unsigned int 
 12725 ;;		 -> mainOperation@sortedDrawerTable(16), 
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;  sublist4        8   32[COMRAM] unsigned int [4]
 12728 ;;  sublist3        8   24[COMRAM] unsigned int [4]
 12729 ;;  sublist2        8   16[COMRAM] unsigned int [4]
 12730 ;;  sublist1        8    8[COMRAM] unsigned int [4]
 12731 ;;  i               2   52[COMRAM] unsigned int 
 12732 ;;  j               2   50[COMRAM] unsigned int 
 12733 ;;  count1          2   48[COMRAM] unsigned int 
 12734 ;;  count2          2   46[COMRAM] unsigned int 
 12735 ;;  count3          2   44[COMRAM] unsigned int 
 12736 ;;  temp            2   42[COMRAM] unsigned int 
 12737 ;;  count4          2   40[COMRAM] unsigned int 
 12738 ;; Return value:  Size  Location     Type
 12739 ;;                  1    wreg      void 
 12740 ;; Registers used:
 12741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12742 ;; Tracked objects:
 12743 ;;		On entry : 0/0
 12744 ;;		On exit  : 0/0
 12745 ;;		Unchanged: 0/0
 12746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12748 ;;      Locals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Totals:        54       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;Total ram usage:       54 bytes
 12752 ;; Hardware stack levels used:    1
 12753 ;; This function calls:
 12754 ;;		Nothing
 12755 ;; This function is called by:
 12756 ;;		_mainOperation
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           	psect	text25
 12761  00DD3E                     __ptext25:
 12762                           	opt stack 0
 12763  00DD3E                     _sortDrawerList:
 12764                           	opt stack 29
 12765                           
 12766                           ;operationMode.c: 53: unsigned int i = 0;
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;incstack = 0
 12770  00DD3E  0E00               	movlw	0
 12771  00DD40  6E36               	movwf	sortDrawerList@i+1,c
 12772  00DD42  0E00               	movlw	0
 12773  00DD44  6E35               	movwf	sortDrawerList@i,c
 12774                           
 12775                           ;operationMode.c: 54: unsigned int j = 0;
 12776  00DD46  0E00               	movlw	0
 12777  00DD48  6E34               	movwf	sortDrawerList@j+1,c
 12778  00DD4A  0E00               	movlw	0
 12779  00DD4C  6E33               	movwf	sortDrawerList@j,c
 12780                           
 12781                           ;operationMode.c: 55: unsigned int sublist1[] = {0,0,0,0};
 12782  00DD4E  EE20  F06A         	lfsr	2,sortDrawerList@F3072
 12783  00DD52  EE10  F009         	lfsr	1,sortDrawerList@sublist1
 12784  00DD56  0E07               	movlw	7
 12785  00DD58                     u7651:
 12786  00DD58  CFDB FFE3          	movff	plusw2,plusw1
 12787  00DD5C  06E8               	decf	wreg,f,c
 12788  00DD5E  E2FC               	bc	u7651
 12789                           
 12790                           ;operationMode.c: 56: unsigned int count1 = 0;
 12791  00DD60  0E00               	movlw	0
 12792  00DD62  6E32               	movwf	sortDrawerList@count1+1,c
 12793  00DD64  0E00               	movlw	0
 12794  00DD66  6E31               	movwf	sortDrawerList@count1,c
 12795                           
 12796                           ;operationMode.c: 57: unsigned int sublist2[] = {0,0,0,0};
 12797  00DD68  EE20  F0E8         	lfsr	2,sortDrawerList@F3075
 12798  00DD6C  EE10  F011         	lfsr	1,sortDrawerList@sublist2
 12799  00DD70  0E07               	movlw	7
 12800  00DD72                     u7661:
 12801  00DD72  CFDB FFE3          	movff	plusw2,plusw1
 12802  00DD76  06E8               	decf	wreg,f,c
 12803  00DD78  E2FC               	bc	u7661
 12804                           
 12805                           ;operationMode.c: 58: unsigned int count2 = 0;
 12806  00DD7A  0E00               	movlw	0
 12807  00DD7C  6E30               	movwf	sortDrawerList@count2+1,c
 12808  00DD7E  0E00               	movlw	0
 12809  00DD80  6E2F               	movwf	sortDrawerList@count2,c
 12810                           
 12811                           ;operationMode.c: 59: unsigned int sublist3[] = {0,0,0,0};
 12812  00DD82  EE20  F0E0         	lfsr	2,sortDrawerList@F3078
 12813  00DD86  EE10  F019         	lfsr	1,sortDrawerList@sublist3
 12814  00DD8A  0E07               	movlw	7
 12815  00DD8C                     u7671:
 12816  00DD8C  CFDB FFE3          	movff	plusw2,plusw1
 12817  00DD90  06E8               	decf	wreg,f,c
 12818  00DD92  E2FC               	bc	u7671
 12819                           
 12820                           ;operationMode.c: 60: unsigned int count3 = 0;
 12821  00DD94  0E00               	movlw	0
 12822  00DD96  6E2E               	movwf	sortDrawerList@count3+1,c
 12823  00DD98  0E00               	movlw	0
 12824  00DD9A  6E2D               	movwf	sortDrawerList@count3,c
 12825                           
 12826                           ;operationMode.c: 61: unsigned int sublist4[] = {0,0,0,0};
 12827  00DD9C  EE20  F0D8         	lfsr	2,sortDrawerList@F3081
 12828  00DDA0  EE10  F021         	lfsr	1,sortDrawerList@sublist4
 12829  00DDA4  0E07               	movlw	7
 12830  00DDA6                     u7681:
 12831  00DDA6  CFDB FFE3          	movff	plusw2,plusw1
 12832  00DDAA  06E8               	decf	wreg,f,c
 12833  00DDAC  E2FC               	bc	u7681
 12834                           
 12835                           ;operationMode.c: 62: unsigned int count4 = 0;
 12836  00DDAE  0E00               	movlw	0
 12837  00DDB0  6E2A               	movwf	sortDrawerList@count4+1,c
 12838  00DDB2  0E00               	movlw	0
 12839  00DDB4  6E29               	movwf	sortDrawerList@count4,c
 12840                           
 12841                           ;operationMode.c: 63: unsigned int temp;
 12842                           ;operationMode.c: 65: for (i=0; i<8; i++){
 12843  00DDB6  0E00               	movlw	0
 12844  00DDB8  6E36               	movwf	sortDrawerList@i+1,c
 12845  00DDBA  0E00               	movlw	0
 12846  00DDBC  6E35               	movwf	sortDrawerList@i,c
 12847  00DDBE                     l6658:
 12848  00DDBE  5036               	movf	sortDrawerList@i+1,w,c
 12849  00DDC0  E11D               	bnz	l6668
 12850  00DDC2  0E08               	movlw	8
 12851  00DDC4  5C35               	subwf	sortDrawerList@i,w,c
 12852  00DDC6  B0D8               	btfsc	status,0,c
 12853  00DDC8  D019               	goto	u7700
 12854                           
 12855                           ;operationMode.c: 66: sortedDrawerTable[i] = drawerTable[i];
 12856  00DDCA  90D8               	bcf	status,0,c
 12857  00DDCC  3435               	rlcf	sortDrawerList@i,w,c
 12858  00DDCE  6ED9               	movwf	fsr2l,c
 12859  00DDD0  3436               	rlcf	sortDrawerList@i+1,w,c
 12860  00DDD2  6EDA               	movwf	fsr2h,c
 12861  00DDD4  5001               	movf	sortDrawerList@drawerTable,w,c
 12862  00DDD6  26D9               	addwf	fsr2l,f,c
 12863  00DDD8  5002               	movf	sortDrawerList@drawerTable+1,w,c
 12864  00DDDA  22DA               	addwfc	fsr2h,f,c
 12865  00DDDC  90D8               	bcf	status,0,c
 12866  00DDDE  3435               	rlcf	sortDrawerList@i,w,c
 12867  00DDE0  6EE1               	movwf	fsr1l,c
 12868  00DDE2  3436               	rlcf	sortDrawerList@i+1,w,c
 12869  00DDE4  6EE2               	movwf	fsr1h,c
 12870  00DDE6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12871  00DDE8  26E1               	addwf	fsr1l,f,c
 12872  00DDEA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12873  00DDEC  22E2               	addwfc	fsr1h,f,c
 12874  00DDEE  CFDE FFE6          	movff	postinc2,postinc1
 12875  00DDF2  CFDD FFE5          	movff	postdec2,postdec1
 12876  00DDF6  4A35               	infsnz	sortDrawerList@i,f,c
 12877  00DDF8  2A36               	incf	sortDrawerList@i+1,f,c
 12878  00DDFA  D7E1               	goto	l6658
 12879  00DDFC                     u7700:
 12880  00DDFC                     l6668:
 12881                           
 12882                           ;operationMode.c: 67: }
 12883                           ;operationMode.c: 69: for(i=0; i<8; i++){
 12884  00DDFC  0E00               	movlw	0
 12885  00DDFE  6E36               	movwf	sortDrawerList@i+1,c
 12886  00DE00  0E00               	movlw	0
 12887  00DE02  6E35               	movwf	sortDrawerList@i,c
 12888  00DE04  5036               	movf	sortDrawerList@i+1,w,c
 12889  00DE06  E105               	bnz	u7710
 12890  00DE08  0E08               	movlw	8
 12891  00DE0A  5C35               	subwf	sortDrawerList@i,w,c
 12892  00DE0C  B0D8               	btfsc	status,0,c
 12893  00DE0E  D156               	goto	u7890
 12894  00DE10  D001               	goto	l142
 12895  00DE12                     u7710:
 12896  00DE12  D154               	goto	u7890
 12897  00DE14                     l142:
 12898                           
 12899                           ;operationMode.c: 70: if (sortedDrawerTable[i] == 0 || sortedDrawerTable[i] == 1 || sort
      +                          edDrawerTable[i] == 2 || sortedDrawerTable[i] == 3 || sortedDrawerTable[i] == 4){
 12900  00DE14  90D8               	bcf	status,0,c
 12901  00DE16  3435               	rlcf	sortDrawerList@i,w,c
 12902  00DE18  6ED9               	movwf	fsr2l,c
 12903  00DE1A  3436               	rlcf	sortDrawerList@i+1,w,c
 12904  00DE1C  6EDA               	movwf	fsr2h,c
 12905  00DE1E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12906  00DE20  26D9               	addwf	fsr2l,f,c
 12907  00DE22  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12908  00DE24  22DA               	addwfc	fsr2h,f,c
 12909  00DE26  50DE               	movf	postinc2,w,c
 12910  00DE28  10DE               	iorwf	postinc2,w,c
 12911  00DE2A  B4D8               	btfsc	status,2,c
 12912  00DE2C  D037               	goto	u7760
 12913  00DE2E  90D8               	bcf	status,0,c
 12914  00DE30  3435               	rlcf	sortDrawerList@i,w,c
 12915  00DE32  6ED9               	movwf	fsr2l,c
 12916  00DE34  3436               	rlcf	sortDrawerList@i+1,w,c
 12917  00DE36  6EDA               	movwf	fsr2h,c
 12918  00DE38  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12919  00DE3A  26D9               	addwf	fsr2l,f,c
 12920  00DE3C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12921  00DE3E  22DA               	addwfc	fsr2h,f,c
 12922  00DE40  04DE               	decf	postinc2,w,c
 12923  00DE42  10DE               	iorwf	postinc2,w,c
 12924  00DE44  B4D8               	btfsc	status,2,c
 12925  00DE46  D02A               	goto	u7760
 12926  00DE48  90D8               	bcf	status,0,c
 12927  00DE4A  3435               	rlcf	sortDrawerList@i,w,c
 12928  00DE4C  6ED9               	movwf	fsr2l,c
 12929  00DE4E  3436               	rlcf	sortDrawerList@i+1,w,c
 12930  00DE50  6EDA               	movwf	fsr2h,c
 12931  00DE52  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12932  00DE54  26D9               	addwf	fsr2l,f,c
 12933  00DE56  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12934  00DE58  22DA               	addwfc	fsr2h,f,c
 12935  00DE5A  0E02               	movlw	2
 12936  00DE5C  18DE               	xorwf	postinc2,w,c
 12937  00DE5E  10DE               	iorwf	postinc2,w,c
 12938  00DE60  B4D8               	btfsc	status,2,c
 12939  00DE62  D01C               	goto	u7760
 12940  00DE64  90D8               	bcf	status,0,c
 12941  00DE66  3435               	rlcf	sortDrawerList@i,w,c
 12942  00DE68  6ED9               	movwf	fsr2l,c
 12943  00DE6A  3436               	rlcf	sortDrawerList@i+1,w,c
 12944  00DE6C  6EDA               	movwf	fsr2h,c
 12945  00DE6E  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12946  00DE70  26D9               	addwf	fsr2l,f,c
 12947  00DE72  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12948  00DE74  22DA               	addwfc	fsr2h,f,c
 12949  00DE76  0E03               	movlw	3
 12950  00DE78  18DE               	xorwf	postinc2,w,c
 12951  00DE7A  10DE               	iorwf	postinc2,w,c
 12952  00DE7C  B4D8               	btfsc	status,2,c
 12953  00DE7E  D00E               	goto	u7760
 12954  00DE80  90D8               	bcf	status,0,c
 12955  00DE82  3435               	rlcf	sortDrawerList@i,w,c
 12956  00DE84  6ED9               	movwf	fsr2l,c
 12957  00DE86  3436               	rlcf	sortDrawerList@i+1,w,c
 12958  00DE88  6EDA               	movwf	fsr2h,c
 12959  00DE8A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12960  00DE8C  26D9               	addwf	fsr2l,f,c
 12961  00DE8E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12962  00DE90  22DA               	addwfc	fsr2h,f,c
 12963  00DE92  0E04               	movlw	4
 12964  00DE94  18DE               	xorwf	postinc2,w,c
 12965  00DE96  10DE               	iorwf	postinc2,w,c
 12966  00DE98  A4D8               	btfss	status,2,c
 12967  00DE9A  D019               	goto	l144
 12968  00DE9C                     u7760:
 12969                           
 12970                           ;operationMode.c: 71: sublist1[count1]=sortedDrawerTable[i];
 12971  00DE9C  90D8               	bcf	status,0,c
 12972  00DE9E  3435               	rlcf	sortDrawerList@i,w,c
 12973  00DEA0  6ED9               	movwf	fsr2l,c
 12974  00DEA2  3436               	rlcf	sortDrawerList@i+1,w,c
 12975  00DEA4  6EDA               	movwf	fsr2h,c
 12976  00DEA6  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 12977  00DEA8  26D9               	addwf	fsr2l,f,c
 12978  00DEAA  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 12979  00DEAC  22DA               	addwfc	fsr2h,f,c
 12980  00DEAE  90D8               	bcf	status,0,c
 12981  00DEB0  3431               	rlcf	sortDrawerList@count1,w,c
 12982  00DEB2  6EE1               	movwf	fsr1l,c
 12983  00DEB4  3432               	rlcf	sortDrawerList@count1+1,w,c
 12984  00DEB6  6EE2               	movwf	fsr1h,c
 12985  00DEB8  0E09               	movlw	low sortDrawerList@sublist1
 12986  00DEBA  26E1               	addwf	fsr1l,f,c
 12987  00DEBC  0E00               	movlw	high sortDrawerList@sublist1
 12988  00DEBE  22E2               	addwfc	fsr1h,f,c
 12989  00DEC0  CFDE FFE6          	movff	postinc2,postinc1
 12990  00DEC4  CFDD FFE5          	movff	postdec2,postdec1
 12991                           
 12992                           ;operationMode.c: 72: count1 ++;
 12993  00DEC8  4A31               	infsnz	sortDrawerList@count1,f,c
 12994  00DECA  2A32               	incf	sortDrawerList@count1+1,f,c
 12995                           
 12996                           ;operationMode.c: 73: }
 12997  00DECC  D0F2               	goto	l156
 12998  00DECE                     l144:
 12999                           
 13000                           ;operationMode.c: 74: else if (sortedDrawerTable[i] == 5 || sortedDrawerTable[i] == 6 ||
      +                           sortedDrawerTable[i] == 7 || sortedDrawerTable[i] == 8){
 13001  00DECE  90D8               	bcf	status,0,c
 13002  00DED0  3435               	rlcf	sortDrawerList@i,w,c
 13003  00DED2  6ED9               	movwf	fsr2l,c
 13004  00DED4  3436               	rlcf	sortDrawerList@i+1,w,c
 13005  00DED6  6EDA               	movwf	fsr2h,c
 13006  00DED8  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13007  00DEDA  26D9               	addwf	fsr2l,f,c
 13008  00DEDC  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13009  00DEDE  22DA               	addwfc	fsr2h,f,c
 13010  00DEE0  0E05               	movlw	5
 13011  00DEE2  18DE               	xorwf	postinc2,w,c
 13012  00DEE4  10DE               	iorwf	postinc2,w,c
 13013  00DEE6  B4D8               	btfsc	status,2,c
 13014  00DEE8  D02A               	goto	u7800
 13015  00DEEA  90D8               	bcf	status,0,c
 13016  00DEEC  3435               	rlcf	sortDrawerList@i,w,c
 13017  00DEEE  6ED9               	movwf	fsr2l,c
 13018  00DEF0  3436               	rlcf	sortDrawerList@i+1,w,c
 13019  00DEF2  6EDA               	movwf	fsr2h,c
 13020  00DEF4  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13021  00DEF6  26D9               	addwf	fsr2l,f,c
 13022  00DEF8  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13023  00DEFA  22DA               	addwfc	fsr2h,f,c
 13024  00DEFC  0E06               	movlw	6
 13025  00DEFE  18DE               	xorwf	postinc2,w,c
 13026  00DF00  10DE               	iorwf	postinc2,w,c
 13027  00DF02  B4D8               	btfsc	status,2,c
 13028  00DF04  D01C               	goto	u7800
 13029  00DF06  90D8               	bcf	status,0,c
 13030  00DF08  3435               	rlcf	sortDrawerList@i,w,c
 13031  00DF0A  6ED9               	movwf	fsr2l,c
 13032  00DF0C  3436               	rlcf	sortDrawerList@i+1,w,c
 13033  00DF0E  6EDA               	movwf	fsr2h,c
 13034  00DF10  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13035  00DF12  26D9               	addwf	fsr2l,f,c
 13036  00DF14  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13037  00DF16  22DA               	addwfc	fsr2h,f,c
 13038  00DF18  0E07               	movlw	7
 13039  00DF1A  18DE               	xorwf	postinc2,w,c
 13040  00DF1C  10DE               	iorwf	postinc2,w,c
 13041  00DF1E  B4D8               	btfsc	status,2,c
 13042  00DF20  D00E               	goto	u7800
 13043  00DF22  90D8               	bcf	status,0,c
 13044  00DF24  3435               	rlcf	sortDrawerList@i,w,c
 13045  00DF26  6ED9               	movwf	fsr2l,c
 13046  00DF28  3436               	rlcf	sortDrawerList@i+1,w,c
 13047  00DF2A  6EDA               	movwf	fsr2h,c
 13048  00DF2C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13049  00DF2E  26D9               	addwf	fsr2l,f,c
 13050  00DF30  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13051  00DF32  22DA               	addwfc	fsr2h,f,c
 13052  00DF34  0E08               	movlw	8
 13053  00DF36  18DE               	xorwf	postinc2,w,c
 13054  00DF38  10DE               	iorwf	postinc2,w,c
 13055  00DF3A  A4D8               	btfss	status,2,c
 13056  00DF3C  D019               	goto	l148
 13057  00DF3E                     u7800:
 13058                           
 13059                           ;operationMode.c: 75: sublist2[count2]=sortedDrawerTable[i];
 13060  00DF3E  90D8               	bcf	status,0,c
 13061  00DF40  3435               	rlcf	sortDrawerList@i,w,c
 13062  00DF42  6ED9               	movwf	fsr2l,c
 13063  00DF44  3436               	rlcf	sortDrawerList@i+1,w,c
 13064  00DF46  6EDA               	movwf	fsr2h,c
 13065  00DF48  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13066  00DF4A  26D9               	addwf	fsr2l,f,c
 13067  00DF4C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13068  00DF4E  22DA               	addwfc	fsr2h,f,c
 13069  00DF50  90D8               	bcf	status,0,c
 13070  00DF52  342F               	rlcf	sortDrawerList@count2,w,c
 13071  00DF54  6EE1               	movwf	fsr1l,c
 13072  00DF56  3430               	rlcf	sortDrawerList@count2+1,w,c
 13073  00DF58  6EE2               	movwf	fsr1h,c
 13074  00DF5A  0E11               	movlw	low sortDrawerList@sublist2
 13075  00DF5C  26E1               	addwf	fsr1l,f,c
 13076  00DF5E  0E00               	movlw	high sortDrawerList@sublist2
 13077  00DF60  22E2               	addwfc	fsr1h,f,c
 13078  00DF62  CFDE FFE6          	movff	postinc2,postinc1
 13079  00DF66  CFDD FFE5          	movff	postdec2,postdec1
 13080                           
 13081                           ;operationMode.c: 76: count2+=1;
 13082  00DF6A  4A2F               	infsnz	sortDrawerList@count2,f,c
 13083  00DF6C  2A30               	incf	sortDrawerList@count2+1,f,c
 13084                           
 13085                           ;operationMode.c: 77: }
 13086  00DF6E  D0A1               	goto	l156
 13087  00DF70                     l148:
 13088                           
 13089                           ;operationMode.c: 78: else if (sortedDrawerTable[i] == 9 || sortedDrawerTable[i] == 10 |
      +                          | sortedDrawerTable[i] == 11 || sortedDrawerTable[i] == 12){
 13090  00DF70  90D8               	bcf	status,0,c
 13091  00DF72  3435               	rlcf	sortDrawerList@i,w,c
 13092  00DF74  6ED9               	movwf	fsr2l,c
 13093  00DF76  3436               	rlcf	sortDrawerList@i+1,w,c
 13094  00DF78  6EDA               	movwf	fsr2h,c
 13095  00DF7A  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13096  00DF7C  26D9               	addwf	fsr2l,f,c
 13097  00DF7E  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13098  00DF80  22DA               	addwfc	fsr2h,f,c
 13099  00DF82  0E09               	movlw	9
 13100  00DF84  18DE               	xorwf	postinc2,w,c
 13101  00DF86  10DE               	iorwf	postinc2,w,c
 13102  00DF88  B4D8               	btfsc	status,2,c
 13103  00DF8A  D02A               	goto	u7840
 13104  00DF8C  90D8               	bcf	status,0,c
 13105  00DF8E  3435               	rlcf	sortDrawerList@i,w,c
 13106  00DF90  6ED9               	movwf	fsr2l,c
 13107  00DF92  3436               	rlcf	sortDrawerList@i+1,w,c
 13108  00DF94  6EDA               	movwf	fsr2h,c
 13109  00DF96  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13110  00DF98  26D9               	addwf	fsr2l,f,c
 13111  00DF9A  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13112  00DF9C  22DA               	addwfc	fsr2h,f,c
 13113  00DF9E  0E0A               	movlw	10
 13114  00DFA0  18DE               	xorwf	postinc2,w,c
 13115  00DFA2  10DE               	iorwf	postinc2,w,c
 13116  00DFA4  B4D8               	btfsc	status,2,c
 13117  00DFA6  D01C               	goto	u7840
 13118  00DFA8  90D8               	bcf	status,0,c
 13119  00DFAA  3435               	rlcf	sortDrawerList@i,w,c
 13120  00DFAC  6ED9               	movwf	fsr2l,c
 13121  00DFAE  3436               	rlcf	sortDrawerList@i+1,w,c
 13122  00DFB0  6EDA               	movwf	fsr2h,c
 13123  00DFB2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13124  00DFB4  26D9               	addwf	fsr2l,f,c
 13125  00DFB6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13126  00DFB8  22DA               	addwfc	fsr2h,f,c
 13127  00DFBA  0E0B               	movlw	11
 13128  00DFBC  18DE               	xorwf	postinc2,w,c
 13129  00DFBE  10DE               	iorwf	postinc2,w,c
 13130  00DFC0  B4D8               	btfsc	status,2,c
 13131  00DFC2  D00E               	goto	u7840
 13132  00DFC4  90D8               	bcf	status,0,c
 13133  00DFC6  3435               	rlcf	sortDrawerList@i,w,c
 13134  00DFC8  6ED9               	movwf	fsr2l,c
 13135  00DFCA  3436               	rlcf	sortDrawerList@i+1,w,c
 13136  00DFCC  6EDA               	movwf	fsr2h,c
 13137  00DFCE  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13138  00DFD0  26D9               	addwf	fsr2l,f,c
 13139  00DFD2  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13140  00DFD4  22DA               	addwfc	fsr2h,f,c
 13141  00DFD6  0E0C               	movlw	12
 13142  00DFD8  18DE               	xorwf	postinc2,w,c
 13143  00DFDA  10DE               	iorwf	postinc2,w,c
 13144  00DFDC  A4D8               	btfss	status,2,c
 13145  00DFDE  D019               	goto	l152
 13146  00DFE0                     u7840:
 13147                           
 13148                           ;operationMode.c: 79: sublist3[count3]=sortedDrawerTable[i];
 13149  00DFE0  90D8               	bcf	status,0,c
 13150  00DFE2  3435               	rlcf	sortDrawerList@i,w,c
 13151  00DFE4  6ED9               	movwf	fsr2l,c
 13152  00DFE6  3436               	rlcf	sortDrawerList@i+1,w,c
 13153  00DFE8  6EDA               	movwf	fsr2h,c
 13154  00DFEA  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13155  00DFEC  26D9               	addwf	fsr2l,f,c
 13156  00DFEE  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13157  00DFF0  22DA               	addwfc	fsr2h,f,c
 13158  00DFF2  90D8               	bcf	status,0,c
 13159  00DFF4  342D               	rlcf	sortDrawerList@count3,w,c
 13160  00DFF6  6EE1               	movwf	fsr1l,c
 13161  00DFF8  342E               	rlcf	sortDrawerList@count3+1,w,c
 13162  00DFFA  6EE2               	movwf	fsr1h,c
 13163  00DFFC  0E19               	movlw	low sortDrawerList@sublist3
 13164  00DFFE  26E1               	addwf	fsr1l,f,c
 13165  00E000  0E00               	movlw	high sortDrawerList@sublist3
 13166  00E002  22E2               	addwfc	fsr1h,f,c
 13167  00E004  CFDE FFE6          	movff	postinc2,postinc1
 13168  00E008  CFDD FFE5          	movff	postdec2,postdec1
 13169                           
 13170                           ;operationMode.c: 80: count3+=1;
 13171  00E00C  4A2D               	infsnz	sortDrawerList@count3,f,c
 13172  00E00E  2A2E               	incf	sortDrawerList@count3+1,f,c
 13173                           
 13174                           ;operationMode.c: 81: }
 13175  00E010  D050               	goto	l156
 13176  00E012                     l152:
 13177                           
 13178                           ;operationMode.c: 82: else if (sortedDrawerTable[i] == 13 || sortedDrawerTable[i] == 14 
      +                          || sortedDrawerTable[i] == 15 || sortedDrawerTable[i] == 16){
 13179  00E012  90D8               	bcf	status,0,c
 13180  00E014  3435               	rlcf	sortDrawerList@i,w,c
 13181  00E016  6ED9               	movwf	fsr2l,c
 13182  00E018  3436               	rlcf	sortDrawerList@i+1,w,c
 13183  00E01A  6EDA               	movwf	fsr2h,c
 13184  00E01C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13185  00E01E  26D9               	addwf	fsr2l,f,c
 13186  00E020  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13187  00E022  22DA               	addwfc	fsr2h,f,c
 13188  00E024  0E0D               	movlw	13
 13189  00E026  18DE               	xorwf	postinc2,w,c
 13190  00E028  10DE               	iorwf	postinc2,w,c
 13191  00E02A  B4D8               	btfsc	status,2,c
 13192  00E02C  D02A               	goto	u7880
 13193  00E02E  90D8               	bcf	status,0,c
 13194  00E030  3435               	rlcf	sortDrawerList@i,w,c
 13195  00E032  6ED9               	movwf	fsr2l,c
 13196  00E034  3436               	rlcf	sortDrawerList@i+1,w,c
 13197  00E036  6EDA               	movwf	fsr2h,c
 13198  00E038  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13199  00E03A  26D9               	addwf	fsr2l,f,c
 13200  00E03C  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13201  00E03E  22DA               	addwfc	fsr2h,f,c
 13202  00E040  0E0E               	movlw	14
 13203  00E042  18DE               	xorwf	postinc2,w,c
 13204  00E044  10DE               	iorwf	postinc2,w,c
 13205  00E046  B4D8               	btfsc	status,2,c
 13206  00E048  D01C               	goto	u7880
 13207  00E04A  90D8               	bcf	status,0,c
 13208  00E04C  3435               	rlcf	sortDrawerList@i,w,c
 13209  00E04E  6ED9               	movwf	fsr2l,c
 13210  00E050  3436               	rlcf	sortDrawerList@i+1,w,c
 13211  00E052  6EDA               	movwf	fsr2h,c
 13212  00E054  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13213  00E056  26D9               	addwf	fsr2l,f,c
 13214  00E058  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13215  00E05A  22DA               	addwfc	fsr2h,f,c
 13216  00E05C  0E0F               	movlw	15
 13217  00E05E  18DE               	xorwf	postinc2,w,c
 13218  00E060  10DE               	iorwf	postinc2,w,c
 13219  00E062  B4D8               	btfsc	status,2,c
 13220  00E064  D00E               	goto	u7880
 13221  00E066  90D8               	bcf	status,0,c
 13222  00E068  3435               	rlcf	sortDrawerList@i,w,c
 13223  00E06A  6ED9               	movwf	fsr2l,c
 13224  00E06C  3436               	rlcf	sortDrawerList@i+1,w,c
 13225  00E06E  6EDA               	movwf	fsr2h,c
 13226  00E070  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13227  00E072  26D9               	addwf	fsr2l,f,c
 13228  00E074  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13229  00E076  22DA               	addwfc	fsr2h,f,c
 13230  00E078  0E10               	movlw	16
 13231  00E07A  18DE               	xorwf	postinc2,w,c
 13232  00E07C  10DE               	iorwf	postinc2,w,c
 13233  00E07E  A4D8               	btfss	status,2,c
 13234  00E080  D018               	goto	l156
 13235  00E082                     u7880:
 13236                           
 13237                           ;operationMode.c: 83: sublist4[count4]=sortedDrawerTable[i];
 13238  00E082  90D8               	bcf	status,0,c
 13239  00E084  3435               	rlcf	sortDrawerList@i,w,c
 13240  00E086  6ED9               	movwf	fsr2l,c
 13241  00E088  3436               	rlcf	sortDrawerList@i+1,w,c
 13242  00E08A  6EDA               	movwf	fsr2h,c
 13243  00E08C  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13244  00E08E  26D9               	addwf	fsr2l,f,c
 13245  00E090  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13246  00E092  22DA               	addwfc	fsr2h,f,c
 13247  00E094  90D8               	bcf	status,0,c
 13248  00E096  3429               	rlcf	sortDrawerList@count4,w,c
 13249  00E098  6EE1               	movwf	fsr1l,c
 13250  00E09A  342A               	rlcf	sortDrawerList@count4+1,w,c
 13251  00E09C  6EE2               	movwf	fsr1h,c
 13252  00E09E  0E21               	movlw	low sortDrawerList@sublist4
 13253  00E0A0  26E1               	addwf	fsr1l,f,c
 13254  00E0A2  0E00               	movlw	high sortDrawerList@sublist4
 13255  00E0A4  22E2               	addwfc	fsr1h,f,c
 13256  00E0A6  CFDE FFE6          	movff	postinc2,postinc1
 13257  00E0AA  CFDD FFE5          	movff	postdec2,postdec1
 13258                           
 13259                           ;operationMode.c: 84: count4+=1;
 13260  00E0AE  4A29               	infsnz	sortDrawerList@count4,f,c
 13261  00E0B0  2A2A               	incf	sortDrawerList@count4+1,f,c
 13262  00E0B2                     l156:
 13263  00E0B2  4A35               	infsnz	sortDrawerList@i,f,c
 13264  00E0B4  2A36               	incf	sortDrawerList@i+1,f,c
 13265  00E0B6  5036               	movf	sortDrawerList@i+1,w,c
 13266  00E0B8  E101               	bnz	l6728
 13267  00E0BA  D6A6               	goto	L125
 13268  00E0BC                     u7890:
 13269  00E0BC                     l6728:
 13270                           
 13271                           ;operationMode.c: 85: }
 13272                           ;operationMode.c: 86: }
 13273                           ;operationMode.c: 88: for (i=0; i<count1; i++){
 13274  00E0BC  0E00               	movlw	0
 13275  00E0BE  6E36               	movwf	sortDrawerList@i+1,c
 13276  00E0C0  0E00               	movlw	0
 13277  00E0C2  6E35               	movwf	sortDrawerList@i,c
 13278  00E0C4  D057               	goto	l159
 13279  00E0C6                     
 13280                           ;operationMode.c: 89: for (j=0; j<count1; j++){
 13281  00E0C6  0E00               	movlw	0
 13282  00E0C8  6E34               	movwf	sortDrawerList@j+1,c
 13283  00E0CA  0E00               	movlw	0
 13284  00E0CC  6E33               	movwf	sortDrawerList@j,c
 13285  00E0CE  D04A               	goto	l161
 13286  00E0D0                     
 13287                           ;operationMode.c: 90: if (sublist1[j] > sublist1[i]){
 13288  00E0D0  90D8               	bcf	status,0,c
 13289  00E0D2  3433               	rlcf	sortDrawerList@j,w,c
 13290  00E0D4  6ED9               	movwf	fsr2l,c
 13291  00E0D6  3434               	rlcf	sortDrawerList@j+1,w,c
 13292  00E0D8  6EDA               	movwf	fsr2h,c
 13293  00E0DA  0E09               	movlw	low sortDrawerList@sublist1
 13294  00E0DC  26D9               	addwf	fsr2l,f,c
 13295  00E0DE  0E00               	movlw	high sortDrawerList@sublist1
 13296  00E0E0  22DA               	addwfc	fsr2h,f,c
 13297  00E0E2  90D8               	bcf	status,0,c
 13298  00E0E4  3435               	rlcf	sortDrawerList@i,w,c
 13299  00E0E6  6EE1               	movwf	fsr1l,c
 13300  00E0E8  3436               	rlcf	sortDrawerList@i+1,w,c
 13301  00E0EA  6EE2               	movwf	fsr1h,c
 13302  00E0EC  0E09               	movlw	low sortDrawerList@sublist1
 13303  00E0EE  26E1               	addwf	fsr1l,f,c
 13304  00E0F0  0E00               	movlw	high sortDrawerList@sublist1
 13305  00E0F2  22E2               	addwfc	fsr1h,f,c
 13306  00E0F4  50DE               	movf	postinc2,w,c
 13307  00E0F6  5CE6               	subwf	postinc1,w,c
 13308  00E0F8  50DE               	movf	postinc2,w,c
 13309  00E0FA  58E6               	subwfb	postinc1,w,c
 13310  00E0FC  B0D8               	btfsc	status,0,c
 13311  00E0FE  D030               	goto	l163
 13312                           
 13313                           ;operationMode.c: 91: temp = sublist1[i];
 13314  00E100  90D8               	bcf	status,0,c
 13315  00E102  3435               	rlcf	sortDrawerList@i,w,c
 13316  00E104  6ED9               	movwf	fsr2l,c
 13317  00E106  3436               	rlcf	sortDrawerList@i+1,w,c
 13318  00E108  6EDA               	movwf	fsr2h,c
 13319  00E10A  0E09               	movlw	low sortDrawerList@sublist1
 13320  00E10C  26D9               	addwf	fsr2l,f,c
 13321  00E10E  0E00               	movlw	high sortDrawerList@sublist1
 13322  00E110  22DA               	addwfc	fsr2h,f,c
 13323  00E112  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13324  00E116  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13325                           
 13326                           ;operationMode.c: 92: sublist1[i] = sublist1[j];
 13327  00E11A  90D8               	bcf	status,0,c
 13328  00E11C  3433               	rlcf	sortDrawerList@j,w,c
 13329  00E11E  6ED9               	movwf	fsr2l,c
 13330  00E120  3434               	rlcf	sortDrawerList@j+1,w,c
 13331  00E122  6EDA               	movwf	fsr2h,c
 13332  00E124  0E09               	movlw	low sortDrawerList@sublist1
 13333  00E126  26D9               	addwf	fsr2l,f,c
 13334  00E128  0E00               	movlw	high sortDrawerList@sublist1
 13335  00E12A  22DA               	addwfc	fsr2h,f,c
 13336  00E12C  90D8               	bcf	status,0,c
 13337  00E12E  3435               	rlcf	sortDrawerList@i,w,c
 13338  00E130  6EE1               	movwf	fsr1l,c
 13339  00E132  3436               	rlcf	sortDrawerList@i+1,w,c
 13340  00E134  6EE2               	movwf	fsr1h,c
 13341  00E136  0E09               	movlw	low sortDrawerList@sublist1
 13342  00E138  26E1               	addwf	fsr1l,f,c
 13343  00E13A  0E00               	movlw	high sortDrawerList@sublist1
 13344  00E13C  22E2               	addwfc	fsr1h,f,c
 13345  00E13E  CFDE FFE6          	movff	postinc2,postinc1
 13346  00E142  CFDD FFE5          	movff	postdec2,postdec1
 13347                           
 13348                           ;operationMode.c: 93: sublist1[j] = temp;
 13349  00E146  90D8               	bcf	status,0,c
 13350  00E148  3433               	rlcf	sortDrawerList@j,w,c
 13351  00E14A  6ED9               	movwf	fsr2l,c
 13352  00E14C  3434               	rlcf	sortDrawerList@j+1,w,c
 13353  00E14E  6EDA               	movwf	fsr2h,c
 13354  00E150  0E09               	movlw	low sortDrawerList@sublist1
 13355  00E152  26D9               	addwf	fsr2l,f,c
 13356  00E154  0E00               	movlw	high sortDrawerList@sublist1
 13357  00E156  22DA               	addwfc	fsr2h,f,c
 13358  00E158  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13359  00E15C  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13360  00E160                     l163:
 13361  00E160  4A33               	infsnz	sortDrawerList@j,f,c
 13362  00E162  2A34               	incf	sortDrawerList@j+1,f,c
 13363  00E164                     l161:
 13364  00E164  5031               	movf	sortDrawerList@count1,w,c
 13365  00E166  5C33               	subwf	sortDrawerList@j,w,c
 13366  00E168  5032               	movf	sortDrawerList@count1+1,w,c
 13367  00E16A  5834               	subwfb	sortDrawerList@j+1,w,c
 13368  00E16C  A0D8               	btfss	status,0,c
 13369  00E16E  D7B0               	goto	l162
 13370  00E170  4A35               	infsnz	sortDrawerList@i,f,c
 13371  00E172  2A36               	incf	sortDrawerList@i+1,f,c
 13372  00E174                     l159:
 13373  00E174  5031               	movf	sortDrawerList@count1,w,c
 13374  00E176  5C35               	subwf	sortDrawerList@i,w,c
 13375  00E178  5032               	movf	sortDrawerList@count1+1,w,c
 13376  00E17A  5836               	subwfb	sortDrawerList@i+1,w,c
 13377  00E17C  A0D8               	btfss	status,0,c
 13378  00E17E  D7A3               	goto	l160
 13379                           
 13380                           ;operationMode.c: 94: }
 13381                           ;operationMode.c: 95: }
 13382                           ;operationMode.c: 96: }
 13383                           ;operationMode.c: 98: for (i=0; i<count3; i++){
 13384  00E180  0E00               	movlw	0
 13385  00E182  6E36               	movwf	sortDrawerList@i+1,c
 13386  00E184  0E00               	movlw	0
 13387  00E186  6E35               	movwf	sortDrawerList@i,c
 13388  00E188  D057               	goto	l166
 13389  00E18A                     
 13390                           ;operationMode.c: 99: for (j=0; j<count3; j++){
 13391  00E18A  0E00               	movlw	0
 13392  00E18C  6E34               	movwf	sortDrawerList@j+1,c
 13393  00E18E  0E00               	movlw	0
 13394  00E190  6E33               	movwf	sortDrawerList@j,c
 13395  00E192  D04A               	goto	l168
 13396  00E194                     
 13397                           ;operationMode.c: 100: if (sublist3[j] > sublist3[i]){
 13398  00E194  90D8               	bcf	status,0,c
 13399  00E196  3433               	rlcf	sortDrawerList@j,w,c
 13400  00E198  6ED9               	movwf	fsr2l,c
 13401  00E19A  3434               	rlcf	sortDrawerList@j+1,w,c
 13402  00E19C  6EDA               	movwf	fsr2h,c
 13403  00E19E  0E19               	movlw	low sortDrawerList@sublist3
 13404  00E1A0  26D9               	addwf	fsr2l,f,c
 13405  00E1A2  0E00               	movlw	high sortDrawerList@sublist3
 13406  00E1A4  22DA               	addwfc	fsr2h,f,c
 13407  00E1A6  90D8               	bcf	status,0,c
 13408  00E1A8  3435               	rlcf	sortDrawerList@i,w,c
 13409  00E1AA  6EE1               	movwf	fsr1l,c
 13410  00E1AC  3436               	rlcf	sortDrawerList@i+1,w,c
 13411  00E1AE  6EE2               	movwf	fsr1h,c
 13412  00E1B0  0E19               	movlw	low sortDrawerList@sublist3
 13413  00E1B2  26E1               	addwf	fsr1l,f,c
 13414  00E1B4  0E00               	movlw	high sortDrawerList@sublist3
 13415  00E1B6  22E2               	addwfc	fsr1h,f,c
 13416  00E1B8  50DE               	movf	postinc2,w,c
 13417  00E1BA  5CE6               	subwf	postinc1,w,c
 13418  00E1BC  50DE               	movf	postinc2,w,c
 13419  00E1BE  58E6               	subwfb	postinc1,w,c
 13420  00E1C0  B0D8               	btfsc	status,0,c
 13421  00E1C2  D030               	goto	l170
 13422                           
 13423                           ;operationMode.c: 101: temp = sublist3[i];
 13424  00E1C4  90D8               	bcf	status,0,c
 13425  00E1C6  3435               	rlcf	sortDrawerList@i,w,c
 13426  00E1C8  6ED9               	movwf	fsr2l,c
 13427  00E1CA  3436               	rlcf	sortDrawerList@i+1,w,c
 13428  00E1CC  6EDA               	movwf	fsr2h,c
 13429  00E1CE  0E19               	movlw	low sortDrawerList@sublist3
 13430  00E1D0  26D9               	addwf	fsr2l,f,c
 13431  00E1D2  0E00               	movlw	high sortDrawerList@sublist3
 13432  00E1D4  22DA               	addwfc	fsr2h,f,c
 13433  00E1D6  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13434  00E1DA  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13435                           
 13436                           ;operationMode.c: 102: sublist3[i] = sublist3[j];
 13437  00E1DE  90D8               	bcf	status,0,c
 13438  00E1E0  3433               	rlcf	sortDrawerList@j,w,c
 13439  00E1E2  6ED9               	movwf	fsr2l,c
 13440  00E1E4  3434               	rlcf	sortDrawerList@j+1,w,c
 13441  00E1E6  6EDA               	movwf	fsr2h,c
 13442  00E1E8  0E19               	movlw	low sortDrawerList@sublist3
 13443  00E1EA  26D9               	addwf	fsr2l,f,c
 13444  00E1EC  0E00               	movlw	high sortDrawerList@sublist3
 13445  00E1EE  22DA               	addwfc	fsr2h,f,c
 13446  00E1F0  90D8               	bcf	status,0,c
 13447  00E1F2  3435               	rlcf	sortDrawerList@i,w,c
 13448  00E1F4  6EE1               	movwf	fsr1l,c
 13449  00E1F6  3436               	rlcf	sortDrawerList@i+1,w,c
 13450  00E1F8  6EE2               	movwf	fsr1h,c
 13451  00E1FA  0E19               	movlw	low sortDrawerList@sublist3
 13452  00E1FC  26E1               	addwf	fsr1l,f,c
 13453  00E1FE  0E00               	movlw	high sortDrawerList@sublist3
 13454  00E200  22E2               	addwfc	fsr1h,f,c
 13455  00E202  CFDE FFE6          	movff	postinc2,postinc1
 13456  00E206  CFDD FFE5          	movff	postdec2,postdec1
 13457                           
 13458                           ;operationMode.c: 103: sublist3[j] = temp;
 13459  00E20A  90D8               	bcf	status,0,c
 13460  00E20C  3433               	rlcf	sortDrawerList@j,w,c
 13461  00E20E  6ED9               	movwf	fsr2l,c
 13462  00E210  3434               	rlcf	sortDrawerList@j+1,w,c
 13463  00E212  6EDA               	movwf	fsr2h,c
 13464  00E214  0E19               	movlw	low sortDrawerList@sublist3
 13465  00E216  26D9               	addwf	fsr2l,f,c
 13466  00E218  0E00               	movlw	high sortDrawerList@sublist3
 13467  00E21A  22DA               	addwfc	fsr2h,f,c
 13468  00E21C  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13469  00E220  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13470  00E224                     l170:
 13471  00E224  4A33               	infsnz	sortDrawerList@j,f,c
 13472  00E226  2A34               	incf	sortDrawerList@j+1,f,c
 13473  00E228                     l168:
 13474  00E228  502D               	movf	sortDrawerList@count3,w,c
 13475  00E22A  5C33               	subwf	sortDrawerList@j,w,c
 13476  00E22C  502E               	movf	sortDrawerList@count3+1,w,c
 13477  00E22E  5834               	subwfb	sortDrawerList@j+1,w,c
 13478  00E230  A0D8               	btfss	status,0,c
 13479  00E232  D7B0               	goto	l169
 13480  00E234  4A35               	infsnz	sortDrawerList@i,f,c
 13481  00E236  2A36               	incf	sortDrawerList@i+1,f,c
 13482  00E238                     l166:
 13483  00E238  502D               	movf	sortDrawerList@count3,w,c
 13484  00E23A  5C35               	subwf	sortDrawerList@i,w,c
 13485  00E23C  502E               	movf	sortDrawerList@count3+1,w,c
 13486  00E23E  5836               	subwfb	sortDrawerList@i+1,w,c
 13487  00E240  A0D8               	btfss	status,0,c
 13488  00E242  D7A3               	goto	l167
 13489                           
 13490                           ;operationMode.c: 104: }
 13491                           ;operationMode.c: 105: }
 13492                           ;operationMode.c: 106: }
 13493                           ;operationMode.c: 108: for (i=0; i<count2; i++){
 13494  00E244  0E00               	movlw	0
 13495  00E246  6E36               	movwf	sortDrawerList@i+1,c
 13496  00E248  0E00               	movlw	0
 13497  00E24A  6E35               	movwf	sortDrawerList@i,c
 13498  00E24C  D057               	goto	l173
 13499  00E24E                     
 13500                           ;operationMode.c: 109: for (j=0; j<count2; j++){
 13501  00E24E  0E00               	movlw	0
 13502  00E250  6E34               	movwf	sortDrawerList@j+1,c
 13503  00E252  0E00               	movlw	0
 13504  00E254  6E33               	movwf	sortDrawerList@j,c
 13505  00E256  D04A               	goto	l175
 13506  00E258                     
 13507                           ;operationMode.c: 110: if (sublist2[j] < sublist2[i]){
 13508  00E258  90D8               	bcf	status,0,c
 13509  00E25A  3435               	rlcf	sortDrawerList@i,w,c
 13510  00E25C  6ED9               	movwf	fsr2l,c
 13511  00E25E  3436               	rlcf	sortDrawerList@i+1,w,c
 13512  00E260  6EDA               	movwf	fsr2h,c
 13513  00E262  0E11               	movlw	low sortDrawerList@sublist2
 13514  00E264  26D9               	addwf	fsr2l,f,c
 13515  00E266  0E00               	movlw	high sortDrawerList@sublist2
 13516  00E268  22DA               	addwfc	fsr2h,f,c
 13517  00E26A  90D8               	bcf	status,0,c
 13518  00E26C  3433               	rlcf	sortDrawerList@j,w,c
 13519  00E26E  6EE1               	movwf	fsr1l,c
 13520  00E270  3434               	rlcf	sortDrawerList@j+1,w,c
 13521  00E272  6EE2               	movwf	fsr1h,c
 13522  00E274  0E11               	movlw	low sortDrawerList@sublist2
 13523  00E276  26E1               	addwf	fsr1l,f,c
 13524  00E278  0E00               	movlw	high sortDrawerList@sublist2
 13525  00E27A  22E2               	addwfc	fsr1h,f,c
 13526  00E27C  50DE               	movf	postinc2,w,c
 13527  00E27E  5CE6               	subwf	postinc1,w,c
 13528  00E280  50DE               	movf	postinc2,w,c
 13529  00E282  58E6               	subwfb	postinc1,w,c
 13530  00E284  B0D8               	btfsc	status,0,c
 13531  00E286  D030               	goto	l177
 13532                           
 13533                           ;operationMode.c: 111: temp = sublist2[i];
 13534  00E288  90D8               	bcf	status,0,c
 13535  00E28A  3435               	rlcf	sortDrawerList@i,w,c
 13536  00E28C  6ED9               	movwf	fsr2l,c
 13537  00E28E  3436               	rlcf	sortDrawerList@i+1,w,c
 13538  00E290  6EDA               	movwf	fsr2h,c
 13539  00E292  0E11               	movlw	low sortDrawerList@sublist2
 13540  00E294  26D9               	addwf	fsr2l,f,c
 13541  00E296  0E00               	movlw	high sortDrawerList@sublist2
 13542  00E298  22DA               	addwfc	fsr2h,f,c
 13543  00E29A  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13544  00E29E  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13545                           
 13546                           ;operationMode.c: 112: sublist2[i] = sublist2[j];
 13547  00E2A2  90D8               	bcf	status,0,c
 13548  00E2A4  3433               	rlcf	sortDrawerList@j,w,c
 13549  00E2A6  6ED9               	movwf	fsr2l,c
 13550  00E2A8  3434               	rlcf	sortDrawerList@j+1,w,c
 13551  00E2AA  6EDA               	movwf	fsr2h,c
 13552  00E2AC  0E11               	movlw	low sortDrawerList@sublist2
 13553  00E2AE  26D9               	addwf	fsr2l,f,c
 13554  00E2B0  0E00               	movlw	high sortDrawerList@sublist2
 13555  00E2B2  22DA               	addwfc	fsr2h,f,c
 13556  00E2B4  90D8               	bcf	status,0,c
 13557  00E2B6  3435               	rlcf	sortDrawerList@i,w,c
 13558  00E2B8  6EE1               	movwf	fsr1l,c
 13559  00E2BA  3436               	rlcf	sortDrawerList@i+1,w,c
 13560  00E2BC  6EE2               	movwf	fsr1h,c
 13561  00E2BE  0E11               	movlw	low sortDrawerList@sublist2
 13562  00E2C0  26E1               	addwf	fsr1l,f,c
 13563  00E2C2  0E00               	movlw	high sortDrawerList@sublist2
 13564  00E2C4  22E2               	addwfc	fsr1h,f,c
 13565  00E2C6  CFDE FFE6          	movff	postinc2,postinc1
 13566  00E2CA  CFDD FFE5          	movff	postdec2,postdec1
 13567                           
 13568                           ;operationMode.c: 113: sublist2[j] = temp;
 13569  00E2CE  90D8               	bcf	status,0,c
 13570  00E2D0  3433               	rlcf	sortDrawerList@j,w,c
 13571  00E2D2  6ED9               	movwf	fsr2l,c
 13572  00E2D4  3434               	rlcf	sortDrawerList@j+1,w,c
 13573  00E2D6  6EDA               	movwf	fsr2h,c
 13574  00E2D8  0E11               	movlw	low sortDrawerList@sublist2
 13575  00E2DA  26D9               	addwf	fsr2l,f,c
 13576  00E2DC  0E00               	movlw	high sortDrawerList@sublist2
 13577  00E2DE  22DA               	addwfc	fsr2h,f,c
 13578  00E2E0  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13579  00E2E4  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13580  00E2E8                     l177:
 13581  00E2E8  4A33               	infsnz	sortDrawerList@j,f,c
 13582  00E2EA  2A34               	incf	sortDrawerList@j+1,f,c
 13583  00E2EC                     l175:
 13584  00E2EC  502F               	movf	sortDrawerList@count2,w,c
 13585  00E2EE  5C33               	subwf	sortDrawerList@j,w,c
 13586  00E2F0  5030               	movf	sortDrawerList@count2+1,w,c
 13587  00E2F2  5834               	subwfb	sortDrawerList@j+1,w,c
 13588  00E2F4  A0D8               	btfss	status,0,c
 13589  00E2F6  D7B0               	goto	l176
 13590  00E2F8  4A35               	infsnz	sortDrawerList@i,f,c
 13591  00E2FA  2A36               	incf	sortDrawerList@i+1,f,c
 13592  00E2FC                     l173:
 13593  00E2FC  502F               	movf	sortDrawerList@count2,w,c
 13594  00E2FE  5C35               	subwf	sortDrawerList@i,w,c
 13595  00E300  5030               	movf	sortDrawerList@count2+1,w,c
 13596  00E302  5836               	subwfb	sortDrawerList@i+1,w,c
 13597  00E304  A0D8               	btfss	status,0,c
 13598  00E306  D7A3               	goto	l174
 13599                           
 13600                           ;operationMode.c: 114: }
 13601                           ;operationMode.c: 115: }
 13602                           ;operationMode.c: 116: }
 13603                           ;operationMode.c: 118: for (i=0; i<count4; i++){
 13604  00E308  0E00               	movlw	0
 13605  00E30A  6E36               	movwf	sortDrawerList@i+1,c
 13606  00E30C  0E00               	movlw	0
 13607  00E30E  6E35               	movwf	sortDrawerList@i,c
 13608  00E310  D057               	goto	l180
 13609  00E312                     
 13610                           ;operationMode.c: 119: for (j=0; j<count4; j++){
 13611  00E312  0E00               	movlw	0
 13612  00E314  6E34               	movwf	sortDrawerList@j+1,c
 13613  00E316  0E00               	movlw	0
 13614  00E318  6E33               	movwf	sortDrawerList@j,c
 13615  00E31A  D04A               	goto	l182
 13616  00E31C                     
 13617                           ;operationMode.c: 120: if (sublist4[j] < sublist4[i]){
 13618  00E31C  90D8               	bcf	status,0,c
 13619  00E31E  3435               	rlcf	sortDrawerList@i,w,c
 13620  00E320  6ED9               	movwf	fsr2l,c
 13621  00E322  3436               	rlcf	sortDrawerList@i+1,w,c
 13622  00E324  6EDA               	movwf	fsr2h,c
 13623  00E326  0E21               	movlw	low sortDrawerList@sublist4
 13624  00E328  26D9               	addwf	fsr2l,f,c
 13625  00E32A  0E00               	movlw	high sortDrawerList@sublist4
 13626  00E32C  22DA               	addwfc	fsr2h,f,c
 13627  00E32E  90D8               	bcf	status,0,c
 13628  00E330  3433               	rlcf	sortDrawerList@j,w,c
 13629  00E332  6EE1               	movwf	fsr1l,c
 13630  00E334  3434               	rlcf	sortDrawerList@j+1,w,c
 13631  00E336  6EE2               	movwf	fsr1h,c
 13632  00E338  0E21               	movlw	low sortDrawerList@sublist4
 13633  00E33A  26E1               	addwf	fsr1l,f,c
 13634  00E33C  0E00               	movlw	high sortDrawerList@sublist4
 13635  00E33E  22E2               	addwfc	fsr1h,f,c
 13636  00E340  50DE               	movf	postinc2,w,c
 13637  00E342  5CE6               	subwf	postinc1,w,c
 13638  00E344  50DE               	movf	postinc2,w,c
 13639  00E346  58E6               	subwfb	postinc1,w,c
 13640  00E348  B0D8               	btfsc	status,0,c
 13641  00E34A  D030               	goto	l184
 13642                           
 13643                           ;operationMode.c: 121: temp = sublist4[i];
 13644  00E34C  90D8               	bcf	status,0,c
 13645  00E34E  3435               	rlcf	sortDrawerList@i,w,c
 13646  00E350  6ED9               	movwf	fsr2l,c
 13647  00E352  3436               	rlcf	sortDrawerList@i+1,w,c
 13648  00E354  6EDA               	movwf	fsr2h,c
 13649  00E356  0E21               	movlw	low sortDrawerList@sublist4
 13650  00E358  26D9               	addwf	fsr2l,f,c
 13651  00E35A  0E00               	movlw	high sortDrawerList@sublist4
 13652  00E35C  22DA               	addwfc	fsr2h,f,c
 13653  00E35E  CFDE F02B          	movff	postinc2,sortDrawerList@temp
 13654  00E362  CFDD F02C          	movff	postdec2,sortDrawerList@temp+1
 13655                           
 13656                           ;operationMode.c: 122: sublist4[i] = sublist4[j];
 13657  00E366  90D8               	bcf	status,0,c
 13658  00E368  3433               	rlcf	sortDrawerList@j,w,c
 13659  00E36A  6ED9               	movwf	fsr2l,c
 13660  00E36C  3434               	rlcf	sortDrawerList@j+1,w,c
 13661  00E36E  6EDA               	movwf	fsr2h,c
 13662  00E370  0E21               	movlw	low sortDrawerList@sublist4
 13663  00E372  26D9               	addwf	fsr2l,f,c
 13664  00E374  0E00               	movlw	high sortDrawerList@sublist4
 13665  00E376  22DA               	addwfc	fsr2h,f,c
 13666  00E378  90D8               	bcf	status,0,c
 13667  00E37A  3435               	rlcf	sortDrawerList@i,w,c
 13668  00E37C  6EE1               	movwf	fsr1l,c
 13669  00E37E  3436               	rlcf	sortDrawerList@i+1,w,c
 13670  00E380  6EE2               	movwf	fsr1h,c
 13671  00E382  0E21               	movlw	low sortDrawerList@sublist4
 13672  00E384  26E1               	addwf	fsr1l,f,c
 13673  00E386  0E00               	movlw	high sortDrawerList@sublist4
 13674  00E388  22E2               	addwfc	fsr1h,f,c
 13675  00E38A  CFDE FFE6          	movff	postinc2,postinc1
 13676  00E38E  CFDD FFE5          	movff	postdec2,postdec1
 13677                           
 13678                           ;operationMode.c: 123: sublist4[j] = temp;
 13679  00E392  90D8               	bcf	status,0,c
 13680  00E394  3433               	rlcf	sortDrawerList@j,w,c
 13681  00E396  6ED9               	movwf	fsr2l,c
 13682  00E398  3434               	rlcf	sortDrawerList@j+1,w,c
 13683  00E39A  6EDA               	movwf	fsr2h,c
 13684  00E39C  0E21               	movlw	low sortDrawerList@sublist4
 13685  00E39E  26D9               	addwf	fsr2l,f,c
 13686  00E3A0  0E00               	movlw	high sortDrawerList@sublist4
 13687  00E3A2  22DA               	addwfc	fsr2h,f,c
 13688  00E3A4  C02B  FFDE         	movff	sortDrawerList@temp,postinc2
 13689  00E3A8  C02C  FFDD         	movff	sortDrawerList@temp+1,postdec2
 13690  00E3AC                     l184:
 13691  00E3AC  4A33               	infsnz	sortDrawerList@j,f,c
 13692  00E3AE  2A34               	incf	sortDrawerList@j+1,f,c
 13693  00E3B0                     l182:
 13694  00E3B0  5029               	movf	sortDrawerList@count4,w,c
 13695  00E3B2  5C33               	subwf	sortDrawerList@j,w,c
 13696  00E3B4  502A               	movf	sortDrawerList@count4+1,w,c
 13697  00E3B6  5834               	subwfb	sortDrawerList@j+1,w,c
 13698  00E3B8  A0D8               	btfss	status,0,c
 13699  00E3BA  D7B0               	goto	l183
 13700  00E3BC  4A35               	infsnz	sortDrawerList@i,f,c
 13701  00E3BE  2A36               	incf	sortDrawerList@i+1,f,c
 13702  00E3C0                     l180:
 13703  00E3C0  5029               	movf	sortDrawerList@count4,w,c
 13704  00E3C2  5C35               	subwf	sortDrawerList@i,w,c
 13705  00E3C4  502A               	movf	sortDrawerList@count4+1,w,c
 13706  00E3C6  5836               	subwfb	sortDrawerList@i+1,w,c
 13707  00E3C8  A0D8               	btfss	status,0,c
 13708  00E3CA  D7A3               	goto	l181
 13709                           
 13710                           ;operationMode.c: 124: }
 13711                           ;operationMode.c: 125: }
 13712                           ;operationMode.c: 126: }
 13713                           ;operationMode.c: 128: for (i=0; i<count1; i++){
 13714  00E3CC  0E00               	movlw	0
 13715  00E3CE  6E36               	movwf	sortDrawerList@i+1,c
 13716  00E3D0  0E00               	movlw	0
 13717  00E3D2  6E35               	movwf	sortDrawerList@i,c
 13718  00E3D4  D018               	goto	l187
 13719  00E3D6                     
 13720                           ;operationMode.c: 129: sortedDrawerTable[i] = sublist1[i];
 13721  00E3D6  90D8               	bcf	status,0,c
 13722  00E3D8  3435               	rlcf	sortDrawerList@i,w,c
 13723  00E3DA  6ED9               	movwf	fsr2l,c
 13724  00E3DC  3436               	rlcf	sortDrawerList@i+1,w,c
 13725  00E3DE  6EDA               	movwf	fsr2h,c
 13726  00E3E0  0E09               	movlw	low sortDrawerList@sublist1
 13727  00E3E2  26D9               	addwf	fsr2l,f,c
 13728  00E3E4  0E00               	movlw	high sortDrawerList@sublist1
 13729  00E3E6  22DA               	addwfc	fsr2h,f,c
 13730  00E3E8  90D8               	bcf	status,0,c
 13731  00E3EA  3435               	rlcf	sortDrawerList@i,w,c
 13732  00E3EC  6EE1               	movwf	fsr1l,c
 13733  00E3EE  3436               	rlcf	sortDrawerList@i+1,w,c
 13734  00E3F0  6EE2               	movwf	fsr1h,c
 13735  00E3F2  5003               	movf	sortDrawerList@sortedDrawerTable,w,c
 13736  00E3F4  26E1               	addwf	fsr1l,f,c
 13737  00E3F6  5004               	movf	sortDrawerList@sortedDrawerTable+1,w,c
 13738  00E3F8  22E2               	addwfc	fsr1h,f,c
 13739  00E3FA  CFDE FFE6          	movff	postinc2,postinc1
 13740  00E3FE  CFDD FFE5          	movff	postdec2,postdec1
 13741  00E402  4A35               	infsnz	sortDrawerList@i,f,c
 13742  00E404  2A36               	incf	sortDrawerList@i+1,f,c
 13743  00E406                     l187:
 13744  00E406  5031               	movf	sortDrawerList@count1,w,c
 13745  00E408  5C35               	subwf	sortDrawerList@i,w,c
 13746  00E40A  5032               	movf	sortDrawerList@count1+1,w,c
 13747  00E40C  5836               	subwfb	sortDrawerList@i+1,w,c
 13748  00E40E  A0D8               	btfss	status,0,c
 13749  00E410  D7E2               	goto	l188
 13750                           
 13751                           ;operationMode.c: 130: }
 13752                           ;operationMode.c: 131: for (i=0; i<count2; i++){
 13753  00E412  0E00               	movlw	0
 13754  00E414  6E36               	movwf	sortDrawerList@i+1,c
 13755  00E416  0E00               	movlw	0
 13756  00E418  6E35               	movwf	sortDrawerList@i,c
 13757  00E41A  D01E               	goto	l190
 13758  00E41C                     
 13759                           ;operationMode.c: 132: sortedDrawerTable[i+count1] = sublist2[i];
 13760  00E41C  90D8               	bcf	status,0,c
 13761  00E41E  3435               	rlcf	sortDrawerList@i,w,c
 13762  00E420  6ED9               	movwf	fsr2l,c
 13763  00E422  3436               	rlcf	sortDrawerList@i+1,w,c
 13764  00E424  6EDA               	movwf	fsr2h,c
 13765  00E426  0E11               	movlw	low sortDrawerList@sublist2
 13766  00E428  26D9               	addwf	fsr2l,f,c
 13767  00E42A  0E00               	movlw	high sortDrawerList@sublist2
 13768  00E42C  22DA               	addwfc	fsr2h,f,c
 13769  00E42E  5031               	movf	sortDrawerList@count1,w,c
 13770  00E430  2435               	addwf	sortDrawerList@i,w,c
 13771  00E432  6E05               	movwf	??_sortDrawerList& (0+255),c
 13772  00E434  5032               	movf	sortDrawerList@count1+1,w,c
 13773  00E436  2036               	addwfc	sortDrawerList@i+1,w,c
 13774  00E438  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 13775  00E43A  90D8               	bcf	status,0,c
 13776  00E43C  3605               	rlcf	??_sortDrawerList,f,c
 13777  00E43E  3606               	rlcf	??_sortDrawerList+1,f,c
 13778  00E440  5005               	movf	??_sortDrawerList,w,c
 13779  00E442  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 13780  00E444  6EE1               	movwf	fsr1l,c
 13781  00E446  5006               	movf	??_sortDrawerList+1,w,c
 13782  00E448  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 13783  00E44A  6EE2               	movwf	fsr1h,c
 13784  00E44C  CFDE FFE6          	movff	postinc2,postinc1
 13785  00E450  CFDD FFE5          	movff	postdec2,postdec1
 13786  00E454  4A35               	infsnz	sortDrawerList@i,f,c
 13787  00E456  2A36               	incf	sortDrawerList@i+1,f,c
 13788  00E458                     l190:
 13789  00E458  502F               	movf	sortDrawerList@count2,w,c
 13790  00E45A  5C35               	subwf	sortDrawerList@i,w,c
 13791  00E45C  5030               	movf	sortDrawerList@count2+1,w,c
 13792  00E45E  5836               	subwfb	sortDrawerList@i+1,w,c
 13793  00E460  A0D8               	btfss	status,0,c
 13794  00E462  D7DC               	goto	l191
 13795                           
 13796                           ;operationMode.c: 133: }
 13797                           ;operationMode.c: 134: for (i=0; i<count3; i++){
 13798  00E464  0E00               	movlw	0
 13799  00E466  6E36               	movwf	sortDrawerList@i+1,c
 13800  00E468  0E00               	movlw	0
 13801  00E46A  6E35               	movwf	sortDrawerList@i,c
 13802  00E46C  D022               	goto	l193
 13803  00E46E                     
 13804                           ;operationMode.c: 135: sortedDrawerTable[i+count1+count2] = sublist3[i];
 13805  00E46E  90D8               	bcf	status,0,c
 13806  00E470  3435               	rlcf	sortDrawerList@i,w,c
 13807  00E472  6ED9               	movwf	fsr2l,c
 13808  00E474  3436               	rlcf	sortDrawerList@i+1,w,c
 13809  00E476  6EDA               	movwf	fsr2h,c
 13810  00E478  0E19               	movlw	low sortDrawerList@sublist3
 13811  00E47A  26D9               	addwf	fsr2l,f,c
 13812  00E47C  0E00               	movlw	high sortDrawerList@sublist3
 13813  00E47E  22DA               	addwfc	fsr2h,f,c
 13814  00E480  5031               	movf	sortDrawerList@count1,w,c
 13815  00E482  2435               	addwf	sortDrawerList@i,w,c
 13816  00E484  6E05               	movwf	??_sortDrawerList& (0+255),c
 13817  00E486  5032               	movf	sortDrawerList@count1+1,w,c
 13818  00E488  2036               	addwfc	sortDrawerList@i+1,w,c
 13819  00E48A  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 13820  00E48C  502F               	movf	sortDrawerList@count2,w,c
 13821  00E48E  2605               	addwf	??_sortDrawerList,f,c
 13822  00E490  5030               	movf	sortDrawerList@count2+1,w,c
 13823  00E492  2206               	addwfc	??_sortDrawerList+1,f,c
 13824  00E494  90D8               	bcf	status,0,c
 13825  00E496  3605               	rlcf	??_sortDrawerList,f,c
 13826  00E498  3606               	rlcf	??_sortDrawerList+1,f,c
 13827  00E49A  5005               	movf	??_sortDrawerList,w,c
 13828  00E49C  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 13829  00E49E  6EE1               	movwf	fsr1l,c
 13830  00E4A0  5006               	movf	??_sortDrawerList+1,w,c
 13831  00E4A2  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 13832  00E4A4  6EE2               	movwf	fsr1h,c
 13833  00E4A6  CFDE FFE6          	movff	postinc2,postinc1
 13834  00E4AA  CFDD FFE5          	movff	postdec2,postdec1
 13835  00E4AE  4A35               	infsnz	sortDrawerList@i,f,c
 13836  00E4B0  2A36               	incf	sortDrawerList@i+1,f,c
 13837  00E4B2                     l193:
 13838  00E4B2  502D               	movf	sortDrawerList@count3,w,c
 13839  00E4B4  5C35               	subwf	sortDrawerList@i,w,c
 13840  00E4B6  502E               	movf	sortDrawerList@count3+1,w,c
 13841  00E4B8  5836               	subwfb	sortDrawerList@i+1,w,c
 13842  00E4BA  A0D8               	btfss	status,0,c
 13843  00E4BC  D7D8               	goto	l194
 13844                           
 13845                           ;operationMode.c: 136: }
 13846                           ;operationMode.c: 137: for (i=0; i<count4; i++){
 13847  00E4BE  0E00               	movlw	0
 13848  00E4C0  6E36               	movwf	sortDrawerList@i+1,c
 13849  00E4C2  0E00               	movlw	0
 13850  00E4C4  6E35               	movwf	sortDrawerList@i,c
 13851  00E4C6  D026               	goto	l196
 13852  00E4C8                     
 13853                           ;operationMode.c: 138: sortedDrawerTable[i+count1+count2+count3] = sublist4[i];
 13854  00E4C8  90D8               	bcf	status,0,c
 13855  00E4CA  3435               	rlcf	sortDrawerList@i,w,c
 13856  00E4CC  6ED9               	movwf	fsr2l,c
 13857  00E4CE  3436               	rlcf	sortDrawerList@i+1,w,c
 13858  00E4D0  6EDA               	movwf	fsr2h,c
 13859  00E4D2  0E21               	movlw	low sortDrawerList@sublist4
 13860  00E4D4  26D9               	addwf	fsr2l,f,c
 13861  00E4D6  0E00               	movlw	high sortDrawerList@sublist4
 13862  00E4D8  22DA               	addwfc	fsr2h,f,c
 13863  00E4DA  5031               	movf	sortDrawerList@count1,w,c
 13864  00E4DC  2435               	addwf	sortDrawerList@i,w,c
 13865  00E4DE  6E05               	movwf	??_sortDrawerList& (0+255),c
 13866  00E4E0  5032               	movf	sortDrawerList@count1+1,w,c
 13867  00E4E2  2036               	addwfc	sortDrawerList@i+1,w,c
 13868  00E4E4  6E06               	movwf	(??_sortDrawerList+1)& (0+255),c
 13869  00E4E6  502F               	movf	sortDrawerList@count2,w,c
 13870  00E4E8  2605               	addwf	??_sortDrawerList,f,c
 13871  00E4EA  5030               	movf	sortDrawerList@count2+1,w,c
 13872  00E4EC  2206               	addwfc	??_sortDrawerList+1,f,c
 13873  00E4EE  502D               	movf	sortDrawerList@count3,w,c
 13874  00E4F0  2605               	addwf	??_sortDrawerList,f,c
 13875  00E4F2  502E               	movf	sortDrawerList@count3+1,w,c
 13876  00E4F4  2206               	addwfc	??_sortDrawerList+1,f,c
 13877  00E4F6  90D8               	bcf	status,0,c
 13878  00E4F8  3605               	rlcf	??_sortDrawerList,f,c
 13879  00E4FA  3606               	rlcf	??_sortDrawerList+1,f,c
 13880  00E4FC  5005               	movf	??_sortDrawerList,w,c
 13881  00E4FE  2403               	addwf	sortDrawerList@sortedDrawerTable,w,c
 13882  00E500  6EE1               	movwf	fsr1l,c
 13883  00E502  5006               	movf	??_sortDrawerList+1,w,c
 13884  00E504  2004               	addwfc	sortDrawerList@sortedDrawerTable+1,w,c
 13885  00E506  6EE2               	movwf	fsr1h,c
 13886  00E508  CFDE FFE6          	movff	postinc2,postinc1
 13887  00E50C  CFDD FFE5          	movff	postdec2,postdec1
 13888  00E510  4A35               	infsnz	sortDrawerList@i,f,c
 13889  00E512  2A36               	incf	sortDrawerList@i+1,f,c
 13890  00E514                     l196:
 13891  00E514  5029               	movf	sortDrawerList@count4,w,c
 13892  00E516  5C35               	subwf	sortDrawerList@i,w,c
 13893  00E518  502A               	movf	sortDrawerList@count4+1,w,c
 13894  00E51A  5836               	subwfb	sortDrawerList@i+1,w,c
 13895  00E51C  B0D8               	btfsc	status,0,c
 13896  00E51E  0012               	return	
 13897  00E520  D7D3               	goto	l197
 13898  00E522                     __end_of_sortDrawerList:
 13899                           	opt stack 0
 13900                           tblptru	equ	0xFF8
 13901                           tblptrh	equ	0xFF7
 13902                           tblptrl	equ	0xFF6
 13903                           tablat	equ	0xFF5
 13904                           prodh	equ	0xFF4
 13905                           prodl	equ	0xFF3
 13906                           postinc0	equ	0xFEE
 13907                           wreg	equ	0xFE8
 13908                           postinc1	equ	0xFE6
 13909                           postdec1	equ	0xFE5
 13910                           plusw1	equ	0xFE3
 13911                           fsr1h	equ	0xFE2
 13912                           fsr1l	equ	0xFE1
 13913                           indf2	equ	0xFDF
 13914                           postinc2	equ	0xFDE
 13915                           postdec2	equ	0xFDD
 13916                           plusw2	equ	0xFDB
 13917                           fsr2h	equ	0xFDA
 13918                           fsr2l	equ	0xFD9
 13919                           status	equ	0xFD8
 13920                           
 13921 ;; *************** function _printf *****************
 13922 ;; Defined at:
 13923 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;  f               2   12[COMRAM] PTR const unsigned char 
 13926 ;;		 -> STR_104(11), STR_103(13), STR_102(11), STR_101(13), 
 13927 ;;		 -> STR_100(11), STR_99(8), STR_98(15), STR_97(16), 
 13928 ;;		 -> STR_96(10), STR_95(8), STR_94(15), STR_93(16), 
 13929 ;;		 -> STR_92(10), STR_91(16), STR_90(16), STR_89(17), 
 13930 ;;		 -> STR_88(13), STR_87(17), STR_86(14), STR_85(11), 
 13931 ;;		 -> STR_84(11), STR_83(15), STR_82(15), STR_81(10), 
 13932 ;;		 -> STR_80(13), STR_79(16), STR_78(16), STR_77(17), 
 13933 ;;		 -> STR_76(17), STR_75(8), STR_74(15), STR_73(15), 
 13934 ;;		 -> STR_72(11), STR_71(14), STR_70(16), STR_69(16), 
 13935 ;;		 -> STR_68(11), STR_67(14), STR_66(16), STR_65(16), 
 13936 ;;		 -> STR_64(16), STR_63(13), STR_62(5), STR_61(11), 
 13937 ;;		 -> STR_60(15), STR_59(17), STR_58(18), STR_57(15), 
 13938 ;;		 -> STR_56(11), STR_55(7), STR_54(3), STR_53(16), 
 13939 ;;		 -> STR_52(8), STR_51(16), STR_50(15), STR_49(6), 
 13940 ;;		 -> STR_48(14), STR_47(17), STR_46(7), STR_45(9), 
 13941 ;;		 -> STR_44(17), STR_43(11), STR_42(17), STR_41(14), 
 13942 ;;		 -> STR_40(17), STR_39(11), STR_38(15), STR_37(11), 
 13943 ;;		 -> STR_36(8), STR_4(10), STR_3(10), STR_2(16), 
 13944 ;;		 -> STR_1(8), 
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;  idx             1   26[COMRAM] unsigned char 
 13947 ;;  tmpval          4    0        struct .
 13948 ;;  width           2   37[COMRAM] int 
 13949 ;;  val             2   34[COMRAM] unsigned int 
 13950 ;;  len             2   32[COMRAM] unsigned int 
 13951 ;;  ap              2   30[COMRAM] PTR void [1]
 13952 ;;		 -> ?_printf(2), 
 13953 ;;  cp              2   28[COMRAM] PTR const unsigned char 
 13954 ;;		 -> STR_105(7), STR_35(5), STR_34(4), STR_33(4), 
 13955 ;;		 -> STR_32(4), STR_31(4), STR_30(3), STR_29(3), 
 13956 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_25(2), 
 13957 ;;		 -> STR_24(2), STR_23(2), STR_22(5), STR_21(5), 
 13958 ;;		 -> STR_20(5), STR_19(5), STR_18(5), STR_17(4), 
 13959 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 13960 ;;		 -> STR_12(4), STR_11(4), STR_10(3), STR_9(3), 
 13961 ;;		 -> STR_8(3), STR_7(2), STR_6(2), STR_5(2), 
 13962 ;;  c               1   39[COMRAM] char 
 13963 ;;  flag            1   36[COMRAM] unsigned char 
 13964 ;;  prec            1   27[COMRAM] char 
 13965 ;; Return value:  Size  Location     Type
 13966 ;;                  2   12[COMRAM] int 
 13967 ;; Registers used:
 13968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13969 ;; Tracked objects:
 13970 ;;		On entry : 0/0
 13971 ;;		On exit  : 0/0
 13972 ;;		Unchanged: 0/0
 13973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13974 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13977 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;Total ram usage:       28 bytes
 13979 ;; Hardware stack levels used:    1
 13980 ;; Hardware stack levels required when called:    2
 13981 ;; This function calls:
 13982 ;;		___lwdiv
 13983 ;;		___lwmod
 13984 ;;		___wmul
 13985 ;;		_isdigit
 13986 ;;		_putch
 13987 ;; This function is called by:
 13988 ;;		_main
 13989 ;;		_mainOperation
 13990 ;;		_viewLogs
 13991 ;;		_displayLogs
 13992 ;;		_food_press
 13993 ;;		_diet_press
 13994 ;;		_which_drawer
 13995 ;;		_standbyMode
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           	psect	text26
 14000  00CEAA                     __ptext26:
 14001                           	opt stack 0
 14002  00CEAA                     _printf:
 14003                           	opt stack 26
 14004                           
 14005                           ;doprnt.c: 466: va_list ap;
 14006                           ;doprnt.c: 499: signed char c;
 14007                           ;doprnt.c: 501: int width;
 14008                           ;doprnt.c: 506: signed char prec;
 14009                           ;doprnt.c: 508: unsigned char flag;
 14010                           ;doprnt.c: 523: union {
 14011                           ;doprnt.c: 524: unsigned long vd;
 14012                           ;doprnt.c: 525: double integ;
 14013                           ;doprnt.c: 526: } tmpval;
 14014                           ;doprnt.c: 528: unsigned int val;
 14015                           ;doprnt.c: 529: unsigned len;
 14016                           ;doprnt.c: 530: const char * cp;
 14017                           ;doprnt.c: 533: *ap = __va_start();
 14018                           
 14019                           ;incstack = 0
 14020  00CEAA  0E0F               	movlw	low (?_printf+2)
 14021  00CEAC  6E1F               	movwf	printf@ap,c
 14022  00CEAE  0E00               	movlw	high (?_printf+2)
 14023  00CEB0  6E20               	movwf	printf@ap+1,c
 14024                           
 14025                           ;doprnt.c: 536: while(c = *f++) {
 14026  00CEB2  D1E6               	goto	u6040
 14027  00CEB4                     
 14028                           ;doprnt.c: 538: if(c != '%')
 14029  00CEB4  0E25               	movlw	37
 14030  00CEB6  1828               	xorwf	printf@c,w,c
 14031  00CEB8  B4D8               	btfsc	status,2,c
 14032  00CEBA  D004               	goto	l1258
 14033                           
 14034                           ;doprnt.c: 540: {
 14035                           ;doprnt.c: 541: (putch(c) );
 14036  00CEBC  5028               	movf	printf@c,w,c
 14037  00CEBE  ECCF  F057         	call	_putch
 14038                           
 14039                           ;doprnt.c: 542: continue;
 14040  00CEC2  D1DE               	goto	u6040
 14041  00CEC4                     l1258:
 14042                           
 14043                           ;doprnt.c: 543: }
 14044                           ;doprnt.c: 546: width = 0;
 14045  00CEC4  0E00               	movlw	0
 14046  00CEC6  6E27               	movwf	printf@width+1,c
 14047  00CEC8  0E00               	movlw	0
 14048  00CECA  6E26               	movwf	printf@width,c
 14049                           
 14050                           ;doprnt.c: 548: flag = 0;
 14051  00CECC  0E00               	movlw	0
 14052  00CECE  6E25               	movwf	printf@flag,c
 14053                           
 14054                           ;doprnt.c: 551: switch(*f) {
 14055                           
 14056                           ;doprnt.c: 550: for(;;) {
 14057  00CED0  D003               	goto	l1260
 14058  00CED2                     
 14059                           ;doprnt.c: 580: flag |= 0x04;
 14060  00CED2  8425               	bsf	printf@flag,2,c
 14061                           
 14062                           ;doprnt.c: 581: f++;
 14063  00CED4  4A0D               	infsnz	printf@f,f,c
 14064  00CED6  2A0E               	incf	printf@f+1,f,c
 14065  00CED8                     l1260:
 14066  00CED8  C00D  FFF6         	movff	printf@f,tblptrl
 14067  00CEDC  C00E  FFF7         	movff	printf@f+1,tblptrh
 14068  00CEE0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14069  00CEE0  6AF8               	clrf	tblptru,c
 14070  00CEE2                     	endif
 14071  00CEE2                     	if	0	;tblptru may be non-zero
 14072  00CEE2                     	endif
 14073  00CEE2  0008               	tblrd		*
 14074  00CEE4  50F5               	movf	tablat,w,c
 14075                           
 14076                           ; Switch size 1, requested type "space"
 14077                           ; Number of cases is 1, Range of values is 48 to 48
 14078                           ; switch strategies available:
 14079                           ; Name         Instructions Cycles
 14080                           ; simple_byte            4     3 (average)
 14081                           ;	Chosen strategy is simple_byte
 14082  00CEE6  0A30               	xorlw	48	; case 48
 14083  00CEE8  B4D8               	btfsc	status,2,c
 14084  00CEEA  D7F3               	goto	l1261
 14085                           
 14086                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14087                           
 14088                           ;doprnt.c: 586: }
 14089                           
 14090                           ;doprnt.c: 585: break;
 14091  00CEEC  C00D  FFF6         	movff	printf@f,tblptrl
 14092  00CEF0  C00E  FFF7         	movff	printf@f+1,tblptrh
 14093  00CEF4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14094  00CEF4  6AF8               	clrf	tblptru,c
 14095  00CEF6                     	endif
 14096  00CEF6                     	if	0	;tblptru may be non-zero
 14097  00CEF6                     	endif
 14098  00CEF6  0008               	tblrd		*
 14099  00CEF8  50F5               	movf	tablat,w,c
 14100  00CEFA  ECD9  F057         	call	_isdigit
 14101  00CEFE  A0D8               	btfss	status,0,c
 14102  00CF00  D092               	goto	l1268
 14103                           
 14104                           ;doprnt.c: 598: width = 0;
 14105  00CF02  0E00               	movlw	0
 14106  00CF04  6E27               	movwf	printf@width+1,c
 14107  00CF06  0E00               	movlw	0
 14108  00CF08  6E26               	movwf	printf@width,c
 14109  00CF0A                     
 14110                           ;doprnt.c: 600: width *= 10;
 14111  00CF0A  C026  F001         	movff	printf@width,___wmul@multiplier
 14112  00CF0E  C027  F002         	movff	printf@width+1,___wmul@multiplier+1
 14113  00CF12  0E00               	movlw	0
 14114  00CF14  6E04               	movwf	___wmul@multiplicand+1,c
 14115  00CF16  0E0A               	movlw	10
 14116  00CF18  6E03               	movwf	___wmul@multiplicand,c
 14117  00CF1A  EC0D  F058         	call	___wmul	;wreg free
 14118  00CF1E  C001  F026         	movff	?___wmul,printf@width
 14119  00CF22  C002  F027         	movff	?___wmul+1,printf@width+1
 14120                           
 14121                           ;doprnt.c: 601: width += *f++ - '0';
 14122  00CF26  0ED0               	movlw	208
 14123  00CF28  6E17               	movwf	??_printf& (0+255),c
 14124  00CF2A  0EFF               	movlw	255
 14125  00CF2C  6E18               	movwf	(??_printf+1)& (0+255),c
 14126  00CF2E  C00D  FFF6         	movff	printf@f,tblptrl
 14127  00CF32  C00E  FFF7         	movff	printf@f+1,tblptrh
 14128  00CF36                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14129  00CF36  6AF8               	clrf	tblptru,c
 14130  00CF38                     	endif
 14131  00CF38                     	if	0	;tblptru may be non-zero
 14132  00CF38                     	endif
 14133  00CF38  0008               	tblrd		*
 14134  00CF3A  50F5               	movf	tablat,w,c
 14135  00CF3C  6E19               	movwf	(??_printf+2)& (0+255),c
 14136  00CF3E  6A1A               	clrf	(??_printf+3)& (0+255),c
 14137  00CF40  5017               	movf	??_printf,w,c
 14138  00CF42  2619               	addwf	??_printf+2,f,c
 14139  00CF44  5018               	movf	??_printf+1,w,c
 14140  00CF46  221A               	addwfc	??_printf+3,f,c
 14141  00CF48  5019               	movf	??_printf+2,w,c
 14142  00CF4A  2626               	addwf	printf@width,f,c
 14143  00CF4C  501A               	movf	??_printf+3,w,c
 14144  00CF4E  2227               	addwfc	printf@width+1,f,c
 14145  00CF50  4A0D               	infsnz	printf@f,f,c
 14146  00CF52  2A0E               	incf	printf@f+1,f,c
 14147                           
 14148                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14149  00CF54  C00D  FFF6         	movff	printf@f,tblptrl
 14150  00CF58  C00E  FFF7         	movff	printf@f+1,tblptrh
 14151  00CF5C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14152  00CF5C  6AF8               	clrf	tblptru,c
 14153  00CF5E                     	endif
 14154  00CF5E                     	if	0	;tblptru may be non-zero
 14155  00CF5E                     	endif
 14156  00CF5E  0008               	tblrd		*
 14157  00CF60  50F5               	movf	tablat,w,c
 14158  00CF62  ECD9  F057         	call	_isdigit
 14159  00CF66  A0D8               	btfss	status,0,c
 14160  00CF68  D05E               	goto	l1268
 14161  00CF6A  D7CF               	goto	l1266
 14162  00CF6C                     
 14163                           ;doprnt.c: 721: flag |= 0x80;
 14164  00CF6C  8E25               	bsf	printf@flag,7,c
 14165                           
 14166                           ;doprnt.c: 723: break;
 14167  00CF6E  D076               	goto	l1273
 14168  00CF70                     
 14169                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14170  00CF70  C01F  FFD9         	movff	printf@ap,fsr2l
 14171  00CF74  C020  FFDA         	movff	printf@ap+1,fsr2h
 14172  00CF78  CFDE F01D          	movff	postinc2,printf@cp
 14173  00CF7C  CFDD F01E          	movff	postdec2,printf@cp+1
 14174  00CF80  0E02               	movlw	2
 14175  00CF82  261F               	addwf	printf@ap,f,c
 14176  00CF84  0E00               	movlw	0
 14177  00CF86  2220               	addwfc	printf@ap+1,f,c
 14178                           
 14179                           ;doprnt.c: 740: if(!cp)
 14180  00CF88  501D               	movf	printf@cp,w,c
 14181  00CF8A  101E               	iorwf	printf@cp+1,w,c
 14182  00CF8C  A4D8               	btfss	status,2,c
 14183  00CF8E  D004               	goto	l1276
 14184                           
 14185                           ;doprnt.c: 741: cp = "(null)";
 14186  00CF90  0EA4               	movlw	low STR_105
 14187  00CF92  6E1D               	movwf	printf@cp,c
 14188  00CF94  0EFF               	movlw	high STR_105
 14189  00CF96  6E1E               	movwf	printf@cp+1,c
 14190  00CF98                     l1276:
 14191                           
 14192                           ;doprnt.c: 745: len = 0;
 14193  00CF98  0E00               	movlw	0
 14194  00CF9A  6E22               	movwf	printf@len+1,c
 14195  00CF9C  0E00               	movlw	0
 14196  00CF9E  6E21               	movwf	printf@len,c
 14197                           
 14198                           ;doprnt.c: 746: while(cp[len])
 14199  00CFA0  D002               	goto	l1277
 14200  00CFA2                     
 14201                           ;doprnt.c: 747: len++;
 14202  00CFA2  4A21               	infsnz	printf@len,f,c
 14203  00CFA4  2A22               	incf	printf@len+1,f,c
 14204  00CFA6                     l1277:
 14205  00CFA6  5021               	movf	printf@len,w,c
 14206  00CFA8  241D               	addwf	printf@cp,w,c
 14207  00CFAA  6E17               	movwf	??_printf& (0+255),c
 14208  00CFAC  5022               	movf	printf@len+1,w,c
 14209  00CFAE  201E               	addwfc	printf@cp+1,w,c
 14210  00CFB0  6E18               	movwf	(??_printf+1)& (0+255),c
 14211  00CFB2  C017  FFF6         	movff	??_printf,tblptrl
 14212  00CFB6  C018  FFF7         	movff	??_printf+1,tblptrh
 14213  00CFBA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14214  00CFBA  6AF8               	clrf	tblptru,c
 14215  00CFBC                     	endif
 14216  00CFBC                     	if	0	;tblptru may be non-zero
 14217  00CFBC                     	endif
 14218  00CFBC  0008               	tblrd		*
 14219  00CFBE  50F5               	movf	tablat,w,c
 14220  00CFC0  0900               	iorlw	0
 14221  00CFC2  A4D8               	btfss	status,2,c
 14222  00CFC4  D7EE               	goto	l1278
 14223                           
 14224                           ;doprnt.c: 757: if(width > len)
 14225  00CFC6  5026               	movf	printf@width,w,c
 14226  00CFC8  5C21               	subwf	printf@len,w,c
 14227  00CFCA  5027               	movf	printf@width+1,w,c
 14228  00CFCC  5822               	subwfb	printf@len+1,w,c
 14229  00CFCE  B0D8               	btfsc	status,0,c
 14230  00CFD0  D005               	goto	l1280
 14231                           
 14232                           ;doprnt.c: 758: width -= len;
 14233  00CFD2  5021               	movf	printf@len,w,c
 14234  00CFD4  5E26               	subwf	printf@width,f,c
 14235  00CFD6  5022               	movf	printf@len+1,w,c
 14236  00CFD8  5A27               	subwfb	printf@width+1,f,c
 14237  00CFDA  D008               	goto	l1282
 14238  00CFDC                     l1280:
 14239                           
 14240                           ;doprnt.c: 759: else
 14241                           ;doprnt.c: 760: width = 0;
 14242  00CFDC  0E00               	movlw	0
 14243  00CFDE  6E27               	movwf	printf@width+1,c
 14244  00CFE0  0E00               	movlw	0
 14245  00CFE2  6E26               	movwf	printf@width,c
 14246                           
 14247                           ;doprnt.c: 764: while(width--)
 14248  00CFE4  D003               	goto	l1282
 14249  00CFE6                     l5786:
 14250                           
 14251                           ;doprnt.c: 765: (putch(' ') );
 14252  00CFE6  0E20               	movlw	32
 14253  00CFE8  ECCF  F057         	call	_putch
 14254  00CFEC                     l1282:
 14255  00CFEC  0626               	decf	printf@width,f,c
 14256  00CFEE  A0D8               	btfss	status,0,c
 14257  00CFF0  0627               	decf	printf@width+1,f,c
 14258  00CFF2  2826               	incf	printf@width,w,c
 14259  00CFF4  E1F8               	bnz	l5786
 14260  00CFF6  2827               	incf	printf@width+1,w,c
 14261  00CFF8  B4D8               	btfsc	status,2,c
 14262  00CFFA  D00C               	goto	l1285
 14263  00CFFC  D7F4               	goto	l1283
 14264  00CFFE                     l5790:
 14265                           
 14266                           ;doprnt.c: 768: (putch(*cp++) );
 14267  00CFFE  C01D  FFF6         	movff	printf@cp,tblptrl
 14268  00D002  C01E  FFF7         	movff	printf@cp+1,tblptrh
 14269  00D006                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14270  00D006  6AF8               	clrf	tblptru,c
 14271  00D008                     	endif
 14272  00D008                     	if	0	;tblptru may be non-zero
 14273  00D008                     	endif
 14274  00D008  0008               	tblrd		*
 14275  00D00A  50F5               	movf	tablat,w,c
 14276  00D00C  ECCF  F057         	call	_putch
 14277  00D010  4A1D               	infsnz	printf@cp,f,c
 14278  00D012  2A1E               	incf	printf@cp+1,f,c
 14279  00D014                     l1285:
 14280  00D014  0621               	decf	printf@len,f,c
 14281  00D016  A0D8               	btfss	status,0,c
 14282  00D018  0622               	decf	printf@len+1,f,c
 14283  00D01A  2821               	incf	printf@len,w,c
 14284  00D01C  E1F0               	bnz	l5790
 14285  00D01E  2822               	incf	printf@len+1,w,c
 14286  00D020  B4D8               	btfsc	status,2,c
 14287  00D022  D12E               	goto	u6040
 14288  00D024  D7EC               	goto	l1286
 14289  00D026                     l1268:
 14290  00D026  C00D  FFF6         	movff	printf@f,tblptrl
 14291  00D02A  C00E  FFF7         	movff	printf@f+1,tblptrh
 14292  00D02E  4A0D               	infsnz	printf@f,f,c
 14293  00D030  2A0E               	incf	printf@f+1,f,c
 14294  00D032                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14295  00D032  6AF8               	clrf	tblptru,c
 14296  00D034                     	endif
 14297  00D034                     	if	0	;tblptru may be non-zero
 14298  00D034                     	endif
 14299  00D034  0008               	tblrd		*
 14300  00D036  CFF5 F028          	movff	tablat,printf@c
 14301  00D03A  5028               	movf	printf@c,w,c
 14302                           
 14303                           ; Switch size 1, requested type "space"
 14304                           ; Number of cases is 5, Range of values is 0 to 120
 14305                           ; switch strategies available:
 14306                           ; Name         Instructions Cycles
 14307                           ; simple_byte           16     9 (average)
 14308                           ;	Chosen strategy is simple_byte
 14309  00D03C  0A00               	xorlw	0	; case 0
 14310  00D03E  B4D8               	btfsc	status,2,c
 14311  00D040  0012               	return	
 14312  00D042  0A64               	xorlw	100	; case 100
 14313  00D044  B4D8               	btfsc	status,2,c
 14314  00D046  D00A               	goto	l1273
 14315  00D048  0A0D               	xorlw	13	; case 105
 14316  00D04A  B4D8               	btfsc	status,2,c
 14317  00D04C  D007               	goto	l1273
 14318  00D04E  0A1A               	xorlw	26	; case 115
 14319  00D050  B4D8               	btfsc	status,2,c
 14320  00D052  D78E               	goto	l1275
 14321  00D054  0A0B               	xorlw	11	; case 120
 14322  00D056  B4D8               	btfsc	status,2,c
 14323  00D058  D789               	goto	l1274
 14324  00D05A  D112               	goto	u6040
 14325  00D05C                     l1273:
 14326                           
 14327                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14328  00D05C  BE25               	btfsc	printf@flag,7,c
 14329  00D05E  D015               	goto	l1289
 14330                           
 14331                           ;doprnt.c: 1253: {
 14332                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14333  00D060  C01F  FFD9         	movff	printf@ap,fsr2l
 14334  00D064  C020  FFDA         	movff	printf@ap+1,fsr2h
 14335  00D068  CFDE F023          	movff	postinc2,printf@val
 14336  00D06C  CFDD F024          	movff	postdec2,printf@val+1
 14337  00D070  0E02               	movlw	2
 14338  00D072  261F               	addwf	printf@ap,f,c
 14339  00D074  0E00               	movlw	0
 14340  00D076  2220               	addwfc	printf@ap+1,f,c
 14341                           
 14342                           ;doprnt.c: 1261: if((int)val < 0) {
 14343  00D078  AE24               	btfss	printf@val+1,7,c
 14344  00D07A  D04A               	goto	l1292
 14345                           
 14346                           ;doprnt.c: 1262: flag |= 0x03;
 14347  00D07C  0E03               	movlw	3
 14348  00D07E  1225               	iorwf	printf@flag,f,c
 14349                           
 14350                           ;doprnt.c: 1263: val = -val;
 14351  00D080  6C23               	negf	printf@val,c
 14352  00D082  1E24               	comf	printf@val+1,f,c
 14353  00D084  B0D8               	btfsc	status,0,c
 14354  00D086  2A24               	incf	printf@val+1,f,c
 14355                           
 14356                           ;doprnt.c: 1264: }
 14357                           ;doprnt.c: 1266: }
 14358  00D088  D043               	goto	l1292
 14359  00D08A                     l1289:
 14360                           
 14361                           ;doprnt.c: 1268: else
 14362                           ;doprnt.c: 1273: {
 14363                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14364  00D08A  C01F  FFD9         	movff	printf@ap,fsr2l
 14365  00D08E  C020  FFDA         	movff	printf@ap+1,fsr2h
 14366  00D092  CFDE F023          	movff	postinc2,printf@val
 14367  00D096  CFDD F024          	movff	postdec2,printf@val+1
 14368  00D09A  0E02               	movlw	2
 14369  00D09C  261F               	addwf	printf@ap,f,c
 14370  00D09E  0E00               	movlw	0
 14371  00D0A0  2220               	addwfc	printf@ap+1,f,c
 14372                           
 14373                           ;doprnt.c: 1287: }
 14374                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14375  00D0A2  D036               	goto	l1292
 14376  00D0A4                     
 14377                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14378  00D0A4  0E01               	movlw	1
 14379  00D0A6  6E28               	movwf	printf@c,c
 14380  00D0A8                     l5816:
 14381  00D0A8  0E05               	movlw	5
 14382  00D0AA  1828               	xorwf	printf@c,w,c
 14383  00D0AC  B4D8               	btfsc	status,2,c
 14384  00D0AE  D038               	goto	l1297
 14385                           
 14386                           ;doprnt.c: 1306: if(val < dpowers[c])
 14387  00D0B0  5028               	movf	printf@c,w,c
 14388  00D0B2  0D02               	mullw	2
 14389  00D0B4  0EE5               	movlw	low _dpowers
 14390  00D0B6  24F3               	addwf	prodl,w,c
 14391  00D0B8  6EF6               	movwf	tblptrl,c
 14392  00D0BA  0EFC               	movlw	high _dpowers
 14393  00D0BC  20F4               	addwfc	prodh,w,c
 14394  00D0BE  6EF7               	movwf	tblptrh,c
 14395  00D0C0                     	if	1	;There are 3 active tblptr bytes
 14396  00D0C0  6AF8               	clrf	tblptru,c
 14397  00D0C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14398  00D0C4  22F8               	addwfc	tblptru,f,c
 14399  00D0C6                     	endif
 14400  00D0C6  0009               	tblrd		*+
 14401  00D0C8  50F5               	movf	tablat,w,c
 14402  00D0CA  5C23               	subwf	printf@val,w,c
 14403  00D0CC  0009               	tblrd		*+
 14404  00D0CE  50F5               	movf	tablat,w,c
 14405  00D0D0  5824               	subwfb	printf@val+1,w,c
 14406  00D0D2  A0D8               	btfss	status,0,c
 14407  00D0D4  D025               	goto	l1297
 14408                           
 14409                           ;doprnt.c: 1307: break;
 14410  00D0D6  2A28               	incf	printf@c,f,c
 14411  00D0D8  D7E7               	goto	l5816
 14412  00D0DA                     
 14413                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14414  00D0DA  0E01               	movlw	1
 14415  00D0DC  6E28               	movwf	printf@c,c
 14416  00D0DE                     l5830:
 14417  00D0DE  0E04               	movlw	4
 14418  00D0E0  1828               	xorwf	printf@c,w,c
 14419  00D0E2  B4D8               	btfsc	status,2,c
 14420  00D0E4  D01D               	goto	l1297
 14421                           
 14422                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14423  00D0E6  5028               	movf	printf@c,w,c
 14424  00D0E8  0D02               	mullw	2
 14425  00D0EA  0EEF               	movlw	low _hexpowers
 14426  00D0EC  24F3               	addwf	prodl,w,c
 14427  00D0EE  6EF6               	movwf	tblptrl,c
 14428  00D0F0  0EFC               	movlw	high _hexpowers
 14429  00D0F2  20F4               	addwfc	prodh,w,c
 14430  00D0F4  6EF7               	movwf	tblptrh,c
 14431  00D0F6                     	if	1	;There are 3 active tblptr bytes
 14432  00D0F6  6AF8               	clrf	tblptru,c
 14433  00D0F8  0E00               	movlw	low (__mediumconst shr (0+16))
 14434  00D0FA  22F8               	addwfc	tblptru,f,c
 14435  00D0FC                     	endif
 14436  00D0FC  0009               	tblrd		*+
 14437  00D0FE  50F5               	movf	tablat,w,c
 14438  00D100  5C23               	subwf	printf@val,w,c
 14439  00D102  0009               	tblrd		*+
 14440  00D104  50F5               	movf	tablat,w,c
 14441  00D106  5824               	subwfb	printf@val+1,w,c
 14442  00D108  A0D8               	btfss	status,0,c
 14443  00D10A  D00A               	goto	l1297
 14444                           
 14445                           ;doprnt.c: 1318: break;
 14446  00D10C  2A28               	incf	printf@c,f,c
 14447  00D10E  D7E7               	goto	l5830
 14448  00D110                     l1292:
 14449  00D110  5025               	movf	printf@flag,w,c
 14450  00D112  0B80               	andlw	128
 14451                           
 14452                           ; Switch size 1, requested type "space"
 14453                           ; Number of cases is 2, Range of values is 0 to 128
 14454                           ; switch strategies available:
 14455                           ; Name         Instructions Cycles
 14456                           ; simple_byte            7     4 (average)
 14457                           ;	Chosen strategy is simple_byte
 14458  00D114  0A00               	xorlw	0	; case 0
 14459  00D116  B4D8               	btfsc	status,2,c
 14460  00D118  D7C5               	goto	l1293
 14461  00D11A  0A80               	xorlw	128	; case 128
 14462  00D11C  B4D8               	btfsc	status,2,c
 14463  00D11E  D7DD               	goto	l1298
 14464  00D120                     l1297:
 14465                           
 14466                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14467  00D120  5026               	movf	printf@width,w,c
 14468  00D122  1027               	iorwf	printf@width+1,w,c
 14469  00D124  B4D8               	btfsc	status,2,c
 14470  00D126  D009               	goto	l1302
 14471  00D128  C025  F017         	movff	printf@flag,??_printf
 14472  00D12C  0E03               	movlw	3
 14473  00D12E  1617               	andwf	??_printf,f,c
 14474  00D130  B4D8               	btfsc	status,2,c
 14475  00D132  D003               	goto	l1302
 14476                           
 14477                           ;doprnt.c: 1346: width--;
 14478  00D134  0626               	decf	printf@width,f,c
 14479  00D136  A0D8               	btfss	status,0,c
 14480  00D138  0627               	decf	printf@width+1,f,c
 14481  00D13A                     l1302:
 14482                           
 14483                           ;doprnt.c: 1381: if(width > c)
 14484  00D13A  0E80               	movlw	128
 14485  00D13C  BE28               	btfsc	printf@c,7,c
 14486  00D13E  0E7F               	movlw	127
 14487  00D140  6E17               	movwf	??_printf& (0+255),c
 14488  00D142  5026               	movf	printf@width,w,c
 14489  00D144  5C28               	subwf	printf@c,w,c
 14490  00D146  5027               	movf	printf@width+1,w,c
 14491  00D148  0A80               	xorlw	128
 14492  00D14A  5817               	subwfb	??_printf& (0+255),w,c
 14493  00D14C  B0D8               	btfsc	status,0,c
 14494  00D14E  D007               	goto	l1303
 14495                           
 14496                           ;doprnt.c: 1382: width -= c;
 14497  00D150  5028               	movf	printf@c,w,c
 14498  00D152  5E26               	subwf	printf@width,f,c
 14499  00D154  0E00               	movlw	0
 14500  00D156  BE28               	btfsc	printf@c,7,c
 14501  00D158  0EFF               	movlw	255
 14502  00D15A  5A27               	subwfb	printf@width+1,f,c
 14503  00D15C  D004               	goto	l1304
 14504  00D15E                     l1303:
 14505                           
 14506                           ;doprnt.c: 1383: else
 14507                           ;doprnt.c: 1384: width = 0;
 14508  00D15E  0E00               	movlw	0
 14509  00D160  6E27               	movwf	printf@width+1,c
 14510  00D162  0E00               	movlw	0
 14511  00D164  6E26               	movwf	printf@width,c
 14512  00D166                     l1304:
 14513                           
 14514                           ;doprnt.c: 1387: if(flag & 0x04) {
 14515  00D166  A425               	btfss	printf@flag,2,c
 14516  00D168  D014               	goto	l1305
 14517                           
 14518                           ;doprnt.c: 1392: if(flag & 0x03)
 14519  00D16A  C025  F017         	movff	printf@flag,??_printf
 14520  00D16E  0E03               	movlw	3
 14521  00D170  1617               	andwf	??_printf,f,c
 14522  00D172  B4D8               	btfsc	status,2,c
 14523  00D174  D003               	goto	l1306
 14524                           
 14525                           ;doprnt.c: 1393: (putch('-') );
 14526  00D176  0E2D               	movlw	45
 14527  00D178  ECCF  F057         	call	_putch
 14528  00D17C                     l1306:
 14529                           
 14530                           ;doprnt.c: 1415: if(width)
 14531  00D17C  5026               	movf	printf@width,w,c
 14532  00D17E  1027               	iorwf	printf@width+1,w,c
 14533  00D180  B4D8               	btfsc	status,2,c
 14534  00D182  D01E               	goto	l1314
 14535                           
 14536                           ;doprnt.c: 1417: (putch('0') );
 14537                           
 14538                           ;doprnt.c: 1416: do
 14539  00D184  0E30               	movlw	48
 14540  00D186  ECCF  F057         	call	_putch
 14541                           
 14542                           ;doprnt.c: 1418: while(--width);
 14543  00D18A  0626               	decf	printf@width,f,c
 14544  00D18C  A0D8               	btfss	status,0,c
 14545  00D18E  0627               	decf	printf@width+1,f,c
 14546  00D190  D7F5               	goto	l1306
 14547  00D192                     l1305:
 14548                           
 14549                           ;doprnt.c: 1422: {
 14550                           ;doprnt.c: 1424: if(width
 14551                           ;doprnt.c: 1428: )
 14552  00D192  5026               	movf	printf@width,w,c
 14553  00D194  1027               	iorwf	printf@width+1,w,c
 14554  00D196  B4D8               	btfsc	status,2,c
 14555  00D198  D00A               	goto	u6020
 14556  00D19A                     u6010:
 14557                           
 14558                           ;doprnt.c: 1430: (putch(' ') );
 14559                           
 14560                           ;doprnt.c: 1429: do
 14561  00D19A  0E20               	movlw	32
 14562  00D19C  ECCF  F057         	call	_putch
 14563                           
 14564                           ;doprnt.c: 1431: while(--width);
 14565  00D1A0  0626               	decf	printf@width,f,c
 14566  00D1A2  A0D8               	btfss	status,0,c
 14567  00D1A4  0627               	decf	printf@width+1,f,c
 14568  00D1A6  5026               	movf	printf@width,w,c
 14569  00D1A8  1027               	iorwf	printf@width+1,w,c
 14570  00D1AA  A4D8               	btfss	status,2,c
 14571  00D1AC  D7F6               	goto	u6010
 14572  00D1AE                     u6020:
 14573                           
 14574                           ;doprnt.c: 1438: if(flag & 0x03)
 14575  00D1AE  C025  F017         	movff	printf@flag,??_printf
 14576  00D1B2  0E03               	movlw	3
 14577  00D1B4  1617               	andwf	??_printf,f,c
 14578  00D1B6  B4D8               	btfsc	status,2,c
 14579  00D1B8  D003               	goto	l1314
 14580                           
 14581                           ;doprnt.c: 1439: (putch('-') );
 14582  00D1BA  0E2D               	movlw	45
 14583  00D1BC  ECCF  F057         	call	_putch
 14584  00D1C0                     l1314:
 14585                           
 14586                           ;doprnt.c: 1469: }
 14587                           ;doprnt.c: 1472: prec = c;
 14588  00D1C0  C028  F01C         	movff	printf@c,printf@prec
 14589                           
 14590                           ;doprnt.c: 1474: while(prec--) {
 14591  00D1C4  D059               	goto	l1315
 14592  00D1C6                     
 14593                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14594  00D1C6  501C               	movf	printf@prec,w,c
 14595  00D1C8  0D02               	mullw	2
 14596  00D1CA  0EE5               	movlw	low _dpowers
 14597  00D1CC  24F3               	addwf	prodl,w,c
 14598  00D1CE  6EF6               	movwf	tblptrl,c
 14599  00D1D0  0EFC               	movlw	high _dpowers
 14600  00D1D2  20F4               	addwfc	prodh,w,c
 14601  00D1D4  6EF7               	movwf	tblptrh,c
 14602  00D1D6                     	if	1	;There are 3 active tblptr bytes
 14603  00D1D6  6AF8               	clrf	tblptru,c
 14604  00D1D8  0E00               	movlw	low (__mediumconst shr (0+16))
 14605  00D1DA  22F8               	addwfc	tblptru,f,c
 14606  00D1DC                     	endif
 14607  00D1DC  0009               	tblrd		*+
 14608  00D1DE  CFF5 F003          	movff	tablat,___lwdiv@divisor
 14609  00D1E2  000A               	tblrd		*-
 14610  00D1E4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 14611  00D1E8  C023  F001         	movff	printf@val,___lwdiv@dividend
 14612  00D1EC  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 14613  00D1F0  EC9B  F058         	call	___lwdiv	;wreg free
 14614  00D1F4  C001  F008         	movff	?___lwdiv,___lwmod@dividend
 14615  00D1F8  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
 14616  00D1FC  0E00               	movlw	0
 14617  00D1FE  6E0B               	movwf	___lwmod@divisor+1,c
 14618  00D200  0E0A               	movlw	10
 14619  00D202  6E0A               	movwf	___lwmod@divisor,c
 14620  00D204  EC54  F058         	call	___lwmod	;wreg free
 14621  00D208  5008               	movf	?___lwmod,w,c
 14622  00D20A  0F30               	addlw	48
 14623  00D20C  6E28               	movwf	printf@c,c
 14624                           
 14625                           ;doprnt.c: 1491: break;
 14626  00D20E  D031               	goto	l1319
 14627  00D210                     
 14628                           ;doprnt.c: 1499: {
 14629                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14630  00D210  C023  F001         	movff	printf@val,___lwdiv@dividend
 14631  00D214  C024  F002         	movff	printf@val+1,___lwdiv@dividend+1
 14632  00D218  501C               	movf	printf@prec,w,c
 14633  00D21A  0D02               	mullw	2
 14634  00D21C  0EEF               	movlw	low _hexpowers
 14635  00D21E  24F3               	addwf	prodl,w,c
 14636  00D220  6EF6               	movwf	tblptrl,c
 14637  00D222  0EFC               	movlw	high _hexpowers
 14638  00D224  20F4               	addwfc	prodh,w,c
 14639  00D226  6EF7               	movwf	tblptrh,c
 14640  00D228                     	if	1	;There are 3 active tblptr bytes
 14641  00D228  6AF8               	clrf	tblptru,c
 14642  00D22A  0E00               	movlw	low (__mediumconst shr (0+16))
 14643  00D22C  22F8               	addwfc	tblptru,f,c
 14644  00D22E                     	endif
 14645  00D22E  0009               	tblrd		*+
 14646  00D230  CFF5 F003          	movff	tablat,___lwdiv@divisor
 14647  00D234  000A               	tblrd		*-
 14648  00D236  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
 14649  00D23A  EC9B  F058         	call	___lwdiv	;wreg free
 14650  00D23E  5001               	movf	?___lwdiv,w,c
 14651  00D240  0B0F               	andlw	15
 14652  00D242  6E1B               	movwf	printf@idx,c
 14653                           
 14654                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14655  00D244  501B               	movf	printf@idx,w,c
 14656  00D246  0D01               	mullw	1
 14657  00D248  0E16               	movlw	low STR_106
 14658  00D24A  24F3               	addwf	prodl,w,c
 14659  00D24C  6EF6               	movwf	tblptrl,c
 14660  00D24E  0EFD               	movlw	high STR_106
 14661  00D250  20F4               	addwfc	prodh,w,c
 14662  00D252  6EF7               	movwf	tblptrh,c
 14663  00D254                     	if	1	;There are 3 active tblptr bytes
 14664  00D254  6AF8               	clrf	tblptru,c
 14665  00D256  0E00               	movlw	low (__mediumconst shr (0+16))
 14666  00D258  22F8               	addwfc	tblptru,f,c
 14667  00D25A                     	endif
 14668  00D25A  0008               	tblrd		*
 14669  00D25C  CFF5 F028          	movff	tablat,printf@c
 14670                           
 14671                           ;doprnt.c: 1523: }
 14672                           
 14673                           ;doprnt.c: 1508: }
 14674                           ;doprnt.c: 1510: break;
 14675  00D260  D008               	goto	l1319
 14676  00D262  5025               	movf	printf@flag,w,c
 14677  00D264  0B80               	andlw	128
 14678                           
 14679                           ; Switch size 1, requested type "space"
 14680                           ; Number of cases is 2, Range of values is 0 to 128
 14681                           ; switch strategies available:
 14682                           ; Name         Instructions Cycles
 14683                           ; simple_byte            7     4 (average)
 14684                           ;	Chosen strategy is simple_byte
 14685  00D266  0A00               	xorlw	0	; case 0
 14686  00D268  B4D8               	btfsc	status,2,c
 14687  00D26A  D7AD               	goto	l1318
 14688  00D26C  0A80               	xorlw	128	; case 128
 14689  00D26E  B4D8               	btfsc	status,2,c
 14690  00D270  D7CF               	goto	l1320
 14691  00D272                     l1319:
 14692                           
 14693                           ;doprnt.c: 1524: (putch(c) );
 14694  00D272  5028               	movf	printf@c,w,c
 14695  00D274  ECCF  F057         	call	_putch
 14696  00D278                     l1315:
 14697  00D278  061C               	decf	printf@prec,f,c
 14698  00D27A  281C               	incf	printf@prec,w,c
 14699  00D27C  A4D8               	btfss	status,2,c
 14700  00D27E  D7F1               	goto	l1317
 14701  00D280                     u6040:
 14702  00D280  C00D  FFF6         	movff	printf@f,tblptrl
 14703  00D284  C00E  FFF7         	movff	printf@f+1,tblptrh
 14704  00D288  4A0D               	infsnz	printf@f,f,c
 14705  00D28A  2A0E               	incf	printf@f+1,f,c
 14706  00D28C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14707  00D28C  6AF8               	clrf	tblptru,c
 14708  00D28E                     	endif
 14709  00D28E                     	if	0	;tblptru may be non-zero
 14710  00D28E                     	endif
 14711  00D28E  0008               	tblrd		*
 14712  00D290  CFF5 F028          	movff	tablat,printf@c
 14713  00D294  5028               	movf	printf@c,w,c
 14714  00D296  B4D8               	btfsc	status,2,c
 14715  00D298  0012               	return	
 14716  00D29A  D60C               	goto	l1257
 14717  00D29C                     __end_of_printf:
 14718                           	opt stack 0
 14719                           tblptru	equ	0xFF8
 14720                           tblptrh	equ	0xFF7
 14721                           tblptrl	equ	0xFF6
 14722                           tablat	equ	0xFF5
 14723                           prodh	equ	0xFF4
 14724                           prodl	equ	0xFF3
 14725                           postinc0	equ	0xFEE
 14726                           wreg	equ	0xFE8
 14727                           postinc1	equ	0xFE6
 14728                           postdec1	equ	0xFE5
 14729                           plusw1	equ	0xFE3
 14730                           fsr1h	equ	0xFE2
 14731                           fsr1l	equ	0xFE1
 14732                           indf2	equ	0xFDF
 14733                           postinc2	equ	0xFDE
 14734                           postdec2	equ	0xFDD
 14735                           plusw2	equ	0xFDB
 14736                           fsr2h	equ	0xFDA
 14737                           fsr2l	equ	0xFD9
 14738                           status	equ	0xFD8
 14739                           
 14740 ;; *************** function _putch *****************
 14741 ;; Defined at:
 14742 ;;		line 72 in file "LCD.c"
 14743 ;; Parameters:    Size  Location     Type
 14744 ;;  data            1    wreg     unsigned char 
 14745 ;; Auto vars:     Size  Location     Type
 14746 ;;  data            1    2[COMRAM] unsigned char 
 14747 ;; Return value:  Size  Location     Type
 14748 ;;                  1    wreg      void 
 14749 ;; Registers used:
 14750 ;;		wreg, status,2, status,0, cstack
 14751 ;; Tracked objects:
 14752 ;;		On entry : 0/0
 14753 ;;		On exit  : 0/0
 14754 ;;		Unchanged: 0/0
 14755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14760 ;;Total ram usage:        1 bytes
 14761 ;; Hardware stack levels used:    1
 14762 ;; Hardware stack levels required when called:    1
 14763 ;; This function calls:
 14764 ;;		_lcdNibble
 14765 ;; This function is called by:
 14766 ;;		_viewLogs
 14767 ;;		_food_press
 14768 ;;		_diet_press
 14769 ;;		_which_drawer
 14770 ;;		_printf
 14771 ;; This function uses a non-reentrant model
 14772 ;;
 14773                           
 14774                           	psect	text27
 14775  00AF9E                     __ptext27:
 14776                           	opt stack 0
 14777  00AF9E                     _putch:
 14778                           	opt stack 27
 14779                           
 14780                           ;incstack = 0
 14781                           ;putch@data stored from wreg
 14782  00AF9E  6E03               	movwf	putch@data,c
 14783                           
 14784                           ;LCD.c: 80: LATDbits.LATD2 = 1;
 14785  00AFA0  848C               	bsf	3980,2,c	;volatile
 14786                           
 14787                           ;LCD.c: 81: lcdNibble(data);
 14788  00AFA2  5003               	movf	putch@data,w,c
 14789  00AFA4  ECC6  F059         	call	_lcdNibble
 14790                           
 14791                           ;LCD.c: 82: _delay((unsigned long)((100)*(40000000/4000000.0)));
 14792  00AFA8  0EC8               	movlw	200
 14793  00AFAA                     u12167:
 14794  00AFAA  D000               	nop2	
 14795  00AFAC  2EE8               	decfsz	wreg,f,c
 14796  00AFAE  D7FD               	bra	u12167
 14797  00AFB0  0012               	return		;funcret
 14798  00AFB2                     __end_of_putch:
 14799                           	opt stack 0
 14800                           tblptru	equ	0xFF8
 14801                           tblptrh	equ	0xFF7
 14802                           tblptrl	equ	0xFF6
 14803                           tablat	equ	0xFF5
 14804                           prodh	equ	0xFF4
 14805                           prodl	equ	0xFF3
 14806                           postinc0	equ	0xFEE
 14807                           wreg	equ	0xFE8
 14808                           postinc1	equ	0xFE6
 14809                           postdec1	equ	0xFE5
 14810                           plusw1	equ	0xFE3
 14811                           fsr1h	equ	0xFE2
 14812                           fsr1l	equ	0xFE1
 14813                           indf2	equ	0xFDF
 14814                           postinc2	equ	0xFDE
 14815                           postdec2	equ	0xFDD
 14816                           plusw2	equ	0xFDB
 14817                           fsr2h	equ	0xFDA
 14818                           fsr2l	equ	0xFD9
 14819                           status	equ	0xFD8
 14820                           
 14821 ;; *************** function _isdigit *****************
 14822 ;; Defined at:
 14823 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/isdigit.c"
 14824 ;; Parameters:    Size  Location     Type
 14825 ;;  c               1    wreg     unsigned char 
 14826 ;; Auto vars:     Size  Location     Type
 14827 ;;  c               1    2[COMRAM] unsigned char 
 14828 ;; Return value:  Size  Location     Type
 14829 ;;		None               void
 14830 ;; Registers used:
 14831 ;;		wreg, status,2, status,0
 14832 ;; Tracked objects:
 14833 ;;		On entry : 0/0
 14834 ;;		On exit  : 0/0
 14835 ;;		Unchanged: 0/0
 14836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14840 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14841 ;;Total ram usage:        3 bytes
 14842 ;; Hardware stack levels used:    1
 14843 ;; This function calls:
 14844 ;;		Nothing
 14845 ;; This function is called by:
 14846 ;;		_printf
 14847 ;; This function uses a non-reentrant model
 14848 ;;
 14849                           
 14850                           	psect	text28
 14851  00AFB2                     __ptext28:
 14852                           	opt stack 0
 14853  00AFB2                     _isdigit:
 14854                           	opt stack 27
 14855                           
 14856                           ;incstack = 0
 14857                           ;isdigit@c stored from wreg
 14858  00AFB2  6E03               	movwf	isdigit@c,c
 14859  00AFB4  0E00               	movlw	0
 14860  00AFB6  6E02               	movwf	_isdigit$1607,c
 14861  00AFB8  0E3A               	movlw	58
 14862  00AFBA  6003               	cpfslt	isdigit@c,c
 14863  00AFBC  D005               	goto	l1653
 14864  00AFBE  0E2F               	movlw	47
 14865  00AFC0  6403               	cpfsgt	isdigit@c,c
 14866  00AFC2  D002               	goto	l1653
 14867  00AFC4  0E01               	movlw	1
 14868  00AFC6  6E02               	movwf	_isdigit$1607,c
 14869  00AFC8                     l1653:
 14870  00AFC8  C002  F001         	movff	_isdigit$1607,??_isdigit
 14871  00AFCC  3001               	rrcf	??_isdigit,w,c
 14872  00AFCE  0012               	return	
 14873  00AFD0                     __end_of_isdigit:
 14874                           	opt stack 0
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           postinc0	equ	0xFEE
 14882                           wreg	equ	0xFE8
 14883                           postinc1	equ	0xFE6
 14884                           postdec1	equ	0xFE5
 14885                           plusw1	equ	0xFE3
 14886                           fsr1h	equ	0xFE2
 14887                           fsr1l	equ	0xFE1
 14888                           indf2	equ	0xFDF
 14889                           postinc2	equ	0xFDE
 14890                           postdec2	equ	0xFDD
 14891                           plusw2	equ	0xFDB
 14892                           fsr2h	equ	0xFDA
 14893                           fsr2l	equ	0xFD9
 14894                           status	equ	0xFD8
 14895                           
 14896 ;; *************** function ___lwmod *****************
 14897 ;; Defined at:
 14898 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwmod.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;  dividend        2    7[COMRAM] unsigned int 
 14901 ;;  divisor         2    9[COMRAM] unsigned int 
 14902 ;; Auto vars:     Size  Location     Type
 14903 ;;  counter         1   11[COMRAM] unsigned char 
 14904 ;; Return value:  Size  Location     Type
 14905 ;;                  2    7[COMRAM] unsigned int 
 14906 ;; Registers used:
 14907 ;;		wreg, status,2, status,0
 14908 ;; Tracked objects:
 14909 ;;		On entry : 0/0
 14910 ;;		On exit  : 0/0
 14911 ;;		Unchanged: 0/0
 14912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14913 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;Total ram usage:        5 bytes
 14918 ;; Hardware stack levels used:    1
 14919 ;; This function calls:
 14920 ;;		Nothing
 14921 ;; This function is called by:
 14922 ;;		_displayLogs
 14923 ;;		_printf
 14924 ;; This function uses a non-reentrant model
 14925 ;;
 14926                           
 14927                           	psect	text29
 14928  00B0A8                     __ptext29:
 14929                           	opt stack 0
 14930  00B0A8                     ___lwmod:
 14931                           	opt stack 27
 14932                           
 14933                           ;incstack = 0
 14934  00B0A8  500A               	movf	___lwmod@divisor,w,c
 14935  00B0AA  100B               	iorwf	___lwmod@divisor+1,w,c
 14936  00B0AC  B4D8               	btfsc	status,2,c
 14937  00B0AE  D018               	goto	l1747
 14938  00B0B0  0E01               	movlw	1
 14939  00B0B2  6E0C               	movwf	___lwmod@counter,c
 14940  00B0B4  D004               	goto	l1742
 14941  00B0B6  90D8               	bcf	status,0,c
 14942  00B0B8  360A               	rlcf	___lwmod@divisor,f,c
 14943  00B0BA  360B               	rlcf	___lwmod@divisor+1,f,c
 14944  00B0BC  2A0C               	incf	___lwmod@counter,f,c
 14945  00B0BE                     l1742:
 14946  00B0BE  AE0B               	btfss	___lwmod@divisor+1,7,c
 14947  00B0C0  D7FA               	goto	l1743
 14948  00B0C2                     u5760:
 14949  00B0C2  500A               	movf	___lwmod@divisor,w,c
 14950  00B0C4  5C08               	subwf	___lwmod@dividend,w,c
 14951  00B0C6  500B               	movf	___lwmod@divisor+1,w,c
 14952  00B0C8  5809               	subwfb	___lwmod@dividend+1,w,c
 14953  00B0CA  A0D8               	btfss	status,0,c
 14954  00B0CC  D004               	goto	l1746
 14955  00B0CE  500A               	movf	___lwmod@divisor,w,c
 14956  00B0D0  5E08               	subwf	___lwmod@dividend,f,c
 14957  00B0D2  500B               	movf	___lwmod@divisor+1,w,c
 14958  00B0D4  5A09               	subwfb	___lwmod@dividend+1,f,c
 14959  00B0D6                     l1746:
 14960  00B0D6  90D8               	bcf	status,0,c
 14961  00B0D8  320B               	rrcf	___lwmod@divisor+1,f,c
 14962  00B0DA  320A               	rrcf	___lwmod@divisor,f,c
 14963  00B0DC  2E0C               	decfsz	___lwmod@counter,f,c
 14964  00B0DE  D7F1               	goto	u5760
 14965  00B0E0                     l1747:
 14966  00B0E0  C008  F008         	movff	___lwmod@dividend,?___lwmod
 14967  00B0E4  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
 14968  00B0E8  0012               	return		;funcret
 14969  00B0EA                     __end_of___lwmod:
 14970                           	opt stack 0
 14971                           tblptru	equ	0xFF8
 14972                           tblptrh	equ	0xFF7
 14973                           tblptrl	equ	0xFF6
 14974                           tablat	equ	0xFF5
 14975                           prodh	equ	0xFF4
 14976                           prodl	equ	0xFF3
 14977                           postinc0	equ	0xFEE
 14978                           wreg	equ	0xFE8
 14979                           postinc1	equ	0xFE6
 14980                           postdec1	equ	0xFE5
 14981                           plusw1	equ	0xFE3
 14982                           fsr1h	equ	0xFE2
 14983                           fsr1l	equ	0xFE1
 14984                           indf2	equ	0xFDF
 14985                           postinc2	equ	0xFDE
 14986                           postdec2	equ	0xFDD
 14987                           plusw2	equ	0xFDB
 14988                           fsr2h	equ	0xFDA
 14989                           fsr2l	equ	0xFD9
 14990                           status	equ	0xFD8
 14991                           
 14992 ;; *************** function ___lwdiv *****************
 14993 ;; Defined at:
 14994 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lwdiv.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;  dividend        2    0[COMRAM] unsigned int 
 14997 ;;  divisor         2    2[COMRAM] unsigned int 
 14998 ;; Auto vars:     Size  Location     Type
 14999 ;;  quotient        2    4[COMRAM] unsigned int 
 15000 ;;  counter         1    6[COMRAM] unsigned char 
 15001 ;; Return value:  Size  Location     Type
 15002 ;;                  2    0[COMRAM] unsigned int 
 15003 ;; Registers used:
 15004 ;;		wreg, status,2, status,0
 15005 ;; Tracked objects:
 15006 ;;		On entry : 0/0
 15007 ;;		On exit  : 0/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15011 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15013 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;Total ram usage:        7 bytes
 15015 ;; Hardware stack levels used:    1
 15016 ;; This function calls:
 15017 ;;		Nothing
 15018 ;; This function is called by:
 15019 ;;		_displayLogs
 15020 ;;		_printf
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text30
 15025  00B136                     __ptext30:
 15026                           	opt stack 0
 15027  00B136                     ___lwdiv:
 15028                           	opt stack 27
 15029                           
 15030                           ;incstack = 0
 15031  00B136  0E00               	movlw	0
 15032  00B138  6E06               	movwf	___lwdiv@quotient+1,c
 15033  00B13A  0E00               	movlw	0
 15034  00B13C  6E05               	movwf	___lwdiv@quotient,c
 15035  00B13E  5003               	movf	___lwdiv@divisor,w,c
 15036  00B140  1004               	iorwf	___lwdiv@divisor+1,w,c
 15037  00B142  B4D8               	btfsc	status,2,c
 15038  00B144  D01C               	goto	l1737
 15039  00B146  0E01               	movlw	1
 15040  00B148  6E07               	movwf	___lwdiv@counter,c
 15041  00B14A  D004               	goto	l1732
 15042  00B14C  90D8               	bcf	status,0,c
 15043  00B14E  3603               	rlcf	___lwdiv@divisor,f,c
 15044  00B150  3604               	rlcf	___lwdiv@divisor+1,f,c
 15045  00B152  2A07               	incf	___lwdiv@counter,f,c
 15046  00B154                     l1732:
 15047  00B154  AE04               	btfss	___lwdiv@divisor+1,7,c
 15048  00B156  D7FA               	goto	l1733
 15049  00B158                     u5730:
 15050  00B158  90D8               	bcf	status,0,c
 15051  00B15A  3605               	rlcf	___lwdiv@quotient,f,c
 15052  00B15C  3606               	rlcf	___lwdiv@quotient+1,f,c
 15053  00B15E  5003               	movf	___lwdiv@divisor,w,c
 15054  00B160  5C01               	subwf	___lwdiv@dividend,w,c
 15055  00B162  5004               	movf	___lwdiv@divisor+1,w,c
 15056  00B164  5802               	subwfb	___lwdiv@dividend+1,w,c
 15057  00B166  A0D8               	btfss	status,0,c
 15058  00B168  D005               	goto	l1736
 15059  00B16A  5003               	movf	___lwdiv@divisor,w,c
 15060  00B16C  5E01               	subwf	___lwdiv@dividend,f,c
 15061  00B16E  5004               	movf	___lwdiv@divisor+1,w,c
 15062  00B170  5A02               	subwfb	___lwdiv@dividend+1,f,c
 15063  00B172  8005               	bsf	___lwdiv@quotient,0,c
 15064  00B174                     l1736:
 15065  00B174  90D8               	bcf	status,0,c
 15066  00B176  3204               	rrcf	___lwdiv@divisor+1,f,c
 15067  00B178  3203               	rrcf	___lwdiv@divisor,f,c
 15068  00B17A  2E07               	decfsz	___lwdiv@counter,f,c
 15069  00B17C  D7ED               	goto	u5730
 15070  00B17E                     l1737:
 15071  00B17E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
 15072  00B182  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15073  00B186  0012               	return		;funcret
 15074  00B188                     __end_of___lwdiv:
 15075                           	opt stack 0
 15076                           tblptru	equ	0xFF8
 15077                           tblptrh	equ	0xFF7
 15078                           tblptrl	equ	0xFF6
 15079                           tablat	equ	0xFF5
 15080                           prodh	equ	0xFF4
 15081                           prodl	equ	0xFF3
 15082                           postinc0	equ	0xFEE
 15083                           wreg	equ	0xFE8
 15084                           postinc1	equ	0xFE6
 15085                           postdec1	equ	0xFE5
 15086                           plusw1	equ	0xFE3
 15087                           fsr1h	equ	0xFE2
 15088                           fsr1l	equ	0xFE1
 15089                           indf2	equ	0xFDF
 15090                           postinc2	equ	0xFDE
 15091                           postdec2	equ	0xFDD
 15092                           plusw2	equ	0xFDB
 15093                           fsr2h	equ	0xFDA
 15094                           fsr2l	equ	0xFD9
 15095                           status	equ	0xFD8
 15096                           
 15097 ;; *************** function _moveVertically *****************
 15098 ;; Defined at:
 15099 ;;		line 186 in file "operationMode.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 15102 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;		None
 15105 ;; Return value:  Size  Location     Type
 15106 ;;                  2   11[COMRAM] unsigned int 
 15107 ;; Registers used:
 15108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15109 ;; Tracked objects:
 15110 ;;		On entry : 0/0
 15111 ;;		On exit  : 0/0
 15112 ;;		Unchanged: 0/0
 15113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15114 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15117 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15118 ;;Total ram usage:        4 bytes
 15119 ;; Hardware stack levels used:    1
 15120 ;; Hardware stack levels required when called:    2
 15121 ;; This function calls:
 15122 ;;		_verticalStepper
 15123 ;; This function is called by:
 15124 ;;		_mainOperation
 15125 ;; This function uses a non-reentrant model
 15126 ;;
 15127                           
 15128                           	psect	text31
 15129  00C966                     __ptext31:
 15130                           	opt stack 0
 15131  00C966                     _moveVertically:
 15132                           	opt stack 27
 15133                           
 15134                           ;operationMode.c: 188: if (currentDrawer != 0 && nextDrawer != 0 && nextDrawer > current
      +                          Drawer){
 15135                           
 15136                           ;incstack = 0
 15137  00C966  500C               	movf	moveVertically@currentDrawer,w,c
 15138  00C968  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15139  00C96A  B4D8               	btfsc	status,2,c
 15140  00C96C  D123               	goto	l226
 15141  00C96E  500E               	movf	moveVertically@nextDrawer,w,c
 15142  00C970  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15143  00C972  B4D8               	btfsc	status,2,c
 15144  00C974  D11F               	goto	l226
 15145  00C976  500E               	movf	moveVertically@nextDrawer,w,c
 15146  00C978  5C0C               	subwf	moveVertically@currentDrawer,w,c
 15147  00C97A  500F               	movf	moveVertically@nextDrawer+1,w,c
 15148  00C97C  580D               	subwfb	moveVertically@currentDrawer+1,w,c
 15149  00C97E  B0D8               	btfsc	status,0,c
 15150  00C980  D119               	goto	l226
 15151                           
 15152                           ;operationMode.c: 189: if (currentDrawer == 1 || currentDrawer == 2 || currentDrawer == 
      +                          3 || currentDrawer == 4){
 15153  00C982  040C               	decf	moveVertically@currentDrawer,w,c
 15154  00C984  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15155  00C986  B4D8               	btfsc	status,2,c
 15156  00C988  D00F               	goto	u8120
 15157  00C98A  0E02               	movlw	2
 15158  00C98C  180C               	xorwf	moveVertically@currentDrawer,w,c
 15159  00C98E  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15160  00C990  B4D8               	btfsc	status,2,c
 15161  00C992  D00A               	goto	u8120
 15162  00C994  0E03               	movlw	3
 15163  00C996  180C               	xorwf	moveVertically@currentDrawer,w,c
 15164  00C998  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15165  00C99A  B4D8               	btfsc	status,2,c
 15166  00C99C  D005               	goto	u8120
 15167  00C99E  0E04               	movlw	4
 15168  00C9A0  180C               	xorwf	moveVertically@currentDrawer,w,c
 15169  00C9A2  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15170  00C9A4  A4D8               	btfss	status,2,c
 15171  00C9A6  D06F               	goto	l227
 15172  00C9A8                     u8120:
 15173                           
 15174                           ;operationMode.c: 190: if (nextDrawer == 5 || nextDrawer == 6 || nextDrawer == 7 || next
      +                          Drawer == 8){
 15175  00C9A8  0E05               	movlw	5
 15176  00C9AA  180E               	xorwf	moveVertically@nextDrawer,w,c
 15177  00C9AC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15178  00C9AE  B4D8               	btfsc	status,2,c
 15179  00C9B0  D00F               	goto	u8160
 15180  00C9B2  0E06               	movlw	6
 15181  00C9B4  180E               	xorwf	moveVertically@nextDrawer,w,c
 15182  00C9B6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15183  00C9B8  B4D8               	btfsc	status,2,c
 15184  00C9BA  D00A               	goto	u8160
 15185  00C9BC  0E07               	movlw	7
 15186  00C9BE  180E               	xorwf	moveVertically@nextDrawer,w,c
 15187  00C9C0  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15188  00C9C2  B4D8               	btfsc	status,2,c
 15189  00C9C4  D005               	goto	u8160
 15190  00C9C6  0E08               	movlw	8
 15191  00C9C8  180E               	xorwf	moveVertically@nextDrawer,w,c
 15192  00C9CA  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15193  00C9CC  A4D8               	btfss	status,2,c
 15194  00C9CE  D011               	goto	l230
 15195  00C9D0                     u8160:
 15196                           
 15197                           ;operationMode.c: 191: verticalStepper(1, 0);
 15198  00C9D0  0E00               	movlw	0
 15199  00C9D2  6E07               	movwf	verticalStepper@rotations+1,c
 15200  00C9D4  0E01               	movlw	1
 15201  00C9D6  6E06               	movwf	verticalStepper@rotations,c
 15202  00C9D8  0E00               	movlw	0
 15203  00C9DA  6E09               	movwf	verticalStepper@direction+1,c
 15204  00C9DC  0E00               	movlw	0
 15205  00C9DE  6E08               	movwf	verticalStepper@direction,c
 15206  00C9E0  EC53  F059         	call	_verticalStepper	;wreg free
 15207                           
 15208                           ;operationMode.c: 192: return (currentDrawer + 4);
 15209  00C9E4  0E04               	movlw	4
 15210  00C9E6  240C               	addwf	moveVertically@currentDrawer,w,c
 15211  00C9E8  6E0C               	movwf	?_moveVertically,c
 15212  00C9EA  0E00               	movlw	0
 15213  00C9EC  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15214  00C9EE  6E0D               	movwf	?_moveVertically+1,c
 15215                           
 15216                           ;operationMode.c: 193: }
 15217  00C9F0  0012               	return	
 15218  00C9F2                     l230:
 15219                           
 15220                           ;operationMode.c: 194: else if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 
      +                          || nextDrawer == 12){
 15221  00C9F2  0E09               	movlw	9
 15222  00C9F4  180E               	xorwf	moveVertically@nextDrawer,w,c
 15223  00C9F6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15224  00C9F8  B4D8               	btfsc	status,2,c
 15225  00C9FA  D00F               	goto	u8200
 15226  00C9FC  0E0A               	movlw	10
 15227  00C9FE  180E               	xorwf	moveVertically@nextDrawer,w,c
 15228  00CA00  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15229  00CA02  B4D8               	btfsc	status,2,c
 15230  00CA04  D00A               	goto	u8200
 15231  00CA06  0E0B               	movlw	11
 15232  00CA08  180E               	xorwf	moveVertically@nextDrawer,w,c
 15233  00CA0A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15234  00CA0C  B4D8               	btfsc	status,2,c
 15235  00CA0E  D005               	goto	u8200
 15236  00CA10  0E0C               	movlw	12
 15237  00CA12  180E               	xorwf	moveVertically@nextDrawer,w,c
 15238  00CA14  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15239  00CA16  A4D8               	btfss	status,2,c
 15240  00CA18  D011               	goto	l235
 15241  00CA1A                     u8200:
 15242                           
 15243                           ;operationMode.c: 195: verticalStepper(2, 0);
 15244  00CA1A  0E00               	movlw	0
 15245  00CA1C  6E07               	movwf	verticalStepper@rotations+1,c
 15246  00CA1E  0E02               	movlw	2
 15247  00CA20  6E06               	movwf	verticalStepper@rotations,c
 15248  00CA22  0E00               	movlw	0
 15249  00CA24  6E09               	movwf	verticalStepper@direction+1,c
 15250  00CA26  0E00               	movlw	0
 15251  00CA28  6E08               	movwf	verticalStepper@direction,c
 15252  00CA2A  EC53  F059         	call	_verticalStepper	;wreg free
 15253                           
 15254                           ;operationMode.c: 196: return (currentDrawer + 8);
 15255  00CA2E  0E08               	movlw	8
 15256  00CA30  240C               	addwf	moveVertically@currentDrawer,w,c
 15257  00CA32  6E0C               	movwf	?_moveVertically,c
 15258  00CA34  0E00               	movlw	0
 15259  00CA36  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15260  00CA38  6E0D               	movwf	?_moveVertically+1,c
 15261                           
 15262                           ;operationMode.c: 197: }
 15263  00CA3A  0012               	return	
 15264  00CA3C                     l235:
 15265                           
 15266                           ;operationMode.c: 198: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 15267  00CA3C  0E0D               	movlw	13
 15268  00CA3E  180E               	xorwf	moveVertically@nextDrawer,w,c
 15269  00CA40  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15270  00CA42  B4D8               	btfsc	status,2,c
 15271  00CA44  D00F               	goto	u8240
 15272  00CA46  0E0E               	movlw	14
 15273  00CA48  180E               	xorwf	moveVertically@nextDrawer,w,c
 15274  00CA4A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15275  00CA4C  B4D8               	btfsc	status,2,c
 15276  00CA4E  D00A               	goto	u8240
 15277  00CA50  0E0F               	movlw	15
 15278  00CA52  180E               	xorwf	moveVertically@nextDrawer,w,c
 15279  00CA54  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15280  00CA56  B4D8               	btfsc	status,2,c
 15281  00CA58  D005               	goto	u8240
 15282  00CA5A  0E10               	movlw	16
 15283  00CA5C  180E               	xorwf	moveVertically@nextDrawer,w,c
 15284  00CA5E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15285  00CA60  A4D8               	btfss	status,2,c
 15286  00CA62  0012               	return	
 15287  00CA64                     u8240:
 15288                           
 15289                           ;operationMode.c: 199: verticalStepper(3, 0);
 15290  00CA64  0E00               	movlw	0
 15291  00CA66  6E07               	movwf	verticalStepper@rotations+1,c
 15292  00CA68  0E03               	movlw	3
 15293  00CA6A  6E06               	movwf	verticalStepper@rotations,c
 15294  00CA6C  0E00               	movlw	0
 15295  00CA6E  6E09               	movwf	verticalStepper@direction+1,c
 15296  00CA70  0E00               	movlw	0
 15297  00CA72  6E08               	movwf	verticalStepper@direction,c
 15298  00CA74  EC53  F059         	call	_verticalStepper	;wreg free
 15299                           
 15300                           ;operationMode.c: 200: return (currentDrawer + 12);
 15301  00CA78  0E0C               	movlw	12
 15302  00CA7A  240C               	addwf	moveVertically@currentDrawer,w,c
 15303  00CA7C  6E0C               	movwf	?_moveVertically,c
 15304  00CA7E  0E00               	movlw	0
 15305  00CA80  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15306  00CA82  6E0D               	movwf	?_moveVertically+1,c
 15307                           
 15308                           ;operationMode.c: 201: }
 15309                           ;operationMode.c: 202: }
 15310  00CA84  0012               	return	
 15311  00CA86                     l227:
 15312                           
 15313                           ;operationMode.c: 203: else if (currentDrawer == 5 || currentDrawer == 6 || currentDrawe
      +                          r == 7 || currentDrawer == 8){
 15314  00CA86  0E05               	movlw	5
 15315  00CA88  180C               	xorwf	moveVertically@currentDrawer,w,c
 15316  00CA8A  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15317  00CA8C  B4D8               	btfsc	status,2,c
 15318  00CA8E  D00F               	goto	u8280
 15319  00CA90  0E06               	movlw	6
 15320  00CA92  180C               	xorwf	moveVertically@currentDrawer,w,c
 15321  00CA94  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15322  00CA96  B4D8               	btfsc	status,2,c
 15323  00CA98  D00A               	goto	u8280
 15324  00CA9A  0E07               	movlw	7
 15325  00CA9C  180C               	xorwf	moveVertically@currentDrawer,w,c
 15326  00CA9E  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15327  00CAA0  B4D8               	btfsc	status,2,c
 15328  00CAA2  D005               	goto	u8280
 15329  00CAA4  0E08               	movlw	8
 15330  00CAA6  180C               	xorwf	moveVertically@currentDrawer,w,c
 15331  00CAA8  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15332  00CAAA  A4D8               	btfss	status,2,c
 15333  00CAAC  D04A               	goto	l243
 15334  00CAAE                     u8280:
 15335                           
 15336                           ;operationMode.c: 204: if (nextDrawer == 9 || nextDrawer == 10 || nextDrawer == 11 || ne
      +                          xtDrawer == 12){
 15337  00CAAE  0E09               	movlw	9
 15338  00CAB0  180E               	xorwf	moveVertically@nextDrawer,w,c
 15339  00CAB2  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15340  00CAB4  B4D8               	btfsc	status,2,c
 15341  00CAB6  D00F               	goto	u8320
 15342  00CAB8  0E0A               	movlw	10
 15343  00CABA  180E               	xorwf	moveVertically@nextDrawer,w,c
 15344  00CABC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15345  00CABE  B4D8               	btfsc	status,2,c
 15346  00CAC0  D00A               	goto	u8320
 15347  00CAC2  0E0B               	movlw	11
 15348  00CAC4  180E               	xorwf	moveVertically@nextDrawer,w,c
 15349  00CAC6  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15350  00CAC8  B4D8               	btfsc	status,2,c
 15351  00CACA  D005               	goto	u8320
 15352  00CACC  0E0C               	movlw	12
 15353  00CACE  180E               	xorwf	moveVertically@nextDrawer,w,c
 15354  00CAD0  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15355  00CAD2  A4D8               	btfss	status,2,c
 15356  00CAD4  D011               	goto	l246
 15357  00CAD6                     u8320:
 15358                           
 15359                           ;operationMode.c: 205: verticalStepper(1, 0);
 15360  00CAD6  0E00               	movlw	0
 15361  00CAD8  6E07               	movwf	verticalStepper@rotations+1,c
 15362  00CADA  0E01               	movlw	1
 15363  00CADC  6E06               	movwf	verticalStepper@rotations,c
 15364  00CADE  0E00               	movlw	0
 15365  00CAE0  6E09               	movwf	verticalStepper@direction+1,c
 15366  00CAE2  0E00               	movlw	0
 15367  00CAE4  6E08               	movwf	verticalStepper@direction,c
 15368  00CAE6  EC53  F059         	call	_verticalStepper	;wreg free
 15369                           
 15370                           ;operationMode.c: 206: return (currentDrawer + 4);
 15371  00CAEA  0E04               	movlw	4
 15372  00CAEC  240C               	addwf	moveVertically@currentDrawer,w,c
 15373  00CAEE  6E0C               	movwf	?_moveVertically,c
 15374  00CAF0  0E00               	movlw	0
 15375  00CAF2  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15376  00CAF4  6E0D               	movwf	?_moveVertically+1,c
 15377                           
 15378                           ;operationMode.c: 207: }
 15379  00CAF6  0012               	return	
 15380  00CAF8                     l246:
 15381                           
 15382                           ;operationMode.c: 208: else if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15
      +                           || nextDrawer == 16){
 15383  00CAF8  0E0D               	movlw	13
 15384  00CAFA  180E               	xorwf	moveVertically@nextDrawer,w,c
 15385  00CAFC  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15386  00CAFE  B4D8               	btfsc	status,2,c
 15387  00CB00  D00F               	goto	u8360
 15388  00CB02  0E0E               	movlw	14
 15389  00CB04  180E               	xorwf	moveVertically@nextDrawer,w,c
 15390  00CB06  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15391  00CB08  B4D8               	btfsc	status,2,c
 15392  00CB0A  D00A               	goto	u8360
 15393  00CB0C  0E0F               	movlw	15
 15394  00CB0E  180E               	xorwf	moveVertically@nextDrawer,w,c
 15395  00CB10  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15396  00CB12  B4D8               	btfsc	status,2,c
 15397  00CB14  D005               	goto	u8360
 15398  00CB16  0E10               	movlw	16
 15399  00CB18  180E               	xorwf	moveVertically@nextDrawer,w,c
 15400  00CB1A  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15401  00CB1C  A4D8               	btfss	status,2,c
 15402  00CB1E  0012               	return	
 15403  00CB20                     u8360:
 15404                           
 15405                           ;operationMode.c: 209: verticalStepper(2, 0);
 15406  00CB20  0E00               	movlw	0
 15407  00CB22  6E07               	movwf	verticalStepper@rotations+1,c
 15408  00CB24  0E02               	movlw	2
 15409  00CB26  6E06               	movwf	verticalStepper@rotations,c
 15410  00CB28  0E00               	movlw	0
 15411  00CB2A  6E09               	movwf	verticalStepper@direction+1,c
 15412  00CB2C  0E00               	movlw	0
 15413  00CB2E  6E08               	movwf	verticalStepper@direction,c
 15414  00CB30  EC53  F059         	call	_verticalStepper	;wreg free
 15415                           
 15416                           ;operationMode.c: 210: return (currentDrawer + 8);
 15417  00CB34  0E08               	movlw	8
 15418  00CB36  240C               	addwf	moveVertically@currentDrawer,w,c
 15419  00CB38  6E0C               	movwf	?_moveVertically,c
 15420  00CB3A  0E00               	movlw	0
 15421  00CB3C  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15422  00CB3E  6E0D               	movwf	?_moveVertically+1,c
 15423                           
 15424                           ;operationMode.c: 211: }
 15425                           ;operationMode.c: 212: }
 15426  00CB40  0012               	return	
 15427  00CB42                     l243:
 15428                           
 15429                           ;operationMode.c: 213: else if (currentDrawer == 9 || currentDrawer == 10 || currentDraw
      +                          er == 11 || currentDrawer == 12){
 15430  00CB42  0E09               	movlw	9
 15431  00CB44  180C               	xorwf	moveVertically@currentDrawer,w,c
 15432  00CB46  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15433  00CB48  B4D8               	btfsc	status,2,c
 15434  00CB4A  D00F               	goto	u8400
 15435  00CB4C  0E0A               	movlw	10
 15436  00CB4E  180C               	xorwf	moveVertically@currentDrawer,w,c
 15437  00CB50  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15438  00CB52  B4D8               	btfsc	status,2,c
 15439  00CB54  D00A               	goto	u8400
 15440  00CB56  0E0B               	movlw	11
 15441  00CB58  180C               	xorwf	moveVertically@currentDrawer,w,c
 15442  00CB5A  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15443  00CB5C  B4D8               	btfsc	status,2,c
 15444  00CB5E  D005               	goto	u8400
 15445  00CB60  0E0C               	movlw	12
 15446  00CB62  180C               	xorwf	moveVertically@currentDrawer,w,c
 15447  00CB64  100D               	iorwf	moveVertically@currentDrawer+1,w,c
 15448  00CB66  A4D8               	btfss	status,2,c
 15449  00CB68  0012               	return	
 15450  00CB6A                     u8400:
 15451                           
 15452                           ;operationMode.c: 214: if (nextDrawer == 13 || nextDrawer == 14 || nextDrawer == 15 || n
      +                          extDrawer == 16){
 15453  00CB6A  0E0D               	movlw	13
 15454  00CB6C  180E               	xorwf	moveVertically@nextDrawer,w,c
 15455  00CB6E  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15456  00CB70  B4D8               	btfsc	status,2,c
 15457  00CB72  D00F               	goto	u8440
 15458  00CB74  0E0E               	movlw	14
 15459  00CB76  180E               	xorwf	moveVertically@nextDrawer,w,c
 15460  00CB78  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15461  00CB7A  B4D8               	btfsc	status,2,c
 15462  00CB7C  D00A               	goto	u8440
 15463  00CB7E  0E0F               	movlw	15
 15464  00CB80  180E               	xorwf	moveVertically@nextDrawer,w,c
 15465  00CB82  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15466  00CB84  B4D8               	btfsc	status,2,c
 15467  00CB86  D005               	goto	u8440
 15468  00CB88  0E10               	movlw	16
 15469  00CB8A  180E               	xorwf	moveVertically@nextDrawer,w,c
 15470  00CB8C  100F               	iorwf	moveVertically@nextDrawer+1,w,c
 15471  00CB8E  A4D8               	btfss	status,2,c
 15472  00CB90  0012               	return	
 15473  00CB92                     u8440:
 15474                           
 15475                           ;operationMode.c: 215: verticalStepper(1, 0);
 15476  00CB92  0E00               	movlw	0
 15477  00CB94  6E07               	movwf	verticalStepper@rotations+1,c
 15478  00CB96  0E01               	movlw	1
 15479  00CB98  6E06               	movwf	verticalStepper@rotations,c
 15480  00CB9A  0E00               	movlw	0
 15481  00CB9C  6E09               	movwf	verticalStepper@direction+1,c
 15482  00CB9E  0E00               	movlw	0
 15483  00CBA0  6E08               	movwf	verticalStepper@direction,c
 15484  00CBA2  EC53  F059         	call	_verticalStepper	;wreg free
 15485                           
 15486                           ;operationMode.c: 216: return (currentDrawer + 4);
 15487  00CBA6  0E04               	movlw	4
 15488  00CBA8  240C               	addwf	moveVertically@currentDrawer,w,c
 15489  00CBAA  6E0C               	movwf	?_moveVertically,c
 15490  00CBAC  0E00               	movlw	0
 15491  00CBAE  200D               	addwfc	moveVertically@currentDrawer+1,w,c
 15492  00CBB0  6E0D               	movwf	?_moveVertically+1,c
 15493                           
 15494                           ;operationMode.c: 217: }
 15495                           ;operationMode.c: 218: }
 15496                           ;operationMode.c: 219: }
 15497  00CBB2  0012               	return	
 15498  00CBB4                     l226:
 15499                           
 15500                           ;operationMode.c: 220: else{
 15501                           ;operationMode.c: 221: return currentDrawer;
 15502  00CBB4  C00C  F00C         	movff	moveVertically@currentDrawer,?_moveVertically
 15503  00CBB8  C00D  F00D         	movff	moveVertically@currentDrawer+1,?_moveVertically+1
 15504  00CBBC  0012               	return	
 15505  00CBBE                     __end_of_moveVertically:
 15506                           	opt stack 0
 15507                           tblptru	equ	0xFF8
 15508                           tblptrh	equ	0xFF7
 15509                           tblptrl	equ	0xFF6
 15510                           tablat	equ	0xFF5
 15511                           prodh	equ	0xFF4
 15512                           prodl	equ	0xFF3
 15513                           postinc0	equ	0xFEE
 15514                           wreg	equ	0xFE8
 15515                           postinc1	equ	0xFE6
 15516                           postdec1	equ	0xFE5
 15517                           plusw1	equ	0xFE3
 15518                           fsr1h	equ	0xFE2
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           plusw2	equ	0xFDB
 15524                           fsr2h	equ	0xFDA
 15525                           fsr2l	equ	0xFD9
 15526                           status	equ	0xFD8
 15527                           
 15528 ;; *************** function _verticalStepper *****************
 15529 ;; Defined at:
 15530 ;;		line 144 in file "operationMode.c"
 15531 ;; Parameters:    Size  Location     Type
 15532 ;;  rotations       2    5[COMRAM] unsigned int 
 15533 ;;  direction       2    7[COMRAM] unsigned int 
 15534 ;; Auto vars:     Size  Location     Type
 15535 ;;  i               2    9[COMRAM] unsigned int 
 15536 ;; Return value:  Size  Location     Type
 15537 ;;                  1    wreg      void 
 15538 ;; Registers used:
 15539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15540 ;; Tracked objects:
 15541 ;;		On entry : 0/0
 15542 ;;		On exit  : 0/0
 15543 ;;		Unchanged: 0/0
 15544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15546 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15548 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15549 ;;Total ram usage:        6 bytes
 15550 ;; Hardware stack levels used:    1
 15551 ;; Hardware stack levels required when called:    1
 15552 ;; This function calls:
 15553 ;;		_uartTransmitBlocking
 15554 ;; This function is called by:
 15555 ;;		_moveVertically
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text32
 15560  00B2A6                     __ptext32:
 15561                           	opt stack 0
 15562  00B2A6                     _verticalStepper:
 15563                           	opt stack 27
 15564                           
 15565                           ;operationMode.c: 147: unsigned int i = 0;
 15566                           
 15567                           ;incstack = 0
 15568  00B2A6  0E00               	movlw	0
 15569  00B2A8  6E0B               	movwf	verticalStepper@i+1,c
 15570  00B2AA  0E00               	movlw	0
 15571  00B2AC  6E0A               	movwf	verticalStepper@i,c
 15572                           
 15573                           ;operationMode.c: 150: if (direction == 1){
 15574  00B2AE  0408               	decf	verticalStepper@direction,w,c
 15575  00B2B0  1009               	iorwf	verticalStepper@direction+1,w,c
 15576  00B2B2  A4D8               	btfss	status,2,c
 15577  00B2B4  D016               	goto	l202
 15578                           
 15579                           ;operationMode.c: 151: for (i=0; i<rotations; i++){
 15580  00B2B6  0E00               	movlw	0
 15581  00B2B8  6E0B               	movwf	verticalStepper@i+1,c
 15582  00B2BA  0E00               	movlw	0
 15583  00B2BC  6E0A               	movwf	verticalStepper@i,c
 15584  00B2BE  D00A               	goto	l203
 15585  00B2C0                     
 15586                           ;operationMode.c: 152: uartTransmitBlocking(rowUp, 1);
 15587  00B2C0  0E7B               	movlw	low _rowUp
 15588  00B2C2  6E01               	movwf	uartTransmitBlocking@data,c
 15589  00B2C4  0E00               	movlw	high _rowUp
 15590  00B2C6  6E02               	movwf	uartTransmitBlocking@data+1,c
 15591  00B2C8  0E01               	movlw	1
 15592  00B2CA  6E03               	movwf	uartTransmitBlocking@numBytes,c
 15593  00B2CC  EC88  F05A         	call	_uartTransmitBlocking	;wreg free
 15594  00B2D0  4A0A               	infsnz	verticalStepper@i,f,c
 15595  00B2D2  2A0B               	incf	verticalStepper@i+1,f,c
 15596  00B2D4                     l203:
 15597  00B2D4  5006               	movf	verticalStepper@rotations,w,c
 15598  00B2D6  5C0A               	subwf	verticalStepper@i,w,c
 15599  00B2D8  5007               	movf	verticalStepper@rotations+1,w,c
 15600  00B2DA  580B               	subwfb	verticalStepper@i+1,w,c
 15601  00B2DC  B0D8               	btfsc	status,0,c
 15602  00B2DE  0012               	return	
 15603  00B2E0  D7EF               	goto	l204
 15604  00B2E2                     l202:
 15605                           
 15606                           ;operationMode.c: 157: else if (direction == 0){
 15607  00B2E2  5008               	movf	verticalStepper@direction,w,c
 15608  00B2E4  1009               	iorwf	verticalStepper@direction+1,w,c
 15609  00B2E6  A4D8               	btfss	status,2,c
 15610  00B2E8  0012               	return	
 15611                           
 15612                           ;operationMode.c: 158: for (i=0; i<rotations; i++){
 15613  00B2EA  0E00               	movlw	0
 15614  00B2EC  6E0B               	movwf	verticalStepper@i+1,c
 15615  00B2EE  0E00               	movlw	0
 15616  00B2F0  6E0A               	movwf	verticalStepper@i,c
 15617  00B2F2  D00A               	goto	l208
 15618  00B2F4                     
 15619                           ;operationMode.c: 159: uartTransmitBlocking(rowDown, 1);
 15620  00B2F4  0E7A               	movlw	low _rowDown
 15621  00B2F6  6E01               	movwf	uartTransmitBlocking@data,c
 15622  00B2F8  0E00               	movlw	high _rowDown
 15623  00B2FA  6E02               	movwf	uartTransmitBlocking@data+1,c
 15624  00B2FC  0E01               	movlw	1
 15625  00B2FE  6E03               	movwf	uartTransmitBlocking@numBytes,c
 15626  00B300  EC88  F05A         	call	_uartTransmitBlocking	;wreg free
 15627  00B304  4A0A               	infsnz	verticalStepper@i,f,c
 15628  00B306  2A0B               	incf	verticalStepper@i+1,f,c
 15629  00B308                     l208:
 15630  00B308  5006               	movf	verticalStepper@rotations,w,c
 15631  00B30A  5C0A               	subwf	verticalStepper@i,w,c
 15632  00B30C  5007               	movf	verticalStepper@rotations+1,w,c
 15633  00B30E  580B               	subwfb	verticalStepper@i+1,w,c
 15634  00B310  B0D8               	btfsc	status,0,c
 15635  00B312  0012               	return	
 15636  00B314  D7EF               	goto	l209
 15637  00B316                     __end_of_verticalStepper:
 15638                           	opt stack 0
 15639                           tblptru	equ	0xFF8
 15640                           tblptrh	equ	0xFF7
 15641                           tblptrl	equ	0xFF6
 15642                           tablat	equ	0xFF5
 15643                           prodh	equ	0xFF4
 15644                           prodl	equ	0xFF3
 15645                           postinc0	equ	0xFEE
 15646                           wreg	equ	0xFE8
 15647                           postinc1	equ	0xFE6
 15648                           postdec1	equ	0xFE5
 15649                           plusw1	equ	0xFE3
 15650                           fsr1h	equ	0xFE2
 15651                           fsr1l	equ	0xFE1
 15652                           indf2	equ	0xFDF
 15653                           postinc2	equ	0xFDE
 15654                           postdec2	equ	0xFDD
 15655                           plusw2	equ	0xFDB
 15656                           fsr2h	equ	0xFDA
 15657                           fsr2l	equ	0xFD9
 15658                           status	equ	0xFD8
 15659                           
 15660 ;; *************** function _moveHorizontally *****************
 15661 ;; Defined at:
 15662 ;;		line 227 in file "operationMode.c"
 15663 ;; Parameters:    Size  Location     Type
 15664 ;;  currentDrawe    2   11[COMRAM] unsigned int 
 15665 ;;  nextDrawer      2   13[COMRAM] unsigned int 
 15666 ;; Auto vars:     Size  Location     Type
 15667 ;;		None
 15668 ;; Return value:  Size  Location     Type
 15669 ;;                  1    wreg      void 
 15670 ;; Registers used:
 15671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15679 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;Total ram usage:        6 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    2
 15684 ;; This function calls:
 15685 ;;		_horizontalStepper
 15686 ;; This function is called by:
 15687 ;;		_mainOperation
 15688 ;; This function uses a non-reentrant model
 15689 ;;
 15690                           
 15691                           	psect	text33
 15692  00BDF4                     __ptext33:
 15693                           	opt stack 0
 15694  00BDF4                     _moveHorizontally:
 15695                           	opt stack 27
 15696                           
 15697                           ;operationMode.c: 228: if (currentDrawer != 0 && nextDrawer != 0){
 15698                           
 15699                           ;incstack = 0
 15700  00BDF4  500C               	movf	moveHorizontally@currentDrawer,w,c
 15701  00BDF6  100D               	iorwf	moveHorizontally@currentDrawer+1,w,c
 15702  00BDF8  B4D8               	btfsc	status,2,c
 15703  00BDFA  0012               	return	
 15704  00BDFC  500E               	movf	moveHorizontally@nextDrawer,w,c
 15705  00BDFE  100F               	iorwf	moveHorizontally@nextDrawer+1,w,c
 15706  00BE00  B4D8               	btfsc	status,2,c
 15707  00BE02  0012               	return	
 15708                           
 15709                           ;operationMode.c: 230: if (currentDrawer < nextDrawer){
 15710  00BE04  500E               	movf	moveHorizontally@nextDrawer,w,c
 15711  00BE06  5C0C               	subwf	moveHorizontally@currentDrawer,w,c
 15712  00BE08  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 15713  00BE0A  580D               	subwfb	moveHorizontally@currentDrawer+1,w,c
 15714  00BE0C  B0D8               	btfsc	status,0,c
 15715  00BE0E  D053               	goto	l264
 15716                           
 15717                           ;operationMode.c: 231: if ((nextDrawer - currentDrawer) == 1){
 15718  00BE10  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 15719  00BE14  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 15720  00BE18  1E10               	comf	??_moveHorizontally,f,c
 15721  00BE1A  1E11               	comf	??_moveHorizontally+1,f,c
 15722  00BE1C  4A10               	infsnz	??_moveHorizontally,f,c
 15723  00BE1E  2A11               	incf	??_moveHorizontally+1,f,c
 15724  00BE20  500E               	movf	moveHorizontally@nextDrawer,w,c
 15725  00BE22  2610               	addwf	??_moveHorizontally,f,c
 15726  00BE24  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 15727  00BE26  2211               	addwfc	??_moveHorizontally+1,f,c
 15728  00BE28  0410               	decf	??_moveHorizontally,w,c
 15729  00BE2A  1011               	iorwf	??_moveHorizontally+1,w,c
 15730  00BE2C  A4D8               	btfss	status,2,c
 15731  00BE2E  D00B               	goto	l265
 15732                           
 15733                           ;operationMode.c: 232: horizontalStepper(1, 0);
 15734  00BE30  0E00               	movlw	0
 15735  00BE32  6E07               	movwf	horizontalStepper@rotations+1,c
 15736  00BE34  0E01               	movlw	1
 15737  00BE36  6E06               	movwf	horizontalStepper@rotations,c
 15738  00BE38  0E00               	movlw	0
 15739  00BE3A  6E09               	movwf	horizontalStepper@direction+1,c
 15740  00BE3C  0E00               	movlw	0
 15741  00BE3E  6E08               	movwf	horizontalStepper@direction,c
 15742  00BE40  EC1B  F059         	call	_horizontalStepper	;wreg free
 15743                           
 15744                           ;operationMode.c: 233: }
 15745  00BE44  0012               	return	
 15746  00BE46                     l265:
 15747                           
 15748                           ;operationMode.c: 234: else if ((nextDrawer - currentDrawer) == 2){
 15749  00BE46  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 15750  00BE4A  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 15751  00BE4E  1E10               	comf	??_moveHorizontally,f,c
 15752  00BE50  1E11               	comf	??_moveHorizontally+1,f,c
 15753  00BE52  4A10               	infsnz	??_moveHorizontally,f,c
 15754  00BE54  2A11               	incf	??_moveHorizontally+1,f,c
 15755  00BE56  500E               	movf	moveHorizontally@nextDrawer,w,c
 15756  00BE58  2610               	addwf	??_moveHorizontally,f,c
 15757  00BE5A  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 15758  00BE5C  2211               	addwfc	??_moveHorizontally+1,f,c
 15759  00BE5E  0E02               	movlw	2
 15760  00BE60  1810               	xorwf	??_moveHorizontally,w,c
 15761  00BE62  1011               	iorwf	??_moveHorizontally+1,w,c
 15762  00BE64  A4D8               	btfss	status,2,c
 15763  00BE66  D00B               	goto	l267
 15764                           
 15765                           ;operationMode.c: 235: horizontalStepper(2, 0);
 15766  00BE68  0E00               	movlw	0
 15767  00BE6A  6E07               	movwf	horizontalStepper@rotations+1,c
 15768  00BE6C  0E02               	movlw	2
 15769  00BE6E  6E06               	movwf	horizontalStepper@rotations,c
 15770  00BE70  0E00               	movlw	0
 15771  00BE72  6E09               	movwf	horizontalStepper@direction+1,c
 15772  00BE74  0E00               	movlw	0
 15773  00BE76  6E08               	movwf	horizontalStepper@direction,c
 15774  00BE78  EC1B  F059         	call	_horizontalStepper	;wreg free
 15775                           
 15776                           ;operationMode.c: 236: }
 15777  00BE7C  0012               	return	
 15778  00BE7E                     l267:
 15779                           
 15780                           ;operationMode.c: 237: else if ((nextDrawer - currentDrawer) == 3){
 15781  00BE7E  C00C  F010         	movff	moveHorizontally@currentDrawer,??_moveHorizontally
 15782  00BE82  C00D  F011         	movff	moveHorizontally@currentDrawer+1,??_moveHorizontally+1
 15783  00BE86  1E10               	comf	??_moveHorizontally,f,c
 15784  00BE88  1E11               	comf	??_moveHorizontally+1,f,c
 15785  00BE8A  4A10               	infsnz	??_moveHorizontally,f,c
 15786  00BE8C  2A11               	incf	??_moveHorizontally+1,f,c
 15787  00BE8E  500E               	movf	moveHorizontally@nextDrawer,w,c
 15788  00BE90  2610               	addwf	??_moveHorizontally,f,c
 15789  00BE92  500F               	movf	moveHorizontally@nextDrawer+1,w,c
 15790  00BE94  2211               	addwfc	??_moveHorizontally+1,f,c
 15791  00BE96  0E03               	movlw	3
 15792  00BE98  1810               	xorwf	??_moveHorizontally,w,c
 15793  00BE9A  1011               	iorwf	??_moveHorizontally+1,w,c
 15794  00BE9C  A4D8               	btfss	status,2,c
 15795  00BE9E  0012               	return	
 15796                           
 15797                           ;operationMode.c: 238: horizontalStepper(3, 0);
 15798  00BEA0  0E00               	movlw	0
 15799  00BEA2  6E07               	movwf	horizontalStepper@rotations+1,c
 15800  00BEA4  0E03               	movlw	3
 15801  00BEA6  6E06               	movwf	horizontalStepper@rotations,c
 15802  00BEA8  0E00               	movlw	0
 15803  00BEAA  6E09               	movwf	horizontalStepper@direction+1,c
 15804  00BEAC  0E00               	movlw	0
 15805  00BEAE  6E08               	movwf	horizontalStepper@direction,c
 15806  00BEB0  EC1B  F059         	call	_horizontalStepper	;wreg free
 15807                           
 15808                           ;operationMode.c: 239: }
 15809                           ;operationMode.c: 240: }
 15810  00BEB4  0012               	return	
 15811  00BEB6                     l264:
 15812                           
 15813                           ;operationMode.c: 242: else if (currentDrawer > nextDrawer){
 15814  00BEB6  500C               	movf	moveHorizontally@currentDrawer,w,c
 15815  00BEB8  5C0E               	subwf	moveHorizontally@nextDrawer,w,c
 15816  00BEBA  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 15817  00BEBC  580F               	subwfb	moveHorizontally@nextDrawer+1,w,c
 15818  00BEBE  B0D8               	btfsc	status,0,c
 15819  00BEC0  0012               	return	
 15820                           
 15821                           ;operationMode.c: 243: if ((currentDrawer - nextDrawer) == 1){
 15822  00BEC2  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 15823  00BEC6  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 15824  00BECA  1E10               	comf	??_moveHorizontally,f,c
 15825  00BECC  1E11               	comf	??_moveHorizontally+1,f,c
 15826  00BECE  4A10               	infsnz	??_moveHorizontally,f,c
 15827  00BED0  2A11               	incf	??_moveHorizontally+1,f,c
 15828  00BED2  500C               	movf	moveHorizontally@currentDrawer,w,c
 15829  00BED4  2610               	addwf	??_moveHorizontally,f,c
 15830  00BED6  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 15831  00BED8  2211               	addwfc	??_moveHorizontally+1,f,c
 15832  00BEDA  0410               	decf	??_moveHorizontally,w,c
 15833  00BEDC  1011               	iorwf	??_moveHorizontally+1,w,c
 15834  00BEDE  A4D8               	btfss	status,2,c
 15835  00BEE0  D00B               	goto	l272
 15836                           
 15837                           ;operationMode.c: 244: horizontalStepper(1, 1);
 15838  00BEE2  0E00               	movlw	0
 15839  00BEE4  6E07               	movwf	horizontalStepper@rotations+1,c
 15840  00BEE6  0E01               	movlw	1
 15841  00BEE8  6E06               	movwf	horizontalStepper@rotations,c
 15842  00BEEA  0E00               	movlw	0
 15843  00BEEC  6E09               	movwf	horizontalStepper@direction+1,c
 15844  00BEEE  0E01               	movlw	1
 15845  00BEF0  6E08               	movwf	horizontalStepper@direction,c
 15846  00BEF2  EC1B  F059         	call	_horizontalStepper	;wreg free
 15847                           
 15848                           ;operationMode.c: 245: }
 15849  00BEF6  0012               	return	
 15850  00BEF8                     l272:
 15851                           
 15852                           ;operationMode.c: 246: else if ((currentDrawer - nextDrawer) == 2){
 15853  00BEF8  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 15854  00BEFC  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 15855  00BF00  1E10               	comf	??_moveHorizontally,f,c
 15856  00BF02  1E11               	comf	??_moveHorizontally+1,f,c
 15857  00BF04  4A10               	infsnz	??_moveHorizontally,f,c
 15858  00BF06  2A11               	incf	??_moveHorizontally+1,f,c
 15859  00BF08  500C               	movf	moveHorizontally@currentDrawer,w,c
 15860  00BF0A  2610               	addwf	??_moveHorizontally,f,c
 15861  00BF0C  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 15862  00BF0E  2211               	addwfc	??_moveHorizontally+1,f,c
 15863  00BF10  0E02               	movlw	2
 15864  00BF12  1810               	xorwf	??_moveHorizontally,w,c
 15865  00BF14  1011               	iorwf	??_moveHorizontally+1,w,c
 15866  00BF16  A4D8               	btfss	status,2,c
 15867  00BF18  D00B               	goto	l274
 15868                           
 15869                           ;operationMode.c: 247: horizontalStepper(2, 1);
 15870  00BF1A  0E00               	movlw	0
 15871  00BF1C  6E07               	movwf	horizontalStepper@rotations+1,c
 15872  00BF1E  0E02               	movlw	2
 15873  00BF20  6E06               	movwf	horizontalStepper@rotations,c
 15874  00BF22  0E00               	movlw	0
 15875  00BF24  6E09               	movwf	horizontalStepper@direction+1,c
 15876  00BF26  0E01               	movlw	1
 15877  00BF28  6E08               	movwf	horizontalStepper@direction,c
 15878  00BF2A  EC1B  F059         	call	_horizontalStepper	;wreg free
 15879                           
 15880                           ;operationMode.c: 248: }
 15881  00BF2E  0012               	return	
 15882  00BF30                     l274:
 15883                           
 15884                           ;operationMode.c: 249: else if ((currentDrawer - nextDrawer) == 3){
 15885  00BF30  C00E  F010         	movff	moveHorizontally@nextDrawer,??_moveHorizontally
 15886  00BF34  C00F  F011         	movff	moveHorizontally@nextDrawer+1,??_moveHorizontally+1
 15887  00BF38  1E10               	comf	??_moveHorizontally,f,c
 15888  00BF3A  1E11               	comf	??_moveHorizontally+1,f,c
 15889  00BF3C  4A10               	infsnz	??_moveHorizontally,f,c
 15890  00BF3E  2A11               	incf	??_moveHorizontally+1,f,c
 15891  00BF40  500C               	movf	moveHorizontally@currentDrawer,w,c
 15892  00BF42  2610               	addwf	??_moveHorizontally,f,c
 15893  00BF44  500D               	movf	moveHorizontally@currentDrawer+1,w,c
 15894  00BF46  2211               	addwfc	??_moveHorizontally+1,f,c
 15895  00BF48  0E03               	movlw	3
 15896  00BF4A  1810               	xorwf	??_moveHorizontally,w,c
 15897  00BF4C  1011               	iorwf	??_moveHorizontally+1,w,c
 15898  00BF4E  A4D8               	btfss	status,2,c
 15899  00BF50  0012               	return	
 15900                           
 15901                           ;operationMode.c: 250: horizontalStepper(3, 1);
 15902  00BF52  0E00               	movlw	0
 15903  00BF54  6E07               	movwf	horizontalStepper@rotations+1,c
 15904  00BF56  0E03               	movlw	3
 15905  00BF58  6E06               	movwf	horizontalStepper@rotations,c
 15906  00BF5A  0E00               	movlw	0
 15907  00BF5C  6E09               	movwf	horizontalStepper@direction+1,c
 15908  00BF5E  0E01               	movlw	1
 15909  00BF60  6E08               	movwf	horizontalStepper@direction,c
 15910  00BF62  EC1B  F059         	call	_horizontalStepper	;wreg free
 15911  00BF66  0012               	return	
 15912  00BF68                     __end_of_moveHorizontally:
 15913                           	opt stack 0
 15914                           tblptru	equ	0xFF8
 15915                           tblptrh	equ	0xFF7
 15916                           tblptrl	equ	0xFF6
 15917                           tablat	equ	0xFF5
 15918                           prodh	equ	0xFF4
 15919                           prodl	equ	0xFF3
 15920                           postinc0	equ	0xFEE
 15921                           wreg	equ	0xFE8
 15922                           postinc1	equ	0xFE6
 15923                           postdec1	equ	0xFE5
 15924                           plusw1	equ	0xFE3
 15925                           fsr1h	equ	0xFE2
 15926                           fsr1l	equ	0xFE1
 15927                           indf2	equ	0xFDF
 15928                           postinc2	equ	0xFDE
 15929                           postdec2	equ	0xFDD
 15930                           plusw2	equ	0xFDB
 15931                           fsr2h	equ	0xFDA
 15932                           fsr2l	equ	0xFD9
 15933                           status	equ	0xFD8
 15934                           
 15935 ;; *************** function _horizontalStepper *****************
 15936 ;; Defined at:
 15937 ;;		line 165 in file "operationMode.c"
 15938 ;; Parameters:    Size  Location     Type
 15939 ;;  rotations       2    5[COMRAM] unsigned int 
 15940 ;;  direction       2    7[COMRAM] unsigned int 
 15941 ;; Auto vars:     Size  Location     Type
 15942 ;;  i               2    9[COMRAM] unsigned int 
 15943 ;; Return value:  Size  Location     Type
 15944 ;;                  1    wreg      void 
 15945 ;; Registers used:
 15946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15947 ;; Tracked objects:
 15948 ;;		On entry : 0/0
 15949 ;;		On exit  : 0/0
 15950 ;;		Unchanged: 0/0
 15951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15955 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15956 ;;Total ram usage:        6 bytes
 15957 ;; Hardware stack levels used:    1
 15958 ;; Hardware stack levels required when called:    1
 15959 ;; This function calls:
 15960 ;;		_uartTransmitBlocking
 15961 ;; This function is called by:
 15962 ;;		_moveHorizontally
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           	psect	text34
 15967  00B236                     __ptext34:
 15968                           	opt stack 0
 15969  00B236                     _horizontalStepper:
 15970                           	opt stack 27
 15971                           
 15972                           ;operationMode.c: 168: unsigned int i = 0;
 15973                           
 15974                           ;incstack = 0
 15975  00B236  0E00               	movlw	0
 15976  00B238  6E0B               	movwf	horizontalStepper@i+1,c
 15977  00B23A  0E00               	movlw	0
 15978  00B23C  6E0A               	movwf	horizontalStepper@i,c
 15979                           
 15980                           ;operationMode.c: 171: if (direction == 1){
 15981  00B23E  0408               	decf	horizontalStepper@direction,w,c
 15982  00B240  1009               	iorwf	horizontalStepper@direction+1,w,c
 15983  00B242  A4D8               	btfss	status,2,c
 15984  00B244  D016               	goto	l214
 15985                           
 15986                           ;operationMode.c: 172: for (i=0; i<rotations; i++){
 15987  00B246  0E00               	movlw	0
 15988  00B248  6E0B               	movwf	horizontalStepper@i+1,c
 15989  00B24A  0E00               	movlw	0
 15990  00B24C  6E0A               	movwf	horizontalStepper@i,c
 15991  00B24E  D00A               	goto	l215
 15992  00B250                     
 15993                           ;operationMode.c: 173: uartTransmitBlocking(columnLeft, 1);
 15994  00B250  0E79               	movlw	low _columnLeft
 15995  00B252  6E01               	movwf	uartTransmitBlocking@data,c
 15996  00B254  0E00               	movlw	high _columnLeft
 15997  00B256  6E02               	movwf	uartTransmitBlocking@data+1,c
 15998  00B258  0E01               	movlw	1
 15999  00B25A  6E03               	movwf	uartTransmitBlocking@numBytes,c
 16000  00B25C  EC88  F05A         	call	_uartTransmitBlocking	;wreg free
 16001  00B260  4A0A               	infsnz	horizontalStepper@i,f,c
 16002  00B262  2A0B               	incf	horizontalStepper@i+1,f,c
 16003  00B264                     l215:
 16004  00B264  5006               	movf	horizontalStepper@rotations,w,c
 16005  00B266  5C0A               	subwf	horizontalStepper@i,w,c
 16006  00B268  5007               	movf	horizontalStepper@rotations+1,w,c
 16007  00B26A  580B               	subwfb	horizontalStepper@i+1,w,c
 16008  00B26C  B0D8               	btfsc	status,0,c
 16009  00B26E  0012               	return	
 16010  00B270  D7EF               	goto	l216
 16011  00B272                     l214:
 16012                           
 16013                           ;operationMode.c: 177: else if (direction == 0){
 16014  00B272  5008               	movf	horizontalStepper@direction,w,c
 16015  00B274  1009               	iorwf	horizontalStepper@direction+1,w,c
 16016  00B276  A4D8               	btfss	status,2,c
 16017  00B278  0012               	return	
 16018                           
 16019                           ;operationMode.c: 178: for (i=0; i<rotations; i++){
 16020  00B27A  0E00               	movlw	0
 16021  00B27C  6E0B               	movwf	horizontalStepper@i+1,c
 16022  00B27E  0E00               	movlw	0
 16023  00B280  6E0A               	movwf	horizontalStepper@i,c
 16024  00B282  D00A               	goto	l220
 16025  00B284                     
 16026                           ;operationMode.c: 179: uartTransmitBlocking(columnRight, 1);
 16027  00B284  0E78               	movlw	low _columnRight
 16028  00B286  6E01               	movwf	uartTransmitBlocking@data,c
 16029  00B288  0E00               	movlw	high _columnRight
 16030  00B28A  6E02               	movwf	uartTransmitBlocking@data+1,c
 16031  00B28C  0E01               	movlw	1
 16032  00B28E  6E03               	movwf	uartTransmitBlocking@numBytes,c
 16033  00B290  EC88  F05A         	call	_uartTransmitBlocking	;wreg free
 16034  00B294  4A0A               	infsnz	horizontalStepper@i,f,c
 16035  00B296  2A0B               	incf	horizontalStepper@i+1,f,c
 16036  00B298                     l220:
 16037  00B298  5006               	movf	horizontalStepper@rotations,w,c
 16038  00B29A  5C0A               	subwf	horizontalStepper@i,w,c
 16039  00B29C  5007               	movf	horizontalStepper@rotations+1,w,c
 16040  00B29E  580B               	subwfb	horizontalStepper@i+1,w,c
 16041  00B2A0  B0D8               	btfsc	status,0,c
 16042  00B2A2  0012               	return	
 16043  00B2A4  D7EF               	goto	l221
 16044  00B2A6                     __end_of_horizontalStepper:
 16045                           	opt stack 0
 16046                           tblptru	equ	0xFF8
 16047                           tblptrh	equ	0xFF7
 16048                           tblptrl	equ	0xFF6
 16049                           tablat	equ	0xFF5
 16050                           prodh	equ	0xFF4
 16051                           prodl	equ	0xFF3
 16052                           postinc0	equ	0xFEE
 16053                           wreg	equ	0xFE8
 16054                           postinc1	equ	0xFE6
 16055                           postdec1	equ	0xFE5
 16056                           plusw1	equ	0xFE3
 16057                           fsr1h	equ	0xFE2
 16058                           fsr1l	equ	0xFE1
 16059                           indf2	equ	0xFDF
 16060                           postinc2	equ	0xFDE
 16061                           postdec2	equ	0xFDD
 16062                           plusw2	equ	0xFDB
 16063                           fsr2h	equ	0xFDA
 16064                           fsr2l	equ	0xFD9
 16065                           status	equ	0xFD8
 16066                           
 16067 ;; *************** function _uartTransmitBlocking *****************
 16068 ;; Defined at:
 16069 ;;		line 19 in file "UART_PIC.c"
 16070 ;; Parameters:    Size  Location     Type
 16071 ;;  data            2    0[COMRAM] PTR unsigned char 
 16072 ;;		 -> columnRight(1), columnLeft(1), rowDown(1), rowUp(1), 
 16073 ;;  numBytes        1    2[COMRAM] unsigned char 
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;  numTransmits    1    4[COMRAM] unsigned char 
 16076 ;; Return value:  Size  Location     Type
 16077 ;;                  1    wreg      void 
 16078 ;; Registers used:
 16079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16080 ;; Tracked objects:
 16081 ;;		On entry : 0/0
 16082 ;;		On exit  : 0/0
 16083 ;;		Unchanged: 0/0
 16084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16085 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16088 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;Total ram usage:        5 bytes
 16090 ;; Hardware stack levels used:    1
 16091 ;; This function calls:
 16092 ;;		Nothing
 16093 ;; This function is called by:
 16094 ;;		_verticalStepper
 16095 ;;		_horizontalStepper
 16096 ;; This function uses a non-reentrant model
 16097 ;;
 16098                           
 16099                           	psect	text35
 16100  00B510                     __ptext35:
 16101                           	opt stack 0
 16102  00B510                     _uartTransmitBlocking:
 16103                           	opt stack 27
 16104                           
 16105                           ;UART_PIC.c: 33: while(UART -> _stateTX == UART_STATE_BUSY){ continue; }
 16106                           
 16107                           ;incstack = 0
 16108  00B510  EE20 F008          	lfsr	2,8
 16109  00B514  5076               	movf	_UART,w,c
 16110  00B516  26D9               	addwf	fsr2l,f,c
 16111  00B518  5077               	movf	_UART+1,w,c
 16112  00B51A  22DA               	addwfc	fsr2h,f,c
 16113  00B51C  50DF               	movf	indf2,w,c
 16114  00B51E  B4D8               	btfsc	status,2,c
 16115  00B520  D7F7               	goto	_uartTransmitBlocking
 16116                           
 16117                           ;UART_PIC.c: 36: UART -> _stateTX = UART_STATE_BUSY;
 16118  00B522  EE20 F008          	lfsr	2,8
 16119  00B526  5076               	movf	_UART,w,c
 16120  00B528  26D9               	addwf	fsr2l,f,c
 16121  00B52A  5077               	movf	_UART+1,w,c
 16122  00B52C  22DA               	addwfc	fsr2h,f,c
 16123  00B52E  0E00               	movlw	0
 16124  00B530  6EDF               	movwf	indf2,c
 16125                           
 16126                           ;UART_PIC.c: 39: unsigned char numTransmits = 0;
 16127  00B532  0E00               	movlw	0
 16128  00B534  6E05               	movwf	uartTransmitBlocking@numTransmits,c
 16129                           
 16130                           ;UART_PIC.c: 42: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(40000000/4000.0)));;
 16131  00B536  8AAC               	bsf	4012,5,c	;volatile
 16132  00B538  0E41               	movlw	65
 16133  00B53A  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 16134  00B53C  0EEE               	movlw	238
 16135  00B53E                     u12177:
 16136  00B53E  2EE8               	decfsz	wreg,f,c
 16137  00B540  D7FE               	bra	u12177
 16138  00B542  2E04               	decfsz	??_uartTransmitBlocking& (0+255),f,c
 16139  00B544  D7FC               	bra	u12177
 16140  00B546  D000               	nop2	
 16141                           
 16142                           ;UART_PIC.c: 45: while(numTransmits < numBytes){
 16143  00B548  D023               	goto	l1168
 16144  00B54A                     l5924:
 16145  00B54A  B2AC               	btfsc	4012,1,c	;volatile
 16146  00B54C  D002               	goto	u6080
 16147  00B54E  0E01               	movlw	1
 16148  00B550  D001               	goto	u6082
 16149  00B552                     u6080:
 16150  00B552  0E00               	movlw	0
 16151  00B554                     u6082:
 16152  00B554  6E04               	movwf	??_uartTransmitBlocking& (0+255),c
 16153  00B556  B89E               	btfsc	3998,4,c	;volatile
 16154  00B558  D002               	goto	u6090
 16155  00B55A  0E01               	movlw	1
 16156  00B55C  D001               	goto	u6092
 16157  00B55E                     u6090:
 16158  00B55E  0E00               	movlw	0
 16159  00B560                     u6092:
 16160  00B560  1004               	iorwf	??_uartTransmitBlocking,w,c
 16161  00B562  E1F3               	bnz	l5924
 16162                           
 16163                           ;UART_PIC.c: 50: __nop();
 16164  00B564  F000               	nop	
 16165                           
 16166                           ;UART_PIC.c: 53: UARTinterruptState = INTCONbits.GIE;
 16167  00B566  0E00               	movlw	0
 16168  00B568  BEF2               	btfsc	intcon,7,c	;volatile
 16169  00B56A  0E01               	movlw	1
 16170  00B56C  6E75               	movwf	_UARTinterruptState,c	;volatile
 16171                           
 16172                           ;UART_PIC.c: 54: (INTCONbits.GIE = 0);
 16173  00B56E  9EF2               	bcf	intcon,7,c	;volatile
 16174                           
 16175                           ;UART_PIC.c: 55: TXREG = data[numTransmits];
 16176  00B570  5005               	movf	uartTransmitBlocking@numTransmits,w,c
 16177  00B572  0D01               	mullw	1
 16178  00B574  50F3               	movf	prodl,w,c
 16179  00B576  2401               	addwf	uartTransmitBlocking@data,w,c
 16180  00B578  6ED9               	movwf	fsr2l,c
 16181  00B57A  50F4               	movf	prodh,w,c
 16182  00B57C  2002               	addwfc	uartTransmitBlocking@data+1,w,c
 16183  00B57E  6EDA               	movwf	fsr2h,c
 16184  00B580  50DF               	movf	indf2,w,c
 16185  00B582  6EAD               	movwf	4013,c	;volatile
 16186                           
 16187                           ;UART_PIC.c: 56: INTCONbits.GIE = UARTinterruptState;
 16188  00B584  B075               	btfsc	_UARTinterruptState,0,c	;volatile
 16189  00B586  D002               	bra	u6105
 16190  00B588  9EF2               	bcf	intcon,7,c	;volatile
 16191  00B58A  D001               	bra	u6106
 16192  00B58C                     u6105:
 16193  00B58C  8EF2               	bsf	intcon,7,c	;volatile
 16194  00B58E                     u6106:
 16195                           
 16196                           ;UART_PIC.c: 58: numTransmits++;
 16197  00B58E  2A05               	incf	uartTransmitBlocking@numTransmits,f,c
 16198  00B590                     l1168:
 16199  00B590  5003               	movf	uartTransmitBlocking@numBytes,w,c
 16200  00B592  5C05               	subwf	uartTransmitBlocking@numTransmits,w,c
 16201  00B594  A0D8               	btfss	status,0,c
 16202  00B596  D7D9               	goto	l1169
 16203                           
 16204                           ;UART_PIC.c: 62: }
 16205                           ;UART_PIC.c: 65: UART -> _stateTX = UART_STATE_READY;
 16206  00B598  EE20 F008          	lfsr	2,8
 16207  00B59C  5076               	movf	_UART,w,c
 16208  00B59E  26D9               	addwf	fsr2l,f,c
 16209  00B5A0  5077               	movf	_UART+1,w,c
 16210  00B5A2  22DA               	addwfc	fsr2h,f,c
 16211  00B5A4  0E01               	movlw	1
 16212  00B5A6  6EDF               	movwf	indf2,c
 16213  00B5A8  0012               	return		;funcret
 16214  00B5AA                     __end_of_uartTransmitBlocking:
 16215                           	opt stack 0
 16216                           tblptru	equ	0xFF8
 16217                           tblptrh	equ	0xFF7
 16218                           tblptrl	equ	0xFF6
 16219                           tablat	equ	0xFF5
 16220                           prodh	equ	0xFF4
 16221                           prodl	equ	0xFF3
 16222                           intcon	equ	0xFF2
 16223                           postinc0	equ	0xFEE
 16224                           wreg	equ	0xFE8
 16225                           postinc1	equ	0xFE6
 16226                           postdec1	equ	0xFE5
 16227                           plusw1	equ	0xFE3
 16228                           fsr1h	equ	0xFE2
 16229                           fsr1l	equ	0xFE1
 16230                           indf2	equ	0xFDF
 16231                           postinc2	equ	0xFDE
 16232                           postdec2	equ	0xFDD
 16233                           plusw2	equ	0xFDB
 16234                           fsr2h	equ	0xFDA
 16235                           fsr2l	equ	0xFD9
 16236                           status	equ	0xFD8
 16237                           
 16238 ;; *************** function _getUserInputs *****************
 16239 ;; Defined at:
 16240 ;;		line 23 in file "operationMode.c"
 16241 ;; Parameters:    Size  Location     Type
 16242 ;;  drawerTable     2    6[COMRAM] PTR unsigned int 
 16243 ;;		 -> mainOperation@drawerTable(16), 
 16244 ;;  dietTable       2    8[COMRAM] PTR unsigned int 
 16245 ;;		 -> mainOperation@dietTable(16), 
 16246 ;;  foodTable       2   10[COMRAM] PTR unsigned int 
 16247 ;;		 -> mainOperation@foodTable(16), 
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;  i               2   22[COMRAM] unsigned int 
 16250 ;;  data            2   20[COMRAM] unsigned int 
 16251 ;;  n               2   18[COMRAM] unsigned int 
 16252 ;;  count           2   16[COMRAM] unsigned int 
 16253 ;;  logNumber       2   14[COMRAM] unsigned int 
 16254 ;; Return value:  Size  Location     Type
 16255 ;;                  1    wreg      void 
 16256 ;; Registers used:
 16257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16258 ;; Tracked objects:
 16259 ;;		On entry : 0/0
 16260 ;;		On exit  : 0/0
 16261 ;;		Unchanged: 0/0
 16262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16263 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16264 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16266 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16267 ;;Total ram usage:       18 bytes
 16268 ;; Hardware stack levels used:    1
 16269 ;; Hardware stack levels required when called:    1
 16270 ;; This function calls:
 16271 ;;		___wmul
 16272 ;;		_readEEPROM
 16273 ;; This function is called by:
 16274 ;;		_mainOperation
 16275 ;; This function uses a non-reentrant model
 16276 ;;
 16277                           
 16278                           	psect	text36
 16279  00BAA4                     __ptext36:
 16280                           	opt stack 0
 16281  00BAA4                     _getUserInputs:
 16282                           	opt stack 28
 16283                           
 16284                           ;operationMode.c: 24: unsigned int data = 0;
 16285                           
 16286                           ;incstack = 0
 16287  00BAA4  0E00               	movlw	0
 16288  00BAA6  6E16               	movwf	getUserInputs@data+1,c
 16289  00BAA8  0E00               	movlw	0
 16290  00BAAA  6E15               	movwf	getUserInputs@data,c
 16291                           
 16292                           ;operationMode.c: 25: unsigned int i = 0;
 16293  00BAAC  0E00               	movlw	0
 16294  00BAAE  6E18               	movwf	getUserInputs@i+1,c
 16295  00BAB0  0E00               	movlw	0
 16296  00BAB2  6E17               	movwf	getUserInputs@i,c
 16297                           
 16298                           ;operationMode.c: 26: unsigned int logNumber = 0;
 16299  00BAB4  0E00               	movlw	0
 16300  00BAB6  6E10               	movwf	getUserInputs@logNumber+1,c
 16301  00BAB8  0E00               	movlw	0
 16302  00BABA  6E0F               	movwf	getUserInputs@logNumber,c
 16303                           
 16304                           ;operationMode.c: 27: unsigned int n = 0;
 16305  00BABC  0E00               	movlw	0
 16306  00BABE  6E14               	movwf	getUserInputs@n+1,c
 16307  00BAC0  0E00               	movlw	0
 16308  00BAC2  6E13               	movwf	getUserInputs@n,c
 16309                           
 16310                           ;operationMode.c: 28: unsigned int count = 0;
 16311  00BAC4  0E00               	movlw	0
 16312  00BAC6  6E12               	movwf	getUserInputs@count+1,c
 16313  00BAC8  0E00               	movlw	0
 16314  00BACA  6E11               	movwf	getUserInputs@count,c
 16315                           
 16316                           ;operationMode.c: 30: logNumber = readEEPROM(250);
 16317  00BACC  0EFA               	movlw	250
 16318  00BACE  ECC5  F057         	call	_readEEPROM
 16319  00BAD2  6E0D               	movwf	??_getUserInputs& (0+255),c
 16320  00BAD4  500D               	movf	??_getUserInputs,w,c
 16321  00BAD6  6E0F               	movwf	getUserInputs@logNumber,c
 16322  00BAD8  6A10               	clrf	getUserInputs@logNumber+1,c
 16323                           
 16324                           ;operationMode.c: 32: if (logNumber == 0 || logNumber == 4){
 16325  00BADA  500F               	movf	getUserInputs@logNumber,w,c
 16326  00BADC  1010               	iorwf	getUserInputs@logNumber+1,w,c
 16327  00BADE  B4D8               	btfsc	status,2,c
 16328  00BAE0  D005               	goto	u7620
 16329  00BAE2  0E04               	movlw	4
 16330  00BAE4  180F               	xorwf	getUserInputs@logNumber,w,c
 16331  00BAE6  1010               	iorwf	getUserInputs@logNumber+1,w,c
 16332  00BAE8  A4D8               	btfss	status,2,c
 16333  00BAEA  D005               	goto	l123
 16334  00BAEC                     u7620:
 16335                           
 16336                           ;operationMode.c: 33: n = 0;
 16337  00BAEC  0E00               	movlw	0
 16338  00BAEE  6E14               	movwf	getUserInputs@n+1,c
 16339  00BAF0  0E00               	movlw	0
 16340  00BAF2  6E13               	movwf	getUserInputs@n,c
 16341                           
 16342                           ;operationMode.c: 34: }
 16343  00BAF4  D00E               	goto	l126
 16344  00BAF6                     l123:
 16345                           
 16346                           ;operationMode.c: 35: else{
 16347                           ;operationMode.c: 36: n = (logNumber)*35;
 16348  00BAF6  C00F  F001         	movff	getUserInputs@logNumber,___wmul@multiplier
 16349  00BAFA  C010  F002         	movff	getUserInputs@logNumber+1,___wmul@multiplier+1
 16350  00BAFE  0E00               	movlw	0
 16351  00BB00  6E04               	movwf	___wmul@multiplicand+1,c
 16352  00BB02  0E23               	movlw	35
 16353  00BB04  6E03               	movwf	___wmul@multiplicand,c
 16354  00BB06  EC0D  F058         	call	___wmul	;wreg free
 16355  00BB0A  C001  F013         	movff	?___wmul,getUserInputs@n
 16356  00BB0E  C002  F014         	movff	?___wmul+1,getUserInputs@n+1
 16357  00BB12                     l126:
 16358                           
 16359                           ;operationMode.c: 37: }
 16360                           ;operationMode.c: 39: for (i=11; i<35; i+=3){
 16361  00BB12  0E00               	movlw	0
 16362  00BB14  6E18               	movwf	getUserInputs@i+1,c
 16363  00BB16  0E0B               	movlw	11
 16364  00BB18  6E17               	movwf	getUserInputs@i,c
 16365  00BB1A                     l6622:
 16366  00BB1A  5018               	movf	getUserInputs@i+1,w,c
 16367  00BB1C  E14D               	bnz	l129
 16368  00BB1E  0E23               	movlw	35
 16369  00BB20  5C17               	subwf	getUserInputs@i,w,c
 16370  00BB22  B0D8               	btfsc	status,0,c
 16371  00BB24  0012               	return	
 16372                           
 16373                           ;operationMode.c: 40: data = readEEPROM(i+n);
 16374  00BB26  5017               	movf	getUserInputs@i,w,c
 16375  00BB28  2413               	addwf	getUserInputs@n,w,c
 16376  00BB2A  ECC5  F057         	call	_readEEPROM
 16377  00BB2E  6E0D               	movwf	??_getUserInputs& (0+255),c
 16378  00BB30  500D               	movf	??_getUserInputs,w,c
 16379  00BB32  6E15               	movwf	getUserInputs@data,c
 16380  00BB34  6A16               	clrf	getUserInputs@data+1,c
 16381                           
 16382                           ;operationMode.c: 41: drawerTable[count] = data;
 16383  00BB36  90D8               	bcf	status,0,c
 16384  00BB38  3411               	rlcf	getUserInputs@count,w,c
 16385  00BB3A  6ED9               	movwf	fsr2l,c
 16386  00BB3C  3412               	rlcf	getUserInputs@count+1,w,c
 16387  00BB3E  6EDA               	movwf	fsr2h,c
 16388  00BB40  5007               	movf	getUserInputs@drawerTable,w,c
 16389  00BB42  26D9               	addwf	fsr2l,f,c
 16390  00BB44  5008               	movf	getUserInputs@drawerTable+1,w,c
 16391  00BB46  22DA               	addwfc	fsr2h,f,c
 16392  00BB48  C015  FFDE         	movff	getUserInputs@data,postinc2
 16393  00BB4C  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16394                           
 16395                           ;operationMode.c: 42: data = readEEPROM(i+1+n);
 16396  00BB50  5017               	movf	getUserInputs@i,w,c
 16397  00BB52  2413               	addwf	getUserInputs@n,w,c
 16398  00BB54  6E0D               	movwf	??_getUserInputs& (0+255),c
 16399  00BB56  280D               	incf	??_getUserInputs,w,c
 16400  00BB58  ECC5  F057         	call	_readEEPROM
 16401  00BB5C  6E0E               	movwf	(??_getUserInputs+1)& (0+255),c
 16402  00BB5E  500E               	movf	??_getUserInputs+1,w,c
 16403  00BB60  6E15               	movwf	getUserInputs@data,c
 16404  00BB62  6A16               	clrf	getUserInputs@data+1,c
 16405                           
 16406                           ;operationMode.c: 43: dietTable[count] = data;
 16407  00BB64  90D8               	bcf	status,0,c
 16408  00BB66  3411               	rlcf	getUserInputs@count,w,c
 16409  00BB68  6ED9               	movwf	fsr2l,c
 16410  00BB6A  3412               	rlcf	getUserInputs@count+1,w,c
 16411  00BB6C  6EDA               	movwf	fsr2h,c
 16412  00BB6E  5009               	movf	getUserInputs@dietTable,w,c
 16413  00BB70  26D9               	addwf	fsr2l,f,c
 16414  00BB72  500A               	movf	getUserInputs@dietTable+1,w,c
 16415  00BB74  22DA               	addwfc	fsr2h,f,c
 16416  00BB76  C015  FFDE         	movff	getUserInputs@data,postinc2
 16417  00BB7A  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16418                           
 16419                           ;operationMode.c: 44: data = readEEPROM(i+2+n);
 16420  00BB7E  5017               	movf	getUserInputs@i,w,c
 16421  00BB80  2413               	addwf	getUserInputs@n,w,c
 16422  00BB82  0F02               	addlw	2
 16423  00BB84  ECC5  F057         	call	_readEEPROM
 16424  00BB88  6E0D               	movwf	??_getUserInputs& (0+255),c
 16425  00BB8A  500D               	movf	??_getUserInputs,w,c
 16426  00BB8C  6E15               	movwf	getUserInputs@data,c
 16427  00BB8E  6A16               	clrf	getUserInputs@data+1,c
 16428                           
 16429                           ;operationMode.c: 45: foodTable[count] = data;
 16430  00BB90  90D8               	bcf	status,0,c
 16431  00BB92  3411               	rlcf	getUserInputs@count,w,c
 16432  00BB94  6ED9               	movwf	fsr2l,c
 16433  00BB96  3412               	rlcf	getUserInputs@count+1,w,c
 16434  00BB98  6EDA               	movwf	fsr2h,c
 16435  00BB9A  500B               	movf	getUserInputs@foodTable,w,c
 16436  00BB9C  26D9               	addwf	fsr2l,f,c
 16437  00BB9E  500C               	movf	getUserInputs@foodTable+1,w,c
 16438  00BBA0  22DA               	addwfc	fsr2h,f,c
 16439  00BBA2  C015  FFDE         	movff	getUserInputs@data,postinc2
 16440  00BBA6  C016  FFDD         	movff	getUserInputs@data+1,postdec2
 16441                           
 16442                           ;operationMode.c: 46: count += 1;
 16443  00BBAA  4A11               	infsnz	getUserInputs@count,f,c
 16444  00BBAC  2A12               	incf	getUserInputs@count+1,f,c
 16445  00BBAE  0E03               	movlw	3
 16446  00BBB0  2617               	addwf	getUserInputs@i,f,c
 16447  00BBB2  0E00               	movlw	0
 16448  00BBB4  2218               	addwfc	getUserInputs@i+1,f,c
 16449  00BBB6  D7B1               	goto	l6622
 16450  00BBB8                     l129:
 16451  00BBB8  0012               	return		;funcret
 16452  00BBBA                     __end_of_getUserInputs:
 16453                           	opt stack 0
 16454                           tblptru	equ	0xFF8
 16455                           tblptrh	equ	0xFF7
 16456                           tblptrl	equ	0xFF6
 16457                           tablat	equ	0xFF5
 16458                           prodh	equ	0xFF4
 16459                           prodl	equ	0xFF3
 16460                           intcon	equ	0xFF2
 16461                           postinc0	equ	0xFEE
 16462                           wreg	equ	0xFE8
 16463                           postinc1	equ	0xFE6
 16464                           postdec1	equ	0xFE5
 16465                           plusw1	equ	0xFE3
 16466                           fsr1h	equ	0xFE2
 16467                           fsr1l	equ	0xFE1
 16468                           indf2	equ	0xFDF
 16469                           postinc2	equ	0xFDE
 16470                           postdec2	equ	0xFDD
 16471                           plusw2	equ	0xFDB
 16472                           fsr2h	equ	0xFDA
 16473                           fsr2l	equ	0xFD9
 16474                           status	equ	0xFD8
 16475                           
 16476 ;; *************** function _readEEPROM *****************
 16477 ;; Defined at:
 16478 ;;		line 29 in file "EEPROMstorage.c"
 16479 ;; Parameters:    Size  Location     Type
 16480 ;;  address         1    wreg     unsigned char 
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;  address         1    0[COMRAM] unsigned char 
 16483 ;; Return value:  Size  Location     Type
 16484 ;;                  1    wreg      unsigned char 
 16485 ;; Registers used:
 16486 ;;		wreg, status,2
 16487 ;; Tracked objects:
 16488 ;;		On entry : 0/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16495 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16496 ;;Total ram usage:        1 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; This function calls:
 16499 ;;		Nothing
 16500 ;; This function is called by:
 16501 ;;		_main
 16502 ;;		_getUserInputs
 16503 ;;		_viewLogs
 16504 ;;		_displayLogs
 16505 ;;		_standbyMode
 16506 ;;		_shiftEEPROM
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510                           	psect	text37
 16511  00AF8A                     __ptext37:
 16512                           	opt stack 0
 16513  00AF8A                     _readEEPROM:
 16514                           	opt stack 28
 16515                           
 16516                           ;incstack = 0
 16517                           ;readEEPROM@address stored from wreg
 16518  00AF8A  6E01               	movwf	readEEPROM@address,c
 16519  00AF8C                     
 16520                           ;EEPROMstorage.c: 30: while( EECON1bits.WR ){continue;}
 16521  00AF8C  B2A6               	btfsc	4006,1,c	;volsfr
 16522  00AF8E  D7FE               	goto	l5898
 16523                           
 16524                           ;EEPROMstorage.c: 32: EEADR = address;
 16525  00AF90  C001  FFA9         	movff	readEEPROM@address,4009	;volatile
 16526                           
 16527                           ;EEPROMstorage.c: 33: EECON1bits.EEPGD = 0;
 16528  00AF94  9EA6               	bcf	4006,7,c	;volsfr
 16529                           
 16530                           ;EEPROMstorage.c: 34: EECON1bits.CFGS = 0;
 16531  00AF96  9CA6               	bcf	4006,6,c	;volsfr
 16532                           
 16533                           ;EEPROMstorage.c: 35: EECON1bits.RD = 1;
 16534  00AF98  80A6               	bsf	4006,0,c	;volsfr
 16535                           
 16536                           ;EEPROMstorage.c: 36: return( EEDATA );
 16537  00AF9A  50A8               	movf	4008,w,c	;volatile
 16538  00AF9C  0012               	return	
 16539  00AF9E                     __end_of_readEEPROM:
 16540                           	opt stack 0
 16541                           tblptru	equ	0xFF8
 16542                           tblptrh	equ	0xFF7
 16543                           tblptrl	equ	0xFF6
 16544                           tablat	equ	0xFF5
 16545                           prodh	equ	0xFF4
 16546                           prodl	equ	0xFF3
 16547                           intcon	equ	0xFF2
 16548                           postinc0	equ	0xFEE
 16549                           wreg	equ	0xFE8
 16550                           postinc1	equ	0xFE6
 16551                           postdec1	equ	0xFE5
 16552                           plusw1	equ	0xFE3
 16553                           fsr1h	equ	0xFE2
 16554                           fsr1l	equ	0xFE1
 16555                           indf2	equ	0xFDF
 16556                           postinc2	equ	0xFDE
 16557                           postdec2	equ	0xFDD
 16558                           plusw2	equ	0xFDB
 16559                           fsr2h	equ	0xFDA
 16560                           fsr2l	equ	0xFD9
 16561                           status	equ	0xFD8
 16562                           
 16563 ;; *************** function ___wmul *****************
 16564 ;; Defined at:
 16565 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;  multiplier      2    0[COMRAM] unsigned int 
 16568 ;;  multiplicand    2    2[COMRAM] unsigned int 
 16569 ;; Auto vars:     Size  Location     Type
 16570 ;;  product         2    4[COMRAM] unsigned int 
 16571 ;; Return value:  Size  Location     Type
 16572 ;;                  2    0[COMRAM] unsigned int 
 16573 ;; Registers used:
 16574 ;;		wreg, status,2, status,0, prodl, prodh
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16580 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16583 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16584 ;;Total ram usage:        6 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; This function calls:
 16587 ;;		Nothing
 16588 ;; This function is called by:
 16589 ;;		_getUserInputs
 16590 ;;		_displayLogs
 16591 ;;		_standbyMode
 16592 ;;		_printf
 16593 ;;		_tock
 16594 ;; This function uses a non-reentrant model
 16595 ;;
 16596                           
 16597                           	psect	text38
 16598  00B01A                     __ptext38:
 16599                           	opt stack 0
 16600  00B01A                     ___wmul:
 16601                           	opt stack 27
 16602                           
 16603                           ;incstack = 0
 16604  00B01A  5001               	movf	___wmul@multiplier,w,c
 16605  00B01C  0203               	mulwf	___wmul@multiplicand,c
 16606  00B01E  CFF3 F005          	movff	prodl,___wmul@product
 16607  00B022  CFF4 F006          	movff	prodh,___wmul@product+1
 16608  00B026  5001               	movf	___wmul@multiplier,w,c
 16609  00B028  0204               	mulwf	___wmul@multiplicand+1,c
 16610  00B02A  50F3               	movf	prodl,w,c
 16611  00B02C  2606               	addwf	___wmul@product+1,f,c
 16612  00B02E  5002               	movf	___wmul@multiplier+1,w,c
 16613  00B030  0203               	mulwf	___wmul@multiplicand,c
 16614  00B032  50F3               	movf	prodl,w,c
 16615  00B034  2606               	addwf	___wmul@product+1,f,c
 16616  00B036  C005  F001         	movff	___wmul@product,?___wmul
 16617  00B03A  C006  F002         	movff	___wmul@product+1,?___wmul+1
 16618  00B03E  0012               	return	
 16619  00B040                     __end_of___wmul:
 16620                           	opt stack 0
 16621                           tblptru	equ	0xFF8
 16622                           tblptrh	equ	0xFF7
 16623                           tblptrl	equ	0xFF6
 16624                           tablat	equ	0xFF5
 16625                           prodh	equ	0xFF4
 16626                           prodl	equ	0xFF3
 16627                           intcon	equ	0xFF2
 16628                           postinc0	equ	0xFEE
 16629                           wreg	equ	0xFE8
 16630                           postinc1	equ	0xFE6
 16631                           postdec1	equ	0xFE5
 16632                           plusw1	equ	0xFE3
 16633                           fsr1h	equ	0xFE2
 16634                           fsr1l	equ	0xFE1
 16635                           indf2	equ	0xFDF
 16636                           postinc2	equ	0xFDE
 16637                           postdec2	equ	0xFDD
 16638                           plusw2	equ	0xFDB
 16639                           fsr2h	equ	0xFDA
 16640                           fsr2l	equ	0xFD9
 16641                           status	equ	0xFD8
 16642                           
 16643 ;; *************** function _initLCD *****************
 16644 ;; Defined at:
 16645 ;;		line 27 in file "LCD.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;		None
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;		None
 16650 ;; Return value:  Size  Location     Type
 16651 ;;                  1    wreg      void 
 16652 ;; Registers used:
 16653 ;;		wreg, status,2, status,0, cstack
 16654 ;; Tracked objects:
 16655 ;;		On entry : 0/0
 16656 ;;		On exit  : 0/0
 16657 ;;		Unchanged: 0/0
 16658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16663 ;;Total ram usage:        1 bytes
 16664 ;; Hardware stack levels used:    1
 16665 ;; Hardware stack levels required when called:    2
 16666 ;; This function calls:
 16667 ;;		_lcdInst
 16668 ;; This function is called by:
 16669 ;;		_main
 16670 ;; This function uses a non-reentrant model
 16671 ;;
 16672                           
 16673                           	psect	text39
 16674  00B0EA                     __ptext39:
 16675                           	opt stack 0
 16676  00B0EA                     _initLCD:
 16677                           	opt stack 28
 16678                           
 16679                           ;LCD.c: 35: _delay((unsigned long)((15)*(40000000/4000.0)));
 16680                           
 16681                           ;incstack = 0
 16682  00B0EA  0EC3               	movlw	195
 16683  00B0EC  6E04               	movwf	??_initLCD& (0+255),c
 16684  00B0EE  0ECD               	movlw	205
 16685  00B0F0                     u12187:
 16686  00B0F0  2EE8               	decfsz	wreg,f,c
 16687  00B0F2  D7FE               	bra	u12187
 16688  00B0F4  2E04               	decfsz	??_initLCD& (0+255),f,c
 16689  00B0F6  D7FC               	bra	u12187
 16690  00B0F8  F000               	nop	
 16691                           
 16692                           ;LCD.c: 36: lcdInst(0b00110011);
 16693  00B0FA  0E33               	movlw	51
 16694  00B0FC  ECBB  F057         	call	_lcdInst
 16695                           
 16696                           ;LCD.c: 37: lcdInst(0b00110010);
 16697  00B100  0E32               	movlw	50
 16698  00B102  ECBB  F057         	call	_lcdInst
 16699                           
 16700                           ;LCD.c: 38: lcdInst(0b00101000);
 16701  00B106  0E28               	movlw	40
 16702  00B108  ECBB  F057         	call	_lcdInst
 16703                           
 16704                           ;LCD.c: 39: lcdInst(0b00001111);
 16705  00B10C  0E0F               	movlw	15
 16706  00B10E  ECBB  F057         	call	_lcdInst
 16707                           
 16708                           ;LCD.c: 40: lcdInst(0b00000110);
 16709  00B112  0E06               	movlw	6
 16710  00B114  ECBB  F057         	call	_lcdInst
 16711                           
 16712                           ;LCD.c: 41: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 16713  00B118  0E01               	movlw	1
 16714  00B11A  ECBB  F057         	call	_lcdInst
 16715  00B11E  0EC3               	movlw	195
 16716  00B120  6E04               	movwf	??_initLCD& (0+255),c
 16717  00B122  0ECD               	movlw	205
 16718  00B124                     u12197:
 16719  00B124  2EE8               	decfsz	wreg,f,c
 16720  00B126  D7FE               	bra	u12197
 16721  00B128  2E04               	decfsz	??_initLCD& (0+255),f,c
 16722  00B12A  D7FC               	bra	u12197
 16723  00B12C  F000               	nop	
 16724                           
 16725                           ;LCD.c: 44: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 16726  00B12E  0E0F               	movlw	15
 16727  00B130  ECBB  F057         	call	_lcdInst
 16728  00B134  0012               	return		;funcret
 16729  00B136                     __end_of_initLCD:
 16730                           	opt stack 0
 16731                           tblptru	equ	0xFF8
 16732                           tblptrh	equ	0xFF7
 16733                           tblptrl	equ	0xFF6
 16734                           tablat	equ	0xFF5
 16735                           prodh	equ	0xFF4
 16736                           prodl	equ	0xFF3
 16737                           intcon	equ	0xFF2
 16738                           postinc0	equ	0xFEE
 16739                           wreg	equ	0xFE8
 16740                           postinc1	equ	0xFE6
 16741                           postdec1	equ	0xFE5
 16742                           plusw1	equ	0xFE3
 16743                           fsr1h	equ	0xFE2
 16744                           fsr1l	equ	0xFE1
 16745                           indf2	equ	0xFDF
 16746                           postinc2	equ	0xFDE
 16747                           postdec2	equ	0xFDD
 16748                           plusw2	equ	0xFDB
 16749                           fsr2h	equ	0xFDA
 16750                           fsr2l	equ	0xFD9
 16751                           status	equ	0xFD8
 16752                           
 16753 ;; *************** function _lcdInst *****************
 16754 ;; Defined at:
 16755 ;;		line 13 in file "LCD.c"
 16756 ;; Parameters:    Size  Location     Type
 16757 ;;  data            1    wreg     unsigned char 
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;  data            1    2[COMRAM] unsigned char 
 16760 ;; Return value:  Size  Location     Type
 16761 ;;                  1    wreg      void 
 16762 ;; Registers used:
 16763 ;;		wreg, status,2, status,0, cstack
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16773 ;;Total ram usage:        1 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; Hardware stack levels required when called:    1
 16776 ;; This function calls:
 16777 ;;		_lcdNibble
 16778 ;; This function is called by:
 16779 ;;		_main
 16780 ;;		_mainOperation
 16781 ;;		_viewLogs
 16782 ;;		_displayLogs
 16783 ;;		_food_press
 16784 ;;		_diet_press
 16785 ;;		_which_drawer
 16786 ;;		_standbyMode
 16787 ;;		_initLCD
 16788 ;; This function uses a non-reentrant model
 16789 ;;
 16790                           
 16791                           	psect	text40
 16792  00AF76                     __ptext40:
 16793                           	opt stack 0
 16794  00AF76                     _lcdInst:
 16795                           	opt stack 27
 16796                           
 16797                           ;incstack = 0
 16798                           ;lcdInst@data stored from wreg
 16799  00AF76  6E03               	movwf	lcdInst@data,c
 16800                           
 16801                           ;LCD.c: 21: LATDbits.LATD2 = 0;
 16802  00AF78  948C               	bcf	3980,2,c	;volatile
 16803                           
 16804                           ;LCD.c: 22: lcdNibble(data);
 16805  00AF7A  5003               	movf	lcdInst@data,w,c
 16806  00AF7C  ECC6  F059         	call	_lcdNibble
 16807                           
 16808                           ;LCD.c: 23: _delay((unsigned long)((100)*(40000000/4000000.0)));
 16809  00AF80  0EC8               	movlw	200
 16810  00AF82                     u12207:
 16811  00AF82  D000               	nop2	
 16812  00AF84  2EE8               	decfsz	wreg,f,c
 16813  00AF86  D7FD               	bra	u12207
 16814  00AF88  0012               	return		;funcret
 16815  00AF8A                     __end_of_lcdInst:
 16816                           	opt stack 0
 16817                           tblptru	equ	0xFF8
 16818                           tblptrh	equ	0xFF7
 16819                           tblptrl	equ	0xFF6
 16820                           tablat	equ	0xFF5
 16821                           prodh	equ	0xFF4
 16822                           prodl	equ	0xFF3
 16823                           intcon	equ	0xFF2
 16824                           postinc0	equ	0xFEE
 16825                           wreg	equ	0xFE8
 16826                           postinc1	equ	0xFE6
 16827                           postdec1	equ	0xFE5
 16828                           plusw1	equ	0xFE3
 16829                           fsr1h	equ	0xFE2
 16830                           fsr1l	equ	0xFE1
 16831                           indf2	equ	0xFDF
 16832                           postinc2	equ	0xFDE
 16833                           postdec2	equ	0xFDD
 16834                           plusw2	equ	0xFDB
 16835                           fsr2h	equ	0xFDA
 16836                           fsr2l	equ	0xFD9
 16837                           status	equ	0xFD8
 16838                           
 16839 ;; *************** function _lcdNibble *****************
 16840 ;; Defined at:
 16841 ;;		line 48 in file "LCD.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;  data            1    wreg     unsigned char 
 16844 ;; Auto vars:     Size  Location     Type
 16845 ;;  data            1    1[COMRAM] unsigned char 
 16846 ;;  temp            1    0[COMRAM] unsigned char 
 16847 ;; Return value:  Size  Location     Type
 16848 ;;                  1    wreg      void 
 16849 ;; Registers used:
 16850 ;;		wreg, status,2, status,0
 16851 ;; Tracked objects:
 16852 ;;		On entry : 0/0
 16853 ;;		On exit  : 0/0
 16854 ;;		Unchanged: 0/0
 16855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16860 ;;Total ram usage:        2 bytes
 16861 ;; Hardware stack levels used:    1
 16862 ;; This function calls:
 16863 ;;		Nothing
 16864 ;; This function is called by:
 16865 ;;		_lcdInst
 16866 ;;		_putch
 16867 ;; This function uses a non-reentrant model
 16868 ;;
 16869                           
 16870                           	psect	text41
 16871  00B38C                     __ptext41:
 16872                           	opt stack 0
 16873  00B38C                     _lcdNibble:
 16874                           	opt stack 27
 16875                           
 16876                           ;incstack = 0
 16877                           ;lcdNibble@data stored from wreg
 16878  00B38C  6E02               	movwf	lcdNibble@data,c
 16879                           
 16880                           ;LCD.c: 56: char temp = (unsigned char) (data & 0xF0);
 16881  00B38E  5002               	movf	lcdNibble@data,w,c
 16882  00B390  0BF0               	andlw	240
 16883  00B392  6E01               	movwf	lcdNibble@temp,c
 16884                           
 16885                           ;LCD.c: 57: LATD = (unsigned char) (LATD & 0x0F);
 16886  00B394  508C               	movf	3980,w,c	;volatile
 16887  00B396  0B0F               	andlw	15
 16888  00B398  6E8C               	movwf	3980,c	;volatile
 16889                           
 16890                           ;LCD.c: 58: LATD = (unsigned char) (temp | LATD);
 16891  00B39A  5001               	movf	lcdNibble@temp,w,c
 16892  00B39C  108C               	iorwf	3980,w,c	;volatile
 16893  00B39E  6E8C               	movwf	3980,c	;volatile
 16894                           
 16895                           ;LCD.c: 60: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 16896  00B3A0  0E00               	movlw	0
 16897  00B3A2  BEF2               	btfsc	intcon,7,c	;volatile
 16898  00B3A4  0E01               	movlw	1
 16899  00B3A6  6E74               	movwf	_LCDinterruptState,c
 16900  00B3A8  9EF2               	bcf	intcon,7,c	;volatile
 16901  00B3AA  868C               	bsf	3980,3,c	;volatile
 16902  00B3AC  0E53               	movlw	83
 16903  00B3AE                     u12217:
 16904  00B3AE  2EE8               	decfsz	wreg,f,c
 16905  00B3B0  D7FE               	bra	u12217
 16906  00B3B2  F000               	nop	
 16907  00B3B4  968C               	bcf	3980,3,c	;volatile
 16908  00B3B6  0EC8               	movlw	200
 16909  00B3B8                     u12227:
 16910  00B3B8  D000               	nop2	
 16911  00B3BA  2EE8               	decfsz	wreg,f,c
 16912  00B3BC  D7FD               	bra	u12227
 16913  00B3BE  B074               	btfsc	_LCDinterruptState,0,c
 16914  00B3C0  D002               	bra	u5685
 16915  00B3C2  9EF2               	bcf	intcon,7,c	;volatile
 16916  00B3C4  D001               	bra	u5686
 16917  00B3C6                     u5685:
 16918  00B3C6  8EF2               	bsf	intcon,7,c	;volatile
 16919  00B3C8                     u5686:
 16920                           
 16921                           ;LCD.c: 63: data = (unsigned char) (data << 4);
 16922  00B3C8  3802               	swapf	lcdNibble@data,w,c
 16923  00B3CA  0BF0               	andlw	240
 16924  00B3CC  6E02               	movwf	lcdNibble@data,c
 16925                           
 16926                           ;LCD.c: 64: temp = (unsigned char) (data & 0xF0);
 16927  00B3CE  5002               	movf	lcdNibble@data,w,c
 16928  00B3D0  0BF0               	andlw	240
 16929  00B3D2  6E01               	movwf	lcdNibble@temp,c
 16930                           
 16931                           ;LCD.c: 65: LATD = (unsigned char) (LATD & 0x0F);
 16932  00B3D4  508C               	movf	3980,w,c	;volatile
 16933  00B3D6  0B0F               	andlw	15
 16934  00B3D8  6E8C               	movwf	3980,c	;volatile
 16935                           
 16936                           ;LCD.c: 66: LATD = (unsigned char) (temp | LATD);
 16937  00B3DA  5001               	movf	lcdNibble@temp,w,c
 16938  00B3DC  108C               	iorwf	3980,w,c	;volatile
 16939  00B3DE  6E8C               	movwf	3980,c	;volatile
 16940                           
 16941                           ;LCD.c: 68: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 16942  00B3E0  0E00               	movlw	0
 16943  00B3E2  BEF2               	btfsc	intcon,7,c	;volatile
 16944  00B3E4  0E01               	movlw	1
 16945  00B3E6  6E74               	movwf	_LCDinterruptState,c
 16946  00B3E8  9EF2               	bcf	intcon,7,c	;volatile
 16947  00B3EA  868C               	bsf	3980,3,c	;volatile
 16948  00B3EC  0E53               	movlw	83
 16949  00B3EE                     u12237:
 16950  00B3EE  2EE8               	decfsz	wreg,f,c
 16951  00B3F0  D7FE               	bra	u12237
 16952  00B3F2  F000               	nop	
 16953  00B3F4  968C               	bcf	3980,3,c	;volatile
 16954  00B3F6  0EC8               	movlw	200
 16955  00B3F8                     u12247:
 16956  00B3F8  D000               	nop2	
 16957  00B3FA  2EE8               	decfsz	wreg,f,c
 16958  00B3FC  D7FD               	bra	u12247
 16959  00B3FE  B074               	btfsc	_LCDinterruptState,0,c
 16960  00B400  D002               	bra	u5695
 16961  00B402  9EF2               	bcf	intcon,7,c	;volatile
 16962  00B404  D001               	bra	u5696
 16963  00B406                     u5695:
 16964  00B406  8EF2               	bsf	intcon,7,c	;volatile
 16965  00B408                     u5696:
 16966  00B408  0012               	return		;funcret
 16967  00B40A                     __end_of_lcdNibble:
 16968                           	opt stack 0
 16969                           tblptru	equ	0xFF8
 16970                           tblptrh	equ	0xFF7
 16971                           tblptrl	equ	0xFF6
 16972                           tablat	equ	0xFF5
 16973                           prodh	equ	0xFF4
 16974                           prodl	equ	0xFF3
 16975                           intcon	equ	0xFF2
 16976                           postinc0	equ	0xFEE
 16977                           wreg	equ	0xFE8
 16978                           postinc1	equ	0xFE6
 16979                           postdec1	equ	0xFE5
 16980                           plusw1	equ	0xFE3
 16981                           fsr1h	equ	0xFE2
 16982                           fsr1l	equ	0xFE1
 16983                           indf2	equ	0xFDF
 16984                           postinc2	equ	0xFDE
 16985                           postdec2	equ	0xFDD
 16986                           plusw2	equ	0xFDB
 16987                           fsr2h	equ	0xFDA
 16988                           fsr2l	equ	0xFD9
 16989                           status	equ	0xFD8
 16990                           
 16991 ;; *************** function _initEEPROM *****************
 16992 ;; Defined at:
 16993 ;;		line 40 in file "EEPROMstorage.c"
 16994 ;; Parameters:    Size  Location     Type
 16995 ;;		None
 16996 ;; Auto vars:     Size  Location     Type
 16997 ;;  i               2    2[COMRAM] unsigned int 
 16998 ;; Return value:  Size  Location     Type
 16999 ;;                  1    wreg      void 
 17000 ;; Registers used:
 17001 ;;		wreg, status,2, status,0, cstack
 17002 ;; Tracked objects:
 17003 ;;		On entry : 0/0
 17004 ;;		On exit  : 0/0
 17005 ;;		Unchanged: 0/0
 17006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17010 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17011 ;;Total ram usage:        2 bytes
 17012 ;; Hardware stack levels used:    1
 17013 ;; Hardware stack levels required when called:    1
 17014 ;; This function calls:
 17015 ;;		_writeEEPROM
 17016 ;; This function is called by:
 17017 ;;		_main
 17018 ;; This function uses a non-reentrant model
 17019 ;;
 17020                           
 17021                           	psect	text42
 17022  00AFF4                     __ptext42:
 17023                           	opt stack 0
 17024  00AFF4                     _initEEPROM:
 17025                           	opt stack 29
 17026                           
 17027                           ;EEPROMstorage.c: 41: unsigned int i = 0;
 17028                           
 17029                           ;incstack = 0
 17030  00AFF4  0E00               	movlw	0
 17031  00AFF6  6E04               	movwf	initEEPROM@i+1,c
 17032  00AFF8  0E00               	movlw	0
 17033  00AFFA  6E03               	movwf	initEEPROM@i,c
 17034                           
 17035                           ;EEPROMstorage.c: 42: for (i=0; i<256; i++){
 17036  00AFFC  0E00               	movlw	0
 17037  00AFFE  6E04               	movwf	initEEPROM@i+1,c
 17038  00B000  0E00               	movlw	0
 17039  00B002  6E03               	movwf	initEEPROM@i,c
 17040  00B004                     l8192:
 17041  00B004  0404               	decf	initEEPROM@i+1,w,c
 17042  00B006  B0D8               	btfsc	status,0,c
 17043  00B008  0012               	return	
 17044                           
 17045                           ;EEPROMstorage.c: 43: writeEEPROM(i, 0);
 17046  00B00A  0E00               	movlw	0
 17047  00B00C  6E01               	movwf	writeEEPROM@data,c
 17048  00B00E  5003               	movf	initEEPROM@i,w,c
 17049  00B010  EC20  F058         	call	_writeEEPROM
 17050  00B014  4A03               	infsnz	initEEPROM@i,f,c
 17051  00B016  2A04               	incf	initEEPROM@i+1,f,c
 17052  00B018  D7F5               	goto	l8192
 17053  00B01A                     __end_of_initEEPROM:
 17054                           	opt stack 0
 17055                           tblptru	equ	0xFF8
 17056                           tblptrh	equ	0xFF7
 17057                           tblptrl	equ	0xFF6
 17058                           tablat	equ	0xFF5
 17059                           prodh	equ	0xFF4
 17060                           prodl	equ	0xFF3
 17061                           intcon	equ	0xFF2
 17062                           postinc0	equ	0xFEE
 17063                           wreg	equ	0xFE8
 17064                           postinc1	equ	0xFE6
 17065                           postdec1	equ	0xFE5
 17066                           plusw1	equ	0xFE3
 17067                           fsr1h	equ	0xFE2
 17068                           fsr1l	equ	0xFE1
 17069                           indf2	equ	0xFDF
 17070                           postinc2	equ	0xFDE
 17071                           postdec2	equ	0xFDD
 17072                           plusw2	equ	0xFDB
 17073                           fsr2h	equ	0xFDA
 17074                           fsr2l	equ	0xFD9
 17075                           status	equ	0xFD8
 17076                           
 17077 ;; *************** function _writeEEPROM *****************
 17078 ;; Defined at:
 17079 ;;		line 10 in file "EEPROMstorage.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;  address         1    wreg     unsigned char 
 17082 ;;  data            1    0[COMRAM] unsigned char 
 17083 ;; Auto vars:     Size  Location     Type
 17084 ;;  address         1    1[COMRAM] unsigned char 
 17085 ;; Return value:  Size  Location     Type
 17086 ;;                  1    wreg      void 
 17087 ;; Registers used:
 17088 ;;		wreg, status,2
 17089 ;; Tracked objects:
 17090 ;;		On entry : 0/0
 17091 ;;		On exit  : 0/0
 17092 ;;		Unchanged: 0/0
 17093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17094 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17098 ;;Total ram usage:        2 bytes
 17099 ;; Hardware stack levels used:    1
 17100 ;; This function calls:
 17101 ;;		Nothing
 17102 ;; This function is called by:
 17103 ;;		_standbyMode
 17104 ;;		_initEEPROM
 17105 ;;		_shiftEEPROM
 17106 ;; This function uses a non-reentrant model
 17107 ;;
 17108                           
 17109                           	psect	text43
 17110  00B040                     __ptext43:
 17111                           	opt stack 0
 17112  00B040                     _writeEEPROM:
 17113                           	opt stack 29
 17114                           
 17115                           ;incstack = 0
 17116                           ;writeEEPROM@address stored from wreg
 17117  00B040  6E02               	movwf	writeEEPROM@address,c
 17118  00B042                     
 17119                           ;EEPROMstorage.c: 11: while( EECON1bits.WR ){continue;}
 17120  00B042  B2A6               	btfsc	4006,1,c	;volsfr
 17121  00B044  D7FE               	goto	l6562
 17122                           
 17123                           ;EEPROMstorage.c: 13: EECON1bits.WREN=1;
 17124  00B046  84A6               	bsf	4006,2,c	;volsfr
 17125                           
 17126                           ;EEPROMstorage.c: 14: EEADR=address;
 17127  00B048  C002  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17128                           
 17129                           ;EEPROMstorage.c: 15: EEDATA=data;
 17130  00B04C  C001  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17131                           
 17132                           ;EEPROMstorage.c: 16: EECON1bits.EEPGD=0;
 17133  00B050  9EA6               	bcf	4006,7,c	;volsfr
 17134                           
 17135                           ;EEPROMstorage.c: 17: EECON1bits.CFGS=0;
 17136  00B052  9CA6               	bcf	4006,6,c	;volsfr
 17137                           
 17138                           ;EEPROMstorage.c: 18: INTCONbits.GIE=0;
 17139  00B054  9EF2               	bcf	intcon,7,c	;volatile
 17140                           
 17141                           ;EEPROMstorage.c: 20: EECON2 = 0x55;
 17142  00B056  0E55               	movlw	85
 17143  00B058  6EA7               	movwf	4007,c	;volsfr
 17144                           
 17145                           ;EEPROMstorage.c: 21: EECON2 = 0xAA;
 17146  00B05A  0EAA               	movlw	170
 17147  00B05C  6EA7               	movwf	4007,c	;volsfr
 17148                           
 17149                           ;EEPROMstorage.c: 22: EECON1bits.WR = 1;
 17150  00B05E  82A6               	bsf	4006,1,c	;volsfr
 17151                           
 17152                           ;EEPROMstorage.c: 24: INTCONbits.GIE = 1;
 17153  00B060  8EF2               	bsf	intcon,7,c	;volatile
 17154  00B062  B2A6               	btfsc	4006,1,c	;volsfr
 17155  00B064  D7FE               	goto	l1011
 17156                           
 17157                           ;EEPROMstorage.c: 26: EECON1bits.WREN=0;
 17158  00B066  94A6               	bcf	4006,2,c	;volsfr
 17159  00B068  0012               	return		;funcret
 17160  00B06A                     __end_of_writeEEPROM:
 17161                           	opt stack 0
 17162                           tblptru	equ	0xFF8
 17163                           tblptrh	equ	0xFF7
 17164                           tblptrl	equ	0xFF6
 17165                           tablat	equ	0xFF5
 17166                           prodh	equ	0xFF4
 17167                           prodl	equ	0xFF3
 17168                           intcon	equ	0xFF2
 17169                           postinc0	equ	0xFEE
 17170                           wreg	equ	0xFE8
 17171                           postinc1	equ	0xFE6
 17172                           postdec1	equ	0xFE5
 17173                           plusw1	equ	0xFE3
 17174                           fsr1h	equ	0xFE2
 17175                           fsr1l	equ	0xFE1
 17176                           indf2	equ	0xFDF
 17177                           postinc2	equ	0xFDE
 17178                           postdec2	equ	0xFDD
 17179                           plusw2	equ	0xFDB
 17180                           fsr2h	equ	0xFDA
 17181                           fsr2l	equ	0xFD9
 17182                           status	equ	0xFD8
 17183                           
 17184 ;; *************** function _UART_Init *****************
 17185 ;; Defined at:
 17186 ;;		line 197 in file "UART_PIC.c"
 17187 ;; Parameters:    Size  Location     Type
 17188 ;;  baud            4   14[COMRAM] long 
 17189 ;; Auto vars:     Size  Location     Type
 17190 ;;		None
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  1    wreg      void 
 17193 ;; Registers used:
 17194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17202 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17203 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17204 ;;Total ram usage:        8 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; Hardware stack levels required when called:    1
 17207 ;; This function calls:
 17208 ;;		___aldiv
 17209 ;; This function is called by:
 17210 ;;		_main
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           	psect	text44
 17215  00B48C                     __ptext44:
 17216                           	opt stack 0
 17217  00B48C                     _UART_Init:
 17218                           	opt stack 29
 17219                           
 17220                           ;UART_PIC.c: 210: SPBRG = (unsigned char)((40000000 / (64 * baud)) - 1);
 17221                           
 17222                           ;incstack = 0
 17223  00B48C  0E00               	movlw	0
 17224  00B48E  6E01               	movwf	___aldiv@dividend,c
 17225  00B490  0E5A               	movlw	90
 17226  00B492  6E02               	movwf	___aldiv@dividend+1,c
 17227  00B494  0E62               	movlw	98
 17228  00B496  6E03               	movwf	___aldiv@dividend+2,c
 17229  00B498  0E02               	movlw	2
 17230  00B49A  6E04               	movwf	___aldiv@dividend+3,c
 17231  00B49C  C00F  F013         	movff	UART_Init@baud,??_UART_Init
 17232  00B4A0  C010  F014         	movff	UART_Init@baud+1,??_UART_Init+1
 17233  00B4A4  C011  F015         	movff	UART_Init@baud+2,??_UART_Init+2
 17234  00B4A8  C012  F016         	movff	UART_Init@baud+3,??_UART_Init+3
 17235  00B4AC  0E06               	movlw	6
 17236  00B4AE                     u10525:
 17237  00B4AE  90D8               	bcf	status,0,c
 17238  00B4B0  3613               	rlcf	??_UART_Init,f,c
 17239  00B4B2  3614               	rlcf	??_UART_Init+1,f,c
 17240  00B4B4  3615               	rlcf	??_UART_Init+2,f,c
 17241  00B4B6  3616               	rlcf	??_UART_Init+3,f,c
 17242  00B4B8  2EE8               	decfsz	wreg,f,c
 17243  00B4BA  D7F9               	goto	u10525
 17244  00B4BC  C013  F005         	movff	??_UART_Init,___aldiv@divisor
 17245  00B4C0  C014  F006         	movff	??_UART_Init+1,___aldiv@divisor+1
 17246  00B4C4  C015  F007         	movff	??_UART_Init+2,___aldiv@divisor+2
 17247  00B4C8  C016  F008         	movff	??_UART_Init+3,___aldiv@divisor+3
 17248  00B4CC  EC8B  F05B         	call	___aldiv	;wreg free
 17249  00B4D0  0401               	decf	?___aldiv,w,c
 17250  00B4D2  6EAF               	movwf	4015,c	;volatile
 17251                           
 17252                           ;UART_PIC.c: 213: TXSTAbits.TX9 = 0;
 17253  00B4D4  9CAC               	bcf	4012,6,c	;volatile
 17254                           
 17255                           ;UART_PIC.c: 214: TXSTAbits.SYNC = 0;
 17256  00B4D6  98AC               	bcf	4012,4,c	;volatile
 17257                           
 17258                           ;UART_PIC.c: 215: TXSTAbits.TXEN = 1;
 17259  00B4D8  8AAC               	bsf	4012,5,c	;volatile
 17260                           
 17261                           ;UART_PIC.c: 218: RCSTAbits.RX9 = 0;
 17262  00B4DA  9CAB               	bcf	4011,6,c	;volatile
 17263                           
 17264                           ;UART_PIC.c: 219: RCSTAbits.CREN = 1;
 17265  00B4DC  88AB               	bsf	4011,4,c	;volatile
 17266                           
 17267                           ;UART_PIC.c: 222: UART -> _stateTX = UART_STATE_READY;
 17268  00B4DE  EE20 F008          	lfsr	2,8
 17269  00B4E2  5076               	movf	_UART,w,c
 17270  00B4E4  26D9               	addwf	fsr2l,f,c
 17271  00B4E6  5077               	movf	_UART+1,w,c
 17272  00B4E8  22DA               	addwfc	fsr2h,f,c
 17273  00B4EA  0E01               	movlw	1
 17274  00B4EC  6EDF               	movwf	indf2,c
 17275                           
 17276                           ;UART_PIC.c: 223: UART -> _stateRX = UART_STATE_READY;
 17277  00B4EE  EE20 F009          	lfsr	2,9
 17278  00B4F2  5076               	movf	_UART,w,c
 17279  00B4F4  26D9               	addwf	fsr2l,f,c
 17280  00B4F6  5077               	movf	_UART+1,w,c
 17281  00B4F8  22DA               	addwfc	fsr2h,f,c
 17282  00B4FA  0E01               	movlw	1
 17283  00B4FC  6EDF               	movwf	indf2,c
 17284                           
 17285                           ;UART_PIC.c: 226: uart._dataRX = arr_dataRX;
 17286  00B4FE  0E30               	movlw	low _arr_dataRX
 17287  00B500  0100               	movlb	0	; () banked
 17288  00B502  6FF4               	movwf	(_uart+4)& (0+255),b	;volatile
 17289  00B504  0E02               	movlw	high _arr_dataRX
 17290  00B506  6FF5               	movwf	(_uart+5)& (0+255),b	;volatile
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;UART_PIC.c: 229: TRISC6 = 0;
 17294  00B508  9C94               	bcf	3988,6,c	;volatile
 17295                           
 17296                           ; BSR set to: 0
 17297                           ;UART_PIC.c: 230: TRISC7 = 1;
 17298  00B50A  8E94               	bsf	3988,7,c	;volatile
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;UART_PIC.c: 233: RCSTAbits.SPEN = 1;
 17302  00B50C  8EAB               	bsf	4011,7,c	;volatile
 17303                           
 17304                           ; BSR set to: 0
 17305  00B50E  0012               	return		;funcret
 17306  00B510                     __end_of_UART_Init:
 17307                           	opt stack 0
 17308                           tblptru	equ	0xFF8
 17309                           tblptrh	equ	0xFF7
 17310                           tblptrl	equ	0xFF6
 17311                           tablat	equ	0xFF5
 17312                           prodh	equ	0xFF4
 17313                           prodl	equ	0xFF3
 17314                           intcon	equ	0xFF2
 17315                           postinc0	equ	0xFEE
 17316                           wreg	equ	0xFE8
 17317                           postinc1	equ	0xFE6
 17318                           postdec1	equ	0xFE5
 17319                           plusw1	equ	0xFE3
 17320                           fsr1h	equ	0xFE2
 17321                           fsr1l	equ	0xFE1
 17322                           indf2	equ	0xFDF
 17323                           postinc2	equ	0xFDE
 17324                           postdec2	equ	0xFDD
 17325                           plusw2	equ	0xFDB
 17326                           fsr2h	equ	0xFDA
 17327                           fsr2l	equ	0xFD9
 17328                           status	equ	0xFD8
 17329                           
 17330 ;; *************** function ___aldiv *****************
 17331 ;; Defined at:
 17332 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/aldiv.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  dividend        4    0[COMRAM] long 
 17335 ;;  divisor         4    4[COMRAM] long 
 17336 ;; Auto vars:     Size  Location     Type
 17337 ;;  quotient        4   10[COMRAM] long 
 17338 ;;  sign            1    9[COMRAM] unsigned char 
 17339 ;;  counter         1    8[COMRAM] unsigned char 
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  4    0[COMRAM] long 
 17342 ;; Registers used:
 17343 ;;		wreg, status,2, status,0
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17349 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17350 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17352 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17353 ;;Total ram usage:       14 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_UART_Init
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           	psect	text45
 17363  00B716                     __ptext45:
 17364                           	opt stack 0
 17365  00B716                     ___aldiv:
 17366                           	opt stack 29
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;incstack = 0
 17370  00B716  0E00               	movlw	0
 17371  00B718  6E0A               	movwf	___aldiv@sign,c
 17372  00B71A  AE08               	btfss	___aldiv@divisor+3,7,c
 17373  00B71C  D00A               	goto	l1379
 17374  00B71E  1E08               	comf	___aldiv@divisor+3,f,c
 17375  00B720  1E07               	comf	___aldiv@divisor+2,f,c
 17376  00B722  1E06               	comf	___aldiv@divisor+1,f,c
 17377  00B724  6C05               	negf	___aldiv@divisor,c
 17378  00B726  0E00               	movlw	0
 17379  00B728  2206               	addwfc	___aldiv@divisor+1,f,c
 17380  00B72A  2207               	addwfc	___aldiv@divisor+2,f,c
 17381  00B72C  2208               	addwfc	___aldiv@divisor+3,f,c
 17382  00B72E  0E01               	movlw	1
 17383  00B730  6E0A               	movwf	___aldiv@sign,c
 17384  00B732                     l1379:
 17385  00B732  AE04               	btfss	___aldiv@dividend+3,7,c
 17386  00B734  D00A               	goto	l1380
 17387  00B736  1E04               	comf	___aldiv@dividend+3,f,c
 17388  00B738  1E03               	comf	___aldiv@dividend+2,f,c
 17389  00B73A  1E02               	comf	___aldiv@dividend+1,f,c
 17390  00B73C  6C01               	negf	___aldiv@dividend,c
 17391  00B73E  0E00               	movlw	0
 17392  00B740  2202               	addwfc	___aldiv@dividend+1,f,c
 17393  00B742  2203               	addwfc	___aldiv@dividend+2,f,c
 17394  00B744  2204               	addwfc	___aldiv@dividend+3,f,c
 17395  00B746  0E01               	movlw	1
 17396  00B748  1A0A               	xorwf	___aldiv@sign,f,c
 17397  00B74A                     l1380:
 17398  00B74A  0E00               	movlw	0
 17399  00B74C  6E0B               	movwf	___aldiv@quotient,c
 17400  00B74E  0E00               	movlw	0
 17401  00B750  6E0C               	movwf	___aldiv@quotient+1,c
 17402  00B752  0E00               	movlw	0
 17403  00B754  6E0D               	movwf	___aldiv@quotient+2,c
 17404  00B756  0E00               	movlw	0
 17405  00B758  6E0E               	movwf	___aldiv@quotient+3,c
 17406  00B75A  5005               	movf	___aldiv@divisor,w,c
 17407  00B75C  1006               	iorwf	___aldiv@divisor+1,w,c
 17408  00B75E  1007               	iorwf	___aldiv@divisor+2,w,c
 17409  00B760  1008               	iorwf	___aldiv@divisor+3,w,c
 17410  00B762  B4D8               	btfsc	status,2,c
 17411  00B764  D02A               	goto	l1387
 17412  00B766  0E01               	movlw	1
 17413  00B768  6E09               	movwf	___aldiv@counter,c
 17414  00B76A  D006               	goto	l1382
 17415  00B76C  90D8               	bcf	status,0,c
 17416  00B76E  3605               	rlcf	___aldiv@divisor,f,c
 17417  00B770  3606               	rlcf	___aldiv@divisor+1,f,c
 17418  00B772  3607               	rlcf	___aldiv@divisor+2,f,c
 17419  00B774  3608               	rlcf	___aldiv@divisor+3,f,c
 17420  00B776  2A09               	incf	___aldiv@counter,f,c
 17421  00B778                     l1382:
 17422  00B778  AE08               	btfss	___aldiv@divisor+3,7,c
 17423  00B77A  D7F8               	goto	l1383
 17424  00B77C                     u10490:
 17425  00B77C  90D8               	bcf	status,0,c
 17426  00B77E  360B               	rlcf	___aldiv@quotient,f,c
 17427  00B780  360C               	rlcf	___aldiv@quotient+1,f,c
 17428  00B782  360D               	rlcf	___aldiv@quotient+2,f,c
 17429  00B784  360E               	rlcf	___aldiv@quotient+3,f,c
 17430  00B786  5005               	movf	___aldiv@divisor,w,c
 17431  00B788  5C01               	subwf	___aldiv@dividend,w,c
 17432  00B78A  5006               	movf	___aldiv@divisor+1,w,c
 17433  00B78C  5802               	subwfb	___aldiv@dividend+1,w,c
 17434  00B78E  5007               	movf	___aldiv@divisor+2,w,c
 17435  00B790  5803               	subwfb	___aldiv@dividend+2,w,c
 17436  00B792  5008               	movf	___aldiv@divisor+3,w,c
 17437  00B794  5804               	subwfb	___aldiv@dividend+3,w,c
 17438  00B796  A0D8               	btfss	status,0,c
 17439  00B798  D009               	goto	l1386
 17440  00B79A  5005               	movf	___aldiv@divisor,w,c
 17441  00B79C  5E01               	subwf	___aldiv@dividend,f,c
 17442  00B79E  5006               	movf	___aldiv@divisor+1,w,c
 17443  00B7A0  5A02               	subwfb	___aldiv@dividend+1,f,c
 17444  00B7A2  5007               	movf	___aldiv@divisor+2,w,c
 17445  00B7A4  5A03               	subwfb	___aldiv@dividend+2,f,c
 17446  00B7A6  5008               	movf	___aldiv@divisor+3,w,c
 17447  00B7A8  5A04               	subwfb	___aldiv@dividend+3,f,c
 17448  00B7AA  800B               	bsf	___aldiv@quotient,0,c
 17449  00B7AC                     l1386:
 17450  00B7AC  90D8               	bcf	status,0,c
 17451  00B7AE  3208               	rrcf	___aldiv@divisor+3,f,c
 17452  00B7B0  3207               	rrcf	___aldiv@divisor+2,f,c
 17453  00B7B2  3206               	rrcf	___aldiv@divisor+1,f,c
 17454  00B7B4  3205               	rrcf	___aldiv@divisor,f,c
 17455  00B7B6  2E09               	decfsz	___aldiv@counter,f,c
 17456  00B7B8  D7E1               	goto	u10490
 17457  00B7BA                     l1387:
 17458  00B7BA  500A               	movf	___aldiv@sign,w,c
 17459  00B7BC  B4D8               	btfsc	status,2,c
 17460  00B7BE  D008               	goto	l1388
 17461  00B7C0  1E0E               	comf	___aldiv@quotient+3,f,c
 17462  00B7C2  1E0D               	comf	___aldiv@quotient+2,f,c
 17463  00B7C4  1E0C               	comf	___aldiv@quotient+1,f,c
 17464  00B7C6  6C0B               	negf	___aldiv@quotient,c
 17465  00B7C8  0E00               	movlw	0
 17466  00B7CA  220C               	addwfc	___aldiv@quotient+1,f,c
 17467  00B7CC  220D               	addwfc	___aldiv@quotient+2,f,c
 17468  00B7CE  220E               	addwfc	___aldiv@quotient+3,f,c
 17469  00B7D0                     l1388:
 17470  00B7D0  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 17471  00B7D4  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 17472  00B7D8  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 17473  00B7DC  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 17474  00B7E0  0012               	return	
 17475  00B7E2                     __end_of___aldiv:
 17476                           	opt stack 0
 17477                           tblptru	equ	0xFF8
 17478                           tblptrh	equ	0xFF7
 17479                           tblptrl	equ	0xFF6
 17480                           tablat	equ	0xFF5
 17481                           prodh	equ	0xFF4
 17482                           prodl	equ	0xFF3
 17483                           intcon	equ	0xFF2
 17484                           postinc0	equ	0xFEE
 17485                           wreg	equ	0xFE8
 17486                           postinc1	equ	0xFE6
 17487                           postdec1	equ	0xFE5
 17488                           plusw1	equ	0xFE3
 17489                           fsr1h	equ	0xFE2
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           postdec2	equ	0xFDD
 17494                           plusw2	equ	0xFDB
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           tblptru	equ	0xFF8
 17499                           tblptrh	equ	0xFF7
 17500                           tblptrl	equ	0xFF6
 17501                           tablat	equ	0xFF5
 17502                           prodh	equ	0xFF4
 17503                           prodl	equ	0xFF3
 17504                           intcon	equ	0xFF2
 17505                           postinc0	equ	0xFEE
 17506                           wreg	equ	0xFE8
 17507                           postinc1	equ	0xFE6
 17508                           postdec1	equ	0xFE5
 17509                           plusw1	equ	0xFE3
 17510                           fsr1h	equ	0xFE2
 17511                           fsr1l	equ	0xFE1
 17512                           indf2	equ	0xFDF
 17513                           postinc2	equ	0xFDE
 17514                           postdec2	equ	0xFDD
 17515                           plusw2	equ	0xFDB
 17516                           fsr2h	equ	0xFDA
 17517                           fsr2l	equ	0xFD9
 17518                           status	equ	0xFD8
 17519                           
 17520                           	psect	rparam
 17521  0000                     tblptru	equ	0xFF8
 17522                           tblptrh	equ	0xFF7
 17523                           tblptrl	equ	0xFF6
 17524                           tablat	equ	0xFF5
 17525                           prodh	equ	0xFF4
 17526                           prodl	equ	0xFF3
 17527                           intcon	equ	0xFF2
 17528                           postinc0	equ	0xFEE
 17529                           wreg	equ	0xFE8
 17530                           postinc1	equ	0xFE6
 17531                           postdec1	equ	0xFE5
 17532                           plusw1	equ	0xFE3
 17533                           fsr1h	equ	0xFE2
 17534                           fsr1l	equ	0xFE1
 17535                           indf2	equ	0xFDF
 17536                           postinc2	equ	0xFDE
 17537                           postdec2	equ	0xFDD
 17538                           plusw2	equ	0xFDB
 17539                           fsr2h	equ	0xFDA
 17540                           fsr2l	equ	0xFD9
 17541                           status	equ	0xFD8


Data Sizes:
    Strings     763
    Constant    65
    Data        68
    BSS         240
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    105     123
    BANK0           128     72     124
    BANK1           256    138     250
    BANK2           256      0     126
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    displayLogs$2019	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), 

    displayLogs$2018	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_105(CODE[7]), STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), 
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), 
		 -> STR_24(CODE[2]), STR_23(CODE[2]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_104(CODE[11]), STR_103(CODE[13]), STR_102(CODE[11]), STR_101(CODE[13]), 
		 -> STR_100(CODE[11]), STR_99(CODE[8]), STR_98(CODE[15]), STR_97(CODE[16]), 
		 -> STR_96(CODE[10]), STR_95(CODE[8]), STR_94(CODE[15]), STR_93(CODE[16]), 
		 -> STR_92(CODE[10]), STR_91(CODE[16]), STR_90(CODE[16]), STR_89(CODE[17]), 
		 -> STR_88(CODE[13]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[11]), 
		 -> STR_84(CODE[11]), STR_83(CODE[15]), STR_82(CODE[15]), STR_81(CODE[10]), 
		 -> STR_80(CODE[13]), STR_79(CODE[16]), STR_78(CODE[16]), STR_77(CODE[17]), 
		 -> STR_76(CODE[17]), STR_75(CODE[8]), STR_74(CODE[15]), STR_73(CODE[15]), 
		 -> STR_72(CODE[11]), STR_71(CODE[14]), STR_70(CODE[16]), STR_69(CODE[16]), 
		 -> STR_68(CODE[11]), STR_67(CODE[14]), STR_66(CODE[16]), STR_65(CODE[16]), 
		 -> STR_64(CODE[16]), STR_63(CODE[13]), STR_62(CODE[5]), STR_61(CODE[11]), 
		 -> STR_60(CODE[15]), STR_59(CODE[17]), STR_58(CODE[18]), STR_57(CODE[15]), 
		 -> STR_56(CODE[11]), STR_55(CODE[7]), STR_54(CODE[3]), STR_53(CODE[16]), 
		 -> STR_52(CODE[8]), STR_51(CODE[16]), STR_50(CODE[15]), STR_49(CODE[6]), 
		 -> STR_48(CODE[14]), STR_47(CODE[17]), STR_46(CODE[7]), STR_45(CODE[9]), 
		 -> STR_44(CODE[17]), STR_43(CODE[11]), STR_42(CODE[17]), STR_41(CODE[14]), 
		 -> STR_40(CODE[17]), STR_39(CODE[11]), STR_38(CODE[15]), STR_37(CODE[11]), 
		 -> STR_36(CODE[8]), STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[16]), 
		 -> STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 1
		 -> columnRight(COMRAM[1]), columnLeft(COMRAM[1]), rowDown(COMRAM[1]), rowUp(COMRAM[1]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(BANK0[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(BANK2[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    check_food@foodInput	PTR unsigned int  size(2) Largest target is 8
		 -> food_press@foodTable(COMRAM[8]), 

    foodInputs	PTR const unsigned char [13] size(2) Largest target is 5
		 -> STR_35(CODE[5]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_29(CODE[3]), STR_28(CODE[3]), 
		 -> STR_27(CODE[3]), STR_26(CODE[3]), STR_25(CODE[2]), STR_24(CODE[2]), 
		 -> STR_23(CODE[2]), 

    inputs	PTR const unsigned char [18] size(2) Largest target is 5
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), 

    sortDrawerList@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 

    sortDrawerList@sortedDrawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@sortedDrawerTable(BANK0[16]), 

    getUserInputs@foodTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@foodTable(BANK0[16]), 

    getUserInputs@dietTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@dietTable(BANK0[16]), 

    getUserInputs@drawerTable	PTR unsigned int  size(2) Largest target is 16
		 -> mainOperation@drawerTable(BANK0[16]), 


Critical Paths under _main in COMRAM

    _main->_standbyMode
    _standbyMode->_viewLogs
    _which_drawer->_printf
    _viewLogs->_displayLogs
    _displayLogs->_printf
    _shiftEEPROM->_writeEEPROM
    _food_press->_printf
    _diet_press->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _mainOperation->_sortDrawerList
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _moveVertically->_verticalStepper
    _verticalStepper->_uartTransmitBlocking
    _moveHorizontally->_horizontalStepper
    _horizontalStepper->_uartTransmitBlocking
    _getUserInputs->___wmul
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _initEEPROM->_writeEEPROM
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_mainOperation

Critical Paths under _main in BANK1

    _main->_standbyMode

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  128935
                                             97 COMRAM     8     8      0
                          _UART_Init
                         _initEEPROM
                            _initLCD
                            _lcdInst
                      _mainOperation
                             _printf
                         _readEEPROM
                        _standbyMode
 ---------------------------------------------------------------------------------
 (1) _standbyMode                                        142   140      2   91670
                                             93 COMRAM     4     2      2
                                              0 BANK1    138   138      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                        _decode_diet
                         _diet_press
                         _food_press
                            _getFlat
                            _getLong
                           _getRound
                            _lcdInst
                     _printFoodInput
                             _printf
                         _readEEPROM
                        _shiftEEPROM
                           _viewLogs
                       _which_drawer
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _which_drawer                                        12    10      2   12081
                                             40 COMRAM    12    10      2
                      _decode_drawer
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _decode_drawer                                        6     4      2     156
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                            12    10      2   27837
                                             81 COMRAM    12    10      2
                        _displayLogs
                            _lcdInst
                             _printf
                              _putch
                         _readEEPROM
                     _verifyKeypress
 ---------------------------------------------------------------------------------
 (3) _verifyKeypress                                       9     7      2     191
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _displayLogs                                         41    39      2   16144
                                             40 COMRAM    41    39      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _lcdInst
                             _printf
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _shiftEEPROM                                          5     5      0    1851
                                              2 COMRAM     5     5      0
                         _readEEPROM
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _printFoodInput                                       2     0      2    1164
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getRound                                             6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getLong                                              6     4      2     232
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getFlat                                              6     4      2     227
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _food_press                                          23    19      4   14976
                                             40 COMRAM    23    19      4
                         _check_food
                         _get_digits
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (3) _get_digits                                           6     4      2     140
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _check_food                                           8     4      4    2773
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _diet_press                                          23    21      2   13434
                                             40 COMRAM    23    21      2
                            _lcdInst
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (2) _decode_diet                                          6     4      2     215
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     934
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _mainOperation                                       74    74      0   23877
                                             54 COMRAM     2     2      0
                                              0 BANK0     72    72      0
                      _getUserInputs
                            _lcdInst
                   _moveHorizontally
                     _moveVertically
                             _printf
                     _sortDrawerList
 ---------------------------------------------------------------------------------
 (2) _sortDrawerList                                      54    50      4    3674
                                              0 COMRAM    54    50      4
 ---------------------------------------------------------------------------------
 (3) _printf                                              32    22     10   10848
                                             12 COMRAM    28    18     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     463
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     618
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _moveVertically                                       4     0      4    2933
                                             11 COMRAM     4     0      4
                    _verticalStepper
 ---------------------------------------------------------------------------------
 (3) _verticalStepper                                      6     2      4    1747
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _moveHorizontally                                     6     2      4    2295
                                             11 COMRAM     6     2      4
                  _horizontalStepper
 ---------------------------------------------------------------------------------
 (3) _horizontalStepper                                    6     2      4    1747
                                              5 COMRAM     6     2      4
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (4) _uartTransmitBlocking                                 5     2      3     698
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _getUserInputs                                       18    12      6    3495
                                              6 COMRAM    18    12      6
                             ___wmul
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2791
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           2     2      0    1557
                                              2 COMRAM     2     2      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          2     1      1    1488
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     550
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _initEEPROM
     _writeEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainOperation
     _getUserInputs
       ___wmul
       _readEEPROM
     _lcdInst
       _lcdNibble
     _moveHorizontally
       _horizontalStepper
         _uartTransmitBlocking
     _moveVertically
       _verticalStepper
         _uartTransmitBlocking
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _sortDrawerList
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _readEEPROM
   _standbyMode
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _decode_diet
     _diet_press
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _food_press
       _check_food
       _get_digits
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _getFlat
     _getLong
     _getRound
     _lcdInst
       _lcdNibble
     _printFoodInput
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _readEEPROM
     _shiftEEPROM
       _readEEPROM
       _writeEEPROM
     _viewLogs
       _displayLogs
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _lcdInst
           _lcdNibble
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
         _readEEPROM
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
       _readEEPROM
       _verifyKeypress
     _which_drawer
       _decode_drawer
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
       _putch
         _lcdNibble
     _writeEEPROM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      7E       9       49.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     8A      FA       7       97.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     48      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     69      7B       1       96.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26F      34        0.0%
DATA                 0      0     26F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 10 13:41:18 2018

                     _standbyMode EFDE            __end_of_verifyKeypress B1DA  
                    ?_displayLogs 0029                                l71 C1BA  
                     __CFG_CPD$ON 000000               ___wmul@multiplicand 0003  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l202 B2E2  
                             l123 BAF6                               l203 B2D4  
                             l220 B298                               l204 B2C0  
                             l221 B284                               l126 BB12  
                             l214 B272                               l230 C9F2  
                             l142 DE14                               l215 B264  
                             l216 B250                               l208 B308  
                             l160 E0C6                               l152 E012  
                             l144 DECE                               l129 BBB8  
                             l209 B2F4                               l161 E164  
                             l321 C024                               l401 E6B6  
                             l226 CBB4                               l170 E224  
                             l162 E0D0                               l402 E6E4  
                             l243 CB42                               l227 CA86  
                             l235 CA3C                               l163 E160  
                             l323 C120                               l411 E7A6  
                             l180 E3C0                               l156 E0B2  
                             l148 DF70                               l324 C12C  
                             l412 E7D2                               l404 E714  
                             l181 E312                               l173 E2FC  
                             l421 E88C                               l246 CAF8  
                             l190 E458                               l182 E3B0  
                             l174 E24E                               l166 E238  
                             l430 E9D0                               l422 E8CC  
                             l414 E800                               l406 E744  
                             l510 B8E8                               l191 E41C  
                             l183 E31C                               l175 E2EC  
                             l167 E18A                               l159 E174  
                             l511 B8CE                               l503 B9C8  
                             l272 BEF8                               l264 BEB6  
                             l184 E3AC                               l176 E258  
                             l168 E228                               l416 E82E  
                             l408 E772                               l512 B9AA  
                             l600 CD6C                               l265 BE46  
                             l193 E4B2                               l177 E2E8  
                             l169 E194                               l441 EB18  
                             l433 EA12                               l425 E90E  
                             l513 B8D6                               l274 BF30  
                             l194 E46E                               l450 EC5E  
                             l442 EB58                               l434 EA52  
                             l426 E94E                               l418 E85C  
                             l506 B9D0                               l267 BE7E  
                             l187 E406                               l611 CDE2  
                             l196 E514                               l188 E3D6  
                             l444 EB9A                               l436 EA94  
                             l620 C736                               l612 CDEE  
                             l197 E4C8                               l461 EDA6  
                             l453 ECA0                               l429 E990  
                             l541 B8E0                               l701 DD26  
                             l605 CD78                               l454 ECE0  
                             l446 EBDC                               l438 EAD6  
                             l390 E5D4                               l382 EFD4  
                             l710 B662                               l550 BBC4  
                             l463 EDFA                               l383 E566  
                             l711 B70C                               l631 C79A  
                             l800 D56A                               l456 ED22  
                             l384 E580                               l704 DD32  
                             l616 CE88                               l377 EF4C  
                             l465 EE4E                               l449 EC1E  
                             l393 E5F2                               l545 BBE6  
                             l625 C75E                               l810 D650  
                             l802 D598                               l458 ED64  
                             l394 E620                               l378 E52E  
                             l554 BBCC                               l467 EEA2  
                             l387 E59E                               l379 E548  
                             l715 B66C                               l547 BCC6  
                             l475 B9D8                               l651 C880  
                             l643 C808                               l635 C7C2  
                             l820 D73E                               l812 D67E  
                             l804 D5C6                               l396 E650  
                             l388 E5B8                               l724 B67C  
                             l469 EEF6                               l709 B68C  
                             l717 B674                               l741 C382  
                             l581 BBDE                               l557 BBD4  
                             l477 BA9A                               l629 C772  
                             l901 C6F2                               l830 BCE2  
                             l822 D770                               l814 D6AE  
                             l806 D5F4                               l398 E680  
                             l478 B9BE                               l831 BCEA  
                             l823 D7C4                               l663 C920  
                             l655 C8C6                               l647 C830  
                             l639 C7E0                               l840 BD32  
                             l832 BCF2                               l816 D6DE  
                             l808 D622                               l744 C46E  
                             l736 C376                               l592 CC3A  
                             l841 BD3A                               l833 BCFA  
                             l729 B684                               l681 DA82  
                             l585 B1BE                               l842 BD42  
                             l834 BD02                               l818 D70E  
                             l770 D312                               l746 C3A0  
                             l674 D936                               l586 B1A4  
                             l827 BD6C                               l843 BD4A  
                             l835 BD0A                               l755 C480  
                             l667 C95C                               l659 C8EE  
                             l683 DAC6                               l587 B1BA  
                             l595 CCE6                               l851 B858  
                             l931 F77E                               l844 BD52  
                             l836 BD12                               l828 BCDA  
                             l780 D3DA                               l748 C40C  
                             l692 DBB0                               l684 DB0A  
                             l860 B81C                               l852 B7E4  
                             l940 F474                               l924 F3A8  
                             l845 BD5A                               l837 BD1A  
                             l829 BDEA                               l773 D42A  
                             l765 D306                               l677 D9CE  
                             l597 CCE0                               l861 B824  
                             l853 B8BA                               l933 F42C  
                             l846 BD62                               l838 BD22  
                             l790 D48E                               l766 D306  
                             l758 C4F0                               l694 DBCC  
                             l862 B82C                               l854 B7EC  
                             l870 C540                               l942 F770  
                             l950 F58C                               l839 BD2A  
                             l775 D330                               l679 DA3E  
                             l863 B834                               l855 B7F4  
                             l951 F5DE                               l927 F3B6  
                             l919 F13C                               l792 D4B8  
                             l864 B83C                               l856 B7FC  
                             l880 C56A                               l944 F4BA  
                             l777 D392                               l689 DB72  
                             l865 B844                               l857 B804  
                             l929 FBA0                               l937 F466  
                             l794 D4E4                               l786 D43A  
                             l698 DCCC                               l866 B84E  
                             l858 B80C                               l882 C69C  
                             l962 F7BE                               l859 B814  
                             l875 C54C                               l955 F62A  
                             l796 D510                               l788 D464  
                             l980 FB96                               l956 F664  
                             l948 F518                               l885 C656  
                             l981 FAE6                               l973 F936  
                             l949 F5EA                               l798 D53C  
                             l878 C6DE                               l886 C624  
                             l974 F970                               l966 F824  
                             l958 F778                               l991 FC0A  
                             l975 FA90                               l959 FA7C  
                             l967 F8F6                               l896 C698  
                             l984 FB2A                               l968 F898  
                             l969 F8EA                               l986 FC66  
                    __CFG_CPB$OFF 000000                               wreg 000FE8  
    uartTransmitBlocking@numBytes 0003                     _mainOperation BF68  
          mainOperation@dietTable 0080                      __CFG_LVP$OFF 000000  
             standbyMode@dietType 0130                      __CFG_WDT$OFF 000000  
                            l1011 B062                              l1033 B656  
                            l1302 D13A                              l1303 D15E  
                            l1320 D210                              l1304 D166  
                            l1305 D192                              l1314 D1C0  
                            l1306 D17C                              l1315 D278  
                            l1260 CED8                              l1317 D262  
                            l1261 CED2                              l1318 D1C6  
                            l1319 D272                              l1168 B590  
                            l1280 CFDC                              l1169 B54A  
                            l1273 D05C                              l1257 CEB4  
    __end_of_uartTransmitBlocking B5AA                              l1282 CFEC  
                            l1274 CF6C                              l1266 CF0A  
                            l1258 CEC4                              l1283 CFE6  
                            l1275 CF70                              l1380 B74A  
                            l1292 D110                              l1268 D026  
                            l1276 CF98                              l1293 D0A4  
                            l1285 D014                              l1277 CFA6  
                            l1382 B778                              l1286 CFFE  
                            l1278 CFA2                              l1383 B76C  
                            l1297 D120                              l1289 D08A  
                            l1386 B7AC                              l1298 D0DA  
                            l1387 B7BA                              l1379 B732  
                            l1388 B7D0                              l1732 B154  
                            l1733 B14C                              l1653 AFC8  
                            l1742 B0BE                              l1743 B0B6  
                            l1736 B174                              l1680 B42C  
                            l1737 B17E                              l1746 B0D6  
                            l1747 B0E0                              l1683 B46C  
                            l1684 B47A                              l1679 B438  
                            l6322 B1BA                              l6622 BB1A  
                            l5830 D0DE                              l5816 D0A8  
                            l8072 B5C2                              l6562 B042  
                            l8082 B5EE                              l6466 DCDA  
                            l8410 F51E                              l8306 F25E  
                            l5924 B54A                              l8084 B5F6  
                            l8500 F7CE                              l5790 CFFE  
                            l8094 B622                              l8406 F518  
                            l8192 B004                              l6728 E0BC  
                            l8096 B62A                              l8512 F824  
                            l5786 CFE6                              l6658 DDBE  
                            l6668 DDFC                              l8516 F82A  
                            l7664 D3D4                              l8624 FB96  
                            l8296 F236                              l5898 AF8C  
                            l8394 F4C2                              l8812 C23C  
                            _ADON 007E10                              l8778 C1C2  
                            STR_1 FF9C                              STR_2 FE1D  
                            STR_3 FF71                              STR_4 FF67  
                            STR_5 FFFD                              STR_6 FFE9  
                            STR_7 FFC0                              STR_8 FFEC  
                            STR_9 FFF4                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            u6010 D19A                              u6020 D1AE  
                            u6040 D280                              u6105 B58C  
                            u6106 B58E                              u6080 B552  
                            u6090 B55E                              u6082 B554  
                            _RCIE 007CED                              u6092 B560  
                            _RCIF 007CF5                              u8200 CA1A  
                            u8120 C9A8                              u9000 C8BC  
                            u5730 B158                              u7500 DCD0  
                            u9030 C8E4                              u7510 DCDA  
                            u8400 CB6A                              u8320 CAD6  
                            u8240 CA64                              u8160 C9D0  
                            u5760 B0C2                              u9200 C3B4  
                            u9120 C952                              u9131 C34A  
                            u7620 BAEC                              u7700 DDFC  
                            u5685 B3C6                              u5686 B3C8  
                            u7710 DE12                              u9070 C916  
                            u5695 B406                              u5696 B408  
                            u8440 CB92                              u8360 CB20  
                            u8280 CAAE                              u7800 DF3E  
                            u7480 DBCA                              u9330 D3AE  
                            u7651 DD58                              u9251 D2F6  
                            u7661 DD72                              u7590 B43C  
                            u8630 CD98                              u7671 DD8C  
                            u7840 DFE0                              u7760 DE9C  
                            u8720 C754                              u7681 DDA6  
                            u8810 C7D6                              u8660 CE8C  
                            u7880 E082                              u8840 C7FE  
                            u8760 C790                              u7890 E0BC  
                            u8690 C72C                              u8940 C876  
                            u8870 C826                              u8790 C7B8  
                            _UART 0076                              _TRMT 007D61  
                            _TXIE 007CEC                              _TXIF 007CF4  
           __end_of_decode_drawer B8C4                   ??_getUserInputs 000D  
             standbyMode@foodType 0140                 viewLogs@logNumber 005C  
      horizontalStepper@direction 0008                              _main C12E  
                            _keys FCC3                   food_press@F3117 00D0  
                            _uart 00F0                              fsr1h 000FE2  
                            fsr2h 000FDA                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   get_digits@sum 0001                              prodh 000FF4  
                            prodl 000FF3            mainOperation@foodTable 0090  
                            start 0000                     __CFG_IESO$OFF 000000  
               viewLogs@keypress2 005D                  _moveHorizontally BDF4  
             standbyMode@keypress 016B                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000000                       _writeEEPROM B040  
                 diet_press@F3132 00C8                   ?_verifyKeypress 0001  
                __end_of_LCD_LEFT FCFF               standbyMode@whichKey 0169  
                 food_press@count 0035                   food_press@tally 002F  
           I2C_Master_Read@ackBit 0002                  ?_I2C_Master_Init 000E  
                ?_I2C_Master_Read 0001                  ?_I2C_Master_Wait 0001  
                ?_I2C_Master_Stop 0001                   __end_of___aldiv B7E2  
              writeEEPROM@address 0002                             ?_main 0001  
                           _EEADR 000FA9                             STR_10 FFBF  
                           STR_11 FFEB                             STR_20 FFC7  
                           STR_12 FFF3                             STR_21 FFD1  
                           STR_13 FFE7                             STR_30 FFF7  
                           STR_22 FFCC                             STR_14 FFEF  
                           STR_31 FFB9                             STR_23 FFBB  
                           STR_15 FFC3                             STR_40 FD6B  
                           STR_32 FFE3                             STR_24 FFE5  
                           STR_16 FFBE                             STR_41 FEC1  
                           STR_33 FFDF                             STR_25 FFFB  
                           STR_17 FFC8                             STR_50 FE69  
                           STR_42 FD7C                             STR_34 FFDB  
                           STR_26 FFBA                             STR_18 FFC2  
                           STR_43 FF1C                             STR_51 FDBD  
                           STR_35 FFB8                             STR_27 FFE4  
                           STR_19 FFBD                             STR_36 FF94  
                           STR_52 FF8C                             STR_60 FE3C  
                           STR_44 FD49                             STR_28 FFFA  
                           STR_45 FF7B                             STR_61 FF3D  
                           STR_37 FF1C                             STR_53 FDCD  
                           STR_29 FFE0                             STR_70 FDDD  
                           STR_54 FE66                             STR_62 FFD6  
                           STR_46 FFAB                             STR_38 FE4B  
                           STR_39 FF1C                             STR_55 FE62  
                           STR_47 FD6B                             STR_63 FEF7  
                           STR_71 FEB3                             STR_48 FEC1  
                           STR_72 FF32                             STR_56 FE5E  
                           STR_80 FF04                             STR_64 FE0D  
                           STR_49 FFB2                             STR_81 FF53  
                           STR_57 FE5A                             STR_73 FE2D  
                           STR_65 FDAD                             STR_66 FDAD  
                           STR_74 FE2D                             STR_82 FE78  
                           STR_90 FDED                             STR_58 FD04  
                           STR_91 FE0D                             STR_75 FF9C  
                           STR_67 FEA5                             STR_83 FE87  
                           STR_59 FD5A                             STR_76 FD6B  
                           STR_92 FF5D                             STR_84 FF48  
                           STR_68 FF32                             STR_85 FF11  
                           STR_69 FDDD                             STR_93 FD9D  
                           STR_77 FD38                             STR_86 FECF  
                           STR_94 FE96                             STR_78 FDFD  
                           STR_87 FD38                             STR_95 FF84  
                           STR_79 FD8D                             STR_96 FF5D  
                           STR_88 FEEA                             STR_97 FD9D  
                           STR_89 FD27                             STR_98 FE96  
                           STR_99 FF84                   __end_of___lldiv B48C  
                           u11001 BF94                 viewLogs@returnVal 0058  
                           u10210 C5B6                             u11011 BFA6  
                           u10300 C5FC                             u11021 BFB8  
                           u11031 BFCA                             u11040 C022  
                           u10410 B5EE                             u10340 C66C  
                           u10430 B622                             u10350 C694  
                           u12007 DB82                             u11080 C234  
                           u12017 DBA2                             u10601 F042  
                           u12107 D2A8                             u12027 DBD8  
                           u11307 C1DC                             u10525 B4AE  
                           u12117 D344                             u12037 DCBE  
                           u11317 C1F4                             u10710 F482  
                           u10630 F25E                             u12207 AF82  
                           u12127 D77C                             u12047 DCE6  
                           u11407 F0D4                             u10551 EFE8  
                           u11327 C20C                             u12217 B3AE  
                           u10385 B20E                             u12137 D7AE  
                           u12057 DD18                             u11417 F0FA  
                           u10561 EFFA                             u11337 C224  
                           u10490 B77C                             u12227 B3B8  
                           u12147 C08E                             u10395 AFEC  
                           u12067 C30C                             u11507 F366  
                           u11427 F114                             u10571 F00C  
                           u11347 C256                             u10396 AFEE  
                           u10660 F3C4                             u12237 B3EE  
                           u12157 C0DC                             u12077 C420  
                           u11517 F380                             u11437 F14C  
                           u10581 F01E                             u11357 C26E  
                           u10670 F3CC                             u12247 B3F8  
                           u12167 AFAA                             u12087 C4B0  
                           u11607 F5F6                             u11527 F3E4  
                           u11447 F184                             u10591 F030  
                           u11367 C286                             u10760 F51E  
                           u10680 F3D8                             u12177 B53E  
                           u12097 C4E2                             u11617 F78A  
                           u11537 F41C                             u11457 F278  
                           u11377 C29E                             u11297 C16A  
                           u12187 B0F0                             u11707 FC4E  
                           u11627 F846                             u11547 F438  
                           u11467 F2AA                             u11387 C2B4  
                           u10860 F82A                             u12197 B124  
                           u11717 FC72                             u11637 F87E  
                           u11557 F48E                             u11477 F2C4  
                           u11397 C2D4                             u10950 FAC8  
                           u11807 CCD2                             u11727 FCAA  
                           u11647 F8A4                             u11567 F53A  
                           u11487 F31A                             u10960 FB96  
                           u11817 CCF2                             u11737 C50C  
                           u11657 F8DC                             u11577 F572  
                           u11497 F334                             u10970 FBA8  
                           u11907 D928                             u11827 CD2A  
                           u11747 C6B0                             u11667 F902  
                           u11587 F598                             u11917 D97E  
                           u11837 CD44                             u11757 CBF0  
                           u11677 FBD6                             u11597 F5D0  
                           u11927 D9C0                             u11847 CDF8  
                           u11767 CC22                             u11687 FBFC  
                           u11937 D9DE                             u11857 CE10  
                           u11777 CC54                             u11697 FC16  
                           u11947 DA30                             u11867 CE30  
                           u11787 CC86                             u11957 DA74  
                           u11877 CE48                             u11797 CCA0  
                           u11967 DAB8                             u11887 CE7A  
                           u11977 DAFC                             u11897 D8DE  
                           u11987 DB1A                             u11997 DB64  
                 __end_of___lwdiv B188                   __end_of___lwmod B0EA  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                           _PORTB 000F81                sortDrawerList@temp 002B  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                    ?_mainOperation 0001  
                           _TXREG 000FAD                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                   __end_of_getFlat B9B4  
                   __CFG_WRT3$OFF 000000                   diet_press@count 0033  
                 __end_of_lcdInst AF8A                   __end_of_getLong BCD0  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                __size_of_UART_Init 0084  
                     initEEPROM@i 0003                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                 __end_of_initLCD B136                    __CFG_EBTRB$OFF 000000  
            __size_of_decode_diet 0124                   __end_of_dpowers FCEF  
              printFoodInput@food 0001                      displayLogs@i 0046  
                    displayLogs@n 0050                   __end_of_isdigit AFD0  
                           _input FCD4                             _rowUp 007B  
                           _putch AF9E                             main@i 0068  
                           tablat 000FF5              standbyMode@logNumber 017F  
               _LCDinterruptState 0074                             plusw1 000FE3  
                           plusw2 000FDB                             status 000FD8  
     I2C_Master_Read@receivedByte 0003              standbyMode@keypress1 0176  
                  __CFG_PBADEN$ON 000000                   standbyMode@diet 0180  
                 standbyMode@flat 016E                   standbyMode@food 0184  
      horizontalStepper@rotations 0006                   standbyMode@time 0160  
                 standbyMode@zero 0179                   __initialization B316  
                    __end_of_main C300                      __end_of_keys FCD4  
                  _sortDrawerList DD3E                      standbyMode@i 0188  
                    standbyMode@n 017B                      standbyMode@x 017D  
         __size_of_moveVertically 0258                  ??_printFoodInput 0003  
                  __CFG_OSC$HSPLL 000000                 __end_of_LCD_RIGHT FD00  
                food_press@drawer 002B                            ??_main 0062  
                   __activetblptr 000003               sortDrawerList@F3072 006A  
             sortDrawerList@F3081 00D8               sortDrawerList@F3075 00E8  
             sortDrawerList@F3078 00E0               food_press@backCheck 0031  
               ?_I2C_Master_Start 0001                 ?_I2C_Master_Write 0002  
                    ?_shiftEEPROM 0001                ??_I2C_Master_Start 0002  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
              ??_I2C_Master_Write 0004             standbyMode@flatPieces 0110  
                          STR_100 FF27                            STR_101 FEDD  
                          STR_102 FF27                            STR_103 FEDD  
                          STR_104 FF27                            STR_105 FFA4  
                          STR_106 FD16                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _EEDATA 000FA8  
                          _EECON2 000FA7                            ?_putch 0001  
         mainOperation@nextDrawer 00C2                            _SSPADD 000FC8  
                          _TRISC6 007CA6                            _TRISC7 007CA7  
                          _SSPBUF 000FC9                  diet_press@drawer 0029  
       standbyMode@storedFoodType 0174            __end_of_sortDrawerList E522  
                  __CFG_XINST$OFF 000000                  __end_of_getRound BAA4  
                 _verticalStepper B2A6                 __end_of_UART_Init B510  
                       ??___aldiv 0009                            ___wmul B01A  
                  __CFG_STVREN$ON 000000                         ??___lldiv 0009  
                       ??___lwdiv 0005                         ??___lwmod 000C  
          decode_diet@returnValue 0005              _uartTransmitBlocking B510  
                          clear_0 B35C                            clear_1 B368  
                          clear_2 B374                            clear_3 B380  
                          _inputs 0240                    _firstIteration 0072  
                       ??_getFlat 0003                         ??_lcdInst 0003  
                          _printf CEAA                         ??_getLong 0003  
            __size_of_displayLogs 0570                   ??_mainOperation 0037  
             food_press@foodTable 0038                         ??_initLCD 0004  
                 get_digits@count 0005                      __pdataCOMRAM 0076  
                       ??_isdigit 0001          getUserInputs@drawerTable 0007  
      moveHorizontally@nextDrawer 000E                      __mediumconst FCC2  
                __end_of_viewLogs CEAA          mainOperation@drawerTable 00A0  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                  standbyMode@F3160 0210  
                standbyMode@F3152 01AA                  standbyMode@F3162 0200  
                standbyMode@F3154 019A                  standbyMode@F3156 018A  
                standbyMode@F3158 0220               decode_diet@dietType 0001  
           standbyMode@longPieces 0120                        __accesstop 0080  
         __end_of__initialization B386              which_drawer@keypress 0034  
                   ___rparam_used 000001                  standbyMode@round 016C  
                 writeEEPROM@data 0001                   viewLogs@logView 005A  
          standbyMode@decodedDiet 0172                   ?_sortDrawerList 0001  
                    ?_standbyMode 005E              __end_of_happynewyear FCFE  
                  __pcstackCOMRAM 0001                      __pidataBANK2 B06A  
                   __end_of_input FCE5             ?_uartTransmitBlocking 0001  
                   __end_of_putch AFB2                __size_of_lcdNibble 007E  
                   check_food@sum 0001          __end_of_moveHorizontally BF68  
       sortDrawerList@drawerTable 0001                 food_press@dietSum 0029  
               food_press@isValid 0033                           ??_putch 0003  
                      __pbssBANK0 00C8                        __pbssBANK1 018A  
                      __pbssBANK2 0200                        _check_food E522  
               mainOperation@temp 00C0           __end_of_verticalStepper B316  
                ??_verifyKeypress 0003                      ?_writeEEPROM 0001  
                  _moveVertically C966                           ?___wmul 0001  
                      _diet_press D29C           displayLogs@drawerNumber 0044  
                         ?_printf 000D                        _arr_dataRX 0230  
                      _get_digits B658              sortDrawerList@count1 0031  
            sortDrawerList@count2 002F              sortDrawerList@count3 002D  
            sortDrawerList@count4 0029                         ?_getRound 0001  
                         _SSPCON1 000FC6                           _SSPCON2 000FC5  
                         _SSPSTAT 000FC7              __size_of_shiftEEPROM 00AE  
                      _columnLeft 0079                        _foodInputs 0264  
                      _initEEPROM AFF4                        _readEEPROM AF8A  
          standbyMode@drawerCount 0186             __end_of_getUserInputs BBBA  
                      _food_press C300                horizontalStepper@i 000A  
               __end_of_lcdNibble B40A                           __Hparam 0000  
          __end_of_moveVertically CBBE                           __Lparam 0000  
                       ?_viewLogs 0052                           ___aldiv B716  
          ??_uartTransmitBlocking 0004          displayLogs@operationTime 0042  
                         ___lldiv B40A                   __size_of___wmul 0026  
                         ___lwdiv B136                           ___lwmod B0A8  
                         __pcinit B316                           __ramtop 1000  
                         _getFlat B8C4     moveHorizontally@currentDrawer 000C  
                         _lcdInst AF76                           _getLong BBBA  
                         __ptext0 C12E                           __ptext1 EFDE  
                         __ptext2 C4FA                           __ptext3 B7E2  
                         __ptext4 CBBE                           __ptext5 B188  
                         __ptext6 D7CE                           __ptext7 B5AA  
                         __ptext8 C710                           __ptext9 B9B4  
          __size_of_decode_drawer 00E2                   __size_of_printf 03F2  
                         _initLCD B0EA                 __end_of_hexpowers FCF7  
                         _dpowers FCE5                     ??_decode_diet 0003  
           which_drawer@backCheck 0030                           _isdigit AFB2  
                  displayLogs@day 0031                  ___aldiv@dividend 0001  
                       _LCD_RIGHT FCFF          __size_of_I2C_Master_Init 005C  
        __size_of_I2C_Master_Read 0024          __size_of_I2C_Master_Wait 0012  
            displayLogs@logNumber 0029          __size_of_I2C_Master_Stop 0008  
                         _rowDown 007A                 _horizontalStepper B236  
                      ??_getRound 0003              end_of_initialization B386  
            displayLogs@keypress3 0041                ?_horizontalStepper 0006  
                 which_drawer@sum 002E             __end_of_LCD_SIZE_HORZ FD02  
                     ?_check_food 0001             __end_of_LCD_SIZE_VERT FD01  
                ?_verticalStepper 0006                 main@operationMode 0064  
       __size_of_I2C_Master_Start 0008         __size_of_I2C_Master_Write 000A  
                 ___lldiv@divisor 0005               ??_horizontalStepper 000A  
                 ___lldiv@counter 000D                   ?_moveVertically 000C  
                       _RCSTAbits 000FAB                           printf@c 0028  
                         printf@f 000D                  ___aldiv@quotient 000B  
                         postdec1 000FE5                           postdec2 000FDD  
                      ??_viewLogs 0054                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
            __size_of_standbyMode 0CE4                       ?_diet_press 0029  
                       _UART_Init B48C                         _PORTBbits 000F81  
                   ?_which_drawer 0029               diet_press@backCheck 0031  
                     ?_get_digits 0001         __end_of_horizontalStepper B2A6  
          sortDrawerList@sublist1 0009            sortDrawerList@sublist2 0011  
          sortDrawerList@sublist3 0019            sortDrawerList@sublist4 0021  
                       _TRISCbits 000F94                  viewLogs@checkLog 0056  
                    _happynewyear FCF7                 readEEPROM@address 0001  
             __end_of_decode_diet BDF4                 standbyMode@drawer 0182  
                     ?_initEEPROM 0001                  ??_sortDrawerList 0005  
                   _decode_drawer B7E2                       ?_readEEPROM 0001  
                     printf@width 0026                         _TXSTAbits 000FAC  
                     ?_food_press 0029               diet_press@dietTable 0038  
                 main@checkEEPROM 0066                     ??_displayLogs 002B  
            __size_of_writeEEPROM 002A                    __end_of___wmul B040  
                      ?_UART_Init 000F                     __pidataCOMRAM AF44  
          standbyMode@validDrawer 0177               __size_of_check_food 0ABC  
                  ??_which_drawer 002B                    __end_of_printf D29C  
           __end_of_mainOperation C12E               start_initialization B316  
                  standbyMode@lng 0170                 ?_moveHorizontally 000C  
         __size_of_printFoodInput 0256                ??_moveHorizontally 0010  
                  ?_decode_drawer 0001               __size_of_diet_press 0532  
               ??_I2C_Master_Init 0012                 ??_I2C_Master_Read 0002  
               ??_I2C_Master_Wait 0001                 ??_I2C_Master_Stop 0002  
    standbyMode@drawerInformation 0150               __size_of_get_digits 00BE  
              mainOperation@F3130 01CA                          ??___wmul 0005  
              mainOperation@F3132 01BA                mainOperation@F3126 01EA  
              mainOperation@F3128 01DA          I2C_Master_Init@clockFreq 000E  
                     __pdataBANK2 0240                  __CFG_LPT1OSC$OFF 000000  
                        ??_printf 0017  uartTransmitBlocking@numTransmits 0005  
             __size_of_initEEPROM 0026                food_press@keypress 0037  
             __size_of_readEEPROM 0014               __end_of_displayLogs DD3E  
             __size_of_food_press 01FA                       __pbssCOMRAM 006A  
                     _decode_diet BCD0        __size_of_horizontalStepper 0070  
                   __pcstackBANK0 0080                     __pcstackBANK1 0100  
                 sortDrawerList@i 0035                   sortDrawerList@j 0033  
                    _isdigit$1607 0002               decode_drawer@drawer 0001  
               __size_of_getRound 00F0            standbyMode@roundPieces 0100  
                _I2C_Master_Start AF4A                  _I2C_Master_Write AF5A  
                  mainOperation@i 00C6                  ___lwdiv@dividend 0001  
               __CFG_CCP2MX$PORTC 000000                _UARTinterruptState 0075  
                   __pmediumconst FCC2                     UART_Init@baud 000F  
                       _lcdNibble B38C                          ?___aldiv 0001  
                        ?___lldiv 0001                getUserInputs@count 0011  
                        ?___lwdiv 0001                          ?___lwmod 0008  
                     ??_UART_Init 0013                 __size_of_viewLogs 02EC  
                        ?_getFlat 0001                          ?_lcdInst 0001  
                        ?_getLong 0001                          ?_initLCD 0001  
                        ?_isdigit 0001               check_food@foodInput 0003  
        moveVertically@nextDrawer 000E                     ??_shiftEEPROM 0003  
             displayLogs@dietType 003D                         _hexpowers FCEF  
                ___lwdiv@quotient 0005                   ??_decode_drawer 0003  
                  __size_of_putch 0014               displayLogs@foodType 003F  
                    ??_check_food 0005                          _LCD_LEFT FCFE  
                displayLogs@month 002F                   ___aldiv@divisor 0005  
                ??_moveVertically 0010                   ___aldiv@counter 0009  
                  ___wmul@product 0005                          _LATCbits 000F8B  
                        _LATDbits 000F8C              __end_of_which_drawer C710  
                __CFG_WDTPS$32768 000000                        ?_lcdNibble 0001  
                    ??_diet_press 002B                      shiftEEPROM@i 0006  
                     _displayLogs D7CE     __size_of_uartTransmitBlocking 009A  
 sortDrawerList@sortedDrawerTable 0003           __size_of_verifyKeypress 0052  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0001  
              __end_of_check_food EFDE                     lcdNibble@data 0002  
                      printf@flag 0025                       _columnRight 0078  
                   lcdNibble@temp 0001                        printf@prec 001C  
                    ??_get_digits 0003            __size_of_getUserInputs 0116  
                  _printFoodInput C710                    _LCD_HORZ_LIMIT FD03  
        verticalStepper@direction 0008                     diet_press@sum 0035  
                       copy_data0 B32A                         copy_data1 B34A  
               which_drawer@count 0032                      ??_initEEPROM 0003  
             __end_of_shiftEEPROM B658            getUserInputs@dietTable 0009  
              __end_of_diet_press D7CE                      ??_readEEPROM 0001  
                    ??_food_press 002D                diet_press@keypress 0037  
                      _EECON1bits 000FA6                          __Hrparam 0000  
                   ??_standbyMode 0060                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                __end_of_get_digits B716  
              diet_press@previous 002D          __size_of_verticalStepper 0070  
  mainOperation@sortedDrawerTable 00B0            getUserInputs@foodTable 000B  
                __size_of___aldiv 00CC                  __size_of___lldiv 0082  
           displayLogs@flatPieces 0035                  __size_of___lwdiv 0052  
                __size_of___lwmod 0042                  __size_of_getFlat 00F0  
                __size_of_lcdInst 0014                  __size_of_getLong 0116  
          __end_of_printFoodInput C966            getUserInputs@logNumber 000F  
              __end_of_initEEPROM B01A                   _I2C_Master_Init B1DA  
                 _I2C_Master_Read AFD0                  __size_of_initLCD 004C  
                 _I2C_Master_Wait AF64                __end_of_readEEPROM AF9E  
                 _I2C_Master_Stop AF52            __end_of_LCD_HORZ_LIMIT FD04  
                __size_of_isdigit 001E                __end_of_food_press C4FA  
                 ___lwdiv@divisor 0003                   ___lwdiv@counter 0007  
               getUserInputs@data 0015                          __ptext10 BBBA  
                        __ptext11 B8C4                          __ptext20 AFD0  
                        __ptext12 C300                          __ptext21 AF64  
                        __ptext13 B658                          __ptext30 B136  
                        __ptext22 B1DA                          __ptext14 E522  
                        __ptext31 C966                          __ptext23 B40A  
                        __ptext15 D29C                          __ptext40 AF76  
                        __ptext32 B2A6                          __ptext24 BF68  
                        __ptext16 BCD0                          __ptext41 B38C  
                        __ptext33 BDF4                          __ptext25 DD3E  
                        __ptext17 AF5A                          __ptext42 AFF4  
                        __ptext34 B236                          __ptext26 CEAA  
                        __ptext18 AF52                          __ptext43 B040  
                        __ptext35 B510                          __ptext27 AF9E  
                        __ptext19 AF4A                          __ptext44 B48C  
                        __ptext36 BAA4                          __ptext28 AFB2  
                        __ptext45 B716                          __ptext37 AF8A  
                        __ptext29 B0A8                          __ptext38 B01A  
                        __ptext39 B0EA                          _getRound B9B4  
                  _LCD_VERT_LIMIT FD02          verticalStepper@rotations 0006  
                   __size_of_main 01D2                   displayLogs@year 002D  
                   _getUserInputs BAA4         __size_of_moveHorizontally 0174  
              displayLogs@minutes 0039                displayLogs@seconds 003B  
                   ??_writeEEPROM 0002          displayLogs@markedDrawer1 0048  
        displayLogs@markedDrawer2 004A          displayLogs@markedDrawer3 004C  
        displayLogs@markedDrawer4 004E                       ??_lcdNibble 0001  
                        _viewLogs CBBE                   verifyKeypress@i 0008  
              getLong@returnValue 0005                         printf@idx 001B  
                       printf@len 0021                         printf@val 0023  
             __end_of_standbyMode FCC2       I2C_Master_Write@byteToWrite 0002  
        decode_drawer@returnValue 0005             displayLogs@longPieces 0037  
                 ?_printFoodInput 0001                  which_drawer@rand 002C  
                       putch@data 0003          __end_of_I2C_Master_Start AF52  
        __end_of_I2C_Master_Write AF64                        _INTCONbits 000FF2  
                    ?_decode_diet 0001            __end_of_LCD_VERT_LIMIT FD03  
                     _shiftEEPROM B5AA                          isdigit@c 0003  
           __size_of_which_drawer 0216                       getFlat@code 0001  
       standbyMode@firstIteration 0167                     _LCD_SIZE_HORZ FD01  
                ___lwmod@dividend 0008                     _LCD_SIZE_VERT FD00  
                ___lldiv@dividend 0001           verifyKeypress@logNumber 0005  
                  ?_getUserInputs 0007            __size_of_mainOperation 01C6  
              getFlat@returnValue 0005       moveVertically@currentDrawer 000C  
          displayLogs@roundPieces 0033                          printf@ap 001F  
                        printf@cp 001D           __size_of_sortDrawerList 07E4  
                     diet_press@i 002F           __end_of_I2C_Master_Init B236  
         __end_of_I2C_Master_Read AFF4           __end_of_I2C_Master_Wait AF76  
         __end_of_I2C_Master_Stop AF5A                       lcdInst@data 0003  
                 shiftEEPROM@temp 0004                    _verifyKeypress B188  
             getRound@returnValue 0005                       getLong@code 0001  
             __end_of_writeEEPROM B06A          uartTransmitBlocking@data 0001  
               ??_verticalStepper 000A           verifyKeypress@returnVal 0006  
                ___lldiv@quotient 0009                      _which_drawer C4FA  
                 ___lwmod@divisor 000A                   ___lwmod@counter 000C  
                    ___aldiv@sign 000A            verifyKeypress@keypress 0001  
                verticalStepper@i 000A                       _SSPCON1bits 000FC6  
                     _SSPCON2bits 000FC5                    getUserInputs@i 0017  
                  getUserInputs@n 0013                      getRound@code 0001  
           check_food@returnValue 0007        mainOperation@currentDrawer 00C4  
